
SmartFactory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .BOOT         00000058  00020000  00020000  00006762  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .jmp_table    000000a8  00007e00  00007e00  000066ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00006232  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         000003b4  00802000  00006232  00006306  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002b3  008023b4  008023b4  000067c4  2**4
                  ALLOC
  5 .comment      00000060  00000000  00000000  000067ba  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000681c  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000a60  00000000  00000000  00006860  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001381d  00000000  00000000  000072c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006afb  00000000  00000000  0001aadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00009181  00000000  00000000  000215d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001e6c  00000000  00000000  0002a75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0003af50  00000000  00000000  0002c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008c2a  00000000  00000000  00067518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000960  00000000  00000000  00070148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000c60c  00000000  00000000  00070aa8  2**0
=======
  0 .BOOT         00000058  00020000  00020000  000063e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .jmp_table    000000a8  00007e00  00007e00  0000633e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00005ea8  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         000003c2  00802000  00005ea8  00005f7c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002b5  008023c2  008023c2  00006442  2**4
                  ALLOC
  5 .comment      00000060  00000000  00000000  0000643e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064a0  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000a20  00000000  00000000  000064e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000132c2  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006a6a  00000000  00000000  0001a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008e9a  00000000  00000000  00020c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d60  00000000  00000000  00029ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0003af45  00000000  00000000  0002b828  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008893  00000000  00000000  0006676d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000900  00000000  00000000  0006f000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000c60c  00000000  00000000  0006f900  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_CommonSPM>:
   20000:	fc 01       	movw	r30, r24
   20002:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20006:	2d e9       	ldi	r18, 0x9D	; 157
   20008:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
   2000c:	e8 95       	spm
   2000e:	11 24       	eor	r1, r1
   20010:	3b bf       	out	0x3b, r19	; 59
   20012:	08 95       	ret

00020014 <nvm_common_spm>:
   20014:	9b b7       	in	r25, 0x3b	; 59
   20016:	8b bf       	out	0x3b, r24	; 59
   20018:	fb 01       	movw	r30, r22
   2001a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2001e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20022:	7d e9       	ldi	r23, 0x9D	; 157
   20024:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
   20028:	e8 95       	spm
   2002a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2002e:	9b bf       	out	0x3b, r25	; 59
   20030:	08 95       	ret

00020032 <nvm_flash_load_word_to_buffer>:
   20032:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
   20036:	27 fd       	sbrc	r18, 7
   20038:	fc cf       	rjmp	.-8      	; 0x20032 <nvm_flash_load_word_to_buffer>
   2003a:	9b b7       	in	r25, 0x3b	; 59
   2003c:	8b bf       	out	0x3b, r24	; 59
   2003e:	fb 01       	movw	r30, r22
   20040:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20044:	23 e2       	ldi	r18, 0x23	; 35
   20046:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2004a:	0a 01       	movw	r0, r20
   2004c:	e8 95       	spm
   2004e:	11 24       	eor	r1, r1
   20050:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20054:	9b bf       	out	0x3b, r25	; 59
   20056:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
<<<<<<< Updated upstream
       0:	0c 94 af 02 	jmp	0x55e	; 0x55e <__ctors_end>
       4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
       8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
       c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      10:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      14:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      18:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      1c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      20:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      24:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      28:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      2c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      30:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_12>
      34:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      38:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      3c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      40:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      44:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      48:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      4c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      50:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      54:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      58:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      5c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      60:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      64:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      68:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      6c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      70:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      74:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      78:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      7c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      80:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      84:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      88:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      8c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      90:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      94:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      98:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      9c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      b4:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_45>
      b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      fc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     100:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     104:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     108:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     10c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     110:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     114:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     118:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     11c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     120:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     124:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     128:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     12c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_75>
     130:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     134:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     138:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     13c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     140:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     144:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     148:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     14c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     150:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     154:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     158:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     15c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     160:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     164:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     168:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     16c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     170:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     174:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     178:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     17c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     180:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     184:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     188:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     18c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     190:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <__vector_100>
     194:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__vector_101>
     198:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     19c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a8:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_106>
     1ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1f0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1f4:	0c 94 bf 29 	jmp	0x537e	; 0x537e <__vector_125>
     1f8:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__vector_126>
     1fc:	aa 0c       	add	r10, r10
     1fe:	b9 0c       	add	r11, r9
     200:	c8 0c       	add	r12, r8
     202:	d7 0c       	add	r13, r7
     204:	e5 0c       	add	r14, r5
     206:	f4 0c       	add	r15, r4
     208:	03 0d       	add	r16, r3
     20a:	11 0d       	add	r17, r1
     20c:	1e 0d       	add	r17, r14
     20e:	2d 0d       	add	r18, r13
     210:	3c 0d       	add	r19, r12
     212:	4b 0d       	add	r20, r11
     214:	64 16       	cp	r6, r20
     216:	73 16       	cp	r7, r19
     218:	82 16       	cp	r8, r18
     21a:	91 16       	cp	r9, r17
     21c:	9f 16       	cp	r9, r31
     21e:	ae 16       	cp	r10, r30
     220:	bd 16       	cp	r11, r29
     222:	cb 16       	cp	r12, r27
     224:	d8 16       	cp	r13, r24
     226:	e7 16       	cp	r14, r23
     228:	f6 16       	cp	r15, r22
     22a:	05 17       	cp	r16, r21
     22c:	bd 17       	cp	r27, r29
     22e:	bd 17       	cp	r27, r29
     230:	bd 17       	cp	r27, r29
     232:	bd 17       	cp	r27, r29
     234:	bd 17       	cp	r27, r29
     236:	bd 17       	cp	r27, r29
     238:	bd 17       	cp	r27, r29
     23a:	bd 17       	cp	r27, r29
     23c:	bd 17       	cp	r27, r29
     23e:	bd 17       	cp	r27, r29
     240:	bd 17       	cp	r27, r29
     242:	bd 17       	cp	r27, r29
     244:	bd 17       	cp	r27, r29
     246:	bd 17       	cp	r27, r29
     248:	bd 17       	cp	r27, r29
     24a:	bd 17       	cp	r27, r29
     24c:	bd 17       	cp	r27, r29
     24e:	bd 17       	cp	r27, r29
     250:	bd 17       	cp	r27, r29
     252:	bd 17       	cp	r27, r29
     254:	bb 17       	cp	r27, r27
     256:	bb 17       	cp	r27, r27
     258:	bb 17       	cp	r27, r27
     25a:	bb 17       	cp	r27, r27
     25c:	bb 17       	cp	r27, r27
     25e:	bb 17       	cp	r27, r27
     260:	bb 17       	cp	r27, r27
     262:	bb 17       	cp	r27, r27
     264:	bb 17       	cp	r27, r27
     266:	bb 17       	cp	r27, r27
     268:	bb 17       	cp	r27, r27
     26a:	bb 17       	cp	r27, r27
     26c:	bb 17       	cp	r27, r27
     26e:	bb 17       	cp	r27, r27
     270:	bb 17       	cp	r27, r27
     272:	bb 17       	cp	r27, r27
     274:	bb 17       	cp	r27, r27
     276:	bb 17       	cp	r27, r27
     278:	bb 17       	cp	r27, r27
     27a:	bb 17       	cp	r27, r27
     27c:	bf 17       	cp	r27, r31
     27e:	bf 17       	cp	r27, r31
     280:	bf 17       	cp	r27, r31
     282:	bf 17       	cp	r27, r31
     284:	bf 17       	cp	r27, r31
     286:	bf 17       	cp	r27, r31
     288:	bf 17       	cp	r27, r31
     28a:	bf 17       	cp	r27, r31
     28c:	bf 17       	cp	r27, r31
     28e:	bf 17       	cp	r27, r31
     290:	b9 17       	cp	r27, r25
     292:	b9 17       	cp	r27, r25
     294:	b9 17       	cp	r27, r25
     296:	b9 17       	cp	r27, r25
     298:	b9 17       	cp	r27, r25
     29a:	b9 17       	cp	r27, r25
     29c:	b9 17       	cp	r27, r25
     29e:	b9 17       	cp	r27, r25
     2a0:	b9 17       	cp	r27, r25
     2a2:	b9 17       	cp	r27, r25
     2a4:	bf 17       	cp	r27, r31
     2a6:	bf 17       	cp	r27, r31
     2a8:	bf 17       	cp	r27, r31
     2aa:	bf 17       	cp	r27, r31
     2ac:	bf 17       	cp	r27, r31
     2ae:	bf 17       	cp	r27, r31
     2b0:	bf 17       	cp	r27, r31
     2b2:	bf 17       	cp	r27, r31
     2b4:	bf 17       	cp	r27, r31
     2b6:	bf 17       	cp	r27, r31
     2b8:	bf 17       	cp	r27, r31
     2ba:	bf 17       	cp	r27, r31
     2bc:	bf 17       	cp	r27, r31
     2be:	bf 17       	cp	r27, r31
     2c0:	bf 17       	cp	r27, r31
     2c2:	bf 17       	cp	r27, r31
     2c4:	bf 17       	cp	r27, r31
     2c6:	bf 17       	cp	r27, r31
     2c8:	bf 17       	cp	r27, r31
     2ca:	bf 17       	cp	r27, r31
     2cc:	b7 17       	cp	r27, r23
     2ce:	b7 17       	cp	r27, r23
     2d0:	b7 17       	cp	r27, r23
     2d2:	b7 17       	cp	r27, r23
     2d4:	b7 17       	cp	r27, r23
     2d6:	b7 17       	cp	r27, r23
     2d8:	b7 17       	cp	r27, r23
     2da:	b7 17       	cp	r27, r23
     2dc:	b7 17       	cp	r27, r23
     2de:	b7 17       	cp	r27, r23
     2e0:	b7 17       	cp	r27, r23
     2e2:	b7 17       	cp	r27, r23
     2e4:	b7 17       	cp	r27, r23
     2e6:	b7 17       	cp	r27, r23
     2e8:	b7 17       	cp	r27, r23
     2ea:	b5 17       	cp	r27, r21
     2ec:	b5 17       	cp	r27, r21
     2ee:	b5 17       	cp	r27, r21
     2f0:	b5 17       	cp	r27, r21
     2f2:	b5 17       	cp	r27, r21
     2f4:	b5 17       	cp	r27, r21
     2f6:	b5 17       	cp	r27, r21
     2f8:	b5 17       	cp	r27, r21
     2fa:	b5 17       	cp	r27, r21
     2fc:	b5 17       	cp	r27, r21
     2fe:	b5 17       	cp	r27, r21
     300:	b5 17       	cp	r27, r21
     302:	b5 17       	cp	r27, r21
     304:	b5 17       	cp	r27, r21
     306:	b5 17       	cp	r27, r21
     308:	b3 17       	cp	r27, r19
     30a:	b3 17       	cp	r27, r19
     30c:	b3 17       	cp	r27, r19
     30e:	b3 17       	cp	r27, r19
     310:	b3 17       	cp	r27, r19
     312:	b3 17       	cp	r27, r19
     314:	b3 17       	cp	r27, r19
     316:	b3 17       	cp	r27, r19
     318:	b3 17       	cp	r27, r19
     31a:	b3 17       	cp	r27, r19
     31c:	b3 17       	cp	r27, r19
     31e:	b3 17       	cp	r27, r19
     320:	b3 17       	cp	r27, r19
     322:	b3 17       	cp	r27, r19
     324:	b3 17       	cp	r27, r19
     326:	b3 17       	cp	r27, r19
     328:	b3 17       	cp	r27, r19
     32a:	b3 17       	cp	r27, r19
     32c:	b3 17       	cp	r27, r19
     32e:	b3 17       	cp	r27, r19
     330:	b1 17       	cp	r27, r17
     332:	b1 17       	cp	r27, r17
     334:	b1 17       	cp	r27, r17
     336:	b1 17       	cp	r27, r17
     338:	b1 17       	cp	r27, r17
     33a:	b1 17       	cp	r27, r17
     33c:	b1 17       	cp	r27, r17
     33e:	b1 17       	cp	r27, r17
     340:	b1 17       	cp	r27, r17
     342:	b1 17       	cp	r27, r17
     344:	af 17       	cp	r26, r31
     346:	af 17       	cp	r26, r31
     348:	af 17       	cp	r26, r31
     34a:	af 17       	cp	r26, r31
     34c:	af 17       	cp	r26, r31
     34e:	af 17       	cp	r26, r31
     350:	af 17       	cp	r26, r31
     352:	af 17       	cp	r26, r31
     354:	af 17       	cp	r26, r31
     356:	af 17       	cp	r26, r31
     358:	af 17       	cp	r26, r31
     35a:	af 17       	cp	r26, r31
     35c:	af 17       	cp	r26, r31
     35e:	af 17       	cp	r26, r31
     360:	af 17       	cp	r26, r31
     362:	af 17       	cp	r26, r31
     364:	af 17       	cp	r26, r31
     366:	af 17       	cp	r26, r31
     368:	af 17       	cp	r26, r31
     36a:	af 17       	cp	r26, r31
     36c:	af 17       	cp	r26, r31
     36e:	af 17       	cp	r26, r31
     370:	af 17       	cp	r26, r31
     372:	af 17       	cp	r26, r31
     374:	af 17       	cp	r26, r31
     376:	af 17       	cp	r26, r31
     378:	af 17       	cp	r26, r31
     37a:	af 17       	cp	r26, r31
     37c:	af 17       	cp	r26, r31
     37e:	af 17       	cp	r26, r31
     380:	ad 17       	cp	r26, r29
     382:	ad 17       	cp	r26, r29
     384:	ad 17       	cp	r26, r29
     386:	ad 17       	cp	r26, r29
     388:	ad 17       	cp	r26, r29
     38a:	ab 17       	cp	r26, r27
     38c:	ab 17       	cp	r26, r27
     38e:	ab 17       	cp	r26, r27
     390:	ab 17       	cp	r26, r27
     392:	ab 17       	cp	r26, r27
     394:	a9 17       	cp	r26, r25
     396:	a9 17       	cp	r26, r25
     398:	a9 17       	cp	r26, r25
     39a:	a9 17       	cp	r26, r25
     39c:	a9 17       	cp	r26, r25
     39e:	a7 17       	cp	r26, r23
     3a0:	a7 17       	cp	r26, r23
     3a2:	a7 17       	cp	r26, r23
     3a4:	a7 17       	cp	r26, r23
     3a6:	a7 17       	cp	r26, r23
     3a8:	c1 17       	cp	r28, r17
     3aa:	c1 17       	cp	r28, r17
     3ac:	c1 17       	cp	r28, r17
     3ae:	c1 17       	cp	r28, r17
     3b0:	c1 17       	cp	r28, r17
     3b2:	c1 17       	cp	r28, r17
     3b4:	24 24       	eor	r2, r4
     3b6:	27 24       	eor	r2, r7
     3b8:	2a 24       	eor	r2, r10
     3ba:	2d 24       	eor	r2, r13
     3bc:	30 24       	eor	r3, r0
     3be:	33 24       	eor	r3, r3
     3c0:	36 24       	eor	r3, r6

000003c2 <__trampolines_start>:
     3c2:	0c 94 16 17 	jmp	0x2e2c	; 0x2e2c <_Z11DigitalReadi>
     3c6:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <_Z15ReadSharpSensorh+0x22>
     3ca:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <udi_cdc_data_setup>
     3ce:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <_Z8StopBeltj>
     3d2:	0c 94 27 24 	jmp	0x484e	; 0x484e <udd_ep_get_size+0x28>
     3d6:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <_Z12IO_ReadWritebh+0x1e>
     3da:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_Z12IO_ReadWritebh+0xb2>
     3de:	0c 94 05 04 	jmp	0x80a	; 0x80a <_Z9isSmallerii>
     3e2:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <_Z12IO_ReadWritebh+0x106>
     3e6:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <_Z14requestStartedv>
     3ea:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <udi_cdc_line_coding_received>
     3ee:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <SelectColour>
     3f2:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <_Z12IO_ReadWritebh+0xec>
     3f6:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <udd_ep_get_size+0x2e>
     3fa:	0c 94 65 1f 	jmp	0x3eca	; 0x3eca <udc_valid_address>
     3fe:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <_Z15passthrough_TWIv>
     402:	0c 94 03 12 	jmp	0x2406	; 0x2406 <HomeSorterArm>
     406:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <_Z12IO_ReadWritebh+0x94>
     40a:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <IO_ReadWrite+0x142>
     40e:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <IO_ReadWrite+0xb2>
     412:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <udi_cdc_data_enable>
     416:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_Z7isEqualii>
     41a:	0c 94 95 13 	jmp	0x272a	; 0x272a <_Z13MoveTurntablebji>
     41e:	0c 94 36 24 	jmp	0x486c	; 0x486c <udd_ep_get_size+0x46>
     422:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <_Z15ReadSharpSensorh+0x46>
     426:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <MoveElevator>
     42a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <_Z15ReadSharpSensorh+0x36>
     42e:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <_Z12IO_ReadWritebh+0x78>
     432:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <_Z12IO_ReadWritebh+0x160>
     436:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_Z8multiplyii>
     43a:	0c 94 85 03 	jmp	0x70a	; 0x70a <_Z3addii>
     43e:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <udi_cdc_data_sent>
     442:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <_Z8Solenoidhb>
     446:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <MoveSorterArmTo>
     44a:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <_Z9ToggleLEDv>
     44e:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <_Z12IO_ReadWritebh+0x142>
     452:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_Z11printNumberj>
     456:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <IO_ReadWrite+0x106>
     45a:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <IO_ReadWrite+0x160>
     45e:	0c 94 68 1b 	jmp	0x36d0	; 0x36d0 <udi_cdc_data_sof_notify>
     462:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <_Z15ReadSharpSensorh+0x4a>
     466:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <udi_cdc_comm_enable>
     46a:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <IO_ReadWrite+0xd0>
     46e:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <IO_ReadWrite+0x5a>
     472:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <_Z12IO_ReadWritebh+0x5a>
     476:	0c 94 33 14 	jmp	0x2866	; 0x2866 <_Z17StopDemoTestBlockv>
     47a:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <_Z3LEDb>
     47e:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <udi_cdc_data_disable>
     482:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <ElevatorIsReady>
     486:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <udi_cdc_data_received>
     48a:	0c 94 a9 17 	jmp	0x2f52	; 0x2f52 <_Z15ReadSharpSensorh+0x26>
     48e:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <IO_ReadWrite+0x124>
     492:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <_Z12IO_ReadWritebh+0x124>
     496:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <_Z15ReadSharpSensorh+0x32>
     49a:	0c 94 81 03 	jmp	0x702	; 0x702 <_Z6invertj>
     49e:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <_Z10AnalogReadi>
     4a2:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <_Z13PulseSolenoidh>
     4a6:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <_Z15ReadSharpSensorh+0x3a>
     4aa:	0c 94 2d 24 	jmp	0x485a	; 0x485a <udd_ep_get_size+0x34>
     4ae:	0c 94 24 10 	jmp	0x2048	; 0x2048 <SorterarmIsFinnished>
     4b2:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_Z8isBiggerii>
     4b6:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <_Z15OptocouplerReadi>
     4ba:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_Z9delay1secv>
     4be:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <udi_cdc_comm_setup>
     4c2:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <IO_ReadWrite+0x3c>
     4c6:	0c 94 33 24 	jmp	0x4866	; 0x4866 <udd_ep_get_size+0x40>
     4ca:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <udi_cdc_getsetting>
     4ce:	0c 94 20 04 	jmp	0x840	; 0x840 <_Z9logic_andbb>
     4d2:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <IO_ReadWrite+0xec>
     4d6:	0c 94 10 13 	jmp	0x2620	; 0x2620 <_Z8MoveBeltbji>
     4da:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <_Z13StopTurntablej>
     4de:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <MoveSorterArmDistance>
     4e2:	0c 94 23 04 	jmp	0x846	; 0x846 <_Z9logic_xorbb>
     4e6:	0c 94 3e 1a 	jmp	0x347c	; 0x347c <udi_cdc_comm_disable>
     4ea:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <IO_ReadWrite+0x94>
     4ee:	0c 94 96 17 	jmp	0x2f2c	; 0x2f2c <_Z15ReadSharpSensorh>
     4f2:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <_Z15ReadSharpSensorh+0x2a>
     4f6:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <_Z12IO_ReadWritebh+0xd0>
     4fa:	0c 94 01 14 	jmp	0x2802	; 0x2802 <_Z13DemoTestBlockv>
     4fe:	0c 94 af 03 	jmp	0x75e	; 0x75e <_Z8subtractii>
     502:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_Z8delay_msj>
     506:	0c 94 26 10 	jmp	0x204c	; 0x204c <StopSorterArm>
     50a:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <IO_ReadWrite+0x1e>
     50e:	0c 94 bf 1b 	jmp	0x377e	; 0x377e <udi_cdc_serial_state_msg_sent>
     512:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <_Z15ReadSharpSensorh+0x52>
     516:	0c 94 24 24 	jmp	0x4848	; 0x4848 <udd_ep_get_size+0x22>
     51a:	0c 94 cc 0e 	jmp	0x1d98	; 0x1d98 <ReadColourSensor>
     51e:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <_Z10SetAddresshh>
     522:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <_Z15ReadSharpSensorh+0x3e>
     526:	0c 94 0c 04 	jmp	0x818	; 0x818 <_Z15isBiggerOrEqualii>
     52a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <_Z9set_relaybh>
     52e:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <_Z15ReadSharpSensorh+0x2e>
     532:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <_Z12IO_ReadWritebh+0x3c>
     536:	0c 94 1a 04 	jmp	0x834	; 0x834 <_Z8logic_orbb>
     53a:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <IO_ReadWrite+0x78>
     53e:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <_Z6divideii>
     542:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <_Z15ReadSharpSensorh+0x4e>
     546:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <StopElevator>
     54a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <_Z15ReadSharpSensorh+0x42>
     54e:	0c 94 30 24 	jmp	0x4860	; 0x4860 <udd_ep_get_size+0x3a>
     552:	0c 94 13 04 	jmp	0x826	; 0x826 <_Z16isSmallerOrEqualii>
     556:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <_Z13requestResultv>
     55a:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <_Z15ReadSharpSensorh+0x56>

0000055e <__ctors_end>:
     55e:	11 24       	eor	r1, r1
     560:	1f be       	out	0x3f, r1	; 63
     562:	cf ef       	ldi	r28, 0xFF	; 255
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df e3       	ldi	r29, 0x3F	; 63
     568:	de bf       	out	0x3e, r29	; 62
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	0c bf       	out	0x3c, r16	; 60
     56e:	18 be       	out	0x38, r1	; 56
     570:	19 be       	out	0x39, r1	; 57
     572:	1a be       	out	0x3a, r1	; 58
     574:	1b be       	out	0x3b, r1	; 59

00000576 <__do_copy_data>:
     576:	13 e2       	ldi	r17, 0x23	; 35
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e2       	ldi	r27, 0x20	; 32
     57c:	e2 e3       	ldi	r30, 0x32	; 50
     57e:	f2 e6       	ldi	r31, 0x62	; 98
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	0b bf       	out	0x3b, r16	; 59
     584:	02 c0       	rjmp	.+4      	; 0x58a <__do_copy_data+0x14>
     586:	07 90       	elpm	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	a4 3b       	cpi	r26, 0xB4	; 180
     58c:	b1 07       	cpc	r27, r17
     58e:	d9 f7       	brne	.-10     	; 0x586 <__do_copy_data+0x10>
     590:	1b be       	out	0x3b, r1	; 59

00000592 <__do_clear_bss>:
     592:	26 e2       	ldi	r18, 0x26	; 38
     594:	a4 eb       	ldi	r26, 0xB4	; 180
     596:	b3 e2       	ldi	r27, 0x23	; 35
     598:	01 c0       	rjmp	.+2      	; 0x59c <.do_clear_bss_start>

0000059a <.do_clear_bss_loop>:
     59a:	1d 92       	st	X+, r1

0000059c <.do_clear_bss_start>:
     59c:	a7 36       	cpi	r26, 0x67	; 103
     59e:	b2 07       	cpc	r27, r18
     5a0:	e1 f7       	brne	.-8      	; 0x59a <.do_clear_bss_loop>
     5a2:	0e 94 24 19 	call	0x3248	; 0x3248 <main>
     5a6:	0c 94 17 31 	jmp	0x622e	; 0x622e <_exit>

000005aa <__bad_interrupt>:
     5aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ae <SP_ReadByte>:
     5ae:	3b b7       	in	r19, 0x3b	; 59
     5b0:	8b bf       	out	0x3b, r24	; 59
     5b2:	fb 01       	movw	r30, r22
     5b4:	86 91       	elpm	r24, Z
     5b6:	3b bf       	out	0x3b, r19	; 59
     5b8:	08 95       	ret

000005ba <SP_ReadWord>:
     5ba:	3b b7       	in	r19, 0x3b	; 59
     5bc:	8b bf       	out	0x3b, r24	; 59
     5be:	fb 01       	movw	r30, r22
     5c0:	87 91       	elpm	r24, Z+
     5c2:	96 91       	elpm	r25, Z
     5c4:	3b bf       	out	0x3b, r19	; 59
     5c6:	08 95       	ret

000005c8 <SP_ReadCalibrationByte>:
     5c8:	42 e0       	ldi	r20, 0x02	; 2
     5ca:	70 c0       	rjmp	.+224    	; 0x6ac <SP_CommonLPM>

000005cc <SP_ReadUserSignatureByte>:
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	6e c0       	rjmp	.+220    	; 0x6ac <SP_CommonLPM>

000005d0 <SP_ReadFuseByte>:
     5d0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
     5d4:	88 27       	eor	r24, r24
     5d6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
     5da:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
     5de:	47 e0       	ldi	r20, 0x07	; 7
     5e0:	55 d0       	rcall	.+170    	; 0x68c <SP_CommonCMD>
     5e2:	cb 01       	movw	r24, r22
     5e4:	08 95       	ret

000005e6 <SP_WriteLockBits>:
     5e6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     5ea:	48 e0       	ldi	r20, 0x08	; 8
     5ec:	4f c0       	rjmp	.+158    	; 0x68c <SP_CommonCMD>

000005ee <SP_ReadLockBits>:
     5ee:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
     5f2:	08 95       	ret

000005f4 <SP_EraseUserSignatureRow>:
     5f4:	3b b7       	in	r19, 0x3b	; 59
     5f6:	48 e1       	ldi	r20, 0x18	; 24
     5f8:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005fc <SP_WriteUserSignatureRow>:
     5fc:	3b b7       	in	r19, 0x3b	; 59
     5fe:	4a e1       	ldi	r20, 0x1A	; 26
     600:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000604 <SP_EraseApplicationSection>:
     604:	3b b7       	in	r19, 0x3b	; 59
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000060c <SP_EraseApplicationPage>:
     60c:	3b b7       	in	r19, 0x3b	; 59
     60e:	8b bf       	out	0x3b, r24	; 59
     610:	cb 01       	movw	r24, r22
     612:	42 e2       	ldi	r20, 0x22	; 34
     614:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000618 <SP_LoadFlashWord>:
     618:	3b b7       	in	r19, 0x3b	; 59
     61a:	0b 01       	movw	r0, r22
     61c:	43 e2       	ldi	r20, 0x23	; 35
     61e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000622 <SP_WriteApplicationPage>:
     622:	3b b7       	in	r19, 0x3b	; 59
     624:	8b bf       	out	0x3b, r24	; 59
     626:	cb 01       	movw	r24, r22
     628:	44 e2       	ldi	r20, 0x24	; 36
     62a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000062e <SP_EraseWriteApplicationPage>:
     62e:	3b b7       	in	r19, 0x3b	; 59
     630:	8b bf       	out	0x3b, r24	; 59
     632:	cb 01       	movw	r24, r22
     634:	45 e2       	ldi	r20, 0x25	; 37
     636:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000063a <SP_EraseFlashBuffer>:
     63a:	3b b7       	in	r19, 0x3b	; 59
     63c:	46 e2       	ldi	r20, 0x26	; 38
     63e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000642 <SP_EraseBootPage>:
     642:	3b b7       	in	r19, 0x3b	; 59
     644:	8b bf       	out	0x3b, r24	; 59
     646:	cb 01       	movw	r24, r22
     648:	4a e2       	ldi	r20, 0x2A	; 42
     64a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000064e <SP_WriteBootPage>:
     64e:	3b b7       	in	r19, 0x3b	; 59
     650:	8b bf       	out	0x3b, r24	; 59
     652:	cb 01       	movw	r24, r22
     654:	4c e2       	ldi	r20, 0x2C	; 44
     656:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000065a <SP_EraseWriteBootPage>:
     65a:	3b b7       	in	r19, 0x3b	; 59
     65c:	8b bf       	out	0x3b, r24	; 59
     65e:	cb 01       	movw	r24, r22
     660:	4d e2       	ldi	r20, 0x2D	; 45
     662:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000666 <SP_ApplicationCRC>:
     666:	48 e3       	ldi	r20, 0x38	; 56
     668:	11 c0       	rjmp	.+34     	; 0x68c <SP_CommonCMD>

0000066a <SP_BootCRC>:
     66a:	49 e3       	ldi	r20, 0x39	; 57
     66c:	0f c0       	rjmp	.+30     	; 0x68c <SP_CommonCMD>

0000066e <SP_LockSPM>:
     66e:	28 ed       	ldi	r18, 0xD8	; 216
     670:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
     67a:	08 95       	ret

0000067c <SP_WaitForSPM>:
     67c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
     680:	27 fd       	sbrc	r18, 7
     682:	fc cf       	rjmp	.-8      	; 0x67c <SP_WaitForSPM>
     684:	22 27       	eor	r18, r18
     686:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     68a:	08 95       	ret

0000068c <SP_CommonCMD>:
     68c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     690:	28 ed       	ldi	r18, 0xD8	; 216
     692:	31 e0       	ldi	r19, 0x01	; 1
     694:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     698:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
     69c:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     6a0:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
     6a4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
     6a8:	99 27       	eor	r25, r25
     6aa:	08 95       	ret

000006ac <SP_CommonLPM>:
     6ac:	fc 01       	movw	r30, r24
     6ae:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     6b2:	84 91       	lpm	r24, Z
     6b4:	08 95       	ret

000006b6 <_Z9delay1secv>:
=======
       0:	0c 94 8b 02 	jmp	0x516	; 0x516 <__ctors_end>
       4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
       8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
       c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      10:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      14:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      18:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      1c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      20:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      24:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      28:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      2c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      30:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_12>
      34:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      38:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      3c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      40:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      44:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      48:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      50:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      54:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      58:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      5c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      60:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      64:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      68:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      6c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      70:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      74:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      78:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      7c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      80:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      84:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      88:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      8c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      90:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      94:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      98:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      9c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      ac:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b4:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_45>
      b8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      bc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      cc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      dc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      ec:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      f0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      f4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      f8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      fc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     100:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     104:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     108:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     10c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     110:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     114:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     118:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     11c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     120:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     124:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     128:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     12c:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__vector_75>
     130:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     134:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     138:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     13c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     140:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     144:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     148:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     14c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     150:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     154:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     158:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     15c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     160:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     164:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     168:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     16c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     170:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     174:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     178:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     17c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     180:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     184:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     188:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     18c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     190:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_100>
     194:	0c 94 03 17 	jmp	0x2e06	; 0x2e06 <__vector_101>
     198:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     19c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1a4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1a8:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_106>
     1ac:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1b0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1b4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1b8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1bc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1c4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1c8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1cc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1d0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1d4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1d8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1dc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1e4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1e8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1ec:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1f0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1f4:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <__vector_125>
     1f8:	0c 94 bf 28 	jmp	0x517e	; 0x517e <__vector_126>
     1fc:	a2 14       	cp	r10, r2
     1fe:	b1 14       	cp	r11, r1
     200:	c0 14       	cp	r12, r0
     202:	cf 14       	cp	r12, r15
     204:	dd 14       	cp	r13, r13
     206:	ec 14       	cp	r14, r12
     208:	fb 14       	cp	r15, r11
     20a:	09 15       	cp	r16, r9
     20c:	16 15       	cp	r17, r6
     20e:	25 15       	cp	r18, r5
     210:	34 15       	cp	r19, r4
     212:	43 15       	cp	r20, r3
     214:	fb 15       	cp	r31, r11
     216:	fb 15       	cp	r31, r11
     218:	fb 15       	cp	r31, r11
     21a:	fb 15       	cp	r31, r11
     21c:	fb 15       	cp	r31, r11
     21e:	fb 15       	cp	r31, r11
     220:	fb 15       	cp	r31, r11
     222:	fb 15       	cp	r31, r11
     224:	fb 15       	cp	r31, r11
     226:	fb 15       	cp	r31, r11
     228:	fb 15       	cp	r31, r11
     22a:	fb 15       	cp	r31, r11
     22c:	fb 15       	cp	r31, r11
     22e:	fb 15       	cp	r31, r11
     230:	fb 15       	cp	r31, r11
     232:	fb 15       	cp	r31, r11
     234:	fb 15       	cp	r31, r11
     236:	fb 15       	cp	r31, r11
     238:	fb 15       	cp	r31, r11
     23a:	fb 15       	cp	r31, r11
     23c:	f9 15       	cp	r31, r9
     23e:	f9 15       	cp	r31, r9
     240:	f9 15       	cp	r31, r9
     242:	f9 15       	cp	r31, r9
     244:	f9 15       	cp	r31, r9
     246:	f9 15       	cp	r31, r9
     248:	f9 15       	cp	r31, r9
     24a:	f9 15       	cp	r31, r9
     24c:	f9 15       	cp	r31, r9
     24e:	f9 15       	cp	r31, r9
     250:	f9 15       	cp	r31, r9
     252:	f9 15       	cp	r31, r9
     254:	f9 15       	cp	r31, r9
     256:	f9 15       	cp	r31, r9
     258:	f9 15       	cp	r31, r9
     25a:	f9 15       	cp	r31, r9
     25c:	f9 15       	cp	r31, r9
     25e:	f9 15       	cp	r31, r9
     260:	f9 15       	cp	r31, r9
     262:	f9 15       	cp	r31, r9
     264:	fd 15       	cp	r31, r13
     266:	fd 15       	cp	r31, r13
     268:	fd 15       	cp	r31, r13
     26a:	fd 15       	cp	r31, r13
     26c:	fd 15       	cp	r31, r13
     26e:	fd 15       	cp	r31, r13
     270:	fd 15       	cp	r31, r13
     272:	fd 15       	cp	r31, r13
     274:	fd 15       	cp	r31, r13
     276:	fd 15       	cp	r31, r13
     278:	f7 15       	cp	r31, r7
     27a:	f7 15       	cp	r31, r7
     27c:	f7 15       	cp	r31, r7
     27e:	f7 15       	cp	r31, r7
     280:	f7 15       	cp	r31, r7
     282:	f7 15       	cp	r31, r7
     284:	f7 15       	cp	r31, r7
     286:	f7 15       	cp	r31, r7
     288:	f7 15       	cp	r31, r7
     28a:	f7 15       	cp	r31, r7
     28c:	fd 15       	cp	r31, r13
     28e:	fd 15       	cp	r31, r13
     290:	fd 15       	cp	r31, r13
     292:	fd 15       	cp	r31, r13
     294:	fd 15       	cp	r31, r13
     296:	fd 15       	cp	r31, r13
     298:	fd 15       	cp	r31, r13
     29a:	fd 15       	cp	r31, r13
     29c:	fd 15       	cp	r31, r13
     29e:	fd 15       	cp	r31, r13
     2a0:	fd 15       	cp	r31, r13
     2a2:	fd 15       	cp	r31, r13
     2a4:	fd 15       	cp	r31, r13
     2a6:	fd 15       	cp	r31, r13
     2a8:	fd 15       	cp	r31, r13
     2aa:	fd 15       	cp	r31, r13
     2ac:	fd 15       	cp	r31, r13
     2ae:	fd 15       	cp	r31, r13
     2b0:	fd 15       	cp	r31, r13
     2b2:	fd 15       	cp	r31, r13
     2b4:	f5 15       	cp	r31, r5
     2b6:	f5 15       	cp	r31, r5
     2b8:	f5 15       	cp	r31, r5
     2ba:	f5 15       	cp	r31, r5
     2bc:	f5 15       	cp	r31, r5
     2be:	f5 15       	cp	r31, r5
     2c0:	f5 15       	cp	r31, r5
     2c2:	f5 15       	cp	r31, r5
     2c4:	f5 15       	cp	r31, r5
     2c6:	f5 15       	cp	r31, r5
     2c8:	f5 15       	cp	r31, r5
     2ca:	f5 15       	cp	r31, r5
     2cc:	f5 15       	cp	r31, r5
     2ce:	f5 15       	cp	r31, r5
     2d0:	f5 15       	cp	r31, r5
     2d2:	f3 15       	cp	r31, r3
     2d4:	f3 15       	cp	r31, r3
     2d6:	f3 15       	cp	r31, r3
     2d8:	f3 15       	cp	r31, r3
     2da:	f3 15       	cp	r31, r3
     2dc:	f3 15       	cp	r31, r3
     2de:	f3 15       	cp	r31, r3
     2e0:	f3 15       	cp	r31, r3
     2e2:	f3 15       	cp	r31, r3
     2e4:	f3 15       	cp	r31, r3
     2e6:	f3 15       	cp	r31, r3
     2e8:	f3 15       	cp	r31, r3
     2ea:	f3 15       	cp	r31, r3
     2ec:	f3 15       	cp	r31, r3
     2ee:	f3 15       	cp	r31, r3
     2f0:	f1 15       	cp	r31, r1
     2f2:	f1 15       	cp	r31, r1
     2f4:	f1 15       	cp	r31, r1
     2f6:	f1 15       	cp	r31, r1
     2f8:	f1 15       	cp	r31, r1
     2fa:	f1 15       	cp	r31, r1
     2fc:	f1 15       	cp	r31, r1
     2fe:	f1 15       	cp	r31, r1
     300:	f1 15       	cp	r31, r1
     302:	f1 15       	cp	r31, r1
     304:	f1 15       	cp	r31, r1
     306:	f1 15       	cp	r31, r1
     308:	f1 15       	cp	r31, r1
     30a:	f1 15       	cp	r31, r1
     30c:	f1 15       	cp	r31, r1
     30e:	f1 15       	cp	r31, r1
     310:	f1 15       	cp	r31, r1
     312:	f1 15       	cp	r31, r1
     314:	f1 15       	cp	r31, r1
     316:	f1 15       	cp	r31, r1
     318:	ef 15       	cp	r30, r15
     31a:	ef 15       	cp	r30, r15
     31c:	ef 15       	cp	r30, r15
     31e:	ef 15       	cp	r30, r15
     320:	ef 15       	cp	r30, r15
     322:	ef 15       	cp	r30, r15
     324:	ef 15       	cp	r30, r15
     326:	ef 15       	cp	r30, r15
     328:	ef 15       	cp	r30, r15
     32a:	ef 15       	cp	r30, r15
     32c:	ed 15       	cp	r30, r13
     32e:	ed 15       	cp	r30, r13
     330:	ed 15       	cp	r30, r13
     332:	ed 15       	cp	r30, r13
     334:	ed 15       	cp	r30, r13
     336:	ed 15       	cp	r30, r13
     338:	ed 15       	cp	r30, r13
     33a:	ed 15       	cp	r30, r13
     33c:	ed 15       	cp	r30, r13
     33e:	ed 15       	cp	r30, r13
     340:	ed 15       	cp	r30, r13
     342:	ed 15       	cp	r30, r13
     344:	ed 15       	cp	r30, r13
     346:	ed 15       	cp	r30, r13
     348:	ed 15       	cp	r30, r13
     34a:	ed 15       	cp	r30, r13
     34c:	ed 15       	cp	r30, r13
     34e:	ed 15       	cp	r30, r13
     350:	ed 15       	cp	r30, r13
     352:	ed 15       	cp	r30, r13
     354:	ed 15       	cp	r30, r13
     356:	ed 15       	cp	r30, r13
     358:	ed 15       	cp	r30, r13
     35a:	ed 15       	cp	r30, r13
     35c:	ed 15       	cp	r30, r13
     35e:	ed 15       	cp	r30, r13
     360:	ed 15       	cp	r30, r13
     362:	ed 15       	cp	r30, r13
     364:	ed 15       	cp	r30, r13
     366:	ed 15       	cp	r30, r13
     368:	eb 15       	cp	r30, r11
     36a:	eb 15       	cp	r30, r11
     36c:	eb 15       	cp	r30, r11
     36e:	eb 15       	cp	r30, r11
     370:	eb 15       	cp	r30, r11
     372:	e9 15       	cp	r30, r9
     374:	e9 15       	cp	r30, r9
     376:	e9 15       	cp	r30, r9
     378:	e9 15       	cp	r30, r9
     37a:	e9 15       	cp	r30, r9
     37c:	e7 15       	cp	r30, r7
     37e:	e7 15       	cp	r30, r7
     380:	e7 15       	cp	r30, r7
     382:	e7 15       	cp	r30, r7
     384:	e7 15       	cp	r30, r7
     386:	e5 15       	cp	r30, r5
     388:	e5 15       	cp	r30, r5
     38a:	e5 15       	cp	r30, r5
     38c:	e5 15       	cp	r30, r5
     38e:	e5 15       	cp	r30, r5
     390:	ff 15       	cp	r31, r15
     392:	ff 15       	cp	r31, r15
     394:	ff 15       	cp	r31, r15
     396:	ff 15       	cp	r31, r15
     398:	ff 15       	cp	r31, r15
     39a:	ff 15       	cp	r31, r15
     39c:	57 22       	and	r5, r23
     39e:	5a 22       	and	r5, r26
     3a0:	5d 22       	and	r5, r29
     3a2:	60 22       	and	r6, r16
     3a4:	63 22       	and	r6, r19
     3a6:	66 22       	and	r6, r22
     3a8:	69 22       	and	r6, r25

000003aa <__trampolines_start>:
     3aa:	0c 94 69 22 	jmp	0x44d2	; 0x44d2 <udd_ep_get_size+0x46>
     3ae:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <udi_cdc_comm_disable>
     3b2:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <udi_cdc_serial_state_msg_sent>
     3b6:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <_Z15ReadSharpSensorh+0x22>
     3ba:	0c 94 85 18 	jmp	0x310a	; 0x310a <udi_cdc_comm_setup>
     3be:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_Z9isSmallerii>
     3c2:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <_Z15ReadSharpSensorh>
     3c6:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <udd_ep_get_size+0x22>
     3ca:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <_Z10AnalogReadi>
     3ce:	0c 94 ad 12 	jmp	0x255a	; 0x255a <_Z9set_relaybh>
     3d2:	0c 94 63 22 	jmp	0x44c6	; 0x44c6 <udd_ep_get_size+0x3a>
     3d6:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <_Z15ReadSharpSensorh+0x4e>
     3da:	0c 94 77 18 	jmp	0x30ee	; 0x30ee <udi_cdc_data_disable>
     3de:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <_Z12IO_ReadWritebh+0xd0>
     3e2:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <_Z7isEqualii>
     3e6:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <_Z15OptocouplerReadi>
     3ea:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <_Z12IO_ReadWritebh+0x5a>
     3ee:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <_Z15ReadSharpSensorh+0x2e>
     3f2:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <MoveElevator>
     3f6:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <_Z15ReadSharpSensorh+0x46>
     3fa:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_Z8multiplyii>
     3fe:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <_Z15ReadSharpSensorh+0x3e>
     402:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_Z3addii>
     406:	0c 94 83 18 	jmp	0x3106	; 0x3106 <udi_cdc_getsetting>
     40a:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_Z11printNumberj>
     40e:	0c 94 5a 11 	jmp	0x22b4	; 0x22b4 <_Z8MoveBeltbji>
     412:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <_Z12IO_ReadWritebh+0x1e>
     416:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <_Z12IO_ReadWritebh+0x3c>
     41a:	0c 94 cf 14 	jmp	0x299e	; 0x299e <_Z12IO_ReadWritebh+0x78>
     41e:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <_Z15ReadSharpSensorh+0x26>
     422:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <udi_cdc_data_sof_notify>
     426:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <udi_cdc_data_enable>
     42a:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_Z12IO_ReadWritebh+0x160>
     42e:	0c 94 df 11 	jmp	0x23be	; 0x23be <_Z13MoveTurntablebji>
     432:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <_Z12IO_ReadWritebh+0x142>
     436:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <_Z13requestResultv>
     43a:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_Z11DigitalReadi>
     43e:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <ElevatorIsReady>
     442:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <_Z15ReadSharpSensorh+0x42>
     446:	0c 94 02 13 	jmp	0x2604	; 0x2604 <_Z3LEDb>
     44a:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_Z6invertj>
     44e:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <_Z8Solenoidhb>
     452:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <_Z15ReadSharpSensorh+0x32>
     456:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_Z15ReadSharpSensorh+0x2a>
     45a:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <SorterarmIsFinnished>
     45e:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <HomeSorterArm>
     462:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_Z8isBiggerii>
     466:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <SelectColour>
     46a:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <_Z17StopDemoTestBlockv>
     46e:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <_Z15ReadSharpSensorh+0x52>
     472:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <udd_ep_get_size+0x40>
     476:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <_Z13StopTurntablej>
     47a:	0c 94 cf 18 	jmp	0x319e	; 0x319e <udi_cdc_line_coding_received>
     47e:	0c 94 37 03 	jmp	0x66e	; 0x66e <_Z9delay1secv>
     482:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <_Z12IO_ReadWritebh+0xec>
     486:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_Z9logic_andbb>
     48a:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <_Z12IO_ReadWritebh+0x94>
     48e:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <_Z8StopBeltj>
     492:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <_Z15passthrough_TWIv>
     496:	0c 94 10 13 	jmp	0x2620	; 0x2620 <_Z13PulseSolenoidh>
     49a:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <_Z9logic_xorbb>
     49e:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <StopSorterArm>
     4a2:	0c 94 60 22 	jmp	0x44c0	; 0x44c0 <udd_ep_get_size+0x34>
     4a6:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <_Z9ToggleLEDv>
     4aa:	0c 94 25 13 	jmp	0x264a	; 0x264a <_Z14requestStartedv>
     4ae:	0c 94 5d 22 	jmp	0x44ba	; 0x44ba <udd_ep_get_size+0x2e>
     4b2:	0c 94 8b 03 	jmp	0x716	; 0x716 <_Z8subtractii>
     4b6:	0c 94 41 03 	jmp	0x682	; 0x682 <_Z8delay_msj>
     4ba:	0c 94 82 10 	jmp	0x2104	; 0x2104 <MoveSorterArmDistance>
     4be:	0c 94 f3 1a 	jmp	0x35e6	; 0x35e6 <udi_cdc_data_received>
     4c2:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_Z15isBiggerOrEqualii>
     4c6:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <MoveSorterArmTo>
     4ca:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <_Z15ReadSharpSensorh+0x3a>
     4ce:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <_Z12IO_ReadWritebh+0x124>
     4d2:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <udd_ep_get_size+0x28>
     4d6:	0c 94 81 18 	jmp	0x3102	; 0x3102 <udi_cdc_data_setup>
     4da:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_Z8logic_orbb>
     4de:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <_Z15ReadSharpSensorh+0x36>
     4e2:	0c 94 46 18 	jmp	0x308c	; 0x308c <udi_cdc_comm_enable>
     4e6:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <ReadColourSensor>
     4ea:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <_Z13DemoTestBlockv>
     4ee:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <_Z15ReadSharpSensorh+0x56>
     4f2:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <_Z15ReadSharpSensorh+0x4a>
     4f6:	0c 94 cf 03 	jmp	0x79e	; 0x79e <_Z6divideii>
     4fa:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <StopElevator>
     4fe:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <_Z12IO_ReadWritebh+0x106>
     502:	0c 94 98 1d 	jmp	0x3b30	; 0x3b30 <udc_valid_address>
     506:	0c 94 82 19 	jmp	0x3304	; 0x3304 <udi_cdc_data_sent>
     50a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_Z16isSmallerOrEqualii>
     50e:	0c 94 ec 14 	jmp	0x29d8	; 0x29d8 <_Z12IO_ReadWritebh+0xb2>
     512:	0c 94 95 12 	jmp	0x252a	; 0x252a <_Z10SetAddresshh>

00000516 <__ctors_end>:
     516:	11 24       	eor	r1, r1
     518:	1f be       	out	0x3f, r1	; 63
     51a:	cf ef       	ldi	r28, 0xFF	; 255
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df e3       	ldi	r29, 0x3F	; 63
     520:	de bf       	out	0x3e, r29	; 62
     522:	00 e0       	ldi	r16, 0x00	; 0
     524:	0c bf       	out	0x3c, r16	; 60
     526:	18 be       	out	0x38, r1	; 56
     528:	19 be       	out	0x39, r1	; 57
     52a:	1a be       	out	0x3a, r1	; 58
     52c:	1b be       	out	0x3b, r1	; 59

0000052e <__do_copy_data>:
     52e:	13 e2       	ldi	r17, 0x23	; 35
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e2       	ldi	r27, 0x20	; 32
     534:	e8 ea       	ldi	r30, 0xA8	; 168
     536:	fe e5       	ldi	r31, 0x5E	; 94
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	0b bf       	out	0x3b, r16	; 59
     53c:	02 c0       	rjmp	.+4      	; 0x542 <__do_copy_data+0x14>
     53e:	07 90       	elpm	r0, Z+
     540:	0d 92       	st	X+, r0
     542:	a2 3c       	cpi	r26, 0xC2	; 194
     544:	b1 07       	cpc	r27, r17
     546:	d9 f7       	brne	.-10     	; 0x53e <__do_copy_data+0x10>
     548:	1b be       	out	0x3b, r1	; 59

0000054a <__do_clear_bss>:
     54a:	26 e2       	ldi	r18, 0x26	; 38
     54c:	a2 ec       	ldi	r26, 0xC2	; 194
     54e:	b3 e2       	ldi	r27, 0x23	; 35
     550:	01 c0       	rjmp	.+2      	; 0x554 <.do_clear_bss_start>

00000552 <.do_clear_bss_loop>:
     552:	1d 92       	st	X+, r1

00000554 <.do_clear_bss_start>:
     554:	a7 37       	cpi	r26, 0x77	; 119
     556:	b2 07       	cpc	r27, r18
     558:	e1 f7       	brne	.-8      	; 0x552 <.do_clear_bss_loop>
     55a:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <main>
     55e:	0c 94 52 2f 	jmp	0x5ea4	; 0x5ea4 <_exit>

00000562 <__bad_interrupt>:
     562:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000566 <SP_ReadByte>:
     566:	3b b7       	in	r19, 0x3b	; 59
     568:	8b bf       	out	0x3b, r24	; 59
     56a:	fb 01       	movw	r30, r22
     56c:	86 91       	elpm	r24, Z
     56e:	3b bf       	out	0x3b, r19	; 59
     570:	08 95       	ret

00000572 <SP_ReadWord>:
     572:	3b b7       	in	r19, 0x3b	; 59
     574:	8b bf       	out	0x3b, r24	; 59
     576:	fb 01       	movw	r30, r22
     578:	87 91       	elpm	r24, Z+
     57a:	96 91       	elpm	r25, Z
     57c:	3b bf       	out	0x3b, r19	; 59
     57e:	08 95       	ret

00000580 <SP_ReadCalibrationByte>:
     580:	42 e0       	ldi	r20, 0x02	; 2
     582:	70 c0       	rjmp	.+224    	; 0x664 <SP_CommonLPM>

00000584 <SP_ReadUserSignatureByte>:
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	6e c0       	rjmp	.+220    	; 0x664 <SP_CommonLPM>

00000588 <SP_ReadFuseByte>:
     588:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
     58c:	88 27       	eor	r24, r24
     58e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
     592:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
     596:	47 e0       	ldi	r20, 0x07	; 7
     598:	55 d0       	rcall	.+170    	; 0x644 <SP_CommonCMD>
     59a:	cb 01       	movw	r24, r22
     59c:	08 95       	ret

0000059e <SP_WriteLockBits>:
     59e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     5a2:	48 e0       	ldi	r20, 0x08	; 8
     5a4:	4f c0       	rjmp	.+158    	; 0x644 <SP_CommonCMD>

000005a6 <SP_ReadLockBits>:
     5a6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
     5aa:	08 95       	ret

000005ac <SP_EraseUserSignatureRow>:
     5ac:	3b b7       	in	r19, 0x3b	; 59
     5ae:	48 e1       	ldi	r20, 0x18	; 24
     5b0:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005b4 <SP_WriteUserSignatureRow>:
     5b4:	3b b7       	in	r19, 0x3b	; 59
     5b6:	4a e1       	ldi	r20, 0x1A	; 26
     5b8:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005bc <SP_EraseApplicationSection>:
     5bc:	3b b7       	in	r19, 0x3b	; 59
     5be:	40 e2       	ldi	r20, 0x20	; 32
     5c0:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005c4 <SP_EraseApplicationPage>:
     5c4:	3b b7       	in	r19, 0x3b	; 59
     5c6:	8b bf       	out	0x3b, r24	; 59
     5c8:	cb 01       	movw	r24, r22
     5ca:	42 e2       	ldi	r20, 0x22	; 34
     5cc:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005d0 <SP_LoadFlashWord>:
     5d0:	3b b7       	in	r19, 0x3b	; 59
     5d2:	0b 01       	movw	r0, r22
     5d4:	43 e2       	ldi	r20, 0x23	; 35
     5d6:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005da <SP_WriteApplicationPage>:
     5da:	3b b7       	in	r19, 0x3b	; 59
     5dc:	8b bf       	out	0x3b, r24	; 59
     5de:	cb 01       	movw	r24, r22
     5e0:	44 e2       	ldi	r20, 0x24	; 36
     5e2:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005e6 <SP_EraseWriteApplicationPage>:
     5e6:	3b b7       	in	r19, 0x3b	; 59
     5e8:	8b bf       	out	0x3b, r24	; 59
     5ea:	cb 01       	movw	r24, r22
     5ec:	45 e2       	ldi	r20, 0x25	; 37
     5ee:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005f2 <SP_EraseFlashBuffer>:
     5f2:	3b b7       	in	r19, 0x3b	; 59
     5f4:	46 e2       	ldi	r20, 0x26	; 38
     5f6:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005fa <SP_EraseBootPage>:
     5fa:	3b b7       	in	r19, 0x3b	; 59
     5fc:	8b bf       	out	0x3b, r24	; 59
     5fe:	cb 01       	movw	r24, r22
     600:	4a e2       	ldi	r20, 0x2A	; 42
     602:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000606 <SP_WriteBootPage>:
     606:	3b b7       	in	r19, 0x3b	; 59
     608:	8b bf       	out	0x3b, r24	; 59
     60a:	cb 01       	movw	r24, r22
     60c:	4c e2       	ldi	r20, 0x2C	; 44
     60e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000612 <SP_EraseWriteBootPage>:
     612:	3b b7       	in	r19, 0x3b	; 59
     614:	8b bf       	out	0x3b, r24	; 59
     616:	cb 01       	movw	r24, r22
     618:	4d e2       	ldi	r20, 0x2D	; 45
     61a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000061e <SP_ApplicationCRC>:
     61e:	48 e3       	ldi	r20, 0x38	; 56
     620:	11 c0       	rjmp	.+34     	; 0x644 <SP_CommonCMD>

00000622 <SP_BootCRC>:
     622:	49 e3       	ldi	r20, 0x39	; 57
     624:	0f c0       	rjmp	.+30     	; 0x644 <SP_CommonCMD>

00000626 <SP_LockSPM>:
     626:	28 ed       	ldi	r18, 0xD8	; 216
     628:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
     632:	08 95       	ret

00000634 <SP_WaitForSPM>:
     634:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
     638:	27 fd       	sbrc	r18, 7
     63a:	fc cf       	rjmp	.-8      	; 0x634 <SP_WaitForSPM>
     63c:	22 27       	eor	r18, r18
     63e:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     642:	08 95       	ret

00000644 <SP_CommonCMD>:
     644:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     648:	28 ed       	ldi	r18, 0xD8	; 216
     64a:	31 e0       	ldi	r19, 0x01	; 1
     64c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     650:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
     654:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     658:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
     65c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
     660:	99 27       	eor	r25, r25
     662:	08 95       	ret

00000664 <SP_CommonLPM>:
     664:	fc 01       	movw	r30, r24
     666:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     66a:	84 91       	lpm	r24, Z
     66c:	08 95       	ret

0000066e <_Z9delay1secv>:
>>>>>>> Stashed changes
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	8d e3       	ldi	r24, 0x3D	; 61
     672:	99 e4       	ldi	r25, 0x49	; 73
     674:	21 50       	subi	r18, 0x01	; 1
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <_Z9delay1secv+0x6>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <_Z9delay1secv+0x10>
     67e:	00 00       	nop
     680:	08 95       	ret

00000682 <_Z8delay_msj>:
}


void delay_ms(uint16_t ms)
{
	for(uint16_t i = 0; i < ms; i++)
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	69 f0       	breq	.+26     	; 0x6a0 <_Z8delay_msj+0x1e>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	ef e6       	ldi	r30, 0x6F	; 111
     68c:	f7 e1       	ldi	r31, 0x17	; 23
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <_Z8delay_msj+0xc>
     692:	00 c0       	rjmp	.+0      	; 0x694 <_Z8delay_msj+0x12>
     694:	00 00       	nop
     696:	2f 5f       	subi	r18, 0xFF	; 255
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	82 17       	cp	r24, r18
     69c:	93 07       	cpc	r25, r19
     69e:	a9 f7       	brne	.-22     	; 0x68a <_Z8delay_msj+0x8>
     6a0:	08 95       	ret

000006a2 <_Z11printNumberj>:



void printNumber(uint16_t num)
{
	USART_Transmit_Number(USARTD0, num);
     6a2:	bc 01       	movw	r22, r24
     6a4:	80 ea       	ldi	r24, 0xA0	; 160
     6a6:	99 e0       	ldi	r25, 0x09	; 9
     6a8:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_TransmitString(USARTD0, "\n\r");
<<<<<<< Updated upstream
     6f4:	62 e5       	ldi	r22, 0x52	; 82
     6f6:	73 e2       	ldi	r23, 0x23	; 35
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
     6fc:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
     700:	08 95       	ret
=======
     6ac:	61 e6       	ldi	r22, 0x61	; 97
     6ae:	73 e2       	ldi	r23, 0x23	; 35
     6b0:	80 ea       	ldi	r24, 0xA0	; 160
     6b2:	99 e0       	ldi	r25, 0x09	; 9
     6b4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
     6b8:	08 95       	ret
>>>>>>> Stashed changes

000006ba <_Z6invertj>:


uint16_t invert(uint16_t num)
{
	return -num;
}
     6ba:	91 95       	neg	r25
     6bc:	81 95       	neg	r24
     6be:	91 09       	sbc	r25, r1
     6c0:	08 95       	ret

000006c2 <_Z3addii>:



int16_t add(int16_t A, int16_t B)
{
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	9b 01       	movw	r18, r22
	long res = (long)A + B;
     6cc:	6c 01       	movw	r12, r24
     6ce:	09 2e       	mov	r0, r25
     6d0:	00 0c       	add	r0, r0
     6d2:	ee 08       	sbc	r14, r14
     6d4:	ff 08       	sbc	r15, r15
     6d6:	ab 01       	movw	r20, r22
     6d8:	77 0f       	add	r23, r23
     6da:	66 0b       	sbc	r22, r22
     6dc:	77 0b       	sbc	r23, r23
     6de:	4c 0d       	add	r20, r12
     6e0:	5d 1d       	adc	r21, r13
     6e2:	6e 1d       	adc	r22, r14
     6e4:	7f 1d       	adc	r23, r15

	if(res > 32767)
     6e6:	41 15       	cp	r20, r1
     6e8:	e0 e8       	ldi	r30, 0x80	; 128
     6ea:	5e 07       	cpc	r21, r30
     6ec:	61 05       	cpc	r22, r1
     6ee:	71 05       	cpc	r23, r1
     6f0:	44 f4       	brge	.+16     	; 0x702 <_Z3addii+0x40>
	return 32767;
	if(res < -32768)
     6f2:	41 15       	cp	r20, r1
     6f4:	50 48       	sbci	r21, 0x80	; 128
     6f6:	6f 4f       	sbci	r22, 0xFF	; 255
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	34 f0       	brlt	.+12     	; 0x708 <_Z3addii+0x46>
	return -32767;

	return (int16_t)res;
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	05 c0       	rjmp	.+10     	; 0x70c <_Z3addii+0x4a>
int16_t add(int16_t A, int16_t B)
{
	long res = (long)A + B;

	if(res > 32767)
	return 32767;
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	9f e7       	ldi	r25, 0x7F	; 127
     706:	02 c0       	rjmp	.+4      	; 0x70c <_Z3addii+0x4a>
	if(res < -32768)
	return -32767;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <_Z8subtractii>:


int16_t subtract(int16_t A, int16_t B)
{
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	9b 01       	movw	r18, r22
	long res = (long)A - B;
     720:	ac 01       	movw	r20, r24
     722:	09 2e       	mov	r0, r25
     724:	00 0c       	add	r0, r0
     726:	66 0b       	sbc	r22, r22
     728:	77 0b       	sbc	r23, r23
     72a:	69 01       	movw	r12, r18
     72c:	03 2e       	mov	r0, r19
     72e:	00 0c       	add	r0, r0
     730:	ee 08       	sbc	r14, r14
     732:	ff 08       	sbc	r15, r15
     734:	4c 19       	sub	r20, r12
     736:	5d 09       	sbc	r21, r13
     738:	6e 09       	sbc	r22, r14
     73a:	7f 09       	sbc	r23, r15

	if(res > 32767)
     73c:	41 15       	cp	r20, r1
     73e:	e0 e8       	ldi	r30, 0x80	; 128
     740:	5e 07       	cpc	r21, r30
     742:	61 05       	cpc	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	44 f4       	brge	.+16     	; 0x758 <_Z8subtractii+0x42>
	return 32767;
	if(res < -32768)
     748:	41 15       	cp	r20, r1
     74a:	50 48       	sbci	r21, 0x80	; 128
     74c:	6f 4f       	sbci	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	34 f0       	brlt	.+12     	; 0x75e <_Z8subtractii+0x48>
	return -32767;

	return (int16_t)res;
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	05 c0       	rjmp	.+10     	; 0x762 <_Z8subtractii+0x4c>
int16_t subtract(int16_t A, int16_t B)
{
	long res = (long)A - B;

	if(res > 32767)
	return 32767;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f e7       	ldi	r25, 0x7F	; 127
     75c:	02 c0       	rjmp	.+4      	; 0x762 <_Z8subtractii+0x4c>
	if(res < -32768)
	return -32767;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	08 95       	ret

0000076c <_Z8multiplyii>:


int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;
<<<<<<< Updated upstream
     7b4:	9c 01       	movw	r18, r24
     7b6:	db 01       	movw	r26, r22
     7b8:	0e 94 e5 30 	call	0x61ca	; 0x61ca <__mulhisi3>
=======
     76c:	9c 01       	movw	r18, r24
     76e:	db 01       	movw	r26, r22
     770:	0e 94 18 2f 	call	0x5e30	; 0x5e30 <__mulhisi3>
>>>>>>> Stashed changes

	if(res > 32767)
     774:	61 15       	cp	r22, r1
     776:	20 e8       	ldi	r18, 0x80	; 128
     778:	72 07       	cpc	r23, r18
     77a:	81 05       	cpc	r24, r1
     77c:	91 05       	cpc	r25, r1
     77e:	4c f4       	brge	.+18     	; 0x792 <_Z8multiplyii+0x26>
	return 32767;
	if(res < -32768)
     780:	61 15       	cp	r22, r1
     782:	20 e8       	ldi	r18, 0x80	; 128
     784:	72 07       	cpc	r23, r18
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	82 07       	cpc	r24, r18
     78a:	92 07       	cpc	r25, r18
     78c:	2c f0       	brlt	.+10     	; 0x798 <_Z8multiplyii+0x2c>
	return -32767;

	return (int16_t)res;
     78e:	cb 01       	movw	r24, r22
     790:	08 95       	ret
int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;

	if(res > 32767)
	return 32767;
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	9f e7       	ldi	r25, 0x7F	; 127
     796:	08 95       	ret
	if(res < -32768)
	return -32767;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     79c:	08 95       	ret

0000079e <_Z6divideii>:


int16_t divide(int16_t A, int16_t B)
{
	return A / B;
<<<<<<< Updated upstream
     7e6:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
     7ea:	cb 01       	movw	r24, r22
=======
     79e:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
     7a2:	cb 01       	movw	r24, r22
>>>>>>> Stashed changes
}
     7a4:	08 95       	ret

000007a6 <_Z7isEqualii>:


bool isEqual(int16_t A, int16_t B)			{return A == B; }
     7a6:	21 e0       	ldi	r18, 0x01	; 1
     7a8:	86 17       	cp	r24, r22
     7aa:	97 07       	cpc	r25, r23
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <_Z7isEqualii+0xa>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	82 2f       	mov	r24, r18
     7b2:	08 95       	ret

000007b4 <_Z8isBiggerii>:
bool isBigger(int16_t A, int16_t B)			{return A > B;	}
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	68 17       	cp	r22, r24
     7b8:	79 07       	cpc	r23, r25
     7ba:	0c f0       	brlt	.+2      	; 0x7be <_Z8isBiggerii+0xa>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	82 2f       	mov	r24, r18
     7c0:	08 95       	ret

000007c2 <_Z9isSmallerii>:
bool isSmaller(int16_t A, int16_t B)		{return A < B;	}
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	86 17       	cp	r24, r22
     7c6:	97 07       	cpc	r25, r23
     7c8:	0c f0       	brlt	.+2      	; 0x7cc <_Z9isSmallerii+0xa>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	82 2f       	mov	r24, r18
     7ce:	08 95       	ret

000007d0 <_Z15isBiggerOrEqualii>:
bool isBiggerOrEqual(int16_t A, int16_t B)	{return A >= B;	}
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	86 17       	cp	r24, r22
     7d4:	97 07       	cpc	r25, r23
     7d6:	0c f4       	brge	.+2      	; 0x7da <_Z15isBiggerOrEqualii+0xa>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	82 2f       	mov	r24, r18
     7dc:	08 95       	ret

000007de <_Z16isSmallerOrEqualii>:
bool isSmallerOrEqual(int16_t A, int16_t B)	{return A <= B; }
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	68 17       	cp	r22, r24
     7e2:	79 07       	cpc	r23, r25
     7e4:	0c f4       	brge	.+2      	; 0x7e8 <_Z16isSmallerOrEqualii+0xa>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	82 2f       	mov	r24, r18
     7ea:	08 95       	ret

000007ec <_Z8logic_orbb>:

bool logic_or(bool A, bool B)	{return A || B; }
     7ec:	81 11       	cpse	r24, r1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <_Z8logic_orbb+0x8>
     7f0:	86 2f       	mov	r24, r22
     7f2:	08 95       	ret
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	08 95       	ret

000007f8 <_Z9logic_andbb>:
bool logic_and(bool A, bool B)	{return A && B; }
     7f8:	81 11       	cpse	r24, r1
     7fa:	86 2f       	mov	r24, r22
     7fc:	08 95       	ret

000007fe <_Z9logic_xorbb>:
     7fe:	86 27       	eor	r24, r22
     800:	08 95       	ret

00000802 <_Z11hexToNibblec>:
	return (hexToNibble(h) << 4) | hexToNibble(l);
}

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
     802:	90 ed       	ldi	r25, 0xD0	; 208
     804:	98 0f       	add	r25, r24
     806:	9a 30       	cpi	r25, 0x0A	; 10
     808:	60 f0       	brcs	.+24     	; 0x822 <_Z11hexToNibblec+0x20>
	{
		return hex-'0';
	}
	else if(hex >= 'A' && hex <= 'F')
     80a:	9f eb       	ldi	r25, 0xBF	; 191
     80c:	98 0f       	add	r25, r24
     80e:	96 30       	cpi	r25, 0x06	; 6
     810:	10 f4       	brcc	.+4      	; 0x816 <_Z11hexToNibblec+0x14>
	{
		return hex-'A'+10;
     812:	87 53       	subi	r24, 0x37	; 55
     814:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
     816:	9f e9       	ldi	r25, 0x9F	; 159
     818:	98 0f       	add	r25, r24
     81a:	96 30       	cpi	r25, 0x06	; 6
     81c:	20 f4       	brcc	.+8      	; 0x826 <_Z11hexToNibblec+0x24>
	{
		return hex-'a'+10;
     81e:	87 55       	subi	r24, 0x57	; 87
     820:	08 95       	ret

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
	{
		return hex-'0';
     822:	89 2f       	mov	r24, r25
     824:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
	{
		return hex-'a'+10;
	}
	return 0xff;
     826:	8f ef       	ldi	r24, 0xFF	; 255
}
     828:	08 95       	ret

0000082a <_Z9hexToBytecc>:
 */ 

#include "Convert.h"

uint8_t hexToByte(char h, char l)
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	d6 2f       	mov	r29, r22
	return (hexToNibble(h) << 4) | hexToNibble(l);
     830:	0e 94 01 04 	call	0x802	; 0x802 <_Z11hexToNibblec>
     834:	c8 2f       	mov	r28, r24
     836:	8d 2f       	mov	r24, r29
     838:	0e 94 01 04 	call	0x802	; 0x802 <_Z11hexToNibblec>
     83c:	90 e1       	ldi	r25, 0x10	; 16
     83e:	c9 9f       	mul	r28, r25
     840:	90 01       	movw	r18, r0
     842:	11 24       	eor	r1, r1
}
     844:	82 2b       	or	r24, r18
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <_Z11resetDevicev>:
 #include "Programming.h"

void resetDevice()
{
	//disable interrupts
	asm("cli");
     84c:	f8 94       	cli
	// enable watchdog timer
	CCP = 0xD8;
     84e:	88 ed       	ldi	r24, 0xD8	; 216
     850:	84 bf       	out	0x34, r24	; 52
	WDT.CTRL = (1<< WDT_ENABLE_bp)| (1<<WDT_CEN_bp);
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     858:	ff cf       	rjmp	.-2      	; 0x858 <_Z11resetDevicev+0xc>

0000085a <_Z12programFlashhjhPh>:
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
}


void programFlash(uint8_t byteCount, uint16_t address, uint8_t recordType, uint8_t* data)
{
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	e8 2e       	mov	r14, r24
     868:	eb 01       	movw	r28, r22
     86a:	89 01       	movw	r16, r18
	static uint16_t previousAddress = 0xFFFF;
	static bool firstByte = true;

	if(recordType == EOF_RECORD)
     86c:	41 30       	cpi	r20, 0x01	; 1
     86e:	71 f5       	brne	.+92     	; 0x8cc <_Z12programFlashhjhPh+0x72>
	{
		// if the first byte has already been sent
		if(!firstByte)
     870:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     874:	81 11       	cpse	r24, r1
     876:	28 c0       	rjmp	.+80     	; 0x8c8 <_Z12programFlashhjhPh+0x6e>
		{
			// check if the address is within the blockly range
			if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     878:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     87c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     880:	90 58       	subi	r25, 0x80	; 128
     882:	8f 3f       	cpi	r24, 0xFF	; 255
     884:	9f 47       	sbci	r25, 0x7F	; 127
     886:	b0 f0       	brcs	.+44     	; 0x8b4 <_Z12programFlashhjhPh+0x5a>
			{
				USART_TransmitString(USARTD0, "\n\rFlash address:");
     888:	66 eb       	ldi	r22, 0xB6	; 182
     88a:	70 e2       	ldi	r23, 0x20	; 32
     88c:	80 ea       	ldi	r24, 0xA0	; 160
     88e:	99 e0       	ldi	r25, 0x09	; 9
     890:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
				USART_Transmit_Number(USARTD0, previousAddress);
     894:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     898:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     89c:	80 ea       	ldi	r24, 0xA0	; 160
     89e:	99 e0       	ldi	r25, 0x09	; 9
     8a0:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
				USART_TransmitString(USARTD0, " out of range\n\rResetting");
     8a4:	67 ec       	ldi	r22, 0xC7	; 199
     8a6:	70 e2       	ldi	r23, 0x20	; 32
     8a8:	80 ea       	ldi	r24, 0xA0	; 160
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
				
				//USB_TransmitString("\n\rFlash address:");
				//USB_Transmit_Number(previousAddress);
				//USB_TransmitString(" out of range\n\rResetting");
				resetDevice();
     8b0:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
			}
			
			SP_WaitForSPM();	//wait for nvm module if busy
     8b4:	0e 94 1a 03 	call	0x634	; 0x634 <SP_WaitForSPM>
			SP_EraseWriteApplicationPage(previousAddress); //program page to flash
     8b8:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     8bc:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SP_EraseWriteApplicationPage>
		}
		// reset device
		resetDevice();
     8c8:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
	}
	else if(recordType == DATA_RECORD)
     8cc:	41 11       	cpse	r20, r1
     8ce:	56 c0       	rjmp	.+172    	; 0x97c <_Z12programFlashhjhPh+0x122>
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     8d0:	88 23       	and	r24, r24
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <_Z12programFlashhjhPh+0x7c>
     8d4:	53 c0       	rjmp	.+166    	; 0x97c <_Z12programFlashhjhPh+0x122>
     8d6:	f1 2c       	mov	r15, r1
		{
			// if address is in the another page than the last
			if(previousAddress/SPM_PAGESIZE != address/SPM_PAGESIZE)
     8d8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     8dc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     8e0:	ac 01       	movw	r20, r24
     8e2:	45 2f       	mov	r20, r21
     8e4:	55 27       	eor	r21, r21
     8e6:	46 95       	lsr	r20
     8e8:	9e 01       	movw	r18, r28
     8ea:	23 2f       	mov	r18, r19
     8ec:	33 27       	eor	r19, r19
     8ee:	26 95       	lsr	r18
     8f0:	42 17       	cp	r20, r18
     8f2:	53 07       	cpc	r21, r19
     8f4:	41 f1       	breq	.+80     	; 0x946 <_Z12programFlashhjhPh+0xec>
			{
				// if this isn't the first byte
				if(!firstByte)
     8f6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     8fa:	21 11       	cpse	r18, r1
     8fc:	24 c0       	rjmp	.+72     	; 0x946 <_Z12programFlashhjhPh+0xec>
				{
					if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     8fe:	90 58       	subi	r25, 0x80	; 128
     900:	8f 3f       	cpi	r24, 0xFF	; 255
     902:	9f 47       	sbci	r25, 0x7F	; 127
     904:	b0 f0       	brcs	.+44     	; 0x932 <_Z12programFlashhjhPh+0xd8>
					{
						USART_TransmitString(USARTD0, "\n\rFlash address:");
     906:	66 eb       	ldi	r22, 0xB6	; 182
     908:	70 e2       	ldi	r23, 0x20	; 32
     90a:	80 ea       	ldi	r24, 0xA0	; 160
     90c:	99 e0       	ldi	r25, 0x09	; 9
     90e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
						USART_Transmit_Number(USARTD0, previousAddress);
     912:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     916:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     91a:	80 ea       	ldi	r24, 0xA0	; 160
     91c:	99 e0       	ldi	r25, 0x09	; 9
     91e:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
						USART_TransmitString(USARTD0, " out of range\n\rResetting");
     922:	67 ec       	ldi	r22, 0xC7	; 199
     924:	70 e2       	ldi	r23, 0x20	; 32
     926:	80 ea       	ldi	r24, 0xA0	; 160
     928:	99 e0       	ldi	r25, 0x09	; 9
     92a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
						
						//USB_TransmitString("\n\rFlash address:");
						//USB_Transmit_Number(previousAddress);
						//USB_TransmitString(" out of range\n\rResetting");
						
						resetDevice();
     92e:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
					}
					
					SP_WaitForSPM();
     932:	0e 94 1a 03 	call	0x634	; 0x634 <SP_WaitForSPM>
					SP_EraseWriteApplicationPage(previousAddress);
     936:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     93a:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SP_EraseWriteApplicationPage>
				}
			}
			
			//load byte into temporary page buffer
			SP_WaitForSPM();
     946:	0e 94 1a 03 	call	0x634	; 0x634 <SP_WaitForSPM>
			SP_LoadFlashWord(address%SPM_PAGESIZE, ((uint16_t)data[i+1] << 8 | data[i]));
     94a:	f8 01       	movw	r30, r16
     94c:	ef 0d       	add	r30, r15
     94e:	f1 1d       	adc	r31, r1
     950:	61 81       	ldd	r22, Z+1	; 0x01
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	76 2f       	mov	r23, r22
     956:	66 27       	eor	r22, r22
     958:	80 81       	ld	r24, Z
     95a:	68 2b       	or	r22, r24
     95c:	ce 01       	movw	r24, r28
     95e:	91 70       	andi	r25, 0x01	; 1
     960:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <SP_LoadFlashWord>
				
			// track the programming state
			firstByte = false;
     964:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
			previousAddress = address;
     968:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__DATA_REGION_ORIGIN__>
     96c:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
			address+=2;
     970:	22 96       	adiw	r28, 0x02	; 2
		resetDevice();
	}
	else if(recordType == DATA_RECORD)
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     972:	f3 94       	inc	r15
     974:	f3 94       	inc	r15
     976:	fe 14       	cp	r15, r14
     978:	08 f4       	brcc	.+2      	; 0x97c <_Z12programFlashhjhPh+0x122>
     97a:	ae cf       	rjmp	.-164    	; 0x8d8 <_Z12programFlashhjhPh+0x7e>
			previousAddress = address;
			address+=2;
		}
	}

     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <_Z14programHexLinePc>:
		programHexLine(buff);
	}
}

void programHexLine(char* line)
{
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	60 97       	sbiw	r28, 0x10	; 16
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	5c 01       	movw	r10, r24
	cli();
     9b4:	f8 94       	cli
	// parse the line
	uint8_t byteCount	= hexToByte(line[1], line[2]);
     9b6:	fc 01       	movw	r30, r24
     9b8:	62 81       	ldd	r22, Z+2	; 0x02
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
     9bc:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9c0:	78 2e       	mov	r7, r24
	uint8_t address_H	= hexToByte(line[3], line[4]);
     9c2:	f5 01       	movw	r30, r10
     9c4:	64 81       	ldd	r22, Z+4	; 0x04
     9c6:	83 81       	ldd	r24, Z+3	; 0x03
     9c8:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9cc:	58 2e       	mov	r5, r24
	uint8_t address_L	= hexToByte(line[5], line[6]);
     9ce:	f5 01       	movw	r30, r10
     9d0:	66 81       	ldd	r22, Z+6	; 0x06
     9d2:	85 81       	ldd	r24, Z+5	; 0x05
     9d4:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9d8:	e8 2e       	mov	r14, r24
	uint8_t recordType	= hexToByte(line[7], line[8]);
     9da:	f5 01       	movw	r30, r10
     9dc:	60 85       	ldd	r22, Z+8	; 0x08
     9de:	87 81       	ldd	r24, Z+7	; 0x07
     9e0:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9e4:	68 2e       	mov	r6, r24

	uint8_t checksum = byteCount + address_H + address_L + recordType;
     9e6:	f7 2c       	mov	r15, r7
     9e8:	f5 0c       	add	r15, r5
     9ea:	fe 0c       	add	r15, r14
     9ec:	f8 0e       	add	r15, r24
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     9ee:	77 20       	and	r7, r7
     9f0:	f9 f0       	breq	.+62     	; 0xa30 <_Z14programHexLinePc+0xa6>
     9f2:	85 01       	movw	r16, r10
     9f4:	07 5f       	subi	r16, 0xF7	; 247
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	6c 01       	movw	r12, r24
     9fe:	88 24       	eor	r8, r8
     a00:	8a 94       	dec	r8
     a02:	87 0c       	add	r8, r7
     a04:	91 2c       	mov	r9, r1
     a06:	88 0c       	add	r8, r8
     a08:	99 1c       	adc	r9, r9
     a0a:	9b e0       	ldi	r25, 0x0B	; 11
     a0c:	89 0e       	add	r8, r25
     a0e:	91 1c       	adc	r9, r1
     a10:	8a 0c       	add	r8, r10
     a12:	9b 1c       	adc	r9, r11
	{
		uint8_t charOffset = 9+2*i;
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
     a14:	f8 01       	movw	r30, r16
     a16:	61 81       	ldd	r22, Z+1	; 0x01
     a18:	80 81       	ld	r24, Z
     a1a:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
		checksum += byte;
     a1e:	f8 0e       	add	r15, r24
		data[i] = byte;
     a20:	f6 01       	movw	r30, r12
     a22:	81 93       	st	Z+, r24
     a24:	6f 01       	movw	r12, r30
     a26:	0e 5f       	subi	r16, 0xFE	; 254
     a28:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t checksum = byteCount + address_H + address_L + recordType;
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     a2a:	08 15       	cp	r16, r8
     a2c:	19 05       	cpc	r17, r9
     a2e:	91 f7       	brne	.-28     	; 0xa14 <_Z14programHexLinePc+0x8a>
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
		checksum += byte;
		data[i] = byte;
	}

	checksum += hexToByte(line[9+2*byteCount],line[10+2*byteCount]);
     a30:	e7 2d       	mov	r30, r7
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	35 96       	adiw	r30, 0x05	; 5
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ea 0d       	add	r30, r10
     a3c:	fb 1d       	adc	r31, r11
     a3e:	df 01       	movw	r26, r30
     a40:	11 97       	sbiw	r26, 0x01	; 1
     a42:	60 81       	ld	r22, Z
     a44:	8c 91       	ld	r24, X
     a46:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
	
	if(checksum != 0)
     a4a:	8f 0d       	add	r24, r15
     a4c:	41 f0       	breq	.+16     	; 0xa5e <_Z14programHexLinePc+0xd4>
	{
		USART_TransmitString(USARTD0, "\n\rChecksum error while receiving program\n\rResetting");
     a4e:	60 ee       	ldi	r22, 0xE0	; 224
     a50:	70 e2       	ldi	r23, 0x20	; 32
     a52:	80 ea       	ldi	r24, 0xA0	; 160
     a54:	99 e0       	ldi	r25, 0x09	; 9
     a56:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("\n\rChecksum error while receiving program\n\rResetting");
		resetDevice();
     a5a:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
		return;
	}
	
	USART_TransmitString(USARTD0, "\r\nReceived: ");
     a5e:	64 e1       	ldi	r22, 0x14	; 20
     a60:	71 e2       	ldi	r23, 0x21	; 33
     a62:	80 ea       	ldi	r24, 0xA0	; 160
     a64:	99 e0       	ldi	r25, 0x09	; 9
     a66:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit(USARTD0, line, 11+2*byteCount);
     a6a:	47 2d       	mov	r20, r7
     a6c:	44 0f       	add	r20, r20
     a6e:	45 5f       	subi	r20, 0xF5	; 245
     a70:	b5 01       	movw	r22, r10
     a72:	80 ea       	ldi	r24, 0xA0	; 160
     a74:	99 e0       	ldi	r25, 0x09	; 9
     a76:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z14USART_TransmitR12USART_structPKch>
	
	//USB_TransmitString("\r\nReceived: ");
	//USB_Transmit(line, 11+2*byteCount);
		
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
     a7a:	6e 2d       	mov	r22, r14
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	75 29       	or	r23, r5
     a80:	9e 01       	movw	r18, r28
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	46 2d       	mov	r20, r6
     a88:	87 2d       	mov	r24, r7
     a8a:	0e 94 2d 04 	call	0x85a	; 0x85a <_Z12programFlashhjhPh>
}
     a8e:	60 96       	adiw	r28, 0x10	; 16
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	7f 90       	pop	r7
     aae:	6f 90       	pop	r6
     ab0:	5f 90       	pop	r5
     ab2:	08 95       	ret

00000ab4 <_Z17receiveHexFileUSBv>:
		break;
	}
}

void receiveHexFileUSB()
{
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	e2 97       	sbiw	r28, 0x32	; 50
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	6c 01       	movw	r12, r24
     ac8:	7e 01       	movw	r14, r28
     aca:	93 e3       	ldi	r25, 0x33	; 51
     acc:	e9 0e       	add	r14, r25
     ace:	f1 1c       	adc	r15, r1
     ad0:	86 01       	movw	r16, r12
	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
		{
			char c = USART_Receive(USARTD0);
     ad2:	80 ea       	ldi	r24, 0xA0	; 160
     ad4:	99 e0       	ldi	r25, 0x09	; 9
     ad6:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z13USART_ReceiveR12USART_struct>
     ada:	98 01       	movw	r18, r16
     adc:	2c 19       	sub	r18, r12
     ade:	3d 09       	sbc	r19, r13
			buff[i] = c;
     ae0:	f8 01       	movw	r30, r16
     ae2:	81 93       	st	Z+, r24
     ae4:	8f 01       	movw	r16, r30
			if(c == '\n')
     ae6:	8a 30       	cpi	r24, 0x0A	; 10
     ae8:	41 f4       	brne	.+16     	; 0xafa <_Z17receiveHexFileUSBv+0x46>
			{
				buff[i+1] = '\0';
     aea:	e2 e0       	ldi	r30, 0x02	; 2
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ec 0f       	add	r30, r28
     af0:	fd 1f       	adc	r31, r29
     af2:	e2 0f       	add	r30, r18
     af4:	f3 1f       	adc	r31, r19
     af6:	10 82       	st	Z, r1
				break;
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <_Z17receiveHexFileUSBv+0x4c>
	char buff[50];

	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
     afa:	ee 15       	cp	r30, r14
     afc:	ff 05       	cpc	r31, r15
     afe:	49 f7       	brne	.-46     	; 0xad2 <_Z17receiveHexFileUSBv+0x1e>
			{
				buff[i+1] = '\0';
				break;
			}
		}
		programHexLine(buff);
     b00:	c6 01       	movw	r24, r12
     b02:	0e 94 c5 04 	call	0x98a	; 0x98a <_Z14programHexLinePc>

void receiveHexFileUSB()
{
	char buff[50];

	while(true)
     b06:	e4 cf       	rjmp	.-56     	; 0xad0 <_Z17receiveHexFileUSBv+0x1c>

00000b08 <_Z10getUsbBootv>:
	// let the watchdog time out
	while(true);
}

void getUsbBoot()
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	c0 e1       	ldi	r28, 0x10	; 16
     b12:	d7 e2       	ldi	r29, 0x27	; 39
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
	{
		if(USART_Available(USARTD0))
     b14:	80 ea       	ldi	r24, 0xA0	; 160
     b16:	99 e0       	ldi	r25, 0x09	; 9
     b18:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z15USART_AvailableR12USART_struct>
     b1c:	81 11       	cpse	r24, r1
     b1e:	0c c0       	rjmp	.+24     	; 0xb38 <_Z10getUsbBootv+0x30>
		{
			timeout = false;
			break;
		}
		if(TWI_RecievedAddress(TWIC))
     b20:	80 e8       	ldi	r24, 0x80	; 128
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_Z19TWI_RecievedAddressR10TWI_struct>
     b28:	81 11       	cpse	r24, r1
     b2a:	22 c0       	rjmp	.+68     	; 0xb70 <_Z10getUsbBootv+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2c:	86 ef       	ldi	r24, 0xF6	; 246
     b2e:	8a 95       	dec	r24
     b30:	f1 f7       	brne	.-4      	; 0xb2e <_Z10getUsbBootv+0x26>
     b32:	21 97       	sbiw	r28, 0x01	; 1
void getUsbBoot()
{
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
     b34:	79 f7       	brne	.-34     	; 0xb14 <_Z10getUsbBootv+0xc>
     b36:	1c c0       	rjmp	.+56     	; 0xb70 <_Z10getUsbBootv+0x68>
     b38:	c1 e2       	ldi	r28, 0x21	; 33
     b3a:	d1 e2       	ldi	r29, 0x21	; 33
     b3c:	05 e2       	ldi	r16, 0x25	; 37
     b3e:	11 e2       	ldi	r17, 0x21	; 33
	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
	{
		char c = USART_Receive(USARTD0);
     b40:	80 ea       	ldi	r24, 0xA0	; 160
     b42:	99 e0       	ldi	r25, 0x09	; 9
     b44:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z13USART_ReceiveR12USART_struct>
		//USART0_Transmit(c);
		if(c != check[i])
     b48:	99 91       	ld	r25, Y+
     b4a:	89 13       	cpse	r24, r25
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <_Z10getUsbBootv+0x68>
	}

	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
     b4e:	c0 17       	cp	r28, r16
     b50:	d1 07       	cpc	r29, r17
     b52:	b1 f7       	brne	.-20     	; 0xb40 <_Z10getUsbBootv+0x38>
		if(c != check[i])
		return;
	}


	switch(USART_Receive(USARTD0))
     b54:	80 ea       	ldi	r24, 0xA0	; 160
     b56:	99 e0       	ldi	r25, 0x09	; 9
     b58:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z13USART_ReceiveR12USART_struct>
     b5c:	85 35       	cpi	r24, 0x55	; 85
     b5e:	41 f4       	brne	.+16     	; 0xb70 <_Z10getUsbBootv+0x68>
	{
		case 'U':
		// upload hex file via usb
		USART_TransmitString(USARTD0,"Receiving program via UART\n\r");
     b60:	66 e2       	ldi	r22, 0x26	; 38
     b62:	71 e2       	ldi	r23, 0x21	; 33
     b64:	80 ea       	ldi	r24, 0xA0	; 160
     b66:	99 e0       	ldi	r25, 0x09	; 9
     b68:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("Receiving program via UART\n\r");
		receiveHexFileUSB();
     b6c:	0e 94 5a 05 	call	0xab4	; 0xab4 <_Z17receiveHexFileUSBv>
		break;
		default:
		break;
	}
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_Z17receiveHexFileI2CPFvvE>:
		programHexLine(buff);
	}
}

void receiveHexFileI2C(void (*cb)())
{
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	e2 97       	sbiw	r28, 0x32	; 50
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	8c 01       	movw	r16, r24
	char buff[50];

	while(true)
	{
		USART_TransmitString(USARTD0, "\n\rtest4\n\r");
     b8e:	63 e4       	ldi	r22, 0x43	; 67
     b90:	71 e2       	ldi	r23, 0x21	; 33
     b92:	80 ea       	ldi	r24, 0xA0	; 160
     b94:	99 e0       	ldi	r25, 0x09	; 9
     b96:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		// receive a line of the hex file
		TWI_ReceivePacket(TWIC,(uint8_t*)buff, 50);
     b9a:	42 e3       	ldi	r20, 0x32	; 50
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	94 e0       	ldi	r25, 0x04	; 4
     ba6:	0e 94 65 07 	call	0xeca	; 0xeca <_Z17TWI_ReceivePacketR10TWI_structPhh>
		
		if(buff[0] == 's') { cb(); } //voer callback uit: stepper-test modus
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	83 37       	cpi	r24, 0x73	; 115
     bae:	11 f4       	brne	.+4      	; 0xbb4 <_Z17receiveHexFileI2CPFvvE+0x3a>
     bb0:	f8 01       	movw	r30, r16
     bb2:	19 95       	eicall
			
		if(buff[0] != ':')
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	8a 33       	cpi	r24, 0x3A	; 58
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <_Z17receiveHexFileI2CPFvvE+0x4e>
		{
			USART_TransmitString(USARTD0,"Error while receiving program");
     bba:	6d e4       	ldi	r22, 0x4D	; 77
     bbc:	71 e2       	ldi	r23, 0x21	; 33
     bbe:	80 ea       	ldi	r24, 0xA0	; 160
     bc0:	99 e0       	ldi	r25, 0x09	; 9
     bc2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
			return;
     bc6:	0b c0       	rjmp	.+22     	; 0xbde <_Z17receiveHexFileI2CPFvvE+0x64>
		}
		USART_TransmitString(USARTD0,"test");
     bc8:	6b e6       	ldi	r22, 0x6B	; 107
     bca:	71 e2       	ldi	r23, 0x21	; 33
     bcc:	80 ea       	ldi	r24, 0xA0	; 160
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		programHexLine(buff);
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 c5 04 	call	0x98a	; 0x98a <_Z14programHexLinePc>

void receiveHexFileI2C(void (*cb)())
{
	char buff[50];

	while(true)
     bdc:	d8 cf       	rjmp	.-80     	; 0xb8e <_Z17receiveHexFileI2CPFvvE+0x14>
			return;
		}
		USART_TransmitString(USARTD0,"test");
		programHexLine(buff);
	}
}
     bde:	e2 96       	adiw	r28, 0x32	; 50
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <_Z8SPI_InitR10SPI_struct>:
#include <util/delay.h>

void SPI_Init(SPI_struct &SPI)
{
	//enable SPI, Set master mode, 8MHz default Clock
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER0_bm;
     bee:	81 e5       	ldi	r24, 0x51	; 81
     bf0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     bf4:	08 95       	ret

00000bf6 <_Z14SPI_TrancieverR10SPI_structh>:
}

uint8_t SPI_Tranciever(SPI_struct &SPI, uint8_t data)
{
     bf6:	fc 01       	movw	r30, r24
	//load data into data buffer
	SPI.DATA = data;
     bf8:	63 83       	std	Z+3, r22	; 0x03
	//wait for transmit complete
	while (!(SPI.STATUS & (1<<SPI_IF_bp)));
     bfa:	92 81       	ldd	r25, Z+2	; 0x02
     bfc:	99 23       	and	r25, r25
     bfe:	ec f7       	brge	.-6      	; 0xbfa <_Z14SPI_TrancieverR10SPI_structh+0x4>
	
	//return received data
	return(SPI.DATA);		
     c00:	83 81       	ldd	r24, Z+3	; 0x03
}
     c02:	08 95       	ret

00000c04 <_Z11SS_set_highR11PORT_structh>:

void SS_set_high(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTSET = (1<<pin);
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_Z11SS_set_highR11PORT_structh+0xa>
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <_Z11SS_set_highR11PORT_structh+0x6>
     c12:	fc 01       	movw	r30, r24
     c14:	25 83       	std	Z+5, r18	; 0x05
     c16:	fa e0       	ldi	r31, 0x0A	; 10
     c18:	fa 95       	dec	r31
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <_Z11SS_set_highR11PORT_structh+0x14>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <_Z11SS_set_highR11PORT_structh+0x1a>
     c1e:	08 95       	ret

00000c20 <_Z10SS_set_lowR11PORT_structh>:
	_delay_us(1);
}

void SS_set_low(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTCLR = (1<<pin);
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <_Z10SS_set_lowR11PORT_structh+0xa>
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	6a 95       	dec	r22
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <_Z10SS_set_lowR11PORT_structh+0x6>
     c2e:	fc 01       	movw	r30, r24
     c30:	26 83       	std	Z+6, r18	; 0x06
     c32:	fa e0       	ldi	r31, 0x0A	; 10
     c34:	fa 95       	dec	r31
     c36:	f1 f7       	brne	.-4      	; 0xc34 <_Z10SS_set_lowR11PORT_structh+0x14>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <_Z10SS_set_lowR11PORT_structh+0x1a>
     c3a:	08 95       	ret

00000c3c <_Z12SPI_CAN_ReadR10SPI_structhh>:
	_delay_us(1);
}

uint8_t SPI_CAN_Read(SPI_struct &SPI, uint8_t address, uint8_t read_cmd)
{
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	16 2f       	mov	r17, r22
	SPI_Tranciever(SPI, read_cmd);
     c46:	64 2f       	mov	r22, r20
     c48:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     c4c:	61 2f       	mov	r22, r17
     c4e:	ce 01       	movw	r24, r28
     c50:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	uint8_t data = SPI_Tranciever(SPI, 0x00);
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	ce 01       	movw	r24, r28
     c58:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	return data;
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <_Z13SPI_CAN_writeR10SPI_structhhh>:

void SPI_CAN_write(SPI_struct &SPI, uint8_t address, uint8_t data, uint8_t write_cmd)
{
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	06 2f       	mov	r16, r22
     c70:	14 2f       	mov	r17, r20
	SPI_Tranciever(SPI, write_cmd);
     c72:	62 2f       	mov	r22, r18
     c74:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     c78:	60 2f       	mov	r22, r16
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, data);
     c80:	61 2f       	mov	r22, r17
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>:
ISR(TWIF_TWIS_vect) { //slave
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
}


void TWI_HandleISR(void (*TxCallback)(), void (*RxCallback)(uint8_t), TWI_struct &TWI) {
     c92:	fc 01       	movw	r30, r24
	if((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp))) { //read operation
     c94:	da 01       	movw	r26, r20
     c96:	1a 96       	adiw	r26, 0x0a	; 10
     c98:	9c 91       	ld	r25, X
     c9a:	91 ff       	sbrs	r25, 1
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x14>
		if (!TxCallback) { return; } //callback is niet ingesteld
     c9e:	30 97       	sbiw	r30, 0x00	; 0
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		TxCallback();
     ca2:	19 95       	eicall
     ca4:	08 95       	ret
	} else { //write operation
		if (!RxCallback) { return; } //callback is niet ingesteld
     ca6:	61 15       	cp	r22, r1
     ca8:	71 05       	cpc	r23, r1
     caa:	21 f0       	breq	.+8      	; 0xcb4 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		RxCallback(TWI.SLAVE.DATA); //ongetest
     cac:	fa 01       	movw	r30, r20
     cae:	84 85       	ldd	r24, Z+12	; 0x0c
     cb0:	fb 01       	movw	r30, r22
     cb2:	19 95       	eicall
     cb4:	08 95       	ret

00000cb6 <__vector_12>:
void (*TWIF_TxCallback)();
void (*TWIC_RxCallback)(uint8_t); //onReceive, data wordt/is ontvangen van master
void (*TWID_RxCallback)(uint8_t); //via callbacks ongetest
void (*TWIE_RxCallback)(uint8_t);
void (*TWIF_RxCallback)(uint8_t);
ISR(TWIC_TWIS_vect) { //slave
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	08 b6       	in	r0, 0x38	; 56
     cc2:	0f 92       	push	r0
     cc4:	18 be       	out	0x38, r1	; 56
     cc6:	09 b6       	in	r0, 0x39	; 57
     cc8:	0f 92       	push	r0
     cca:	19 be       	out	0x39, r1	; 57
     ccc:	0b b6       	in	r0, 0x3b	; 59
     cce:	0f 92       	push	r0
     cd0:	1b be       	out	0x3b, r1	; 59
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
	TWI_HandleISR(TWIC_TxCallback, TWIC_RxCallback, TWIC);
<<<<<<< Updated upstream
     d32:	60 91 bd 23 	lds	r22, 0x23BD	; 0x8023bd <TWIC_RxCallback>
     d36:	70 91 be 23 	lds	r23, 0x23BE	; 0x8023be <TWIC_RxCallback+0x1>
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	54 e0       	ldi	r21, 0x04	; 4
     d3e:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <TWIC_TxCallback>
     d42:	90 91 c6 23 	lds	r25, 0x23C6	; 0x8023c6 <TWIC_TxCallback+0x1>
     d46:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0b be       	out	0x3b, r0	; 59
     d66:	0f 90       	pop	r0
     d68:	09 be       	out	0x39, r0	; 57
     d6a:	0f 90       	pop	r0
     d6c:	08 be       	out	0x38, r0	; 56
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_75>:
=======
     cea:	60 91 cb 23 	lds	r22, 0x23CB	; 0x8023cb <TWIC_RxCallback>
     cee:	70 91 cc 23 	lds	r23, 0x23CC	; 0x8023cc <TWIC_RxCallback+0x1>
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	54 e0       	ldi	r21, 0x04	; 4
     cf6:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <TWIC_TxCallback>
     cfa:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <TWIC_TxCallback+0x1>
     cfe:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	09 be       	out	0x39, r0	; 57
     d22:	0f 90       	pop	r0
     d24:	08 be       	out	0x38, r0	; 56
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <__vector_75>:
>>>>>>> Stashed changes
ISR(TWID_TWIS_vect) { //slave
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	08 b6       	in	r0, 0x38	; 56
     d3c:	0f 92       	push	r0
     d3e:	18 be       	out	0x38, r1	; 56
     d40:	09 b6       	in	r0, 0x39	; 57
     d42:	0f 92       	push	r0
     d44:	19 be       	out	0x39, r1	; 57
     d46:	0b b6       	in	r0, 0x3b	; 59
     d48:	0f 92       	push	r0
     d4a:	1b be       	out	0x3b, r1	; 59
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
	TWI_HandleISR(TWID_TxCallback, TWID_RxCallback, TWID);
<<<<<<< Updated upstream
     dac:	60 91 bb 23 	lds	r22, 0x23BB	; 0x8023bb <TWID_RxCallback>
     db0:	70 91 bc 23 	lds	r23, 0x23BC	; 0x8023bc <TWID_RxCallback+0x1>
     db4:	40 e9       	ldi	r20, 0x90	; 144
     db6:	54 e0       	ldi	r21, 0x04	; 4
     db8:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <TWID_TxCallback>
     dbc:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <TWID_TxCallback+0x1>
     dc0:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	09 be       	out	0x39, r0	; 57
     de4:	0f 90       	pop	r0
     de6:	08 be       	out	0x38, r0	; 56
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	0f 90       	pop	r0
     dee:	1f 90       	pop	r1
     df0:	18 95       	reti

00000df2 <__vector_45>:
=======
     d64:	60 91 c9 23 	lds	r22, 0x23C9	; 0x8023c9 <TWID_RxCallback>
     d68:	70 91 ca 23 	lds	r23, 0x23CA	; 0x8023ca <TWID_RxCallback+0x1>
     d6c:	40 e9       	ldi	r20, 0x90	; 144
     d6e:	54 e0       	ldi	r21, 0x04	; 4
     d70:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <TWID_TxCallback>
     d74:	90 91 d2 23 	lds	r25, 0x23D2	; 0x8023d2 <TWID_TxCallback+0x1>
     d78:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0b be       	out	0x3b, r0	; 59
     d98:	0f 90       	pop	r0
     d9a:	09 be       	out	0x39, r0	; 57
     d9c:	0f 90       	pop	r0
     d9e:	08 be       	out	0x38, r0	; 56
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_45>:
>>>>>>> Stashed changes
ISR(TWIE_TWIS_vect) { //slave
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	08 b6       	in	r0, 0x38	; 56
     db6:	0f 92       	push	r0
     db8:	18 be       	out	0x38, r1	; 56
     dba:	09 b6       	in	r0, 0x39	; 57
     dbc:	0f 92       	push	r0
     dbe:	19 be       	out	0x39, r1	; 57
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	1b be       	out	0x3b, r1	; 59
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	TWI_HandleISR(TWIE_TxCallback, TWIE_RxCallback, TWIE);
<<<<<<< Updated upstream
     e26:	60 91 b9 23 	lds	r22, 0x23B9	; 0x8023b9 <TWIE_RxCallback>
     e2a:	70 91 ba 23 	lds	r23, 0x23BA	; 0x8023ba <TWIE_RxCallback+0x1>
     e2e:	40 ea       	ldi	r20, 0xA0	; 160
     e30:	54 e0       	ldi	r21, 0x04	; 4
     e32:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <TWIE_TxCallback>
     e36:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <TWIE_TxCallback+0x1>
     e3a:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	09 be       	out	0x39, r0	; 57
     e5e:	0f 90       	pop	r0
     e60:	08 be       	out	0x38, r0	; 56
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_106>:
=======
     dde:	60 91 c7 23 	lds	r22, 0x23C7	; 0x8023c7 <TWIE_RxCallback>
     de2:	70 91 c8 23 	lds	r23, 0x23C8	; 0x8023c8 <TWIE_RxCallback+0x1>
     de6:	40 ea       	ldi	r20, 0xA0	; 160
     de8:	54 e0       	ldi	r21, 0x04	; 4
     dea:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <TWIE_TxCallback>
     dee:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <TWIE_TxCallback+0x1>
     df2:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	09 be       	out	0x39, r0	; 57
     e16:	0f 90       	pop	r0
     e18:	08 be       	out	0x38, r0	; 56
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <__vector_106>:
>>>>>>> Stashed changes
ISR(TWIF_TWIS_vect) { //slave
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	08 b6       	in	r0, 0x38	; 56
     e30:	0f 92       	push	r0
     e32:	18 be       	out	0x38, r1	; 56
     e34:	09 b6       	in	r0, 0x39	; 57
     e36:	0f 92       	push	r0
     e38:	19 be       	out	0x39, r1	; 57
     e3a:	0b b6       	in	r0, 0x3b	; 59
     e3c:	0f 92       	push	r0
     e3e:	1b be       	out	0x3b, r1	; 59
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
<<<<<<< Updated upstream
     ea0:	60 91 b7 23 	lds	r22, 0x23B7	; 0x8023b7 <TWIF_RxCallback>
     ea4:	70 91 b8 23 	lds	r23, 0x23B8	; 0x8023b8 <TWIF_RxCallback+0x1>
     ea8:	40 eb       	ldi	r20, 0xB0	; 176
     eaa:	54 e0       	ldi	r21, 0x04	; 4
     eac:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <TWIF_TxCallback>
     eb0:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <TWIF_TxCallback+0x1>
     eb4:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0b be       	out	0x3b, r0	; 59
     ed4:	0f 90       	pop	r0
     ed6:	09 be       	out	0x39, r0	; 57
     ed8:	0f 90       	pop	r0
     eda:	08 be       	out	0x38, r0	; 56
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <_Z8TWI_initR10TWI_struct>:
=======
     e58:	60 91 c5 23 	lds	r22, 0x23C5	; 0x8023c5 <TWIF_RxCallback>
     e5c:	70 91 c6 23 	lds	r23, 0x23C6	; 0x8023c6 <TWIF_RxCallback+0x1>
     e60:	40 eb       	ldi	r20, 0xB0	; 176
     e62:	54 e0       	ldi	r21, 0x04	; 4
     e64:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <TWIF_TxCallback>
     e68:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <TWIF_TxCallback+0x1>
     e6c:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0b be       	out	0x3b, r0	; 59
     e8c:	0f 90       	pop	r0
     e8e:	09 be       	out	0x39, r0	; 57
     e90:	0f 90       	pop	r0
     e92:	08 be       	out	0x38, r0	; 56
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <_Z8TWI_initR10TWI_struct>:
>>>>>>> Stashed changes
	}
}


void TWI_init(TWI_struct &TWI) //als slave
{
     e9e:	fc 01       	movw	r30, r24
	TWI.SLAVE.CTRLA = (1<<TWI_SLAVE_APIEN_bp)|(1<<TWI_SLAVE_ENABLE_bp)|(1<<TWI_SLAVE_PIEN_bp)|(1<<TWI_SLAVE_PMEN_bp);
     ea0:	8e e1       	ldi	r24, 0x1E	; 30
     ea2:	80 87       	std	Z+8, r24	; 0x08
	TWI.SLAVE.CTRLA |= (1<<TWI_SLAVE_DIEN_bp);
     ea4:	80 85       	ldd	r24, Z+8	; 0x08
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	80 87       	std	Z+8, r24	; 0x08

	//toegevoegd voor TWI_Write(), clear deze bits om het springen naar ISRs uit te schakelen
	TWI.SLAVE.CTRLA |= TWI_MASTER_INTLVL0_bm | TWI_MASTER_INTLVL1_bm; //enable port interrupt high level
     eaa:	80 85       	ldd	r24, Z+8	; 0x08
     eac:	80 6c       	ori	r24, 0xC0	; 192
     eae:	80 87       	std	Z+8, r24	; 0x08
     eb0:	08 95       	ret

00000eb2 <_Z19TWI_RecievedAddressR10TWI_struct>:


bool TWI_RecievedAddress(TWI_struct &TWI)
{
	//valid address received and write operation
	return ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)));
     eb2:	fc 01       	movw	r30, r24
     eb4:	22 85       	ldd	r18, Z+10	; 0x0a
     eb6:	26 ff       	sbrs	r18, 6
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <_Z19TWI_RecievedAddressR10TWI_struct+0x14>
     eba:	82 85       	ldd	r24, Z+10	; 0x0a
     ebc:	86 95       	lsr	r24
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	89 27       	eor	r24, r25
     ec4:	08 95       	ret
     ec6:	80 e0       	ldi	r24, 0x00	; 0
}
     ec8:	08 95       	ret

00000eca <_Z17TWI_ReceivePacketR10TWI_structPhh>:

//============================================================
//	RECEIVE PACKET : HVWI VERSIE
//============================================================
bool TWI_ReceivePacket(TWI_struct &TWI, uint8_t* buffer, uint8_t bufferLength) {
     eca:	fc 01       	movw	r30, r24
	//variabelen
	volatile static bool bResult;
	volatile static int i;
	//begin bij de eerste ontvangst databuffer index
	i=0;
<<<<<<< Updated upstream
     f14:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f18:	10 92 b6 23 	sts	0x23B6, r1	; 0x8023b6 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
	//uitgangspunt: het correct ontvangen van data door de slave vanaf de master is niet gelukt
	bResult = false;
     f1c:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <__data_end>
=======
     ecc:	10 92 c3 23 	sts	0x23C3, r1	; 0x8023c3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     ed0:	10 92 c4 23 	sts	0x23C4, r1	; 0x8023c4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
	//uitgangspunt: het correct ontvangen van data door de slave vanaf de master is niet gelukt
	bResult = false;
     ed4:	10 92 c2 23 	sts	0x23C2, r1	; 0x8023c2 <__data_end>
>>>>>>> Stashed changes
	//   TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm; //hier wordt een '1' weggeschreven in het APIF bit waardoor
	//                                       //dit bit wordt gewist(!), zie datasheet. Alle overige 0-bits
	//                                       //hebben geen invloed op de overige register bits inhoud(!)
	//----------------------------------------------------------------------------------------------------
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	82 87       	std	Z+10, r24	; 0x0a
			break;
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     edc:	50 e0       	ldi	r21, 0x00	; 0
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     ede:	20 e8       	ldi	r18, 0x80	; 128
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
	//voor altijd doe
	while ( true ) {
		//er is een door de master gegenereerde stop conditie gedetecteerd (want TWI_SLAVE_PIEN_bm in CTRLA is gezet)
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_APIF_bm ) {
     ee0:	82 85       	ldd	r24, Z+10	; 0x0a
     ee2:	86 ff       	sbrs	r24, 6
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <_Z17TWI_ReceivePacketR10TWI_structPhh+0x24>
			//meld een pass
			bResult = true ;
<<<<<<< Updated upstream
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 b4 23 	sts	0x23B4, r24	; 0x8023b4 <__data_end>
=======
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 c2 23 	sts	0x23C2, r24	; 0x8023c2 <__data_end>
>>>>>>> Stashed changes
			//verlaat de lus
			break;
     eec:	1b c0       	rjmp	.+54     	; 0xf24 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
     eee:	82 85       	ldd	r24, Z+10	; 0x0a
     ef0:	88 23       	and	r24, r24
     ef2:	b4 f7       	brge	.-20     	; 0xee0 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
<<<<<<< Updated upstream
     f3c:	80 91 b5 23 	lds	r24, 0x23B5	; 0x8023b5 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f40:	90 91 b6 23 	lds	r25, 0x23B6	; 0x8023b6 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f44:	48 17       	cp	r20, r24
     f46:	59 07       	cpc	r21, r25
     f48:	8c f0       	brlt	.+34     	; 0xf6c <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
				//noteer het ontvangen databyte
				buffer[i++] = TWI.SLAVE.DATA;
     f4a:	80 91 b5 23 	lds	r24, 0x23B5	; 0x8023b5 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f4e:	90 91 b6 23 	lds	r25, 0x23B6	; 0x8023b6 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f52:	dc 01       	movw	r26, r24
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	a0 93 b5 23 	sts	0x23B5, r26	; 0x8023b5 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f5a:	b0 93 b6 23 	sts	0x23B6, r27	; 0x8023b6 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f5e:	34 85       	ldd	r19, Z+12	; 0x0c
     f60:	db 01       	movw	r26, r22
     f62:	a8 0f       	add	r26, r24
     f64:	b9 1f       	adc	r27, r25
     f66:	3c 93       	st	X, r19
=======
     ef4:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     ef8:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     efc:	48 17       	cp	r20, r24
     efe:	59 07       	cpc	r21, r25
     f00:	8c f0       	brlt	.+34     	; 0xf24 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
				//noteer het ontvangen databyte
				buffer[i++] = TWI.SLAVE.DATA;
     f02:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f06:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f0a:	dc 01       	movw	r26, r24
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	a0 93 c3 23 	sts	0x23C3, r26	; 0x8023c3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f12:	b0 93 c4 23 	sts	0x23C4, r27	; 0x8023c4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f16:	34 85       	ldd	r19, Z+12	; 0x0c
     f18:	db 01       	movw	r26, r22
     f1a:	a8 0f       	add	r26, r24
     f1c:	b9 1f       	adc	r27, r25
     f1e:	3c 93       	st	X, r19
>>>>>>> Stashed changes
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     f20:	22 87       	std	Z+10, r18	; 0x0a
     f22:	de cf       	rjmp	.-68     	; 0xee0 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
		}//if
	}//while
	//rapporteer het resultaat
	return bResult ;
<<<<<<< Updated upstream
     f6c:	80 91 b4 23 	lds	r24, 0x23B4	; 0x8023b4 <__data_end>
=======
     f24:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <__data_end>
>>>>>>> Stashed changes
} //TWI_ReceivePacket
     f28:	08 95       	ret

00000f2a <_Z9TWI_WriteR10TWI_structh>:


bool TWI_Write(TWI_struct &TWI, uint8_t byte) //als slave
{
     f2a:	fc 01       	movw	r30, r24
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
     f2c:	82 85       	ldd	r24, Z+10	; 0x0a
     f2e:	86 ff       	sbrs	r24, 6
     f30:	fd cf       	rjmp	.-6      	; 0xf2c <_Z9TWI_WriteR10TWI_structh+0x2>

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
     f32:	82 85       	ldd	r24, Z+10	; 0x0a
     f34:	81 ff       	sbrs	r24, 1
     f36:	25 c0       	rjmp	.+74     	; 0xf82 <_Z9TWI_WriteR10TWI_structh+0x58>
		return false; //master write operation
	}

	while(1) {
		TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f38:	82 85       	ldd	r24, Z+10	; 0x0a
     f3a:	80 6c       	ori	r24, 0xC0	; 192
     f3c:	82 87       	std	Z+10, r24	; 0x0a

		TWI.SLAVE.DATA = byte;
     f3e:	64 87       	std	Z+12, r22	; 0x0c

		//acknowledge and send byte
		TWI.SLAVE.CTRLB &= ~(TWI_SLAVE_ACKACT_bm); //ACK
     f40:	81 85       	ldd	r24, Z+9	; 0x09
     f42:	8b 7f       	andi	r24, 0xFB	; 251
     f44:	81 87       	std	Z+9, r24	; 0x09
//		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp); //RESPONSE, er komen meer bytes	//<<< gebruik deze voor een toekomstige TWI_SendPacket functie
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD1_bp); //COMPLETE, enige byte wordt verzonden
     f46:	81 85       	ldd	r24, Z+9	; 0x09
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	81 87       	std	Z+9, r24	; 0x09

		//wait for transmission completed
		while(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIF_bp)) {
     f4c:	82 85       	ldd	r24, Z+10	; 0x0a
     f4e:	88 23       	and	r24, r24
     f50:	74 f4       	brge	.+28     	; 0xf6e <_Z9TWI_WriteR10TWI_structh+0x44>
			//check for collisions or bus errors
			if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_COLL_bp) || TWI.SLAVE.STATUS &(1<<TWI_SLAVE_BUSERR_bp)) {
     f52:	82 85       	ldd	r24, Z+10	; 0x0a
     f54:	83 fd       	sbrc	r24, 3
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <_Z9TWI_WriteR10TWI_structh+0x34>
     f58:	82 85       	ldd	r24, Z+10	; 0x0a
     f5a:	82 ff       	sbrs	r24, 2
     f5c:	f7 cf       	rjmp	.-18     	; 0xf4c <_Z9TWI_WriteR10TWI_structh+0x22>
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_BUSERR_bp); //clear buserror, collision is cleared automatically
     f5e:	82 85       	ldd	r24, Z+10	; 0x0a
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	82 87       	std	Z+10, r24	; 0x0a
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f64:	82 85       	ldd	r24, Z+10	; 0x0a
     f66:	80 6c       	ori	r24, 0xC0	; 192
     f68:	82 87       	std	Z+10, r24	; 0x0a
				return false;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret
     f6e:	80 e5       	ldi	r24, 0x50	; 80
     f70:	8a 95       	dec	r24
     f72:	f1 f7       	brne	.-4      	; 0xf70 <_Z9TWI_WriteR10TWI_structh+0x46>

		_delay_us(10);

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
     f74:	82 85       	ldd	r24, Z+10	; 0x0a
     f76:	86 ff       	sbrs	r24, 6
     f78:	df cf       	rjmp	.-66     	; 0xf38 <_Z9TWI_WriteR10TWI_structh+0xe>
     f7a:	82 85       	ldd	r24, Z+10	; 0x0a
     f7c:	80 fd       	sbrc	r24, 0
     f7e:	dc cf       	rjmp	.-72     	; 0xf38 <_Z9TWI_WriteR10TWI_structh+0xe>
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <_Z9TWI_WriteR10TWI_structh+0x5c>
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
		return false; //master write operation
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
				//received stop condition
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f86:	82 85       	ldd	r24, Z+10	; 0x0a
     f88:	80 6c       	ori	r24, 0xC0	; 192
     f8a:	82 87       	std	Z+10, r24	; 0x0a
				return true;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
			}
//		} //ACK, continue transmitting
	}
}
     f8e:	08 95       	ret

00000f90 <_Z13TWI_onRequestPFvvER10TWI_struct>:


//tx callbacks, set function call at interrupt
void TWI_onRequest(void (*f)(), TWI_struct &twi) {
	switch ((int) (&twi)) {
     f90:	60 39       	cpi	r22, 0x90	; 144
     f92:	24 e0       	ldi	r18, 0x04	; 4
     f94:	72 07       	cpc	r23, r18
     f96:	91 f0       	breq	.+36     	; 0xfbc <_Z13TWI_onRequestPFvvER10TWI_struct+0x2c>
     f98:	24 f4       	brge	.+8      	; 0xfa2 <_Z13TWI_onRequestPFvvER10TWI_struct+0x12>
     f9a:	60 38       	cpi	r22, 0x80	; 128
     f9c:	74 40       	sbci	r23, 0x04	; 4
     f9e:	49 f0       	breq	.+18     	; 0xfb2 <_Z13TWI_onRequestPFvvER10TWI_struct+0x22>
     fa0:	1c c0       	rjmp	.+56     	; 0xfda <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
     fa2:	60 3a       	cpi	r22, 0xA0	; 160
     fa4:	24 e0       	ldi	r18, 0x04	; 4
     fa6:	72 07       	cpc	r23, r18
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <_Z13TWI_onRequestPFvvER10TWI_struct+0x36>
     faa:	60 3b       	cpi	r22, 0xB0	; 176
     fac:	74 40       	sbci	r23, 0x04	; 4
     fae:	81 f0       	breq	.+32     	; 0xfd0 <_Z13TWI_onRequestPFvvER10TWI_struct+0x40>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_TxCallback = f; break;
<<<<<<< Updated upstream
     ffa:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <TWIC_TxCallback>
     ffe:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <TWIC_TxCallback+0x1>
    1002:	08 95       	ret
		case TWID_ptr: TWID_TxCallback = f; break;
    1004:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <TWID_TxCallback>
    1008:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <TWID_TxCallback+0x1>
    100c:	08 95       	ret
		case TWIE_ptr: TWIE_TxCallback = f; break;
    100e:	80 93 c1 23 	sts	0x23C1, r24	; 0x8023c1 <TWIE_TxCallback>
    1012:	90 93 c2 23 	sts	0x23C2, r25	; 0x8023c2 <TWIE_TxCallback+0x1>
    1016:	08 95       	ret
		case TWIF_ptr: TWIF_TxCallback = f; break;
    1018:	80 93 bf 23 	sts	0x23BF, r24	; 0x8023bf <TWIF_TxCallback>
    101c:	90 93 c0 23 	sts	0x23C0, r25	; 0x8023c0 <TWIF_TxCallback+0x1>
    1020:	08 95       	ret
    1022:	ff cf       	rjmp	.-2      	; 0x1022 <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
=======
     fb2:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <TWIC_TxCallback>
     fb6:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <TWIC_TxCallback+0x1>
     fba:	08 95       	ret
		case TWID_ptr: TWID_TxCallback = f; break;
     fbc:	80 93 d1 23 	sts	0x23D1, r24	; 0x8023d1 <TWID_TxCallback>
     fc0:	90 93 d2 23 	sts	0x23D2, r25	; 0x8023d2 <TWID_TxCallback+0x1>
     fc4:	08 95       	ret
		case TWIE_ptr: TWIE_TxCallback = f; break;
     fc6:	80 93 cf 23 	sts	0x23CF, r24	; 0x8023cf <TWIE_TxCallback>
     fca:	90 93 d0 23 	sts	0x23D0, r25	; 0x8023d0 <TWIE_TxCallback+0x1>
     fce:	08 95       	ret
		case TWIF_ptr: TWIF_TxCallback = f; break;
     fd0:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <TWIF_TxCallback>
     fd4:	90 93 ce 23 	sts	0x23CE, r25	; 0x8023ce <TWIF_TxCallback+0x1>
     fd8:	08 95       	ret
     fda:	ff cf       	rjmp	.-2      	; 0xfda <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
>>>>>>> Stashed changes

00000fdc <_Z13TWI_onReceivePFvhER10TWI_struct>:
}


//rx callbacks, set function call at interrupt
void TWI_onReceive(void (*f)(uint8_t), TWI_struct &twi) {
	switch ((int) &twi) {
     fdc:	60 39       	cpi	r22, 0x90	; 144
     fde:	24 e0       	ldi	r18, 0x04	; 4
     fe0:	72 07       	cpc	r23, r18
     fe2:	91 f0       	breq	.+36     	; 0x1008 <_Z13TWI_onReceivePFvhER10TWI_struct+0x2c>
     fe4:	24 f4       	brge	.+8      	; 0xfee <_Z13TWI_onReceivePFvhER10TWI_struct+0x12>
     fe6:	60 38       	cpi	r22, 0x80	; 128
     fe8:	74 40       	sbci	r23, 0x04	; 4
     fea:	49 f0       	breq	.+18     	; 0xffe <_Z13TWI_onReceivePFvhER10TWI_struct+0x22>
     fec:	1c c0       	rjmp	.+56     	; 0x1026 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
     fee:	60 3a       	cpi	r22, 0xA0	; 160
     ff0:	24 e0       	ldi	r18, 0x04	; 4
     ff2:	72 07       	cpc	r23, r18
     ff4:	71 f0       	breq	.+28     	; 0x1012 <_Z13TWI_onReceivePFvhER10TWI_struct+0x36>
     ff6:	60 3b       	cpi	r22, 0xB0	; 176
     ff8:	74 40       	sbci	r23, 0x04	; 4
     ffa:	81 f0       	breq	.+32     	; 0x101c <_Z13TWI_onReceivePFvhER10TWI_struct+0x40>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_RxCallback = f; break;
<<<<<<< Updated upstream
    1046:	80 93 bd 23 	sts	0x23BD, r24	; 0x8023bd <TWIC_RxCallback>
    104a:	90 93 be 23 	sts	0x23BE, r25	; 0x8023be <TWIC_RxCallback+0x1>
    104e:	08 95       	ret
		case TWID_ptr: TWID_RxCallback = f; break;
    1050:	80 93 bb 23 	sts	0x23BB, r24	; 0x8023bb <TWID_RxCallback>
    1054:	90 93 bc 23 	sts	0x23BC, r25	; 0x8023bc <TWID_RxCallback+0x1>
    1058:	08 95       	ret
		case TWIE_ptr: TWIE_RxCallback = f; break;
    105a:	80 93 b9 23 	sts	0x23B9, r24	; 0x8023b9 <TWIE_RxCallback>
    105e:	90 93 ba 23 	sts	0x23BA, r25	; 0x8023ba <TWIE_RxCallback+0x1>
    1062:	08 95       	ret
		case TWIF_ptr: TWIF_RxCallback = f; break;
    1064:	80 93 b7 23 	sts	0x23B7, r24	; 0x8023b7 <TWIF_RxCallback>
    1068:	90 93 b8 23 	sts	0x23B8, r25	; 0x8023b8 <TWIF_RxCallback+0x1>
    106c:	08 95       	ret
    106e:	ff cf       	rjmp	.-2      	; 0x106e <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
=======
     ffe:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <TWIC_RxCallback>
    1002:	90 93 cc 23 	sts	0x23CC, r25	; 0x8023cc <TWIC_RxCallback+0x1>
    1006:	08 95       	ret
		case TWID_ptr: TWID_RxCallback = f; break;
    1008:	80 93 c9 23 	sts	0x23C9, r24	; 0x8023c9 <TWID_RxCallback>
    100c:	90 93 ca 23 	sts	0x23CA, r25	; 0x8023ca <TWID_RxCallback+0x1>
    1010:	08 95       	ret
		case TWIE_ptr: TWIE_RxCallback = f; break;
    1012:	80 93 c7 23 	sts	0x23C7, r24	; 0x8023c7 <TWIE_RxCallback>
    1016:	90 93 c8 23 	sts	0x23C8, r25	; 0x8023c8 <TWIE_RxCallback+0x1>
    101a:	08 95       	ret
		case TWIF_ptr: TWIF_RxCallback = f; break;
    101c:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <TWIF_RxCallback>
    1020:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <TWIF_RxCallback+0x1>
    1024:	08 95       	ret
    1026:	ff cf       	rjmp	.-2      	; 0x1026 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
>>>>>>> Stashed changes

00001028 <_Z10HexToASCIIh>:

#include "UART.h"

char HexToASCII(uint8_t i)
  {
	  i &= 0x0f;
    1028:	8f 70       	andi	r24, 0x0F	; 15
	  if(i > 9)
    102a:	8a 30       	cpi	r24, 0x0A	; 10
    102c:	10 f0       	brcs	.+4      	; 0x1032 <_Z10HexToASCIIh+0xa>
	  return i+'A'-10;
    102e:	89 5c       	subi	r24, 0xC9	; 201
    1030:	08 95       	ret
	  else
	  return i+'0';
    1032:	80 5d       	subi	r24, 0xD0	; 208
  }
    1034:	08 95       	ret

00001036 <_Z18USART_Set_BaudrateR12USART_structmm>:
 
 bool USART_Set_Baudrate(USART_struct &USART, uint32_t baud, uint32_t cpu_hz)
{
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	7c 01       	movw	r14, r24
    1052:	4a 01       	movw	r8, r20
    1054:	5b 01       	movw	r10, r22
    1056:	28 01       	movw	r4, r16
    1058:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    105a:	fc 01       	movw	r30, r24
    105c:	84 81       	ldd	r24, Z+4	; 0x04
    105e:	82 ff       	sbrs	r24, 2
    1060:	16 c0       	rjmp	.+44     	; 0x108e <_Z18USART_Set_BaudrateR12USART_structmm+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1062:	d9 01       	movw	r26, r18
    1064:	c8 01       	movw	r24, r16
    1066:	68 94       	set
    1068:	12 f8       	bld	r1, 2
    106a:	b6 95       	lsr	r27
    106c:	a7 95       	ror	r26
    106e:	97 95       	ror	r25
    1070:	87 95       	ror	r24
    1072:	16 94       	lsr	r1
    1074:	d1 f7       	brne	.-12     	; 0x106a <_Z18USART_Set_BaudrateR12USART_structmm+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1076:	b9 01       	movw	r22, r18
    1078:	a8 01       	movw	r20, r16
    107a:	03 2e       	mov	r0, r19
    107c:	36 e1       	ldi	r19, 0x16	; 22
    107e:	76 95       	lsr	r23
    1080:	67 95       	ror	r22
    1082:	57 95       	ror	r21
    1084:	47 95       	ror	r20
    1086:	3a 95       	dec	r19
    1088:	d1 f7       	brne	.-12     	; 0x107e <_Z18USART_Set_BaudrateR12USART_structmm+0x48>
    108a:	30 2d       	mov	r19, r0
    108c:	15 c0       	rjmp	.+42     	; 0x10b8 <_Z18USART_Set_BaudrateR12USART_structmm+0x82>

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    108e:	d9 01       	movw	r26, r18
    1090:	c8 01       	movw	r24, r16
    1092:	68 94       	set
    1094:	13 f8       	bld	r1, 3
    1096:	b6 95       	lsr	r27
    1098:	a7 95       	ror	r26
    109a:	97 95       	ror	r25
    109c:	87 95       	ror	r24
    109e:	16 94       	lsr	r1
    10a0:	d1 f7       	brne	.-12     	; 0x1096 <_Z18USART_Set_BaudrateR12USART_structmm+0x60>
		min_rate /= 2;
    10a2:	b9 01       	movw	r22, r18
    10a4:	a8 01       	movw	r20, r16
    10a6:	03 2e       	mov	r0, r19
    10a8:	37 e1       	ldi	r19, 0x17	; 23
    10aa:	76 95       	lsr	r23
    10ac:	67 95       	ror	r22
    10ae:	57 95       	ror	r21
    10b0:	47 95       	ror	r20
    10b2:	3a 95       	dec	r19
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <_Z18USART_Set_BaudrateR12USART_structmm+0x74>
    10b6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10b8:	88 15       	cp	r24, r8
    10ba:	99 05       	cpc	r25, r9
    10bc:	aa 05       	cpc	r26, r10
    10be:	bb 05       	cpc	r27, r11
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <_Z18USART_Set_BaudrateR12USART_structmm+0x8e>
    10c2:	a6 c0       	rjmp	.+332    	; 0x1210 <_Z18USART_Set_BaudrateR12USART_structmm+0x1da>
    10c4:	84 16       	cp	r8, r20
    10c6:	95 06       	cpc	r9, r21
    10c8:	a6 06       	cpc	r10, r22
    10ca:	b7 06       	cpc	r11, r23
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <_Z18USART_Set_BaudrateR12USART_structmm+0x9a>
    10ce:	a2 c0       	rjmp	.+324    	; 0x1214 <_Z18USART_Set_BaudrateR12USART_structmm+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    10d0:	f7 01       	movw	r30, r14
    10d2:	84 81       	ldd	r24, Z+4	; 0x04
    10d4:	82 fd       	sbrc	r24, 2
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <_Z18USART_Set_BaudrateR12USART_structmm+0xaa>
		baud *= 2;
    10d8:	88 0c       	add	r8, r8
    10da:	99 1c       	adc	r9, r9
    10dc:	aa 1c       	adc	r10, r10
    10de:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
<<<<<<< Updated upstream
    1128:	c3 01       	movw	r24, r6
    112a:	b2 01       	movw	r22, r4
    112c:	a5 01       	movw	r20, r10
    112e:	94 01       	movw	r18, r8
    1130:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
=======
    10e0:	c3 01       	movw	r24, r6
    10e2:	b2 01       	movw	r22, r4
    10e4:	a5 01       	movw	r20, r10
    10e6:	94 01       	movw	r18, r8
    10e8:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
>>>>>>> Stashed changes

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    10ec:	2f 3f       	cpi	r18, 0xFF	; 255
    10ee:	31 05       	cpc	r19, r1
    10f0:	41 05       	cpc	r20, r1
    10f2:	51 05       	cpc	r21, r1
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <_Z18USART_Set_BaudrateR12USART_structmm+0xc2>
    10f6:	90 c0       	rjmp	.+288    	; 0x1218 <_Z18USART_Set_BaudrateR12USART_structmm+0x1e2>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 e0       	ldi	r26, 0x00	; 0
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	c9 ef       	ldi	r28, 0xF9	; 249
    1102:	05 c0       	rjmp	.+10     	; 0x110e <_Z18USART_Set_BaudrateR12USART_structmm+0xd8>
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	4a 07       	cpc	r20, r26
    110a:	5b 07       	cpc	r21, r27
    110c:	58 f0       	brcs	.+22     	; 0x1124 <_Z18USART_Set_BaudrateR12USART_structmm+0xee>
			break;
		}

		limit <<= 1;
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	aa 1f       	adc	r26, r26
    1114:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1116:	cd 3f       	cpi	r28, 0xFD	; 253
    1118:	0c f4       	brge	.+2      	; 0x111c <_Z18USART_Set_BaudrateR12USART_structmm+0xe6>
			limit |= 1;
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    111e:	c7 30       	cpi	r28, 0x07	; 7
    1120:	89 f7       	brne	.-30     	; 0x1104 <_Z18USART_Set_BaudrateR12USART_structmm+0xce>
    1122:	4f c0       	rjmp	.+158    	; 0x11c2 <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1124:	cc 23       	and	r28, r28
    1126:	0c f0       	brlt	.+2      	; 0x112a <_Z18USART_Set_BaudrateR12USART_structmm+0xf4>
    1128:	4c c0       	rjmp	.+152    	; 0x11c2 <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    112a:	d5 01       	movw	r26, r10
    112c:	c4 01       	movw	r24, r8
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	aa 1f       	adc	r26, r26
    1134:	bb 1f       	adc	r27, r27
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	48 1a       	sub	r4, r24
    1148:	59 0a       	sbc	r5, r25
    114a:	6a 0a       	sbc	r6, r26
    114c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    114e:	ce 3f       	cpi	r28, 0xFE	; 254
    1150:	f4 f4       	brge	.+60     	; 0x118e <_Z18USART_Set_BaudrateR12USART_structmm+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
<<<<<<< Updated upstream
    119a:	8d ef       	ldi	r24, 0xFD	; 253
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	8c 1b       	sub	r24, r28
    11a0:	91 09       	sbc	r25, r1
    11a2:	c7 fd       	sbrc	r28, 7
    11a4:	93 95       	inc	r25
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <_Z18USART_Set_BaudrateR12USART_structmm+0x132>
    11a8:	44 0c       	add	r4, r4
    11aa:	55 1c       	adc	r5, r5
    11ac:	66 1c       	adc	r6, r6
    11ae:	77 1c       	adc	r7, r7
    11b0:	8a 95       	dec	r24
    11b2:	d2 f7       	brpl	.-12     	; 0x11a8 <_Z18USART_Set_BaudrateR12USART_structmm+0x12a>
    11b4:	d5 01       	movw	r26, r10
    11b6:	c4 01       	movw	r24, r8
    11b8:	b6 95       	lsr	r27
    11ba:	a7 95       	ror	r26
    11bc:	97 95       	ror	r25
    11be:	87 95       	ror	r24
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	64 0d       	add	r22, r4
    11c6:	75 1d       	adc	r23, r5
    11c8:	86 1d       	adc	r24, r6
    11ca:	97 1d       	adc	r25, r7
    11cc:	a5 01       	movw	r20, r10
    11ce:	94 01       	movw	r18, r8
    11d0:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
    11d4:	37 c0       	rjmp	.+110    	; 0x1244 <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
=======
    1152:	8d ef       	ldi	r24, 0xFD	; 253
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	8c 1b       	sub	r24, r28
    1158:	91 09       	sbc	r25, r1
    115a:	c7 fd       	sbrc	r28, 7
    115c:	93 95       	inc	r25
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <_Z18USART_Set_BaudrateR12USART_structmm+0x132>
    1160:	44 0c       	add	r4, r4
    1162:	55 1c       	adc	r5, r5
    1164:	66 1c       	adc	r6, r6
    1166:	77 1c       	adc	r7, r7
    1168:	8a 95       	dec	r24
    116a:	d2 f7       	brpl	.-12     	; 0x1160 <_Z18USART_Set_BaudrateR12USART_structmm+0x12a>
    116c:	d5 01       	movw	r26, r10
    116e:	c4 01       	movw	r24, r8
    1170:	b6 95       	lsr	r27
    1172:	a7 95       	ror	r26
    1174:	97 95       	ror	r25
    1176:	87 95       	ror	r24
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	64 0d       	add	r22, r4
    117e:	75 1d       	adc	r23, r5
    1180:	86 1d       	adc	r24, r6
    1182:	97 1d       	adc	r25, r7
    1184:	a5 01       	movw	r20, r10
    1186:	94 01       	movw	r18, r8
    1188:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
    118c:	37 c0       	rjmp	.+110    	; 0x11fc <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
>>>>>>> Stashed changes
		} else {
			baud <<= exp + 3;
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	8c 0f       	add	r24, r28
    1192:	a5 01       	movw	r20, r10
    1194:	94 01       	movw	r18, r8
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <_Z18USART_Set_BaudrateR12USART_structmm+0x16a>
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	44 1f       	adc	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	8a 95       	dec	r24
    11a2:	d2 f7       	brpl	.-12     	; 0x1198 <_Z18USART_Set_BaudrateR12USART_structmm+0x162>
			div = (cpu_hz + baud / 2) / baud;
<<<<<<< Updated upstream
    11ec:	da 01       	movw	r26, r20
    11ee:	c9 01       	movw	r24, r18
    11f0:	b6 95       	lsr	r27
    11f2:	a7 95       	ror	r26
    11f4:	97 95       	ror	r25
    11f6:	87 95       	ror	r24
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	64 0d       	add	r22, r4
    11fe:	75 1d       	adc	r23, r5
    1200:	86 1d       	adc	r24, r6
    1202:	97 1d       	adc	r25, r7
    1204:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
    1208:	1d c0       	rjmp	.+58     	; 0x1244 <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
=======
    11a4:	da 01       	movw	r26, r20
    11a6:	c9 01       	movw	r24, r18
    11a8:	b6 95       	lsr	r27
    11aa:	a7 95       	ror	r26
    11ac:	97 95       	ror	r25
    11ae:	87 95       	ror	r24
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	64 0d       	add	r22, r4
    11b6:	75 1d       	adc	r23, r5
    11b8:	86 1d       	adc	r24, r6
    11ba:	97 1d       	adc	r25, r7
    11bc:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
    11c0:	1d c0       	rjmp	.+58     	; 0x11fc <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
>>>>>>> Stashed changes
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	8c 0f       	add	r24, r28
    11c6:	a5 01       	movw	r20, r10
    11c8:	94 01       	movw	r18, r8
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <_Z18USART_Set_BaudrateR12USART_structmm+0x19e>
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	44 1f       	adc	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	8a 95       	dec	r24
    11d6:	d2 f7       	brpl	.-12     	; 0x11cc <_Z18USART_Set_BaudrateR12USART_structmm+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
<<<<<<< Updated upstream
    1220:	da 01       	movw	r26, r20
    1222:	c9 01       	movw	r24, r18
    1224:	b6 95       	lsr	r27
    1226:	a7 95       	ror	r26
    1228:	97 95       	ror	r25
    122a:	87 95       	ror	r24
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	64 0d       	add	r22, r4
    1232:	75 1d       	adc	r23, r5
    1234:	86 1d       	adc	r24, r6
    1236:	97 1d       	adc	r25, r7
    1238:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	31 09       	sbc	r19, r1
    1240:	41 09       	sbc	r20, r1
    1242:	51 09       	sbc	r21, r1
=======
    11d8:	da 01       	movw	r26, r20
    11da:	c9 01       	movw	r24, r18
    11dc:	b6 95       	lsr	r27
    11de:	a7 95       	ror	r26
    11e0:	97 95       	ror	r25
    11e2:	87 95       	ror	r24
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	64 0d       	add	r22, r4
    11ea:	75 1d       	adc	r23, r5
    11ec:	86 1d       	adc	r24, r6
    11ee:	97 1d       	adc	r25, r7
    11f0:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	31 09       	sbc	r19, r1
    11f8:	41 09       	sbc	r20, r1
    11fa:	51 09       	sbc	r21, r1
>>>>>>> Stashed changes
	}

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    11fc:	83 2f       	mov	r24, r19
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	c2 95       	swap	r28
    1202:	c0 7f       	andi	r28, 0xF0	; 240
    1204:	c8 2b       	or	r28, r24
    1206:	f7 01       	movw	r30, r14
    1208:	c7 83       	std	Z+7, r28	; 0x07
	USART.BAUDCTRLA = (uint8_t)div;
    120a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	18 c0       	rjmp	.+48     	; 0x1240 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1218:	d5 01       	movw	r26, r10
    121a:	c4 01       	movw	r24, r8
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	aa 1f       	adc	r26, r26
    1222:	bb 1f       	adc	r27, r27
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	aa 1f       	adc	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	48 1a       	sub	r4, r24
    1236:	59 0a       	sbc	r5, r25
    1238:	6a 0a       	sbc	r6, r26
    123a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    123c:	c9 ef       	ldi	r28, 0xF9	; 249
    123e:	89 cf       	rjmp	.-238    	; 0x1152 <_Z18USART_Set_BaudrateR12USART_structmm+0x11c>

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	USART.BAUDCTRLA = (uint8_t)div;

	return true;
}
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	5f 90       	pop	r5
    1258:	4f 90       	pop	r4
    125a:	08 95       	ret

0000125c <_Z10USART_InitR12USART_structmmb>:
 
 
 void USART_Init(USART_struct &USART, uint32_t baud, uint32_t cpu_hz, bool doubleSpeed)
 {	
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
	 /* Set baud rate */
	 USART_Set_Baudrate(USART, baud,cpu_hz);
    1266:	0e 94 1b 08 	call	0x1036	; 0x1036 <_Z18USART_Set_BaudrateR12USART_structmm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    126a:	8f e5       	ldi	r24, 0x5F	; 95
    126c:	9a ee       	ldi	r25, 0xEA	; 234
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <_Z10USART_InitR12USART_structmmb+0x12>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <_Z10USART_InitR12USART_structmmb+0x18>
    1274:	00 00       	nop
	 _delay_ms(10); // wait for stable clock
	 //USART.CTRLA = (1 << USART_RXCINTLVL0_bp)|(1 << USART_TXCINTLVL0_bp)|(1 << USART_DREINTLVL0_bp);
	 USART.CTRLB = (1 << USART_RXEN_bp)|(1 << USART_TXEN_bp); 
    1276:	88 e1       	ldi	r24, 0x18	; 24
    1278:	8c 83       	std	Y+4, r24	; 0x04
 }
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <_Z14USART_TransmitR12USART_structc>:

void USART_Transmit(USART_struct &USART, const char data )
{
    1284:	fc 01       	movw	r30, r24
	/* Wait for empty transmit buffer */
	while ( !( USART.STATUS & (1<<USART_DREIF_bp)) );
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	95 ff       	sbrs	r25, 5
    128a:	fd cf       	rjmp	.-6      	; 0x1286 <_Z14USART_TransmitR12USART_structc+0x2>
	/* Put data into buffer, sends the data */
	USART.DATA = data;
    128c:	60 83       	st	Z, r22
    128e:	08 95       	ret

00001290 <_Z13USART_ReceiveR12USART_struct>:
}

char USART_Receive(USART_struct &USART)
{
    1290:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	while ( !(USART.STATUS & (1<<USART_RXCIF_bp)));
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	99 23       	and	r25, r25
    1296:	ec f7       	brge	.-6      	; 0x1292 <_Z13USART_ReceiveR12USART_struct+0x2>
	/* Get and return received data from buffer */
	return USART.DATA;
    1298:	80 81       	ld	r24, Z
}
    129a:	08 95       	ret

0000129c <_Z13USART_ReceiveR12USART_structjRb>:

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
    129c:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    129e:	61 15       	cp	r22, r1
    12a0:	71 05       	cpc	r23, r1
    12a2:	99 f0       	breq	.+38     	; 0x12ca <_Z13USART_ReceiveR12USART_structjRb+0x2e>
	{
		if(USART.STATUS & (1<<USART_RXCIF_bp))
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	88 23       	and	r24, r24
    12a8:	34 f0       	brlt	.+12     	; 0x12b6 <_Z13USART_ReceiveR12USART_structjRb+0x1a>
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <_Z13USART_ReceiveR12USART_structjRb+0x1e>
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	99 23       	and	r25, r25
    12b4:	14 f4       	brge	.+4      	; 0x12ba <_Z13USART_ReceiveR12USART_structjRb+0x1e>
		{
			/* Get and return received data from buffer */
			return USART.DATA;
    12b6:	80 81       	ld	r24, Z
    12b8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	8a 95       	dec	r24
    12be:	f1 f7       	brne	.-4      	; 0x12bc <_Z13USART_ReceiveR12USART_structjRb+0x20>
}

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	62 17       	cp	r22, r18
    12c6:	73 07       	cpc	r23, r19
    12c8:	99 f7       	brne	.-26     	; 0x12b0 <_Z13USART_ReceiveR12USART_structjRb+0x14>
		}

		_delay_us(1);
	}
	 
	isTimedOut = true;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	fa 01       	movw	r30, r20
    12ce:	80 83       	st	Z, r24
	return 0;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
}
    12d2:	08 95       	ret

000012d4 <_Z15USART_AvailableR12USART_struct>:

 bool USART_Available(USART_struct &USART)
 {
	 return (USART.STATUS & (1<<USART_RXCIF_bp));
    12d4:	fc 01       	movw	r30, r24
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
 }
    12d8:	88 1f       	adc	r24, r24
    12da:	88 27       	eor	r24, r24
    12dc:	88 1f       	adc	r24, r24
    12de:	08 95       	ret

000012e0 <_Z20USART_TransmitStringR12USART_structPKc>:


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	fb 01       	movw	r30, r22
	 for(uint8_t i = 0; str[i]; i++)
    12ec:	60 81       	ld	r22, Z
    12ee:	66 23       	and	r22, r22
    12f0:	69 f0       	breq	.+26     	; 0x130c <_Z20USART_TransmitStringR12USART_structPKc+0x2c>
    12f2:	8f 01       	movw	r16, r30
    12f4:	7c 01       	movw	r14, r24
    12f6:	c0 e0       	ldi	r28, 0x00	; 0
	 USART_Transmit(USART, str[i]);
    12f8:	c7 01       	movw	r24, r14
    12fa:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
	 for(uint8_t i = 0; str[i]; i++)
    12fe:	cf 5f       	subi	r28, 0xFF	; 255
    1300:	f8 01       	movw	r30, r16
    1302:	ec 0f       	add	r30, r28
    1304:	f1 1d       	adc	r31, r1
    1306:	60 81       	ld	r22, Z
    1308:	61 11       	cpse	r22, r1
    130a:	f6 cf       	rjmp	.-20     	; 0x12f8 <_Z20USART_TransmitStringR12USART_structPKc+0x18>
	 USART_Transmit(USART, str[i]);
 }
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	08 95       	ret

00001318 <_Z14USART_TransmitR12USART_structPKch>:


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
	 for(uint8_t i = 0; i < length; i++)
    1324:	44 23       	and	r20, r20
    1326:	81 f0       	breq	.+32     	; 0x1348 <_Z14USART_TransmitR12USART_structPKch+0x30>
    1328:	7c 01       	movw	r14, r24
    132a:	eb 01       	movw	r28, r22
    132c:	41 50       	subi	r20, 0x01	; 1
    132e:	04 2f       	mov	r16, r20
    1330:	10 e0       	ldi	r17, 0x00	; 0
    1332:	0f 5f       	subi	r16, 0xFF	; 255
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	06 0f       	add	r16, r22
    1338:	17 1f       	adc	r17, r23
	 USART_Transmit(USART, buff[i]);
    133a:	69 91       	ld	r22, Y+
    133c:	c7 01       	movw	r24, r14
    133e:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
	 for(uint8_t i = 0; i < length; i++)
    1342:	c0 17       	cp	r28, r16
    1344:	d1 07       	cpc	r29, r17
    1346:	c9 f7       	brne	.-14     	; 0x133a <_Z14USART_TransmitR12USART_structPKch+0x22>
	 USART_Transmit(USART, buff[i]);
 }
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	08 95       	ret

00001356 <_Z18USART_Transmit_HexR12USART_structc>:

 
 void USART_Transmit_Hex(USART_struct &USART, const char data )
 {
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	ec 01       	movw	r28, r24
    135e:	16 2f       	mov	r17, r22
	 USART_TransmitString(USART, "0x");
    1360:	60 e7       	ldi	r22, 0x70	; 112
    1362:	71 e2       	ldi	r23, 0x21	; 33
    1364:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	 USART_Transmit(USART, HexToASCII(data>>4));
    1368:	81 2f       	mov	r24, r17
    136a:	82 95       	swap	r24
    136c:	8f 70       	andi	r24, 0x0F	; 15
    136e:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>
    1372:	68 2f       	mov	r22, r24
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	 USART_Transmit(USART, HexToASCII(data));
    137a:	81 2f       	mov	r24, r17
    137c:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>
    1380:	68 2f       	mov	r22, r24
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	08 95       	ret

00001390 <_Z21USART_Transmit_NumberR12USART_structi>:


 void USART_Transmit_Number(USART_struct &USART, int16_t num)
 {
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	8c 01       	movw	r16, r24
    139a:	eb 01       	movw	r28, r22
	 if(num < 0)
    139c:	dd 23       	and	r29, r29
    139e:	34 f4       	brge	.+12     	; 0x13ac <_Z21USART_Transmit_NumberR12USART_structi+0x1c>
	 {
		 num = -num;
    13a0:	d1 95       	neg	r29
    13a2:	c1 95       	neg	r28
    13a4:	d1 09       	sbc	r29, r1
		 USART_Transmit(USART, '-');
    13a6:	6d e2       	ldi	r22, 0x2D	; 45
    13a8:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	 }

	 bool started = false;
	 uint8_t ten_thousands	= (num/10000);
<<<<<<< Updated upstream
    13f4:	ce 01       	movw	r24, r28
    13f6:	60 e1       	ldi	r22, 0x10	; 16
    13f8:	77 e2       	ldi	r23, 0x27	; 39
    13fa:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    13ac:	ce 01       	movw	r24, r28
    13ae:	60 e1       	ldi	r22, 0x10	; 16
    13b0:	77 e2       	ldi	r23, 0x27	; 39
    13b2:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	 if(ten_thousands > 0)
    13b6:	66 23       	and	r22, r22
    13b8:	31 f0       	breq	.+12     	; 0x13c6 <_Z21USART_Transmit_NumberR12USART_structi+0x36>
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
    13ba:	60 5d       	subi	r22, 0xD0	; 208
    13bc:	c8 01       	movw	r24, r16
    13be:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <_Z21USART_Transmit_NumberR12USART_structi+0x38>
	 {
		 num = -num;
		 USART_Transmit(USART, '-');
	 }

	 bool started = false;
    13c6:	20 e0       	ldi	r18, 0x00	; 0
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
		 started = true;
	 }

	 uint8_t thousands	= (num/1000)%10;
<<<<<<< Updated upstream
    1410:	ce 01       	movw	r24, r28
    1412:	68 ee       	ldi	r22, 0xE8	; 232
    1414:	73 e0       	ldi	r23, 0x03	; 3
    1416:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    141a:	cb 01       	movw	r24, r22
    141c:	6a e0       	ldi	r22, 0x0A	; 10
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    13c8:	ce 01       	movw	r24, r28
    13ca:	68 ee       	ldi	r22, 0xE8	; 232
    13cc:	73 e0       	ldi	r23, 0x03	; 3
    13ce:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    13d2:	cb 01       	movw	r24, r22
    13d4:	6a e0       	ldi	r22, 0x0A	; 10
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	 if(thousands > 0)
    13dc:	88 23       	and	r24, r24
    13de:	81 f0       	breq	.+32     	; 0x1400 <_Z21USART_Transmit_NumberR12USART_structi+0x70>
	 {
		 USART_Transmit(USART, '0'+thousands);
    13e0:	60 e3       	ldi	r22, 0x30	; 48
    13e2:	68 0f       	add	r22, r24
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t hundreds	= (num/100)%10;
<<<<<<< Updated upstream
    1432:	ce 01       	movw	r24, r28
    1434:	64 e6       	ldi	r22, 0x64	; 100
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    143c:	cb 01       	movw	r24, r22
    143e:	6a e0       	ldi	r22, 0x0A	; 10
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1448:	ce 01       	movw	r24, r28
    144a:	64 e6       	ldi	r22, 0x64	; 100
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1452:	cb 01       	movw	r24, r22
    1454:	6a e0       	ldi	r22, 0x0A	; 10
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    13ea:	ce 01       	movw	r24, r28
    13ec:	64 e6       	ldi	r22, 0x64	; 100
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	6a e0       	ldi	r22, 0x0A	; 10
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    13fe:	0e c0       	rjmp	.+28     	; 0x141c <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1400:	ce 01       	movw	r24, r28
    1402:	64 e6       	ldi	r22, 0x64	; 100
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    140a:	cb 01       	movw	r24, r22
    140c:	6a e0       	ldi	r22, 0x0A	; 10
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	 if(hundreds > 0 || started)
    1414:	81 11       	cpse	r24, r1
    1416:	02 c0       	rjmp	.+4      	; 0x141c <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1418:	22 23       	and	r18, r18
    141a:	f9 f0       	breq	.+62     	; 0x145a <_Z21USART_Transmit_NumberR12USART_structi+0xca>
	 {
		 USART_Transmit(USART, '0'+hundreds);
    141c:	60 e3       	ldi	r22, 0x30	; 48
    141e:	68 0f       	add	r22, r24
    1420:	c8 01       	movw	r24, r16
    1422:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
<<<<<<< Updated upstream
    146e:	2a e0       	ldi	r18, 0x0A	; 10
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	ce 01       	movw	r24, r28
    1474:	b9 01       	movw	r22, r18
    1476:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    147a:	cb 01       	movw	r24, r22
    147c:	b9 01       	movw	r22, r18
    147e:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    1426:	2a e0       	ldi	r18, 0x0A	; 10
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	ce 01       	movw	r24, r28
    142c:	b9 01       	movw	r22, r18
    142e:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    1432:	cb 01       	movw	r24, r22
    1434:	b9 01       	movw	r22, r18
    1436:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	 if(tens > 0 || started)
	 {
		 USART_Transmit(USART, '0'+tens);
    143a:	60 e3       	ldi	r22, 0x30	; 48
    143c:	68 0f       	add	r22, r24
    143e:	c8 01       	movw	r24, r16
    1440:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
<<<<<<< Updated upstream
    148c:	ce 01       	movw	r24, r28
    148e:	6a e0       	ldi	r22, 0x0A	; 10
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1496:	60 e3       	ldi	r22, 0x30	; 48
    1498:	68 0f       	add	r22, r24
    149a:	c8 01       	movw	r24, r16
    149c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
=======
    1444:	ce 01       	movw	r24, r28
    1446:	6a e0       	ldi	r22, 0x0A	; 10
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    144e:	60 e3       	ldi	r22, 0x30	; 48
    1450:	68 0f       	add	r22, r24
    1452:	c8 01       	movw	r24, r16
    1454:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
>>>>>>> Stashed changes
 }
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <_Z21USART_Transmit_NumberR12USART_structi+0xe4>
	 {
		 USART_Transmit(USART, '0'+hundreds);
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
<<<<<<< Updated upstream
    14a2:	2a e0       	ldi	r18, 0x0A	; 10
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	ce 01       	movw	r24, r28
    14a8:	b9 01       	movw	r22, r18
    14aa:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    14ae:	cb 01       	movw	r24, r22
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    1466:	cb 01       	movw	r24, r22
    1468:	b9 01       	movw	r22, r18
    146a:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	 if(tens > 0 || started)
    146e:	88 23       	and	r24, r24
    1470:	49 f3       	breq	.-46     	; 0x1444 <_Z21USART_Transmit_NumberR12USART_structi+0xb4>
    1472:	e3 cf       	rjmp	.-58     	; 0x143a <_Z21USART_Transmit_NumberR12USART_structi+0xaa>
		 USART_Transmit(USART, '0'+tens);
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
 }
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <_Z18USART_TransmitDoneR12USART_struct>:
 


bool USART_TransmitDone(USART_struct &USART)
{
	return USART.STATUS & (1<<USART_DREIF_bp);
    147e:	fc 01       	movw	r30, r24
    1480:	81 81       	ldd	r24, Z+1	; 0x01
}
    1482:	85 fb       	bst	r24, 5
    1484:	88 27       	eor	r24, r24
    1486:	80 f9       	bld	r24, 0
    1488:	08 95       	ret

0000148a <_Z12USB_Transmitc>:

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
    14d8:	08 95       	ret
=======
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
    1490:	08 95       	ret
>>>>>>> Stashed changes

00001492 <_Z11USB_Receivev>:
}

char USB_Receive()
{
	// 	/* Wait for data to be received */
	while (!udi_cdc_is_rx_ready());
<<<<<<< Updated upstream
    14da:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <udi_cdc_is_rx_ready>
    14de:	88 23       	and	r24, r24
    14e0:	e1 f3       	breq	.-8      	; 0x14da <_Z11USB_Receivev>
	// 	/* Get and return received data from buffer */
	return udi_cdc_getc();
    14e2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <udi_cdc_getc>
=======
    1492:	0e 94 24 1b 	call	0x3648	; 0x3648 <udi_cdc_is_rx_ready>
    1496:	88 23       	and	r24, r24
    1498:	e1 f3       	breq	.-8      	; 0x1492 <_Z11USB_Receivev>
	// 	/* Get and return received data from buffer */
	return udi_cdc_getc();
    149a:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <udi_cdc_getc>
>>>>>>> Stashed changes
}
    149e:	08 95       	ret

000014a0 <_Z11USB_ReceivejRb>:

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	8c 01       	movw	r16, r24
    14ae:	7b 01       	movw	r14, r22
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    14b0:	89 2b       	or	r24, r25
    14b2:	81 f0       	breq	.+32     	; 0x14d4 <_Z11USB_ReceivejRb+0x34>
    14b4:	c0 e0       	ldi	r28, 0x00	; 0
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(udi_cdc_is_rx_ready())
<<<<<<< Updated upstream
    1500:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <udi_cdc_is_rx_ready>
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <_Z11USB_ReceivejRb+0x26>
		{
			/* Get and return received data from buffer */
			return udi_cdc_getc();
    1508:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <udi_cdc_getc>
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <_Z11USB_ReceivejRb+0x3c>
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	8a 95       	dec	r24
    1512:	f1 f7       	brne	.-4      	; 0x1510 <_Z11USB_ReceivejRb+0x28>
=======
    14b8:	0e 94 24 1b 	call	0x3648	; 0x3648 <udi_cdc_is_rx_ready>
    14bc:	88 23       	and	r24, r24
    14be:	19 f0       	breq	.+6      	; 0x14c6 <_Z11USB_ReceivejRb+0x26>
		{
			/* Get and return received data from buffer */
			return udi_cdc_getc();
    14c0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <udi_cdc_getc>
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <_Z11USB_ReceivejRb+0x3c>
    14c6:	88 e0       	ldi	r24, 0x08	; 8
    14c8:	8a 95       	dec	r24
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <_Z11USB_ReceivejRb+0x28>
>>>>>>> Stashed changes
}

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    14cc:	21 96       	adiw	r28, 0x01	; 1
    14ce:	0c 17       	cp	r16, r28
    14d0:	1d 07       	cpc	r17, r29
    14d2:	91 f7       	brne	.-28     	; 0x14b8 <_Z11USB_ReceivejRb+0x18>
		}

		_delay_us(1);
	}
	
	isTimedOut = true;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	f7 01       	movw	r30, r14
    14d8:	80 83       	st	Z, r24
	return 0;
    14da:	80 e0       	ldi	r24, 0x00	; 0
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	08 95       	ret

000014ea <_Z13USB_Availablev>:

bool USB_Available()
{
	return (udi_cdc_is_tx_ready());
<<<<<<< Updated upstream
    1532:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <udi_cdc_is_tx_ready>
=======
    14ea:	0e 94 90 1c 	call	0x3920	; 0x3920 <udi_cdc_is_tx_ready>
>>>>>>> Stashed changes
}
    14ee:	08 95       	ret

000014f0 <_Z18USB_TransmitStringPKc>:


void USB_TransmitString(const char* str)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	fc 01       	movw	r30, r24
	for(uint8_t i = 0; str[i]; i++)
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	61 f0       	breq	.+24     	; 0x1516 <_Z18USB_TransmitStringPKc+0x26>
    14fe:	8f 01       	movw	r16, r30
    1500:	c0 e0       	ldi	r28, 0x00	; 0

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
}


void USB_TransmitString(const char* str)
{
	for(uint8_t i = 0; str[i]; i++)
    1508:	cf 5f       	subi	r28, 0xFF	; 255
    150a:	f8 01       	movw	r30, r16
    150c:	ec 0f       	add	r30, r28
    150e:	f1 1d       	adc	r31, r1
    1510:	80 81       	ld	r24, Z
    1512:	81 11       	cpse	r24, r1
    1514:	f6 cf       	rjmp	.-20     	; 0x1502 <_Z18USB_TransmitStringPKc+0x12>
	USB_Transmit(str[i]);
}
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <_Z12USB_TransmitPKch>:


void USB_Transmit(const char* buff, uint8_t length)
{
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
	for(uint8_t i = 0; i < length; i++)
    1526:	66 23       	and	r22, r22
    1528:	79 f0       	breq	.+30     	; 0x1548 <_Z12USB_TransmitPKch+0x2a>
    152a:	ec 01       	movw	r28, r24
    152c:	61 50       	subi	r22, 0x01	; 1
    152e:	06 2f       	mov	r16, r22
    1530:	10 e0       	ldi	r17, 0x00	; 0
    1532:	0f 5f       	subi	r16, 0xFF	; 255
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	08 0f       	add	r16, r24
    1538:	19 1f       	adc	r17, r25
	USB_Transmit(buff[i]);
    153a:	89 91       	ld	r24, Y+

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
}


void USB_Transmit(const char* buff, uint8_t length)
{
	for(uint8_t i = 0; i < length; i++)
    1542:	c0 17       	cp	r28, r16
    1544:	d1 07       	cpc	r29, r17
    1546:	c9 f7       	brne	.-14     	; 0x153a <_Z12USB_TransmitPKch+0x1c>
	USB_Transmit(buff[i]);
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <_Z16USB_Transmit_Hexc>:


void USB_Transmit_Hex(const char data )
{
    1552:	cf 93       	push	r28
    1554:	c8 2f       	mov	r28, r24
	USB_TransmitString("0x");
    1556:	80 e7       	ldi	r24, 0x70	; 112
    1558:	91 e2       	ldi	r25, 0x21	; 33
    155a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	USB_Transmit(HexToASCII(data>>4));
    155e:	8c 2f       	mov	r24, r28
    1560:	82 95       	swap	r24
    1562:	8f 70       	andi	r24, 0x0F	; 15
    1564:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes

void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
    156e:	8c 2f       	mov	r24, r28
    1570:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
}
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <_Z19USB_Transmit_Numberi>:


void USB_Transmit_Number(int16_t num)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
	if(num < 0)
    1584:	99 23       	and	r25, r25
    1586:	3c f4       	brge	.+14     	; 0x1596 <_Z19USB_Transmit_Numberi+0x18>
	{
		num = -num;
    1588:	d1 95       	neg	r29
    158a:	c1 95       	neg	r28
    158c:	d1 09       	sbc	r29, r1

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    158e:	8d e2       	ldi	r24, 0x2D	; 45
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
	uint8_t ten_thousands	= (num/10000);
<<<<<<< Updated upstream
    15de:	ce 01       	movw	r24, r28
    15e0:	60 e1       	ldi	r22, 0x10	; 16
    15e2:	77 e2       	ldi	r23, 0x27	; 39
    15e4:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    1596:	ce 01       	movw	r24, r28
    1598:	60 e1       	ldi	r22, 0x10	; 16
    159a:	77 e2       	ldi	r23, 0x27	; 39
    159c:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	if(ten_thousands > 0)
    15a0:	66 23       	and	r22, r22
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <_Z19USB_Transmit_Numberi+0x34>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    15ec:	80 e3       	ldi	r24, 0x30	; 48
    15ee:	86 0f       	add	r24, r22
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    15a4:	80 e3       	ldi	r24, 0x30	; 48
    15a6:	86 0f       	add	r24, r22
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
	bool started = false;
	uint8_t ten_thousands	= (num/10000);
	if(ten_thousands > 0)
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
    15ae:	21 e0       	ldi	r18, 0x01	; 1
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <_Z19USB_Transmit_Numberi+0x36>
	{
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
    15b2:	20 e0       	ldi	r18, 0x00	; 0
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
	}

	uint8_t thousands	= (num/1000)%10;
<<<<<<< Updated upstream
    15fc:	ce 01       	movw	r24, r28
    15fe:	68 ee       	ldi	r22, 0xE8	; 232
    1600:	73 e0       	ldi	r23, 0x03	; 3
    1602:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1606:	cb 01       	movw	r24, r22
    1608:	6a e0       	ldi	r22, 0x0A	; 10
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    15b4:	ce 01       	movw	r24, r28
    15b6:	68 ee       	ldi	r22, 0xE8	; 232
    15b8:	73 e0       	ldi	r23, 0x03	; 3
    15ba:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    15be:	cb 01       	movw	r24, r22
    15c0:	6a e0       	ldi	r22, 0x0A	; 10
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	if(thousands > 0)
    15c8:	88 23       	and	r24, r24
    15ca:	79 f0       	breq	.+30     	; 0x15ea <_Z19USB_Transmit_Numberi+0x6c>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    1614:	80 5d       	subi	r24, 0xD0	; 208
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    15cc:	80 5d       	subi	r24, 0xD0	; 208
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
	{
		USB_Transmit('0'+thousands);
		started = true;
	}

	uint8_t hundreds	= (num/100)%10;
<<<<<<< Updated upstream
    161c:	ce 01       	movw	r24, r28
    161e:	64 e6       	ldi	r22, 0x64	; 100
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1626:	cb 01       	movw	r24, r22
    1628:	6a e0       	ldi	r22, 0x0A	; 10
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1630:	0e c0       	rjmp	.+28     	; 0x164e <_Z19USB_Transmit_Numberi+0x88>
    1632:	ce 01       	movw	r24, r28
    1634:	64 e6       	ldi	r22, 0x64	; 100
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    163c:	cb 01       	movw	r24, r22
    163e:	6a e0       	ldi	r22, 0x0A	; 10
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    15d4:	ce 01       	movw	r24, r28
    15d6:	64 e6       	ldi	r22, 0x64	; 100
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    15de:	cb 01       	movw	r24, r22
    15e0:	6a e0       	ldi	r22, 0x0A	; 10
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <_Z19USB_Transmit_Numberi+0x88>
    15ea:	ce 01       	movw	r24, r28
    15ec:	64 e6       	ldi	r22, 0x64	; 100
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    15f4:	cb 01       	movw	r24, r22
    15f6:	6a e0       	ldi	r22, 0x0A	; 10
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	if(hundreds > 0 || started)
    15fe:	81 11       	cpse	r24, r1
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <_Z19USB_Transmit_Numberi+0x88>
    1602:	22 23       	and	r18, r18
    1604:	e1 f0       	breq	.+56     	; 0x163e <_Z19USB_Transmit_Numberi+0xc0>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    164e:	80 5d       	subi	r24, 0xD0	; 208
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    1606:	80 5d       	subi	r24, 0xD0	; 208
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
<<<<<<< Updated upstream
    1656:	2a e0       	ldi	r18, 0x0A	; 10
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	ce 01       	movw	r24, r28
    165c:	b9 01       	movw	r22, r18
    165e:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1662:	cb 01       	movw	r24, r22
    1664:	b9 01       	movw	r22, r18
    1666:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	ce 01       	movw	r24, r28
    1614:	b9 01       	movw	r22, r18
    1616:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    161a:	cb 01       	movw	r24, r22
    161c:	b9 01       	movw	r22, r18
    161e:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
<<<<<<< Updated upstream
    166a:	80 5d       	subi	r24, 0xD0	; 208
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
    1672:	ce 01       	movw	r24, r28
    1674:	6a e0       	ldi	r22, 0x0A	; 10
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    167c:	80 5d       	subi	r24, 0xD0	; 208
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <udi_cdc_putc>
=======
    1622:	80 5d       	subi	r24, 0xD0	; 208
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
    162a:	ce 01       	movw	r24, r28
    162c:	6a e0       	ldi	r22, 0x0A	; 10
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    1634:	80 5d       	subi	r24, 0xD0	; 208
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <udi_cdc_putc>
>>>>>>> Stashed changes
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <_Z19USB_Transmit_Numberi+0xda>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
<<<<<<< Updated upstream
    1686:	2a e0       	ldi	r18, 0x0A	; 10
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	ce 01       	movw	r24, r28
    168c:	b9 01       	movw	r22, r18
    168e:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
    1692:	cb 01       	movw	r24, r22
    1694:	b9 01       	movw	r22, r18
    1696:	0e 94 87 30 	call	0x610e	; 0x610e <__divmodhi4>
=======
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	ce 01       	movw	r24, r28
    1644:	b9 01       	movw	r22, r18
    1646:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
    164a:	cb 01       	movw	r24, r22
    164c:	b9 01       	movw	r22, r18
    164e:	0e 94 ba 2e 	call	0x5d74	; 0x5d74 <__divmodhi4>
>>>>>>> Stashed changes
	if(tens > 0 || started)
    1652:	88 23       	and	r24, r24
    1654:	51 f3       	breq	.-44     	; 0x162a <_Z19USB_Transmit_Numberi+0xac>
    1656:	e5 cf       	rjmp	.-54     	; 0x1622 <_Z19USB_Transmit_Numberi+0xa4>
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <StopElevator>:
	}
}


/* blockly functie */
void StopElevator() {
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	1f 92       	push	r1
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	DEBUG_OUT("-----STOPPING ELEVATOR------ \n\r");
    166c:	63 e7       	ldi	r22, 0x73	; 115
    166e:	71 e2       	ldi	r23, 0x21	; 33
    1670:	80 ea       	ldi	r24, 0xA0	; 160
    1672:	99 e0       	ldi	r25, 0x09	; 9
    1674:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	uint16_t motor_id = ELEVATOR_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    1678:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1); // Stopt lift motor
<<<<<<< Updated upstream
    16c2:	00 eb       	ldi	r16, 0xB0	; 176
    16c4:	1a e0       	ldi	r17, 0x0A	; 10
    16c6:	28 e0       	ldi	r18, 0x08	; 8
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	be 01       	movw	r22, r28
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8c e4       	ldi	r24, 0x4C	; 76
    16d2:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <ElevatorIsReady>:
=======
    167a:	00 eb       	ldi	r16, 0xB0	; 176
    167c:	1a e0       	ldi	r17, 0x0A	; 10
    167e:	28 e0       	ldi	r18, 0x08	; 8
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	be 01       	movw	r22, r28
    1684:	6f 5f       	subi	r22, 0xFF	; 255
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8c e4       	ldi	r24, 0x4C	; 76
    168a:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <ElevatorIsReady>:
>>>>>>> Stashed changes


/* blockly functie */
bool ElevatorIsReady() {
    169a:	cf 93       	push	r28
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
<<<<<<< Updated upstream
    16e4:	80 91 c9 23 	lds	r24, 0x23C9	; 0x8023c9 <elevatorDirection>
    16e8:	88 23       	and	r24, r24
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <ElevatorIsReady+0x14>
    16ec:	c0 91 c8 23 	lds	r28, 0x23C8	; 0x8023c8 <elevatorIsUp>
    16f0:	c1 11       	cpse	r28, r1
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <ElevatorIsReady+0x1e>
    16f4:	0a c0       	rjmp	.+20     	; 0x170a <ElevatorIsReady+0x28>
=======
    169c:	80 91 d7 23 	lds	r24, 0x23D7	; 0x8023d7 <elevatorDirection>
    16a0:	88 23       	and	r24, r24
    16a2:	29 f0       	breq	.+10     	; 0x16ae <ElevatorIsReady+0x14>
    16a4:	c0 91 d6 23 	lds	r28, 0x23D6	; 0x8023d6 <elevatorIsUp>
    16a8:	c1 11       	cpse	r28, r1
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <ElevatorIsReady+0x1e>
    16ac:	0a c0       	rjmp	.+20     	; 0x16c2 <ElevatorIsReady+0x28>
>>>>>>> Stashed changes
		StopElevator();
		return 1; // Lift is boven aangekomen
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
<<<<<<< Updated upstream
    16f6:	c0 91 c7 23 	lds	r28, 0x23C7	; 0x8023c7 <elevatorIsDown>
    16fa:	c1 11       	cpse	r28, r1
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <ElevatorIsReady+0x24>
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <ElevatorIsReady+0x28>
=======
    16ae:	c0 91 d5 23 	lds	r28, 0x23D5	; 0x8023d5 <elevatorIsDown>
    16b2:	c1 11       	cpse	r28, r1
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <ElevatorIsReady+0x24>
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <ElevatorIsReady+0x28>
>>>>>>> Stashed changes

/* blockly functie */
bool ElevatorIsReady() {
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
		StopElevator();
    16b8:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
		return 1; // Lift is boven aangekomen
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <ElevatorIsReady+0x28>
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
		StopElevator();
    16be:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
		return 1; // Lift is beneden aangekomen
	}
	else {
		return 0; // Lift is nog bezig
	}
}
    16c2:	8c 2f       	mov	r24, r28
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <ElevatorButtonInISR>:
}


// ISR, switch is ingedrukt
void ElevatorButtonInISR(bool ElevatorIsUp) {
	if (ElevatorIsUp == elevatorDirection){ //Elevator stops moving if it reaches switch opposite to moving direction
<<<<<<< Updated upstream
    1710:	90 91 c9 23 	lds	r25, 0x23C9	; 0x8023c9 <elevatorDirection>
    1714:	98 13       	cpse	r25, r24
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <ElevatorButtonInISR+0x26>
=======
    16c8:	90 91 d7 23 	lds	r25, 0x23D7	; 0x8023d7 <elevatorDirection>
    16cc:	98 13       	cpse	r25, r24
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <ElevatorButtonInISR+0x26>
>>>>>>> Stashed changes
		if(elevatorDirection == true){ //(ev_richting 1 = up, 0 = down)
    16d0:	99 23       	and	r25, r25
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <ElevatorButtonInISR+0x18>
			elevatorIsUp = true;
<<<<<<< Updated upstream
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	80 93 c8 23 	sts	0x23C8, r24	; 0x8023c8 <elevatorIsUp>
			elevatorIsDown = false;
    1722:	10 92 c7 23 	sts	0x23C7, r1	; 0x8023c7 <elevatorIsDown>
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <ElevatorButtonInISR+0x22>
		}else { //(ev_richting 1 = up, 0 = down)
			elevatorIsUp = false;
    1728:	10 92 c8 23 	sts	0x23C8, r1	; 0x8023c8 <elevatorIsUp>
			elevatorIsDown = true;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 c7 23 	sts	0x23C7, r24	; 0x8023c7 <elevatorIsDown>
=======
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 d6 23 	sts	0x23D6, r24	; 0x8023d6 <elevatorIsUp>
			elevatorIsDown = false;
    16da:	10 92 d5 23 	sts	0x23D5, r1	; 0x8023d5 <elevatorIsDown>
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <ElevatorButtonInISR+0x22>
		}else { //(ev_richting 1 = up, 0 = down)
			elevatorIsUp = false;
    16e0:	10 92 d6 23 	sts	0x23D6, r1	; 0x8023d6 <elevatorIsUp>
			elevatorIsDown = true;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <elevatorIsDown>
>>>>>>> Stashed changes
		}
		StopElevator();
    16ea:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
    16ee:	08 95       	ret

000016f0 <ElevatorInit>:
	}
}

// Inputs voor de lift worden op Input-Pullup gezet
void ElevatorInit() {
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
	PORTK_DIR &= ~(EV_SWITCH_PIN_UP); // Set pin as input
    16f4:	e0 e2       	ldi	r30, 0x20	; 32
    16f6:	f7 e0       	ldi	r31, 0x07	; 7
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7e       	andi	r24, 0xEF	; 239
    16fc:	80 83       	st	Z, r24
	PORTK_DIR &= ~(EV_SWITCH_PIN_DOWN);
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7d       	andi	r24, 0xDF	; 223
    1702:	80 83       	st	Z, r24
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for DOWN\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for DOWN\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for DOWN\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for DOWN\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for DOWN\n\r"); break;
		case PIN5_bm: PORTK_PIN5CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN5CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN5CTRL for DOWN\n\r"); break;
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f7 e0       	ldi	r31, 0x07	; 7
    1708:	d8 e1       	ldi	r29, 0x18	; 24
    170a:	d0 83       	st	Z, r29
    170c:	c2 e0       	ldi	r28, 0x02	; 2
    170e:	c0 83       	st	Z, r28
    1710:	63 e9       	ldi	r22, 0x93	; 147
    1712:	71 e2       	ldi	r23, 0x21	; 33
    1714:	80 ea       	ldi	r24, 0xA0	; 160
    1716:	99 e0       	ldi	r25, 0x09	; 9
    1718:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	switch(EV_SWITCH_PIN_UP){
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for UP\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for UP\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for UP\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for UP\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for UP\n\r"); break;
    171c:	e4 e3       	ldi	r30, 0x34	; 52
    171e:	f7 e0       	ldi	r31, 0x07	; 7
    1720:	d0 83       	st	Z, r29
    1722:	c0 83       	st	Z, r28
    1724:	6b ea       	ldi	r22, 0xAB	; 171
    1726:	71 e2       	ldi	r23, 0x21	; 33
    1728:	80 ea       	ldi	r24, 0xA0	; 160
    172a:	99 e0       	ldi	r25, 0x09	; 9
    172c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		case PIN6_bm: PORTK_PIN6CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN6CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN6CTRL for UP\n\r"); break;
		case PIN7_bm: PORTK_PIN7CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN7CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN7CTRL for UP\n\r"); break;
		default: break;
	}

	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interrupt opwekkende pin, in het K register
    1730:	ea e2       	ldi	r30, 0x2A	; 42
    1732:	f7 e0       	ldi	r31, 0x07	; 7
    1734:	80 81       	ld	r24, Z
    1736:	80 61       	ori	r24, 0x10	; 16
    1738:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    173a:	80 81       	ld	r24, Z
    173c:	80 62       	ori	r24, 0x20	; 32
    173e:	80 83       	st	Z, r24


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    1740:	e9 e2       	ldi	r30, 0x29	; 41
    1742:	f7 e0       	ldi	r31, 0x07	; 7
    1744:	80 81       	ld	r24, Z
    1746:	81 60       	ori	r24, 0x01	; 1
    1748:	80 83       	st	Z, r24
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <ElevatorInterruptSetup>:


// Deprecated. Functionality moved to ElevatorInit()
void ElevatorInterruptSetup() {
	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interreupt opwekkende pin, in het K register
    1750:	ea e2       	ldi	r30, 0x2A	; 42
    1752:	f7 e0       	ldi	r31, 0x07	; 7
    1754:	80 81       	ld	r24, Z
    1756:	80 61       	ori	r24, 0x10	; 16
    1758:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    175a:	80 81       	ld	r24, Z
    175c:	80 62       	ori	r24, 0x20	; 32
    175e:	80 83       	st	Z, r24

	PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; // Interupts op beide flanken
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f7 e0       	ldi	r31, 0x07	; 7
    1764:	80 81       	ld	r24, Z
    1766:	82 60       	ori	r24, 0x02	; 2
    1768:	80 83       	st	Z, r24
	PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc;
    176a:	e5 e3       	ldi	r30, 0x35	; 53
    176c:	f7 e0       	ldi	r31, 0x07	; 7
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	80 83       	st	Z, r24
	// 31-03-2021, Falling edges om gedrag daarvan te bestuderen


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    1774:	e9 e2       	ldi	r30, 0x29	; 41
    1776:	f7 e0       	ldi	r31, 0x07	; 7
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	80 83       	st	Z, r24
    177e:	08 95       	ret

00001780 <ConfigElevator>:

bool ConfigElevator(bool direction) {

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
    1780:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1784:	94 fd       	sbrc	r25, 4
    1786:	19 c0       	rjmp	.+50     	; 0x17ba <ConfigElevator+0x3a>
    1788:	81 11       	cpse	r24, r1
    178a:	1c c0       	rjmp	.+56     	; 0x17c4 <ConfigElevator+0x44>
    178c:	48 c0       	rjmp	.+144    	; 0x181e <ConfigElevator+0x9e>
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    178e:	81 11       	cpse	r24, r1
    1790:	21 c0       	rjmp	.+66     	; 0x17d4 <ConfigElevator+0x54>
    1792:	1c c0       	rjmp	.+56     	; 0x17cc <ConfigElevator+0x4c>
		elevatorIsDown = true;
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
<<<<<<< Updated upstream
    17dc:	90 91 c7 23 	lds	r25, 0x23C7	; 0x8023c7 <elevatorIsDown>
    17e0:	91 11       	cpse	r25, r1
    17e2:	0d c0       	rjmp	.+26     	; 0x17fe <ConfigElevator+0x36>
    17e4:	1f c0       	rjmp	.+62     	; 0x1824 <ConfigElevator+0x5c>
=======
    1794:	90 91 d5 23 	lds	r25, 0x23D5	; 0x8023d5 <elevatorIsDown>
    1798:	91 11       	cpse	r25, r1
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <ConfigElevator+0x36>
    179c:	1f c0       	rjmp	.+62     	; 0x17dc <ConfigElevator+0x5c>
>>>>>>> Stashed changes
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    179e:	81 11       	cpse	r24, r1
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <ConfigElevator+0xa8>
    17a2:	25 c0       	rjmp	.+74     	; 0x17ee <ConfigElevator+0x6e>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    17a4:	88 23       	and	r24, r24
    17a6:	59 f1       	breq	.+86     	; 0x17fe <ConfigElevator+0x7e>
    17a8:	26 c0       	rjmp	.+76     	; 0x17f6 <ConfigElevator+0x76>
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    17aa:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17ae:	85 fd       	sbrc	r24, 5
    17b0:	2c c0       	rjmp	.+88     	; 0x180a <ConfigElevator+0x8a>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	08 95       	ret
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	08 95       	ret

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    17ba:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17be:	95 ff       	sbrs	r25, 5
    17c0:	e6 cf       	rjmp	.-52     	; 0x178e <ConfigElevator+0xe>
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <ConfigElevator+0x54>
bool ConfigElevator(bool direction) {

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
<<<<<<< Updated upstream
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	80 93 c8 23 	sts	0x23C8, r24	; 0x8023c8 <elevatorIsUp>
    1812:	27 c0       	rjmp	.+78     	; 0x1862 <ConfigElevator+0x9a>
=======
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 93 d6 23 	sts	0x23D6, r24	; 0x8023d6 <elevatorIsUp>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <ConfigElevator+0x9a>
>>>>>>> Stashed changes
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
		elevatorIsDown = true;
<<<<<<< Updated upstream
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	80 93 c7 23 	sts	0x23C7, r24	; 0x8023c7 <elevatorIsDown>
    181a:	23 c0       	rjmp	.+70     	; 0x1862 <ConfigElevator+0x9a>
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    181c:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <elevatorIsUp>
    1820:	91 11       	cpse	r25, r1
    1822:	dc cf       	rjmp	.-72     	; 0x17dc <ConfigElevator+0x14>
=======
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <elevatorIsDown>
    17d2:	23 c0       	rjmp	.+70     	; 0x181a <ConfigElevator+0x9a>
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    17d4:	90 91 d6 23 	lds	r25, 0x23D6	; 0x8023d6 <elevatorIsUp>
    17d8:	91 11       	cpse	r25, r1
    17da:	dc cf       	rjmp	.-72     	; 0x1794 <ConfigElevator+0x14>
>>>>>>> Stashed changes
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    17dc:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17e0:	94 ff       	sbrs	r25, 4
    17e2:	dd cf       	rjmp	.-70     	; 0x179e <ConfigElevator+0x1e>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    17e4:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17e8:	95 ff       	sbrs	r25, 5
    17ea:	dc cf       	rjmp	.-72     	; 0x17a4 <ConfigElevator+0x24>
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <ConfigElevator+0x7e>
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
<<<<<<< Updated upstream
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	80 93 c8 23 	sts	0x23C8, r24	; 0x8023c8 <elevatorIsUp>
    183c:	0e c0       	rjmp	.+28     	; 0x185a <ConfigElevator+0x92>
=======
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 d6 23 	sts	0x23D6, r24	; 0x8023d6 <elevatorIsUp>
    17f4:	0e c0       	rjmp	.+28     	; 0x1812 <ConfigElevator+0x92>
>>>>>>> Stashed changes
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
<<<<<<< Updated upstream
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	80 93 c7 23 	sts	0x23C7, r24	; 0x8023c7 <elevatorIsDown>
    1844:	0a c0       	rjmp	.+20     	; 0x185a <ConfigElevator+0x92>
=======
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <elevatorIsDown>
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <ConfigElevator+0x92>
>>>>>>> Stashed changes
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    17fe:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1802:	84 fd       	sbrc	r24, 4
    1804:	d2 cf       	rjmp	.-92     	; 0x17aa <ConfigElevator+0x2a>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	08 95       	ret
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
		elevatorIsUp = false;
<<<<<<< Updated upstream
    1852:	10 92 c8 23 	sts	0x23C8, r1	; 0x8023c8 <elevatorIsUp>
		elevatorIsDown = false;
    1856:	10 92 c7 23 	sts	0x23C7, r1	; 0x8023c7 <elevatorIsDown>
=======
    180a:	10 92 d6 23 	sts	0x23D6, r1	; 0x8023d6 <elevatorIsUp>
		elevatorIsDown = false;
    180e:	10 92 d5 23 	sts	0x23D5, r1	; 0x8023d5 <elevatorIsDown>
>>>>>>> Stashed changes
	}

	

	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
    1812:	0e 94 a8 0b 	call	0x1750	; 0x1750 <ElevatorInterruptSetup>
		return 1; // Lift mag starten
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret
	}
	else {
		return 0; // Lift mag niet starten
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    181e:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1822:	95 ff       	sbrs	r25, 5
    1824:	d3 cf       	rjmp	.-90     	; 0x17cc <ConfigElevator+0x4c>
    1826:	d6 cf       	rjmp	.-84     	; 0x17d4 <ConfigElevator+0x54>
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    1828:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    182c:	85 ff       	sbrs	r24, 5
    182e:	e3 cf       	rjmp	.-58     	; 0x17f6 <ConfigElevator+0x76>
    1830:	e6 cf       	rjmp	.-52     	; 0x17fe <ConfigElevator+0x7e>

00001832 <MoveElevator>:

bool elevatorDirection;							// Richting van de lift
volatile bool elevatorIsUp, elevatorIsDown;	// Boleans om de stand van de lift bij te houden

/* blockly functie */
void MoveElevator(bool direction) {
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	28 97       	sbiw	r28, 0x08	; 8
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	f8 2e       	mov	r15, r24
	elevatorDirection = !direction;//if up is called the elevator moves down, this is fixed using the !
<<<<<<< Updated upstream
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8f 25       	eor	r24, r15
    1894:	80 93 c9 23 	sts	0x23C9, r24	; 0x8023c9 <elevatorDirection>
=======
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	8f 25       	eor	r24, r15
    184c:	80 93 d7 23 	sts	0x23D7, r24	; 0x8023d7 <elevatorDirection>
>>>>>>> Stashed changes
	if (ConfigElevator(!direction)) {
    1850:	0e 94 c0 0b 	call	0x1780	; 0x1780 <ConfigElevator>
    1854:	88 23       	and	r24, r24
    1856:	49 f1       	breq	.+82     	; 0x18aa <MoveElevator+0x78>
		DEBUG_OUT("-----MOVING ELEVATOR------ \n\r");
    1858:	61 ec       	ldi	r22, 0xC1	; 193
    185a:	71 e2       	ldi	r23, 0x21	; 33
    185c:	80 ea       	ldi	r24, 0xA0	; 160
    185e:	99 e0       	ldi	r25, 0x09	; 9
    1860:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		
		uint16_t motor_id = ELEVATOR_MOTOR_ID; // Motor ID van lift
		bool Direction = direction;

		char directiondata[] = { Direction };
    1864:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
<<<<<<< Updated upstream
    18ae:	00 eb       	ldi	r16, 0xB0	; 176
    18b0:	1a e0       	ldi	r17, 0x0A	; 10
    18b2:	28 e0       	ldi	r18, 0x08	; 8
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	be 01       	movw	r22, r28
    18b8:	68 5f       	subi	r22, 0xF8	; 248
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8a e4       	ldi	r24, 0x4A	; 74
    18be:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
=======
    1866:	00 eb       	ldi	r16, 0xB0	; 176
    1868:	1a e0       	ldi	r17, 0x0A	; 10
    186a:	28 e0       	ldi	r18, 0x08	; 8
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	be 01       	movw	r22, r28
    1870:	68 5f       	subi	r22, 0xF8	; 248
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8a e4       	ldi	r24, 0x4A	; 74
    1876:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
>>>>>>> Stashed changes
		char data[] = { 0x03,0x66,0xFF,0xFF,Direction,MOTOR_STEP_HALF,MOTOR_ON };
    187a:	be 01       	movw	r22, r28
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	87 e0       	ldi	r24, 0x07	; 7
    1882:	fb 01       	movw	r30, r22
    1884:	11 92       	st	Z+, r1
    1886:	8a 95       	dec	r24
    1888:	e9 f7       	brne	.-6      	; 0x1884 <MoveElevator+0x52>
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	86 e6       	ldi	r24, 0x66	; 102
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	8c 83       	std	Y+4, r24	; 0x04
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	8e 83       	std	Y+6, r24	; 0x06
    189c:	8f 83       	std	Y+7, r24	; 0x07
    189e:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
<<<<<<< Updated upstream
    18e8:	28 e0       	ldi	r18, 0x08	; 8
    18ea:	47 e0       	ldi	r20, 0x07	; 7
    18ec:	86 e4       	ldi	r24, 0x46	; 70
    18ee:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    18f2:	28 96       	adiw	r28, 0x08	; 8
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	1f 91       	pop	r17
    18fe:	0f 91       	pop	r16
    1900:	ff 90       	pop	r15
    1902:	08 95       	ret
=======
    18a0:	28 e0       	ldi	r18, 0x08	; 8
    18a2:	47 e0       	ldi	r20, 0x07	; 7
    18a4:	86 e4       	ldi	r24, 0x46	; 70
    18a6:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    18aa:	28 96       	adiw	r28, 0x08	; 8
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	08 95       	ret
>>>>>>> Stashed changes

000018bc <_Z11gpioSetModeh9gpioModes>:


void gpioSetMode(uint8_t pin, gpioModes_t mode)
{
	//Set the PORTK Direction register using the DIRSET and DIRCLR register
	if(mode == GPIO_MODE_INPUT){
    18bc:	61 11       	cpse	r22, r1
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <_Z11gpioSetModeh9gpioModes+0xa>
		//Write PORTK_DIR bit 'pin' to 0
		PORTK_DIRCLR = pin;
    18c0:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <__TEXT_REGION_LENGTH__+0x700722>
    18c4:	08 95       	ret
	}
	else if(mode == GPIO_MODE_OUTPUT){
    18c6:	61 30       	cpi	r22, 0x01	; 1
    18c8:	11 f4       	brne	.+4      	; 0x18ce <_Z11gpioSetModeh9gpioModes+0x12>
		PORTK_DIRSET = pin;
    18ca:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <__TEXT_REGION_LENGTH__+0x700721>
    18ce:	08 95       	ret

000018d0 <_Z12gpioSetLevelhb>:
}

void gpioSetLevel(uint8_t pin, bool level)
{
	//Set the output level of PORTK using the OUTSET and OUTCLR register
	if(level){
    18d0:	66 23       	and	r22, r22
    18d2:	19 f0       	breq	.+6      	; 0x18da <_Z12gpioSetLevelhb+0xa>
		PORTK_OUTSET = pin;
    18d4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    18d8:	08 95       	ret
	}
	else{
		PORTK_OUTCLR = pin;
    18da:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    18de:	08 95       	ret

000018e0 <_Z12gpioGetLevelh>:
}

bool gpioGetLevel(uint8_t pin)
{
	
	return ((PORTK_IN & pin) ? 1 : 0);
<<<<<<< Updated upstream
    1928:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    192c:	98 23       	and	r25, r24
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	09 f4       	brne	.+2      	; 0x1934 <_Z12gpioGetLevelh+0xc>
    1932:	80 e0       	ldi	r24, 0x00	; 0
}
    1934:	08 95       	ret

00001936 <IO_ReadWrite>:

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
    1936:	28 2f       	mov	r18, r24
	switch(io_port)
    1938:	86 2f       	mov	r24, r22
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	fc 01       	movw	r30, r24
    193e:	31 97       	sbiw	r30, 0x01	; 1
    1940:	ec 30       	cpi	r30, 0x0C	; 12
    1942:	f1 05       	cpc	r31, r1
    1944:	08 f0       	brcs	.+2      	; 0x1948 <IO_ReadWrite+0x12>
    1946:	b6 c0       	rjmp	.+364    	; 0x1ab4 <IO_ReadWrite+0x17e>
    1948:	88 27       	eor	r24, r24
    194a:	e2 50       	subi	r30, 0x02	; 2
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	8f 4f       	sbci	r24, 0xFF	; 255
    1950:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__tablejump2__>
	{
		case 1:
		if (value == true)
    1954:	22 23       	and	r18, r18
    1956:	21 f0       	breq	.+8      	; 0x1960 <IO_ReadWrite+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    1958:	80 e8       	ldi	r24, 0x80	; 128
    195a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <IO_ReadWrite+0x30>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
    1960:	80 e8       	ldi	r24, 0x80	; 128
    1962:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    1966:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    196a:	88 1f       	adc	r24, r24
    196c:	88 27       	eor	r24, r24
    196e:	88 1f       	adc	r24, r24
    1970:	08 95       	ret
		break;
		
		case 2:
		if (value == true)
    1972:	22 23       	and	r18, r18
    1974:	21 f0       	breq	.+8      	; 0x197e <IO_ReadWrite+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    1976:	80 e4       	ldi	r24, 0x40	; 64
    1978:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <IO_ReadWrite+0x4e>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
    197e:	80 e4       	ldi	r24, 0x40	; 64
    1980:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    1984:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1988:	86 fb       	bst	r24, 6
    198a:	88 27       	eor	r24, r24
    198c:	80 f9       	bld	r24, 0
    198e:	08 95       	ret
		break;
		
		case 3:
		if (value == true)
    1990:	22 23       	and	r18, r18
    1992:	21 f0       	breq	.+8      	; 0x199c <IO_ReadWrite+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    1994:	80 e2       	ldi	r24, 0x20	; 32
    1996:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    199a:	03 c0       	rjmp	.+6      	; 0x19a2 <IO_ReadWrite+0x6c>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
    199c:	80 e2       	ldi	r24, 0x20	; 32
    199e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    19a2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19a6:	85 fb       	bst	r24, 5
    19a8:	88 27       	eor	r24, r24
    19aa:	80 f9       	bld	r24, 0
    19ac:	08 95       	ret
		break;
		
		case 4: //Lift limit switches
		if (value == true)
    19ae:	22 23       	and	r18, r18
    19b0:	21 f0       	breq	.+8      	; 0x19ba <IO_ReadWrite+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    19b2:	80 e1       	ldi	r24, 0x10	; 16
    19b4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <IO_ReadWrite+0x8a>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
    19ba:	80 e1       	ldi	r24, 0x10	; 16
    19bc:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    19c0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19c4:	82 95       	swap	r24
    19c6:	81 70       	andi	r24, 0x01	; 1
    19c8:	08 95       	ret
		break;
		
		case 5:
		if (value == true)
    19ca:	22 23       	and	r18, r18
    19cc:	21 f0       	breq	.+8      	; 0x19d6 <IO_ReadWrite+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    19ce:	88 e0       	ldi	r24, 0x08	; 8
    19d0:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <IO_ReadWrite+0xa6>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
    19d6:	88 e0       	ldi	r24, 0x08	; 8
    19d8:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    19dc:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19e0:	83 fb       	bst	r24, 3
    19e2:	88 27       	eor	r24, r24
    19e4:	80 f9       	bld	r24, 0
    19e6:	08 95       	ret
		break;
		
		case 6:
		if (value == true)
    19e8:	22 23       	and	r18, r18
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <IO_ReadWrite+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    19ec:	84 e0       	ldi	r24, 0x04	; 4
    19ee:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <IO_ReadWrite+0xc4>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    19fa:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19fe:	82 fb       	bst	r24, 2
    1a00:	88 27       	eor	r24, r24
    1a02:	80 f9       	bld	r24, 0
    1a04:	08 95       	ret
		break;
		
		case 7:
		if (value == true)
    1a06:	22 23       	and	r18, r18
    1a08:	21 f0       	breq	.+8      	; 0x1a12 <IO_ReadWrite+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <IO_ReadWrite+0xe2>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
    1a12:	82 e0       	ldi	r24, 0x02	; 2
    1a14:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    1a18:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a1c:	86 95       	lsr	r24
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	08 95       	ret
		break;
		
		case 8:
		if (value == true)
    1a22:	22 23       	and	r18, r18
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <IO_ReadWrite+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a2c:	03 c0       	rjmp	.+6      	; 0x1a34 <IO_ReadWrite+0xfe>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    1a34:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	08 95       	ret
		break;
		
		case 9:
		if (value == true)
    1a3c:	22 23       	and	r18, r18
    1a3e:	21 f0       	breq	.+8      	; 0x1a48 <IO_ReadWrite+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <IO_ReadWrite+0x118>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
    1a48:	80 e8       	ldi	r24, 0x80	; 128
    1a4a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    1a4e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    1a52:	88 1f       	adc	r24, r24
    1a54:	88 27       	eor	r24, r24
    1a56:	88 1f       	adc	r24, r24
    1a58:	08 95       	ret
		break;
		
		case 10:
		if (value == true)
    1a5a:	22 23       	and	r18, r18
    1a5c:	21 f0       	breq	.+8      	; 0x1a66 <IO_ReadWrite+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    1a5e:	80 e4       	ldi	r24, 0x40	; 64
    1a60:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <IO_ReadWrite+0x136>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
    1a66:	80 e4       	ldi	r24, 0x40	; 64
    1a68:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    1a6c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    1a70:	86 fb       	bst	r24, 6
    1a72:	88 27       	eor	r24, r24
    1a74:	80 f9       	bld	r24, 0
    1a76:	08 95       	ret
		break;
		
		case 11:
		if (value == true)
    1a78:	22 23       	and	r18, r18
    1a7a:	21 f0       	breq	.+8      	; 0x1a84 <IO_ReadWrite+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    1a7c:	80 e8       	ldi	r24, 0x80	; 128
    1a7e:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <IO_ReadWrite+0x154>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
    1a84:	80 e8       	ldi	r24, 0x80	; 128
    1a86:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    1a8a:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    1a8e:	88 1f       	adc	r24, r24
    1a90:	88 27       	eor	r24, r24
    1a92:	88 1f       	adc	r24, r24
    1a94:	08 95       	ret
		break;
		
		case 12:
		if (value == true)
    1a96:	22 23       	and	r18, r18
    1a98:	21 f0       	breq	.+8      	; 0x1aa2 <IO_ReadWrite+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    1a9a:	80 e4       	ldi	r24, 0x40	; 64
    1a9c:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <IO_ReadWrite+0x172>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
    1aa2:	80 e4       	ldi	r24, 0x40	; 64
    1aa4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    1aa8:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    1aac:	86 fb       	bst	r24, 6
    1aae:	88 27       	eor	r24, r24
    1ab0:	80 f9       	bld	r24, 0
    1ab2:	08 95       	ret
		break;
		
	}
	return 0;
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ab6:	08 95       	ret

00001ab8 <SelectColour>:

char colour[] = {'#','0','0','0','0','0','0'};


/* blockly functie - functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft */
uint16_t SelectColour(uint16_t i) { return i; }
    1ab8:	08 95       	ret

00001aba <CompareColours>:


/* blockly functie */
#ifdef COLOUR_AS_INDEX
bool CompareColours(uint16_t c1, uint16_t c2) {
	return (c1 == c2);
    1aba:	21 e0       	ldi	r18, 0x01	; 1
    1abc:	86 17       	cp	r24, r22
    1abe:	97 07       	cpc	r25, r23
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <CompareColours+0xa>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
#else
bool CompareColours(char *c1, char *c2) {
	return CompareStrings(c1,c2,7); //"#rrggbb"
#endif
}
    1ac4:	82 2f       	mov	r24, r18
    1ac6:	08 95       	ret
=======
    18e0:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    18e4:	98 23       	and	r25, r24
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <_Z12gpioGetLevelh+0xc>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
}
    18ec:	08 95       	ret

000018ee <initColorSensor>:
  * @brief  Initializes the color sensor
  * @param  None
  * @retval None
  */
void initColorSensor(void){
    PORTJ_DIR &= ~(PIN6_bm);	//set pin as input
    18ee:	e0 e0       	ldi	r30, 0x00	; 0
    18f0:	f7 e0       	ldi	r31, 0x07	; 7
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 7b       	andi	r24, 0xBF	; 191
    18f6:	80 83       	st	Z, r24
	PORTH_DIR |= PIN6_bm | PIN7_bm;	//set pins as output	
    18f8:	e0 ee       	ldi	r30, 0xE0	; 224
    18fa:	f6 e0       	ldi	r31, 0x06	; 6
    18fc:	80 81       	ld	r24, Z
    18fe:	80 6c       	ori	r24, 0xC0	; 192
    1900:	80 83       	st	Z, r24
    1902:	08 95       	ret
>>>>>>> Stashed changes

00001904 <FrequencyToColourVal>:
  * @param  freq    frequency of the color
  *         color   desired color
  * @retval RGB value 
  */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t color) {
	if (!freq) { return 0; } //bad frequency, don't return a color
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	09 f4       	brne	.+2      	; 0x190a <FrequencyToColourVal+0x6>
    1908:	45 c0       	rjmp	.+138    	; 0x1994 <FrequencyToColourVal+0x90>
	
    uint8_t RGBValue = 0;
	switch (color) {
    190a:	61 30       	cpi	r22, 0x01	; 1
    190c:	c9 f0       	breq	.+50     	; 0x1940 <FrequencyToColourVal+0x3c>
    190e:	18 f0       	brcs	.+6      	; 0x1916 <FrequencyToColourVal+0x12>
    1910:	62 30       	cpi	r22, 0x02	; 2
    1912:	59 f1       	breq	.+86     	; 0x196a <FrequencyToColourVal+0x66>
    1914:	41 c0       	rjmp	.+130    	; 0x1998 <FrequencyToColourVal+0x94>
        //if the frequency is low there is a high color occurance
		case REDCASE: //red
		    RGBValue = map(freq, MINREDFREQ, MAXREDFREQ, 255, 0);
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	9c 01       	movw	r18, r24
    191c:	ad 01       	movw	r20, r26
    191e:	23 51       	subi	r18, 0x13	; 19
    1920:	31 09       	sbc	r19, r1
    1922:	41 09       	sbc	r20, r1
    1924:	51 09       	sbc	r21, r1
    1926:	a1 e0       	ldi	r26, 0x01	; 1
    1928:	bf ef       	ldi	r27, 0xFF	; 255
    192a:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <__mulohisi3>
    192e:	2e e6       	ldi	r18, 0x6E	; 110
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <__divmodsi4>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	82 0f       	add	r24, r18
            break;
    193e:	08 95       	ret
		case GREENCASE: //green
		    RGBValue = map(freq, MINGREENFREQ, MAXGREENFREQ, 255, 0);
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	9c 01       	movw	r18, r24
    1946:	ad 01       	movw	r20, r26
    1948:	2c 53       	subi	r18, 0x3C	; 60
    194a:	31 09       	sbc	r19, r1
    194c:	41 09       	sbc	r20, r1
    194e:	51 09       	sbc	r21, r1
    1950:	a1 e0       	ldi	r26, 0x01	; 1
    1952:	bf ef       	ldi	r27, 0xFF	; 255
    1954:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <__mulohisi3>
    1958:	24 e6       	ldi	r18, 0x64	; 100
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <__divmodsi4>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	82 0f       	add	r24, r18
            break;
    1968:	08 95       	ret
		case BLUECASE: //blue
		    RGBValue = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 255, 0);
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	9c 01       	movw	r18, r24
    1970:	ad 01       	movw	r20, r26
    1972:	2e 50       	subi	r18, 0x0E	; 14
    1974:	31 09       	sbc	r19, r1
    1976:	41 09       	sbc	r20, r1
    1978:	51 09       	sbc	r21, r1
    197a:	a1 e0       	ldi	r26, 0x01	; 1
    197c:	bf ef       	ldi	r27, 0xFF	; 255
    197e:	0e 94 44 2f 	call	0x5e88	; 0x5e88 <__mulohisi3>
    1982:	2e e6       	ldi	r18, 0x6E	; 110
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <__divmodsi4>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	82 0f       	add	r24, r18
            break;
    1992:	08 95       	ret
  * @param  freq    frequency of the color
  *         color   desired color
  * @retval RGB value 
  */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t color) {
	if (!freq) { return 0; } //bad frequency, don't return a color
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	08 95       	ret
	
    uint8_t RGBValue = 0;
    1998:	80 e0       	ldi	r24, 0x00	; 0
	//check on out of bounds
    if (RGBValue<0) { RGBValue = 0; }
	if (RGBValue>255) { RGBValue = 255; }
	
    return RGBValue;
}
    199a:	08 95       	ret

0000199c <getColor>:
/**
  * @brief  reads out raw value of the desired color
  * @param  color you want to read out (0 = red, 1 = green, 2 = blue)
  * @retval Selected color (if color = 0 the raw value of red is returned)
  */
uint16_t getColor(uint8_t color){
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
  *     |Green      |HiGH |High |
  *     |Blue       |Low  |High |
  *     |No filter  |High |Low  |
  *     =========================
 */
    switch (color) {
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	59 f0       	breq	.+22     	; 0x19ba <getColor+0x1e>
    19a4:	18 f0       	brcs	.+6      	; 0x19ac <getColor+0x10>
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	79 f0       	breq	.+30     	; 0x19c8 <getColor+0x2c>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <getColor+0x38>
        case REDCASE: //red
		    PORTH_OUTCLR = (1<<PIN_S2); //S2, to LOW
    19ac:	e6 ee       	ldi	r30, 0xE6	; 230
    19ae:	f6 e0       	ldi	r31, 0x06	; 6
    19b0:	80 e8       	ldi	r24, 0x80	; 128
    19b2:	80 83       	st	Z, r24
		    PORTH_OUTCLR = (1<<PIN_S3); //S3, to LOW
    19b4:	80 e4       	ldi	r24, 0x40	; 64
    19b6:	80 83       	st	Z, r24
		    break;
    19b8:	0d c0       	rjmp	.+26     	; 0x19d4 <getColor+0x38>
		
		case GREENCASE: //green
		    PORTH_OUTSET = (1<<PIN_S2); //S2, to HIGH
    19ba:	e5 ee       	ldi	r30, 0xE5	; 229
    19bc:	f6 e0       	ldi	r31, 0x06	; 6
    19be:	80 e8       	ldi	r24, 0x80	; 128
    19c0:	80 83       	st	Z, r24
		    PORTH_OUTSET = (1<<PIN_S3); //S3, to HIGH
    19c2:	80 e4       	ldi	r24, 0x40	; 64
    19c4:	80 83       	st	Z, r24
    		break;
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <getColor+0x38>
		
<<<<<<< Updated upstream
		case 2: //blue
		PORTH_OUTCLR = (1<<PIN7_bp); //S2, pin 11, schrijf LOW
    1b08:	80 e8       	ldi	r24, 0x80	; 128
    1b0a:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		PORTH_OUTSET = (1<<PIN6_bp); //S3, pin 12, schrijf HIGH
    1b0e:	80 e4       	ldi	r24, 0x40	; 64
    1b10:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
		break;
	}
	
	return (uint16_t) pulseIn(&PORTJ, PIN6_bm, 0, 10000); //pin 10
    1b14:	00 e1       	ldi	r16, 0x10	; 16
    1b16:	17 e2       	ldi	r17, 0x27	; 39
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	60 e4       	ldi	r22, 0x40	; 64
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	97 e0       	ldi	r25, 0x07	; 7
    1b24:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <pulseIn>
}
    1b28:	cb 01       	movw	r24, r22
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	08 95       	ret

00001b30 <ValToColour>:
	return (uint8_t) hex2int(i);
}


/* van integers naar \#rrggbb string */
char* ValToColour(uint8_t r, uint8_t g, uint8_t b) {
    1b30:	ff 92       	push	r15
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	f8 2e       	mov	r15, r24
    1b3c:	06 2f       	mov	r16, r22
    1b3e:	14 2f       	mov	r17, r20
	colour[1] = HexToASCII(r>>4);
    1b40:	82 95       	swap	r24
    1b42:	8f 70       	andi	r24, 0x0F	; 15
    1b44:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b48:	c3 e0       	ldi	r28, 0x03	; 3
    1b4a:	d0 e2       	ldi	r29, 0x20	; 32
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	colour[2] = HexToASCII(r);
    1b4e:	8f 2d       	mov	r24, r15
    1b50:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b54:	8a 83       	std	Y+2, r24	; 0x02
	colour[3] = HexToASCII(g>>4);
    1b56:	80 2f       	mov	r24, r16
    1b58:	82 95       	swap	r24
    1b5a:	8f 70       	andi	r24, 0x0F	; 15
    1b5c:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b60:	8b 83       	std	Y+3, r24	; 0x03
	colour[4] = HexToASCII(g);
    1b62:	80 2f       	mov	r24, r16
    1b64:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b68:	8c 83       	std	Y+4, r24	; 0x04
	colour[5] = HexToASCII(b>>4);
    1b6a:	81 2f       	mov	r24, r17
    1b6c:	82 95       	swap	r24
    1b6e:	8f 70       	andi	r24, 0x0F	; 15
    1b70:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b74:	8d 83       	std	Y+5, r24	; 0x05
	colour[6] = HexToASCII(b);
    1b76:	81 2f       	mov	r24, r17
    1b78:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b7c:	8e 83       	std	Y+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b7e:	8f e2       	ldi	r24, 0x2F	; 47
    1b80:	95 e7       	ldi	r25, 0x75	; 117
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <ValToColour+0x52>
    1b86:	00 c0       	rjmp	.+0      	; 0x1b88 <ValToColour+0x58>
    1b88:	00 00       	nop
	_delay_ms(5); //zodat i[6] goed wordt opgeslagen
	char *i_ptr = colour;
	return i_ptr; //var mag na het vergelijken meteen overschreven worden
}
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	08 95       	ret

00001b98 <RoundColourVal>:


/* convert RGB value 0...255 to 0, 128 or 255 (colours from blockly) */
uint8_t RoundColourVal(uint8_t val) {
	switch (val) {
    1b98:	80 38       	cpi	r24, 0x80	; 128
    1b9a:	10 f0       	brcs	.+4      	; 0x1ba0 <RoundColourVal+0x8>
		case 0 ... 84:		return 0;
		case 85 ... 169:	return 128;
		case 170 ... 255:	return 255;
		#else
		case 0 ... 127:		return 0;
		case 128 ... 255:	return 255;
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	08 95       	ret
		#if defined ALLOW_COLOURV_128 && !defined COLOUR_AS_INDEX
		case 0 ... 84:		return 0;
		case 85 ... 169:	return 128;
		case 170 ... 255:	return 255;
		#else
		case 0 ... 127:		return 0;
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
			return 255;
		} else {
			return 0;
		}
	}
}
    1ba2:	08 95       	ret

00001ba4 <FrequencyToColourVal>:


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f1       	breq	.+90     	; 0x1c02 <FrequencyToColourVal+0x5e>
	long val = 0;
	switch (colour) {
    1ba8:	63 30       	cpi	r22, 0x03	; 3
    1baa:	98 f4       	brcc	.+38     	; 0x1bd2 <FrequencyToColourVal+0x2e>

/*
 * https://www.arduino.cc/reference/en/language/functions/math/map/ 
 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1bac:	a0 e0       	ldi	r26, 0x00	; 0
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	ad 01       	movw	r20, r26
    1bb4:	2c 57       	subi	r18, 0x7C	; 124
    1bb6:	31 09       	sbc	r19, r1
    1bb8:	41 09       	sbc	r20, r1
    1bba:	51 09       	sbc	r21, r1
    1bbc:	af ef       	ldi	r26, 0xFF	; 255
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	0e 94 03 31 	call	0x6206	; 0x6206 <__muluhisi3>
    1bc4:	22 e9       	ldi	r18, 0x92	; 146
    1bc6:	3f ef       	ldi	r19, 0xFF	; 255
    1bc8:	4f ef       	ldi	r20, 0xFF	; 255
    1bca:	5f ef       	ldi	r21, 0xFF	; 255
    1bcc:	0e 94 bd 30 	call	0x617a	; 0x617a <__divmodsi4>
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <FrequencyToColourVal+0x36>


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
	long val = 0;
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	82 2f       	mov	r24, r18
    1bdc:	93 2f       	mov	r25, r19
    1bde:	a4 2f       	mov	r26, r20
    1be0:	b5 2f       	mov	r27, r21
    1be2:	bb 23       	and	r27, r27
    1be4:	1c f4       	brge	.+6      	; 0x1bec <FrequencyToColourVal+0x48>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	dc 01       	movw	r26, r24
		case 2: //blue
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
	}
	if (val<0) { val = 0; }
	if (val>255) { val = 255; }
	return (uint8_t) val;
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	91 05       	cpc	r25, r1
    1bf0:	a1 05       	cpc	r26, r1
    1bf2:	b1 05       	cpc	r27, r1
    1bf4:	39 f0       	breq	.+14     	; 0x1c04 <FrequencyToColourVal+0x60>
    1bf6:	34 f0       	brlt	.+12     	; 0x1c04 <FrequencyToColourVal+0x60>
    1bf8:	8f ef       	ldi	r24, 0xFF	; 255
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	08 95       	ret
}


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
    1c02:	80 e0       	ldi	r24, 0x00	; 0
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
	}
	if (val<0) { val = 0; }
	if (val>255) { val = 255; }
	return (uint8_t) val;
}
    1c04:	08 95       	ret

00001c06 <ArrAvg>:


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	06 2f       	mov	r16, r22
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1c0c:	66 23       	and	r22, r22
    1c0e:	81 f0       	breq	.+32     	; 0x1c30 <ArrAvg+0x2a>
    1c10:	e8 2f       	mov	r30, r24
    1c12:	f9 2f       	mov	r31, r25
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	ba 01       	movw	r22, r20
		sum += a[i];
    1c1c:	a1 91       	ld	r26, Z+
    1c1e:	b1 91       	ld	r27, Z+
    1c20:	4a 0f       	add	r20, r26
    1c22:	5b 1f       	adc	r21, r27
    1c24:	61 1d       	adc	r22, r1
    1c26:	71 1d       	adc	r23, r1


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	08 13       	cpse	r16, r24
    1c2c:	f7 cf       	rjmp	.-18     	; 0x1c1c <ArrAvg+0x16>
    1c2e:	03 c0       	rjmp	.+6      	; 0x1c36 <ArrAvg+0x30>
}


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	ba 01       	movw	r22, r20
=======
		case BLUECASE: //blue
	    	PORTH_OUTCLR = (1<<PIN_S2); //S2, to LOW
    19c8:	80 e8       	ldi	r24, 0x80	; 128
    19ca:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    		PORTH_OUTSET = (1<<PIN_S3); //S3, to HIGH
    19ce:	80 e4       	ldi	r24, 0x40	; 64
    19d0:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
		    break;
    }
    return (uint16_t) pulseIn(&PORTJ, PIN6_bm, 0, 10000); //pin 10
    19d4:	00 e1       	ldi	r16, 0x10	; 16
    19d6:	17 e2       	ldi	r17, 0x27	; 39
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	60 e4       	ldi	r22, 0x40	; 64
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	97 e0       	ldi	r25, 0x07	; 7
    19e4:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <pulseIn>
}
    19e8:	cb 01       	movw	r24, r22
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <calcAverageArray>:
  * @brief  calculate average value in array
  * @param  a       array
  *         size    size of the array
  * @retval sum = average of the array
  */
uint16_t calcAverageArray(uint16_t *a, uint8_t size) {
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	06 2f       	mov	r16, r22
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    19f6:	66 23       	and	r22, r22
    19f8:	81 f0       	breq	.+32     	; 0x1a1a <calcAverageArray+0x2a>
    19fa:	e8 2f       	mov	r30, r24
    19fc:	f9 2f       	mov	r31, r25
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	ba 01       	movw	r22, r20
		sum += a[i];
    1a06:	a1 91       	ld	r26, Z+
    1a08:	b1 91       	ld	r27, Z+
    1a0a:	4a 0f       	add	r20, r26
    1a0c:	5b 1f       	adc	r21, r27
    1a0e:	61 1d       	adc	r22, r1
    1a10:	71 1d       	adc	r23, r1
  *         size    size of the array
  * @retval sum = average of the array
  */
uint16_t calcAverageArray(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	08 13       	cpse	r16, r24
    1a16:	f7 cf       	rjmp	.-18     	; 0x1a06 <calcAverageArray+0x16>
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <calcAverageArray+0x30>
  * @param  a       array
  *         size    size of the array
  * @retval sum = average of the array
  */
uint16_t calcAverageArray(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	ba 01       	movw	r22, r20
>>>>>>> Stashed changes
	for (uint8_t i=0; i<size; i++) {
		sum += a[i];
	}
	sum /= size;
	return sum;
<<<<<<< Updated upstream
    1c36:	10 e0       	ldi	r17, 0x00	; 0
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	ba 01       	movw	r22, r20
    1c40:	a9 01       	movw	r20, r18
    1c42:	98 01       	movw	r18, r16
    1c44:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
}
    1c48:	c9 01       	movw	r24, r18
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	08 95       	ret

00001c50 <CompareStrings>:


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
    1c50:	44 23       	and	r20, r20
    1c52:	49 f0       	breq	.+18     	; 0x1c66 <CompareStrings+0x16>
		if (c1+i != c2+i) {
    1c54:	86 17       	cp	r24, r22
    1c56:	97 07       	cpc	r25, r23
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <CompareStrings+0x1a>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
	return sum;
}


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	48 13       	cpse	r20, r24
    1c60:	fd cf       	rjmp	.-6      	; 0x1c5c <CompareStrings+0xc>
		if (c1+i != c2+i) {
			return 0;
		}
	}
	return 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	08 95       	ret
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	08 95       	ret


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
		if (c1+i != c2+i) {
			return 0;
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
    1c6c:	08 95       	ret

00001c6e <hex2int>:
/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    while (*hex) {
    1c6e:	fc 01       	movw	r30, r24
    1c70:	30 81       	ld	r19, Z
    1c72:	33 23       	and	r19, r19
    1c74:	89 f1       	breq	.+98     	; 0x1cd8 <hex2int+0x6a>
    1c76:	31 96       	adiw	r30, 0x01	; 1
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	cb 01       	movw	r24, r22
        // get current character then increment
        uint8_t byte = *hex++; 
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
    1c7e:	20 ed       	ldi	r18, 0xD0	; 208
    1c80:	23 0f       	add	r18, r19
    1c82:	2a 30       	cpi	r18, 0x0A	; 10
    1c84:	78 f0       	brcs	.+30     	; 0x1ca4 <hex2int+0x36>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
    1c86:	2f e9       	ldi	r18, 0x9F	; 159
    1c88:	23 0f       	add	r18, r19
    1c8a:	26 30       	cpi	r18, 0x06	; 6
    1c8c:	18 f4       	brcc	.+6      	; 0x1c94 <hex2int+0x26>
    1c8e:	29 ea       	ldi	r18, 0xA9	; 169
    1c90:	23 0f       	add	r18, r19
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <hex2int+0x36>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;    
    1c94:	2f eb       	ldi	r18, 0xBF	; 191
    1c96:	23 0f       	add	r18, r19
    1c98:	26 30       	cpi	r18, 0x06	; 6
    1c9a:	18 f4       	brcc	.+6      	; 0x1ca2 <hex2int+0x34>
    1c9c:	29 ec       	ldi	r18, 0xC9	; 201
    1c9e:	23 0f       	add	r18, r19
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <hex2int+0x36>
    1ca2:	23 2f       	mov	r18, r19
        // shift 4 to make space for new digit, and add the 4 bits of the new digit 
        val = (val << 4) | (byte & 0xF);
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	aa 1f       	adc	r26, r26
    1cae:	bb 1f       	adc	r27, r27
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	bb 1f       	adc	r27, r27
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	aa 1f       	adc	r26, r26
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	aa 1f       	adc	r26, r26
    1cc6:	bb 1f       	adc	r27, r27
    1cc8:	2f 70       	andi	r18, 0x0F	; 15
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	62 2b       	or	r22, r18
/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    while (*hex) {
    1cd0:	31 91       	ld	r19, Z+
    1cd2:	31 11       	cpse	r19, r1
    1cd4:	d4 cf       	rjmp	.-88     	; 0x1c7e <hex2int+0x10>
    1cd6:	08 95       	ret

/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	cb 01       	movw	r24, r22
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;    
        // shift 4 to make space for new digit, and add the 4 bits of the new digit 
        val = (val << 4) | (byte & 0xF);
    }
    return val;
}
    1cde:	08 95       	ret

00001ce0 <ColourToRed>:
	return val;
}


/* van \#rrggbb string naar int */
uint8_t ColourToRed(char *colour) {
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <ColourToRed+0x6>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1cea:	1b 82       	std	Y+3, r1	; 0x03
	memcpy(i, colour + 1, 2);
    1cec:	fc 01       	movw	r30, r24
    1cee:	81 81       	ldd	r24, Z+1	; 0x01
    1cf0:	92 81       	ldd	r25, Z+2	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hex2int>
    1cfe:	86 2f       	mov	r24, r22
}
    1d00:	23 96       	adiw	r28, 0x03	; 3
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	08 95       	ret

00001d0c <ColourToGreen>:


/* van \#rrggbb string naar int */
uint8_t ColourToGreen(char *colour) {
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <ColourToGreen+0x6>
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d16:	1b 82       	std	Y+3, r1	; 0x03
	memcpy(i, colour + 3, 2);
    1d18:	fc 01       	movw	r30, r24
    1d1a:	83 81       	ldd	r24, Z+3	; 0x03
    1d1c:	94 81       	ldd	r25, Z+4	; 0x04
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hex2int>
    1d2a:	86 2f       	mov	r24, r22
}
    1d2c:	23 96       	adiw	r28, 0x03	; 3
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <ColourToBlue>:


/* van \#rrggbb string naar int */
uint8_t ColourToBlue(char *colour) {
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <ColourToBlue+0x6>
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d42:	1b 82       	std	Y+3, r1	; 0x03
	memcpy(i, colour + 5, 2);
    1d44:	fc 01       	movw	r30, r24
    1d46:	85 81       	ldd	r24, Z+5	; 0x05
    1d48:	96 81       	ldd	r25, Z+6	; 0x06
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d4e:	ce 01       	movw	r24, r28
    1d50:	01 96       	adiw	r24, 0x01	; 1
    1d52:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hex2int>
    1d56:	86 2f       	mov	r24, r22
}
    1d58:	23 96       	adiw	r28, 0x03	; 3
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <ColourToIndex>:

/*
 * functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft, 
 * uiteindelijk moet ReadColourSensor() een char* teruggeven die met CompareStrings wordt vergeleken. 
 */
uint8_t ColourToIndex(char *colour) {
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	8c 01       	movw	r16, r24
	//'#000000' = 0, '#0000ff' = 1, '#00ff00' = 2, '#00ffff' = 3, etc. 
	uint8_t val = 0;
	
	if (ColourToRed(colour) > 0) {
    1d6c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <ColourToRed>
    1d70:	88 23       	and	r24, r24
    1d72:	11 f0       	breq	.+4      	; 0x1d78 <ColourToIndex+0x14>
		val |= (1<<2);
    1d74:	c4 e0       	ldi	r28, 0x04	; 4
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <ColourToIndex+0x16>
 * functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft, 
 * uiteindelijk moet ReadColourSensor() een char* teruggeven die met CompareStrings wordt vergeleken. 
 */
uint8_t ColourToIndex(char *colour) {
	//'#000000' = 0, '#0000ff' = 1, '#00ff00' = 2, '#00ffff' = 3, etc. 
	uint8_t val = 0;
    1d78:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (ColourToRed(colour) > 0) {
		val |= (1<<2);
	}
	if (ColourToGreen(colour) > 0) {
    1d7a:	c8 01       	movw	r24, r16
    1d7c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <ColourToGreen>
    1d80:	81 11       	cpse	r24, r1
		val |= (1<<1);
    1d82:	c2 60       	ori	r28, 0x02	; 2
	}
	if (ColourToBlue(colour) > 0) {
    1d84:	c8 01       	movw	r24, r16
    1d86:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <ColourToBlue>
    1d8a:	81 11       	cpse	r24, r1
		val |= (1<<0);
    1d8c:	c1 60       	ori	r28, 0x01	; 1
	}
	return val;
}
    1d8e:	8c 2f       	mov	r24, r28
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <ReadColourSensor>:


/* blockly functie - ga R G & B een aantal keer langs en lees kleur */
#define READVALTIMES 5
#ifdef COLOUR_AS_INDEX
uint16_t ReadColourSensor() {
    1d98:	af 92       	push	r10
    1d9a:	bf 92       	push	r11
    1d9c:	cf 92       	push	r12
    1d9e:	df 92       	push	r13
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	2d 97       	sbiw	r28, 0x0d	; 13
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	5e 01       	movw	r10, r28
    1db6:	8b e0       	ldi	r24, 0x0B	; 11
    1db8:	a8 0e       	add	r10, r24
    1dba:	b1 1c       	adc	r11, r1
#endif
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
    1dbc:	f1 2c       	mov	r15, r1
    1dbe:	65 01       	movw	r12, r10
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	0f 5f       	subi	r16, 0xFF	; 255
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t i=0; i<READVALTIMES; i++) {
			buf[i] = ReadOneColour(j);
    1dc6:	8f 2d       	mov	r24, r15
    1dc8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <ReadOneColour>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	81 93       	st	Z+, r24
    1dd0:	91 93       	st	Z+, r25
    1dd2:	8f 01       	movw	r16, r30
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
		for (uint8_t i=0; i<READVALTIMES; i++) {
    1dd4:	ec 15       	cp	r30, r12
    1dd6:	fd 05       	cpc	r31, r13
    1dd8:	b1 f7       	brne	.-20     	; 0x1dc6 <ReadColourSensor+0x2e>
			buf[i] = ReadOneColour(j);
		}
		//frequency mappen naar RGB value defined in blockly
		colourVal[j] = RoundColourVal(FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j));
    1dda:	65 e0       	ldi	r22, 0x05	; 5
    1ddc:	ce 01       	movw	r24, r28
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <ArrAvg>
    1de4:	6f 2d       	mov	r22, r15
    1de6:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <FrequencyToColourVal>
    1dea:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <RoundColourVal>
    1dee:	f5 01       	movw	r30, r10
    1df0:	81 93       	st	Z+, r24
    1df2:	5f 01       	movw	r10, r30
#endif
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
    1df4:	f3 94       	inc	r15
    1df6:	f3 e0       	ldi	r31, 0x03	; 3
    1df8:	ff 12       	cpse	r15, r31
    1dfa:	e2 cf       	rjmp	.-60     	; 0x1dc0 <ReadColourSensor+0x28>
		colourVal[j] = RoundColourVal(FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j));
//		colourVal[j] = FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j);
	}
	
	#ifdef COLOUR_AS_INDEX
	DEBUG_OUT("Color: ");
    1dfc:	65 ee       	ldi	r22, 0xE5	; 229
    1dfe:	71 e2       	ldi	r23, 0x21	; 33
    1e00:	80 ea       	ldi	r24, 0xA0	; 160
    1e02:	99 e0       	ldi	r25, 0x09	; 9
    1e04:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	DEBUG_OUT(ValToColour(colourVal[0], colourVal[1], colourVal[2]));
    1e08:	fd 84       	ldd	r15, Y+13	; 0x0d
    1e0a:	0c 85       	ldd	r16, Y+12	; 0x0c
    1e0c:	1b 85       	ldd	r17, Y+11	; 0x0b
    1e0e:	4f 2d       	mov	r20, r15
    1e10:	60 2f       	mov	r22, r16
    1e12:	81 2f       	mov	r24, r17
    1e14:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <ValToColour>
    1e18:	bc 01       	movw	r22, r24
    1e1a:	80 ea       	ldi	r24, 0xA0	; 160
    1e1c:	99 e0       	ldi	r25, 0x09	; 9
    1e1e:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	DEBUG_OUT("\n");
    1e22:	6b eb       	ldi	r22, 0xBB	; 187
    1e24:	72 e2       	ldi	r23, 0x22	; 34
    1e26:	80 ea       	ldi	r24, 0xA0	; 160
    1e28:	99 e0       	ldi	r25, 0x09	; 9
    1e2a:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	return (uint16_t) ColourToIndex(ValToColour(colourVal[0], colourVal[1], colourVal[2]));
    1e2e:	4f 2d       	mov	r20, r15
    1e30:	60 2f       	mov	r22, r16
    1e32:	81 2f       	mov	r24, r17
    1e34:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <ValToColour>
    1e38:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <ColourToIndex>
	#else
	return ValToColour(colourVal[0], colourVal[1], colourVal[2]);
	#endif
}
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	2d 96       	adiw	r28, 0x0d	; 13
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	ff 90       	pop	r15
    1e4e:	df 90       	pop	r13
    1e50:	cf 90       	pop	r12
    1e52:	bf 90       	pop	r11
    1e54:	af 90       	pop	r10
    1e56:	08 95       	ret

00001e58 <map>:
=======
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	cb 01       	movw	r24, r22
    1a28:	ba 01       	movw	r22, r20
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	98 01       	movw	r18, r16
    1a2e:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
}
    1a32:	c9 01       	movw	r24, r18
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <ReadColourSensor>:
  * @param  None
  * @def    DIFFERENTCOLORS = ammount of different colors (3)
  *         AVERAGECOLORS = ammount of samples taken
  * @retval color (#rrggbb) retreived from the color frequency
  */
uint16_t ReadColourSensor(void){
    1a3a:	af 92       	push	r10
    1a3c:	bf 92       	push	r11
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	2d 97       	sbiw	r28, 0x0d	; 13
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	5e 01       	movw	r10, r28
    1a58:	8b e0       	ldi	r24, 0x0B	; 11
    1a5a:	a8 0e       	add	r10, r24
    1a5c:	b1 1c       	adc	r11, r1
	uint16_t storeOneColor[AVERAGECOLORS];
	uint8_t RedGreenBlue[DIFFERENTCOLORS];
	
    for (uint8_t desiredColor=0;desiredColor<DIFFERENTCOLORS;desiredColor++){//Read Red Green and Blue apart
    1a5e:	f1 2c       	mov	r15, r1
    1a60:	65 01       	movw	r12, r10
    1a62:	8e 01       	movw	r16, r28
    1a64:	0f 5f       	subi	r16, 0xFF	; 255
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
        for (uint8_t i=0;i<AVERAGECOLORS;i++){//sample one color 5 times and take the average
            storeOneColor[i] = getColor(desiredColor);
    1a68:	8f 2d       	mov	r24, r15
    1a6a:	0e 94 ce 0c 	call	0x199c	; 0x199c <getColor>
    1a6e:	f8 01       	movw	r30, r16
    1a70:	81 93       	st	Z+, r24
    1a72:	91 93       	st	Z+, r25
    1a74:	8f 01       	movw	r16, r30
uint16_t ReadColourSensor(void){
	uint16_t storeOneColor[AVERAGECOLORS];
	uint8_t RedGreenBlue[DIFFERENTCOLORS];
	
    for (uint8_t desiredColor=0;desiredColor<DIFFERENTCOLORS;desiredColor++){//Read Red Green and Blue apart
        for (uint8_t i=0;i<AVERAGECOLORS;i++){//sample one color 5 times and take the average
    1a76:	ec 15       	cp	r30, r12
    1a78:	fd 05       	cpc	r31, r13
    1a7a:	b1 f7       	brne	.-20     	; 0x1a68 <ReadColourSensor+0x2e>
            storeOneColor[i] = getColor(desiredColor);
        }
        //map color frequency to RGB and store in array
        /*FrequencyToColourVal(freq, color)
        calcAverageArray(array, size)*/
        RedGreenBlue[desiredColor] = FrequencyToColourVal(calcAverageArray(storeOneColor, AVERAGECOLORS), desiredColor);
    1a7c:	65 e0       	ldi	r22, 0x05	; 5
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <calcAverageArray>
    1a86:	6f 2d       	mov	r22, r15
    1a88:	0e 94 82 0c 	call	0x1904	; 0x1904 <FrequencyToColourVal>
    1a8c:	f5 01       	movw	r30, r10
    1a8e:	81 93       	st	Z+, r24
    1a90:	5f 01       	movw	r10, r30
  */
uint16_t ReadColourSensor(void){
	uint16_t storeOneColor[AVERAGECOLORS];
	uint8_t RedGreenBlue[DIFFERENTCOLORS];
	
    for (uint8_t desiredColor=0;desiredColor<DIFFERENTCOLORS;desiredColor++){//Read Red Green and Blue apart
    1a92:	f3 94       	inc	r15
    1a94:	f3 e0       	ldi	r31, 0x03	; 3
    1a96:	ff 12       	cpse	r15, r31
    1a98:	e4 cf       	rjmp	.-56     	; 0x1a62 <ReadColourSensor+0x28>
        //map color frequency to RGB and store in array
        /*FrequencyToColourVal(freq, color)
        calcAverageArray(array, size)*/
        RedGreenBlue[desiredColor] = FrequencyToColourVal(calcAverageArray(storeOneColor, AVERAGECOLORS), desiredColor);
    }
    uint8_t redColor     = RedGreenBlue[REDCASE];
    1a9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    uint8_t greenColor   = RedGreenBlue[GREENCASE];
    1a9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    uint8_t blueColor    = RedGreenBlue[BLUECASE];
    1a9e:	9d 85       	ldd	r25, Y+13	; 0x0d

    if (redColor < blueColor && redColor < greenColor && redColor < 20){ //color is red
    1aa0:	89 17       	cp	r24, r25
    1aa2:	58 f4       	brcc	.+22     	; 0x1aba <ReadColourSensor+0x80>
    1aa4:	82 17       	cp	r24, r18
    1aa6:	48 f4       	brcc	.+18     	; 0x1aba <ReadColourSensor+0x80>
    1aa8:	84 31       	cpi	r24, 0x14	; 20
    1aaa:	38 f4       	brcc	.+14     	; 0x1aba <ReadColourSensor+0x80>
        DEBUG_OUT("color is RED\n\r");
    1aac:	6f ed       	ldi	r22, 0xDF	; 223
    1aae:	71 e2       	ldi	r23, 0x21	; 33
    1ab0:	80 ea       	ldi	r24, 0xA0	; 160
    1ab2:	99 e0       	ldi	r25, 0x09	; 9
    1ab4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
    1ab8:	1e c0       	rjmp	.+60     	; 0x1af6 <ReadColourSensor+0xbc>
    }else if (blueColor < redColor && blueColor < greenColor && blueColor>50){  //color is blue
    1aba:	98 17       	cp	r25, r24
    1abc:	58 f4       	brcc	.+22     	; 0x1ad4 <ReadColourSensor+0x9a>
    1abe:	92 17       	cp	r25, r18
    1ac0:	48 f4       	brcc	.+18     	; 0x1ad4 <ReadColourSensor+0x9a>
    1ac2:	93 33       	cpi	r25, 0x33	; 51
    1ac4:	38 f0       	brcs	.+14     	; 0x1ad4 <ReadColourSensor+0x9a>
        DEBUG_OUT("color is BLUE\n\r");
    1ac6:	6e ee       	ldi	r22, 0xEE	; 238
    1ac8:	71 e2       	ldi	r23, 0x21	; 33
    1aca:	80 ea       	ldi	r24, 0xA0	; 160
    1acc:	99 e0       	ldi	r25, 0x09	; 9
    1ace:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
    1ad2:	11 c0       	rjmp	.+34     	; 0x1af6 <ReadColourSensor+0xbc>
    }else if (greenColor < redColor && greenColor < blueColor){ //color is green
    1ad4:	28 17       	cp	r18, r24
    1ad6:	48 f4       	brcc	.+18     	; 0x1aea <ReadColourSensor+0xb0>
    1ad8:	29 17       	cp	r18, r25
    1ada:	38 f4       	brcc	.+14     	; 0x1aea <ReadColourSensor+0xb0>
        DEBUG_OUT("color is GREEN\n\r");
    1adc:	6e ef       	ldi	r22, 0xFE	; 254
    1ade:	71 e2       	ldi	r23, 0x21	; 33
    1ae0:	80 ea       	ldi	r24, 0xA0	; 160
    1ae2:	99 e0       	ldi	r25, 0x09	; 9
    1ae4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <ReadColourSensor+0xbc>
    }else{
		DEBUG_OUT("NO color found\n\r");
    1aea:	6f e0       	ldi	r22, 0x0F	; 15
    1aec:	72 e2       	ldi	r23, 0x22	; 34
    1aee:	80 ea       	ldi	r24, 0xA0	; 160
    1af0:	99 e0       	ldi	r25, 0x09	; 9
    1af2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	}
    return 0;
}
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	2d 96       	adiw	r28, 0x0d	; 13
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	df 90       	pop	r13
    1b0c:	cf 90       	pop	r12
    1b0e:	bf 90       	pop	r11
    1b10:	af 90       	pop	r10
    1b12:	08 95       	ret

00001b14 <SelectColour>:
	sum /= size;
	return sum;
}

/* blockly functie - functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft */
uint16_t SelectColour(uint16_t i) { return i; }
    1b14:	08 95       	ret
>>>>>>> Stashed changes

00001b16 <CompareColours>:

/* blockly functie */
bool CompareColours(uint16_t c1, uint16_t c2) {
	return (c1 == c2);
    1b16:	21 e0       	ldi	r18, 0x01	; 1
    1b18:	86 17       	cp	r24, r22
    1b1a:	97 07       	cpc	r25, r23
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <CompareColours+0xa>
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
}
    1b20:	82 2f       	mov	r24, r18
    1b22:	08 95       	ret

00001b24 <map>:
/**
  * @brief  map value (arduino function)
  * @reference https://www.arduino.cc/reference/en/language/functions/math/map/ 
  * @retval the mapped value
  */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
<<<<<<< Updated upstream
    1e58:	4f 92       	push	r4
    1e5a:	5f 92       	push	r5
    1e5c:	6f 92       	push	r6
    1e5e:	7f 92       	push	r7
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	29 01       	movw	r4, r18
    1e7a:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	24 19       	sub	r18, r4
    1e82:	35 09       	sbc	r19, r5
    1e84:	46 09       	sbc	r20, r6
    1e86:	57 09       	sbc	r21, r7
    1e88:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8a:	9b 89       	ldd	r25, Y+19	; 0x13
    1e8c:	ac 89       	ldd	r26, Y+20	; 0x14
    1e8e:	bd 89       	ldd	r27, Y+21	; 0x15
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	6a 19       	sub	r22, r10
    1e96:	7b 09       	sbc	r23, r11
    1e98:	8c 09       	sbc	r24, r12
    1e9a:	9d 09       	sbc	r25, r13
    1e9c:	0e 94 63 30 	call	0x60c6	; 0x60c6 <__mulsi3>
    1ea0:	a8 01       	movw	r20, r16
    1ea2:	97 01       	movw	r18, r14
    1ea4:	24 19       	sub	r18, r4
    1ea6:	35 09       	sbc	r19, r5
    1ea8:	46 09       	sbc	r20, r6
    1eaa:	57 09       	sbc	r21, r7
    1eac:	0e 94 bd 30 	call	0x617a	; 0x617a <__divmodsi4>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	b9 01       	movw	r22, r18
    1eb4:	6a 0d       	add	r22, r10
    1eb6:	7b 1d       	adc	r23, r11
    1eb8:	8c 1d       	adc	r24, r12
    1eba:	9d 1d       	adc	r25, r13
    1ebc:	df 91       	pop	r29
    1ebe:	cf 91       	pop	r28
    1ec0:	1f 91       	pop	r17
    1ec2:	0f 91       	pop	r16
    1ec4:	ff 90       	pop	r15
    1ec6:	ef 90       	pop	r14
    1ec8:	df 90       	pop	r13
    1eca:	cf 90       	pop	r12
    1ecc:	bf 90       	pop	r11
    1ece:	af 90       	pop	r10
    1ed0:	7f 90       	pop	r7
    1ed2:	6f 90       	pop	r6
    1ed4:	5f 90       	pop	r5
    1ed6:	4f 90       	pop	r4
    1ed8:	08 95       	ret

00001eda <pulseIn>:
=======
    1b24:	4f 92       	push	r4
    1b26:	5f 92       	push	r5
    1b28:	6f 92       	push	r6
    1b2a:	7f 92       	push	r7
    1b2c:	af 92       	push	r10
    1b2e:	bf 92       	push	r11
    1b30:	cf 92       	push	r12
    1b32:	df 92       	push	r13
    1b34:	ef 92       	push	r14
    1b36:	ff 92       	push	r15
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    1b44:	29 01       	movw	r4, r18
    1b46:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1b48:	9b 01       	movw	r18, r22
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	24 19       	sub	r18, r4
    1b4e:	35 09       	sbc	r19, r5
    1b50:	46 09       	sbc	r20, r6
    1b52:	57 09       	sbc	r21, r7
    1b54:	8a 89       	ldd	r24, Y+18	; 0x12
    1b56:	9b 89       	ldd	r25, Y+19	; 0x13
    1b58:	ac 89       	ldd	r26, Y+20	; 0x14
    1b5a:	bd 89       	ldd	r27, Y+21	; 0x15
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	6a 19       	sub	r22, r10
    1b62:	7b 09       	sbc	r23, r11
    1b64:	8c 09       	sbc	r24, r12
    1b66:	9d 09       	sbc	r25, r13
    1b68:	0e 94 96 2e 	call	0x5d2c	; 0x5d2c <__mulsi3>
    1b6c:	a8 01       	movw	r20, r16
    1b6e:	97 01       	movw	r18, r14
    1b70:	24 19       	sub	r18, r4
    1b72:	35 09       	sbc	r19, r5
    1b74:	46 09       	sbc	r20, r6
    1b76:	57 09       	sbc	r21, r7
    1b78:	0e 94 f0 2e 	call	0x5de0	; 0x5de0 <__divmodsi4>
    1b7c:	ca 01       	movw	r24, r20
    1b7e:	b9 01       	movw	r22, r18
    1b80:	6a 0d       	add	r22, r10
    1b82:	7b 1d       	adc	r23, r11
    1b84:	8c 1d       	adc	r24, r12
    1b86:	9d 1d       	adc	r25, r13
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	ff 90       	pop	r15
    1b92:	ef 90       	pop	r14
    1b94:	df 90       	pop	r13
    1b96:	cf 90       	pop	r12
    1b98:	bf 90       	pop	r11
    1b9a:	af 90       	pop	r10
    1b9c:	7f 90       	pop	r7
    1b9e:	6f 90       	pop	r6
    1ba0:	5f 90       	pop	r5
    1ba2:	4f 90       	pop	r4
    1ba4:	08 95       	ret

00001ba6 <pulseIn>:
>>>>>>> Stashed changes

#include "pulseIn.h"


unsigned long pulseIn(PORT_struct *port, uint8_t pin_bm, uint8_t state, unsigned long timeout)
{
<<<<<<< Updated upstream
    1eda:	8f 92       	push	r8
    1edc:	9f 92       	push	r9
    1ede:	af 92       	push	r10
    1ee0:	bf 92       	push	r11
    1ee2:	cf 92       	push	r12
    1ee4:	df 92       	push	r13
    1ee6:	ef 92       	push	r14
    1ee8:	ff 92       	push	r15
    1eea:	0f 93       	push	r16
    1eec:	1f 93       	push	r17
    1eee:	fc 01       	movw	r30, r24
    1ef0:	86 2f       	mov	r24, r22
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
    1ef2:	44 23       	and	r20, r20
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <pulseIn+0x20>
    1ef6:	a6 2f       	mov	r26, r22
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <pulseIn+0x22>
    1efa:	a0 e0       	ldi	r26, 0x00	; 0
=======
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	fc 01       	movw	r30, r24
    1bbc:	86 2f       	mov	r24, r22
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
    1bbe:	44 23       	and	r20, r20
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <pulseIn+0x20>
    1bc2:	a6 2f       	mov	r26, r22
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <pulseIn+0x22>
    1bc6:	a0 e0       	ldi	r26, 0x00	; 0
>>>>>>> Stashed changes
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
<<<<<<< Updated upstream
    1efc:	b9 01       	movw	r22, r18
    1efe:	a8 01       	movw	r20, r16
    1f00:	44 0f       	add	r20, r20
    1f02:	55 1f       	adc	r21, r21
    1f04:	66 1f       	adc	r22, r22
    1f06:	77 1f       	adc	r23, r23
    1f08:	04 0f       	add	r16, r20
    1f0a:	15 1f       	adc	r17, r21
    1f0c:	26 1f       	adc	r18, r22
    1f0e:	37 1f       	adc	r19, r23
    1f10:	36 95       	lsr	r19
    1f12:	27 95       	ror	r18
    1f14:	17 95       	ror	r17
    1f16:	07 95       	ror	r16
    1f18:	3f 70       	andi	r19, 0x0F	; 15
=======
    1bc8:	b9 01       	movw	r22, r18
    1bca:	a8 01       	movw	r20, r16
    1bcc:	44 0f       	add	r20, r20
    1bce:	55 1f       	adc	r21, r21
    1bd0:	66 1f       	adc	r22, r22
    1bd2:	77 1f       	adc	r23, r23
    1bd4:	04 0f       	add	r16, r20
    1bd6:	15 1f       	adc	r17, r21
    1bd8:	26 1f       	adc	r18, r22
    1bda:	37 1f       	adc	r19, r23
    1bdc:	36 95       	lsr	r19
    1bde:	27 95       	ror	r18
    1be0:	17 95       	ror	r17
    1be2:	07 95       	ror	r16
    1be4:	3f 70       	andi	r19, 0x0F	; 15
>>>>>>> Stashed changes
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
<<<<<<< Updated upstream
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	ba 01       	movw	r22, r20
=======
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	ba 01       	movw	r22, r20
>>>>>>> Stashed changes
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
<<<<<<< Updated upstream
    1f20:	90 85       	ldd	r25, Z+8	; 0x08
    1f22:	98 23       	and	r25, r24
    1f24:	a9 13       	cpse	r26, r25
    1f26:	10 c0       	rjmp	.+32     	; 0x1f48 <pulseIn+0x6e>
		if (numloops++ == maxloops) { return 0; }
    1f28:	6a 01       	movw	r12, r20
    1f2a:	7b 01       	movw	r14, r22
    1f2c:	9f ef       	ldi	r25, 0xFF	; 255
    1f2e:	c9 1a       	sub	r12, r25
    1f30:	d9 0a       	sbc	r13, r25
    1f32:	e9 0a       	sbc	r14, r25
    1f34:	f9 0a       	sbc	r15, r25
    1f36:	04 17       	cp	r16, r20
    1f38:	15 07       	cpc	r17, r21
    1f3a:	26 07       	cpc	r18, r22
    1f3c:	37 07       	cpc	r19, r23
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <pulseIn+0x68>
    1f40:	69 c0       	rjmp	.+210    	; 0x2014 <pulseIn+0x13a>
    1f42:	b7 01       	movw	r22, r14
    1f44:	a6 01       	movw	r20, r12
    1f46:	ec cf       	rjmp	.-40     	; 0x1f20 <pulseIn+0x46>
=======
    1bec:	90 85       	ldd	r25, Z+8	; 0x08
    1bee:	98 23       	and	r25, r24
    1bf0:	a9 13       	cpse	r26, r25
    1bf2:	10 c0       	rjmp	.+32     	; 0x1c14 <pulseIn+0x6e>
		if (numloops++ == maxloops) { return 0; }
    1bf4:	6a 01       	movw	r12, r20
    1bf6:	7b 01       	movw	r14, r22
    1bf8:	9f ef       	ldi	r25, 0xFF	; 255
    1bfa:	c9 1a       	sub	r12, r25
    1bfc:	d9 0a       	sbc	r13, r25
    1bfe:	e9 0a       	sbc	r14, r25
    1c00:	f9 0a       	sbc	r15, r25
    1c02:	04 17       	cp	r16, r20
    1c04:	15 07       	cpc	r17, r21
    1c06:	26 07       	cpc	r18, r22
    1c08:	37 07       	cpc	r19, r23
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <pulseIn+0x68>
    1c0c:	69 c0       	rjmp	.+210    	; 0x1ce0 <pulseIn+0x13a>
    1c0e:	b7 01       	movw	r22, r14
    1c10:	a6 01       	movw	r20, r12
    1c12:	ec cf       	rjmp	.-40     	; 0x1bec <pulseIn+0x46>
>>>>>>> Stashed changes
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
<<<<<<< Updated upstream
    1f48:	90 85       	ldd	r25, Z+8	; 0x08
    1f4a:	98 23       	and	r25, r24
    1f4c:	a9 13       	cpse	r26, r25
    1f4e:	08 c0       	rjmp	.+16     	; 0x1f60 <pulseIn+0x86>
=======
    1c14:	90 85       	ldd	r25, Z+8	; 0x08
    1c16:	98 23       	and	r25, r24
    1c18:	a9 13       	cpse	r26, r25
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <pulseIn+0x86>
>>>>>>> Stashed changes
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
<<<<<<< Updated upstream
    1f50:	90 85       	ldd	r25, Z+8	; 0x08
    1f52:	98 23       	and	r25, r24
    1f54:	a9 17       	cp	r26, r25
    1f56:	a1 f0       	breq	.+40     	; 0x1f80 <pulseIn+0xa6>
    1f58:	c1 2c       	mov	r12, r1
    1f5a:	d1 2c       	mov	r13, r1
    1f5c:	76 01       	movw	r14, r12
    1f5e:	2f c0       	rjmp	.+94     	; 0x1fbe <pulseIn+0xe4>
=======
    1c1c:	90 85       	ldd	r25, Z+8	; 0x08
    1c1e:	98 23       	and	r25, r24
    1c20:	a9 17       	cp	r26, r25
    1c22:	a1 f0       	breq	.+40     	; 0x1c4c <pulseIn+0xa6>
    1c24:	c1 2c       	mov	r12, r1
    1c26:	d1 2c       	mov	r13, r1
    1c28:	76 01       	movw	r14, r12
    1c2a:	2f c0       	rjmp	.+94     	; 0x1c8a <pulseIn+0xe4>
>>>>>>> Stashed changes
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
<<<<<<< Updated upstream
    1f60:	6a 01       	movw	r12, r20
    1f62:	7b 01       	movw	r14, r22
    1f64:	9f ef       	ldi	r25, 0xFF	; 255
    1f66:	c9 1a       	sub	r12, r25
    1f68:	d9 0a       	sbc	r13, r25
    1f6a:	e9 0a       	sbc	r14, r25
    1f6c:	f9 0a       	sbc	r15, r25
    1f6e:	04 17       	cp	r16, r20
    1f70:	15 07       	cpc	r17, r21
    1f72:	26 07       	cpc	r18, r22
    1f74:	37 07       	cpc	r19, r23
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <pulseIn+0xa0>
    1f78:	51 c0       	rjmp	.+162    	; 0x201c <pulseIn+0x142>
    1f7a:	b7 01       	movw	r22, r14
    1f7c:	a6 01       	movw	r20, r12
    1f7e:	e4 cf       	rjmp	.-56     	; 0x1f48 <pulseIn+0x6e>
=======
    1c2c:	6a 01       	movw	r12, r20
    1c2e:	7b 01       	movw	r14, r22
    1c30:	9f ef       	ldi	r25, 0xFF	; 255
    1c32:	c9 1a       	sub	r12, r25
    1c34:	d9 0a       	sbc	r13, r25
    1c36:	e9 0a       	sbc	r14, r25
    1c38:	f9 0a       	sbc	r15, r25
    1c3a:	04 17       	cp	r16, r20
    1c3c:	15 07       	cpc	r17, r21
    1c3e:	26 07       	cpc	r18, r22
    1c40:	37 07       	cpc	r19, r23
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <pulseIn+0xa0>
    1c44:	51 c0       	rjmp	.+162    	; 0x1ce8 <pulseIn+0x142>
    1c46:	b7 01       	movw	r22, r14
    1c48:	a6 01       	movw	r20, r12
    1c4a:	e4 cf       	rjmp	.-56     	; 0x1c14 <pulseIn+0x6e>
>>>>>>> Stashed changes
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
<<<<<<< Updated upstream
    1f80:	40 17       	cp	r20, r16
    1f82:	51 07       	cpc	r21, r17
    1f84:	62 07       	cpc	r22, r18
    1f86:	73 07       	cpc	r23, r19
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <pulseIn+0xb2>
    1f8a:	4c c0       	rjmp	.+152    	; 0x2024 <pulseIn+0x14a>
    1f8c:	c1 2c       	mov	r12, r1
    1f8e:	d1 2c       	mov	r13, r1
    1f90:	76 01       	movw	r14, r12
    1f92:	0c c0       	rjmp	.+24     	; 0x1fac <pulseIn+0xd2>
    1f94:	4a 01       	movw	r8, r20
    1f96:	5b 01       	movw	r10, r22
    1f98:	8c 0c       	add	r8, r12
    1f9a:	9d 1c       	adc	r9, r13
    1f9c:	ae 1c       	adc	r10, r14
    1f9e:	bf 1c       	adc	r11, r15
    1fa0:	08 15       	cp	r16, r8
    1fa2:	19 05       	cpc	r17, r9
    1fa4:	2a 05       	cpc	r18, r10
    1fa6:	3b 05       	cpc	r19, r11
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <pulseIn+0xd2>
    1faa:	40 c0       	rjmp	.+128    	; 0x202c <pulseIn+0x152>
		width++;
    1fac:	9f ef       	ldi	r25, 0xFF	; 255
    1fae:	c9 1a       	sub	r12, r25
    1fb0:	d9 0a       	sbc	r13, r25
    1fb2:	e9 0a       	sbc	r14, r25
    1fb4:	f9 0a       	sbc	r15, r25
=======
    1c4c:	40 17       	cp	r20, r16
    1c4e:	51 07       	cpc	r21, r17
    1c50:	62 07       	cpc	r22, r18
    1c52:	73 07       	cpc	r23, r19
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <pulseIn+0xb2>
    1c56:	4c c0       	rjmp	.+152    	; 0x1cf0 <pulseIn+0x14a>
    1c58:	c1 2c       	mov	r12, r1
    1c5a:	d1 2c       	mov	r13, r1
    1c5c:	76 01       	movw	r14, r12
    1c5e:	0c c0       	rjmp	.+24     	; 0x1c78 <pulseIn+0xd2>
    1c60:	4a 01       	movw	r8, r20
    1c62:	5b 01       	movw	r10, r22
    1c64:	8c 0c       	add	r8, r12
    1c66:	9d 1c       	adc	r9, r13
    1c68:	ae 1c       	adc	r10, r14
    1c6a:	bf 1c       	adc	r11, r15
    1c6c:	08 15       	cp	r16, r8
    1c6e:	19 05       	cpc	r17, r9
    1c70:	2a 05       	cpc	r18, r10
    1c72:	3b 05       	cpc	r19, r11
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <pulseIn+0xd2>
    1c76:	40 c0       	rjmp	.+128    	; 0x1cf8 <pulseIn+0x152>
		width++;
    1c78:	9f ef       	ldi	r25, 0xFF	; 255
    1c7a:	c9 1a       	sub	r12, r25
    1c7c:	d9 0a       	sbc	r13, r25
    1c7e:	e9 0a       	sbc	r14, r25
    1c80:	f9 0a       	sbc	r15, r25
>>>>>>> Stashed changes
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
<<<<<<< Updated upstream
    1fb6:	90 85       	ldd	r25, Z+8	; 0x08
    1fb8:	98 23       	and	r25, r24
    1fba:	a9 17       	cp	r26, r25
    1fbc:	59 f3       	breq	.-42     	; 0x1f94 <pulseIn+0xba>
=======
    1c82:	90 85       	ldd	r25, Z+8	; 0x08
    1c84:	98 23       	and	r25, r24
    1c86:	a9 17       	cp	r26, r25
    1c88:	59 f3       	breq	.-42     	; 0x1c60 <pulseIn+0xba>
>>>>>>> Stashed changes

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
<<<<<<< Updated upstream
    1fbe:	b7 01       	movw	r22, r14
    1fc0:	a6 01       	movw	r20, r12
    1fc2:	44 0f       	add	r20, r20
    1fc4:	55 1f       	adc	r21, r21
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	44 0f       	add	r20, r20
    1fcc:	55 1f       	adc	r21, r21
    1fce:	66 1f       	adc	r22, r22
    1fd0:	77 1f       	adc	r23, r23
    1fd2:	db 01       	movw	r26, r22
    1fd4:	ca 01       	movw	r24, r20
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	aa 1f       	adc	r26, r26
    1fdc:	bb 1f       	adc	r27, r27
    1fde:	88 0f       	add	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	aa 1f       	adc	r26, r26
    1fe4:	bb 1f       	adc	r27, r27
    1fe6:	84 0f       	add	r24, r20
    1fe8:	95 1f       	adc	r25, r21
    1fea:	a6 1f       	adc	r26, r22
    1fec:	b7 1f       	adc	r27, r23
    1fee:	8c 0d       	add	r24, r12
    1ff0:	9d 1d       	adc	r25, r13
    1ff2:	ae 1d       	adc	r26, r14
    1ff4:	bf 1d       	adc	r27, r15
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	60 5f       	subi	r22, 0xF0	; 240
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	28 e1       	ldi	r18, 0x18	; 24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
    200e:	ca 01       	movw	r24, r20
    2010:	b9 01       	movw	r22, r18
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <pulseIn+0x158>
=======
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	a6 01       	movw	r20, r12
    1c8e:	44 0f       	add	r20, r20
    1c90:	55 1f       	adc	r21, r21
    1c92:	66 1f       	adc	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	44 0f       	add	r20, r20
    1c98:	55 1f       	adc	r21, r21
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	db 01       	movw	r26, r22
    1ca0:	ca 01       	movw	r24, r20
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	aa 1f       	adc	r26, r26
    1ca8:	bb 1f       	adc	r27, r27
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	aa 1f       	adc	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	84 0f       	add	r24, r20
    1cb4:	95 1f       	adc	r25, r21
    1cb6:	a6 1f       	adc	r26, r22
    1cb8:	b7 1f       	adc	r27, r23
    1cba:	8c 0d       	add	r24, r12
    1cbc:	9d 1d       	adc	r25, r13
    1cbe:	ae 1d       	adc	r26, r14
    1cc0:	bf 1d       	adc	r27, r15
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	60 5f       	subi	r22, 0xF0	; 240
    1cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	28 e1       	ldi	r18, 0x18	; 24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
    1cda:	ca 01       	movw	r24, r20
    1cdc:	b9 01       	movw	r22, r18
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <pulseIn+0x158>
>>>>>>> Stashed changes
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
<<<<<<< Updated upstream
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	cb 01       	movw	r24, r22
    201a:	0b c0       	rjmp	.+22     	; 0x2032 <pulseIn+0x158>
=======
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	0b c0       	rjmp	.+22     	; 0x1cfe <pulseIn+0x158>
>>>>>>> Stashed changes
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
<<<<<<< Updated upstream
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	cb 01       	movw	r24, r22
    2022:	07 c0       	rjmp	.+14     	; 0x2032 <pulseIn+0x158>
=======
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	cb 01       	movw	r24, r22
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <pulseIn+0x158>
>>>>>>> Stashed changes
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
<<<<<<< Updated upstream
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	cb 01       	movw	r24, r22
    202a:	03 c0       	rjmp	.+6      	; 0x2032 <pulseIn+0x158>
    202c:	60 e0       	ldi	r22, 0x00	; 0
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	cb 01       	movw	r24, r22
=======
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <pulseIn+0x158>
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	70 e0       	ldi	r23, 0x00	; 0
    1cfc:	cb 01       	movw	r24, r22
>>>>>>> Stashed changes
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
<<<<<<< Updated upstream
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	df 90       	pop	r13
    203c:	cf 90       	pop	r12
    203e:	bf 90       	pop	r11
    2040:	af 90       	pop	r10
    2042:	9f 90       	pop	r9
    2044:	8f 90       	pop	r8
    2046:	08 95       	ret

00002048 <SorterarmIsFinnished>:
	}
}

bool SorterarmIsFinnished(){
	return 0;
}
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	08 95       	ret

0000204c <StopSorterArm>:
=======
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	df 90       	pop	r13
    1d08:	cf 90       	pop	r12
    1d0a:	bf 90       	pop	r11
    1d0c:	af 90       	pop	r10
    1d0e:	9f 90       	pop	r9
    1d10:	8f 90       	pop	r8
    1d12:	08 95       	ret

00001d14 <SorterarmIsFinnished>:
}

//TO DO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
bool SorterarmIsFinnished(){
	return 0;
}
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	08 95       	ret

00001d18 <StopSorterArm>:
>>>>>>> Stashed changes
	}
}

/* stop stepper */
void StopSorterArm()
{
<<<<<<< Updated upstream
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	cf 93       	push	r28
    2052:	df 93       	push	r29
    2054:	1f 92       	push	r1
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	char data[] = { MOTOR_OFF };
    205a:	19 82       	std	Y+1, r1	; 0x01
	uint16_t motor_id = SORTER_MOTOR_ID;
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    205c:	00 eb       	ldi	r16, 0xB0	; 176
    205e:	1a e0       	ldi	r17, 0x0A	; 10
    2060:	27 e0       	ldi	r18, 0x07	; 7
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	be 01       	movw	r22, r28
    2066:	6f 5f       	subi	r22, 0xFF	; 255
    2068:	7f 4f       	sbci	r23, 0xFF	; 255
    206a:	8c e4       	ldi	r24, 0x4C	; 76
    206c:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2070:	0f 90       	pop	r0
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	08 95       	ret

0000207c <SorterArmISR>:
=======
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	1f 92       	push	r1
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
	char data[] = { MOTOR_OFF };
    1d26:	19 82       	std	Y+1, r1	; 0x01
	uint16_t motor_id = SORTER_MOTOR_ID;
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    1d28:	00 eb       	ldi	r16, 0xB0	; 176
    1d2a:	1a e0       	ldi	r17, 0x0A	; 10
    1d2c:	27 e0       	ldi	r18, 0x07	; 7
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	be 01       	movw	r22, r28
    1d32:	6f 5f       	subi	r22, 0xFF	; 255
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	8c e4       	ldi	r24, 0x4C	; 76
    1d38:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    1d3c:	0f 90       	pop	r0
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	08 95       	ret

00001d48 <SorterArmISR>:
bool saDirection; // Richting die de arm op moet gaan, links of rechts
>>>>>>> Stashed changes
volatile bool saIsLeft, saIsRight; // Sorterarm is links of rechts van zijn uiterste rijkweidte


// Interrupt ISR
void SorterArmISR(){
	if (!(PORTK_IN & sa1.switch_pin_left)){
<<<<<<< Updated upstream
    207c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2080:	86 fd       	sbrc	r24, 6
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <SorterArmISR+0x24>
		DEBUG_OUT("----------------Stop sorter arm----------------\n");
    2084:	6d ee       	ldi	r22, 0xED	; 237
    2086:	71 e2       	ldi	r23, 0x21	; 33
    2088:	80 ea       	ldi	r24, 0xA0	; 160
    208a:	99 e0       	ldi	r25, 0x09	; 9
    208c:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		StopSorterArm();
    2090:	0e 94 26 10 	call	0x204c	; 0x204c <StopSorterArm>
		saIsLeft = true;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <saIsLeft>
		saIsRight = false;
    209a:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <saIsRight>
    209e:	08 95       	ret
	}
	else if (!(PORTK_IN & sa1.switch_pin_right)){
    20a0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    20a4:	88 23       	and	r24, r24
    20a6:	74 f0       	brlt	.+28     	; 0x20c4 <SorterArmISR+0x48>
		DEBUG_OUT("----------------Stop sorter arm----------------\n");
    20a8:	6d ee       	ldi	r22, 0xED	; 237
    20aa:	71 e2       	ldi	r23, 0x21	; 33
    20ac:	80 ea       	ldi	r24, 0xA0	; 160
    20ae:	99 e0       	ldi	r25, 0x09	; 9
    20b0:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		StopSorterArm();
    20b4:	0e 94 26 10 	call	0x204c	; 0x204c <StopSorterArm>
		saIsLeft = false;
    20b8:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <saIsLeft>
		saIsRight = true;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 ca 23 	sts	0x23CA, r24	; 0x8023ca <saIsRight>
    20c2:	08 95       	ret
	}
	else {
		DEBUG_OUT("----------------Don't stop sorter arm----------------\n");
    20c4:	6e e1       	ldi	r22, 0x1E	; 30
    20c6:	72 e2       	ldi	r23, 0x22	; 34
    20c8:	80 ea       	ldi	r24, 0xA0	; 160
    20ca:	99 e0       	ldi	r25, 0x09	; 9
    20cc:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		saIsLeft = false;
    20d0:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <saIsLeft>
		saIsRight = false;
    20d4:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <saIsRight>
    20d8:	08 95       	ret

000020da <_Z17SorterarmLinksISRv>:
=======
    1d48:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1d4c:	86 fd       	sbrc	r24, 6
    1d4e:	0e c0       	rjmp	.+28     	; 0x1d6c <SorterArmISR+0x24>
		DEBUG_OUT("----------------Stop sorter arm----------------\n");
    1d50:	60 e2       	ldi	r22, 0x20	; 32
    1d52:	72 e2       	ldi	r23, 0x22	; 34
    1d54:	80 ea       	ldi	r24, 0xA0	; 160
    1d56:	99 e0       	ldi	r25, 0x09	; 9
    1d58:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		StopSorterArm();
    1d5c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <StopSorterArm>
		saIsLeft = true;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <saIsLeft>
		saIsRight = false;
    1d66:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <saIsRight>
    1d6a:	08 95       	ret
	}
	else if (!(PORTK_IN & sa1.switch_pin_right)){
    1d6c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1d70:	88 23       	and	r24, r24
    1d72:	74 f0       	brlt	.+28     	; 0x1d90 <SorterArmISR+0x48>
		DEBUG_OUT("----------------Stop sorter arm----------------\n");
    1d74:	60 e2       	ldi	r22, 0x20	; 32
    1d76:	72 e2       	ldi	r23, 0x22	; 34
    1d78:	80 ea       	ldi	r24, 0xA0	; 160
    1d7a:	99 e0       	ldi	r25, 0x09	; 9
    1d7c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		StopSorterArm();
    1d80:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <StopSorterArm>
		saIsLeft = false;
    1d84:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <saIsLeft>
		saIsRight = true;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <saIsRight>
    1d8e:	08 95       	ret
	}
	else {
		DEBUG_OUT("----------------Don't stop sorter arm----------------\n");
    1d90:	61 e5       	ldi	r22, 0x51	; 81
    1d92:	72 e2       	ldi	r23, 0x22	; 34
    1d94:	80 ea       	ldi	r24, 0xA0	; 160
    1d96:	99 e0       	ldi	r25, 0x09	; 9
    1d98:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		saIsLeft = false;
    1d9c:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <saIsLeft>
		saIsRight = false;
    1da0:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <saIsRight>
    1da4:	08 95       	ret

00001da6 <_Z17SorterarmLinksISRv>:
>>>>>>> Stashed changes


}

void SorterarmLinksISR() {
	saIsLeft = true;
<<<<<<< Updated upstream
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <saIsLeft>
	saIsRight = false;
    20e0:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <saIsRight>
	StopSorterArm();
    20e4:	0e 94 26 10 	call	0x204c	; 0x204c <StopSorterArm>
    20e8:	08 95       	ret

000020ea <_Z18SorterArmRechtsISRv>:
=======
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <saIsLeft>
	saIsRight = false;
    1dac:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <saIsRight>
	StopSorterArm();
    1db0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <StopSorterArm>
    1db4:	08 95       	ret

00001db6 <_Z18SorterArmRechtsISRv>:
>>>>>>> Stashed changes
}

void SorterArmRechtsISR() {
	saIsLeft = false;
<<<<<<< Updated upstream
    20ea:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <saIsLeft>
	saIsRight = true;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	80 93 ca 23 	sts	0x23CA, r24	; 0x8023ca <saIsRight>
	StopSorterArm();
    20f4:	0e 94 26 10 	call	0x204c	; 0x204c <StopSorterArm>
    20f8:	08 95       	ret

000020fa <SaSetInput>:
=======
    1db6:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <saIsLeft>
	saIsRight = true;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <saIsRight>
	StopSorterArm();
    1dc0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <StopSorterArm>
    1dc4:	08 95       	ret

00001dc6 <SaSetInput>:
>>>>>>> Stashed changes


// Zet pinnen van de sorterarm als input-pullup
void SaSetInput(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_DIR &= ~(switch_pin_left);		//pin set left as input
<<<<<<< Updated upstream
    20fa:	e0 e2       	ldi	r30, 0x20	; 32
    20fc:	f7 e0       	ldi	r31, 0x07	; 7
    20fe:	90 81       	ld	r25, Z
    2100:	28 2f       	mov	r18, r24
    2102:	20 95       	com	r18
    2104:	92 23       	and	r25, r18
    2106:	90 83       	st	Z, r25
	PORTK_DIR &= ~(switch_pin_right);		//pin set right as input
    2108:	90 81       	ld	r25, Z
    210a:	26 2f       	mov	r18, r22
    210c:	20 95       	com	r18
    210e:	92 23       	and	r25, r18
    2110:	90 83       	st	Z, r25
	
	//Set the PINnCTRL of the left switch to PULLUP
	switch (switch_pin_left)				//pull-up
    2112:	88 30       	cpi	r24, 0x08	; 8
    2114:	29 f1       	breq	.+74     	; 0x2160 <SaSetInput+0x66>
    2116:	38 f4       	brcc	.+14     	; 0x2126 <SaSetInput+0x2c>
    2118:	82 30       	cpi	r24, 0x02	; 2
    211a:	b1 f0       	breq	.+44     	; 0x2148 <SaSetInput+0x4e>
    211c:	84 30       	cpi	r24, 0x04	; 4
    211e:	d1 f0       	breq	.+52     	; 0x2154 <SaSetInput+0x5a>
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	d9 f5       	brne	.+118    	; 0x219a <SaSetInput+0xa0>
    2124:	0b c0       	rjmp	.+22     	; 0x213c <SaSetInput+0x42>
    2126:	80 32       	cpi	r24, 0x20	; 32
    2128:	39 f1       	breq	.+78     	; 0x2178 <SaSetInput+0x7e>
    212a:	18 f4       	brcc	.+6      	; 0x2132 <SaSetInput+0x38>
    212c:	80 31       	cpi	r24, 0x10	; 16
    212e:	f1 f0       	breq	.+60     	; 0x216c <SaSetInput+0x72>
    2130:	34 c0       	rjmp	.+104    	; 0x219a <SaSetInput+0xa0>
    2132:	80 34       	cpi	r24, 0x40	; 64
    2134:	39 f1       	breq	.+78     	; 0x2184 <SaSetInput+0x8a>
    2136:	80 38       	cpi	r24, 0x80	; 128
    2138:	59 f1       	breq	.+86     	; 0x2190 <SaSetInput+0x96>
    213a:	2f c0       	rjmp	.+94     	; 0x219a <SaSetInput+0xa0>
	{
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    213c:	e0 e3       	ldi	r30, 0x30	; 48
    213e:	f7 e0       	ldi	r31, 0x07	; 7
    2140:	80 81       	ld	r24, Z
    2142:	88 61       	ori	r24, 0x18	; 24
    2144:	80 83       	st	Z, r24
    2146:	29 c0       	rjmp	.+82     	; 0x219a <SaSetInput+0xa0>
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    2148:	e1 e3       	ldi	r30, 0x31	; 49
    214a:	f7 e0       	ldi	r31, 0x07	; 7
    214c:	80 81       	ld	r24, Z
    214e:	88 61       	ori	r24, 0x18	; 24
    2150:	80 83       	st	Z, r24
    2152:	23 c0       	rjmp	.+70     	; 0x219a <SaSetInput+0xa0>
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    2154:	e2 e3       	ldi	r30, 0x32	; 50
    2156:	f7 e0       	ldi	r31, 0x07	; 7
    2158:	80 81       	ld	r24, Z
    215a:	88 61       	ori	r24, 0x18	; 24
    215c:	80 83       	st	Z, r24
    215e:	1d c0       	rjmp	.+58     	; 0x219a <SaSetInput+0xa0>
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    2160:	e3 e3       	ldi	r30, 0x33	; 51
    2162:	f7 e0       	ldi	r31, 0x07	; 7
    2164:	80 81       	ld	r24, Z
    2166:	88 61       	ori	r24, 0x18	; 24
    2168:	80 83       	st	Z, r24
    216a:	17 c0       	rjmp	.+46     	; 0x219a <SaSetInput+0xa0>
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    216c:	e4 e3       	ldi	r30, 0x34	; 52
    216e:	f7 e0       	ldi	r31, 0x07	; 7
    2170:	80 81       	ld	r24, Z
    2172:	88 61       	ori	r24, 0x18	; 24
    2174:	80 83       	st	Z, r24
    2176:	11 c0       	rjmp	.+34     	; 0x219a <SaSetInput+0xa0>
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    2178:	e5 e3       	ldi	r30, 0x35	; 53
    217a:	f7 e0       	ldi	r31, 0x07	; 7
    217c:	80 81       	ld	r24, Z
    217e:	88 61       	ori	r24, 0x18	; 24
    2180:	80 83       	st	Z, r24
    2182:	0b c0       	rjmp	.+22     	; 0x219a <SaSetInput+0xa0>
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    2184:	e6 e3       	ldi	r30, 0x36	; 54
    2186:	f7 e0       	ldi	r31, 0x07	; 7
    2188:	80 81       	ld	r24, Z
    218a:	88 61       	ori	r24, 0x18	; 24
    218c:	80 83       	st	Z, r24
    218e:	05 c0       	rjmp	.+10     	; 0x219a <SaSetInput+0xa0>
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    2190:	e7 e3       	ldi	r30, 0x37	; 55
    2192:	f7 e0       	ldi	r31, 0x07	; 7
    2194:	80 81       	ld	r24, Z
    2196:	88 61       	ori	r24, 0x18	; 24
    2198:	80 83       	st	Z, r24
=======
    1dc6:	e0 e2       	ldi	r30, 0x20	; 32
    1dc8:	f7 e0       	ldi	r31, 0x07	; 7
    1dca:	90 81       	ld	r25, Z
    1dcc:	28 2f       	mov	r18, r24
    1dce:	20 95       	com	r18
    1dd0:	92 23       	and	r25, r18
    1dd2:	90 83       	st	Z, r25
	PORTK_DIR &= ~(switch_pin_right);		//pin set right as input
    1dd4:	90 81       	ld	r25, Z
    1dd6:	26 2f       	mov	r18, r22
    1dd8:	20 95       	com	r18
    1dda:	92 23       	and	r25, r18
    1ddc:	90 83       	st	Z, r25
	
	//Set the PINnCTRL of the left switch to PULLUP
	switch (switch_pin_left)				//pull-up
    1dde:	88 30       	cpi	r24, 0x08	; 8
    1de0:	29 f1       	breq	.+74     	; 0x1e2c <SaSetInput+0x66>
    1de2:	38 f4       	brcc	.+14     	; 0x1df2 <SaSetInput+0x2c>
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	b1 f0       	breq	.+44     	; 0x1e14 <SaSetInput+0x4e>
    1de8:	84 30       	cpi	r24, 0x04	; 4
    1dea:	d1 f0       	breq	.+52     	; 0x1e20 <SaSetInput+0x5a>
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	d9 f5       	brne	.+118    	; 0x1e66 <SaSetInput+0xa0>
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <SaSetInput+0x42>
    1df2:	80 32       	cpi	r24, 0x20	; 32
    1df4:	39 f1       	breq	.+78     	; 0x1e44 <SaSetInput+0x7e>
    1df6:	18 f4       	brcc	.+6      	; 0x1dfe <SaSetInput+0x38>
    1df8:	80 31       	cpi	r24, 0x10	; 16
    1dfa:	f1 f0       	breq	.+60     	; 0x1e38 <SaSetInput+0x72>
    1dfc:	34 c0       	rjmp	.+104    	; 0x1e66 <SaSetInput+0xa0>
    1dfe:	80 34       	cpi	r24, 0x40	; 64
    1e00:	39 f1       	breq	.+78     	; 0x1e50 <SaSetInput+0x8a>
    1e02:	80 38       	cpi	r24, 0x80	; 128
    1e04:	59 f1       	breq	.+86     	; 0x1e5c <SaSetInput+0x96>
    1e06:	2f c0       	rjmp	.+94     	; 0x1e66 <SaSetInput+0xa0>
	{
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    1e08:	e0 e3       	ldi	r30, 0x30	; 48
    1e0a:	f7 e0       	ldi	r31, 0x07	; 7
    1e0c:	80 81       	ld	r24, Z
    1e0e:	88 61       	ori	r24, 0x18	; 24
    1e10:	80 83       	st	Z, r24
    1e12:	29 c0       	rjmp	.+82     	; 0x1e66 <SaSetInput+0xa0>
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    1e14:	e1 e3       	ldi	r30, 0x31	; 49
    1e16:	f7 e0       	ldi	r31, 0x07	; 7
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 61       	ori	r24, 0x18	; 24
    1e1c:	80 83       	st	Z, r24
    1e1e:	23 c0       	rjmp	.+70     	; 0x1e66 <SaSetInput+0xa0>
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    1e20:	e2 e3       	ldi	r30, 0x32	; 50
    1e22:	f7 e0       	ldi	r31, 0x07	; 7
    1e24:	80 81       	ld	r24, Z
    1e26:	88 61       	ori	r24, 0x18	; 24
    1e28:	80 83       	st	Z, r24
    1e2a:	1d c0       	rjmp	.+58     	; 0x1e66 <SaSetInput+0xa0>
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    1e2c:	e3 e3       	ldi	r30, 0x33	; 51
    1e2e:	f7 e0       	ldi	r31, 0x07	; 7
    1e30:	80 81       	ld	r24, Z
    1e32:	88 61       	ori	r24, 0x18	; 24
    1e34:	80 83       	st	Z, r24
    1e36:	17 c0       	rjmp	.+46     	; 0x1e66 <SaSetInput+0xa0>
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    1e38:	e4 e3       	ldi	r30, 0x34	; 52
    1e3a:	f7 e0       	ldi	r31, 0x07	; 7
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 61       	ori	r24, 0x18	; 24
    1e40:	80 83       	st	Z, r24
    1e42:	11 c0       	rjmp	.+34     	; 0x1e66 <SaSetInput+0xa0>
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f7 e0       	ldi	r31, 0x07	; 7
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 61       	ori	r24, 0x18	; 24
    1e4c:	80 83       	st	Z, r24
    1e4e:	0b c0       	rjmp	.+22     	; 0x1e66 <SaSetInput+0xa0>
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    1e50:	e6 e3       	ldi	r30, 0x36	; 54
    1e52:	f7 e0       	ldi	r31, 0x07	; 7
    1e54:	80 81       	ld	r24, Z
    1e56:	88 61       	ori	r24, 0x18	; 24
    1e58:	80 83       	st	Z, r24
    1e5a:	05 c0       	rjmp	.+10     	; 0x1e66 <SaSetInput+0xa0>
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    1e5c:	e7 e3       	ldi	r30, 0x37	; 55
    1e5e:	f7 e0       	ldi	r31, 0x07	; 7
    1e60:	80 81       	ld	r24, Z
    1e62:	88 61       	ori	r24, 0x18	; 24
    1e64:	80 83       	st	Z, r24
>>>>>>> Stashed changes
		default: break;
	}

	//Set the PINnCTRL of the right switch to PULLUP
	switch(switch_pin_right){
<<<<<<< Updated upstream
    219a:	68 30       	cpi	r22, 0x08	; 8
    219c:	29 f1       	breq	.+74     	; 0x21e8 <SaSetInput+0xee>
    219e:	38 f4       	brcc	.+14     	; 0x21ae <SaSetInput+0xb4>
    21a0:	62 30       	cpi	r22, 0x02	; 2
    21a2:	b1 f0       	breq	.+44     	; 0x21d0 <SaSetInput+0xd6>
    21a4:	64 30       	cpi	r22, 0x04	; 4
    21a6:	d1 f0       	breq	.+52     	; 0x21dc <SaSetInput+0xe2>
    21a8:	61 30       	cpi	r22, 0x01	; 1
    21aa:	d9 f5       	brne	.+118    	; 0x2222 <SaSetInput+0x128>
    21ac:	0b c0       	rjmp	.+22     	; 0x21c4 <SaSetInput+0xca>
    21ae:	60 32       	cpi	r22, 0x20	; 32
    21b0:	39 f1       	breq	.+78     	; 0x2200 <SaSetInput+0x106>
    21b2:	18 f4       	brcc	.+6      	; 0x21ba <SaSetInput+0xc0>
    21b4:	60 31       	cpi	r22, 0x10	; 16
    21b6:	f1 f0       	breq	.+60     	; 0x21f4 <SaSetInput+0xfa>
    21b8:	08 95       	ret
    21ba:	60 34       	cpi	r22, 0x40	; 64
    21bc:	39 f1       	breq	.+78     	; 0x220c <SaSetInput+0x112>
    21be:	60 38       	cpi	r22, 0x80	; 128
    21c0:	59 f1       	breq	.+86     	; 0x2218 <SaSetInput+0x11e>
    21c2:	08 95       	ret
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    21c4:	e0 e3       	ldi	r30, 0x30	; 48
    21c6:	f7 e0       	ldi	r31, 0x07	; 7
    21c8:	80 81       	ld	r24, Z
    21ca:	88 61       	ori	r24, 0x18	; 24
    21cc:	80 83       	st	Z, r24
    21ce:	08 95       	ret
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    21d0:	e1 e3       	ldi	r30, 0x31	; 49
    21d2:	f7 e0       	ldi	r31, 0x07	; 7
    21d4:	80 81       	ld	r24, Z
    21d6:	88 61       	ori	r24, 0x18	; 24
    21d8:	80 83       	st	Z, r24
    21da:	08 95       	ret
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    21dc:	e2 e3       	ldi	r30, 0x32	; 50
    21de:	f7 e0       	ldi	r31, 0x07	; 7
    21e0:	80 81       	ld	r24, Z
    21e2:	88 61       	ori	r24, 0x18	; 24
    21e4:	80 83       	st	Z, r24
    21e6:	08 95       	ret
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    21e8:	e3 e3       	ldi	r30, 0x33	; 51
    21ea:	f7 e0       	ldi	r31, 0x07	; 7
    21ec:	80 81       	ld	r24, Z
    21ee:	88 61       	ori	r24, 0x18	; 24
    21f0:	80 83       	st	Z, r24
    21f2:	08 95       	ret
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    21f4:	e4 e3       	ldi	r30, 0x34	; 52
    21f6:	f7 e0       	ldi	r31, 0x07	; 7
    21f8:	80 81       	ld	r24, Z
    21fa:	88 61       	ori	r24, 0x18	; 24
    21fc:	80 83       	st	Z, r24
    21fe:	08 95       	ret
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    2200:	e5 e3       	ldi	r30, 0x35	; 53
    2202:	f7 e0       	ldi	r31, 0x07	; 7
    2204:	80 81       	ld	r24, Z
    2206:	88 61       	ori	r24, 0x18	; 24
    2208:	80 83       	st	Z, r24
    220a:	08 95       	ret
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    220c:	e6 e3       	ldi	r30, 0x36	; 54
    220e:	f7 e0       	ldi	r31, 0x07	; 7
    2210:	80 81       	ld	r24, Z
    2212:	88 61       	ori	r24, 0x18	; 24
    2214:	80 83       	st	Z, r24
    2216:	08 95       	ret
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    2218:	e7 e3       	ldi	r30, 0x37	; 55
    221a:	f7 e0       	ldi	r31, 0x07	; 7
    221c:	80 81       	ld	r24, Z
    221e:	88 61       	ori	r24, 0x18	; 24
    2220:	80 83       	st	Z, r24
    2222:	08 95       	ret

00002224 <SaSetInterrupt>:
=======
    1e66:	68 30       	cpi	r22, 0x08	; 8
    1e68:	29 f1       	breq	.+74     	; 0x1eb4 <SaSetInput+0xee>
    1e6a:	38 f4       	brcc	.+14     	; 0x1e7a <SaSetInput+0xb4>
    1e6c:	62 30       	cpi	r22, 0x02	; 2
    1e6e:	b1 f0       	breq	.+44     	; 0x1e9c <SaSetInput+0xd6>
    1e70:	64 30       	cpi	r22, 0x04	; 4
    1e72:	d1 f0       	breq	.+52     	; 0x1ea8 <SaSetInput+0xe2>
    1e74:	61 30       	cpi	r22, 0x01	; 1
    1e76:	d9 f5       	brne	.+118    	; 0x1eee <SaSetInput+0x128>
    1e78:	0b c0       	rjmp	.+22     	; 0x1e90 <SaSetInput+0xca>
    1e7a:	60 32       	cpi	r22, 0x20	; 32
    1e7c:	39 f1       	breq	.+78     	; 0x1ecc <SaSetInput+0x106>
    1e7e:	18 f4       	brcc	.+6      	; 0x1e86 <SaSetInput+0xc0>
    1e80:	60 31       	cpi	r22, 0x10	; 16
    1e82:	f1 f0       	breq	.+60     	; 0x1ec0 <SaSetInput+0xfa>
    1e84:	08 95       	ret
    1e86:	60 34       	cpi	r22, 0x40	; 64
    1e88:	39 f1       	breq	.+78     	; 0x1ed8 <SaSetInput+0x112>
    1e8a:	60 38       	cpi	r22, 0x80	; 128
    1e8c:	59 f1       	breq	.+86     	; 0x1ee4 <SaSetInput+0x11e>
    1e8e:	08 95       	ret
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    1e90:	e0 e3       	ldi	r30, 0x30	; 48
    1e92:	f7 e0       	ldi	r31, 0x07	; 7
    1e94:	80 81       	ld	r24, Z
    1e96:	88 61       	ori	r24, 0x18	; 24
    1e98:	80 83       	st	Z, r24
    1e9a:	08 95       	ret
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    1e9c:	e1 e3       	ldi	r30, 0x31	; 49
    1e9e:	f7 e0       	ldi	r31, 0x07	; 7
    1ea0:	80 81       	ld	r24, Z
    1ea2:	88 61       	ori	r24, 0x18	; 24
    1ea4:	80 83       	st	Z, r24
    1ea6:	08 95       	ret
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f7 e0       	ldi	r31, 0x07	; 7
    1eac:	80 81       	ld	r24, Z
    1eae:	88 61       	ori	r24, 0x18	; 24
    1eb0:	80 83       	st	Z, r24
    1eb2:	08 95       	ret
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    1eb4:	e3 e3       	ldi	r30, 0x33	; 51
    1eb6:	f7 e0       	ldi	r31, 0x07	; 7
    1eb8:	80 81       	ld	r24, Z
    1eba:	88 61       	ori	r24, 0x18	; 24
    1ebc:	80 83       	st	Z, r24
    1ebe:	08 95       	ret
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    1ec0:	e4 e3       	ldi	r30, 0x34	; 52
    1ec2:	f7 e0       	ldi	r31, 0x07	; 7
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 61       	ori	r24, 0x18	; 24
    1ec8:	80 83       	st	Z, r24
    1eca:	08 95       	ret
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    1ecc:	e5 e3       	ldi	r30, 0x35	; 53
    1ece:	f7 e0       	ldi	r31, 0x07	; 7
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 61       	ori	r24, 0x18	; 24
    1ed4:	80 83       	st	Z, r24
    1ed6:	08 95       	ret
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    1ed8:	e6 e3       	ldi	r30, 0x36	; 54
    1eda:	f7 e0       	ldi	r31, 0x07	; 7
    1edc:	80 81       	ld	r24, Z
    1ede:	88 61       	ori	r24, 0x18	; 24
    1ee0:	80 83       	st	Z, r24
    1ee2:	08 95       	ret
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    1ee4:	e7 e3       	ldi	r30, 0x37	; 55
    1ee6:	f7 e0       	ldi	r31, 0x07	; 7
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 61       	ori	r24, 0x18	; 24
    1eec:	80 83       	st	Z, r24
    1eee:	08 95       	ret

00001ef0 <SaSetInterrupt>:
>>>>>>> Stashed changes


// Zet interrupts aan op de sorterarm pinnen
void SaSetInterrupt(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_INT1MASK |= switch_pin_left;		//pin listen interrupt left
<<<<<<< Updated upstream
    2224:	eb e2       	ldi	r30, 0x2B	; 43
    2226:	f7 e0       	ldi	r31, 0x07	; 7
    2228:	90 81       	ld	r25, Z
    222a:	98 2b       	or	r25, r24
    222c:	90 83       	st	Z, r25
	PORTK_INT1MASK |= switch_pin_right;		//pin listen interrupt right
    222e:	90 81       	ld	r25, Z
    2230:	69 2b       	or	r22, r25
    2232:	60 83       	st	Z, r22

	switch (switch_pin_left)					//sense both edges
    2234:	84 30       	cpi	r24, 0x04	; 4
    2236:	09 f1       	breq	.+66     	; 0x227a <SaSetInterrupt+0x56>
    2238:	28 f4       	brcc	.+10     	; 0x2244 <SaSetInterrupt+0x20>
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	41 f0       	breq	.+16     	; 0x224e <SaSetInterrupt+0x2a>
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	89 f0       	breq	.+34     	; 0x2264 <SaSetInterrupt+0x40>
    2242:	3b c0       	rjmp	.+118    	; 0x22ba <SaSetInterrupt+0x96>
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	21 f1       	breq	.+72     	; 0x2290 <SaSetInterrupt+0x6c>
    2248:	80 31       	cpi	r24, 0x10	; 16
    224a:	69 f1       	breq	.+90     	; 0x22a6 <SaSetInterrupt+0x82>
    224c:	36 c0       	rjmp	.+108    	; 0x22ba <SaSetInterrupt+0x96>
	{
	case PIN0_bm: PORTK_PIN0CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc; break;
    224e:	e0 e3       	ldi	r30, 0x30	; 48
    2250:	f7 e0       	ldi	r31, 0x07	; 7
    2252:	80 81       	ld	r24, Z
    2254:	82 60       	ori	r24, 0x02	; 2
    2256:	80 83       	st	Z, r24
    2258:	e1 e3       	ldi	r30, 0x31	; 49
    225a:	f7 e0       	ldi	r31, 0x07	; 7
    225c:	80 81       	ld	r24, Z
    225e:	82 60       	ori	r24, 0x02	; 2
    2260:	80 83       	st	Z, r24
    2262:	2b c0       	rjmp	.+86     	; 0x22ba <SaSetInterrupt+0x96>
	case PIN1_bm: PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc; break;
    2264:	e1 e3       	ldi	r30, 0x31	; 49
    2266:	f7 e0       	ldi	r31, 0x07	; 7
    2268:	80 81       	ld	r24, Z
    226a:	82 60       	ori	r24, 0x02	; 2
    226c:	80 83       	st	Z, r24
    226e:	e2 e3       	ldi	r30, 0x32	; 50
    2270:	f7 e0       	ldi	r31, 0x07	; 7
    2272:	80 81       	ld	r24, Z
    2274:	82 60       	ori	r24, 0x02	; 2
    2276:	80 83       	st	Z, r24
    2278:	20 c0       	rjmp	.+64     	; 0x22ba <SaSetInterrupt+0x96>
	case PIN2_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN3CTRL |= PORT_ISC_FALLING_gc; break;
    227a:	e2 e3       	ldi	r30, 0x32	; 50
    227c:	f7 e0       	ldi	r31, 0x07	; 7
    227e:	80 81       	ld	r24, Z
    2280:	82 60       	ori	r24, 0x02	; 2
    2282:	80 83       	st	Z, r24
    2284:	e3 e3       	ldi	r30, 0x33	; 51
    2286:	f7 e0       	ldi	r31, 0x07	; 7
    2288:	80 81       	ld	r24, Z
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	80 83       	st	Z, r24
    228e:	15 c0       	rjmp	.+42     	; 0x22ba <SaSetInterrupt+0x96>
	case PIN3_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; break;
    2290:	e2 e3       	ldi	r30, 0x32	; 50
    2292:	f7 e0       	ldi	r31, 0x07	; 7
    2294:	80 81       	ld	r24, Z
    2296:	82 60       	ori	r24, 0x02	; 2
    2298:	80 83       	st	Z, r24
    229a:	e4 e3       	ldi	r30, 0x34	; 52
    229c:	f7 e0       	ldi	r31, 0x07	; 7
    229e:	80 81       	ld	r24, Z
    22a0:	82 60       	ori	r24, 0x02	; 2
    22a2:	80 83       	st	Z, r24
    22a4:	0a c0       	rjmp	.+20     	; 0x22ba <SaSetInterrupt+0x96>
	case PIN4_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc; break;
    22a6:	e2 e3       	ldi	r30, 0x32	; 50
    22a8:	f7 e0       	ldi	r31, 0x07	; 7
    22aa:	80 81       	ld	r24, Z
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	80 83       	st	Z, r24
    22b0:	e5 e3       	ldi	r30, 0x35	; 53
    22b2:	f7 e0       	ldi	r31, 0x07	; 7
    22b4:	80 81       	ld	r24, Z
    22b6:	82 60       	ori	r24, 0x02	; 2
    22b8:	80 83       	st	Z, r24
	}

	PORTK_INTCTRL |= PORT_INT1LVL0_bm;	//enable interrupt on PORTK
    22ba:	e9 e2       	ldi	r30, 0x29	; 41
    22bc:	f7 e0       	ldi	r31, 0x07	; 7
    22be:	80 81       	ld	r24, Z
    22c0:	84 60       	ori	r24, 0x04	; 4
    22c2:	80 83       	st	Z, r24
    22c4:	08 95       	ret

000022c6 <ConfigSorterArm>:
bool SorterarmIsFinnished(){
=======
    1ef0:	eb e2       	ldi	r30, 0x2B	; 43
    1ef2:	f7 e0       	ldi	r31, 0x07	; 7
    1ef4:	90 81       	ld	r25, Z
    1ef6:	98 2b       	or	r25, r24
    1ef8:	90 83       	st	Z, r25
	PORTK_INT1MASK |= switch_pin_right;		//pin listen interrupt right
    1efa:	90 81       	ld	r25, Z
    1efc:	69 2b       	or	r22, r25
    1efe:	60 83       	st	Z, r22

	switch (switch_pin_left)					//sense both edges
    1f00:	84 30       	cpi	r24, 0x04	; 4
    1f02:	09 f1       	breq	.+66     	; 0x1f46 <SaSetInterrupt+0x56>
    1f04:	28 f4       	brcc	.+10     	; 0x1f10 <SaSetInterrupt+0x20>
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	41 f0       	breq	.+16     	; 0x1f1a <SaSetInterrupt+0x2a>
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	89 f0       	breq	.+34     	; 0x1f30 <SaSetInterrupt+0x40>
    1f0e:	3b c0       	rjmp	.+118    	; 0x1f86 <SaSetInterrupt+0x96>
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	21 f1       	breq	.+72     	; 0x1f5c <SaSetInterrupt+0x6c>
    1f14:	80 31       	cpi	r24, 0x10	; 16
    1f16:	69 f1       	breq	.+90     	; 0x1f72 <SaSetInterrupt+0x82>
    1f18:	36 c0       	rjmp	.+108    	; 0x1f86 <SaSetInterrupt+0x96>
	{
	case PIN0_bm: PORTK_PIN0CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc; break;
    1f1a:	e0 e3       	ldi	r30, 0x30	; 48
    1f1c:	f7 e0       	ldi	r31, 0x07	; 7
    1f1e:	80 81       	ld	r24, Z
    1f20:	82 60       	ori	r24, 0x02	; 2
    1f22:	80 83       	st	Z, r24
    1f24:	e1 e3       	ldi	r30, 0x31	; 49
    1f26:	f7 e0       	ldi	r31, 0x07	; 7
    1f28:	80 81       	ld	r24, Z
    1f2a:	82 60       	ori	r24, 0x02	; 2
    1f2c:	80 83       	st	Z, r24
    1f2e:	2b c0       	rjmp	.+86     	; 0x1f86 <SaSetInterrupt+0x96>
	case PIN1_bm: PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc; break;
    1f30:	e1 e3       	ldi	r30, 0x31	; 49
    1f32:	f7 e0       	ldi	r31, 0x07	; 7
    1f34:	80 81       	ld	r24, Z
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	80 83       	st	Z, r24
    1f3a:	e2 e3       	ldi	r30, 0x32	; 50
    1f3c:	f7 e0       	ldi	r31, 0x07	; 7
    1f3e:	80 81       	ld	r24, Z
    1f40:	82 60       	ori	r24, 0x02	; 2
    1f42:	80 83       	st	Z, r24
    1f44:	20 c0       	rjmp	.+64     	; 0x1f86 <SaSetInterrupt+0x96>
	case PIN2_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN3CTRL |= PORT_ISC_FALLING_gc; break;
    1f46:	e2 e3       	ldi	r30, 0x32	; 50
    1f48:	f7 e0       	ldi	r31, 0x07	; 7
    1f4a:	80 81       	ld	r24, Z
    1f4c:	82 60       	ori	r24, 0x02	; 2
    1f4e:	80 83       	st	Z, r24
    1f50:	e3 e3       	ldi	r30, 0x33	; 51
    1f52:	f7 e0       	ldi	r31, 0x07	; 7
    1f54:	80 81       	ld	r24, Z
    1f56:	82 60       	ori	r24, 0x02	; 2
    1f58:	80 83       	st	Z, r24
    1f5a:	15 c0       	rjmp	.+42     	; 0x1f86 <SaSetInterrupt+0x96>
	case PIN3_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; break;
    1f5c:	e2 e3       	ldi	r30, 0x32	; 50
    1f5e:	f7 e0       	ldi	r31, 0x07	; 7
    1f60:	80 81       	ld	r24, Z
    1f62:	82 60       	ori	r24, 0x02	; 2
    1f64:	80 83       	st	Z, r24
    1f66:	e4 e3       	ldi	r30, 0x34	; 52
    1f68:	f7 e0       	ldi	r31, 0x07	; 7
    1f6a:	80 81       	ld	r24, Z
    1f6c:	82 60       	ori	r24, 0x02	; 2
    1f6e:	80 83       	st	Z, r24
    1f70:	0a c0       	rjmp	.+20     	; 0x1f86 <SaSetInterrupt+0x96>
	case PIN4_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc; break;
    1f72:	e2 e3       	ldi	r30, 0x32	; 50
    1f74:	f7 e0       	ldi	r31, 0x07	; 7
    1f76:	80 81       	ld	r24, Z
    1f78:	82 60       	ori	r24, 0x02	; 2
    1f7a:	80 83       	st	Z, r24
    1f7c:	e5 e3       	ldi	r30, 0x35	; 53
    1f7e:	f7 e0       	ldi	r31, 0x07	; 7
    1f80:	80 81       	ld	r24, Z
    1f82:	82 60       	ori	r24, 0x02	; 2
    1f84:	80 83       	st	Z, r24
	}

	PORTK_INTCTRL |= PORT_INT1LVL0_bm;	//enable interrupt on PORTK
    1f86:	e9 e2       	ldi	r30, 0x29	; 41
    1f88:	f7 e0       	ldi	r31, 0x07	; 7
    1f8a:	80 81       	ld	r24, Z
    1f8c:	84 60       	ori	r24, 0x04	; 4
    1f8e:	80 83       	st	Z, r24
    1f90:	08 95       	ret

00001f92 <ConfigSorterArm>:
>>>>>>> Stashed changes
	return 0;
}

bool ConfigSorterArm(){
	SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
<<<<<<< Updated upstream
    22c6:	60 e8       	ldi	r22, 0x80	; 128
    22c8:	80 e4       	ldi	r24, 0x40	; 64
    22ca:	0e 94 7d 10 	call	0x20fa	; 0x20fa <SaSetInput>
    22ce:	2f e7       	ldi	r18, 0x7F	; 127
    22d0:	82 e3       	ldi	r24, 0x32	; 50
    22d2:	92 e0       	ldi	r25, 0x02	; 2
    22d4:	21 50       	subi	r18, 0x01	; 1
    22d6:	80 40       	sbci	r24, 0x00	; 0
    22d8:	90 40       	sbci	r25, 0x00	; 0
    22da:	e1 f7       	brne	.-8      	; 0x22d4 <ConfigSorterArm+0xe>
    22dc:	00 c0       	rjmp	.+0      	; 0x22de <ConfigSorterArm+0x18>
    22de:	00 00       	nop
=======
    1f92:	60 e8       	ldi	r22, 0x80	; 128
    1f94:	80 e4       	ldi	r24, 0x40	; 64
    1f96:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <SaSetInput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f9a:	2f e7       	ldi	r18, 0x7F	; 127
    1f9c:	82 e3       	ldi	r24, 0x32	; 50
    1f9e:	92 e0       	ldi	r25, 0x02	; 2
    1fa0:	21 50       	subi	r18, 0x01	; 1
    1fa2:	80 40       	sbci	r24, 0x00	; 0
    1fa4:	90 40       	sbci	r25, 0x00	; 0
    1fa6:	e1 f7       	brne	.-8      	; 0x1fa0 <ConfigSorterArm+0xe>
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <ConfigSorterArm+0x18>
    1faa:	00 00       	nop
>>>>>>> Stashed changes
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
<<<<<<< Updated upstream
    22e0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    22e4:	86 fd       	sbrc	r24, 6
    22e6:	27 c0       	rjmp	.+78     	; 0x2336 <ConfigSorterArm+0x70>
    22e8:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <saDirection>
    22ec:	81 11       	cpse	r24, r1
    22ee:	28 c0       	rjmp	.+80     	; 0x2340 <ConfigSorterArm+0x7a>
    22f0:	22 c0       	rjmp	.+68     	; 0x2336 <ConfigSorterArm+0x70>
=======
    1fac:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1fb0:	86 fd       	sbrc	r24, 6
    1fb2:	27 c0       	rjmp	.+78     	; 0x2002 <ConfigSorterArm+0x70>
    1fb4:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <saDirection>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	28 c0       	rjmp	.+80     	; 0x200c <ConfigSorterArm+0x7a>
    1fbc:	22 c0       	rjmp	.+68     	; 0x2002 <ConfigSorterArm+0x70>
>>>>>>> Stashed changes
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
<<<<<<< Updated upstream
    22f2:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <saDirection>
    22f6:	81 11       	cpse	r24, r1
    22f8:	27 c0       	rjmp	.+78     	; 0x2348 <ConfigSorterArm+0x82>
    22fa:	15 c0       	rjmp	.+42     	; 0x2326 <ConfigSorterArm+0x60>
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    22fc:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <saIsRight>
    2300:	81 11       	cpse	r24, r1
    2302:	17 c0       	rjmp	.+46     	; 0x2332 <ConfigSorterArm+0x6c>
    2304:	25 c0       	rjmp	.+74     	; 0x2350 <ConfigSorterArm+0x8a>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    2306:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <saDirection>
    230a:	81 11       	cpse	r24, r1
    230c:	0c c0       	rjmp	.+24     	; 0x2326 <ConfigSorterArm+0x60>
    230e:	3a c0       	rjmp	.+116    	; 0x2384 <ConfigSorterArm+0xbe>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2310:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <saDirection>
    2314:	81 11       	cpse	r24, r1
    2316:	29 c0       	rjmp	.+82     	; 0x236a <ConfigSorterArm+0xa4>
    2318:	24 c0       	rjmp	.+72     	; 0x2362 <ConfigSorterArm+0x9c>
=======
    1fbe:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <saDirection>
    1fc2:	81 11       	cpse	r24, r1
    1fc4:	27 c0       	rjmp	.+78     	; 0x2014 <ConfigSorterArm+0x82>
    1fc6:	15 c0       	rjmp	.+42     	; 0x1ff2 <ConfigSorterArm+0x60>
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    1fc8:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <saIsRight>
    1fcc:	81 11       	cpse	r24, r1
    1fce:	17 c0       	rjmp	.+46     	; 0x1ffe <ConfigSorterArm+0x6c>
    1fd0:	25 c0       	rjmp	.+74     	; 0x201c <ConfigSorterArm+0x8a>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    1fd2:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <saDirection>
    1fd6:	81 11       	cpse	r24, r1
    1fd8:	0c c0       	rjmp	.+24     	; 0x1ff2 <ConfigSorterArm+0x60>
    1fda:	3a c0       	rjmp	.+116    	; 0x2050 <ConfigSorterArm+0xbe>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    1fdc:	80 91 da 23 	lds	r24, 0x23DA	; 0x8023da <saDirection>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	29 c0       	rjmp	.+82     	; 0x2036 <ConfigSorterArm+0xa4>
    1fe4:	24 c0       	rjmp	.+72     	; 0x202e <ConfigSorterArm+0x9c>
>>>>>>> Stashed changes
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
<<<<<<< Updated upstream
    231a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    231e:	88 23       	and	r24, r24
    2320:	54 f1       	brlt	.+84     	; 0x2376 <ConfigSorterArm+0xb0>
=======
    1fe6:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1fea:	88 23       	and	r24, r24
    1fec:	54 f1       	brlt	.+84     	; 0x2042 <ConfigSorterArm+0xb0>
>>>>>>> Stashed changes
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
<<<<<<< Updated upstream
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	08 95       	ret
=======
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	08 95       	ret
>>>>>>> Stashed changes
		saIsRight = false;
		Start = 1;
	}
		
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
<<<<<<< Updated upstream
    2326:	60 e8       	ldi	r22, 0x80	; 128
    2328:	80 e4       	ldi	r24, 0x40	; 64
    232a:	0e 94 12 11 	call	0x2224	; 0x2224 <SaSetInterrupt>
		return 1; // Sorteram mag starten
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	08 95       	ret
	}
	else {
		return 0; // Sorterarm mag niet starten
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	08 95       	ret
=======
    1ff2:	60 e8       	ldi	r22, 0x80	; 128
    1ff4:	80 e4       	ldi	r24, 0x40	; 64
    1ff6:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <SaSetInterrupt>
		return 1; // Sorteram mag starten
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	08 95       	ret
	}
	else {
		return 0; // Sorterarm mag niet starten
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	08 95       	ret
>>>>>>> Stashed changes
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
<<<<<<< Updated upstream
    2336:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    233a:	86 ff       	sbrs	r24, 6
    233c:	da cf       	rjmp	.-76     	; 0x22f2 <ConfigSorterArm+0x2c>
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <ConfigSorterArm+0x82>
=======
    2002:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2006:	86 ff       	sbrs	r24, 6
    2008:	da cf       	rjmp	.-76     	; 0x1fbe <ConfigSorterArm+0x2c>
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <ConfigSorterArm+0x82>
>>>>>>> Stashed changes
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
<<<<<<< Updated upstream
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	80 93 cb 23 	sts	0x23CB, r24	; 0x8023cb <saIsLeft>
    2346:	1c c0       	rjmp	.+56     	; 0x2380 <ConfigSorterArm+0xba>
=======
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <saIsLeft>
    2012:	1c c0       	rjmp	.+56     	; 0x204c <ConfigSorterArm+0xba>
>>>>>>> Stashed changes
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
<<<<<<< Updated upstream
    2348:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <saIsLeft>
    234c:	81 11       	cpse	r24, r1
    234e:	d6 cf       	rjmp	.-84     	; 0x22fc <ConfigSorterArm+0x36>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    2350:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2354:	88 23       	and	r24, r24
    2356:	bc f6       	brge	.-82     	; 0x2306 <ConfigSorterArm+0x40>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2358:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    235c:	88 23       	and	r24, r24
    235e:	c4 f6       	brge	.-80     	; 0x2310 <ConfigSorterArm+0x4a>
    2360:	04 c0       	rjmp	.+8      	; 0x236a <ConfigSorterArm+0xa4>
		saIsRight = true;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 93 ca 23 	sts	0x23CA, r24	; 0x8023ca <saIsRight>
    2368:	0b c0       	rjmp	.+22     	; 0x2380 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    236a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    236e:	86 fd       	sbrc	r24, 6
    2370:	d4 cf       	rjmp	.-88     	; 0x231a <ConfigSorterArm+0x54>
=======
    2014:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <saIsLeft>
    2018:	81 11       	cpse	r24, r1
    201a:	d6 cf       	rjmp	.-84     	; 0x1fc8 <ConfigSorterArm+0x36>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    201c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2020:	88 23       	and	r24, r24
    2022:	bc f6       	brge	.-82     	; 0x1fd2 <ConfigSorterArm+0x40>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2024:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2028:	88 23       	and	r24, r24
    202a:	c4 f6       	brge	.-80     	; 0x1fdc <ConfigSorterArm+0x4a>
    202c:	04 c0       	rjmp	.+8      	; 0x2036 <ConfigSorterArm+0xa4>
		saIsRight = true;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	80 93 d8 23 	sts	0x23D8, r24	; 0x8023d8 <saIsRight>
    2034:	0b c0       	rjmp	.+22     	; 0x204c <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    2036:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    203a:	86 fd       	sbrc	r24, 6
    203c:	d4 cf       	rjmp	.-88     	; 0x1fe6 <ConfigSorterArm+0x54>
>>>>>>> Stashed changes
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
<<<<<<< Updated upstream
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	08 95       	ret
=======
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	08 95       	ret
>>>>>>> Stashed changes
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
		saIsLeft = false;
<<<<<<< Updated upstream
    2376:	10 92 cb 23 	sts	0x23CB, r1	; 0x8023cb <saIsLeft>
		saIsRight = false;
    237a:	10 92 ca 23 	sts	0x23CA, r1	; 0x8023ca <saIsRight>
    237e:	d3 cf       	rjmp	.-90     	; 0x2326 <ConfigSorterArm+0x60>
=======
    2042:	10 92 d9 23 	sts	0x23D9, r1	; 0x8023d9 <saIsLeft>
		saIsRight = false;
    2046:	10 92 d8 23 	sts	0x23D8, r1	; 0x8023d8 <saIsRight>
    204a:	d3 cf       	rjmp	.-90     	; 0x1ff2 <ConfigSorterArm+0x60>
>>>>>>> Stashed changes
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
<<<<<<< Updated upstream
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	08 95       	ret
=======
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	08 95       	ret
>>>>>>> Stashed changes
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
<<<<<<< Updated upstream
    2384:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2388:	88 23       	and	r24, r24
    238a:	5c f7       	brge	.-42     	; 0x2362 <ConfigSorterArm+0x9c>
    238c:	ee cf       	rjmp	.-36     	; 0x236a <ConfigSorterArm+0xa4>

0000238e <MoveSorterArm>:
=======
    2050:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2054:	88 23       	and	r24, r24
    2056:	5c f7       	brge	.-42     	; 0x202e <ConfigSorterArm+0x9c>
    2058:	ee cf       	rjmp	.-36     	; 0x2036 <ConfigSorterArm+0xa4>

0000205a <MoveSorterArm>:
>>>>>>> Stashed changes
}


/* beweeg stepper oneindig */
void MoveSorterArm(bool direction)
{
<<<<<<< Updated upstream
    238e:	ff 92       	push	r15
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	28 97       	sbiw	r28, 0x08	; 8
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	f8 2e       	mov	r15, r24
	if (ConfigSorterArm() == 1){
    23a4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <ConfigSorterArm>
    23a8:	88 23       	and	r24, r24
    23aa:	21 f1       	breq	.+72     	; 0x23f4 <MoveSorterArm+0x66>
		saDirection = direction;
    23ac:	f0 92 cc 23 	sts	0x23CC, r15	; 0x8023cc <saDirection>
=======
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	28 97       	sbiw	r28, 0x08	; 8
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	f8 2e       	mov	r15, r24
	if (ConfigSorterArm() == 1){
    2070:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <ConfigSorterArm>
    2074:	88 23       	and	r24, r24
    2076:	21 f1       	breq	.+72     	; 0x20c0 <MoveSorterArm+0x66>
		saDirection = direction;
    2078:	f0 92 da 23 	sts	0x23DA, r15	; 0x8023da <saDirection>
>>>>>>> Stashed changes
		uint16_t motor_id = SORTER_MOTOR_ID;
		uint16_t motor_speed = 300;
		uint16_t steps = 5000;

		char directiondata[] = { direction };
<<<<<<< Updated upstream
    23b0:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    23b2:	00 eb       	ldi	r16, 0xB0	; 176
    23b4:	1a e0       	ldi	r17, 0x0A	; 10
    23b6:	27 e0       	ldi	r18, 0x07	; 7
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	be 01       	movw	r22, r28
    23bc:	68 5f       	subi	r22, 0xF8	; 248
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	8a e4       	ldi	r24, 0x4A	; 74
    23c2:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    23c6:	be 01       	movw	r22, r28
    23c8:	6f 5f       	subi	r22, 0xFF	; 255
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	87 e0       	ldi	r24, 0x07	; 7
    23ce:	fb 01       	movw	r30, r22
    23d0:	11 92       	st	Z+, r1
    23d2:	8a 95       	dec	r24
    23d4:	e9 f7       	brne	.-6      	; 0x23d0 <MoveSorterArm+0x42>
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	8f 83       	std	Y+7, r24	; 0x07
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	8c e2       	ldi	r24, 0x2C	; 44
    23de:	8a 83       	std	Y+2, r24	; 0x02
    23e0:	83 e1       	ldi	r24, 0x13	; 19
    23e2:	8b 83       	std	Y+3, r24	; 0x03
    23e4:	88 e8       	ldi	r24, 0x88	; 136
    23e6:	8c 83       	std	Y+4, r24	; 0x04
    23e8:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    23ea:	27 e0       	ldi	r18, 0x07	; 7
    23ec:	47 e0       	ldi	r20, 0x07	; 7
    23ee:	86 e4       	ldi	r24, 0x46	; 70
    23f0:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
=======
    207c:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    207e:	00 eb       	ldi	r16, 0xB0	; 176
    2080:	1a e0       	ldi	r17, 0x0A	; 10
    2082:	27 e0       	ldi	r18, 0x07	; 7
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	be 01       	movw	r22, r28
    2088:	68 5f       	subi	r22, 0xF8	; 248
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	8a e4       	ldi	r24, 0x4A	; 74
    208e:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    2092:	be 01       	movw	r22, r28
    2094:	6f 5f       	subi	r22, 0xFF	; 255
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	87 e0       	ldi	r24, 0x07	; 7
    209a:	fb 01       	movw	r30, r22
    209c:	11 92       	st	Z+, r1
    209e:	8a 95       	dec	r24
    20a0:	e9 f7       	brne	.-6      	; 0x209c <MoveSorterArm+0x42>
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	8f 83       	std	Y+7, r24	; 0x07
    20a6:	89 83       	std	Y+1, r24	; 0x01
    20a8:	8c e2       	ldi	r24, 0x2C	; 44
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	83 e1       	ldi	r24, 0x13	; 19
    20ae:	8b 83       	std	Y+3, r24	; 0x03
    20b0:	88 e8       	ldi	r24, 0x88	; 136
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    20b4:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    20b6:	27 e0       	ldi	r18, 0x07	; 7
    20b8:	47 e0       	ldi	r20, 0x07	; 7
    20ba:	86 e4       	ldi	r24, 0x46	; 70
    20bc:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
>>>>>>> Stashed changes
		}

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}
<<<<<<< Updated upstream
    23f4:	28 96       	adiw	r28, 0x08	; 8
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ff 90       	pop	r15
    2404:	08 95       	ret

00002406 <HomeSorterArm>:
=======
    20c0:	28 96       	adiw	r28, 0x08	; 8
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	df 91       	pop	r29
    20c8:	cf 91       	pop	r28
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	ff 90       	pop	r15
    20d0:	08 95       	ret

000020d2 <HomeSorterArm>:
>>>>>>> Stashed changes
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
<<<<<<< Updated upstream
    2406:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <saIsLeft>
    240a:	88 23       	and	r24, r24
    240c:	29 f0       	breq	.+10     	; 0x2418 <HomeSorterArm+0x12>
=======
    20d2:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <saIsLeft>
    20d6:	88 23       	and	r24, r24
    20d8:	29 f0       	breq	.+10     	; 0x20e4 <HomeSorterArm+0x12>
>>>>>>> Stashed changes
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
<<<<<<< Updated upstream
    240e:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <saIsRight>
    2412:	88 23       	and	r24, r24
    2414:	49 f0       	breq	.+18     	; 0x2428 <HomeSorterArm+0x22>
    2416:	08 95       	ret
=======
    20da:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <saIsRight>
    20de:	88 23       	and	r24, r24
    20e0:	49 f0       	breq	.+18     	; 0x20f4 <HomeSorterArm+0x22>
    20e2:	08 95       	ret
>>>>>>> Stashed changes


void HomeSorterArm()
{
	while (saIsLeft == false) {
		MoveSorterArm(0);
<<<<<<< Updated upstream
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	0e 94 c7 11 	call	0x238e	; 0x238e <MoveSorterArm>
=======
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	0e 94 2d 10 	call	0x205a	; 0x205a <MoveSorterArm>
>>>>>>> Stashed changes
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
<<<<<<< Updated upstream
    241e:	80 91 cb 23 	lds	r24, 0x23CB	; 0x8023cb <saIsLeft>
    2422:	88 23       	and	r24, r24
    2424:	c9 f3       	breq	.-14     	; 0x2418 <HomeSorterArm+0x12>
    2426:	f3 cf       	rjmp	.-26     	; 0x240e <HomeSorterArm+0x8>
=======
    20ea:	80 91 d9 23 	lds	r24, 0x23D9	; 0x8023d9 <saIsLeft>
    20ee:	88 23       	and	r24, r24
    20f0:	c9 f3       	breq	.-14     	; 0x20e4 <HomeSorterArm+0x12>
    20f2:	f3 cf       	rjmp	.-26     	; 0x20da <HomeSorterArm+0x8>
>>>>>>> Stashed changes
	}
	


	while (saIsRight == false) {
		MoveSorterArm(1);
<<<<<<< Updated upstream
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 c7 11 	call	0x238e	; 0x238e <MoveSorterArm>
=======
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 2d 10 	call	0x205a	; 0x205a <MoveSorterArm>
>>>>>>> Stashed changes
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
<<<<<<< Updated upstream
    242e:	80 91 ca 23 	lds	r24, 0x23CA	; 0x8023ca <saIsRight>
    2432:	88 23       	and	r24, r24
    2434:	c9 f3       	breq	.-14     	; 0x2428 <HomeSorterArm+0x22>
    2436:	08 95       	ret

00002438 <MoveSorterArmTo>:

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
=======
    20fa:	80 91 d8 23 	lds	r24, 0x23D8	; 0x8023d8 <saIsRight>
    20fe:	88 23       	and	r24, r24
    2100:	c9 f3       	breq	.-14     	; 0x20f4 <HomeSorterArm+0x22>
    2102:	08 95       	ret

00002104 <MoveSorterArmDistance>:
			sorterarmPosition = toPosition;
		}
	}
>>>>>>> Stashed changes
}

void MoveSorterArmTo(uint16_t toPosition){
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	28 97       	sbiw	r28, 0x08	; 8
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	8c 01       	movw	r16, r24
	bool direction;
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
    2452:	0e 94 63 11 	call	0x22c6	; 0x22c6 <ConfigSorterArm>
    2456:	88 23       	and	r24, r24
    2458:	69 f1       	breq	.+90     	; 0x24b4 <MoveSorterArmTo+0x7c>
	
		if (toPosition <= sa1.position){
    245a:	01 15       	cp	r16, r1
    245c:	11 05       	cpc	r17, r1
    245e:	31 f0       	breq	.+12     	; 0x246c <MoveSorterArmTo+0x34>
			direction = 1;
			steps = toPosition - sa1.position;
		}
		else if (toPosition >= sa1.position){
			direction = 0;
			steps = sa1.position - toPosition;
    2460:	ee 24       	eor	r14, r14
    2462:	ff 24       	eor	r15, r15
    2464:	e0 1a       	sub	r14, r16
    2466:	f1 0a       	sbc	r15, r17
		if (toPosition <= sa1.position){
			direction = 1;
			steps = toPosition - sa1.position;
		}
		else if (toPosition >= sa1.position){
			direction = 0;
    2468:	d1 2c       	mov	r13, r1
    246a:	04 c0       	rjmp	.+8      	; 0x2474 <MoveSorterArmTo+0x3c>
	
	if (ConfigSorterArm() == 1){
	
		if (toPosition <= sa1.position){
			direction = 1;
			steps = toPosition - sa1.position;
    246c:	e1 2c       	mov	r14, r1
    246e:	f1 2c       	mov	r15, r1
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
	
		if (toPosition <= sa1.position){
			direction = 1;
    2470:	dd 24       	eor	r13, r13
    2472:	d3 94       	inc	r13
		}
	
		uint16_t motor_id = SORTER_MOTOR_ID;
		uint16_t motor_speed = 400;
	
		char directiondata[] = { direction };
    2474:	d8 86       	std	Y+8, r13	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2476:	00 eb       	ldi	r16, 0xB0	; 176
    2478:	1a e0       	ldi	r17, 0x0A	; 10
    247a:	27 e0       	ldi	r18, 0x07	; 7
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	be 01       	movw	r22, r28
    2480:	68 5f       	subi	r22, 0xF8	; 248
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8a e4       	ldi	r24, 0x4A	; 74
    2486:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    248a:	be 01       	movw	r22, r28
    248c:	6f 5f       	subi	r22, 0xFF	; 255
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	87 e0       	ldi	r24, 0x07	; 7
    2492:	fb 01       	movw	r30, r22
    2494:	11 92       	st	Z+, r1
    2496:	8a 95       	dec	r24
    2498:	e9 f7       	brne	.-6      	; 0x2494 <MoveSorterArmTo+0x5c>
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	8f 83       	std	Y+7, r24	; 0x07
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	80 e9       	ldi	r24, 0x90	; 144
    24a2:	8a 83       	std	Y+2, r24	; 0x02
    24a4:	fb 82       	std	Y+3, r15	; 0x03
    24a6:	ec 82       	std	Y+4, r14	; 0x04
    24a8:	dd 82       	std	Y+5, r13	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    24aa:	27 e0       	ldi	r18, 0x07	; 7
    24ac:	47 e0       	ldi	r20, 0x07	; 7
    24ae:	86 e4       	ldi	r24, 0x46	; 70
    24b0:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    24b4:	28 96       	adiw	r28, 0x08	; 8
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	1f 91       	pop	r17
    24c0:	0f 91       	pop	r16
    24c2:	ff 90       	pop	r15
    24c4:	ef 90       	pop	r14
    24c6:	df 90       	pop	r13
    24c8:	08 95       	ret

000024ca <MoveSorterArmDistance>:

void MoveSorterArmDistance(bool direction, uint16_t steps){
<<<<<<< Updated upstream
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	28 97       	sbiw	r28, 0x08	; 8
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	de bf       	out	0x3e, r29	; 62
    24e2:	f8 2e       	mov	r15, r24
    24e4:	e6 2e       	mov	r14, r22
    24e6:	d7 2e       	mov	r13, r23
	
	if (ConfigSorterArm() == 1){
    24e8:	0e 94 63 11 	call	0x22c6	; 0x22c6 <ConfigSorterArm>
    24ec:	88 23       	and	r24, r24
    24ee:	01 f1       	breq	.+64     	; 0x2530 <MoveSorterArmDistance+0x66>
=======
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	28 97       	sbiw	r28, 0x08	; 8
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	f8 2e       	mov	r15, r24
    211e:	e6 2e       	mov	r14, r22
    2120:	d7 2e       	mov	r13, r23
	
	if (ConfigSorterArm() == 1){
    2122:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <ConfigSorterArm>
    2126:	88 23       	and	r24, r24
    2128:	01 f1       	breq	.+64     	; 0x216a <MoveSorterArmDistance+0x66>
>>>>>>> Stashed changes
	uint16_t motor_id = SORTER_MOTOR_ID;
	uint16_t motor_speed = 300;

	char directiondata[] = { direction };
<<<<<<< Updated upstream
    24f0:	f8 86       	std	Y+8, r15	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    24f2:	00 eb       	ldi	r16, 0xB0	; 176
    24f4:	1a e0       	ldi	r17, 0x0A	; 10
    24f6:	27 e0       	ldi	r18, 0x07	; 7
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	be 01       	movw	r22, r28
    24fc:	68 5f       	subi	r22, 0xF8	; 248
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	8a e4       	ldi	r24, 0x4A	; 74
    2502:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    2506:	be 01       	movw	r22, r28
    2508:	6f 5f       	subi	r22, 0xFF	; 255
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	87 e0       	ldi	r24, 0x07	; 7
    250e:	fb 01       	movw	r30, r22
    2510:	11 92       	st	Z+, r1
    2512:	8a 95       	dec	r24
    2514:	e9 f7       	brne	.-6      	; 0x2510 <MoveSorterArmDistance+0x46>
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	8f 83       	std	Y+7, r24	; 0x07
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	8c e2       	ldi	r24, 0x2C	; 44
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	db 82       	std	Y+3, r13	; 0x03
    2522:	ec 82       	std	Y+4, r14	; 0x04
    2524:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2526:	27 e0       	ldi	r18, 0x07	; 7
    2528:	47 e0       	ldi	r20, 0x07	; 7
    252a:	86 e4       	ldi	r24, 0x46	; 70
    252c:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    2530:	28 96       	adiw	r28, 0x08	; 8
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	de bf       	out	0x3e, r29	; 62
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	1f 91       	pop	r17
    253c:	0f 91       	pop	r16
    253e:	ff 90       	pop	r15
    2540:	ef 90       	pop	r14
    2542:	df 90       	pop	r13
    2544:	08 95       	ret

00002546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>:
=======
    212a:	f8 86       	std	Y+8, r15	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    212c:	00 eb       	ldi	r16, 0xB0	; 176
    212e:	1a e0       	ldi	r17, 0x0A	; 10
    2130:	27 e0       	ldi	r18, 0x07	; 7
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	be 01       	movw	r22, r28
    2136:	68 5f       	subi	r22, 0xF8	; 248
    2138:	7f 4f       	sbci	r23, 0xFF	; 255
    213a:	8a e4       	ldi	r24, 0x4A	; 74
    213c:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    2140:	be 01       	movw	r22, r28
    2142:	6f 5f       	subi	r22, 0xFF	; 255
    2144:	7f 4f       	sbci	r23, 0xFF	; 255
    2146:	87 e0       	ldi	r24, 0x07	; 7
    2148:	fb 01       	movw	r30, r22
    214a:	11 92       	st	Z+, r1
    214c:	8a 95       	dec	r24
    214e:	e9 f7       	brne	.-6      	; 0x214a <MoveSorterArmDistance+0x46>
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	8f 83       	std	Y+7, r24	; 0x07
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	8c e2       	ldi	r24, 0x2C	; 44
    2158:	8a 83       	std	Y+2, r24	; 0x02
    215a:	db 82       	std	Y+3, r13	; 0x03
    215c:	ec 82       	std	Y+4, r14	; 0x04
    215e:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2160:	27 e0       	ldi	r18, 0x07	; 7
    2162:	47 e0       	ldi	r20, 0x07	; 7
    2164:	86 e4       	ldi	r24, 0x46	; 70
    2166:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    216a:	28 96       	adiw	r28, 0x08	; 8
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	df 91       	pop	r29
    2172:	cf 91       	pop	r28
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	df 90       	pop	r13
    217e:	08 95       	ret

00002180 <MoveSorterArmTo>:

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}

void MoveSorterArmTo(uint16_t toPosition){
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	ec 01       	movw	r28, r24
	bool direction = 0;
	uint16_t steps = 0;
		
	if (ConfigSorterArm() == 1){
    2186:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <ConfigSorterArm>
    218a:	88 23       	and	r24, r24
    218c:	19 f1       	breq	.+70     	; 0x21d4 <MoveSorterArmTo+0x54>
		if(toPosition >= sa1.minpos || toPosition <= sa1.maxpos){
			if (toPosition < sorterarmPosition){
    218e:	80 91 db 23 	lds	r24, 0x23DB	; 0x8023db <sorterarmPosition>
    2192:	90 91 dc 23 	lds	r25, 0x23DC	; 0x8023dc <sorterarmPosition+0x1>
    2196:	c8 17       	cp	r28, r24
    2198:	d9 07       	cpc	r29, r25
    219a:	40 f4       	brcc	.+16     	; 0x21ac <MoveSorterArmTo+0x2c>
				direction = 1;
				steps = toPosition * 200;
    219c:	88 ec       	ldi	r24, 0xC8	; 200
    219e:	8c 9f       	mul	r24, r28
    21a0:	b0 01       	movw	r22, r0
    21a2:	8d 9f       	mul	r24, r29
    21a4:	70 0d       	add	r23, r0
    21a6:	11 24       	eor	r1, r1
	uint16_t steps = 0;
		
	if (ConfigSorterArm() == 1){
		if(toPosition >= sa1.minpos || toPosition <= sa1.maxpos){
			if (toPosition < sorterarmPosition){
				direction = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	0e c0       	rjmp	.+28     	; 0x21c8 <MoveSorterArmTo+0x48>
				steps = toPosition * 200;
				//steps = toPosition - sa1.position;
			}
			else if (toPosition > sorterarmPosition){
    21ac:	8c 17       	cp	r24, r28
    21ae:	9d 07       	cpc	r25, r29
    21b0:	40 f4       	brcc	.+16     	; 0x21c2 <MoveSorterArmTo+0x42>
				direction = 0;
				steps = toPosition * 200;
    21b2:	88 ec       	ldi	r24, 0xC8	; 200
    21b4:	8c 9f       	mul	r24, r28
    21b6:	b0 01       	movw	r22, r0
    21b8:	8d 9f       	mul	r24, r29
    21ba:	70 0d       	add	r23, r0
    21bc:	11 24       	eor	r1, r1
				direction = 1;
				steps = toPosition * 200;
				//steps = toPosition - sa1.position;
			}
			else if (toPosition > sorterarmPosition){
				direction = 0;
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	03 c0       	rjmp	.+6      	; 0x21c8 <MoveSorterArmTo+0x48>
				steps = toPosition * 200;
				//steps = sa1.position - toPosition;
			}else{
				steps = 0;
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}

void MoveSorterArmTo(uint16_t toPosition){
	bool direction = 0;
    21c6:	80 e0       	ldi	r24, 0x00	; 0
				//steps = sa1.position - toPosition;
			}else{
				steps = 0;
			}
		
			MoveSorterArmDistance(direction, steps);
    21c8:	0e 94 82 10 	call	0x2104	; 0x2104 <MoveSorterArmDistance>
			sorterarmPosition = toPosition;
    21cc:	c0 93 db 23 	sts	0x23DB, r28	; 0x8023db <sorterarmPosition>
    21d0:	d0 93 dc 23 	sts	0x23DC, r29	; 0x8023dc <sorterarmPosition+0x1>
		}
	}
}
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <_Z20stepperWriteRegisterhPKchhR12USART_struct>:
>>>>>>> Stashed changes
#include "Stepperdriver.h"



void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
<<<<<<< Updated upstream
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	d8 2e       	mov	r13, r24
    2558:	7b 01       	movw	r14, r22
    255a:	d4 2f       	mov	r29, r20
    255c:	c2 2e       	mov	r12, r18
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
    255e:	f8 94       	cli
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
    2560:	cc ef       	ldi	r28, 0xFC	; 252
    2562:	c8 1b       	sub	r28, r24
    2564:	c4 1b       	sub	r28, r20
    2566:	c2 1b       	sub	r28, r18
	for(uint8_t i = 0; i < length; i++)
    2568:	44 23       	and	r20, r20
    256a:	69 f0       	breq	.+26     	; 0x2586 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x40>
    256c:	fb 01       	movw	r30, r22
    256e:	2f ef       	ldi	r18, 0xFF	; 255
    2570:	24 0f       	add	r18, r20
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	2f 5f       	subi	r18, 0xFF	; 255
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	26 0f       	add	r18, r22
    257a:	37 1f       	adc	r19, r23
	{
		checksum = checksum - data[i];
    257c:	81 91       	ld	r24, Z+
    257e:	c8 1b       	sub	r28, r24
=======
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	d8 2e       	mov	r13, r24
    21ec:	7b 01       	movw	r14, r22
    21ee:	d4 2f       	mov	r29, r20
    21f0:	c2 2e       	mov	r12, r18
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
    21f2:	f8 94       	cli
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
    21f4:	cc ef       	ldi	r28, 0xFC	; 252
    21f6:	c8 1b       	sub	r28, r24
    21f8:	c4 1b       	sub	r28, r20
    21fa:	c2 1b       	sub	r28, r18
	for(uint8_t i = 0; i < length; i++)
    21fc:	44 23       	and	r20, r20
    21fe:	69 f0       	breq	.+26     	; 0x221a <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x40>
    2200:	fb 01       	movw	r30, r22
    2202:	2f ef       	ldi	r18, 0xFF	; 255
    2204:	24 0f       	add	r18, r20
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	2f 5f       	subi	r18, 0xFF	; 255
    220a:	3f 4f       	sbci	r19, 0xFF	; 255
    220c:	26 0f       	add	r18, r22
    220e:	37 1f       	adc	r19, r23
	{
		checksum = checksum - data[i];
    2210:	81 91       	ld	r24, Z+
    2212:	c8 1b       	sub	r28, r24
>>>>>>> Stashed changes

void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
	for(uint8_t i = 0; i < length; i++)
<<<<<<< Updated upstream
    2580:	e2 17       	cp	r30, r18
    2582:	f3 07       	cpc	r31, r19
    2584:	d9 f7       	brne	.-10     	; 0x257c <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x36>
=======
    2214:	e2 17       	cp	r30, r18
    2216:	f3 07       	cpc	r31, r19
    2218:	d9 f7       	brne	.-10     	; 0x2210 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x36>
>>>>>>> Stashed changes
	{
		checksum = checksum - data[i];
	}
	
	USART_Transmit(USART, 0xFF); //send 0xFFFF
<<<<<<< Updated upstream
    2586:	6f ef       	ldi	r22, 0xFF	; 255
    2588:	c8 01       	movw	r24, r16
    258a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0xFF);
    258e:	6f ef       	ldi	r22, 0xFF	; 255
    2590:	c8 01       	movw	r24, r16
    2592:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, motorID); //send motorID
    2596:	6c 2d       	mov	r22, r12
    2598:	c8 01       	movw	r24, r16
    259a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, length+3); //transmit message length (register instruction+address+data+checksum)
    259e:	63 e0       	ldi	r22, 0x03	; 3
    25a0:	6d 0f       	add	r22, r29
    25a2:	c8 01       	movw	r24, r16
    25a4:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0x00); // instruction (not yet implemented)
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	c8 01       	movw	r24, r16
    25ac:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, address); // send address to start writing
    25b0:	6d 2d       	mov	r22, r13
    25b2:	c8 01       	movw	r24, r16
    25b4:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, data, length); //send data to write to registers
    25b8:	4d 2f       	mov	r20, r29
    25ba:	b7 01       	movw	r22, r14
    25bc:	c8 01       	movw	r24, r16
    25be:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z14USART_TransmitR12USART_structPKch>
	USART_Transmit(USART, checksum);
    25c2:	6c 2f       	mov	r22, r28
    25c4:	c8 01       	movw	r24, r16
    25c6:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
    25ca:	2f e7       	ldi	r18, 0x7F	; 127
    25cc:	82 e3       	ldi	r24, 0x32	; 50
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	21 50       	subi	r18, 0x01	; 1
    25d2:	80 40       	sbci	r24, 0x00	; 0
    25d4:	90 40       	sbci	r25, 0x00	; 0
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x8a>
    25d8:	00 c0       	rjmp	.+0      	; 0x25da <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x94>
    25da:	00 00       	nop

	_delay_ms(30);
	sei(); //global interrupt enable
    25dc:	78 94       	sei
}
    25de:	df 91       	pop	r29
    25e0:	cf 91       	pop	r28
    25e2:	1f 91       	pop	r17
    25e4:	0f 91       	pop	r16
    25e6:	ff 90       	pop	r15
    25e8:	ef 90       	pop	r14
    25ea:	df 90       	pop	r13
    25ec:	cf 90       	pop	r12
    25ee:	08 95       	ret

000025f0 <_Z22ChangeDirectionStepperbh>:
=======
    221a:	6f ef       	ldi	r22, 0xFF	; 255
    221c:	c8 01       	movw	r24, r16
    221e:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0xFF);
    2222:	6f ef       	ldi	r22, 0xFF	; 255
    2224:	c8 01       	movw	r24, r16
    2226:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, motorID); //send motorID
    222a:	6c 2d       	mov	r22, r12
    222c:	c8 01       	movw	r24, r16
    222e:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, length+3); //transmit message length (register instruction+address+data+checksum)
    2232:	63 e0       	ldi	r22, 0x03	; 3
    2234:	6d 0f       	add	r22, r29
    2236:	c8 01       	movw	r24, r16
    2238:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0x00); // instruction (not yet implemented)
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	c8 01       	movw	r24, r16
    2240:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, address); // send address to start writing
    2244:	6d 2d       	mov	r22, r13
    2246:	c8 01       	movw	r24, r16
    2248:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, data, length); //send data to write to registers
    224c:	4d 2f       	mov	r20, r29
    224e:	b7 01       	movw	r22, r14
    2250:	c8 01       	movw	r24, r16
    2252:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z14USART_TransmitR12USART_structPKch>
	USART_Transmit(USART, checksum);
    2256:	6c 2f       	mov	r22, r28
    2258:	c8 01       	movw	r24, r16
    225a:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
    225e:	2f e7       	ldi	r18, 0x7F	; 127
    2260:	82 e3       	ldi	r24, 0x32	; 50
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	21 50       	subi	r18, 0x01	; 1
    2266:	80 40       	sbci	r24, 0x00	; 0
    2268:	90 40       	sbci	r25, 0x00	; 0
    226a:	e1 f7       	brne	.-8      	; 0x2264 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x8a>
    226c:	00 c0       	rjmp	.+0      	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x94>
    226e:	00 00       	nop

	_delay_ms(30);
	sei(); //global interrupt enable
    2270:	78 94       	sei
}
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	df 90       	pop	r13
    2280:	cf 90       	pop	r12
    2282:	08 95       	ret

00002284 <_Z22ChangeDirectionStepperbh>:
>>>>>>> Stashed changes


void ChangeDirectionStepper(bool direction, uint8_t motor_id)
{
<<<<<<< Updated upstream
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	1f 92       	push	r1
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	26 2f       	mov	r18, r22
	char directiondata[]={direction};
    2600:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    2602:	00 eb       	ldi	r16, 0xB0	; 176
    2604:	1a e0       	ldi	r17, 0x0A	; 10
    2606:	41 e0       	ldi	r20, 0x01	; 1
    2608:	be 01       	movw	r22, r28
    260a:	6f 5f       	subi	r22, 0xFF	; 255
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	8a e4       	ldi	r24, 0x4A	; 74
    2610:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2614:	0f 90       	pop	r0
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <_Z8MoveBeltbji>:
=======
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	1f 92       	push	r1
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	26 2f       	mov	r18, r22
	char directiondata[]={direction};
    2294:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    2296:	00 eb       	ldi	r16, 0xB0	; 176
    2298:	1a e0       	ldi	r17, 0x0A	; 10
    229a:	41 e0       	ldi	r20, 0x01	; 1
    229c:	be 01       	movw	r22, r28
    229e:	6f 5f       	subi	r22, 0xFF	; 255
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	8a e4       	ldi	r24, 0x4A	; 74
    22a4:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	08 95       	ret

000022b4 <_Z8MoveBeltbji>:
>>>>>>> Stashed changes


void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
<<<<<<< Updated upstream
    2620:	cf 92       	push	r12
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	28 97       	sbiw	r28, 0x08	; 8
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
    263a:	62 30       	cpi	r22, 0x02	; 2
    263c:	71 05       	cpc	r23, r1
    263e:	61 f0       	breq	.+24     	; 0x2658 <_Z8MoveBeltbji+0x38>
    2640:	20 f4       	brcc	.+8      	; 0x264a <_Z8MoveBeltbji+0x2a>
    2642:	61 30       	cpi	r22, 0x01	; 1
    2644:	71 05       	cpc	r23, r1
    2646:	a9 f0       	breq	.+42     	; 0x2672 <_Z8MoveBeltbji+0x52>
    2648:	39 c0       	rjmp	.+114    	; 0x26bc <_Z8MoveBeltbji+0x9c>
    264a:	63 30       	cpi	r22, 0x03	; 3
    264c:	71 05       	cpc	r23, r1
    264e:	41 f0       	breq	.+16     	; 0x2660 <_Z8MoveBeltbji+0x40>
    2650:	64 30       	cpi	r22, 0x04	; 4
    2652:	71 05       	cpc	r23, r1
    2654:	51 f0       	breq	.+20     	; 0x266a <_Z8MoveBeltbji+0x4a>
    2656:	32 c0       	rjmp	.+100    	; 0x26bc <_Z8MoveBeltbji+0x9c>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    2658:	68 94       	set
    265a:	cc 24       	eor	r12, r12
    265c:	c1 f8       	bld	r12, 1
    265e:	0b c0       	rjmp	.+22     	; 0x2676 <_Z8MoveBeltbji+0x56>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    2660:	0f 2e       	mov	r0, r31
    2662:	f3 e0       	ldi	r31, 0x03	; 3
    2664:	cf 2e       	mov	r12, r31
    2666:	f0 2d       	mov	r31, r0
    2668:	06 c0       	rjmp	.+12     	; 0x2676 <_Z8MoveBeltbji+0x56>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    266a:	68 94       	set
    266c:	cc 24       	eor	r12, r12
    266e:	c2 f8       	bld	r12, 2
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <_Z8MoveBeltbji+0x56>
=======
    22b4:	cf 92       	push	r12
    22b6:	df 92       	push	r13
    22b8:	ef 92       	push	r14
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	28 97       	sbiw	r28, 0x08	; 8
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
    22ce:	62 30       	cpi	r22, 0x02	; 2
    22d0:	71 05       	cpc	r23, r1
    22d2:	61 f0       	breq	.+24     	; 0x22ec <_Z8MoveBeltbji+0x38>
    22d4:	20 f4       	brcc	.+8      	; 0x22de <_Z8MoveBeltbji+0x2a>
    22d6:	61 30       	cpi	r22, 0x01	; 1
    22d8:	71 05       	cpc	r23, r1
    22da:	a9 f0       	breq	.+42     	; 0x2306 <_Z8MoveBeltbji+0x52>
    22dc:	39 c0       	rjmp	.+114    	; 0x2350 <_Z8MoveBeltbji+0x9c>
    22de:	63 30       	cpi	r22, 0x03	; 3
    22e0:	71 05       	cpc	r23, r1
    22e2:	41 f0       	breq	.+16     	; 0x22f4 <_Z8MoveBeltbji+0x40>
    22e4:	64 30       	cpi	r22, 0x04	; 4
    22e6:	71 05       	cpc	r23, r1
    22e8:	51 f0       	breq	.+20     	; 0x22fe <_Z8MoveBeltbji+0x4a>
    22ea:	32 c0       	rjmp	.+100    	; 0x2350 <_Z8MoveBeltbji+0x9c>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    22ec:	68 94       	set
    22ee:	cc 24       	eor	r12, r12
    22f0:	c1 f8       	bld	r12, 1
    22f2:	0b c0       	rjmp	.+22     	; 0x230a <_Z8MoveBeltbji+0x56>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    22f4:	0f 2e       	mov	r0, r31
    22f6:	f3 e0       	ldi	r31, 0x03	; 3
    22f8:	cf 2e       	mov	r12, r31
    22fa:	f0 2d       	mov	r31, r0
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <_Z8MoveBeltbji+0x56>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    22fe:	68 94       	set
    2300:	cc 24       	eor	r12, r12
    2302:	c2 f8       	bld	r12, 2
    2304:	02 c0       	rjmp	.+4      	; 0x230a <_Z8MoveBeltbji+0x56>
>>>>>>> Stashed changes
void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
<<<<<<< Updated upstream
    2672:	cc 24       	eor	r12, r12
    2674:	c3 94       	inc	r12
    2676:	d5 2e       	mov	r13, r21
    2678:	e4 2e       	mov	r14, r20
    267a:	f8 2e       	mov	r15, r24
=======
    2306:	cc 24       	eor	r12, r12
    2308:	c3 94       	inc	r12
    230a:	d5 2e       	mov	r13, r21
    230c:	e4 2e       	mov	r14, r20
    230e:	f8 2e       	mov	r15, r24
>>>>>>> Stashed changes
		default: return;
	}
	//Convert speed from uint16_t to byte array:
	char speedData[2]={(char)((speed>>8)&0xff), (char)(speed&0xff)};
	//Convert bool to byte array, could this be a typecast instead (and would that make a difference)
	char directiondata[]={direction};
<<<<<<< Updated upstream
    267c:	89 83       	std	Y+1, r24	; 0x01
	//Write direction data to the direction register
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    267e:	00 eb       	ldi	r16, 0xB0	; 176
    2680:	1a e0       	ldi	r17, 0x0A	; 10
    2682:	2c 2d       	mov	r18, r12
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	be 01       	movw	r22, r28
    2688:	6f 5f       	subi	r22, 0xFF	; 255
    268a:	7f 4f       	sbci	r23, 0xFF	; 255
    268c:	8a e4       	ldi	r24, 0x4A	; 74
    268e:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	//Write the remaining data:
	char data[]={speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON};
    2692:	be 01       	movw	r22, r28
    2694:	6e 5f       	subi	r22, 0xFE	; 254
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	87 e0       	ldi	r24, 0x07	; 7
    269a:	fb 01       	movw	r30, r22
    269c:	11 92       	st	Z+, r1
    269e:	8a 95       	dec	r24
    26a0:	e9 f7       	brne	.-6      	; 0x269c <_Z8MoveBeltbji+0x7c>
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	8c 83       	std	Y+4, r24	; 0x04
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	88 87       	std	Y+8, r24	; 0x08
    26ac:	da 82       	std	Y+2, r13	; 0x02
    26ae:	eb 82       	std	Y+3, r14	; 0x03
    26b0:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),motor_id,USARTE1); //This write operation also contains direction data? Why is the other one still needed?
    26b2:	2c 2d       	mov	r18, r12
    26b4:	47 e0       	ldi	r20, 0x07	; 7
    26b6:	86 e4       	ldi	r24, 0x46	; 70
    26b8:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    26bc:	28 96       	adiw	r28, 0x08	; 8
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	1f 91       	pop	r17
    26c8:	0f 91       	pop	r16
    26ca:	ff 90       	pop	r15
    26cc:	ef 90       	pop	r14
    26ce:	df 90       	pop	r13
    26d0:	cf 90       	pop	r12
    26d2:	08 95       	ret

000026d4 <_Z8StopBeltj>:
=======
    2310:	89 83       	std	Y+1, r24	; 0x01
	//Write direction data to the direction register
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    2312:	00 eb       	ldi	r16, 0xB0	; 176
    2314:	1a e0       	ldi	r17, 0x0A	; 10
    2316:	2c 2d       	mov	r18, r12
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	be 01       	movw	r22, r28
    231c:	6f 5f       	subi	r22, 0xFF	; 255
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8a e4       	ldi	r24, 0x4A	; 74
    2322:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	//Write the remaining data:
	char data[]={speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON};
    2326:	be 01       	movw	r22, r28
    2328:	6e 5f       	subi	r22, 0xFE	; 254
    232a:	7f 4f       	sbci	r23, 0xFF	; 255
    232c:	87 e0       	ldi	r24, 0x07	; 7
    232e:	fb 01       	movw	r30, r22
    2330:	11 92       	st	Z+, r1
    2332:	8a 95       	dec	r24
    2334:	e9 f7       	brne	.-6      	; 0x2330 <_Z8MoveBeltbji+0x7c>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	8c 83       	std	Y+4, r24	; 0x04
    233a:	8d 83       	std	Y+5, r24	; 0x05
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	88 87       	std	Y+8, r24	; 0x08
    2340:	da 82       	std	Y+2, r13	; 0x02
    2342:	eb 82       	std	Y+3, r14	; 0x03
    2344:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),motor_id,USARTE1); //This write operation also contains direction data? Why is the other one still needed?
    2346:	2c 2d       	mov	r18, r12
    2348:	47 e0       	ldi	r20, 0x07	; 7
    234a:	86 e4       	ldi	r24, 0x46	; 70
    234c:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2350:	28 96       	adiw	r28, 0x08	; 8
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	df 90       	pop	r13
    2364:	cf 90       	pop	r12
    2366:	08 95       	ret

00002368 <_Z8StopBeltj>:
>>>>>>> Stashed changes


void StopBelt(uint16_t i)
{
<<<<<<< Updated upstream
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	1f 92       	push	r1
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    26e2:	82 30       	cpi	r24, 0x02	; 2
    26e4:	91 05       	cpc	r25, r1
    26e6:	51 f0       	breq	.+20     	; 0x26fc <_Z8StopBeltj+0x28>
    26e8:	18 f4       	brcc	.+6      	; 0x26f0 <_Z8StopBeltj+0x1c>
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	69 f0       	breq	.+26     	; 0x2708 <_Z8StopBeltj+0x34>
    26ee:	17 c0       	rjmp	.+46     	; 0x271e <_Z8StopBeltj+0x4a>
    26f0:	83 30       	cpi	r24, 0x03	; 3
    26f2:	91 05       	cpc	r25, r1
    26f4:	29 f0       	breq	.+10     	; 0x2700 <_Z8StopBeltj+0x2c>
    26f6:	04 97       	sbiw	r24, 0x04	; 4
    26f8:	29 f0       	breq	.+10     	; 0x2704 <_Z8StopBeltj+0x30>
    26fa:	11 c0       	rjmp	.+34     	; 0x271e <_Z8StopBeltj+0x4a>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    26fc:	22 e0       	ldi	r18, 0x02	; 2
    26fe:	05 c0       	rjmp	.+10     	; 0x270a <_Z8StopBeltj+0x36>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    2700:	23 e0       	ldi	r18, 0x03	; 3
    2702:	03 c0       	rjmp	.+6      	; 0x270a <_Z8StopBeltj+0x36>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    2704:	24 e0       	ldi	r18, 0x04	; 4
    2706:	01 c0       	rjmp	.+2      	; 0x270a <_Z8StopBeltj+0x36>
=======
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	1f 92       	push	r1
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	91 05       	cpc	r25, r1
    237a:	51 f0       	breq	.+20     	; 0x2390 <_Z8StopBeltj+0x28>
    237c:	18 f4       	brcc	.+6      	; 0x2384 <_Z8StopBeltj+0x1c>
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	69 f0       	breq	.+26     	; 0x239c <_Z8StopBeltj+0x34>
    2382:	17 c0       	rjmp	.+46     	; 0x23b2 <_Z8StopBeltj+0x4a>
    2384:	83 30       	cpi	r24, 0x03	; 3
    2386:	91 05       	cpc	r25, r1
    2388:	29 f0       	breq	.+10     	; 0x2394 <_Z8StopBeltj+0x2c>
    238a:	04 97       	sbiw	r24, 0x04	; 4
    238c:	29 f0       	breq	.+10     	; 0x2398 <_Z8StopBeltj+0x30>
    238e:	11 c0       	rjmp	.+34     	; 0x23b2 <_Z8StopBeltj+0x4a>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    2390:	22 e0       	ldi	r18, 0x02	; 2
    2392:	05 c0       	rjmp	.+10     	; 0x239e <_Z8StopBeltj+0x36>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    2394:	23 e0       	ldi	r18, 0x03	; 3
    2396:	03 c0       	rjmp	.+6      	; 0x239e <_Z8StopBeltj+0x36>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    2398:	24 e0       	ldi	r18, 0x04	; 4
    239a:	01 c0       	rjmp	.+2      	; 0x239e <_Z8StopBeltj+0x36>
>>>>>>> Stashed changes

void StopBelt(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
<<<<<<< Updated upstream
    2708:	21 e0       	ldi	r18, 0x01	; 1
=======
    239c:	21 e0       	ldi	r18, 0x01	; 1
>>>>>>> Stashed changes
		case 2: motor_id = BELT_2_MOTOR_ID; break;
		case 3: motor_id = BELT_3_MOTOR_ID; break;
		case 4: motor_id = BELT_4_MOTOR_ID; break;
		default: return;
	}
	char data[]={MOTOR_OFF};
<<<<<<< Updated upstream
    270a:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data)/sizeof(*data),motor_id,USARTE1);
    270c:	00 eb       	ldi	r16, 0xB0	; 176
    270e:	1a e0       	ldi	r17, 0x0A	; 10
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	be 01       	movw	r22, r28
    2714:	6f 5f       	subi	r22, 0xFF	; 255
    2716:	7f 4f       	sbci	r23, 0xFF	; 255
    2718:	8c e4       	ldi	r24, 0x4C	; 76
    271a:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	08 95       	ret

0000272a <_Z13MoveTurntablebji>:
=======
    239e:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data)/sizeof(*data),motor_id,USARTE1);
    23a0:	00 eb       	ldi	r16, 0xB0	; 176
    23a2:	1a e0       	ldi	r17, 0x0A	; 10
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	be 01       	movw	r22, r28
    23a8:	6f 5f       	subi	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	8c e4       	ldi	r24, 0x4C	; 76
    23ae:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    23b2:	0f 90       	pop	r0
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <_Z13MoveTurntablebji>:
>>>>>>> Stashed changes


void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
<<<<<<< Updated upstream
    272a:	cf 92       	push	r12
    272c:	df 92       	push	r13
    272e:	ef 92       	push	r14
    2730:	ff 92       	push	r15
    2732:	0f 93       	push	r16
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	28 97       	sbiw	r28, 0x08	; 8
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	switch(i) {
    2744:	61 30       	cpi	r22, 0x01	; 1
    2746:	71 05       	cpc	r23, r1
    2748:	41 f0       	breq	.+16     	; 0x275a <_Z13MoveTurntablebji+0x30>
    274a:	62 30       	cpi	r22, 0x02	; 2
    274c:	71 05       	cpc	r23, r1
    274e:	71 f5       	brne	.+92     	; 0x27ac <_Z13MoveTurntablebji+0x82>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    2750:	0f 2e       	mov	r0, r31
    2752:	f6 e0       	ldi	r31, 0x06	; 6
    2754:	cf 2e       	mov	r12, r31
    2756:	f0 2d       	mov	r31, r0
    2758:	04 c0       	rjmp	.+8      	; 0x2762 <_Z13MoveTurntablebji+0x38>
=======
    23be:	cf 92       	push	r12
    23c0:	df 92       	push	r13
    23c2:	ef 92       	push	r14
    23c4:	ff 92       	push	r15
    23c6:	0f 93       	push	r16
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
    23d2:	28 97       	sbiw	r28, 0x08	; 8
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	switch(i) {
    23d8:	61 30       	cpi	r22, 0x01	; 1
    23da:	71 05       	cpc	r23, r1
    23dc:	41 f0       	breq	.+16     	; 0x23ee <_Z13MoveTurntablebji+0x30>
    23de:	62 30       	cpi	r22, 0x02	; 2
    23e0:	71 05       	cpc	r23, r1
    23e2:	71 f5       	brne	.+92     	; 0x2440 <_Z13MoveTurntablebji+0x82>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    23e4:	0f 2e       	mov	r0, r31
    23e6:	f6 e0       	ldi	r31, 0x06	; 6
    23e8:	cf 2e       	mov	r12, r31
    23ea:	f0 2d       	mov	r31, r0
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <_Z13MoveTurntablebji+0x38>
>>>>>>> Stashed changes

void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
<<<<<<< Updated upstream
    275a:	0f 2e       	mov	r0, r31
    275c:	f5 e0       	ldi	r31, 0x05	; 5
    275e:	cf 2e       	mov	r12, r31
    2760:	f0 2d       	mov	r31, r0
    2762:	d5 2e       	mov	r13, r21
    2764:	e4 2e       	mov	r14, r20
    2766:	f8 2e       	mov	r15, r24
=======
    23ee:	0f 2e       	mov	r0, r31
    23f0:	f5 e0       	ldi	r31, 0x05	; 5
    23f2:	cf 2e       	mov	r12, r31
    23f4:	f0 2d       	mov	r31, r0
    23f6:	d5 2e       	mov	r13, r21
    23f8:	e4 2e       	mov	r14, r20
    23fa:	f8 2e       	mov	r15, r24
>>>>>>> Stashed changes
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
<<<<<<< Updated upstream
    2768:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    276a:	00 eb       	ldi	r16, 0xB0	; 176
    276c:	1a e0       	ldi	r17, 0x0A	; 10
    276e:	2c 2d       	mov	r18, r12
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	be 01       	movw	r22, r28
    2774:	6f 5f       	subi	r22, 0xFF	; 255
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	8a e4       	ldi	r24, 0x4A	; 74
    277a:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_QUARTER,MOTOR_ON }; // Turntable's draaien op 1/4 step mode, hierdoor kunnen de motoreren soepeler draaien
    277e:	be 01       	movw	r22, r28
    2780:	6e 5f       	subi	r22, 0xFE	; 254
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	87 e0       	ldi	r24, 0x07	; 7
    2786:	fb 01       	movw	r30, r22
    2788:	11 92       	st	Z+, r1
    278a:	8a 95       	dec	r24
    278c:	e9 f7       	brne	.-6      	; 0x2788 <_Z13MoveTurntablebji+0x5e>
    278e:	8f ef       	ldi	r24, 0xFF	; 255
    2790:	8c 83       	std	Y+4, r24	; 0x04
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	8f 83       	std	Y+7, r24	; 0x07
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	88 87       	std	Y+8, r24	; 0x08
    279c:	da 82       	std	Y+2, r13	; 0x02
    279e:	eb 82       	std	Y+3, r14	; 0x03
    27a0:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    27a2:	2c 2d       	mov	r18, r12
    27a4:	47 e0       	ldi	r20, 0x07	; 7
    27a6:	86 e4       	ldi	r24, 0x46	; 70
    27a8:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    27ac:	28 96       	adiw	r28, 0x08	; 8
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	08 95       	ret

000027c4 <_Z13StopTurntablej>:
=======
    23fc:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    23fe:	00 eb       	ldi	r16, 0xB0	; 176
    2400:	1a e0       	ldi	r17, 0x0A	; 10
    2402:	2c 2d       	mov	r18, r12
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	be 01       	movw	r22, r28
    2408:	6f 5f       	subi	r22, 0xFF	; 255
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	8a e4       	ldi	r24, 0x4A	; 74
    240e:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_QUARTER,MOTOR_ON }; // Turntable's draaien op 1/4 step mode, hierdoor kunnen de motoreren soepeler draaien
    2412:	be 01       	movw	r22, r28
    2414:	6e 5f       	subi	r22, 0xFE	; 254
    2416:	7f 4f       	sbci	r23, 0xFF	; 255
    2418:	87 e0       	ldi	r24, 0x07	; 7
    241a:	fb 01       	movw	r30, r22
    241c:	11 92       	st	Z+, r1
    241e:	8a 95       	dec	r24
    2420:	e9 f7       	brne	.-6      	; 0x241c <_Z13MoveTurntablebji+0x5e>
    2422:	8f ef       	ldi	r24, 0xFF	; 255
    2424:	8c 83       	std	Y+4, r24	; 0x04
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	8f 83       	std	Y+7, r24	; 0x07
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	88 87       	std	Y+8, r24	; 0x08
    2430:	da 82       	std	Y+2, r13	; 0x02
    2432:	eb 82       	std	Y+3, r14	; 0x03
    2434:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2436:	2c 2d       	mov	r18, r12
    2438:	47 e0       	ldi	r20, 0x07	; 7
    243a:	86 e4       	ldi	r24, 0x46	; 70
    243c:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2440:	28 96       	adiw	r28, 0x08	; 8
    2442:	cd bf       	out	0x3d, r28	; 61
    2444:	de bf       	out	0x3e, r29	; 62
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	08 95       	ret

00002458 <_Z13StopTurntablej>:
>>>>>>> Stashed changes


void StopTurntable(uint16_t i)
{
<<<<<<< Updated upstream
    27c4:	0f 93       	push	r16
    27c6:	1f 93       	push	r17
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	1f 92       	push	r1
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	91 05       	cpc	r25, r1
    27d6:	21 f0       	breq	.+8      	; 0x27e0 <_Z13StopTurntablej+0x1c>
    27d8:	02 97       	sbiw	r24, 0x02	; 2
    27da:	69 f4       	brne	.+26     	; 0x27f6 <_Z13StopTurntablej+0x32>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    27dc:	26 e0       	ldi	r18, 0x06	; 6
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <_Z13StopTurntablej+0x1e>
=======
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	91 05       	cpc	r25, r1
    246a:	21 f0       	breq	.+8      	; 0x2474 <_Z13StopTurntablej+0x1c>
    246c:	02 97       	sbiw	r24, 0x02	; 2
    246e:	69 f4       	brne	.+26     	; 0x248a <_Z13StopTurntablej+0x32>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    2470:	26 e0       	ldi	r18, 0x06	; 6
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <_Z13StopTurntablej+0x1e>
>>>>>>> Stashed changes

void StopTurntable(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
<<<<<<< Updated upstream
    27e0:	25 e0       	ldi	r18, 0x05	; 5
=======
    2474:	25 e0       	ldi	r18, 0x05	; 5
>>>>>>> Stashed changes
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char data[] = { MOTOR_OFF };
<<<<<<< Updated upstream
    27e2:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    27e4:	00 eb       	ldi	r16, 0xB0	; 176
    27e6:	1a e0       	ldi	r17, 0x0A	; 10
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	be 01       	movw	r22, r28
    27ec:	6f 5f       	subi	r22, 0xFF	; 255
    27ee:	7f 4f       	sbci	r23, 0xFF	; 255
    27f0:	8c e4       	ldi	r24, 0x4C	; 76
    27f2:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    27f6:	0f 90       	pop	r0
    27f8:	df 91       	pop	r29
    27fa:	cf 91       	pop	r28
    27fc:	1f 91       	pop	r17
    27fe:	0f 91       	pop	r16
    2800:	08 95       	ret

00002802 <_Z13DemoTestBlockv>:
=======
    2476:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2478:	00 eb       	ldi	r16, 0xB0	; 176
    247a:	1a e0       	ldi	r17, 0x0A	; 10
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	be 01       	movw	r22, r28
    2480:	6f 5f       	subi	r22, 0xFF	; 255
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8c e4       	ldi	r24, 0x4C	; 76
    2486:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    248a:	0f 90       	pop	r0
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	08 95       	ret

00002496 <_Z13DemoTestBlockv>:
>>>>>>> Stashed changes


// Test Code om uit te zoeken hoe een motor gestart moet worden op adres 0x0A
void DemoTestBlock() {
<<<<<<< Updated upstream
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	28 97       	sbiw	r28, 0x08	; 8
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	de bf       	out	0x3e, r29	; 62
=======
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	28 97       	sbiw	r28, 0x08	; 8
    24a4:	cd bf       	out	0x3d, r28	; 61
    24a6:	de bf       	out	0x3e, r29	; 62
>>>>>>> Stashed changes
	uint8_t motor_id = TEST_DEMO_MOTOR_ID; // Dit zou 0x0A moeten zijn
	int16_t speed = 1000;
	bool direction = 0;
	
	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
<<<<<<< Updated upstream
    2814:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2816:	00 eb       	ldi	r16, 0xB0	; 176
    2818:	1a e0       	ldi	r17, 0x0A	; 10
    281a:	2a e0       	ldi	r18, 0x0A	; 10
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	be 01       	movw	r22, r28
    2820:	6f 5f       	subi	r22, 0xFF	; 255
    2822:	7f 4f       	sbci	r23, 0xFF	; 255
    2824:	8a e4       	ldi	r24, 0x4A	; 74
    2826:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON };
    282a:	be 01       	movw	r22, r28
    282c:	6e 5f       	subi	r22, 0xFE	; 254
    282e:	7f 4f       	sbci	r23, 0xFF	; 255
    2830:	87 e0       	ldi	r24, 0x07	; 7
    2832:	fb 01       	movw	r30, r22
    2834:	11 92       	st	Z+, r1
    2836:	8a 95       	dec	r24
    2838:	e9 f7       	brne	.-6      	; 0x2834 <_Z13DemoTestBlockv+0x32>
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	8c 83       	std	Y+4, r24	; 0x04
    283e:	8d 83       	std	Y+5, r24	; 0x05
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	88 87       	std	Y+8, r24	; 0x08
    2844:	83 e0       	ldi	r24, 0x03	; 3
    2846:	8a 83       	std	Y+2, r24	; 0x02
    2848:	88 ee       	ldi	r24, 0xE8	; 232
    284a:	8b 83       	std	Y+3, r24	; 0x03
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    284c:	2a e0       	ldi	r18, 0x0A	; 10
    284e:	47 e0       	ldi	r20, 0x07	; 7
    2850:	86 e4       	ldi	r24, 0x46	; 70
    2852:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2856:	28 96       	adiw	r28, 0x08	; 8
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	08 95       	ret

00002866 <_Z17StopDemoTestBlockv>:
=======
    24a8:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    24aa:	00 eb       	ldi	r16, 0xB0	; 176
    24ac:	1a e0       	ldi	r17, 0x0A	; 10
    24ae:	2a e0       	ldi	r18, 0x0A	; 10
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	be 01       	movw	r22, r28
    24b4:	6f 5f       	subi	r22, 0xFF	; 255
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8a e4       	ldi	r24, 0x4A	; 74
    24ba:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON };
    24be:	be 01       	movw	r22, r28
    24c0:	6e 5f       	subi	r22, 0xFE	; 254
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	87 e0       	ldi	r24, 0x07	; 7
    24c6:	fb 01       	movw	r30, r22
    24c8:	11 92       	st	Z+, r1
    24ca:	8a 95       	dec	r24
    24cc:	e9 f7       	brne	.-6      	; 0x24c8 <_Z13DemoTestBlockv+0x32>
    24ce:	8f ef       	ldi	r24, 0xFF	; 255
    24d0:	8c 83       	std	Y+4, r24	; 0x04
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	88 87       	std	Y+8, r24	; 0x08
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	8a 83       	std	Y+2, r24	; 0x02
    24dc:	88 ee       	ldi	r24, 0xE8	; 232
    24de:	8b 83       	std	Y+3, r24	; 0x03
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    24e0:	2a e0       	ldi	r18, 0x0A	; 10
    24e2:	47 e0       	ldi	r20, 0x07	; 7
    24e4:	86 e4       	ldi	r24, 0x46	; 70
    24e6:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    24ea:	28 96       	adiw	r28, 0x08	; 8
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	08 95       	ret

000024fa <_Z17StopDemoTestBlockv>:
>>>>>>> Stashed changes


// Test code om de motor op TEST_DEMO_MOTOR_ID weer te stoppen
void StopDemoTestBlock() {
<<<<<<< Updated upstream
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	1f 92       	push	r1
    2870:	cd b7       	in	r28, 0x3d	; 61
    2872:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    2874:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2876:	00 eb       	ldi	r16, 0xB0	; 176
    2878:	1a e0       	ldi	r17, 0x0A	; 10
    287a:	2a e0       	ldi	r18, 0x0A	; 10
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	be 01       	movw	r22, r28
    2880:	6f 5f       	subi	r22, 0xFF	; 255
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	8c e4       	ldi	r24, 0x4C	; 76
    2886:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    288a:	0f 90       	pop	r0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	08 95       	ret

00002896 <_Z10SetAddresshh>:
=======
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	cf 93       	push	r28
    2500:	df 93       	push	r29
    2502:	1f 92       	push	r1
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    2508:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    250a:	00 eb       	ldi	r16, 0xB0	; 176
    250c:	1a e0       	ldi	r17, 0x0A	; 10
    250e:	2a e0       	ldi	r18, 0x0A	; 10
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	be 01       	movw	r22, r28
    2514:	6f 5f       	subi	r22, 0xFF	; 255
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
    2518:	8c e4       	ldi	r24, 0x4C	; 76
    251a:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	08 95       	ret

0000252a <_Z10SetAddresshh>:
>>>>>>> Stashed changes


// Change the address of a motor
void SetAddress(uint8_t from, uint8_t to) {
<<<<<<< Updated upstream
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	1f 92       	push	r1
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
	uint16_t motor_id = from; // Old address
	char regdata = to; // New address
    28a4:	69 83       	std	Y+1, r22	; 0x01
=======
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	1f 92       	push	r1
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	uint16_t motor_id = from; // Old address
	char regdata = to; // New address
    2538:	69 83       	std	Y+1, r22	; 0x01
>>>>>>> Stashed changes
	stepperWriteRegister(BUS_ADDRESS_REG, 
						 &regdata, 
						 1, // Size of message
						 motor_id, 
						 USARTE1
						 ); //Write new address to motor
<<<<<<< Updated upstream
    28a6:	00 eb       	ldi	r16, 0xB0	; 176
    28a8:	1a e0       	ldi	r17, 0x0A	; 10
    28aa:	28 2f       	mov	r18, r24
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	be 01       	movw	r22, r28
    28b0:	6f 5f       	subi	r22, 0xFF	; 255
    28b2:	7f 4f       	sbci	r23, 0xFF	; 255
    28b4:	85 e0       	ldi	r24, 0x05	; 5
    28b6:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    28ba:	0f 90       	pop	r0
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	08 95       	ret

000028c6 <_Z9ToggleLEDv>:
	JMP(SelectColour),
	JMP(set_relay),
};


void ToggleLED() { PORTH_OUTTGL |= (1<<4)|(1<<5); }
    28c6:	e7 ee       	ldi	r30, 0xE7	; 231
    28c8:	f6 e0       	ldi	r31, 0x06	; 6
    28ca:	80 81       	ld	r24, Z
    28cc:	80 63       	ori	r24, 0x30	; 48
    28ce:	80 83       	st	Z, r24
    28d0:	08 95       	ret

000028d2 <_Z3LEDb>:
void LED(bool i) {
	if (i) {
    28d2:	88 23       	and	r24, r24
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <_Z3LEDb+0x10>
		PORTH_OUTCLR |= (1<<4)|(1<<5);
    28d6:	e6 ee       	ldi	r30, 0xE6	; 230
    28d8:	f6 e0       	ldi	r31, 0x06	; 6
    28da:	80 81       	ld	r24, Z
    28dc:	80 63       	ori	r24, 0x30	; 48
    28de:	80 83       	st	Z, r24
    28e0:	08 95       	ret
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
    28e2:	e5 ee       	ldi	r30, 0xE5	; 229
    28e4:	f6 e0       	ldi	r31, 0x06	; 6
    28e6:	80 81       	ld	r24, Z
    28e8:	80 63       	ori	r24, 0x30	; 48
    28ea:	80 83       	st	Z, r24
    28ec:	08 95       	ret

000028ee <_Z9set_relaybh>:
#define RELAY4_OUTCLR	PORTQ_OUTCLR
#define RELAY5_OUTCLR	PORTQ_OUTCLR
=======
    253a:	00 eb       	ldi	r16, 0xB0	; 176
    253c:	1a e0       	ldi	r17, 0x0A	; 10
    253e:	28 2f       	mov	r18, r24
    2540:	41 e0       	ldi	r20, 0x01	; 1
    2542:	be 01       	movw	r22, r28
    2544:	6f 5f       	subi	r22, 0xFF	; 255
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	85 e0       	ldi	r24, 0x05	; 5
    254a:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    254e:	0f 90       	pop	r0
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <_Z9set_relaybh>:
>>>>>>> Stashed changes


void set_relay(bool value, uint8_t relay)
{
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	d8 2f       	mov	r29, r24
    28f4:	c6 2f       	mov	r28, r22
	DEBUG_OUT("Setting a relay!");
    28f6:	65 e5       	ldi	r22, 0x55	; 85
    28f8:	72 e2       	ldi	r23, 0x22	; 34
    28fa:	80 ea       	ldi	r24, 0xA0	; 160
    28fc:	99 e0       	ldi	r25, 0x09	; 9
    28fe:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	switch (relay)
<<<<<<< Updated upstream
    2902:	c3 30       	cpi	r28, 0x03	; 3
    2904:	49 f1       	breq	.+82     	; 0x2958 <_Z9set_relaybh+0x6a>
    2906:	28 f4       	brcc	.+10     	; 0x2912 <_Z9set_relaybh+0x24>
    2908:	c1 30       	cpi	r28, 0x01	; 1
    290a:	d1 f1       	breq	.+116    	; 0x2980 <_Z9set_relaybh+0x92>
    290c:	c2 30       	cpi	r28, 0x02	; 2
    290e:	71 f1       	breq	.+92     	; 0x296c <_Z9set_relaybh+0x7e>
    2910:	40 c0       	rjmp	.+128    	; 0x2992 <_Z9set_relaybh+0xa4>
    2912:	c5 30       	cpi	r28, 0x05	; 5
    2914:	69 f0       	breq	.+26     	; 0x2930 <_Z9set_relaybh+0x42>
    2916:	b0 f0       	brcs	.+44     	; 0x2944 <_Z9set_relaybh+0x56>
    2918:	c6 30       	cpi	r28, 0x06	; 6
    291a:	d9 f5       	brne	.+118    	; 0x2992 <_Z9set_relaybh+0xa4>
=======
    255a:	63 30       	cpi	r22, 0x03	; 3
    255c:	49 f1       	breq	.+82     	; 0x25b0 <_Z9set_relaybh+0x56>
    255e:	28 f4       	brcc	.+10     	; 0x256a <_Z9set_relaybh+0x10>
    2560:	61 30       	cpi	r22, 0x01	; 1
    2562:	d1 f1       	breq	.+116    	; 0x25d8 <_Z9set_relaybh+0x7e>
    2564:	62 30       	cpi	r22, 0x02	; 2
    2566:	71 f1       	breq	.+92     	; 0x25c4 <_Z9set_relaybh+0x6a>
    2568:	08 95       	ret
    256a:	65 30       	cpi	r22, 0x05	; 5
    256c:	69 f0       	breq	.+26     	; 0x2588 <_Z9set_relaybh+0x2e>
    256e:	b0 f0       	brcs	.+44     	; 0x259c <_Z9set_relaybh+0x42>
    2570:	66 30       	cpi	r22, 0x06	; 6
    2572:	d9 f5       	brne	.+118    	; 0x25ea <_Z9set_relaybh+0x90>
>>>>>>> Stashed changes
	{	
		//Use conditional operator to check for SET or CLR for relay:
		//IMPORTANT: In the ULN2803, signal traces get inverted (Relay0 on Atmega pin label is Relay output marked K6, see schematic sheet 5: "Relays_Optocoupers")
		case 6: value ? RELAY0_OUTSET = RELAY0_bm : RELAY0_OUTCLR = RELAY0_bm; break;
<<<<<<< Updated upstream
    291c:	dd 23       	and	r29, r29
    291e:	21 f0       	breq	.+8      	; 0x2928 <_Z9set_relaybh+0x3a>
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2926:	35 c0       	rjmp	.+106    	; 0x2992 <_Z9set_relaybh+0xa4>
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    292e:	31 c0       	rjmp	.+98     	; 0x2992 <_Z9set_relaybh+0xa4>
		case 5: value ? RELAY1_OUTSET = RELAY1_bm : RELAY1_OUTCLR = RELAY1_bm; break;
    2930:	dd 23       	and	r29, r29
    2932:	21 f0       	breq	.+8      	; 0x293c <_Z9set_relaybh+0x4e>
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    293a:	2b c0       	rjmp	.+86     	; 0x2992 <_Z9set_relaybh+0xa4>
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    2942:	27 c0       	rjmp	.+78     	; 0x2992 <_Z9set_relaybh+0xa4>
		case 4: value ? RELAY2_OUTSET = RELAY2_bm : RELAY2_OUTCLR = RELAY2_bm; break;
    2944:	dd 23       	and	r29, r29
    2946:	21 f0       	breq	.+8      	; 0x2950 <_Z9set_relaybh+0x62>
    2948:	88 e0       	ldi	r24, 0x08	; 8
    294a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    294e:	21 c0       	rjmp	.+66     	; 0x2992 <_Z9set_relaybh+0xa4>
    2950:	88 e0       	ldi	r24, 0x08	; 8
    2952:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    2956:	1d c0       	rjmp	.+58     	; 0x2992 <_Z9set_relaybh+0xa4>
		case 3: value ? RELAY3_OUTSET = RELAY3_bm : RELAY3_OUTCLR = RELAY3_bm; break;
    2958:	dd 23       	and	r29, r29
    295a:	21 f0       	breq	.+8      	; 0x2964 <_Z9set_relaybh+0x76>
    295c:	84 e0       	ldi	r24, 0x04	; 4
    295e:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2962:	17 c0       	rjmp	.+46     	; 0x2992 <_Z9set_relaybh+0xa4>
    2964:	84 e0       	ldi	r24, 0x04	; 4
    2966:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    296a:	13 c0       	rjmp	.+38     	; 0x2992 <_Z9set_relaybh+0xa4>
		case 2: value ? RELAY4_OUTSET = RELAY4_bm : RELAY4_OUTCLR = RELAY4_bm; break;
    296c:	dd 23       	and	r29, r29
    296e:	21 f0       	breq	.+8      	; 0x2978 <_Z9set_relaybh+0x8a>
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2976:	0d c0       	rjmp	.+26     	; 0x2992 <_Z9set_relaybh+0xa4>
    2978:	82 e0       	ldi	r24, 0x02	; 2
    297a:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    297e:	09 c0       	rjmp	.+18     	; 0x2992 <_Z9set_relaybh+0xa4>
		case 1: value ? RELAY5_OUTSET = RELAY5_bm : RELAY5_OUTCLR = RELAY5_bm; break;
    2980:	dd 23       	and	r29, r29
    2982:	21 f0       	breq	.+8      	; 0x298c <_Z9set_relaybh+0x9e>
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    298a:	03 c0       	rjmp	.+6      	; 0x2992 <_Z9set_relaybh+0xa4>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
		default: break;
	}
}
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	08 95       	ret

00002998 <_Z8Solenoidhb>:
=======
    2574:	88 23       	and	r24, r24
    2576:	21 f0       	breq	.+8      	; 0x2580 <_Z9set_relaybh+0x26>
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    257e:	08 95       	ret
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    2586:	08 95       	ret
		case 5: value ? RELAY1_OUTSET = RELAY1_bm : RELAY1_OUTCLR = RELAY1_bm; break;
    2588:	88 23       	and	r24, r24
    258a:	21 f0       	breq	.+8      	; 0x2594 <_Z9set_relaybh+0x3a>
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2592:	08 95       	ret
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    259a:	08 95       	ret
		case 4: value ? RELAY2_OUTSET = RELAY2_bm : RELAY2_OUTCLR = RELAY2_bm; break;
    259c:	88 23       	and	r24, r24
    259e:	21 f0       	breq	.+8      	; 0x25a8 <_Z9set_relaybh+0x4e>
    25a0:	88 e0       	ldi	r24, 0x08	; 8
    25a2:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    25a6:	08 95       	ret
    25a8:	88 e0       	ldi	r24, 0x08	; 8
    25aa:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    25ae:	08 95       	ret
		case 3: value ? RELAY3_OUTSET = RELAY3_bm : RELAY3_OUTCLR = RELAY3_bm; break;
    25b0:	88 23       	and	r24, r24
    25b2:	21 f0       	breq	.+8      	; 0x25bc <_Z9set_relaybh+0x62>
    25b4:	84 e0       	ldi	r24, 0x04	; 4
    25b6:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    25ba:	08 95       	ret
    25bc:	84 e0       	ldi	r24, 0x04	; 4
    25be:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    25c2:	08 95       	ret
		case 2: value ? RELAY4_OUTSET = RELAY4_bm : RELAY4_OUTCLR = RELAY4_bm; break;
    25c4:	88 23       	and	r24, r24
    25c6:	21 f0       	breq	.+8      	; 0x25d0 <_Z9set_relaybh+0x76>
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    25ce:	08 95       	ret
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    25d6:	08 95       	ret
		case 1: value ? RELAY5_OUTSET = RELAY5_bm : RELAY5_OUTCLR = RELAY5_bm; break;
    25d8:	88 23       	and	r24, r24
    25da:	21 f0       	breq	.+8      	; 0x25e4 <_Z9set_relaybh+0x8a>
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    25e2:	08 95       	ret
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    25ea:	08 95       	ret

000025ec <_Z8Solenoidhb>:
>>>>>>> Stashed changes
#define SOLENOID_H_

#include "relays.h"

void Solenoid(uint8_t solenoid, bool InOut)
{
<<<<<<< Updated upstream
    2998:	98 2f       	mov	r25, r24
    299a:	86 2f       	mov	r24, r22
	set_relay(InOut,solenoid);
    299c:	69 2f       	mov	r22, r25
    299e:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9set_relaybh>
    29a2:	08 95       	ret

000029a4 <_Z13PulseSolenoidh>:
=======
    25ec:	98 2f       	mov	r25, r24
    25ee:	86 2f       	mov	r24, r22
	set_relay(InOut,solenoid);
    25f0:	69 2f       	mov	r22, r25
    25f2:	0e 94 ad 12 	call	0x255a	; 0x255a <_Z9set_relaybh>
    25f6:	08 95       	ret

000025f8 <_Z9ToggleLEDv>:
	JMP(SelectColour),
	JMP(set_relay),
};


void ToggleLED() { PORTH_OUTTGL |= (1<<4)|(1<<5); }
    25f8:	e7 ee       	ldi	r30, 0xE7	; 231
    25fa:	f6 e0       	ldi	r31, 0x06	; 6
    25fc:	80 81       	ld	r24, Z
    25fe:	80 63       	ori	r24, 0x30	; 48
    2600:	80 83       	st	Z, r24
    2602:	08 95       	ret

00002604 <_Z3LEDb>:
void LED(bool i) {
	if (i) {
    2604:	88 23       	and	r24, r24
    2606:	31 f0       	breq	.+12     	; 0x2614 <_Z3LEDb+0x10>
		PORTH_OUTCLR |= (1<<4)|(1<<5);
    2608:	e6 ee       	ldi	r30, 0xE6	; 230
    260a:	f6 e0       	ldi	r31, 0x06	; 6
    260c:	80 81       	ld	r24, Z
    260e:	80 63       	ori	r24, 0x30	; 48
    2610:	80 83       	st	Z, r24
    2612:	08 95       	ret
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
    2614:	e5 ee       	ldi	r30, 0xE5	; 229
    2616:	f6 e0       	ldi	r31, 0x06	; 6
    2618:	80 81       	ld	r24, Z
    261a:	80 63       	ori	r24, 0x30	; 48
    261c:	80 83       	st	Z, r24
    261e:	08 95       	ret

00002620 <_Z13PulseSolenoidh>:
>>>>>>> Stashed changes
}

void PulseSolenoid(uint8_t solenoid)
{
<<<<<<< Updated upstream
    29a4:	cf 93       	push	r28
    29a6:	c8 2f       	mov	r28, r24
	set_relay(1,solenoid);
    29a8:	68 2f       	mov	r22, r24
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9set_relaybh>
    29b0:	2f ef       	ldi	r18, 0xFF	; 255
    29b2:	85 ea       	ldi	r24, 0xA5	; 165
    29b4:	9e e0       	ldi	r25, 0x0E	; 14
    29b6:	21 50       	subi	r18, 0x01	; 1
    29b8:	80 40       	sbci	r24, 0x00	; 0
    29ba:	90 40       	sbci	r25, 0x00	; 0
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <_Z13PulseSolenoidh+0x12>
    29be:	00 c0       	rjmp	.+0      	; 0x29c0 <_Z13PulseSolenoidh+0x1c>
    29c0:	00 00       	nop
	_delay_ms(200);
	set_relay(0,solenoid);
    29c2:	6c 2f       	mov	r22, r28
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	0e 94 77 14 	call	0x28ee	; 0x28ee <_Z9set_relaybh>
}
    29ca:	cf 91       	pop	r28
    29cc:	08 95       	ret

000029ce <_Z14requestStartedv>:
=======
    2620:	cf 93       	push	r28
    2622:	c8 2f       	mov	r28, r24
	set_relay(1,solenoid);
    2624:	68 2f       	mov	r22, r24
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	0e 94 ad 12 	call	0x255a	; 0x255a <_Z9set_relaybh>
    262c:	2f ef       	ldi	r18, 0xFF	; 255
    262e:	85 ea       	ldi	r24, 0xA5	; 165
    2630:	9e e0       	ldi	r25, 0x0E	; 14
    2632:	21 50       	subi	r18, 0x01	; 1
    2634:	80 40       	sbci	r24, 0x00	; 0
    2636:	90 40       	sbci	r25, 0x00	; 0
    2638:	e1 f7       	brne	.-8      	; 0x2632 <_Z13PulseSolenoidh+0x12>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <_Z13PulseSolenoidh+0x1c>
    263c:	00 00       	nop
	_delay_ms(200);
	set_relay(0,solenoid);
    263e:	6c 2f       	mov	r22, r28
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	0e 94 ad 12 	call	0x255a	; 0x255a <_Z9set_relaybh>
}
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <_Z14requestStartedv>:
>>>>>>> Stashed changes
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
void requestStarted() { TWI_Write(TWIC, Started); }
<<<<<<< Updated upstream
    29ce:	60 91 ce 23 	lds	r22, 0x23CE	; 0x8023ce <Started>
    29d2:	80 e8       	ldi	r24, 0x80	; 128
    29d4:	94 e0       	ldi	r25, 0x04	; 4
    29d6:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z9TWI_WriteR10TWI_structh>
    29da:	08 95       	ret

000029dc <_Z13requestResultv>:
void requestResult() { TWI_Write(TWIC, Result); }
    29dc:	60 91 cd 23 	lds	r22, 0x23CD	; 0x8023cd <Result>
    29e0:	80 e8       	ldi	r24, 0x80	; 128
    29e2:	94 e0       	ldi	r25, 0x04	; 4
    29e4:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z9TWI_WriteR10TWI_structh>
    29e8:	08 95       	ret

000029ea <sysclk_enable_peripheral_clock>:
=======
    264a:	60 91 de 23 	lds	r22, 0x23DE	; 0x8023de <Started>
    264e:	80 e8       	ldi	r24, 0x80	; 128
    2650:	94 e0       	ldi	r25, 0x04	; 4
    2652:	0e 94 95 07 	call	0xf2a	; 0xf2a <_Z9TWI_WriteR10TWI_structh>
    2656:	08 95       	ret

00002658 <_Z13requestResultv>:
void requestResult() { TWI_Write(TWIC, Result); }
    2658:	60 91 dd 23 	lds	r22, 0x23DD	; 0x8023dd <Result>
    265c:	80 e8       	ldi	r24, 0x80	; 128
    265e:	94 e0       	ldi	r25, 0x04	; 4
    2660:	0e 94 95 07 	call	0xf2a	; 0xf2a <_Z9TWI_WriteR10TWI_structh>
    2664:	08 95       	ret

00002666 <sysclk_enable_peripheral_clock>:
>>>>>>> Stashed changes
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
<<<<<<< Updated upstream
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <sysclk_enable_peripheral_clock+0x6>
    29ee:	5c c1       	rjmp	.+696    	; 0x2ca8 <sysclk_enable_peripheral_clock+0x2be>
=======
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	09 f4       	brne	.+2      	; 0x266c <sysclk_enable_peripheral_clock+0x6>
    266a:	5c c1       	rjmp	.+696    	; 0x2924 <sysclk_enable_peripheral_clock+0x2be>
>>>>>>> Stashed changes
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
<<<<<<< Updated upstream
    29f0:	80 3c       	cpi	r24, 0xC0	; 192
    29f2:	91 05       	cpc	r25, r1
    29f4:	29 f4       	brne	.+10     	; 0x2a00 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    29f6:	60 e1       	ldi	r22, 0x10	; 16
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    29fe:	08 95       	ret
=======
    266c:	80 3c       	cpi	r24, 0xC0	; 192
    266e:	91 05       	cpc	r25, r1
    2670:	29 f4       	brne	.+10     	; 0x267c <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2672:	60 e1       	ldi	r22, 0x10	; 16
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    267a:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
<<<<<<< Updated upstream
    2a00:	80 34       	cpi	r24, 0x40	; 64
    2a02:	24 e0       	ldi	r18, 0x04	; 4
    2a04:	92 07       	cpc	r25, r18
    2a06:	29 f4       	brne	.+10     	; 0x2a12 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2a08:	68 e0       	ldi	r22, 0x08	; 8
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a10:	08 95       	ret
=======
    267c:	80 34       	cpi	r24, 0x40	; 64
    267e:	24 e0       	ldi	r18, 0x04	; 4
    2680:	92 07       	cpc	r25, r18
    2682:	29 f4       	brne	.+10     	; 0x268e <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2684:	68 e0       	ldi	r22, 0x08	; 8
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    268c:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
<<<<<<< Updated upstream
    2a12:	81 15       	cp	r24, r1
    2a14:	24 e0       	ldi	r18, 0x04	; 4
    2a16:	92 07       	cpc	r25, r18
    2a18:	29 f4       	brne	.+10     	; 0x2a24 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2a1a:	64 e0       	ldi	r22, 0x04	; 4
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a22:	08 95       	ret
=======
    268e:	81 15       	cp	r24, r1
    2690:	24 e0       	ldi	r18, 0x04	; 4
    2692:	92 07       	cpc	r25, r18
    2694:	29 f4       	brne	.+10     	; 0x26a0 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    269e:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
<<<<<<< Updated upstream
    2a24:	80 38       	cpi	r24, 0x80	; 128
    2a26:	21 e0       	ldi	r18, 0x01	; 1
    2a28:	92 07       	cpc	r25, r18
    2a2a:	29 f4       	brne	.+10     	; 0x2a36 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2a2c:	62 e0       	ldi	r22, 0x02	; 2
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a34:	08 95       	ret
=======
    26a0:	80 38       	cpi	r24, 0x80	; 128
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	92 07       	cpc	r25, r18
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    26a8:	62 e0       	ldi	r22, 0x02	; 2
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    26b0:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
<<<<<<< Updated upstream
    2a36:	81 15       	cp	r24, r1
    2a38:	21 e0       	ldi	r18, 0x01	; 1
    2a3a:	92 07       	cpc	r25, r18
    2a3c:	29 f4       	brne	.+10     	; 0x2a48 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a46:	08 95       	ret
=======
    26b2:	81 15       	cp	r24, r1
    26b4:	21 e0       	ldi	r18, 0x01	; 1
    26b6:	92 07       	cpc	r25, r18
    26b8:	29 f4       	brne	.+10     	; 0x26c4 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    26ba:	61 e0       	ldi	r22, 0x01	; 1
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    26c2:	08 95       	ret
>>>>>>> Stashed changes
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
<<<<<<< Updated upstream
    2a48:	80 38       	cpi	r24, 0x80	; 128
    2a4a:	23 e0       	ldi	r18, 0x03	; 3
    2a4c:	92 07       	cpc	r25, r18
    2a4e:	29 f4       	brne	.+10     	; 0x2a5a <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a58:	08 95       	ret
=======
    26c4:	80 38       	cpi	r24, 0x80	; 128
    26c6:	23 e0       	ldi	r18, 0x03	; 3
    26c8:	92 07       	cpc	r25, r18
    26ca:	29 f4       	brne	.+10     	; 0x26d6 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    26cc:	61 e0       	ldi	r22, 0x01	; 1
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    26d4:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
<<<<<<< Updated upstream
    2a5a:	80 39       	cpi	r24, 0x90	; 144
    2a5c:	23 e0       	ldi	r18, 0x03	; 3
    2a5e:	92 07       	cpc	r25, r18
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a6a:	08 95       	ret
=======
    26d6:	80 39       	cpi	r24, 0x90	; 144
    26d8:	23 e0       	ldi	r18, 0x03	; 3
    26da:	92 07       	cpc	r25, r18
    26dc:	29 f4       	brne	.+10     	; 0x26e8 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    26de:	61 e0       	ldi	r22, 0x01	; 1
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    26e6:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
<<<<<<< Updated upstream
    2a6c:	81 15       	cp	r24, r1
    2a6e:	22 e0       	ldi	r18, 0x02	; 2
    2a70:	92 07       	cpc	r25, r18
    2a72:	29 f4       	brne	.+10     	; 0x2a7e <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2a74:	62 e0       	ldi	r22, 0x02	; 2
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a7c:	08 95       	ret
=======
    26e8:	81 15       	cp	r24, r1
    26ea:	22 e0       	ldi	r18, 0x02	; 2
    26ec:	92 07       	cpc	r25, r18
    26ee:	29 f4       	brne	.+10     	; 0x26fa <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    26f8:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
<<<<<<< Updated upstream
    2a7e:	80 34       	cpi	r24, 0x40	; 64
    2a80:	22 e0       	ldi	r18, 0x02	; 2
    2a82:	92 07       	cpc	r25, r18
    2a84:	29 f4       	brne	.+10     	; 0x2a90 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2a86:	62 e0       	ldi	r22, 0x02	; 2
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2a8e:	08 95       	ret
=======
    26fa:	80 34       	cpi	r24, 0x40	; 64
    26fc:	22 e0       	ldi	r18, 0x02	; 2
    26fe:	92 07       	cpc	r25, r18
    2700:	29 f4       	brne	.+10     	; 0x270c <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2702:	62 e0       	ldi	r22, 0x02	; 2
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    270a:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
<<<<<<< Updated upstream
    2a90:	81 15       	cp	r24, r1
    2a92:	23 e0       	ldi	r18, 0x03	; 3
    2a94:	92 07       	cpc	r25, r18
    2a96:	29 f4       	brne	.+10     	; 0x2aa2 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2a98:	64 e0       	ldi	r22, 0x04	; 4
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2aa0:	08 95       	ret
=======
    270c:	81 15       	cp	r24, r1
    270e:	23 e0       	ldi	r18, 0x03	; 3
    2710:	92 07       	cpc	r25, r18
    2712:	29 f4       	brne	.+10     	; 0x271e <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2714:	64 e0       	ldi	r22, 0x04	; 4
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    271c:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
<<<<<<< Updated upstream
    2aa2:	80 32       	cpi	r24, 0x20	; 32
    2aa4:	23 e0       	ldi	r18, 0x03	; 3
    2aa6:	92 07       	cpc	r25, r18
    2aa8:	29 f4       	brne	.+10     	; 0x2ab4 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2aaa:	64 e0       	ldi	r22, 0x04	; 4
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2ab2:	08 95       	ret
=======
    271e:	80 32       	cpi	r24, 0x20	; 32
    2720:	23 e0       	ldi	r18, 0x03	; 3
    2722:	92 07       	cpc	r25, r18
    2724:	29 f4       	brne	.+10     	; 0x2730 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2726:	64 e0       	ldi	r22, 0x04	; 4
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    272e:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
<<<<<<< Updated upstream
    2ab4:	81 15       	cp	r24, r1
    2ab6:	28 e0       	ldi	r18, 0x08	; 8
    2ab8:	92 07       	cpc	r25, r18
    2aba:	29 f4       	brne	.+10     	; 0x2ac6 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2ac4:	08 95       	ret
=======
    2730:	81 15       	cp	r24, r1
    2732:	28 e0       	ldi	r18, 0x08	; 8
    2734:	92 07       	cpc	r25, r18
    2736:	29 f4       	brne	.+10     	; 0x2742 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2740:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
<<<<<<< Updated upstream
    2ac6:	81 15       	cp	r24, r1
    2ac8:	29 e0       	ldi	r18, 0x09	; 9
    2aca:	92 07       	cpc	r25, r18
    2acc:	29 f4       	brne	.+10     	; 0x2ad8 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	84 e0       	ldi	r24, 0x04	; 4
    2ad2:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2ad6:	08 95       	ret
=======
    2742:	81 15       	cp	r24, r1
    2744:	29 e0       	ldi	r18, 0x09	; 9
    2746:	92 07       	cpc	r25, r18
    2748:	29 f4       	brne	.+10     	; 0x2754 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    274a:	61 e0       	ldi	r22, 0x01	; 1
    274c:	84 e0       	ldi	r24, 0x04	; 4
    274e:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2752:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
<<<<<<< Updated upstream
    2ad8:	81 15       	cp	r24, r1
    2ada:	2a e0       	ldi	r18, 0x0A	; 10
    2adc:	92 07       	cpc	r25, r18
    2ade:	29 f4       	brne	.+10     	; 0x2aea <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	85 e0       	ldi	r24, 0x05	; 5
    2ae4:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2ae8:	08 95       	ret
=======
    2754:	81 15       	cp	r24, r1
    2756:	2a e0       	ldi	r18, 0x0A	; 10
    2758:	92 07       	cpc	r25, r18
    275a:	29 f4       	brne	.+10     	; 0x2766 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    275c:	61 e0       	ldi	r22, 0x01	; 1
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2764:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
<<<<<<< Updated upstream
    2aea:	81 15       	cp	r24, r1
    2aec:	2b e0       	ldi	r18, 0x0B	; 11
    2aee:	92 07       	cpc	r25, r18
    2af0:	29 f4       	brne	.+10     	; 0x2afc <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	86 e0       	ldi	r24, 0x06	; 6
    2af6:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2afa:	08 95       	ret
=======
    2766:	81 15       	cp	r24, r1
    2768:	2b e0       	ldi	r18, 0x0B	; 11
    276a:	92 07       	cpc	r25, r18
    276c:	29 f4       	brne	.+10     	; 0x2778 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    276e:	61 e0       	ldi	r22, 0x01	; 1
    2770:	86 e0       	ldi	r24, 0x06	; 6
    2772:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2776:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
<<<<<<< Updated upstream
    2afc:	80 34       	cpi	r24, 0x40	; 64
    2afe:	28 e0       	ldi	r18, 0x08	; 8
    2b00:	92 07       	cpc	r25, r18
    2b02:	29 f4       	brne	.+10     	; 0x2b0e <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2b04:	62 e0       	ldi	r22, 0x02	; 2
    2b06:	83 e0       	ldi	r24, 0x03	; 3
    2b08:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b0c:	08 95       	ret
=======
    2778:	80 34       	cpi	r24, 0x40	; 64
    277a:	28 e0       	ldi	r18, 0x08	; 8
    277c:	92 07       	cpc	r25, r18
    277e:	29 f4       	brne	.+10     	; 0x278a <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2780:	62 e0       	ldi	r22, 0x02	; 2
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2788:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
<<<<<<< Updated upstream
    2b0e:	80 34       	cpi	r24, 0x40	; 64
    2b10:	29 e0       	ldi	r18, 0x09	; 9
    2b12:	92 07       	cpc	r25, r18
    2b14:	29 f4       	brne	.+10     	; 0x2b20 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2b16:	62 e0       	ldi	r22, 0x02	; 2
    2b18:	84 e0       	ldi	r24, 0x04	; 4
    2b1a:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b1e:	08 95       	ret
=======
    278a:	80 34       	cpi	r24, 0x40	; 64
    278c:	29 e0       	ldi	r18, 0x09	; 9
    278e:	92 07       	cpc	r25, r18
    2790:	29 f4       	brne	.+10     	; 0x279c <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2792:	62 e0       	ldi	r22, 0x02	; 2
    2794:	84 e0       	ldi	r24, 0x04	; 4
    2796:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    279a:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
<<<<<<< Updated upstream
    2b20:	80 34       	cpi	r24, 0x40	; 64
    2b22:	2a e0       	ldi	r18, 0x0A	; 10
    2b24:	92 07       	cpc	r25, r18
    2b26:	29 f4       	brne	.+10     	; 0x2b32 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2b28:	62 e0       	ldi	r22, 0x02	; 2
    2b2a:	85 e0       	ldi	r24, 0x05	; 5
    2b2c:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b30:	08 95       	ret
=======
    279c:	80 34       	cpi	r24, 0x40	; 64
    279e:	2a e0       	ldi	r18, 0x0A	; 10
    27a0:	92 07       	cpc	r25, r18
    27a2:	29 f4       	brne	.+10     	; 0x27ae <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    27a4:	62 e0       	ldi	r22, 0x02	; 2
    27a6:	85 e0       	ldi	r24, 0x05	; 5
    27a8:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    27ac:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
<<<<<<< Updated upstream
    2b32:	80 34       	cpi	r24, 0x40	; 64
    2b34:	2b e0       	ldi	r18, 0x0B	; 11
    2b36:	92 07       	cpc	r25, r18
    2b38:	29 f4       	brne	.+10     	; 0x2b44 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2b3a:	62 e0       	ldi	r22, 0x02	; 2
    2b3c:	86 e0       	ldi	r24, 0x06	; 6
    2b3e:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b42:	08 95       	ret
=======
    27ae:	80 34       	cpi	r24, 0x40	; 64
    27b0:	2b e0       	ldi	r18, 0x0B	; 11
    27b2:	92 07       	cpc	r25, r18
    27b4:	29 f4       	brne	.+10     	; 0x27c0 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    27b6:	62 e0       	ldi	r22, 0x02	; 2
    27b8:	86 e0       	ldi	r24, 0x06	; 6
    27ba:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    27be:	08 95       	ret
>>>>>>> Stashed changes
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
<<<<<<< Updated upstream
    2b44:	80 39       	cpi	r24, 0x90	; 144
    2b46:	28 e0       	ldi	r18, 0x08	; 8
    2b48:	92 07       	cpc	r25, r18
    2b4a:	29 f4       	brne	.+10     	; 0x2b56 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2b4c:	64 e0       	ldi	r22, 0x04	; 4
    2b4e:	83 e0       	ldi	r24, 0x03	; 3
    2b50:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b54:	08 95       	ret
=======
    27c0:	80 39       	cpi	r24, 0x90	; 144
    27c2:	28 e0       	ldi	r18, 0x08	; 8
    27c4:	92 07       	cpc	r25, r18
    27c6:	29 f4       	brne	.+10     	; 0x27d2 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    27c8:	64 e0       	ldi	r22, 0x04	; 4
    27ca:	83 e0       	ldi	r24, 0x03	; 3
    27cc:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    27d0:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
<<<<<<< Updated upstream
    2b56:	80 39       	cpi	r24, 0x90	; 144
    2b58:	29 e0       	ldi	r18, 0x09	; 9
    2b5a:	92 07       	cpc	r25, r18
    2b5c:	29 f4       	brne	.+10     	; 0x2b68 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2b5e:	64 e0       	ldi	r22, 0x04	; 4
    2b60:	84 e0       	ldi	r24, 0x04	; 4
    2b62:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b66:	08 95       	ret
=======
    27d2:	80 39       	cpi	r24, 0x90	; 144
    27d4:	29 e0       	ldi	r18, 0x09	; 9
    27d6:	92 07       	cpc	r25, r18
    27d8:	29 f4       	brne	.+10     	; 0x27e4 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    27da:	64 e0       	ldi	r22, 0x04	; 4
    27dc:	84 e0       	ldi	r24, 0x04	; 4
    27de:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    27e2:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
<<<<<<< Updated upstream
    2b68:	80 39       	cpi	r24, 0x90	; 144
    2b6a:	2a e0       	ldi	r18, 0x0A	; 10
    2b6c:	92 07       	cpc	r25, r18
    2b6e:	29 f4       	brne	.+10     	; 0x2b7a <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2b70:	64 e0       	ldi	r22, 0x04	; 4
    2b72:	85 e0       	ldi	r24, 0x05	; 5
    2b74:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b78:	08 95       	ret
=======
    27e4:	80 39       	cpi	r24, 0x90	; 144
    27e6:	2a e0       	ldi	r18, 0x0A	; 10
    27e8:	92 07       	cpc	r25, r18
    27ea:	29 f4       	brne	.+10     	; 0x27f6 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    27ec:	64 e0       	ldi	r22, 0x04	; 4
    27ee:	85 e0       	ldi	r24, 0x05	; 5
    27f0:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    27f4:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
<<<<<<< Updated upstream
    2b7a:	80 39       	cpi	r24, 0x90	; 144
    2b7c:	2b e0       	ldi	r18, 0x0B	; 11
    2b7e:	92 07       	cpc	r25, r18
    2b80:	29 f4       	brne	.+10     	; 0x2b8c <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2b82:	64 e0       	ldi	r22, 0x04	; 4
    2b84:	86 e0       	ldi	r24, 0x06	; 6
    2b86:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b8a:	08 95       	ret
=======
    27f6:	80 39       	cpi	r24, 0x90	; 144
    27f8:	2b e0       	ldi	r18, 0x0B	; 11
    27fa:	92 07       	cpc	r25, r18
    27fc:	29 f4       	brne	.+10     	; 0x2808 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    27fe:	64 e0       	ldi	r22, 0x04	; 4
    2800:	86 e0       	ldi	r24, 0x06	; 6
    2802:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2806:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
<<<<<<< Updated upstream
    2b8c:	80 3c       	cpi	r24, 0xC0	; 192
    2b8e:	28 e0       	ldi	r18, 0x08	; 8
    2b90:	92 07       	cpc	r25, r18
    2b92:	29 f4       	brne	.+10     	; 0x2b9e <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2b94:	68 e0       	ldi	r22, 0x08	; 8
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2b9c:	08 95       	ret
=======
    2808:	80 3c       	cpi	r24, 0xC0	; 192
    280a:	28 e0       	ldi	r18, 0x08	; 8
    280c:	92 07       	cpc	r25, r18
    280e:	29 f4       	brne	.+10     	; 0x281a <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2810:	68 e0       	ldi	r22, 0x08	; 8
    2812:	83 e0       	ldi	r24, 0x03	; 3
    2814:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2818:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
<<<<<<< Updated upstream
    2b9e:	80 3c       	cpi	r24, 0xC0	; 192
    2ba0:	29 e0       	ldi	r18, 0x09	; 9
    2ba2:	92 07       	cpc	r25, r18
    2ba4:	29 f4       	brne	.+10     	; 0x2bb0 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2ba6:	68 e0       	ldi	r22, 0x08	; 8
    2ba8:	84 e0       	ldi	r24, 0x04	; 4
    2baa:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2bae:	08 95       	ret
=======
    281a:	80 3c       	cpi	r24, 0xC0	; 192
    281c:	29 e0       	ldi	r18, 0x09	; 9
    281e:	92 07       	cpc	r25, r18
    2820:	29 f4       	brne	.+10     	; 0x282c <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2822:	68 e0       	ldi	r22, 0x08	; 8
    2824:	84 e0       	ldi	r24, 0x04	; 4
    2826:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    282a:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
<<<<<<< Updated upstream
    2bb0:	80 3c       	cpi	r24, 0xC0	; 192
    2bb2:	2a e0       	ldi	r18, 0x0A	; 10
    2bb4:	92 07       	cpc	r25, r18
    2bb6:	29 f4       	brne	.+10     	; 0x2bc2 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2bb8:	68 e0       	ldi	r22, 0x08	; 8
    2bba:	85 e0       	ldi	r24, 0x05	; 5
    2bbc:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2bc0:	08 95       	ret
=======
    282c:	80 3c       	cpi	r24, 0xC0	; 192
    282e:	2a e0       	ldi	r18, 0x0A	; 10
    2830:	92 07       	cpc	r25, r18
    2832:	29 f4       	brne	.+10     	; 0x283e <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2834:	68 e0       	ldi	r22, 0x08	; 8
    2836:	85 e0       	ldi	r24, 0x05	; 5
    2838:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    283c:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
<<<<<<< Updated upstream
    2bc2:	80 3c       	cpi	r24, 0xC0	; 192
    2bc4:	2b e0       	ldi	r18, 0x0B	; 11
    2bc6:	92 07       	cpc	r25, r18
    2bc8:	29 f4       	brne	.+10     	; 0x2bd4 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2bca:	68 e0       	ldi	r22, 0x08	; 8
    2bcc:	86 e0       	ldi	r24, 0x06	; 6
    2bce:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2bd2:	08 95       	ret
=======
    283e:	80 3c       	cpi	r24, 0xC0	; 192
    2840:	2b e0       	ldi	r18, 0x0B	; 11
    2842:	92 07       	cpc	r25, r18
    2844:	29 f4       	brne	.+10     	; 0x2850 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2846:	68 e0       	ldi	r22, 0x08	; 8
    2848:	86 e0       	ldi	r24, 0x06	; 6
    284a:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    284e:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
<<<<<<< Updated upstream
    2bd4:	80 3a       	cpi	r24, 0xA0	; 160
    2bd6:	28 e0       	ldi	r18, 0x08	; 8
    2bd8:	92 07       	cpc	r25, r18
    2bda:	29 f4       	brne	.+10     	; 0x2be6 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2bdc:	60 e1       	ldi	r22, 0x10	; 16
    2bde:	83 e0       	ldi	r24, 0x03	; 3
    2be0:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2be4:	08 95       	ret
=======
    2850:	80 3a       	cpi	r24, 0xA0	; 160
    2852:	28 e0       	ldi	r18, 0x08	; 8
    2854:	92 07       	cpc	r25, r18
    2856:	29 f4       	brne	.+10     	; 0x2862 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2858:	60 e1       	ldi	r22, 0x10	; 16
    285a:	83 e0       	ldi	r24, 0x03	; 3
    285c:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2860:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
<<<<<<< Updated upstream
    2be6:	80 3a       	cpi	r24, 0xA0	; 160
    2be8:	29 e0       	ldi	r18, 0x09	; 9
    2bea:	92 07       	cpc	r25, r18
    2bec:	29 f4       	brne	.+10     	; 0x2bf8 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2bee:	60 e1       	ldi	r22, 0x10	; 16
    2bf0:	84 e0       	ldi	r24, 0x04	; 4
    2bf2:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2bf6:	08 95       	ret
=======
    2862:	80 3a       	cpi	r24, 0xA0	; 160
    2864:	29 e0       	ldi	r18, 0x09	; 9
    2866:	92 07       	cpc	r25, r18
    2868:	29 f4       	brne	.+10     	; 0x2874 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    286a:	60 e1       	ldi	r22, 0x10	; 16
    286c:	84 e0       	ldi	r24, 0x04	; 4
    286e:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2872:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
<<<<<<< Updated upstream
    2bf8:	80 3a       	cpi	r24, 0xA0	; 160
    2bfa:	2a e0       	ldi	r18, 0x0A	; 10
    2bfc:	92 07       	cpc	r25, r18
    2bfe:	29 f4       	brne	.+10     	; 0x2c0a <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2c00:	60 e1       	ldi	r22, 0x10	; 16
    2c02:	85 e0       	ldi	r24, 0x05	; 5
    2c04:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c08:	08 95       	ret
=======
    2874:	80 3a       	cpi	r24, 0xA0	; 160
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	92 07       	cpc	r25, r18
    287a:	29 f4       	brne	.+10     	; 0x2886 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    287c:	60 e1       	ldi	r22, 0x10	; 16
    287e:	85 e0       	ldi	r24, 0x05	; 5
    2880:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2884:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
<<<<<<< Updated upstream
    2c0a:	80 3a       	cpi	r24, 0xA0	; 160
    2c0c:	2b e0       	ldi	r18, 0x0B	; 11
    2c0e:	92 07       	cpc	r25, r18
    2c10:	29 f4       	brne	.+10     	; 0x2c1c <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2c12:	60 e1       	ldi	r22, 0x10	; 16
    2c14:	86 e0       	ldi	r24, 0x06	; 6
    2c16:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c1a:	08 95       	ret
=======
    2886:	80 3a       	cpi	r24, 0xA0	; 160
    2888:	2b e0       	ldi	r18, 0x0B	; 11
    288a:	92 07       	cpc	r25, r18
    288c:	29 f4       	brne	.+10     	; 0x2898 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    288e:	60 e1       	ldi	r22, 0x10	; 16
    2890:	86 e0       	ldi	r24, 0x06	; 6
    2892:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2896:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
<<<<<<< Updated upstream
    2c1c:	80 3b       	cpi	r24, 0xB0	; 176
    2c1e:	28 e0       	ldi	r18, 0x08	; 8
    2c20:	92 07       	cpc	r25, r18
    2c22:	29 f4       	brne	.+10     	; 0x2c2e <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2c24:	60 e2       	ldi	r22, 0x20	; 32
    2c26:	83 e0       	ldi	r24, 0x03	; 3
    2c28:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c2c:	08 95       	ret
=======
    2898:	80 3b       	cpi	r24, 0xB0	; 176
    289a:	28 e0       	ldi	r18, 0x08	; 8
    289c:	92 07       	cpc	r25, r18
    289e:	29 f4       	brne	.+10     	; 0x28aa <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    28a0:	60 e2       	ldi	r22, 0x20	; 32
    28a2:	83 e0       	ldi	r24, 0x03	; 3
    28a4:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    28a8:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
<<<<<<< Updated upstream
    2c2e:	80 3b       	cpi	r24, 0xB0	; 176
    2c30:	29 e0       	ldi	r18, 0x09	; 9
    2c32:	92 07       	cpc	r25, r18
    2c34:	29 f4       	brne	.+10     	; 0x2c40 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2c36:	60 e2       	ldi	r22, 0x20	; 32
    2c38:	84 e0       	ldi	r24, 0x04	; 4
    2c3a:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c3e:	08 95       	ret
=======
    28aa:	80 3b       	cpi	r24, 0xB0	; 176
    28ac:	29 e0       	ldi	r18, 0x09	; 9
    28ae:	92 07       	cpc	r25, r18
    28b0:	29 f4       	brne	.+10     	; 0x28bc <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    28b2:	60 e2       	ldi	r22, 0x20	; 32
    28b4:	84 e0       	ldi	r24, 0x04	; 4
    28b6:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    28ba:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
<<<<<<< Updated upstream
    2c40:	80 3b       	cpi	r24, 0xB0	; 176
    2c42:	2a e0       	ldi	r18, 0x0A	; 10
    2c44:	92 07       	cpc	r25, r18
    2c46:	29 f4       	brne	.+10     	; 0x2c52 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2c48:	60 e2       	ldi	r22, 0x20	; 32
    2c4a:	85 e0       	ldi	r24, 0x05	; 5
    2c4c:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c50:	08 95       	ret
=======
    28bc:	80 3b       	cpi	r24, 0xB0	; 176
    28be:	2a e0       	ldi	r18, 0x0A	; 10
    28c0:	92 07       	cpc	r25, r18
    28c2:	29 f4       	brne	.+10     	; 0x28ce <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    28c4:	60 e2       	ldi	r22, 0x20	; 32
    28c6:	85 e0       	ldi	r24, 0x05	; 5
    28c8:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    28cc:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
<<<<<<< Updated upstream
    2c52:	80 3b       	cpi	r24, 0xB0	; 176
    2c54:	2b e0       	ldi	r18, 0x0B	; 11
    2c56:	92 07       	cpc	r25, r18
    2c58:	29 f4       	brne	.+10     	; 0x2c64 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2c5a:	60 e2       	ldi	r22, 0x20	; 32
    2c5c:	86 e0       	ldi	r24, 0x06	; 6
    2c5e:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c62:	08 95       	ret
=======
    28ce:	80 3b       	cpi	r24, 0xB0	; 176
    28d0:	2b e0       	ldi	r18, 0x0B	; 11
    28d2:	92 07       	cpc	r25, r18
    28d4:	29 f4       	brne	.+10     	; 0x28e0 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    28d6:	60 e2       	ldi	r22, 0x20	; 32
    28d8:	86 e0       	ldi	r24, 0x06	; 6
    28da:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    28de:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
<<<<<<< Updated upstream
    2c64:	80 38       	cpi	r24, 0x80	; 128
    2c66:	24 e0       	ldi	r18, 0x04	; 4
    2c68:	92 07       	cpc	r25, r18
    2c6a:	29 f4       	brne	.+10     	; 0x2c76 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2c6c:	60 e4       	ldi	r22, 0x40	; 64
    2c6e:	83 e0       	ldi	r24, 0x03	; 3
    2c70:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c74:	08 95       	ret
=======
    28e0:	80 38       	cpi	r24, 0x80	; 128
    28e2:	24 e0       	ldi	r18, 0x04	; 4
    28e4:	92 07       	cpc	r25, r18
    28e6:	29 f4       	brne	.+10     	; 0x28f2 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    28e8:	60 e4       	ldi	r22, 0x40	; 64
    28ea:	83 e0       	ldi	r24, 0x03	; 3
    28ec:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    28f0:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
<<<<<<< Updated upstream
    2c76:	80 39       	cpi	r24, 0x90	; 144
    2c78:	24 e0       	ldi	r18, 0x04	; 4
    2c7a:	92 07       	cpc	r25, r18
    2c7c:	29 f4       	brne	.+10     	; 0x2c88 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2c7e:	60 e4       	ldi	r22, 0x40	; 64
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c86:	08 95       	ret
=======
    28f2:	80 39       	cpi	r24, 0x90	; 144
    28f4:	24 e0       	ldi	r18, 0x04	; 4
    28f6:	92 07       	cpc	r25, r18
    28f8:	29 f4       	brne	.+10     	; 0x2904 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    28fa:	60 e4       	ldi	r22, 0x40	; 64
    28fc:	84 e0       	ldi	r24, 0x04	; 4
    28fe:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2902:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
<<<<<<< Updated upstream
    2c88:	80 3a       	cpi	r24, 0xA0	; 160
    2c8a:	24 e0       	ldi	r18, 0x04	; 4
    2c8c:	92 07       	cpc	r25, r18
    2c8e:	29 f4       	brne	.+10     	; 0x2c9a <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2c90:	60 e4       	ldi	r22, 0x40	; 64
    2c92:	85 e0       	ldi	r24, 0x05	; 5
    2c94:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2c98:	08 95       	ret
=======
    2904:	80 3a       	cpi	r24, 0xA0	; 160
    2906:	24 e0       	ldi	r18, 0x04	; 4
    2908:	92 07       	cpc	r25, r18
    290a:	29 f4       	brne	.+10     	; 0x2916 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    290c:	60 e4       	ldi	r22, 0x40	; 64
    290e:	85 e0       	ldi	r24, 0x05	; 5
    2910:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2914:	08 95       	ret
>>>>>>> Stashed changes
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
<<<<<<< Updated upstream
    2c9a:	80 3b       	cpi	r24, 0xB0	; 176
    2c9c:	94 40       	sbci	r25, 0x04	; 4
    2c9e:	21 f4       	brne	.+8      	; 0x2ca8 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2ca0:	60 e4       	ldi	r22, 0x40	; 64
    2ca2:	86 e0       	ldi	r24, 0x06	; 6
    2ca4:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
    2ca8:	08 95       	ret

00002caa <_Z12IO_ReadWritebh>:
=======
    2916:	80 3b       	cpi	r24, 0xB0	; 176
    2918:	94 40       	sbci	r25, 0x04	; 4
    291a:	21 f4       	brne	.+8      	; 0x2924 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    291c:	60 e4       	ldi	r22, 0x40	; 64
    291e:	86 e0       	ldi	r24, 0x06	; 6
    2920:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
    2924:	08 95       	ret

00002926 <_Z12IO_ReadWritebh>:
>>>>>>> Stashed changes

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
<<<<<<< Updated upstream
    2caa:	28 2f       	mov	r18, r24
	switch(io_port)
    2cac:	86 2f       	mov	r24, r22
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	31 97       	sbiw	r30, 0x01	; 1
    2cb4:	ec 30       	cpi	r30, 0x0C	; 12
    2cb6:	f1 05       	cpc	r31, r1
    2cb8:	08 f0       	brcs	.+2      	; 0x2cbc <_Z12IO_ReadWritebh+0x12>
    2cba:	b6 c0       	rjmp	.+364    	; 0x2e28 <_Z12IO_ReadWritebh+0x17e>
    2cbc:	88 27       	eor	r24, r24
    2cbe:	e6 5f       	subi	r30, 0xF6	; 246
    2cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    2cc4:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__tablejump2__>
	{
		case 1:
		if (value == true)
    2cc8:	22 23       	and	r18, r18
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <_Z12IO_ReadWritebh+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    2ccc:	80 e8       	ldi	r24, 0x80	; 128
    2cce:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <_Z12IO_ReadWritebh+0x30>
=======
    2926:	28 2f       	mov	r18, r24
	switch(io_port)
    2928:	86 2f       	mov	r24, r22
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	fc 01       	movw	r30, r24
    292e:	31 97       	sbiw	r30, 0x01	; 1
    2930:	ec 30       	cpi	r30, 0x0C	; 12
    2932:	f1 05       	cpc	r31, r1
    2934:	08 f0       	brcs	.+2      	; 0x2938 <_Z12IO_ReadWritebh+0x12>
    2936:	b6 c0       	rjmp	.+364    	; 0x2aa4 <_Z12IO_ReadWritebh+0x17e>
    2938:	88 27       	eor	r24, r24
    293a:	e2 50       	subi	r30, 0x02	; 2
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	8f 4f       	sbci	r24, 0xFF	; 255
    2940:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__tablejump2__>
	{
		case 1:
		if (value == true)
    2944:	22 23       	and	r18, r18
    2946:	21 f0       	breq	.+8      	; 0x2950 <_Z12IO_ReadWritebh+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    2948:	80 e8       	ldi	r24, 0x80	; 128
    294a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <_Z12IO_ReadWritebh+0x30>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
<<<<<<< Updated upstream
    2cd4:	80 e8       	ldi	r24, 0x80	; 128
    2cd6:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    2cda:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2cde:	88 1f       	adc	r24, r24
    2ce0:	88 27       	eor	r24, r24
    2ce2:	88 1f       	adc	r24, r24
    2ce4:	08 95       	ret
=======
    2950:	80 e8       	ldi	r24, 0x80	; 128
    2952:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    2956:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    295a:	88 1f       	adc	r24, r24
    295c:	88 27       	eor	r24, r24
    295e:	88 1f       	adc	r24, r24
    2960:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 2:
		if (value == true)
<<<<<<< Updated upstream
    2ce6:	22 23       	and	r18, r18
    2ce8:	21 f0       	breq	.+8      	; 0x2cf2 <_Z12IO_ReadWritebh+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    2cea:	80 e4       	ldi	r24, 0x40	; 64
    2cec:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <_Z12IO_ReadWritebh+0x4e>
=======
    2962:	22 23       	and	r18, r18
    2964:	21 f0       	breq	.+8      	; 0x296e <_Z12IO_ReadWritebh+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    2966:	80 e4       	ldi	r24, 0x40	; 64
    2968:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <_Z12IO_ReadWritebh+0x4e>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
<<<<<<< Updated upstream
    2cf2:	80 e4       	ldi	r24, 0x40	; 64
    2cf4:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    2cf8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2cfc:	86 fb       	bst	r24, 6
    2cfe:	88 27       	eor	r24, r24
    2d00:	80 f9       	bld	r24, 0
    2d02:	08 95       	ret
=======
    296e:	80 e4       	ldi	r24, 0x40	; 64
    2970:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    2974:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2978:	86 fb       	bst	r24, 6
    297a:	88 27       	eor	r24, r24
    297c:	80 f9       	bld	r24, 0
    297e:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 3:
		if (value == true)
<<<<<<< Updated upstream
    2d04:	22 23       	and	r18, r18
    2d06:	21 f0       	breq	.+8      	; 0x2d10 <_Z12IO_ReadWritebh+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    2d08:	80 e2       	ldi	r24, 0x20	; 32
    2d0a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d0e:	03 c0       	rjmp	.+6      	; 0x2d16 <_Z12IO_ReadWritebh+0x6c>
=======
    2980:	22 23       	and	r18, r18
    2982:	21 f0       	breq	.+8      	; 0x298c <_Z12IO_ReadWritebh+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    2984:	80 e2       	ldi	r24, 0x20	; 32
    2986:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    298a:	03 c0       	rjmp	.+6      	; 0x2992 <_Z12IO_ReadWritebh+0x6c>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
<<<<<<< Updated upstream
    2d10:	80 e2       	ldi	r24, 0x20	; 32
    2d12:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    2d16:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d1a:	85 fb       	bst	r24, 5
    2d1c:	88 27       	eor	r24, r24
    2d1e:	80 f9       	bld	r24, 0
    2d20:	08 95       	ret
=======
    298c:	80 e2       	ldi	r24, 0x20	; 32
    298e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    2992:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2996:	85 fb       	bst	r24, 5
    2998:	88 27       	eor	r24, r24
    299a:	80 f9       	bld	r24, 0
    299c:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 4: //Lift limit switches
		if (value == true)
<<<<<<< Updated upstream
    2d22:	22 23       	and	r18, r18
    2d24:	21 f0       	breq	.+8      	; 0x2d2e <_Z12IO_ReadWritebh+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    2d26:	80 e1       	ldi	r24, 0x10	; 16
    2d28:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d2c:	03 c0       	rjmp	.+6      	; 0x2d34 <_Z12IO_ReadWritebh+0x8a>
=======
    299e:	22 23       	and	r18, r18
    29a0:	21 f0       	breq	.+8      	; 0x29aa <_Z12IO_ReadWritebh+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    29a2:	80 e1       	ldi	r24, 0x10	; 16
    29a4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <_Z12IO_ReadWritebh+0x8a>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
<<<<<<< Updated upstream
    2d2e:	80 e1       	ldi	r24, 0x10	; 16
    2d30:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    2d34:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d38:	82 95       	swap	r24
    2d3a:	81 70       	andi	r24, 0x01	; 1
    2d3c:	08 95       	ret
=======
    29aa:	80 e1       	ldi	r24, 0x10	; 16
    29ac:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    29b0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    29b4:	82 95       	swap	r24
    29b6:	81 70       	andi	r24, 0x01	; 1
    29b8:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 5:
		if (value == true)
<<<<<<< Updated upstream
    2d3e:	22 23       	and	r18, r18
    2d40:	21 f0       	breq	.+8      	; 0x2d4a <_Z12IO_ReadWritebh+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    2d42:	88 e0       	ldi	r24, 0x08	; 8
    2d44:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d48:	03 c0       	rjmp	.+6      	; 0x2d50 <_Z12IO_ReadWritebh+0xa6>
=======
    29ba:	22 23       	and	r18, r18
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <_Z12IO_ReadWritebh+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    29be:	88 e0       	ldi	r24, 0x08	; 8
    29c0:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <_Z12IO_ReadWritebh+0xa6>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
<<<<<<< Updated upstream
    2d4a:	88 e0       	ldi	r24, 0x08	; 8
    2d4c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    2d50:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d54:	83 fb       	bst	r24, 3
    2d56:	88 27       	eor	r24, r24
    2d58:	80 f9       	bld	r24, 0
    2d5a:	08 95       	ret
=======
    29c6:	88 e0       	ldi	r24, 0x08	; 8
    29c8:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    29cc:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    29d0:	83 fb       	bst	r24, 3
    29d2:	88 27       	eor	r24, r24
    29d4:	80 f9       	bld	r24, 0
    29d6:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 6:
		if (value == true)
<<<<<<< Updated upstream
    2d5c:	22 23       	and	r18, r18
    2d5e:	21 f0       	breq	.+8      	; 0x2d68 <_Z12IO_ReadWritebh+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    2d60:	84 e0       	ldi	r24, 0x04	; 4
    2d62:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <_Z12IO_ReadWritebh+0xc4>
=======
    29d8:	22 23       	and	r18, r18
    29da:	21 f0       	breq	.+8      	; 0x29e4 <_Z12IO_ReadWritebh+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <_Z12IO_ReadWritebh+0xc4>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
<<<<<<< Updated upstream
    2d68:	84 e0       	ldi	r24, 0x04	; 4
    2d6a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    2d6e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d72:	82 fb       	bst	r24, 2
    2d74:	88 27       	eor	r24, r24
    2d76:	80 f9       	bld	r24, 0
    2d78:	08 95       	ret
=======
    29e4:	84 e0       	ldi	r24, 0x04	; 4
    29e6:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    29ea:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    29ee:	82 fb       	bst	r24, 2
    29f0:	88 27       	eor	r24, r24
    29f2:	80 f9       	bld	r24, 0
    29f4:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 7:
		if (value == true)
<<<<<<< Updated upstream
    2d7a:	22 23       	and	r18, r18
    2d7c:	21 f0       	breq	.+8      	; 0x2d86 <_Z12IO_ReadWritebh+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d84:	03 c0       	rjmp	.+6      	; 0x2d8c <_Z12IO_ReadWritebh+0xe2>
=======
    29f6:	22 23       	and	r18, r18
    29f8:	21 f0       	breq	.+8      	; 0x2a02 <_Z12IO_ReadWritebh+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    29fa:	82 e0       	ldi	r24, 0x02	; 2
    29fc:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a00:	03 c0       	rjmp	.+6      	; 0x2a08 <_Z12IO_ReadWritebh+0xe2>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
<<<<<<< Updated upstream
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    2d8c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d90:	86 95       	lsr	r24
    2d92:	81 70       	andi	r24, 0x01	; 1
    2d94:	08 95       	ret
=======
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    2a08:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a0c:	86 95       	lsr	r24
    2a0e:	81 70       	andi	r24, 0x01	; 1
    2a10:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 8:
		if (value == true)
<<<<<<< Updated upstream
    2d96:	22 23       	and	r18, r18
    2d98:	21 f0       	breq	.+8      	; 0x2da2 <_Z12IO_ReadWritebh+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2da0:	03 c0       	rjmp	.+6      	; 0x2da8 <_Z12IO_ReadWritebh+0xfe>
=======
    2a12:	22 23       	and	r18, r18
    2a14:	21 f0       	breq	.+8      	; 0x2a1e <_Z12IO_ReadWritebh+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a1c:	03 c0       	rjmp	.+6      	; 0x2a24 <_Z12IO_ReadWritebh+0xfe>
>>>>>>> Stashed changes
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
<<<<<<< Updated upstream
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    2da8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2dac:	81 70       	andi	r24, 0x01	; 1
    2dae:	08 95       	ret
=======
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    2a24:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a28:	81 70       	andi	r24, 0x01	; 1
    2a2a:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 9:
		if (value == true)
<<<<<<< Updated upstream
    2db0:	22 23       	and	r18, r18
    2db2:	21 f0       	breq	.+8      	; 0x2dbc <_Z12IO_ReadWritebh+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    2db4:	80 e8       	ldi	r24, 0x80	; 128
    2db6:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2dba:	03 c0       	rjmp	.+6      	; 0x2dc2 <_Z12IO_ReadWritebh+0x118>
=======
    2a2c:	22 23       	and	r18, r18
    2a2e:	21 f0       	breq	.+8      	; 0x2a38 <_Z12IO_ReadWritebh+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    2a30:	80 e8       	ldi	r24, 0x80	; 128
    2a32:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2a36:	03 c0       	rjmp	.+6      	; 0x2a3e <_Z12IO_ReadWritebh+0x118>
>>>>>>> Stashed changes
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
<<<<<<< Updated upstream
    2dbc:	80 e8       	ldi	r24, 0x80	; 128
    2dbe:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    2dc2:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	88 27       	eor	r24, r24
    2dca:	88 1f       	adc	r24, r24
    2dcc:	08 95       	ret
=======
    2a38:	80 e8       	ldi	r24, 0x80	; 128
    2a3a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    2a3e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2a42:	88 1f       	adc	r24, r24
    2a44:	88 27       	eor	r24, r24
    2a46:	88 1f       	adc	r24, r24
    2a48:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 10:
		if (value == true)
<<<<<<< Updated upstream
    2dce:	22 23       	and	r18, r18
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <_Z12IO_ReadWritebh+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    2dd2:	80 e4       	ldi	r24, 0x40	; 64
    2dd4:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <_Z12IO_ReadWritebh+0x136>
=======
    2a4a:	22 23       	and	r18, r18
    2a4c:	21 f0       	breq	.+8      	; 0x2a56 <_Z12IO_ReadWritebh+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    2a4e:	80 e4       	ldi	r24, 0x40	; 64
    2a50:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <_Z12IO_ReadWritebh+0x136>
>>>>>>> Stashed changes
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
<<<<<<< Updated upstream
    2dda:	80 e4       	ldi	r24, 0x40	; 64
    2ddc:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    2de0:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2de4:	86 fb       	bst	r24, 6
    2de6:	88 27       	eor	r24, r24
    2de8:	80 f9       	bld	r24, 0
    2dea:	08 95       	ret
=======
    2a56:	80 e4       	ldi	r24, 0x40	; 64
    2a58:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    2a5c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2a60:	86 fb       	bst	r24, 6
    2a62:	88 27       	eor	r24, r24
    2a64:	80 f9       	bld	r24, 0
    2a66:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 11:
		if (value == true)
<<<<<<< Updated upstream
    2dec:	22 23       	and	r18, r18
    2dee:	21 f0       	breq	.+8      	; 0x2df8 <_Z12IO_ReadWritebh+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    2df0:	80 e8       	ldi	r24, 0x80	; 128
    2df2:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2df6:	03 c0       	rjmp	.+6      	; 0x2dfe <_Z12IO_ReadWritebh+0x154>
=======
    2a68:	22 23       	and	r18, r18
    2a6a:	21 f0       	breq	.+8      	; 0x2a74 <_Z12IO_ReadWritebh+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    2a6c:	80 e8       	ldi	r24, 0x80	; 128
    2a6e:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2a72:	03 c0       	rjmp	.+6      	; 0x2a7a <_Z12IO_ReadWritebh+0x154>
>>>>>>> Stashed changes
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
<<<<<<< Updated upstream
    2df8:	80 e8       	ldi	r24, 0x80	; 128
    2dfa:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    2dfe:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2e02:	88 1f       	adc	r24, r24
    2e04:	88 27       	eor	r24, r24
    2e06:	88 1f       	adc	r24, r24
    2e08:	08 95       	ret
=======
    2a74:	80 e8       	ldi	r24, 0x80	; 128
    2a76:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    2a7a:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2a7e:	88 1f       	adc	r24, r24
    2a80:	88 27       	eor	r24, r24
    2a82:	88 1f       	adc	r24, r24
    2a84:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 12:
		if (value == true)
<<<<<<< Updated upstream
    2e0a:	22 23       	and	r18, r18
    2e0c:	21 f0       	breq	.+8      	; 0x2e16 <_Z12IO_ReadWritebh+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    2e0e:	80 e4       	ldi	r24, 0x40	; 64
    2e10:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2e14:	03 c0       	rjmp	.+6      	; 0x2e1c <_Z12IO_ReadWritebh+0x172>
=======
    2a86:	22 23       	and	r18, r18
    2a88:	21 f0       	breq	.+8      	; 0x2a92 <_Z12IO_ReadWritebh+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    2a8a:	80 e4       	ldi	r24, 0x40	; 64
    2a8c:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <_Z12IO_ReadWritebh+0x172>
>>>>>>> Stashed changes
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
<<<<<<< Updated upstream
    2e16:	80 e4       	ldi	r24, 0x40	; 64
    2e18:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    2e1c:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2e20:	86 fb       	bst	r24, 6
    2e22:	88 27       	eor	r24, r24
    2e24:	80 f9       	bld	r24, 0
    2e26:	08 95       	ret
=======
    2a92:	80 e4       	ldi	r24, 0x40	; 64
    2a94:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    2a98:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2a9c:	86 fb       	bst	r24, 6
    2a9e:	88 27       	eor	r24, r24
    2aa0:	80 f9       	bld	r24, 0
    2aa2:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
	}
	return 0;
<<<<<<< Updated upstream
    2e28:	80 e0       	ldi	r24, 0x00	; 0
}
    2e2a:	08 95       	ret

00002e2c <_Z11DigitalReadi>:
=======
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
}
    2aa6:	08 95       	ret

00002aa8 <_Z11DigitalReadi>:
>>>>>>> Stashed changes
void ToggleLED();
void LED(bool i);
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
<<<<<<< Updated upstream
    2e2c:	68 2f       	mov	r22, r24
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	0e 94 55 16 	call	0x2caa	; 0x2caa <_Z12IO_ReadWritebh>
    2e34:	08 95       	ret

00002e36 <_Z17ReadSignatureBytej>:
=======
    2aa8:	68 2f       	mov	r22, r24
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	0e 94 93 14 	call	0x2926	; 0x2926 <_Z12IO_ReadWritebh>
    2ab0:	08 95       	ret

00002ab2 <_Z17ReadSignatureBytej>:
>>>>>>> Stashed changes

uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin);

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
<<<<<<< Updated upstream
    2e36:	aa ec       	ldi	r26, 0xCA	; 202
    2e38:	b1 e0       	ldi	r27, 0x01	; 1
    2e3a:	22 e0       	ldi	r18, 0x02	; 2
    2e3c:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    2e3e:	fc 01       	movw	r30, r24
    2e40:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2e42:	1c 92       	st	X, r1
	return Result;
}
    2e44:	08 95       	ret

00002e46 <_Z12I_AnalogReadR13ADC_CH_structh>:
=======
    2ab2:	aa ec       	ldi	r26, 0xCA	; 202
    2ab4:	b1 e0       	ldi	r27, 0x01	; 1
    2ab6:	22 e0       	ldi	r18, 0x02	; 2
    2ab8:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    2aba:	fc 01       	movw	r30, r24
    2abc:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2abe:	1c 92       	st	X, r1
	return Result;
}
    2ac0:	08 95       	ret

00002ac2 <_Z12I_AnalogReadR13ADC_CH_structh>:
>>>>>>> Stashed changes
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
	}
}

uint8_t I_AnalogRead(ADC_CH_struct &CH, uint8_t pin) {
<<<<<<< Updated upstream
    2e46:	fc 01       	movw	r30, r24
	switch(pin)
    2e48:	63 30       	cpi	r22, 0x03	; 3
    2e4a:	89 f0       	breq	.+34     	; 0x2e6e <_Z12I_AnalogReadR13ADC_CH_structh+0x28>
    2e4c:	28 f4       	brcc	.+10     	; 0x2e58 <_Z12I_AnalogReadR13ADC_CH_structh+0x12>
    2e4e:	61 30       	cpi	r22, 0x01	; 1
    2e50:	41 f0       	breq	.+16     	; 0x2e62 <_Z12I_AnalogReadR13ADC_CH_structh+0x1c>
    2e52:	62 30       	cpi	r22, 0x02	; 2
    2e54:	49 f0       	breq	.+18     	; 0x2e68 <_Z12I_AnalogReadR13ADC_CH_structh+0x22>
    2e56:	1d c0       	rjmp	.+58     	; 0x2e92 <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
    2e58:	64 30       	cpi	r22, 0x04	; 4
    2e5a:	61 f0       	breq	.+24     	; 0x2e74 <_Z12I_AnalogReadR13ADC_CH_structh+0x2e>
    2e5c:	65 30       	cpi	r22, 0x05	; 5
    2e5e:	69 f0       	breq	.+26     	; 0x2e7a <_Z12I_AnalogReadR13ADC_CH_structh+0x34>
    2e60:	18 c0       	rjmp	.+48     	; 0x2e92 <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
=======
    2ac2:	fc 01       	movw	r30, r24
	switch(pin)
    2ac4:	63 30       	cpi	r22, 0x03	; 3
    2ac6:	89 f0       	breq	.+34     	; 0x2aea <_Z12I_AnalogReadR13ADC_CH_structh+0x28>
    2ac8:	28 f4       	brcc	.+10     	; 0x2ad4 <_Z12I_AnalogReadR13ADC_CH_structh+0x12>
    2aca:	61 30       	cpi	r22, 0x01	; 1
    2acc:	41 f0       	breq	.+16     	; 0x2ade <_Z12I_AnalogReadR13ADC_CH_structh+0x1c>
    2ace:	62 30       	cpi	r22, 0x02	; 2
    2ad0:	49 f0       	breq	.+18     	; 0x2ae4 <_Z12I_AnalogReadR13ADC_CH_structh+0x22>
    2ad2:	1d c0       	rjmp	.+58     	; 0x2b0e <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
    2ad4:	64 30       	cpi	r22, 0x04	; 4
    2ad6:	61 f0       	breq	.+24     	; 0x2af0 <_Z12I_AnalogReadR13ADC_CH_structh+0x2e>
    2ad8:	65 30       	cpi	r22, 0x05	; 5
    2ada:	69 f0       	breq	.+26     	; 0x2af6 <_Z12I_AnalogReadR13ADC_CH_structh+0x34>
    2adc:	18 c0       	rjmp	.+48     	; 0x2b0e <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
>>>>>>> Stashed changes
	{
		//ADC_CH_MUXPOS_PIN0_gc is AREF pin (op 5v), pin lezen returned altijd >252
		case 1:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc; //select pin
<<<<<<< Updated upstream
    2e62:	88 e0       	ldi	r24, 0x08	; 8
    2e64:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e66:	0b c0       	rjmp	.+22     	; 0x2e7e <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 2:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc; //select pin
    2e68:	80 e1       	ldi	r24, 0x10	; 16
    2e6a:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e6c:	08 c0       	rjmp	.+16     	; 0x2e7e <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 3:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc; //select pin
    2e6e:	88 e1       	ldi	r24, 0x18	; 24
    2e70:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e72:	05 c0       	rjmp	.+10     	; 0x2e7e <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 4:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc; //select pin
    2e74:	80 e2       	ldi	r24, 0x20	; 32
    2e76:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
    2e7a:	88 e2       	ldi	r24, 0x28	; 40
    2e7c:	81 83       	std	Z+1, r24	; 0x01
=======
    2ade:	88 e0       	ldi	r24, 0x08	; 8
    2ae0:	81 83       	std	Z+1, r24	; 0x01
		break;
    2ae2:	0b c0       	rjmp	.+22     	; 0x2afa <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 2:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc; //select pin
    2ae4:	80 e1       	ldi	r24, 0x10	; 16
    2ae6:	81 83       	std	Z+1, r24	; 0x01
		break;
    2ae8:	08 c0       	rjmp	.+16     	; 0x2afa <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 3:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc; //select pin
    2aea:	88 e1       	ldi	r24, 0x18	; 24
    2aec:	81 83       	std	Z+1, r24	; 0x01
		break;
    2aee:	05 c0       	rjmp	.+10     	; 0x2afa <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 4:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc; //select pin
    2af0:	80 e2       	ldi	r24, 0x20	; 32
    2af2:	81 83       	std	Z+1, r24	; 0x01
		break;
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
    2af6:	88 e2       	ldi	r24, 0x28	; 40
    2af8:	81 83       	std	Z+1, r24	; 0x01
>>>>>>> Stashed changes
		default:
		return 0;
		break;
	}
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
<<<<<<< Updated upstream
    2e7e:	80 81       	ld	r24, Z
    2e80:	80 68       	ori	r24, 0x80	; 128
    2e82:	80 83       	st	Z, r24
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	90 ff       	sbrs	r25, 0
    2e88:	fd cf       	rjmp	.-6      	; 0x2e84 <_Z12I_AnalogReadR13ADC_CH_structh+0x3e>
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	83 83       	std	Z+3, r24	; 0x03
	return CH.RESL; //return lower byte result from channel (8 bit result)
    2e8e:	84 81       	ldd	r24, Z+4	; 0x04
    2e90:	08 95       	ret
=======
    2afa:	80 81       	ld	r24, Z
    2afc:	80 68       	ori	r24, 0x80	; 128
    2afe:	80 83       	st	Z, r24
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	90 ff       	sbrs	r25, 0
    2b04:	fd cf       	rjmp	.-6      	; 0x2b00 <_Z12I_AnalogReadR13ADC_CH_structh+0x3e>
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	83 83       	std	Z+3, r24	; 0x03
	return CH.RESL; //return lower byte result from channel (8 bit result)
    2b0a:	84 81       	ldd	r24, Z+4	; 0x04
    2b0c:	08 95       	ret
>>>>>>> Stashed changes
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
		break;
		
		default:
		return 0;
<<<<<<< Updated upstream
    2e92:	80 e0       	ldi	r24, 0x00	; 0
=======
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
	return CH.RESL; //return lower byte result from channel (8 bit result)
}
<<<<<<< Updated upstream
    2e94:	08 95       	ret

00002e96 <_Z12I_AnalogReadR10ADC_structh>:
=======
    2b10:	08 95       	ret

00002b12 <_Z12I_AnalogReadR10ADC_structh>:
>>>>>>> Stashed changes

//defaults to ch0
uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin) {
	return I_AnalogRead(ADC.CH0, pin);
<<<<<<< Updated upstream
    2e96:	80 96       	adiw	r24, 0x20	; 32
    2e98:	0e 94 23 17 	call	0x2e46	; 0x2e46 <_Z12I_AnalogReadR13ADC_CH_structh>
}
    2e9c:	08 95       	ret

00002e9e <_Z8ADC_InitR10ADC_struct>:
=======
    2b12:	80 96       	adiw	r24, 0x20	; 32
    2b14:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <_Z12I_AnalogReadR13ADC_CH_structh>
}
    2b18:	08 95       	ret

00002b1a <_Z8ADC_InitR10ADC_struct>:
>>>>>>> Stashed changes
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
	return Result;
}

void ADC_Init(ADC_struct &ADC) {
<<<<<<< Updated upstream
    2e9e:	0f 93       	push	r16
    2ea0:	1f 93       	push	r17
    2ea2:	cf 93       	push	r28
    2ea4:	df 93       	push	r29
    2ea6:	ec 01       	movw	r28, r24
=======
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	ec 01       	movw	r28, r24
>>>>>>> Stashed changes
	/* http://ww1.microchip.com/downloads/en/DeviceDoc/doc8077.pdf page 296 */

	//calibration data from signature row
	if (&ADC == &ADCA) {
<<<<<<< Updated upstream
    2ea8:	c1 15       	cp	r28, r1
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	d8 07       	cpc	r29, r24
    2eae:	79 f4       	brne	.+30     	; 0x2ece <_Z8ADC_InitR10ADC_struct+0x30>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCACAL0); //effect onbekend maar staat in datasheet
    2eb0:	80 b5       	in	r24, 0x20	; 32
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_Z17ReadSignatureBytej>
    2eb8:	00 e0       	ldi	r16, 0x00	; 0
    2eba:	12 e0       	ldi	r17, 0x02	; 2
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCACAL1);
    2ec0:	81 b5       	in	r24, 0x21	; 33
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_Z17ReadSignatureBytej>
    2ec8:	f8 01       	movw	r30, r16
    2eca:	85 87       	std	Z+13, r24	; 0x0d
    2ecc:	14 c0       	rjmp	.+40     	; 0x2ef6 <_Z8ADC_InitR10ADC_struct+0x58>
	} else if (&ADC == &ADCB) {
    2ece:	c0 34       	cpi	r28, 0x40	; 64
    2ed0:	f2 e0       	ldi	r31, 0x02	; 2
    2ed2:	df 07       	cpc	r29, r31
    2ed4:	79 f4       	brne	.+30     	; 0x2ef4 <_Z8ADC_InitR10ADC_struct+0x56>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCBCAL0);
    2ed6:	84 b5       	in	r24, 0x24	; 36
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_Z17ReadSignatureBytej>
    2ede:	00 e4       	ldi	r16, 0x40	; 64
    2ee0:	12 e0       	ldi	r17, 0x02	; 2
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCBCAL1);
    2ee6:	85 b5       	in	r24, 0x25	; 37
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_Z17ReadSignatureBytej>
    2eee:	f8 01       	movw	r30, r16
    2ef0:	85 87       	std	Z+13, r24	; 0x0d
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <_Z8ADC_InitR10ADC_struct+0x58>
    2ef4:	ff cf       	rjmp	.-2      	; 0x2ef4 <_Z8ADC_InitR10ADC_struct+0x56>
=======
    2b24:	c1 15       	cp	r28, r1
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	d8 07       	cpc	r29, r24
    2b2a:	79 f4       	brne	.+30     	; 0x2b4a <_Z8ADC_InitR10ADC_struct+0x30>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCACAL0); //effect onbekend maar staat in datasheet
    2b2c:	80 b5       	in	r24, 0x20	; 32
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_Z17ReadSignatureBytej>
    2b34:	00 e0       	ldi	r16, 0x00	; 0
    2b36:	12 e0       	ldi	r17, 0x02	; 2
    2b38:	f8 01       	movw	r30, r16
    2b3a:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCACAL1);
    2b3c:	81 b5       	in	r24, 0x21	; 33
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_Z17ReadSignatureBytej>
    2b44:	f8 01       	movw	r30, r16
    2b46:	85 87       	std	Z+13, r24	; 0x0d
    2b48:	14 c0       	rjmp	.+40     	; 0x2b72 <_Z8ADC_InitR10ADC_struct+0x58>
	} else if (&ADC == &ADCB) {
    2b4a:	c0 34       	cpi	r28, 0x40	; 64
    2b4c:	f2 e0       	ldi	r31, 0x02	; 2
    2b4e:	df 07       	cpc	r29, r31
    2b50:	79 f4       	brne	.+30     	; 0x2b70 <_Z8ADC_InitR10ADC_struct+0x56>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCBCAL0);
    2b52:	84 b5       	in	r24, 0x24	; 36
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_Z17ReadSignatureBytej>
    2b5a:	00 e4       	ldi	r16, 0x40	; 64
    2b5c:	12 e0       	ldi	r17, 0x02	; 2
    2b5e:	f8 01       	movw	r30, r16
    2b60:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCBCAL1);
    2b62:	85 b5       	in	r24, 0x25	; 37
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <_Z17ReadSignatureBytej>
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	85 87       	std	Z+13, r24	; 0x0d
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <_Z8ADC_InitR10ADC_struct+0x58>
    2b70:	ff cf       	rjmp	.-2      	; 0x2b70 <_Z8ADC_InitR10ADC_struct+0x56>
>>>>>>> Stashed changes
		//geef error ofzo
		while(true){}
	}
	
	//cancel any pending conversions, disable ADC
	ADC.CTRLA = ADC_FLUSH_bm;
<<<<<<< Updated upstream
    2ef6:	82 e0       	ldi	r24, 0x02	; 2
    2ef8:	88 83       	st	Y, r24
	
	//external reference on PORT A (voltage dat op AREF pin wordt gezet, het te meten voltage mag hier niet boven komen)
	ADC.REFCTRL = ADC_REFSEL_AREFA_gc;
    2efa:	80 e2       	ldi	r24, 0x20	; 32
    2efc:	8a 83       	std	Y+2, r24	; 0x02
	
	//8-bit right-adjusted result
	ADC.CTRLB = (ADC_RESOLUTION_8BIT_gc | (1<<ADC_CONMODE_bm));
    2efe:	84 e0       	ldi	r24, 0x04	; 4
    2f00:	89 83       	std	Y+1, r24	; 0x01
	
	//prescaler 128						// !willekeurig gekozen
	ADC.PRESCALER = ADC_PRESCALER_DIV64_gc;
    2f02:	8c 83       	std	Y+4, r24	; 0x04

	//enable ADC
	ADC.CTRLA |= ADC_ENABLE_bm;
    2f04:	88 81       	ld	r24, Y
    2f06:	81 60       	ori	r24, 0x01	; 1
    2f08:	88 83       	st	Y, r24
=======
    2b72:	82 e0       	ldi	r24, 0x02	; 2
    2b74:	88 83       	st	Y, r24
	
	//external reference on PORT A (voltage dat op AREF pin wordt gezet, het te meten voltage mag hier niet boven komen)
	ADC.REFCTRL = ADC_REFSEL_AREFA_gc;
    2b76:	80 e2       	ldi	r24, 0x20	; 32
    2b78:	8a 83       	std	Y+2, r24	; 0x02
	
	//8-bit right-adjusted result
	ADC.CTRLB = (ADC_RESOLUTION_8BIT_gc | (1<<ADC_CONMODE_bm));
    2b7a:	84 e0       	ldi	r24, 0x04	; 4
    2b7c:	89 83       	std	Y+1, r24	; 0x01
	
	//prescaler 128						// !willekeurig gekozen
	ADC.PRESCALER = ADC_PRESCALER_DIV64_gc;
    2b7e:	8c 83       	std	Y+4, r24	; 0x04

	//enable ADC
	ADC.CTRLA |= ADC_ENABLE_bm;
    2b80:	88 81       	ld	r24, Y
    2b82:	81 60       	ori	r24, 0x01	; 1
    2b84:	88 83       	st	Y, r24
>>>>>>> Stashed changes
	
	//result at ch0
//	ADC.CTRLA |= (0x0<<2);

	//single ended input no gain
	ADC.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
<<<<<<< Updated upstream
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	88 a3       	std	Y+32, r24	; 0x20

	//disable interrupts
	ADCA.CH0.INTCTRL = 0;
    2f0e:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
=======
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	88 a3       	std	Y+32, r24	; 0x20

	//disable interrupts
	ADCA.CH0.INTCTRL = 0;
    2b8a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
>>>>>>> Stashed changes
	
	//2 dummy reads
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
<<<<<<< Updated upstream
    2f12:	61 e0       	ldi	r22, 0x01	; 1
    2f14:	ce 01       	movw	r24, r28
    2f16:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_Z12I_AnalogReadR10ADC_structh>
    2f1a:	61 e0       	ldi	r22, 0x01	; 1
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_Z12I_AnalogReadR10ADC_structh>
	}
}
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	08 95       	ret

00002f2c <_Z15ReadSharpSensorh>:
=======
    2b8e:	61 e0       	ldi	r22, 0x01	; 1
    2b90:	ce 01       	movw	r24, r28
    2b92:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_Z12I_AnalogReadR10ADC_structh>
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	ce 01       	movw	r24, r28
    2b9a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_Z12I_AnalogReadR10ADC_structh>
	}
}
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <_Z15ReadSharpSensorh>:
>>>>>>> Stashed changes
#ifndef SHARPSENSOR_H_
#define SHARPSENSOR_H_

uint8_t ReadSharpSensor(uint8_t sensor)
{
	uint8_t val = I_AnalogRead(ADCA, sensor);
<<<<<<< Updated upstream
    2f2c:	68 2f       	mov	r22, r24
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	92 e0       	ldi	r25, 0x02	; 2
    2f32:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_Z12I_AnalogReadR10ADC_structh>
	
	switch(val)
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	fc 01       	movw	r30, r24
    2f3a:	fc 97       	sbiw	r30, 0x3c	; 60
    2f3c:	e4 3c       	cpi	r30, 0xC4	; 196
    2f3e:	f1 05       	cpc	r31, r1
    2f40:	f0 f4       	brcc	.+60     	; 0x2f7e <_Z15ReadSharpSensorh+0x52>
    2f42:	88 27       	eor	r24, r24
    2f44:	ea 5e       	subi	r30, 0xEA	; 234
    2f46:	fe 4f       	sbci	r31, 0xFE	; 254
    2f48:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4a:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__tablejump2__>
=======
    2ba8:	68 2f       	mov	r22, r24
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	92 e0       	ldi	r25, 0x02	; 2
    2bae:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_Z12I_AnalogReadR10ADC_structh>
	
	switch(val)
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	fc 97       	sbiw	r30, 0x3c	; 60
    2bb8:	e4 3c       	cpi	r30, 0xC4	; 196
    2bba:	f1 05       	cpc	r31, r1
    2bbc:	f0 f4       	brcc	.+60     	; 0x2bfa <_Z15ReadSharpSensorh+0x52>
    2bbe:	88 27       	eor	r24, r24
    2bc0:	e6 5f       	subi	r30, 0xF6	; 246
    2bc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc6:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__tablejump2__>
>>>>>>> Stashed changes
		case 250 ... 255:
		return 4; //centimeter
		break;
		
		case 245 ... 249:
		return 5; //centimeter
<<<<<<< Updated upstream
    2f4e:	85 e0       	ldi	r24, 0x05	; 5
    2f50:	08 95       	ret
=======
    2bca:	85 e0       	ldi	r24, 0x05	; 5
    2bcc:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 240 ... 244:
		return 7; //centimeter
<<<<<<< Updated upstream
    2f52:	87 e0       	ldi	r24, 0x07	; 7
    2f54:	08 95       	ret
=======
    2bce:	87 e0       	ldi	r24, 0x07	; 7
    2bd0:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 235 ... 239:
		return 8; //centimeter
<<<<<<< Updated upstream
    2f56:	88 e0       	ldi	r24, 0x08	; 8
    2f58:	08 95       	ret
=======
    2bd2:	88 e0       	ldi	r24, 0x08	; 8
    2bd4:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 230 ... 234:
		return 9; //centimeter
<<<<<<< Updated upstream
    2f5a:	89 e0       	ldi	r24, 0x09	; 9
    2f5c:	08 95       	ret
=======
    2bd6:	89 e0       	ldi	r24, 0x09	; 9
    2bd8:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 200 ... 229:
		return 10; //centimeter
<<<<<<< Updated upstream
    2f5e:	8a e0       	ldi	r24, 0x0A	; 10
    2f60:	08 95       	ret
=======
    2bda:	8a e0       	ldi	r24, 0x0A	; 10
    2bdc:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 190 ... 199:
		return 11; //centimeter
<<<<<<< Updated upstream
    2f62:	8b e0       	ldi	r24, 0x0B	; 11
    2f64:	08 95       	ret
=======
    2bde:	8b e0       	ldi	r24, 0x0B	; 11
    2be0:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 170 ... 189:
		return 12; //centimeter
<<<<<<< Updated upstream
    2f66:	8c e0       	ldi	r24, 0x0C	; 12
    2f68:	08 95       	ret
=======
    2be2:	8c e0       	ldi	r24, 0x0C	; 12
    2be4:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 155 ... 169:
		return 13; //centimeter
<<<<<<< Updated upstream
    2f6a:	8d e0       	ldi	r24, 0x0D	; 13
    2f6c:	08 95       	ret
=======
    2be6:	8d e0       	ldi	r24, 0x0D	; 13
    2be8:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 140 ... 154:
		return 14; //centimeter
<<<<<<< Updated upstream
    2f6e:	8e e0       	ldi	r24, 0x0E	; 14
    2f70:	08 95       	ret
=======
    2bea:	8e e0       	ldi	r24, 0x0E	; 14
    2bec:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 110 ... 119:
		return 16; //centimeter
<<<<<<< Updated upstream
    2f72:	80 e1       	ldi	r24, 0x10	; 16
    2f74:	08 95       	ret
=======
    2bee:	80 e1       	ldi	r24, 0x10	; 16
    2bf0:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 80 ... 99:
		return 20; //centimeter
<<<<<<< Updated upstream
    2f76:	84 e1       	ldi	r24, 0x14	; 20
    2f78:	08 95       	ret
=======
    2bf2:	84 e1       	ldi	r24, 0x14	; 20
    2bf4:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		case 60 ... 79:
		return 25; //centimeter
<<<<<<< Updated upstream
    2f7a:	89 e1       	ldi	r24, 0x19	; 25
    2f7c:	08 95       	ret
=======
    2bf6:	89 e1       	ldi	r24, 0x19	; 25
    2bf8:	08 95       	ret
>>>>>>> Stashed changes
		break;
		
		default:
		return 30;
<<<<<<< Updated upstream
    2f7e:	8e e1       	ldi	r24, 0x1E	; 30
    2f80:	08 95       	ret
=======
    2bfa:	8e e1       	ldi	r24, 0x1E	; 30
    2bfc:	08 95       	ret
>>>>>>> Stashed changes
	uint8_t val = I_AnalogRead(ADCA, sensor);
	
	switch(val)
	{
		case 250 ... 255:
		return 4; //centimeter
<<<<<<< Updated upstream
    2f82:	84 e0       	ldi	r24, 0x04	; 4
=======
    2bfe:	84 e0       	ldi	r24, 0x04	; 4
>>>>>>> Stashed changes
		
		default:
		return 30;
		break;
	}
}
<<<<<<< Updated upstream
    2f84:	08 95       	ret

00002f86 <_Z10AnalogReadi>:
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
    2f86:	68 2f       	mov	r22, r24
    2f88:	80 e0       	ldi	r24, 0x00	; 0
    2f8a:	92 e0       	ldi	r25, 0x02	; 2
    2f8c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <_Z12I_AnalogReadR10ADC_structh>
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	08 95       	ret

00002f94 <_Z15passthrough_TWIv>:
=======
    2c00:	08 95       	ret

00002c02 <_Z10AnalogReadi>:
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
    2c02:	68 2f       	mov	r22, r24
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	92 e0       	ldi	r25, 0x02	; 2
    2c08:	0e 94 89 15 	call	0x2b12	; 0x2b12 <_Z12I_AnalogReadR10ADC_structh>
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	08 95       	ret

00002c10 <_Z15passthrough_TWIv>:
>>>>>>> Stashed changes
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit


/* Enter stepper-testing mode. Will exit on Reset */
void passthrough_TWI() {
<<<<<<< Updated upstream
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	2b 97       	sbiw	r28, 0x0b	; 11
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	de bf       	out	0x3e, r29	; 62
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
    2fa2:	60 e8       	ldi	r22, 0x80	; 128
    2fa4:	74 e0       	ldi	r23, 0x04	; 4
    2fa6:	8e ee       	ldi	r24, 0xEE	; 238
    2fa8:	94 e1       	ldi	r25, 0x14	; 20
    2faa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z13TWI_onRequestPFvvER10TWI_struct>
=======
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	2b 97       	sbiw	r28, 0x0b	; 11
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	de bf       	out	0x3e, r29	; 62
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
    2c1e:	60 e8       	ldi	r22, 0x80	; 128
    2c20:	74 e0       	ldi	r23, 0x04	; 4
    2c22:	8c e2       	ldi	r24, 0x2C	; 44
    2c24:	93 e1       	ldi	r25, 0x13	; 19
    2c26:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z13TWI_onRequestPFvvER10TWI_struct>
>>>>>>> Stashed changes
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
<<<<<<< Updated upstream
    2fae:	0f 2e       	mov	r0, r31
    2fb0:	f6 ee       	ldi	r31, 0xE6	; 230
    2fb2:	cf 2e       	mov	r12, r31
    2fb4:	f6 e0       	ldi	r31, 0x06	; 6
    2fb6:	df 2e       	mov	r13, r31
    2fb8:	f0 2d       	mov	r31, r0
=======
    2c2a:	0f 2e       	mov	r0, r31
    2c2c:	f6 ee       	ldi	r31, 0xE6	; 230
    2c2e:	cf 2e       	mov	r12, r31
    2c30:	f6 e0       	ldi	r31, 0x06	; 6
    2c32:	df 2e       	mov	r13, r31
    2c34:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
			
			if (buff[0] == 0) { //test steppers
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
<<<<<<< Updated upstream
    2fba:	0f 2e       	mov	r0, r31
    2fbc:	f7 e0       	ldi	r31, 0x07	; 7
    2fbe:	9f 2e       	mov	r9, r31
    2fc0:	f0 2d       	mov	r31, r0
    2fc2:	5e 01       	movw	r10, r28
    2fc4:	84 e0       	ldi	r24, 0x04	; 4
    2fc6:	a8 0e       	add	r10, r24
    2fc8:	b1 1c       	adc	r11, r1
    2fca:	0f 2e       	mov	r0, r31
    2fcc:	fc e4       	ldi	r31, 0x4C	; 76
    2fce:	7f 2e       	mov	r7, r31
    2fd0:	f0 2d       	mov	r31, r0
    2fd2:	0f 2e       	mov	r0, r31
    2fd4:	f2 e3       	ldi	r31, 0x32	; 50
    2fd6:	8f 2e       	mov	r8, r31
    2fd8:	f0 2d       	mov	r31, r0
=======
    2c36:	0f 2e       	mov	r0, r31
    2c38:	f7 e0       	ldi	r31, 0x07	; 7
    2c3a:	9f 2e       	mov	r9, r31
    2c3c:	f0 2d       	mov	r31, r0
    2c3e:	5e 01       	movw	r10, r28
    2c40:	84 e0       	ldi	r24, 0x04	; 4
    2c42:	a8 0e       	add	r10, r24
    2c44:	b1 1c       	adc	r11, r1
    2c46:	0f 2e       	mov	r0, r31
    2c48:	fc e4       	ldi	r31, 0x4C	; 76
    2c4a:	7f 2e       	mov	r7, r31
    2c4c:	f0 2d       	mov	r31, r0
    2c4e:	0f 2e       	mov	r0, r31
    2c50:	f2 e3       	ldi	r31, 0x32	; 50
    2c52:	8f 2e       	mov	r8, r31
    2c54:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
				} else if (buff[0] == 1) { //lees analog
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
<<<<<<< Updated upstream
    2fda:	0f 2e       	mov	r0, r31
    2fdc:	f5 ee       	ldi	r31, 0xE5	; 229
    2fde:	ef 2e       	mov	r14, r31
    2fe0:	f6 e0       	ldi	r31, 0x06	; 6
    2fe2:	ff 2e       	mov	r15, r31
    2fe4:	f0 2d       	mov	r31, r0
=======
    2c56:	0f 2e       	mov	r0, r31
    2c58:	f5 ee       	ldi	r31, 0xE5	; 229
    2c5a:	ef 2e       	mov	r14, r31
    2c5c:	f6 e0       	ldi	r31, 0x06	; 6
    2c5e:	ff 2e       	mov	r15, r31
    2c60:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
void passthrough_TWI() {
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
<<<<<<< Updated upstream
    2fe6:	80 e8       	ldi	r24, 0x80	; 128
    2fe8:	94 e0       	ldi	r25, 0x04	; 4
    2fea:	0e 94 7d 07 	call	0xefa	; 0xefa <_Z19TWI_RecievedAddressR10TWI_struct>
    2fee:	88 23       	and	r24, r24
    2ff0:	d1 f3       	breq	.-12     	; 0x2fe6 <_Z15passthrough_TWIv+0x52>
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
    2ff2:	f6 01       	movw	r30, r12
    2ff4:	80 81       	ld	r24, Z
    2ff6:	80 63       	ori	r24, 0x30	; 48
    2ff8:	80 83       	st	Z, r24
			
			TWI_ReceivePacket(TWIC,(uint8_t*)buff, 3);
    2ffa:	43 e0       	ldi	r20, 0x03	; 3
    2ffc:	be 01       	movw	r22, r28
    2ffe:	6f 5f       	subi	r22, 0xFF	; 255
    3000:	7f 4f       	sbci	r23, 0xFF	; 255
    3002:	80 e8       	ldi	r24, 0x80	; 128
    3004:	94 e0       	ldi	r25, 0x04	; 4
    3006:	0e 94 89 07 	call	0xf12	; 0xf12 <_Z17TWI_ReceivePacketR10TWI_structPhh>
    300a:	8f e6       	ldi	r24, 0x6F	; 111
    300c:	97 e1       	ldi	r25, 0x17	; 23
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <_Z15passthrough_TWIv+0x7a>
    3012:	00 c0       	rjmp	.+0      	; 0x3014 <_Z15passthrough_TWIv+0x80>
    3014:	00 00       	nop
			_delay_ms(1);
			TWIC.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
    3016:	e0 e8       	ldi	r30, 0x80	; 128
    3018:	f4 e0       	ldi	r31, 0x04	; 4
    301a:	82 85       	ldd	r24, Z+10	; 0x0a
    301c:	80 6c       	ori	r24, 0xC0	; 192
    301e:	82 87       	std	Z+10, r24	; 0x0a
			
			if (buff[0] == 0) { //test steppers
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	81 11       	cpse	r24, r1
    3024:	20 c0       	rjmp	.+64     	; 0x3066 <_Z15passthrough_TWIv+0xd2>
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	8b 87       	std	Y+11, r24	; 0x0b
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
    302a:	00 eb       	ldi	r16, 0xB0	; 176
    302c:	1a e0       	ldi	r17, 0x0A	; 10
    302e:	2a 81       	ldd	r18, Y+2	; 0x02
    3030:	41 e0       	ldi	r20, 0x01	; 1
    3032:	be 01       	movw	r22, r28
    3034:	65 5f       	subi	r22, 0xF5	; 245
    3036:	7f 4f       	sbci	r23, 0xFF	; 255
    3038:	8a e4       	ldi	r24, 0x4A	; 74
    303a:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    303e:	f5 01       	movw	r30, r10
    3040:	89 2d       	mov	r24, r9
    3042:	11 92       	st	Z+, r1
    3044:	8a 95       	dec	r24
    3046:	e9 f7       	brne	.-6      	; 0x3042 <_Z15passthrough_TWIv+0xae>
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	8c 83       	std	Y+4, r24	; 0x04
    304c:	7d 82       	std	Y+5, r7	; 0x05
    304e:	8f 82       	std	Y+7, r8	; 0x07
    3050:	89 87       	std	Y+9, r24	; 0x09
    3052:	8a 87       	std	Y+10, r24	; 0x0a
    3054:	8b 81       	ldd	r24, Y+3	; 0x03
    3056:	88 87       	std	Y+8, r24	; 0x08
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
    3058:	2a 81       	ldd	r18, Y+2	; 0x02
    305a:	49 2d       	mov	r20, r9
    305c:	b5 01       	movw	r22, r10
    305e:	86 e4       	ldi	r24, 0x46	; 70
    3060:	0e 94 a3 12 	call	0x2546	; 0x2546 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    3064:	08 c0       	rjmp	.+16     	; 0x3076 <_Z15passthrough_TWIv+0xe2>
				} else if (buff[0] == 1) { //lees analog
    3066:	81 30       	cpi	r24, 0x01	; 1
    3068:	31 f4       	brne	.+12     	; 0x3076 <_Z15passthrough_TWIv+0xe2>
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_Z10AnalogReadi>
    3072:	80 93 cd 23 	sts	0x23CD, r24	; 0x8023cd <Result>
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
    3076:	f7 01       	movw	r30, r14
    3078:	80 81       	ld	r24, Z
    307a:	80 63       	ori	r24, 0x30	; 48
    307c:	80 83       	st	Z, r24
    307e:	b3 cf       	rjmp	.-154    	; 0x2fe6 <_Z15passthrough_TWIv+0x52>

00003080 <_Z16initOptocouplersv>:
=======
    2c62:	80 e8       	ldi	r24, 0x80	; 128
    2c64:	94 e0       	ldi	r25, 0x04	; 4
    2c66:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_Z19TWI_RecievedAddressR10TWI_struct>
    2c6a:	88 23       	and	r24, r24
    2c6c:	d1 f3       	breq	.-12     	; 0x2c62 <_Z15passthrough_TWIv+0x52>
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
    2c6e:	f6 01       	movw	r30, r12
    2c70:	80 81       	ld	r24, Z
    2c72:	80 63       	ori	r24, 0x30	; 48
    2c74:	80 83       	st	Z, r24
			
			TWI_ReceivePacket(TWIC,(uint8_t*)buff, 3);
    2c76:	43 e0       	ldi	r20, 0x03	; 3
    2c78:	be 01       	movw	r22, r28
    2c7a:	6f 5f       	subi	r22, 0xFF	; 255
    2c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7e:	80 e8       	ldi	r24, 0x80	; 128
    2c80:	94 e0       	ldi	r25, 0x04	; 4
    2c82:	0e 94 65 07 	call	0xeca	; 0xeca <_Z17TWI_ReceivePacketR10TWI_structPhh>
    2c86:	8f e6       	ldi	r24, 0x6F	; 111
    2c88:	97 e1       	ldi	r25, 0x17	; 23
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <_Z15passthrough_TWIv+0x7a>
    2c8e:	00 c0       	rjmp	.+0      	; 0x2c90 <_Z15passthrough_TWIv+0x80>
    2c90:	00 00       	nop
			_delay_ms(1);
			TWIC.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
    2c92:	e0 e8       	ldi	r30, 0x80	; 128
    2c94:	f4 e0       	ldi	r31, 0x04	; 4
    2c96:	82 85       	ldd	r24, Z+10	; 0x0a
    2c98:	80 6c       	ori	r24, 0xC0	; 192
    2c9a:	82 87       	std	Z+10, r24	; 0x0a
			
			if (buff[0] == 0) { //test steppers
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	81 11       	cpse	r24, r1
    2ca0:	20 c0       	rjmp	.+64     	; 0x2ce2 <_Z15passthrough_TWIv+0xd2>
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	8b 87       	std	Y+11, r24	; 0x0b
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
    2ca6:	00 eb       	ldi	r16, 0xB0	; 176
    2ca8:	1a e0       	ldi	r17, 0x0A	; 10
    2caa:	2a 81       	ldd	r18, Y+2	; 0x02
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	be 01       	movw	r22, r28
    2cb0:	65 5f       	subi	r22, 0xF5	; 245
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	8a e4       	ldi	r24, 0x4A	; 74
    2cb6:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    2cba:	f5 01       	movw	r30, r10
    2cbc:	89 2d       	mov	r24, r9
    2cbe:	11 92       	st	Z+, r1
    2cc0:	8a 95       	dec	r24
    2cc2:	e9 f7       	brne	.-6      	; 0x2cbe <_Z15passthrough_TWIv+0xae>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	8c 83       	std	Y+4, r24	; 0x04
    2cc8:	7d 82       	std	Y+5, r7	; 0x05
    2cca:	8f 82       	std	Y+7, r8	; 0x07
    2ccc:	89 87       	std	Y+9, r24	; 0x09
    2cce:	8a 87       	std	Y+10, r24	; 0x0a
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	88 87       	std	Y+8, r24	; 0x08
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
    2cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd6:	49 2d       	mov	r20, r9
    2cd8:	b5 01       	movw	r22, r10
    2cda:	86 e4       	ldi	r24, 0x46	; 70
    2cdc:	0e 94 ed 10 	call	0x21da	; 0x21da <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    2ce0:	08 c0       	rjmp	.+16     	; 0x2cf2 <_Z15passthrough_TWIv+0xe2>
				} else if (buff[0] == 1) { //lees analog
    2ce2:	81 30       	cpi	r24, 0x01	; 1
    2ce4:	31 f4       	brne	.+12     	; 0x2cf2 <_Z15passthrough_TWIv+0xe2>
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 01 16 	call	0x2c02	; 0x2c02 <_Z10AnalogReadi>
    2cee:	80 93 dd 23 	sts	0x23DD, r24	; 0x8023dd <Result>
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
    2cf2:	f7 01       	movw	r30, r14
    2cf4:	80 81       	ld	r24, Z
    2cf6:	80 63       	ori	r24, 0x30	; 48
    2cf8:	80 83       	st	Z, r24
    2cfa:	b3 cf       	rjmp	.-154    	; 0x2c62 <_Z15passthrough_TWIv+0x52>

00002cfc <_Z16initOptocouplersv>:
>>>>>>> Stashed changes

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
<<<<<<< Updated upstream
    3080:	8f e3       	ldi	r24, 0x3F	; 63
    3082:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
    3086:	08 95       	ret

00003088 <_Z17I_OptocouplerReadh>:
=======
    2cfc:	8f e3       	ldi	r24, 0x3F	; 63
    2cfe:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
    2d02:	08 95       	ret

00002d04 <_Z17I_OptocouplerReadh>:
>>>>>>> Stashed changes
/**
 * \brief - Read the level of an optocoupler
 */
bool I_OptocouplerRead(uint8_t io_port)
{
	switch(io_port)
<<<<<<< Updated upstream
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	a9 f0       	breq	.+42     	; 0x30b6 <_Z17I_OptocouplerReadh+0x2e>
    308c:	28 f4       	brcc	.+10     	; 0x3098 <_Z17I_OptocouplerReadh+0x10>
    308e:	88 23       	and	r24, r24
    3090:	49 f0       	breq	.+18     	; 0x30a4 <_Z17I_OptocouplerReadh+0x1c>
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	59 f0       	breq	.+22     	; 0x30ac <_Z17I_OptocouplerReadh+0x24>
    3096:	26 c0       	rjmp	.+76     	; 0x30e4 <_Z17I_OptocouplerReadh+0x5c>
    3098:	84 30       	cpi	r24, 0x04	; 4
    309a:	c9 f0       	breq	.+50     	; 0x30ce <_Z17I_OptocouplerReadh+0x46>
    309c:	90 f0       	brcs	.+36     	; 0x30c2 <_Z17I_OptocouplerReadh+0x3a>
    309e:	85 30       	cpi	r24, 0x05	; 5
    30a0:	d9 f0       	breq	.+54     	; 0x30d8 <_Z17I_OptocouplerReadh+0x50>
    30a2:	20 c0       	rjmp	.+64     	; 0x30e4 <_Z17I_OptocouplerReadh+0x5c>
	{
		case 0: return OPTO_IN & OPTO0;
    30a4:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30a8:	81 70       	andi	r24, 0x01	; 1
    30aa:	08 95       	ret
		case 1: return OPTO_IN & OPTO1;
    30ac:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30b0:	86 95       	lsr	r24
    30b2:	81 70       	andi	r24, 0x01	; 1
    30b4:	08 95       	ret
		case 2: return OPTO_IN & OPTO2;
    30b6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30ba:	82 fb       	bst	r24, 2
    30bc:	88 27       	eor	r24, r24
    30be:	80 f9       	bld	r24, 0
    30c0:	08 95       	ret
		case 3: return OPTO_IN & OPTO3;
    30c2:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30c6:	83 fb       	bst	r24, 3
    30c8:	88 27       	eor	r24, r24
    30ca:	80 f9       	bld	r24, 0
    30cc:	08 95       	ret
		case 4: return OPTO_IN & OPTO4;
    30ce:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30d2:	82 95       	swap	r24
    30d4:	81 70       	andi	r24, 0x01	; 1
    30d6:	08 95       	ret
		case 5: return OPTO_IN & OPTO5;
    30d8:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30dc:	85 fb       	bst	r24, 5
    30de:	88 27       	eor	r24, r24
    30e0:	80 f9       	bld	r24, 0
    30e2:	08 95       	ret
		default: return 0;
    30e4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    30e6:	08 95       	ret

000030e8 <_Z15OptocouplerReadi>:
=======
    2d04:	82 30       	cpi	r24, 0x02	; 2
    2d06:	a9 f0       	breq	.+42     	; 0x2d32 <_Z17I_OptocouplerReadh+0x2e>
    2d08:	28 f4       	brcc	.+10     	; 0x2d14 <_Z17I_OptocouplerReadh+0x10>
    2d0a:	88 23       	and	r24, r24
    2d0c:	49 f0       	breq	.+18     	; 0x2d20 <_Z17I_OptocouplerReadh+0x1c>
    2d0e:	81 30       	cpi	r24, 0x01	; 1
    2d10:	59 f0       	breq	.+22     	; 0x2d28 <_Z17I_OptocouplerReadh+0x24>
    2d12:	26 c0       	rjmp	.+76     	; 0x2d60 <_Z17I_OptocouplerReadh+0x5c>
    2d14:	84 30       	cpi	r24, 0x04	; 4
    2d16:	c9 f0       	breq	.+50     	; 0x2d4a <_Z17I_OptocouplerReadh+0x46>
    2d18:	90 f0       	brcs	.+36     	; 0x2d3e <_Z17I_OptocouplerReadh+0x3a>
    2d1a:	85 30       	cpi	r24, 0x05	; 5
    2d1c:	d9 f0       	breq	.+54     	; 0x2d54 <_Z17I_OptocouplerReadh+0x50>
    2d1e:	20 c0       	rjmp	.+64     	; 0x2d60 <_Z17I_OptocouplerReadh+0x5c>
	{
		case 0: return OPTO_IN & OPTO0;
    2d20:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d24:	81 70       	andi	r24, 0x01	; 1
    2d26:	08 95       	ret
		case 1: return OPTO_IN & OPTO1;
    2d28:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d2c:	86 95       	lsr	r24
    2d2e:	81 70       	andi	r24, 0x01	; 1
    2d30:	08 95       	ret
		case 2: return OPTO_IN & OPTO2;
    2d32:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d36:	82 fb       	bst	r24, 2
    2d38:	88 27       	eor	r24, r24
    2d3a:	80 f9       	bld	r24, 0
    2d3c:	08 95       	ret
		case 3: return OPTO_IN & OPTO3;
    2d3e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d42:	83 fb       	bst	r24, 3
    2d44:	88 27       	eor	r24, r24
    2d46:	80 f9       	bld	r24, 0
    2d48:	08 95       	ret
		case 4: return OPTO_IN & OPTO4;
    2d4a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d4e:	82 95       	swap	r24
    2d50:	81 70       	andi	r24, 0x01	; 1
    2d52:	08 95       	ret
		case 5: return OPTO_IN & OPTO5;
    2d54:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d58:	85 fb       	bst	r24, 5
    2d5a:	88 27       	eor	r24, r24
    2d5c:	80 f9       	bld	r24, 0
    2d5e:	08 95       	ret
		default: return 0;
    2d60:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2d62:	08 95       	ret

00002d64 <_Z15OptocouplerReadi>:
>>>>>>> Stashed changes
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
<<<<<<< Updated upstream
    30e8:	0e 94 44 18 	call	0x3088	; 0x3088 <_Z17I_OptocouplerReadh>
    30ec:	08 95       	ret

000030ee <__vector_100>:
=======
    2d64:	0e 94 82 16 	call	0x2d04	; 0x2d04 <_Z17I_OptocouplerReadh>
    2d68:	08 95       	ret

00002d6a <__vector_100>:
>>>>>>> Stashed changes
void requestStarted() { TWI_Write(TWIC, Started); }
void requestResult() { TWI_Write(TWIC, Result); }


/* ISR INT0, gebruikt voor lift interrupts */
ISR(PORTK_INT0_vect) {
<<<<<<< Updated upstream
    30ee:	1f 92       	push	r1
    30f0:	0f 92       	push	r0
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	0f 92       	push	r0
    30f6:	11 24       	eor	r1, r1
    30f8:	08 b6       	in	r0, 0x38	; 56
    30fa:	0f 92       	push	r0
    30fc:	18 be       	out	0x38, r1	; 56
    30fe:	09 b6       	in	r0, 0x39	; 57
    3100:	0f 92       	push	r0
    3102:	19 be       	out	0x39, r1	; 57
    3104:	0b b6       	in	r0, 0x3b	; 59
    3106:	0f 92       	push	r0
    3108:	1b be       	out	0x3b, r1	; 59
    310a:	2f 93       	push	r18
    310c:	3f 93       	push	r19
    310e:	4f 93       	push	r20
    3110:	5f 93       	push	r21
    3112:	6f 93       	push	r22
    3114:	7f 93       	push	r23
    3116:	8f 93       	push	r24
    3118:	9f 93       	push	r25
    311a:	af 93       	push	r26
    311c:	bf 93       	push	r27
    311e:	cf 93       	push	r28
    3120:	ef 93       	push	r30
    3122:	ff 93       	push	r31
	bool elevatorUpPressed = !(PORTK_IN & EV_SWITCH_PIN_UP); //Pin use pull-ups, invert to give true on pressed
    3124:	e8 e2       	ldi	r30, 0x28	; 40
    3126:	f7 e0       	ldi	r31, 0x07	; 7
    3128:	c0 81       	ld	r28, Z
    312a:	c0 71       	andi	r28, 0x10	; 16
	bool elevatorDownPressed = !(PORTK_IN & EV_SWITCH_PIN_DOWN);
    312c:	80 81       	ld	r24, Z

	if(elevatorDownPressed){
    312e:	85 fd       	sbrc	r24, 5
    3130:	09 c0       	rjmp	.+18     	; 0x3144 <__vector_100+0x56>
		DEBUG_OUT("Elevator Switch DOWN was pressed\n\r");
    3132:	66 e6       	ldi	r22, 0x66	; 102
    3134:	72 e2       	ldi	r23, 0x22	; 34
    3136:	80 ea       	ldi	r24, 0xA0	; 160
    3138:	99 e0       	ldi	r25, 0x09	; 9
    313a:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(false); //Run with parameter false to indicate DOWN
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	0e 94 88 0b 	call	0x1710	; 0x1710 <ElevatorButtonInISR>

	}
	if(elevatorUpPressed){
    3144:	c1 11       	cpse	r28, r1
    3146:	09 c0       	rjmp	.+18     	; 0x315a <__vector_100+0x6c>
		DEBUG_OUT("Elevator Switch UP was pressed\n\r");
    3148:	69 e8       	ldi	r22, 0x89	; 137
    314a:	72 e2       	ldi	r23, 0x22	; 34
    314c:	80 ea       	ldi	r24, 0xA0	; 160
    314e:	99 e0       	ldi	r25, 0x09	; 9
    3150:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(true); //Run with parameter true to indicate UP
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	0e 94 88 0b 	call	0x1710	; 0x1710 <ElevatorButtonInISR>
	}
}
    315a:	ff 91       	pop	r31
    315c:	ef 91       	pop	r30
    315e:	cf 91       	pop	r28
    3160:	bf 91       	pop	r27
    3162:	af 91       	pop	r26
    3164:	9f 91       	pop	r25
    3166:	8f 91       	pop	r24
    3168:	7f 91       	pop	r23
    316a:	6f 91       	pop	r22
    316c:	5f 91       	pop	r21
    316e:	4f 91       	pop	r20
    3170:	3f 91       	pop	r19
    3172:	2f 91       	pop	r18
    3174:	0f 90       	pop	r0
    3176:	0b be       	out	0x3b, r0	; 59
    3178:	0f 90       	pop	r0
    317a:	09 be       	out	0x39, r0	; 57
    317c:	0f 90       	pop	r0
    317e:	08 be       	out	0x38, r0	; 56
    3180:	0f 90       	pop	r0
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	0f 90       	pop	r0
    3186:	1f 90       	pop	r1
    3188:	18 95       	reti

0000318a <__vector_101>:
=======
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1
    2d74:	08 b6       	in	r0, 0x38	; 56
    2d76:	0f 92       	push	r0
    2d78:	18 be       	out	0x38, r1	; 56
    2d7a:	09 b6       	in	r0, 0x39	; 57
    2d7c:	0f 92       	push	r0
    2d7e:	19 be       	out	0x39, r1	; 57
    2d80:	0b b6       	in	r0, 0x3b	; 59
    2d82:	0f 92       	push	r0
    2d84:	1b be       	out	0x3b, r1	; 59
    2d86:	2f 93       	push	r18
    2d88:	3f 93       	push	r19
    2d8a:	4f 93       	push	r20
    2d8c:	5f 93       	push	r21
    2d8e:	6f 93       	push	r22
    2d90:	7f 93       	push	r23
    2d92:	8f 93       	push	r24
    2d94:	9f 93       	push	r25
    2d96:	af 93       	push	r26
    2d98:	bf 93       	push	r27
    2d9a:	cf 93       	push	r28
    2d9c:	ef 93       	push	r30
    2d9e:	ff 93       	push	r31
	bool elevatorUpPressed = !(PORTK_IN & EV_SWITCH_PIN_UP); //Pin use pull-ups, invert to give true on pressed
    2da0:	e8 e2       	ldi	r30, 0x28	; 40
    2da2:	f7 e0       	ldi	r31, 0x07	; 7
    2da4:	c0 81       	ld	r28, Z
    2da6:	c0 71       	andi	r28, 0x10	; 16
	bool elevatorDownPressed = !(PORTK_IN & EV_SWITCH_PIN_DOWN);
    2da8:	80 81       	ld	r24, Z

	if(elevatorDownPressed){
    2daa:	85 fd       	sbrc	r24, 5
    2dac:	09 c0       	rjmp	.+18     	; 0x2dc0 <__vector_100+0x56>
		DEBUG_OUT("Elevator Switch UP was pressed\n\r");
    2dae:	68 e8       	ldi	r22, 0x88	; 136
    2db0:	72 e2       	ldi	r23, 0x22	; 34
    2db2:	80 ea       	ldi	r24, 0xA0	; 160
    2db4:	99 e0       	ldi	r25, 0x09	; 9
    2db6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(false); //Run with parameter false to indicate DOWN
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <ElevatorButtonInISR>

	}
	if(elevatorUpPressed){
    2dc0:	c1 11       	cpse	r28, r1
    2dc2:	09 c0       	rjmp	.+18     	; 0x2dd6 <__vector_100+0x6c>
		DEBUG_OUT("Elevator Switch DOWN was pressed\n\r");
    2dc4:	69 ea       	ldi	r22, 0xA9	; 169
    2dc6:	72 e2       	ldi	r23, 0x22	; 34
    2dc8:	80 ea       	ldi	r24, 0xA0	; 160
    2dca:	99 e0       	ldi	r25, 0x09	; 9
    2dcc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(true); //Run with parameter true to indicate UP
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <ElevatorButtonInISR>
	}
}
    2dd6:	ff 91       	pop	r31
    2dd8:	ef 91       	pop	r30
    2dda:	cf 91       	pop	r28
    2ddc:	bf 91       	pop	r27
    2dde:	af 91       	pop	r26
    2de0:	9f 91       	pop	r25
    2de2:	8f 91       	pop	r24
    2de4:	7f 91       	pop	r23
    2de6:	6f 91       	pop	r22
    2de8:	5f 91       	pop	r21
    2dea:	4f 91       	pop	r20
    2dec:	3f 91       	pop	r19
    2dee:	2f 91       	pop	r18
    2df0:	0f 90       	pop	r0
    2df2:	0b be       	out	0x3b, r0	; 59
    2df4:	0f 90       	pop	r0
    2df6:	09 be       	out	0x39, r0	; 57
    2df8:	0f 90       	pop	r0
    2dfa:	08 be       	out	0x38, r0	; 56
    2dfc:	0f 90       	pop	r0
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	0f 90       	pop	r0
    2e02:	1f 90       	pop	r1
    2e04:	18 95       	reti

00002e06 <__vector_101>:
>>>>>>> Stashed changes


///* ISR INT1, gebruikt voor sorterarm interrupts */
ISR(PORTK_INT1_vect) {
<<<<<<< Updated upstream
    318a:	1f 92       	push	r1
    318c:	0f 92       	push	r0
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	0f 92       	push	r0
    3192:	11 24       	eor	r1, r1
    3194:	08 b6       	in	r0, 0x38	; 56
    3196:	0f 92       	push	r0
    3198:	18 be       	out	0x38, r1	; 56
    319a:	09 b6       	in	r0, 0x39	; 57
    319c:	0f 92       	push	r0
    319e:	19 be       	out	0x39, r1	; 57
    31a0:	0a b6       	in	r0, 0x3a	; 58
    31a2:	0f 92       	push	r0
    31a4:	1a be       	out	0x3a, r1	; 58
    31a6:	0b b6       	in	r0, 0x3b	; 59
    31a8:	0f 92       	push	r0
    31aa:	1b be       	out	0x3b, r1	; 59
    31ac:	2f 93       	push	r18
    31ae:	3f 93       	push	r19
    31b0:	4f 93       	push	r20
    31b2:	5f 93       	push	r21
    31b4:	6f 93       	push	r22
    31b6:	7f 93       	push	r23
    31b8:	8f 93       	push	r24
    31ba:	9f 93       	push	r25
    31bc:	af 93       	push	r26
    31be:	bf 93       	push	r27
    31c0:	cf 93       	push	r28
    31c2:	df 93       	push	r29
    31c4:	ef 93       	push	r30
    31c6:	ff 93       	push	r31
	
	//Read the PORTK register on the SorterArm pins:
	bool leftIsPressed = !(PORTK_IN & sa1.switch_pin_left); //Pin use pull-ups, invert to give true on pressed
    31c8:	e8 e2       	ldi	r30, 0x28	; 40
    31ca:	f7 e0       	ldi	r31, 0x07	; 7
    31cc:	d0 81       	ld	r29, Z
	bool rightIsPressed = !(PORTK_IN & sa1.switch_pin_right);
    31ce:	c0 81       	ld	r28, Z
    31d0:	c0 78       	andi	r28, 0x80	; 128

	DEBUG_OUT("Entered INT1 ISR\r\n");
    31d2:	6a ea       	ldi	r22, 0xAA	; 170
    31d4:	72 e2       	ldi	r23, 0x22	; 34
    31d6:	80 ea       	ldi	r24, 0xA0	; 160
    31d8:	99 e0       	ldi	r25, 0x09	; 9
    31da:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	if(leftIsPressed){
    31de:	d6 fd       	sbrc	r29, 6
    31e0:	08 c0       	rjmp	.+16     	; 0x31f2 <__vector_101+0x68>
	 DEBUG_OUT("SorterArm switch LEFT was pressed\n\r");
    31e2:	6d eb       	ldi	r22, 0xBD	; 189
    31e4:	72 e2       	ldi	r23, 0x22	; 34
    31e6:	80 ea       	ldi	r24, 0xA0	; 160
    31e8:	99 e0       	ldi	r25, 0x09	; 9
    31ea:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	 SorterArmISR();
    31ee:	0e 94 3e 10 	call	0x207c	; 0x207c <SorterArmISR>
	}
	if(rightIsPressed){
    31f2:	c1 11       	cpse	r28, r1
    31f4:	08 c0       	rjmp	.+16     	; 0x3206 <__vector_101+0x7c>
	 DEBUG_OUT("SorterArm switch RIGHT was pressed\n\r");
    31f6:	61 ee       	ldi	r22, 0xE1	; 225
    31f8:	72 e2       	ldi	r23, 0x22	; 34
    31fa:	80 ea       	ldi	r24, 0xA0	; 160
    31fc:	99 e0       	ldi	r25, 0x09	; 9
    31fe:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	 SorterArmISR();
    3202:	0e 94 3e 10 	call	0x207c	; 0x207c <SorterArmISR>
=======
    2e06:	1f 92       	push	r1
    2e08:	0f 92       	push	r0
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	0f 92       	push	r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	08 b6       	in	r0, 0x38	; 56
    2e12:	0f 92       	push	r0
    2e14:	18 be       	out	0x38, r1	; 56
    2e16:	09 b6       	in	r0, 0x39	; 57
    2e18:	0f 92       	push	r0
    2e1a:	19 be       	out	0x39, r1	; 57
    2e1c:	0b b6       	in	r0, 0x3b	; 59
    2e1e:	0f 92       	push	r0
    2e20:	1b be       	out	0x3b, r1	; 59
    2e22:	2f 93       	push	r18
    2e24:	3f 93       	push	r19
    2e26:	4f 93       	push	r20
    2e28:	5f 93       	push	r21
    2e2a:	6f 93       	push	r22
    2e2c:	7f 93       	push	r23
    2e2e:	8f 93       	push	r24
    2e30:	9f 93       	push	r25
    2e32:	af 93       	push	r26
    2e34:	bf 93       	push	r27
    2e36:	cf 93       	push	r28
    2e38:	ef 93       	push	r30
    2e3a:	ff 93       	push	r31
	
	//Read the PORTK register on the SorterArm pins:
	bool leftIsPressed = !(PORTK_IN & sa1.switch_pin_left); //Pin use pull-ups, invert to give true on pressed
    2e3c:	e8 e2       	ldi	r30, 0x28	; 40
    2e3e:	f7 e0       	ldi	r31, 0x07	; 7
    2e40:	80 81       	ld	r24, Z
	bool rightIsPressed = !(PORTK_IN & sa1.switch_pin_right);
    2e42:	c0 81       	ld	r28, Z
    2e44:	c0 78       	andi	r28, 0x80	; 128

	//DEBUG_OUT("Entered INT1 ISR\r\n");
	if(leftIsPressed){
    2e46:	86 fd       	sbrc	r24, 6
    2e48:	08 c0       	rjmp	.+16     	; 0x2e5a <__vector_101+0x54>
	 DEBUG_OUT("SorterArm switch LEFT was pressed\n\r");
    2e4a:	6c ec       	ldi	r22, 0xCC	; 204
    2e4c:	72 e2       	ldi	r23, 0x22	; 34
    2e4e:	80 ea       	ldi	r24, 0xA0	; 160
    2e50:	99 e0       	ldi	r25, 0x09	; 9
    2e52:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	 SorterArmISR();
    2e56:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <SorterArmISR>
	}
	if(rightIsPressed){
    2e5a:	c1 11       	cpse	r28, r1
    2e5c:	08 c0       	rjmp	.+16     	; 0x2e6e <__vector_101+0x68>
	 DEBUG_OUT("SorterArm switch RIGHT was pressed\n\r");
    2e5e:	60 ef       	ldi	r22, 0xF0	; 240
    2e60:	72 e2       	ldi	r23, 0x22	; 34
    2e62:	80 ea       	ldi	r24, 0xA0	; 160
    2e64:	99 e0       	ldi	r25, 0x09	; 9
    2e66:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	 SorterArmISR();
    2e6a:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <SorterArmISR>
>>>>>>> Stashed changes

	//Currently checks the PORTK register for which pin is pressed down
	//The sorterArm should theoretically only be able to press one switch at a time
	//If necessary, code could be added for checking which switch changed state.
	
}
<<<<<<< Updated upstream
    3206:	ff 91       	pop	r31
    3208:	ef 91       	pop	r30
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	bf 91       	pop	r27
    3210:	af 91       	pop	r26
    3212:	9f 91       	pop	r25
    3214:	8f 91       	pop	r24
    3216:	7f 91       	pop	r23
    3218:	6f 91       	pop	r22
    321a:	5f 91       	pop	r21
    321c:	4f 91       	pop	r20
    321e:	3f 91       	pop	r19
    3220:	2f 91       	pop	r18
    3222:	0f 90       	pop	r0
    3224:	0b be       	out	0x3b, r0	; 59
    3226:	0f 90       	pop	r0
    3228:	0a be       	out	0x3a, r0	; 58
    322a:	0f 90       	pop	r0
    322c:	09 be       	out	0x39, r0	; 57
    322e:	0f 90       	pop	r0
    3230:	08 be       	out	0x38, r0	; 56
    3232:	0f 90       	pop	r0
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	0f 90       	pop	r0
    3238:	1f 90       	pop	r1
    323a:	18 95       	reti

0000323c <_Z8initLEDsv>:
=======
    2e6e:	ff 91       	pop	r31
    2e70:	ef 91       	pop	r30
    2e72:	cf 91       	pop	r28
    2e74:	bf 91       	pop	r27
    2e76:	af 91       	pop	r26
    2e78:	9f 91       	pop	r25
    2e7a:	8f 91       	pop	r24
    2e7c:	7f 91       	pop	r23
    2e7e:	6f 91       	pop	r22
    2e80:	5f 91       	pop	r21
    2e82:	4f 91       	pop	r20
    2e84:	3f 91       	pop	r19
    2e86:	2f 91       	pop	r18
    2e88:	0f 90       	pop	r0
    2e8a:	0b be       	out	0x3b, r0	; 59
    2e8c:	0f 90       	pop	r0
    2e8e:	09 be       	out	0x39, r0	; 57
    2e90:	0f 90       	pop	r0
    2e92:	08 be       	out	0x38, r0	; 56
    2e94:	0f 90       	pop	r0
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	0f 90       	pop	r0
    2e9a:	1f 90       	pop	r1
    2e9c:	18 95       	reti

00002e9e <_Z8initLEDsv>:
>>>>>>> Stashed changes
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
	}
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
<<<<<<< Updated upstream
    323c:	80 e3       	ldi	r24, 0x30	; 48
    323e:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
    3242:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    3246:	08 95       	ret

00003248 <main>:
=======
    2e9e:	80 e3       	ldi	r24, 0x30	; 48
    2ea0:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
    2ea4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    2ea8:	08 95       	ret

00002eaa <main>:
>>>>>>> Stashed changes
	
}


int main(void)
{
<<<<<<< Updated upstream
    3248:	cf 92       	push	r12
    324a:	df 92       	push	r13
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
	// Setup/init
	irq_initialize_vectors();
    3258:	87 e0       	ldi	r24, 0x07	; 7
    325a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    325e:	78 94       	sei
	sysclk_init();
    3260:	0e 94 a0 2b 	call	0x5740	; 0x5740 <sysclk_init>
	udc_start();
    3264:	0e 94 24 20 	call	0x4048	; 0x4048 <udc_start>
	
	//Set up peripherals
	sysclk_enable_peripheral_clock(&TWIC);		//TWI/I2C line for interfacing with ESP32
    3268:	80 e8       	ldi	r24, 0x80	; 128
    326a:	94 e0       	ldi	r25, 0x04	; 4
    326c:	0e 94 f5 14 	call	0x29ea	; 0x29ea <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD0);	//USB line for debugging
    3270:	80 ea       	ldi	r24, 0xA0	; 160
    3272:	99 e0       	ldi	r25, 0x09	; 9
    3274:	0e 94 f5 14 	call	0x29ea	; 0x29ea <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTE1);	//RS485
    3278:	80 eb       	ldi	r24, 0xB0	; 176
    327a:	9a e0       	ldi	r25, 0x0A	; 10
    327c:	0e 94 f5 14 	call	0x29ea	; 0x29ea <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA);		//ADC for reading sensors
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	92 e0       	ldi	r25, 0x02	; 2
    3284:	0e 94 f5 14 	call	0x29ea	; 0x29ea <sysclk_enable_peripheral_clock>
	
	TWI_init(TWIC);
    3288:	80 e8       	ldi	r24, 0x80	; 128
    328a:	94 e0       	ldi	r25, 0x04	; 4
    328c:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z8TWI_initR10TWI_struct>
	TWI_onRequest(requestStarted, TWIC);
    3290:	60 e8       	ldi	r22, 0x80	; 128
    3292:	74 e0       	ldi	r23, 0x04	; 4
    3294:	87 ee       	ldi	r24, 0xE7	; 231
    3296:	94 e1       	ldi	r25, 0x14	; 20
    3298:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z13TWI_onRequestPFvvER10TWI_struct>

	// Init board
	board_init();
    329c:	0e 94 43 30 	call	0x6086	; 0x6086 <board_init>
	initLEDs();
    32a0:	0e 94 1e 19 	call	0x323c	; 0x323c <_Z8initLEDsv>

	//Init UART for Debug interface and RS485 drivers
	USART_Init(USARTD0, 115200, 24000000, false);	// RX/TX out
    32a4:	e1 2c       	mov	r14, r1
    32a6:	00 e0       	ldi	r16, 0x00	; 0
    32a8:	16 e3       	ldi	r17, 0x36	; 54
    32aa:	2e e6       	ldi	r18, 0x6E	; 110
    32ac:	31 e0       	ldi	r19, 0x01	; 1
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	52 ec       	ldi	r21, 0xC2	; 194
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	70 e0       	ldi	r23, 0x00	; 0
    32b6:	80 ea       	ldi	r24, 0xA0	; 160
    32b8:	99 e0       	ldi	r25, 0x09	; 9
    32ba:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTE1,37100,24000000,false);	// RS485 1
    32be:	00 e0       	ldi	r16, 0x00	; 0
    32c0:	16 e3       	ldi	r17, 0x36	; 54
    32c2:	2e e6       	ldi	r18, 0x6E	; 110
    32c4:	31 e0       	ldi	r19, 0x01	; 1
    32c6:	4c ee       	ldi	r20, 0xEC	; 236
    32c8:	50 e9       	ldi	r21, 0x90	; 144
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	70 e0       	ldi	r23, 0x00	; 0
    32ce:	80 eb       	ldi	r24, 0xB0	; 176
    32d0:	9a e0       	ldi	r25, 0x0A	; 10
    32d2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTF0,37100,24000000,false);	// RS485 2
    32d6:	00 e0       	ldi	r16, 0x00	; 0
    32d8:	16 e3       	ldi	r17, 0x36	; 54
    32da:	2e e6       	ldi	r18, 0x6E	; 110
    32dc:	31 e0       	ldi	r19, 0x01	; 1
    32de:	4c ee       	ldi	r20, 0xEC	; 236
    32e0:	50 e9       	ldi	r21, 0x90	; 144
    32e2:	60 e0       	ldi	r22, 0x00	; 0
    32e4:	70 e0       	ldi	r23, 0x00	; 0
    32e6:	80 ea       	ldi	r24, 0xA0	; 160
    32e8:	9b e0       	ldi	r25, 0x0B	; 11
    32ea:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z10USART_InitR12USART_structmmb>
	
	PORTE_OUTSET = 0b00110000;
    32ee:	80 e3       	ldi	r24, 0x30	; 48
    32f0:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	
	ADC_Init(ADCA);
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	92 e0       	ldi	r25, 0x02	; 2
    32f8:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_Z8ADC_InitR10ADC_struct>
    32fc:	c1 e0       	ldi	r28, 0x01	; 1
    32fe:	d0 e0       	ldi	r29, 0x00	; 0
=======
    2eaa:	cf 92       	push	r12
    2eac:	df 92       	push	r13
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	cf 93       	push	r28
    2eb8:	df 93       	push	r29
	// Setup/init
	irq_initialize_vectors();
    2eba:	87 e0       	ldi	r24, 0x07	; 7
    2ebc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    2ec0:	78 94       	sei
	sysclk_init();
    2ec2:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <sysclk_init>
	udc_start();
    2ec6:	0e 94 57 1e 	call	0x3cae	; 0x3cae <udc_start>
	
	//Set up peripherals
	sysclk_enable_peripheral_clock(&TWIC);		//TWI/I2C line for interfacing with ESP32
    2eca:	80 e8       	ldi	r24, 0x80	; 128
    2ecc:	94 e0       	ldi	r25, 0x04	; 4
    2ece:	0e 94 33 13 	call	0x2666	; 0x2666 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD0);	//USB line for debugging
    2ed2:	80 ea       	ldi	r24, 0xA0	; 160
    2ed4:	99 e0       	ldi	r25, 0x09	; 9
    2ed6:	0e 94 33 13 	call	0x2666	; 0x2666 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTE1);	//RS485
    2eda:	80 eb       	ldi	r24, 0xB0	; 176
    2edc:	9a e0       	ldi	r25, 0x0A	; 10
    2ede:	0e 94 33 13 	call	0x2666	; 0x2666 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA);		//ADC for reading sensors
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	92 e0       	ldi	r25, 0x02	; 2
    2ee6:	0e 94 33 13 	call	0x2666	; 0x2666 <sysclk_enable_peripheral_clock>
	
	TWI_init(TWIC);
    2eea:	80 e8       	ldi	r24, 0x80	; 128
    2eec:	94 e0       	ldi	r25, 0x04	; 4
    2eee:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z8TWI_initR10TWI_struct>
	TWI_onRequest(requestStarted, TWIC);
    2ef2:	60 e8       	ldi	r22, 0x80	; 128
    2ef4:	74 e0       	ldi	r23, 0x04	; 4
    2ef6:	85 e2       	ldi	r24, 0x25	; 37
    2ef8:	93 e1       	ldi	r25, 0x13	; 19
    2efa:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z13TWI_onRequestPFvvER10TWI_struct>

	// Init board
	board_init();
    2efe:	0e 94 76 2e 	call	0x5cec	; 0x5cec <board_init>
	initLEDs();
    2f02:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_Z8initLEDsv>

	//Init UART for Debug interface and RS485 drivers
	USART_Init(USARTD0, 115200, 24000000, false);	// RX/TX out
    2f06:	e1 2c       	mov	r14, r1
    2f08:	00 e0       	ldi	r16, 0x00	; 0
    2f0a:	16 e3       	ldi	r17, 0x36	; 54
    2f0c:	2e e6       	ldi	r18, 0x6E	; 110
    2f0e:	31 e0       	ldi	r19, 0x01	; 1
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	52 ec       	ldi	r21, 0xC2	; 194
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	80 ea       	ldi	r24, 0xA0	; 160
    2f1a:	99 e0       	ldi	r25, 0x09	; 9
    2f1c:	0e 94 2e 09 	call	0x125c	; 0x125c <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTE1,37100,24000000,false);	// RS485 1
    2f20:	00 e0       	ldi	r16, 0x00	; 0
    2f22:	16 e3       	ldi	r17, 0x36	; 54
    2f24:	2e e6       	ldi	r18, 0x6E	; 110
    2f26:	31 e0       	ldi	r19, 0x01	; 1
    2f28:	4c ee       	ldi	r20, 0xEC	; 236
    2f2a:	50 e9       	ldi	r21, 0x90	; 144
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	70 e0       	ldi	r23, 0x00	; 0
    2f30:	80 eb       	ldi	r24, 0xB0	; 176
    2f32:	9a e0       	ldi	r25, 0x0A	; 10
    2f34:	0e 94 2e 09 	call	0x125c	; 0x125c <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTF0,37100,24000000,false);	// RS485 2
    2f38:	00 e0       	ldi	r16, 0x00	; 0
    2f3a:	16 e3       	ldi	r17, 0x36	; 54
    2f3c:	2e e6       	ldi	r18, 0x6E	; 110
    2f3e:	31 e0       	ldi	r19, 0x01	; 1
    2f40:	4c ee       	ldi	r20, 0xEC	; 236
    2f42:	50 e9       	ldi	r21, 0x90	; 144
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	80 ea       	ldi	r24, 0xA0	; 160
    2f4a:	9b e0       	ldi	r25, 0x0B	; 11
    2f4c:	0e 94 2e 09 	call	0x125c	; 0x125c <_Z10USART_InitR12USART_structmmb>
	
	PORTE_OUTSET = 0b00110000;
    2f50:	80 e3       	ldi	r24, 0x30	; 48
    2f52:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	
	ADC_Init(ADCA);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	92 e0       	ldi	r25, 0x02	; 2
    2f5a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <_Z8ADC_InitR10ADC_struct>
    2f5e:	c1 e0       	ldi	r28, 0x01	; 1
    2f60:	d0 e0       	ldi	r29, 0x00	; 0
>>>>>>> Stashed changes
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
<<<<<<< Updated upstream
    3300:	ce 01       	movw	r24, r28
    3302:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <_Z8StopBeltj>
    3306:	21 96       	adiw	r28, 0x01	; 1
=======
    2f62:	ce 01       	movw	r24, r28
    2f64:	0e 94 b4 11 	call	0x2368	; 0x2368 <_Z8StopBeltj>
    2f68:	21 96       	adiw	r28, 0x01	; 1
>>>>>>> Stashed changes
	PORTE_OUTSET = 0b00110000;
	
	ADC_Init(ADCA);
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
<<<<<<< Updated upstream
    3308:	cc 30       	cpi	r28, 0x0C	; 12
    330a:	d1 05       	cpc	r29, r1
    330c:	c9 f7       	brne	.-14     	; 0x3300 <main+0xb8>
    330e:	c1 e0       	ldi	r28, 0x01	; 1
    3310:	d0 e0       	ldi	r29, 0x00	; 0
=======
    2f6a:	cc 30       	cpi	r28, 0x0C	; 12
    2f6c:	d1 05       	cpc	r29, r1
    2f6e:	c9 f7       	brne	.-14     	; 0x2f62 <main+0xb8>
    2f70:	c1 e0       	ldi	r28, 0x01	; 1
    2f72:	d0 e0       	ldi	r29, 0x00	; 0
>>>>>>> Stashed changes
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
		StopTurntable(i);
<<<<<<< Updated upstream
    3312:	ce 01       	movw	r24, r28
    3314:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <_Z13StopTurntablej>
    3318:	21 96       	adiw	r28, 0x01	; 1
=======
    2f74:	ce 01       	movw	r24, r28
    2f76:	0e 94 2c 12 	call	0x2458	; 0x2458 <_Z13StopTurntablej>
    2f7a:	21 96       	adiw	r28, 0x01	; 1
>>>>>>> Stashed changes
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
<<<<<<< Updated upstream
    331a:	cc 30       	cpi	r28, 0x0C	; 12
    331c:	d1 05       	cpc	r29, r1
    331e:	c9 f7       	brne	.-14     	; 0x3312 <main+0xca>
		StopTurntable(i);
	}
	StopSorterArm();
    3320:	0e 94 26 10 	call	0x204c	; 0x204c <StopSorterArm>
	StopElevator();
    3324:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <StopElevator>
=======
    2f7c:	cc 30       	cpi	r28, 0x0C	; 12
    2f7e:	d1 05       	cpc	r29, r1
    2f80:	c9 f7       	brne	.-14     	; 0x2f74 <main+0xca>
		StopTurntable(i);
	}
	StopSorterArm();
    2f82:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <StopSorterArm>
	StopElevator();
    2f86:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
>>>>>>> Stashed changes
	
	// sysclk_enable_peripheral_clock(&TCC1); //zie SorterArm.cpp, TODO weghalen als stepperdrivers uitgelezen kunnen worden
	
	sei(); //global interrupt enable
<<<<<<< Updated upstream
    3328:	78 94       	sei
	ElevatorInit();
    332a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <ElevatorInit>
=======
    2f8a:	78 94       	sei
	ElevatorInit();
    2f8c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <ElevatorInit>
>>>>>>> Stashed changes

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
<<<<<<< Updated upstream
    332e:	8f e3       	ldi	r24, 0x3F	; 63
    3330:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
=======
    2f90:	8f e3       	ldi	r24, 0x3F	; 63
    2f92:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
	initOptocouplers();
>>>>>>> Stashed changes
	//ElevatorInterruptSetup();
	//SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
	//SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right);

	initColorSensor();
    2f96:	0e 94 77 0c 	call	0x18ee	; 0x18ee <initColorSensor>
	
	USB_TransmitString("TEST\n"); // Test serial working
<<<<<<< Updated upstream
    3334:	86 e0       	ldi	r24, 0x06	; 6
    3336:	93 e2       	ldi	r25, 0x23	; 35
    3338:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
=======
    2f9a:	85 e1       	ldi	r24, 0x15	; 21
    2f9c:	93 e2       	ldi	r25, 0x23	; 35
    2f9e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
>>>>>>> Stashed changes

	
	/* Insert application code here, after the board has been initialized. */
	
	
	USART_TransmitString(USARTD0, "\n\r------------------------------------------------------------\n\rReset\n\n\r");
<<<<<<< Updated upstream
    333c:	6c e0       	ldi	r22, 0x0C	; 12
    333e:	73 e2       	ldi	r23, 0x23	; 35
    3340:	80 ea       	ldi	r24, 0xA0	; 160
    3342:	99 e0       	ldi	r25, 0x09	; 9
    3344:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
    3348:	8c e0       	ldi	r24, 0x0C	; 12
    334a:	93 e2       	ldi	r25, 0x23	; 35
    334c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	
	
	getUsbBoot();
    3350:	0e 94 a8 05 	call	0xb50	; 0xb50 <_Z10getUsbBootv>
    3354:	0f 2e       	mov	r0, r31
    3356:	f0 e2       	ldi	r31, 0x20	; 32
    3358:	cf 2e       	mov	r12, r31
    335a:	f1 ea       	ldi	r31, 0xA1	; 161
    335c:	df 2e       	mov	r13, r31
    335e:	f7 e0       	ldi	r31, 0x07	; 7
    3360:	ef 2e       	mov	r14, r31
    3362:	f1 2c       	mov	r15, r1
    3364:	f0 2d       	mov	r31, r0
=======
    2fa2:	6b e1       	ldi	r22, 0x1B	; 27
    2fa4:	73 e2       	ldi	r23, 0x23	; 35
    2fa6:	80 ea       	ldi	r24, 0xA0	; 160
    2fa8:	99 e0       	ldi	r25, 0x09	; 9
    2faa:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
    2fae:	8b e1       	ldi	r24, 0x1B	; 27
    2fb0:	93 e2       	ldi	r25, 0x23	; 35
    2fb2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	
	
	getUsbBoot();
    2fb6:	0e 94 84 05 	call	0xb08	; 0xb08 <_Z10getUsbBootv>
    2fba:	0f 2e       	mov	r0, r31
    2fbc:	f0 e2       	ldi	r31, 0x20	; 32
    2fbe:	cf 2e       	mov	r12, r31
    2fc0:	f1 ea       	ldi	r31, 0xA1	; 161
    2fc2:	df 2e       	mov	r13, r31
    2fc4:	f7 e0       	ldi	r31, 0x07	; 7
    2fc6:	ef 2e       	mov	r14, r31
    2fc8:	f1 2c       	mov	r15, r1
    2fca:	f0 2d       	mov	r31, r0
>>>>>>> Stashed changes
	
	for (long i=0;i<500000;i++)
	{
		if(TWI_RecievedAddress(TWIC))
<<<<<<< Updated upstream
    3366:	80 e8       	ldi	r24, 0x80	; 128
    3368:	94 e0       	ldi	r25, 0x04	; 4
    336a:	0e 94 7d 07 	call	0xefa	; 0xefa <_Z19TWI_RecievedAddressR10TWI_struct>
    336e:	88 23       	and	r24, r24
    3370:	21 f0       	breq	.+8      	; 0x337a <main+0x132>
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
    3372:	8a ec       	ldi	r24, 0xCA	; 202
    3374:	97 e1       	ldi	r25, 0x17	; 23
    3376:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_Z17receiveHexFileI2CPFvvE>
=======
    2fcc:	80 e8       	ldi	r24, 0x80	; 128
    2fce:	94 e0       	ldi	r25, 0x04	; 4
    2fd0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_Z19TWI_RecievedAddressR10TWI_struct>
    2fd4:	88 23       	and	r24, r24
    2fd6:	21 f0       	breq	.+8      	; 0x2fe0 <main+0x136>
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
    2fd8:	88 e0       	ldi	r24, 0x08	; 8
    2fda:	96 e1       	ldi	r25, 0x16	; 22
    2fdc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17receiveHexFileI2CPFvvE>
>>>>>>> Stashed changes
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< Updated upstream
    337a:	88 e0       	ldi	r24, 0x08	; 8
    337c:	8a 95       	dec	r24
    337e:	f1 f7       	brne	.-4      	; 0x337c <main+0x134>
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	c8 1a       	sub	r12, r24
    3384:	d1 08       	sbc	r13, r1
    3386:	e1 08       	sbc	r14, r1
    3388:	f1 08       	sbc	r15, r1
=======
    2fe0:	88 e0       	ldi	r24, 0x08	; 8
    2fe2:	8a 95       	dec	r24
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <main+0x138>
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	c8 1a       	sub	r12, r24
    2fea:	d1 08       	sbc	r13, r1
    2fec:	e1 08       	sbc	r14, r1
    2fee:	f1 08       	sbc	r15, r1
>>>>>>> Stashed changes
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
	
	
	getUsbBoot();
	
	for (long i=0;i<500000;i++)
<<<<<<< Updated upstream
    338a:	69 f7       	brne	.-38     	; 0x3366 <main+0x11e>
=======
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <main+0x122>
>>>>>>> Stashed changes
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
		_delay_us(1);
	}
	
	#ifdef DEBUG
	USART_TransmitString(USARTD0, "\r\nRunning in DEBUG mode\r\n");
<<<<<<< Updated upstream
    338c:	65 e5       	ldi	r22, 0x55	; 85
    338e:	73 e2       	ldi	r23, 0x23	; 35
    3390:	80 ea       	ldi	r24, 0xA0	; 160
    3392:	99 e0       	ldi	r25, 0x09	; 9
    3394:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
=======
    2ff2:	64 e6       	ldi	r22, 0x64	; 100
    2ff4:	73 e2       	ldi	r23, 0x23	; 35
    2ff6:	80 ea       	ldi	r24, 0xA0	; 160
    2ff8:	99 e0       	ldi	r25, 0x09	; 9
    2ffa:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
>>>>>>> Stashed changes
	#endif
	
	// check if the blockly code area is empty
	USART_TransmitString(USARTD0, "Checking for program\n\r");
<<<<<<< Updated upstream
    3398:	6f e6       	ldi	r22, 0x6F	; 111
    339a:	73 e2       	ldi	r23, 0x23	; 35
    339c:	80 ea       	ldi	r24, 0xA0	; 160
    339e:	99 e0       	ldi	r25, 0x09	; 9
    33a0:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Checking for program\n\r");
    33a4:	8f e6       	ldi	r24, 0x6F	; 111
    33a6:	93 e2       	ldi	r25, 0x23	; 35
    33a8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	
	if(pgm_read_byte(0x8000) == 0xFF)
    33ac:	e0 e0       	ldi	r30, 0x00	; 0
    33ae:	f0 e8       	ldi	r31, 0x80	; 128
    33b0:	e4 91       	lpm	r30, Z
    33b2:	ef 3f       	cpi	r30, 0xFF	; 255
    33b4:	91 f4       	brne	.+36     	; 0x33da <main+0x192>
	{
		USART_TransmitString(USARTD0, "No program found\n\r");
    33b6:	66 e8       	ldi	r22, 0x86	; 134
    33b8:	73 e2       	ldi	r23, 0x23	; 35
    33ba:	80 ea       	ldi	r24, 0xA0	; 160
    33bc:	99 e0       	ldi	r25, 0x09	; 9
    33be:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		USB_TransmitString("No program found\n\r");
    33c2:	86 e8       	ldi	r24, 0x86	; 134
    33c4:	93 e2       	ldi	r25, 0x23	; 35
    33c6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
=======
    2ffe:	6e e7       	ldi	r22, 0x7E	; 126
    3000:	73 e2       	ldi	r23, 0x23	; 35
    3002:	80 ea       	ldi	r24, 0xA0	; 160
    3004:	99 e0       	ldi	r25, 0x09	; 9
    3006:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Checking for program\n\r");
    300a:	8e e7       	ldi	r24, 0x7E	; 126
    300c:	93 e2       	ldi	r25, 0x23	; 35
    300e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	
	if(pgm_read_byte(0x8000) == 0xFF)
    3012:	e0 e0       	ldi	r30, 0x00	; 0
    3014:	f0 e8       	ldi	r31, 0x80	; 128
    3016:	e4 91       	lpm	r30, Z
    3018:	ef 3f       	cpi	r30, 0xFF	; 255
    301a:	91 f4       	brne	.+36     	; 0x3040 <main+0x196>
	{
		USART_TransmitString(USARTD0, "No program found\n\r");
    301c:	65 e9       	ldi	r22, 0x95	; 149
    301e:	73 e2       	ldi	r23, 0x23	; 35
    3020:	80 ea       	ldi	r24, 0xA0	; 160
    3022:	99 e0       	ldi	r25, 0x09	; 9
    3024:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		USB_TransmitString("No program found\n\r");
    3028:	85 e9       	ldi	r24, 0x95	; 149
    302a:	93 e2       	ldi	r25, 0x23	; 35
    302c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
>>>>>>> Stashed changes
		
		while(true)
		{
			//USART0_TransmitString("test");
			if (!PORTA_IN &(1<<0))
<<<<<<< Updated upstream
    33ca:	c8 e0       	ldi	r28, 0x08	; 8
    33cc:	d6 e0       	ldi	r29, 0x06	; 6
    33ce:	88 81       	ld	r24, Y
    33d0:	81 11       	cpse	r24, r1
    33d2:	fd cf       	rjmp	.-6      	; 0x33ce <main+0x186>
			{
				resetDevice();
    33d4:	0e 94 4a 04 	call	0x894	; 0x894 <_Z11resetDevicev>
    33d8:	fa cf       	rjmp	.-12     	; 0x33ce <main+0x186>
=======
    3030:	c8 e0       	ldi	r28, 0x08	; 8
    3032:	d6 e0       	ldi	r29, 0x06	; 6
    3034:	88 81       	ld	r24, Y
    3036:	81 11       	cpse	r24, r1
    3038:	fd cf       	rjmp	.-6      	; 0x3034 <main+0x18a>
			{
				resetDevice();
    303a:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
    303e:	fa cf       	rjmp	.-12     	; 0x3034 <main+0x18a>
>>>>>>> Stashed changes
			}
		}
	}

	// run the blockly
	Started = 1;
<<<<<<< Updated upstream
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	80 93 ce 23 	sts	0x23CE, r24	; 0x8023ce <Started>
	USART_TransmitString(USARTD0, "Starting your program\n\r");
    33e0:	69 e9       	ldi	r22, 0x99	; 153
    33e2:	73 e2       	ldi	r23, 0x23	; 35
    33e4:	80 ea       	ldi	r24, 0xA0	; 160
    33e6:	99 e0       	ldi	r25, 0x09	; 9
    33e8:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Starting your program\n\r");
    33ec:	89 e9       	ldi	r24, 0x99	; 153
    33ee:	93 e2       	ldi	r25, 0x23	; 35
    33f0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	asm("jmp 0x8000");
    33f4:	0c 94 00 40 	jmp	0x8000	; 0x8000 <jump_table+0x200>

}
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	ff 90       	pop	r15
    3406:	ef 90       	pop	r14
    3408:	df 90       	pop	r13
    340a:	cf 90       	pop	r12
    340c:	08 95       	ret

0000340e <_Z10ToggleLED1v>:
=======
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	80 93 de 23 	sts	0x23DE, r24	; 0x8023de <Started>
	USART_TransmitString(USARTD0, "Starting your program\n\r");
    3046:	68 ea       	ldi	r22, 0xA8	; 168
    3048:	73 e2       	ldi	r23, 0x23	; 35
    304a:	80 ea       	ldi	r24, 0xA0	; 160
    304c:	99 e0       	ldi	r25, 0x09	; 9
    304e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Starting your program\n\r");
    3052:	88 ea       	ldi	r24, 0xA8	; 168
    3054:	93 e2       	ldi	r25, 0x23	; 35
    3056:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	asm("jmp 0x8000");
    305a:	0c 94 00 40 	jmp	0x8000	; 0x8000 <jump_table+0x200>

}
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	df 90       	pop	r13
    3070:	cf 90       	pop	r12
    3072:	08 95       	ret

00003074 <_Z10ToggleLED1v>:
>>>>>>> Stashed changes
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
	} //Set the LED pins to output
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
<<<<<<< Updated upstream
    340e:	e7 ee       	ldi	r30, 0xE7	; 231
    3410:	f6 e0       	ldi	r31, 0x06	; 6
    3412:	80 81       	ld	r24, Z
    3414:	80 61       	ori	r24, 0x10	; 16
    3416:	80 83       	st	Z, r24
    3418:	08 95       	ret

0000341a <_Z10ToggleLED2v>:
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit
    341a:	e7 ee       	ldi	r30, 0xE7	; 231
    341c:	f6 e0       	ldi	r31, 0x06	; 6
    341e:	80 81       	ld	r24, Z
    3420:	80 62       	ori	r24, 0x20	; 32
    3422:	80 83       	st	Z, r24
    3424:	08 95       	ret

00003426 <udi_cdc_comm_enable>:
=======
    3074:	e7 ee       	ldi	r30, 0xE7	; 231
    3076:	f6 e0       	ldi	r31, 0x06	; 6
    3078:	80 81       	ld	r24, Z
    307a:	80 61       	ori	r24, 0x10	; 16
    307c:	80 83       	st	Z, r24
    307e:	08 95       	ret

00003080 <_Z10ToggleLED2v>:
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit
    3080:	e7 ee       	ldi	r30, 0xE7	; 231
    3082:	f6 e0       	ldi	r31, 0x06	; 6
    3084:	80 81       	ld	r24, Z
    3086:	80 62       	ori	r24, 0x20	; 32
    3088:	80 83       	st	Z, r24
    308a:	08 95       	ret

0000308c <udi_cdc_comm_enable>:
>>>>>>> Stashed changes
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
<<<<<<< Updated upstream
    3426:	10 92 e4 24 	sts	0x24E4, r1	; 0x8024e4 <udi_cdc_nb_comm_enabled>
=======
    308c:	10 92 f4 24 	sts	0x24F4, r1	; 0x8024f4 <udi_cdc_nb_comm_enabled>
>>>>>>> Stashed changes
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
<<<<<<< Updated upstream
    342a:	10 92 f0 24 	sts	0x24F0, r1	; 0x8024f0 <udi_cdc_state>
    342e:	10 92 f1 24 	sts	0x24F1, r1	; 0x8024f1 <udi_cdc_state+0x1>

	uid_cdc_state_msg[port].header.bmRequestType =
    3432:	e6 ee       	ldi	r30, 0xE6	; 230
    3434:	f4 e2       	ldi	r31, 0x24	; 36
    3436:	81 ea       	ldi	r24, 0xA1	; 161
    3438:	80 83       	st	Z, r24
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    343a:	80 e2       	ldi	r24, 0x20	; 32
    343c:	81 83       	std	Z+1, r24	; 0x01
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    343e:	12 82       	std	Z+2, r1	; 0x02
    3440:	13 82       	std	Z+3, r1	; 0x03
=======
    3090:	10 92 00 25 	sts	0x2500, r1	; 0x802500 <udi_cdc_state>
    3094:	10 92 01 25 	sts	0x2501, r1	; 0x802501 <udi_cdc_state+0x1>

	uid_cdc_state_msg[port].header.bmRequestType =
    3098:	e6 ef       	ldi	r30, 0xF6	; 246
    309a:	f4 e2       	ldi	r31, 0x24	; 36
    309c:	81 ea       	ldi	r24, 0xA1	; 161
    309e:	80 83       	st	Z, r24
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    30a0:	80 e2       	ldi	r24, 0x20	; 32
    30a2:	81 83       	std	Z+1, r24	; 0x01
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    30a4:	12 82       	std	Z+2, r1	; 0x02
    30a6:	13 82       	std	Z+3, r1	; 0x03
>>>>>>> Stashed changes
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
<<<<<<< Updated upstream
    3442:	14 82       	std	Z+4, r1	; 0x04
    3444:	15 82       	std	Z+5, r1	; 0x05
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	86 83       	std	Z+6, r24	; 0x06
    344c:	97 83       	std	Z+7, r25	; 0x07
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    344e:	10 86       	std	Z+8, r1	; 0x08
    3450:	11 86       	std	Z+9, r1	; 0x09

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    3452:	e4 ef       	ldi	r30, 0xF4	; 244
    3454:	f4 e2       	ldi	r31, 0x24	; 36
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	92 ec       	ldi	r25, 0xC2	; 194
    345a:	a1 e0       	ldi	r26, 0x01	; 1
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	80 83       	st	Z, r24
    3460:	91 83       	std	Z+1, r25	; 0x01
    3462:	a2 83       	std	Z+2, r26	; 0x02
    3464:	b3 83       	std	Z+3, r27	; 0x03
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    3466:	14 82       	std	Z+4, r1	; 0x04
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    3468:	15 82       	std	Z+5, r1	; 0x05
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    346a:	88 e0       	ldi	r24, 0x08	; 8
    346c:	86 83       	std	Z+6, r24	; 0x06
=======
    30a8:	14 82       	std	Z+4, r1	; 0x04
    30aa:	15 82       	std	Z+5, r1	; 0x05
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	86 83       	std	Z+6, r24	; 0x06
    30b2:	97 83       	std	Z+7, r25	; 0x07
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    30b4:	10 86       	std	Z+8, r1	; 0x08
    30b6:	11 86       	std	Z+9, r1	; 0x09

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    30b8:	e4 e0       	ldi	r30, 0x04	; 4
    30ba:	f5 e2       	ldi	r31, 0x25	; 37
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	92 ec       	ldi	r25, 0xC2	; 194
    30c0:	a1 e0       	ldi	r26, 0x01	; 1
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	80 83       	st	Z, r24
    30c6:	91 83       	std	Z+1, r25	; 0x01
    30c8:	a2 83       	std	Z+2, r26	; 0x02
    30ca:	b3 83       	std	Z+3, r27	; 0x03
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    30cc:	14 82       	std	Z+4, r1	; 0x04
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    30ce:	15 82       	std	Z+5, r1	; 0x05
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    30d0:	88 e0       	ldi	r24, 0x08	; 8
    30d2:	86 83       	std	Z+6, r24	; 0x06
>>>>>>> Stashed changes
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
<<<<<<< Updated upstream
    346e:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <udi_cdc_nb_comm_enabled>
    3472:	8f 5f       	subi	r24, 0xFF	; 255
    3474:	80 93 e4 24 	sts	0x24E4, r24	; 0x8024e4 <udi_cdc_nb_comm_enabled>
	return true;
}
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	08 95       	ret

0000347c <udi_cdc_comm_disable>:
=======
    30d4:	80 91 f4 24 	lds	r24, 0x24F4	; 0x8024f4 <udi_cdc_nb_comm_enabled>
    30d8:	8f 5f       	subi	r24, 0xFF	; 255
    30da:	80 93 f4 24 	sts	0x24F4, r24	; 0x8024f4 <udi_cdc_nb_comm_enabled>
	return true;
}
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	08 95       	ret

000030e2 <udi_cdc_comm_disable>:
>>>>>>> Stashed changes
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
<<<<<<< Updated upstream
    347c:	80 91 e4 24 	lds	r24, 0x24E4	; 0x8024e4 <udi_cdc_nb_comm_enabled>
    3480:	81 50       	subi	r24, 0x01	; 1
    3482:	80 93 e4 24 	sts	0x24E4, r24	; 0x8024e4 <udi_cdc_nb_comm_enabled>
    3486:	08 95       	ret

00003488 <udi_cdc_data_disable>:
=======
    30e2:	80 91 f4 24 	lds	r24, 0x24F4	; 0x8024f4 <udi_cdc_nb_comm_enabled>
    30e6:	81 50       	subi	r24, 0x01	; 1
    30e8:	80 93 f4 24 	sts	0x24F4, r24	; 0x8024f4 <udi_cdc_nb_comm_enabled>
    30ec:	08 95       	ret

000030ee <udi_cdc_data_disable>:
>>>>>>> Stashed changes
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
<<<<<<< Updated upstream
    3488:	80 91 e3 24 	lds	r24, 0x24E3	; 0x8024e3 <udi_cdc_nb_data_enabled>
    348c:	81 50       	subi	r24, 0x01	; 1
    348e:	80 93 e3 24 	sts	0x24E3, r24	; 0x8024e3 <udi_cdc_nb_data_enabled>
	port = udi_cdc_nb_data_enabled;
    3492:	80 91 e3 24 	lds	r24, 0x24E3	; 0x8024e3 <udi_cdc_nb_data_enabled>
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    3496:	10 92 e2 24 	sts	0x24E2, r1	; 0x8024e2 <udi_cdc_data_running>
    349a:	08 95       	ret

0000349c <udi_cdc_data_setup>:
=======
    30ee:	80 91 f3 24 	lds	r24, 0x24F3	; 0x8024f3 <udi_cdc_nb_data_enabled>
    30f2:	81 50       	subi	r24, 0x01	; 1
    30f4:	80 93 f3 24 	sts	0x24F3, r24	; 0x8024f3 <udi_cdc_nb_data_enabled>
	port = udi_cdc_nb_data_enabled;
    30f8:	80 91 f3 24 	lds	r24, 0x24F3	; 0x8024f3 <udi_cdc_nb_data_enabled>
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    30fc:	10 92 f2 24 	sts	0x24F2, r1	; 0x8024f2 <udi_cdc_data_running>
    3100:	08 95       	ret

00003102 <udi_cdc_data_setup>:
>>>>>>> Stashed changes
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
<<<<<<< Updated upstream
    349c:	80 e0       	ldi	r24, 0x00	; 0
    349e:	08 95       	ret

000034a0 <udi_cdc_getsetting>:
=======
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	08 95       	ret

00003106 <udi_cdc_getsetting>:
>>>>>>> Stashed changes

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
<<<<<<< Updated upstream
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	08 95       	ret

000034a4 <udi_cdc_comm_setup>:
=======
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	08 95       	ret

0000310a <udi_cdc_comm_setup>:
>>>>>>> Stashed changes

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
<<<<<<< Updated upstream
    34a4:	80 91 51 26 	lds	r24, 0x2651	; 0x802651 <udd_g_ctrlreq>
    34a8:	88 23       	and	r24, r24
    34aa:	cc f4       	brge	.+50     	; 0x34de <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    34ac:	80 76       	andi	r24, 0x60	; 96
    34ae:	80 32       	cpi	r24, 0x20	; 32
    34b0:	b9 f5       	brne	.+110    	; 0x3520 <udi_cdc_comm_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    34b2:	80 91 52 26 	lds	r24, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    34b6:	81 32       	cpi	r24, 0x21	; 33
    34b8:	a9 f5       	brne	.+106    	; 0x3524 <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    34ba:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    34be:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    34c2:	07 97       	sbiw	r24, 0x07	; 7
    34c4:	89 f5       	brne	.+98     	; 0x3528 <udi_cdc_comm_setup+0x84>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    34c6:	e1 e5       	ldi	r30, 0x51	; 81
    34c8:	f6 e2       	ldi	r31, 0x26	; 38
    34ca:	84 ef       	ldi	r24, 0xF4	; 244
    34cc:	94 e2       	ldi	r25, 0x24	; 36
    34ce:	80 87       	std	Z+8, r24	; 0x08
    34d0:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    34d2:	87 e0       	ldi	r24, 0x07	; 7
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	82 87       	std	Z+10, r24	; 0x0a
    34d8:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	08 95       	ret
=======
    310a:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <udd_g_ctrlreq>
    310e:	88 23       	and	r24, r24
    3110:	cc f4       	brge	.+50     	; 0x3144 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3112:	80 76       	andi	r24, 0x60	; 96
    3114:	80 32       	cpi	r24, 0x20	; 32
    3116:	b9 f5       	brne	.+110    	; 0x3186 <udi_cdc_comm_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    3118:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    311c:	81 32       	cpi	r24, 0x21	; 33
    311e:	a9 f5       	brne	.+106    	; 0x318a <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    3120:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    3124:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    3128:	07 97       	sbiw	r24, 0x07	; 7
    312a:	89 f5       	brne	.+98     	; 0x318e <udi_cdc_comm_setup+0x84>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    312c:	e1 e6       	ldi	r30, 0x61	; 97
    312e:	f6 e2       	ldi	r31, 0x26	; 38
    3130:	84 e0       	ldi	r24, 0x04	; 4
    3132:	95 e2       	ldi	r25, 0x25	; 37
    3134:	80 87       	std	Z+8, r24	; 0x08
    3136:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    3138:	87 e0       	ldi	r24, 0x07	; 7
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	82 87       	std	Z+10, r24	; 0x0a
    313e:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	08 95       	ret
>>>>>>> Stashed changes
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
<<<<<<< Updated upstream
    34de:	80 76       	andi	r24, 0x60	; 96
    34e0:	80 32       	cpi	r24, 0x20	; 32
    34e2:	21 f5       	brne	.+72     	; 0x352c <udi_cdc_comm_setup+0x88>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    34e4:	80 91 52 26 	lds	r24, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    34e8:	80 32       	cpi	r24, 0x20	; 32
    34ea:	21 f0       	breq	.+8      	; 0x34f4 <udi_cdc_comm_setup+0x50>
    34ec:	82 32       	cpi	r24, 0x22	; 34
    34ee:	01 f1       	breq	.+64     	; 0x3530 <udi_cdc_comm_setup+0x8c>
=======
    3144:	80 76       	andi	r24, 0x60	; 96
    3146:	80 32       	cpi	r24, 0x20	; 32
    3148:	21 f5       	brne	.+72     	; 0x3192 <udi_cdc_comm_setup+0x88>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    314a:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    314e:	80 32       	cpi	r24, 0x20	; 32
    3150:	21 f0       	breq	.+8      	; 0x315a <udi_cdc_comm_setup+0x50>
    3152:	82 32       	cpi	r24, 0x22	; 34
    3154:	01 f1       	breq	.+64     	; 0x3196 <udi_cdc_comm_setup+0x8c>
>>>>>>> Stashed changes
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
<<<<<<< Updated upstream
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	08 95       	ret
=======
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	08 95       	ret
>>>>>>> Stashed changes
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
<<<<<<< Updated upstream
    34f4:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    34f8:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    34fc:	07 97       	sbiw	r24, 0x07	; 7
    34fe:	d1 f4       	brne	.+52     	; 0x3534 <udi_cdc_comm_setup+0x90>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
    3500:	e1 e5       	ldi	r30, 0x51	; 81
    3502:	f6 e2       	ldi	r31, 0x26	; 38
    3504:	8c e9       	ldi	r24, 0x9C	; 156
    3506:	9a e1       	ldi	r25, 0x1A	; 26
    3508:	84 87       	std	Z+12, r24	; 0x0c
    350a:	95 87       	std	Z+13, r25	; 0x0d
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    350c:	84 ef       	ldi	r24, 0xF4	; 244
    350e:	94 e2       	ldi	r25, 0x24	; 36
    3510:	80 87       	std	Z+8, r24	; 0x08
    3512:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    3514:	87 e0       	ldi	r24, 0x07	; 7
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	82 87       	std	Z+10, r24	; 0x0a
    351a:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	08 95       	ret
=======
    315a:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    315e:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    3162:	07 97       	sbiw	r24, 0x07	; 7
    3164:	d1 f4       	brne	.+52     	; 0x319a <udi_cdc_comm_setup+0x90>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
    3166:	e1 e6       	ldi	r30, 0x61	; 97
    3168:	f6 e2       	ldi	r31, 0x26	; 38
    316a:	8f ec       	ldi	r24, 0xCF	; 207
    316c:	98 e1       	ldi	r25, 0x18	; 24
    316e:	84 87       	std	Z+12, r24	; 0x0c
    3170:	95 87       	std	Z+13, r25	; 0x0d
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    3172:	84 e0       	ldi	r24, 0x04	; 4
    3174:	95 e2       	ldi	r25, 0x25	; 37
    3176:	80 87       	std	Z+8, r24	; 0x08
    3178:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    317a:	87 e0       	ldi	r24, 0x07	; 7
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	82 87       	std	Z+10, r24	; 0x0a
    3180:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	08 95       	ret
>>>>>>> Stashed changes
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
<<<<<<< Updated upstream
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	08 95       	ret
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	08 95       	ret
=======
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	08 95       	ret
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	08 95       	ret
>>>>>>> Stashed changes
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
<<<<<<< Updated upstream
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	08 95       	ret
=======
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	08 95       	ret
>>>>>>> Stashed changes
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
<<<<<<< Updated upstream
    352c:	80 e0       	ldi	r24, 0x00	; 0
    352e:	08 95       	ret
=======
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	08 95       	ret
>>>>>>> Stashed changes
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
<<<<<<< Updated upstream
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	08 95       	ret
=======
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	08 95       	ret
>>>>>>> Stashed changes
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
<<<<<<< Updated upstream
    3534:	80 e0       	ldi	r24, 0x00	; 0
=======
    319a:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
				return true;
			}
		}
	}
	return false;  // request Not supported
}
<<<<<<< Updated upstream
    3536:	08 95       	ret

00003538 <udi_cdc_line_coding_received>:
=======
    319c:	08 95       	ret

0000319e <udi_cdc_line_coding_received>:
>>>>>>> Stashed changes
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
<<<<<<< Updated upstream
    3538:	08 95       	ret

0000353a <udi_cdc_tx_send>:
=======
    319e:	08 95       	ret

000031a0 <udi_cdc_tx_send>:
>>>>>>> Stashed changes
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
<<<<<<< Updated upstream
    353a:	ff 92       	push	r15
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	1f 92       	push	r1
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
=======
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	1f 92       	push	r1
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
<<<<<<< Updated upstream
    354a:	80 91 d2 23 	lds	r24, 0x23D2	; 0x8023d2 <udi_cdc_tx_trans_ongoing>
    354e:	81 11       	cpse	r24, r1
    3550:	9f c0       	rjmp	.+318    	; 0x3690 <udi_cdc_tx_send+0x156>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    3552:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <udd_is_high_speed>
    3556:	88 23       	and	r24, r24
    3558:	51 f0       	breq	.+20     	; 0x356e <udi_cdc_tx_send+0x34>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    355a:	00 91 d3 23 	lds	r16, 0x23D3	; 0x8023d3 <udi_cdc_tx_sof_num>
    355e:	10 91 d4 23 	lds	r17, 0x23D4	; 0x8023d4 <udi_cdc_tx_sof_num+0x1>
    3562:	0e 94 28 27 	call	0x4e50	; 0x4e50 <udd_get_micro_frame_number>
    3566:	08 17       	cp	r16, r24
    3568:	19 07       	cpc	r17, r25
    356a:	59 f4       	brne	.+22     	; 0x3582 <udi_cdc_tx_send+0x48>
    356c:	91 c0       	rjmp	.+290    	; 0x3690 <udi_cdc_tx_send+0x156>
=======
    31b0:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udi_cdc_tx_trans_ongoing>
    31b4:	81 11       	cpse	r24, r1
    31b6:	9f c0       	rjmp	.+318    	; 0x32f6 <udi_cdc_tx_send+0x156>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    31b8:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <udd_is_high_speed>
    31bc:	88 23       	and	r24, r24
    31be:	51 f0       	breq	.+20     	; 0x31d4 <udi_cdc_tx_send+0x34>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    31c0:	00 91 e3 23 	lds	r16, 0x23E3	; 0x8023e3 <udi_cdc_tx_sof_num>
    31c4:	10 91 e4 23 	lds	r17, 0x23E4	; 0x8023e4 <udi_cdc_tx_sof_num+0x1>
    31c8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <udd_get_micro_frame_number>
    31cc:	08 17       	cp	r16, r24
    31ce:	19 07       	cpc	r17, r25
    31d0:	59 f4       	brne	.+22     	; 0x31e8 <udi_cdc_tx_send+0x48>
    31d2:	91 c0       	rjmp	.+290    	; 0x32f6 <udi_cdc_tx_send+0x156>
>>>>>>> Stashed changes
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
<<<<<<< Updated upstream
    356e:	00 91 d3 23 	lds	r16, 0x23D3	; 0x8023d3 <udi_cdc_tx_sof_num>
    3572:	10 91 d4 23 	lds	r17, 0x23D4	; 0x8023d4 <udi_cdc_tx_sof_num+0x1>
    3576:	0e 94 23 27 	call	0x4e46	; 0x4e46 <udd_get_frame_number>
    357a:	08 17       	cp	r16, r24
    357c:	19 07       	cpc	r17, r25
    357e:	09 f4       	brne	.+2      	; 0x3582 <udi_cdc_tx_send+0x48>
    3580:	87 c0       	rjmp	.+270    	; 0x3690 <udi_cdc_tx_send+0x156>
=======
    31d4:	00 91 e3 23 	lds	r16, 0x23E3	; 0x8023e3 <udi_cdc_tx_sof_num>
    31d8:	10 91 e4 23 	lds	r17, 0x23E4	; 0x8023e4 <udi_cdc_tx_sof_num+0x1>
    31dc:	0e 94 56 25 	call	0x4aac	; 0x4aac <udd_get_frame_number>
    31e0:	08 17       	cp	r16, r24
    31e2:	19 07       	cpc	r17, r25
    31e4:	09 f4       	brne	.+2      	; 0x31e8 <udi_cdc_tx_send+0x48>
    31e6:	87 c0       	rjmp	.+270    	; 0x32f6 <udi_cdc_tx_send+0x156>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3582:	8f b7       	in	r24, 0x3f	; 63
    3584:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3586:	f8 94       	cli
	return flags;
    3588:	19 81       	ldd	r17, Y+1	; 0x01
=======
    31e8:	8f b7       	in	r24, 0x3f	; 63
    31ea:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    31ec:	f8 94       	cli
	return flags;
    31ee:	19 81       	ldd	r17, Y+1	; 0x01
>>>>>>> Stashed changes
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
<<<<<<< Updated upstream
    358a:	00 91 d5 23 	lds	r16, 0x23D5	; 0x8023d5 <udi_cdc_tx_buf_sel>
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    358e:	e0 2f       	mov	r30, r16
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	ee 0f       	add	r30, r30
    3594:	ff 1f       	adc	r31, r31
    3596:	ea 52       	subi	r30, 0x2A	; 42
    3598:	fc 4d       	sbci	r31, 0xDC	; 220
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	89 2b       	or	r24, r25
    35a0:	09 f5       	brne	.+66     	; 0x35e4 <udi_cdc_tx_send+0xaa>
		sof_zlp_counter++;
    35a2:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <sof_zlp_counter.5229>
    35a6:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <sof_zlp_counter.5229+0x1>
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	80 93 cf 23 	sts	0x23CF, r24	; 0x8023cf <sof_zlp_counter.5229>
    35b0:	90 93 d0 23 	sts	0x23D0, r25	; 0x8023d0 <sof_zlp_counter.5229+0x1>
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    35b4:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <udd_is_high_speed>
    35b8:	81 11       	cpse	r24, r1
    35ba:	07 c0       	rjmp	.+14     	; 0x35ca <udi_cdc_tx_send+0x90>
    35bc:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <sof_zlp_counter.5229>
    35c0:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <sof_zlp_counter.5229+0x1>
    35c4:	84 36       	cpi	r24, 0x64	; 100
    35c6:	91 05       	cpc	r25, r1
    35c8:	58 f0       	brcs	.+22     	; 0x35e0 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    35ca:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <udd_is_high_speed>
    35ce:	88 23       	and	r24, r24
    35d0:	49 f0       	breq	.+18     	; 0x35e4 <udi_cdc_tx_send+0xaa>
    35d2:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <sof_zlp_counter.5229>
    35d6:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <sof_zlp_counter.5229+0x1>
    35da:	80 32       	cpi	r24, 0x20	; 32
    35dc:	93 40       	sbci	r25, 0x03	; 3
    35de:	10 f4       	brcc	.+4      	; 0x35e4 <udi_cdc_tx_send+0xaa>
=======
    31f0:	00 91 e5 23 	lds	r16, 0x23E5	; 0x8023e5 <udi_cdc_tx_buf_sel>
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    31f4:	e0 2f       	mov	r30, r16
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	ea 51       	subi	r30, 0x1A	; 26
    31fe:	fc 4d       	sbci	r31, 0xDC	; 220
    3200:	80 81       	ld	r24, Z
    3202:	91 81       	ldd	r25, Z+1	; 0x01
    3204:	89 2b       	or	r24, r25
    3206:	09 f5       	brne	.+66     	; 0x324a <udi_cdc_tx_send+0xaa>
		sof_zlp_counter++;
    3208:	80 91 df 23 	lds	r24, 0x23DF	; 0x8023df <sof_zlp_counter.5229>
    320c:	90 91 e0 23 	lds	r25, 0x23E0	; 0x8023e0 <sof_zlp_counter.5229+0x1>
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	80 93 df 23 	sts	0x23DF, r24	; 0x8023df <sof_zlp_counter.5229>
    3216:	90 93 e0 23 	sts	0x23E0, r25	; 0x8023e0 <sof_zlp_counter.5229+0x1>
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    321a:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <udd_is_high_speed>
    321e:	81 11       	cpse	r24, r1
    3220:	07 c0       	rjmp	.+14     	; 0x3230 <udi_cdc_tx_send+0x90>
    3222:	80 91 df 23 	lds	r24, 0x23DF	; 0x8023df <sof_zlp_counter.5229>
    3226:	90 91 e0 23 	lds	r25, 0x23E0	; 0x8023e0 <sof_zlp_counter.5229+0x1>
    322a:	84 36       	cpi	r24, 0x64	; 100
    322c:	91 05       	cpc	r25, r1
    322e:	58 f0       	brcs	.+22     	; 0x3246 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    3230:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <udd_is_high_speed>
    3234:	88 23       	and	r24, r24
    3236:	49 f0       	breq	.+18     	; 0x324a <udi_cdc_tx_send+0xaa>
    3238:	80 91 df 23 	lds	r24, 0x23DF	; 0x8023df <sof_zlp_counter.5229>
    323c:	90 91 e0 23 	lds	r25, 0x23E0	; 0x8023e0 <sof_zlp_counter.5229+0x1>
    3240:	80 32       	cpi	r24, 0x20	; 32
    3242:	93 40       	sbci	r25, 0x03	; 3
    3244:	10 f4       	brcc	.+4      	; 0x324a <udi_cdc_tx_send+0xaa>
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    35e0:	1f bf       	out	0x3f, r17	; 63
    35e2:	56 c0       	rjmp	.+172    	; 0x3690 <udi_cdc_tx_send+0x156>
=======
    3246:	1f bf       	out	0x3f, r17	; 63
    3248:	56 c0       	rjmp	.+172    	; 0x32f6 <udi_cdc_tx_send+0x156>
>>>>>>> Stashed changes
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
<<<<<<< Updated upstream
    35e4:	10 92 cf 23 	sts	0x23CF, r1	; 0x8023cf <sof_zlp_counter.5229>
    35e8:	10 92 d0 23 	sts	0x23D0, r1	; 0x8023d0 <sof_zlp_counter.5229+0x1>

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    35ec:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <udi_cdc_tx_both_buf_to_send>
    35f0:	81 11       	cpse	r24, r1
    35f2:	06 c0       	rjmp	.+12     	; 0x3600 <udi_cdc_tx_send+0xc6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	01 11       	cpse	r16, r1
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	80 93 d5 23 	sts	0x23D5, r24	; 0x8023d5 <udi_cdc_tx_buf_sel>
    35fe:	04 c0       	rjmp	.+8      	; 0x3608 <udi_cdc_tx_send+0xce>
=======
    324a:	10 92 df 23 	sts	0x23DF, r1	; 0x8023df <sof_zlp_counter.5229>
    324e:	10 92 e0 23 	sts	0x23E0, r1	; 0x8023e0 <sof_zlp_counter.5229+0x1>

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    3252:	80 91 e1 23 	lds	r24, 0x23E1	; 0x8023e1 <udi_cdc_tx_both_buf_to_send>
    3256:	81 11       	cpse	r24, r1
    3258:	06 c0       	rjmp	.+12     	; 0x3266 <udi_cdc_tx_send+0xc6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	01 11       	cpse	r16, r1
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <udi_cdc_tx_buf_sel>
    3264:	04 c0       	rjmp	.+8      	; 0x326e <udi_cdc_tx_send+0xce>
>>>>>>> Stashed changes
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
<<<<<<< Updated upstream
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	01 11       	cpse	r16, r1
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	08 2f       	mov	r16, r24
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	80 93 d2 23 	sts	0x23D2, r24	; 0x8023d2 <udi_cdc_tx_trans_ongoing>
    360e:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    3610:	10 e0       	ldi	r17, 0x00	; 0
    3612:	f8 01       	movw	r30, r16
    3614:	ee 0f       	add	r30, r30
    3616:	ff 1f       	adc	r31, r31
    3618:	ea 52       	subi	r30, 0x2A	; 42
    361a:	fc 4d       	sbci	r31, 0xDC	; 220
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	ff 24       	eor	r15, r15
    3622:	f3 94       	inc	r15
    3624:	80 34       	cpi	r24, 0x40	; 64
    3626:	91 05       	cpc	r25, r1
    3628:	09 f4       	brne	.+2      	; 0x362c <udi_cdc_tx_send+0xf2>
    362a:	f1 2c       	mov	r15, r1
	if (b_short_packet) {
    362c:	80 34       	cpi	r24, 0x40	; 64
    362e:	91 05       	cpc	r25, r1
    3630:	91 f0       	breq	.+36     	; 0x3656 <udi_cdc_tx_send+0x11c>
		if (udd_is_high_speed()) {
    3632:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <udd_is_high_speed>
    3636:	88 23       	and	r24, r24
    3638:	39 f0       	breq	.+14     	; 0x3648 <udi_cdc_tx_send+0x10e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    363a:	0e 94 28 27 	call	0x4e50	; 0x4e50 <udd_get_micro_frame_number>
    363e:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udi_cdc_tx_sof_num>
    3642:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udi_cdc_tx_sof_num+0x1>
    3646:	0b c0       	rjmp	.+22     	; 0x365e <udi_cdc_tx_send+0x124>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    3648:	0e 94 23 27 	call	0x4e46	; 0x4e46 <udd_get_frame_number>
    364c:	80 93 d3 23 	sts	0x23D3, r24	; 0x8023d3 <udi_cdc_tx_sof_num>
    3650:	90 93 d4 23 	sts	0x23D4, r25	; 0x8023d4 <udi_cdc_tx_sof_num+0x1>
    3654:	04 c0       	rjmp	.+8      	; 0x365e <udi_cdc_tx_send+0x124>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    3656:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udi_cdc_tx_sof_num>
    365a:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udi_cdc_tx_sof_num+0x1>
=======
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	01 11       	cpse	r16, r1
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	08 2f       	mov	r16, r24
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	80 93 e2 23 	sts	0x23E2, r24	; 0x8023e2 <udi_cdc_tx_trans_ongoing>
    3274:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    3276:	10 e0       	ldi	r17, 0x00	; 0
    3278:	f8 01       	movw	r30, r16
    327a:	ee 0f       	add	r30, r30
    327c:	ff 1f       	adc	r31, r31
    327e:	ea 51       	subi	r30, 0x1A	; 26
    3280:	fc 4d       	sbci	r31, 0xDC	; 220
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	ff 24       	eor	r15, r15
    3288:	f3 94       	inc	r15
    328a:	80 34       	cpi	r24, 0x40	; 64
    328c:	91 05       	cpc	r25, r1
    328e:	09 f4       	brne	.+2      	; 0x3292 <udi_cdc_tx_send+0xf2>
    3290:	f1 2c       	mov	r15, r1
	if (b_short_packet) {
    3292:	80 34       	cpi	r24, 0x40	; 64
    3294:	91 05       	cpc	r25, r1
    3296:	91 f0       	breq	.+36     	; 0x32bc <udi_cdc_tx_send+0x11c>
		if (udd_is_high_speed()) {
    3298:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <udd_is_high_speed>
    329c:	88 23       	and	r24, r24
    329e:	39 f0       	breq	.+14     	; 0x32ae <udi_cdc_tx_send+0x10e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    32a0:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <udd_get_micro_frame_number>
    32a4:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <udi_cdc_tx_sof_num>
    32a8:	90 93 e4 23 	sts	0x23E4, r25	; 0x8023e4 <udi_cdc_tx_sof_num+0x1>
    32ac:	0b c0       	rjmp	.+22     	; 0x32c4 <udi_cdc_tx_send+0x124>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    32ae:	0e 94 56 25 	call	0x4aac	; 0x4aac <udd_get_frame_number>
    32b2:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <udi_cdc_tx_sof_num>
    32b6:	90 93 e4 23 	sts	0x23E4, r25	; 0x8023e4 <udi_cdc_tx_sof_num+0x1>
    32ba:	04 c0       	rjmp	.+8      	; 0x32c4 <udi_cdc_tx_send+0x124>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    32bc:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <udi_cdc_tx_sof_num>
    32c0:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <udi_cdc_tx_sof_num+0x1>
>>>>>>> Stashed changes
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
<<<<<<< Updated upstream
    365e:	f8 01       	movw	r30, r16
    3660:	ee 0f       	add	r30, r30
    3662:	ff 1f       	adc	r31, r31
    3664:	ea 52       	subi	r30, 0x2A	; 42
    3666:	fc 4d       	sbci	r31, 0xDC	; 220
    3668:	20 81       	ld	r18, Z
    366a:	31 81       	ldd	r19, Z+1	; 0x01
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    366c:	a8 01       	movw	r20, r16
    366e:	00 24       	eor	r0, r0
    3670:	56 95       	lsr	r21
    3672:	47 95       	ror	r20
    3674:	07 94       	ror	r0
    3676:	56 95       	lsr	r21
    3678:	47 95       	ror	r20
    367a:	07 94       	ror	r0
    367c:	54 2f       	mov	r21, r20
    367e:	40 2d       	mov	r20, r0
    3680:	46 52       	subi	r20, 0x26	; 38
    3682:	5c 4d       	sbci	r21, 0xDC	; 220
=======
    32c4:	f8 01       	movw	r30, r16
    32c6:	ee 0f       	add	r30, r30
    32c8:	ff 1f       	adc	r31, r31
    32ca:	ea 51       	subi	r30, 0x1A	; 26
    32cc:	fc 4d       	sbci	r31, 0xDC	; 220
    32ce:	20 81       	ld	r18, Z
    32d0:	31 81       	ldd	r19, Z+1	; 0x01
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    32d2:	a8 01       	movw	r20, r16
    32d4:	00 24       	eor	r0, r0
    32d6:	56 95       	lsr	r21
    32d8:	47 95       	ror	r20
    32da:	07 94       	ror	r0
    32dc:	56 95       	lsr	r21
    32de:	47 95       	ror	r20
    32e0:	07 94       	ror	r0
    32e2:	54 2f       	mov	r21, r20
    32e4:	40 2d       	mov	r20, r0
    32e6:	46 51       	subi	r20, 0x16	; 22
    32e8:	5c 4d       	sbci	r21, 0xDC	; 220
>>>>>>> Stashed changes
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
<<<<<<< Updated upstream
    3684:	0f e4       	ldi	r16, 0x4F	; 79
    3686:	1b e1       	ldi	r17, 0x1B	; 27
    3688:	6f 2d       	mov	r22, r15
    368a:	81 e8       	ldi	r24, 0x81	; 129
    368c:	0e 94 31 28 	call	0x5062	; 0x5062 <udd_ep_run>
=======
    32ea:	02 e8       	ldi	r16, 0x82	; 130
    32ec:	19 e1       	ldi	r17, 0x19	; 25
    32ee:	6f 2d       	mov	r22, r15
    32f0:	81 e8       	ldi	r24, 0x81	; 129
    32f2:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <udd_ep_run>
>>>>>>> Stashed changes
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
<<<<<<< Updated upstream
    3690:	0f 90       	pop	r0
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	08 95       	ret

0000369e <udi_cdc_data_sent>:
=======
    32f6:	0f 90       	pop	r0
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	ff 90       	pop	r15
    3302:	08 95       	ret

00003304 <udi_cdc_data_sent>:
>>>>>>> Stashed changes
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
<<<<<<< Updated upstream
    369e:	81 11       	cpse	r24, r1
    36a0:	16 c0       	rjmp	.+44     	; 0x36ce <udi_cdc_data_sent+0x30>
=======
    3304:	81 11       	cpse	r24, r1
    3306:	16 c0       	rjmp	.+44     	; 0x3334 <udi_cdc_data_sent+0x30>
>>>>>>> Stashed changes
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
<<<<<<< Updated upstream
    36a2:	20 91 d5 23 	lds	r18, 0x23D5	; 0x8023d5 <udi_cdc_tx_buf_sel>
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	22 23       	and	r18, r18
    36ac:	11 f0       	breq	.+4      	; 0x36b2 <udi_cdc_data_sent+0x14>
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	fc 01       	movw	r30, r24
    36b8:	ea 52       	subi	r30, 0x2A	; 42
    36ba:	fc 4d       	sbci	r31, 0xDC	; 220
    36bc:	10 82       	st	Z, r1
    36be:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_both_buf_to_send[port] = false;
    36c0:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_trans_ongoing[port] = false;
    36c4:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udi_cdc_tx_trans_ongoing>
=======
    3308:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udi_cdc_tx_buf_sel>
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	22 23       	and	r18, r18
    3312:	11 f0       	breq	.+4      	; 0x3318 <udi_cdc_data_sent+0x14>
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	fc 01       	movw	r30, r24
    331e:	ea 51       	subi	r30, 0x1A	; 26
    3320:	fc 4d       	sbci	r31, 0xDC	; 220
    3322:	10 82       	st	Z, r1
    3324:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_both_buf_to_send[port] = false;
    3326:	10 92 e1 23 	sts	0x23E1, r1	; 0x8023e1 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_trans_ongoing[port] = false;
    332a:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <udi_cdc_tx_trans_ongoing>
>>>>>>> Stashed changes

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
<<<<<<< Updated upstream
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	0e 94 9d 1a 	call	0x353a	; 0x353a <udi_cdc_tx_send>
    36ce:	08 95       	ret

000036d0 <udi_cdc_data_sof_notify>:
=======
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <udi_cdc_tx_send>
    3334:	08 95       	ret

00003336 <udi_cdc_data_sof_notify>:
>>>>>>> Stashed changes
void udi_cdc_data_sof_notify(void)
{
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
<<<<<<< Updated upstream
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	0e 94 9d 1a 	call	0x353a	; 0x353a <udi_cdc_tx_send>
    36d6:	08 95       	ret

000036d8 <udi_cdc_ctrl_state_notify>:
=======
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <udi_cdc_tx_send>
    333c:	08 95       	ret

0000333e <udi_cdc_ctrl_state_notify>:
>>>>>>> Stashed changes
	udi_cdc_ctrl_state_notify(port, ep_comm);
}


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
<<<<<<< Updated upstream
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
=======
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
>>>>>>> Stashed changes
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
<<<<<<< Updated upstream
    36dc:	80 91 f2 24 	lds	r24, 0x24F2	; 0x8024f2 <udi_cdc_serial_state_msg_ongoing>
    36e0:	81 11       	cpse	r24, r1
    36e2:	1f c0       	rjmp	.+62     	; 0x3722 <udi_cdc_ctrl_state_notify+0x4a>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    36e4:	20 91 f0 24 	lds	r18, 0x24F0	; 0x8024f0 <udi_cdc_state>
    36e8:	30 91 f1 24 	lds	r19, 0x24F1	; 0x8024f1 <udi_cdc_state+0x1>
    36ec:	80 91 ee 24 	lds	r24, 0x24EE	; 0x8024ee <uid_cdc_state_msg+0x8>
    36f0:	90 91 ef 24 	lds	r25, 0x24EF	; 0x8024ef <uid_cdc_state_msg+0x9>
    36f4:	28 17       	cp	r18, r24
    36f6:	39 07       	cpc	r19, r25
    36f8:	a1 f0       	breq	.+40     	; 0x3722 <udi_cdc_ctrl_state_notify+0x4a>
    36fa:	86 2f       	mov	r24, r22
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    36fc:	20 91 f0 24 	lds	r18, 0x24F0	; 0x8024f0 <udi_cdc_state>
    3700:	30 91 f1 24 	lds	r19, 0x24F1	; 0x8024f1 <udi_cdc_state+0x1>
    3704:	20 93 ee 24 	sts	0x24EE, r18	; 0x8024ee <uid_cdc_state_msg+0x8>
    3708:	30 93 ef 24 	sts	0x24EF, r19	; 0x8024ef <uid_cdc_state_msg+0x9>
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    370c:	0f eb       	ldi	r16, 0xBF	; 191
    370e:	1b e1       	ldi	r17, 0x1B	; 27
    3710:	2a e0       	ldi	r18, 0x0A	; 10
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	46 ee       	ldi	r20, 0xE6	; 230
    3716:	54 e2       	ldi	r21, 0x24	; 36
    3718:	60 e0       	ldi	r22, 0x00	; 0
    371a:	0e 94 31 28 	call	0x5062	; 0x5062 <udd_ep_run>
=======
    3342:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udi_cdc_serial_state_msg_ongoing>
    3346:	81 11       	cpse	r24, r1
    3348:	1f c0       	rjmp	.+62     	; 0x3388 <udi_cdc_ctrl_state_notify+0x4a>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    334a:	20 91 00 25 	lds	r18, 0x2500	; 0x802500 <udi_cdc_state>
    334e:	30 91 01 25 	lds	r19, 0x2501	; 0x802501 <udi_cdc_state+0x1>
    3352:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <uid_cdc_state_msg+0x8>
    3356:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <uid_cdc_state_msg+0x9>
    335a:	28 17       	cp	r18, r24
    335c:	39 07       	cpc	r19, r25
    335e:	a1 f0       	breq	.+40     	; 0x3388 <udi_cdc_ctrl_state_notify+0x4a>
    3360:	86 2f       	mov	r24, r22
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    3362:	20 91 00 25 	lds	r18, 0x2500	; 0x802500 <udi_cdc_state>
    3366:	30 91 01 25 	lds	r19, 0x2501	; 0x802501 <udi_cdc_state+0x1>
    336a:	20 93 fe 24 	sts	0x24FE, r18	; 0x8024fe <uid_cdc_state_msg+0x8>
    336e:	30 93 ff 24 	sts	0x24FF, r19	; 0x8024ff <uid_cdc_state_msg+0x9>
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    3372:	02 ef       	ldi	r16, 0xF2	; 242
    3374:	19 e1       	ldi	r17, 0x19	; 25
    3376:	2a e0       	ldi	r18, 0x0A	; 10
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	46 ef       	ldi	r20, 0xF6	; 246
    337c:	54 e2       	ldi	r21, 0x24	; 36
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <udd_ep_run>
>>>>>>> Stashed changes
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
<<<<<<< Updated upstream
    371e:	80 93 f2 24 	sts	0x24F2, r24	; 0x8024f2 <udi_cdc_serial_state_msg_ongoing>
=======
    3384:	80 93 02 25 	sts	0x2502, r24	; 0x802502 <udi_cdc_serial_state_msg_ongoing>
>>>>>>> Stashed changes
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
<<<<<<< Updated upstream
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	08 95       	ret

00003728 <udi_cdc_ctrl_state_change>:
=======
    3388:	1f 91       	pop	r17
    338a:	0f 91       	pop	r16
    338c:	08 95       	ret

0000338e <udi_cdc_ctrl_state_change>:
>>>>>>> Stashed changes

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
<<<<<<< Updated upstream
    3728:	cf 93       	push	r28
    372a:	df 93       	push	r29
    372c:	1f 92       	push	r1
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
=======
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
    3392:	1f 92       	push	r1
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3732:	8f b7       	in	r24, 0x3f	; 63
    3734:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3736:	f8 94       	cli
	return flags;
    3738:	29 81       	ldd	r18, Y+1	; 0x01
=======
    3398:	8f b7       	in	r24, 0x3f	; 63
    339a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    339c:	f8 94       	cli
	return flags;
    339e:	29 81       	ldd	r18, Y+1	; 0x01
>>>>>>> Stashed changes
	port = 0;
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
<<<<<<< Updated upstream
    373a:	66 23       	and	r22, r22
    373c:	59 f0       	breq	.+22     	; 0x3754 <udi_cdc_ctrl_state_change+0x2c>
		udi_cdc_state[port] |= bit_mask;
    373e:	80 91 f0 24 	lds	r24, 0x24F0	; 0x8024f0 <udi_cdc_state>
    3742:	90 91 f1 24 	lds	r25, 0x24F1	; 0x8024f1 <udi_cdc_state+0x1>
    3746:	48 2b       	or	r20, r24
    3748:	59 2b       	or	r21, r25
    374a:	40 93 f0 24 	sts	0x24F0, r20	; 0x8024f0 <udi_cdc_state>
    374e:	50 93 f1 24 	sts	0x24F1, r21	; 0x8024f1 <udi_cdc_state+0x1>
    3752:	0c c0       	rjmp	.+24     	; 0x376c <udi_cdc_ctrl_state_change+0x44>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    3754:	80 91 f0 24 	lds	r24, 0x24F0	; 0x8024f0 <udi_cdc_state>
    3758:	90 91 f1 24 	lds	r25, 0x24F1	; 0x8024f1 <udi_cdc_state+0x1>
    375c:	40 95       	com	r20
    375e:	50 95       	com	r21
    3760:	48 23       	and	r20, r24
    3762:	59 23       	and	r21, r25
    3764:	40 93 f0 24 	sts	0x24F0, r20	; 0x8024f0 <udi_cdc_state>
    3768:	50 93 f1 24 	sts	0x24F1, r21	; 0x8024f1 <udi_cdc_state+0x1>
=======
    33a0:	66 23       	and	r22, r22
    33a2:	59 f0       	breq	.+22     	; 0x33ba <udi_cdc_ctrl_state_change+0x2c>
		udi_cdc_state[port] |= bit_mask;
    33a4:	80 91 00 25 	lds	r24, 0x2500	; 0x802500 <udi_cdc_state>
    33a8:	90 91 01 25 	lds	r25, 0x2501	; 0x802501 <udi_cdc_state+0x1>
    33ac:	48 2b       	or	r20, r24
    33ae:	59 2b       	or	r21, r25
    33b0:	40 93 00 25 	sts	0x2500, r20	; 0x802500 <udi_cdc_state>
    33b4:	50 93 01 25 	sts	0x2501, r21	; 0x802501 <udi_cdc_state+0x1>
    33b8:	0c c0       	rjmp	.+24     	; 0x33d2 <udi_cdc_ctrl_state_change+0x44>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    33ba:	80 91 00 25 	lds	r24, 0x2500	; 0x802500 <udi_cdc_state>
    33be:	90 91 01 25 	lds	r25, 0x2501	; 0x802501 <udi_cdc_state+0x1>
    33c2:	40 95       	com	r20
    33c4:	50 95       	com	r21
    33c6:	48 23       	and	r20, r24
    33c8:	59 23       	and	r21, r25
    33ca:	40 93 00 25 	sts	0x2500, r20	; 0x802500 <udi_cdc_state>
    33ce:	50 93 01 25 	sts	0x2501, r21	; 0x802501 <udi_cdc_state+0x1>
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    376c:	2f bf       	out	0x3f, r18	; 63
=======
    33d2:	2f bf       	out	0x3f, r18	; 63
>>>>>>> Stashed changes
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
		break;
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
<<<<<<< Updated upstream
    376e:	62 e8       	ldi	r22, 0x82	; 130
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <udi_cdc_ctrl_state_notify>
}
    3776:	0f 90       	pop	r0
    3778:	df 91       	pop	r29
    377a:	cf 91       	pop	r28
    377c:	08 95       	ret

0000377e <udi_cdc_serial_state_msg_sent>:
=======
    33d4:	62 e8       	ldi	r22, 0x82	; 130
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	0e 94 9f 19 	call	0x333e	; 0x333e <udi_cdc_ctrl_state_notify>
}
    33dc:	0f 90       	pop	r0
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	08 95       	ret

000033e4 <udi_cdc_serial_state_msg_sent>:
>>>>>>> Stashed changes
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
<<<<<<< Updated upstream
    377e:	10 92 f2 24 	sts	0x24F2, r1	; 0x8024f2 <udi_cdc_serial_state_msg_ongoing>
=======
    33e4:	10 92 02 25 	sts	0x2502, r1	; 0x802502 <udi_cdc_serial_state_msg_ongoing>
>>>>>>> Stashed changes

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
<<<<<<< Updated upstream
    3782:	80 91 f0 24 	lds	r24, 0x24F0	; 0x8024f0 <udi_cdc_state>
    3786:	90 91 f1 24 	lds	r25, 0x24F1	; 0x8024f1 <udi_cdc_state+0x1>
    378a:	83 78       	andi	r24, 0x83	; 131
    378c:	80 93 f0 24 	sts	0x24F0, r24	; 0x8024f0 <udi_cdc_state>
    3790:	90 93 f1 24 	sts	0x24F1, r25	; 0x8024f1 <udi_cdc_state+0x1>
=======
    33e8:	80 91 00 25 	lds	r24, 0x2500	; 0x802500 <udi_cdc_state>
    33ec:	90 91 01 25 	lds	r25, 0x2501	; 0x802501 <udi_cdc_state+0x1>
    33f0:	83 78       	andi	r24, 0x83	; 131
    33f2:	80 93 00 25 	sts	0x2500, r24	; 0x802500 <udi_cdc_state>
    33f6:	90 93 01 25 	sts	0x2501, r25	; 0x802501 <udi_cdc_state+0x1>
>>>>>>> Stashed changes
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
<<<<<<< Updated upstream
    3794:	e6 ee       	ldi	r30, 0xE6	; 230
    3796:	f4 e2       	ldi	r31, 0x24	; 36
    3798:	80 85       	ldd	r24, Z+8	; 0x08
    379a:	91 85       	ldd	r25, Z+9	; 0x09
    379c:	83 78       	andi	r24, 0x83	; 131
    379e:	80 87       	std	Z+8, r24	; 0x08
    37a0:	91 87       	std	Z+9, r25	; 0x09
=======
    33fa:	e6 ef       	ldi	r30, 0xF6	; 246
    33fc:	f4 e2       	ldi	r31, 0x24	; 36
    33fe:	80 85       	ldd	r24, Z+8	; 0x08
    3400:	91 85       	ldd	r25, Z+9	; 0x09
    3402:	83 78       	andi	r24, 0x83	; 131
    3404:	80 87       	std	Z+8, r24	; 0x08
    3406:	91 87       	std	Z+9, r25	; 0x09
>>>>>>> Stashed changes
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
<<<<<<< Updated upstream
    37a2:	64 2f       	mov	r22, r20
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <udi_cdc_ctrl_state_notify>
    37aa:	08 95       	ret

000037ac <udi_cdc_ctrl_signal_dcd>:
=======
    3408:	64 2f       	mov	r22, r20
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	0e 94 9f 19 	call	0x333e	; 0x333e <udi_cdc_ctrl_state_notify>
    3410:	08 95       	ret

00003412 <udi_cdc_ctrl_signal_dcd>:
>>>>>>> Stashed changes

//------- Application interface

void udi_cdc_ctrl_signal_dcd(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DCD);
<<<<<<< Updated upstream
    37ac:	41 e0       	ldi	r20, 0x01	; 1
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	68 2f       	mov	r22, r24
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    37b8:	08 95       	ret

000037ba <udi_cdc_ctrl_signal_dsr>:
=======
    3412:	41 e0       	ldi	r20, 0x01	; 1
    3414:	50 e0       	ldi	r21, 0x00	; 0
    3416:	68 2f       	mov	r22, r24
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    341e:	08 95       	ret

00003420 <udi_cdc_ctrl_signal_dsr>:
>>>>>>> Stashed changes
}

void udi_cdc_ctrl_signal_dsr(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
<<<<<<< Updated upstream
    37ba:	42 e0       	ldi	r20, 0x02	; 2
    37bc:	50 e0       	ldi	r21, 0x00	; 0
    37be:	68 2f       	mov	r22, r24
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    37c6:	08 95       	ret

000037c8 <udi_cdc_signal_framing_error>:
=======
    3420:	42 e0       	ldi	r20, 0x02	; 2
    3422:	50 e0       	ldi	r21, 0x00	; 0
    3424:	68 2f       	mov	r22, r24
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    342c:	08 95       	ret

0000342e <udi_cdc_signal_framing_error>:
>>>>>>> Stashed changes
}

void udi_cdc_signal_framing_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
<<<<<<< Updated upstream
    37c8:	40 e1       	ldi	r20, 0x10	; 16
    37ca:	50 e0       	ldi	r21, 0x00	; 0
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    37d4:	08 95       	ret

000037d6 <udi_cdc_signal_parity_error>:
=======
    342e:	40 e1       	ldi	r20, 0x10	; 16
    3430:	50 e0       	ldi	r21, 0x00	; 0
    3432:	61 e0       	ldi	r22, 0x01	; 1
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    343a:	08 95       	ret

0000343c <udi_cdc_signal_parity_error>:
>>>>>>> Stashed changes
}

void udi_cdc_signal_parity_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
<<<<<<< Updated upstream
    37d6:	40 e2       	ldi	r20, 0x20	; 32
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	61 e0       	ldi	r22, 0x01	; 1
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    37e2:	08 95       	ret

000037e4 <udi_cdc_signal_overrun>:
=======
    343c:	40 e2       	ldi	r20, 0x20	; 32
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	61 e0       	ldi	r22, 0x01	; 1
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    3448:	08 95       	ret

0000344a <udi_cdc_signal_overrun>:
>>>>>>> Stashed changes
}

void udi_cdc_signal_overrun(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
<<<<<<< Updated upstream
    37e4:	40 e4       	ldi	r20, 0x40	; 64
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	61 e0       	ldi	r22, 0x01	; 1
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    37f0:	08 95       	ret

000037f2 <udi_cdc_multi_ctrl_signal_dcd>:
=======
    344a:	40 e4       	ldi	r20, 0x40	; 64
    344c:	50 e0       	ldi	r21, 0x00	; 0
    344e:	61 e0       	ldi	r22, 0x01	; 1
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    3456:	08 95       	ret

00003458 <udi_cdc_multi_ctrl_signal_dcd>:
>>>>>>> Stashed changes
}

void udi_cdc_multi_ctrl_signal_dcd(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DCD);
<<<<<<< Updated upstream
    37f2:	41 e0       	ldi	r20, 0x01	; 1
    37f4:	50 e0       	ldi	r21, 0x00	; 0
    37f6:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    37fa:	08 95       	ret

000037fc <udi_cdc_multi_ctrl_signal_dsr>:
=======
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    3460:	08 95       	ret

00003462 <udi_cdc_multi_ctrl_signal_dsr>:
>>>>>>> Stashed changes
}

void udi_cdc_multi_ctrl_signal_dsr(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DSR);
<<<<<<< Updated upstream
    37fc:	42 e0       	ldi	r20, 0x02	; 2
    37fe:	50 e0       	ldi	r21, 0x00	; 0
    3800:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    3804:	08 95       	ret

00003806 <udi_cdc_multi_signal_framing_error>:
=======
    3462:	42 e0       	ldi	r20, 0x02	; 2
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    346a:	08 95       	ret

0000346c <udi_cdc_multi_signal_framing_error>:
>>>>>>> Stashed changes
}

void udi_cdc_multi_signal_framing_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_FRAMING);
<<<<<<< Updated upstream
    3806:	40 e1       	ldi	r20, 0x10	; 16
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	61 e0       	ldi	r22, 0x01	; 1
    380c:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    3810:	08 95       	ret

00003812 <udi_cdc_multi_signal_parity_error>:
=======
    346c:	40 e1       	ldi	r20, 0x10	; 16
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    3476:	08 95       	ret

00003478 <udi_cdc_multi_signal_parity_error>:
>>>>>>> Stashed changes
}

void udi_cdc_multi_signal_parity_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_PARITY);
<<<<<<< Updated upstream
    3812:	40 e2       	ldi	r20, 0x20	; 32
    3814:	50 e0       	ldi	r21, 0x00	; 0
    3816:	61 e0       	ldi	r22, 0x01	; 1
    3818:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    381c:	08 95       	ret

0000381e <udi_cdc_multi_signal_overrun>:
=======
    3478:	40 e2       	ldi	r20, 0x20	; 32
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	61 e0       	ldi	r22, 0x01	; 1
    347e:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    3482:	08 95       	ret

00003484 <udi_cdc_multi_signal_overrun>:
>>>>>>> Stashed changes
}

void udi_cdc_multi_signal_overrun(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
<<<<<<< Updated upstream
    381e:	40 e4       	ldi	r20, 0x40	; 64
    3820:	50 e0       	ldi	r21, 0x00	; 0
    3822:	61 e0       	ldi	r22, 0x01	; 1
    3824:	0e 94 94 1b 	call	0x3728	; 0x3728 <udi_cdc_ctrl_state_change>
    3828:	08 95       	ret

0000382a <udi_cdc_multi_get_nb_received_data>:
=======
    3484:	40 e4       	ldi	r20, 0x40	; 64
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	61 e0       	ldi	r22, 0x01	; 1
    348a:	0e 94 c7 19 	call	0x338e	; 0x338e <udi_cdc_ctrl_state_change>
    348e:	08 95       	ret

00003490 <udi_cdc_multi_get_nb_received_data>:
>>>>>>> Stashed changes
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
<<<<<<< Updated upstream
    382a:	cf 93       	push	r28
    382c:	df 93       	push	r29
    382e:	1f 92       	push	r1
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
=======
    3490:	cf 93       	push	r28
    3492:	df 93       	push	r29
    3494:	1f 92       	push	r1
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3834:	8f b7       	in	r24, 0x3f	; 63
    3836:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3838:	f8 94       	cli
	return flags;
    383a:	49 81       	ldd	r20, Y+1	; 0x01
=======
    349a:	8f b7       	in	r24, 0x3f	; 63
    349c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    349e:	f8 94       	cli
	return flags;
    34a0:	49 81       	ldd	r20, Y+1	; 0x01
>>>>>>> Stashed changes

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
<<<<<<< Updated upstream
    383c:	20 91 5b 24 	lds	r18, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    3840:	30 91 5c 24 	lds	r19, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    3844:	e0 91 5d 24 	lds	r30, 0x245D	; 0x80245d <udi_cdc_rx_buf_sel>
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	ee 0f       	add	r30, r30
    384c:	ff 1f       	adc	r31, r31
    384e:	e2 5a       	subi	r30, 0xA2	; 162
    3850:	fb 4d       	sbci	r31, 0xDB	; 219
    3852:	80 81       	ld	r24, Z
    3854:	91 81       	ldd	r25, Z+1	; 0x01
=======
    34a2:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    34a6:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    34aa:	e0 91 6d 24 	lds	r30, 0x246D	; 0x80246d <udi_cdc_rx_buf_sel>
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	ee 0f       	add	r30, r30
    34b2:	ff 1f       	adc	r31, r31
    34b4:	e2 59       	subi	r30, 0x92	; 146
    34b6:	fb 4d       	sbci	r31, 0xDB	; 219
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3856:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	return nb_received;
}
    3858:	82 1b       	sub	r24, r18
    385a:	93 0b       	sbc	r25, r19
    385c:	0f 90       	pop	r0
    385e:	df 91       	pop	r29
    3860:	cf 91       	pop	r28
    3862:	08 95       	ret

00003864 <udi_cdc_get_nb_received_data>:
=======
    34bc:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	return nb_received;
}
    34be:	82 1b       	sub	r24, r18
    34c0:	93 0b       	sbc	r25, r19
    34c2:	0f 90       	pop	r0
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	08 95       	ret

000034ca <udi_cdc_get_nb_received_data>:
>>>>>>> Stashed changes

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
<<<<<<< Updated upstream
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	0e 94 15 1c 	call	0x382a	; 0x382a <udi_cdc_multi_get_nb_received_data>
}
    386a:	08 95       	ret

0000386c <udi_cdc_multi_is_rx_ready>:
=======
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	0e 94 48 1a 	call	0x3490	; 0x3490 <udi_cdc_multi_get_nb_received_data>
}
    34d0:	08 95       	ret

000034d2 <udi_cdc_multi_is_rx_ready>:
>>>>>>> Stashed changes

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
<<<<<<< Updated upstream
    386c:	0e 94 15 1c 	call	0x382a	; 0x382a <udi_cdc_multi_get_nb_received_data>
    3870:	21 e0       	ldi	r18, 0x01	; 1
    3872:	89 2b       	or	r24, r25
    3874:	09 f4       	brne	.+2      	; 0x3878 <udi_cdc_multi_is_rx_ready+0xc>
    3876:	20 e0       	ldi	r18, 0x00	; 0
}
    3878:	82 2f       	mov	r24, r18
    387a:	08 95       	ret

0000387c <udi_cdc_rx_start>:
=======
    34d2:	0e 94 48 1a 	call	0x3490	; 0x3490 <udi_cdc_multi_get_nb_received_data>
    34d6:	21 e0       	ldi	r18, 0x01	; 1
    34d8:	89 2b       	or	r24, r25
    34da:	09 f4       	brne	.+2      	; 0x34de <udi_cdc_multi_is_rx_ready+0xc>
    34dc:	20 e0       	ldi	r18, 0x00	; 0
}
    34de:	82 2f       	mov	r24, r18
    34e0:	08 95       	ret

000034e2 <udi_cdc_rx_start>:
>>>>>>> Stashed changes
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
<<<<<<< Updated upstream
    387c:	0f 93       	push	r16
    387e:	1f 93       	push	r17
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	1f 92       	push	r1
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
=======
    34e2:	0f 93       	push	r16
    34e4:	1f 93       	push	r17
    34e6:	cf 93       	push	r28
    34e8:	df 93       	push	r29
    34ea:	1f 92       	push	r1
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    388a:	8f b7       	in	r24, 0x3f	; 63
    388c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    388e:	f8 94       	cli
	return flags;
    3890:	99 81       	ldd	r25, Y+1	; 0x01
=======
    34f0:	8f b7       	in	r24, 0x3f	; 63
    34f2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    34f4:	f8 94       	cli
	return flags;
    34f6:	99 81       	ldd	r25, Y+1	; 0x01
>>>>>>> Stashed changes
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
<<<<<<< Updated upstream
    3892:	20 91 5d 24 	lds	r18, 0x245D	; 0x80245d <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    3896:	80 91 5a 24 	lds	r24, 0x245A	; 0x80245a <udi_cdc_rx_trans_ongoing>
    389a:	81 11       	cpse	r24, r1
    389c:	10 c0       	rjmp	.+32     	; 0x38be <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    389e:	60 91 5b 24 	lds	r22, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    38a2:	70 91 5c 24 	lds	r23, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
    38a6:	02 2f       	mov	r16, r18
    38a8:	10 e0       	ldi	r17, 0x00	; 0
    38aa:	f8 01       	movw	r30, r16
    38ac:	ee 0f       	add	r30, r30
    38ae:	ff 1f       	adc	r31, r31
    38b0:	e2 5a       	subi	r30, 0xA2	; 162
    38b2:	fb 4d       	sbci	r31, 0xDB	; 219
    38b4:	40 81       	ld	r20, Z
    38b6:	51 81       	ldd	r21, Z+1	; 0x01
=======
    34f8:	20 91 6d 24 	lds	r18, 0x246D	; 0x80246d <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    34fc:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_rx_trans_ongoing>
    3500:	81 11       	cpse	r24, r1
    3502:	10 c0       	rjmp	.+32     	; 0x3524 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    3504:	60 91 6b 24 	lds	r22, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    3508:	70 91 6c 24 	lds	r23, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
    350c:	02 2f       	mov	r16, r18
    350e:	10 e0       	ldi	r17, 0x00	; 0
    3510:	f8 01       	movw	r30, r16
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	e2 59       	subi	r30, 0x92	; 146
    3518:	fb 4d       	sbci	r31, 0xDB	; 219
    351a:	40 81       	ld	r20, Z
    351c:	51 81       	ldd	r21, Z+1	; 0x01
>>>>>>> Stashed changes
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
<<<<<<< Updated upstream
    38b8:	64 17       	cp	r22, r20
    38ba:	75 07       	cpc	r23, r21
    38bc:	18 f4       	brcc	.+6      	; 0x38c4 <udi_cdc_rx_start+0x48>
=======
    351e:	64 17       	cp	r22, r20
    3520:	75 07       	cpc	r23, r21
    3522:	18 f4       	brcc	.+6      	; 0x352a <udi_cdc_rx_start+0x48>
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    38be:	9f bf       	out	0x3f, r25	; 63
=======
    3524:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
<<<<<<< Updated upstream
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	24 c0       	rjmp	.+72     	; 0x390c <udi_cdc_rx_start+0x90>
=======
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	24 c0       	rjmp	.+72     	; 0x3572 <udi_cdc_rx_start+0x90>
>>>>>>> Stashed changes
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
<<<<<<< Updated upstream
    38c4:	10 92 5b 24 	sts	0x245B, r1	; 0x80245b <udi_cdc_rx_pos>
    38c8:	10 92 5c 24 	sts	0x245C, r1	; 0x80245c <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	21 11       	cpse	r18, r1
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 5a 24 	sts	0x245A, r24	; 0x80245a <udi_cdc_rx_trans_ongoing>
    38dc:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	0e 94 36 1c 	call	0x386c	; 0x386c <udi_cdc_multi_is_rx_ready>
=======
    352a:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udi_cdc_rx_pos>
    352e:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	21 11       	cpse	r18, r1
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	80 93 6d 24 	sts	0x246D, r24	; 0x80246d <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	80 93 6a 24 	sts	0x246A, r24	; 0x80246a <udi_cdc_rx_trans_ongoing>
    3542:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <udi_cdc_multi_is_rx_ready>
>>>>>>> Stashed changes
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
<<<<<<< Updated upstream
    38e4:	a8 01       	movw	r20, r16
    38e6:	00 24       	eor	r0, r0
    38e8:	56 95       	lsr	r21
    38ea:	47 95       	ror	r20
    38ec:	07 94       	ror	r0
    38ee:	56 95       	lsr	r21
    38f0:	47 95       	ror	r20
    38f2:	07 94       	ror	r0
    38f4:	54 2f       	mov	r21, r20
    38f6:	40 2d       	mov	r20, r0
    38f8:	4e 59       	subi	r20, 0x9E	; 158
    38fa:	5b 4d       	sbci	r21, 0xDB	; 219
=======
    354a:	a8 01       	movw	r20, r16
    354c:	00 24       	eor	r0, r0
    354e:	56 95       	lsr	r21
    3550:	47 95       	ror	r20
    3552:	07 94       	ror	r0
    3554:	56 95       	lsr	r21
    3556:	47 95       	ror	r20
    3558:	07 94       	ror	r0
    355a:	54 2f       	mov	r21, r20
    355c:	40 2d       	mov	r20, r0
    355e:	4e 58       	subi	r20, 0x8E	; 142
    3560:	5b 4d       	sbci	r21, 0xDB	; 219
>>>>>>> Stashed changes
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
<<<<<<< Updated upstream
    38fc:	00 ec       	ldi	r16, 0xC0	; 192
    38fe:	1c e1       	ldi	r17, 0x1C	; 28
    3900:	20 e4       	ldi	r18, 0x40	; 64
    3902:	30 e0       	ldi	r19, 0x00	; 0
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	82 e0       	ldi	r24, 0x02	; 2
    3908:	0e 94 31 28 	call	0x5062	; 0x5062 <udd_ep_run>
=======
    3562:	03 ef       	ldi	r16, 0xF3	; 243
    3564:	1a e1       	ldi	r17, 0x1A	; 26
    3566:	20 e4       	ldi	r18, 0x40	; 64
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	61 e0       	ldi	r22, 0x01	; 1
    356c:	82 e0       	ldi	r24, 0x02	; 2
    356e:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <udd_ep_run>
>>>>>>> Stashed changes
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
<<<<<<< Updated upstream
    390c:	0f 90       	pop	r0
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	08 95       	ret

00003918 <udi_cdc_data_enable>:
=======
    3572:	0f 90       	pop	r0
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	08 95       	ret

0000357e <udi_cdc_data_enable>:
>>>>>>> Stashed changes
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
<<<<<<< Updated upstream
    3918:	10 92 e3 24 	sts	0x24E3, r1	; 0x8024e3 <udi_cdc_nb_data_enabled>
=======
    357e:	10 92 f3 24 	sts	0x24F3, r1	; 0x8024f3 <udi_cdc_nb_data_enabled>
>>>>>>> Stashed changes
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
<<<<<<< Updated upstream
    391c:	10 92 d2 23 	sts	0x23D2, r1	; 0x8023d2 <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    3920:	10 92 d1 23 	sts	0x23D1, r1	; 0x8023d1 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    3924:	10 92 d5 23 	sts	0x23D5, r1	; 0x8023d5 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    3928:	e6 ed       	ldi	r30, 0xD6	; 214
    392a:	f3 e2       	ldi	r31, 0x23	; 35
    392c:	10 82       	st	Z, r1
    392e:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    3930:	12 82       	std	Z+2, r1	; 0x02
    3932:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    3934:	10 92 d3 23 	sts	0x23D3, r1	; 0x8023d3 <udi_cdc_tx_sof_num>
    3938:	10 92 d4 23 	sts	0x23D4, r1	; 0x8023d4 <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0e 94 9d 1a 	call	0x353a	; 0x353a <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    3942:	10 92 5a 24 	sts	0x245A, r1	; 0x80245a <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    3946:	10 92 5d 24 	sts	0x245D, r1	; 0x80245d <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    394a:	ee e5       	ldi	r30, 0x5E	; 94
    394c:	f4 e2       	ldi	r31, 0x24	; 36
    394e:	10 82       	st	Z, r1
    3950:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    3952:	12 82       	std	Z+2, r1	; 0x02
    3954:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    3956:	10 92 5b 24 	sts	0x245B, r1	; 0x80245b <udi_cdc_rx_pos>
    395a:	10 92 5c 24 	sts	0x245C, r1	; 0x80245c <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	0e 94 3e 1c 	call	0x387c	; 0x387c <udi_cdc_rx_start>
    3964:	88 23       	and	r24, r24
    3966:	59 f0       	breq	.+22     	; 0x397e <udi_cdc_data_enable+0x66>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    3968:	90 91 e3 24 	lds	r25, 0x24E3	; 0x8024e3 <udi_cdc_nb_data_enabled>
    396c:	9f 5f       	subi	r25, 0xFF	; 255
    396e:	90 93 e3 24 	sts	0x24E3, r25	; 0x8024e3 <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    3972:	90 91 e3 24 	lds	r25, 0x24E3	; 0x8024e3 <udi_cdc_nb_data_enabled>
    3976:	91 30       	cpi	r25, 0x01	; 1
    3978:	11 f4       	brne	.+4      	; 0x397e <udi_cdc_data_enable+0x66>
		udi_cdc_data_running = true;
    397a:	90 93 e2 24 	sts	0x24E2, r25	; 0x8024e2 <udi_cdc_data_running>
	}
	return true;
}
    397e:	08 95       	ret

00003980 <udi_cdc_data_received>:
=======
    3582:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    3586:	10 92 e1 23 	sts	0x23E1, r1	; 0x8023e1 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    358a:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    358e:	e6 ee       	ldi	r30, 0xE6	; 230
    3590:	f3 e2       	ldi	r31, 0x23	; 35
    3592:	10 82       	st	Z, r1
    3594:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    3596:	12 82       	std	Z+2, r1	; 0x02
    3598:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    359a:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <udi_cdc_tx_sof_num>
    359e:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    35a8:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    35ac:	10 92 6d 24 	sts	0x246D, r1	; 0x80246d <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    35b0:	ee e6       	ldi	r30, 0x6E	; 110
    35b2:	f4 e2       	ldi	r31, 0x24	; 36
    35b4:	10 82       	st	Z, r1
    35b6:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    35b8:	12 82       	std	Z+2, r1	; 0x02
    35ba:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    35bc:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udi_cdc_rx_pos>
    35c0:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <udi_cdc_rx_start>
    35ca:	88 23       	and	r24, r24
    35cc:	59 f0       	breq	.+22     	; 0x35e4 <udi_cdc_data_enable+0x66>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    35ce:	90 91 f3 24 	lds	r25, 0x24F3	; 0x8024f3 <udi_cdc_nb_data_enabled>
    35d2:	9f 5f       	subi	r25, 0xFF	; 255
    35d4:	90 93 f3 24 	sts	0x24F3, r25	; 0x8024f3 <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    35d8:	90 91 f3 24 	lds	r25, 0x24F3	; 0x8024f3 <udi_cdc_nb_data_enabled>
    35dc:	91 30       	cpi	r25, 0x01	; 1
    35de:	11 f4       	brne	.+4      	; 0x35e4 <udi_cdc_data_enable+0x66>
		udi_cdc_data_running = true;
    35e0:	90 93 f2 24 	sts	0x24F2, r25	; 0x8024f2 <udi_cdc_data_running>
	}
	return true;
}
    35e4:	08 95       	ret

000035e6 <udi_cdc_data_received>:
>>>>>>> Stashed changes
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
<<<<<<< Updated upstream
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
=======
    35e6:	0f 93       	push	r16
    35e8:	1f 93       	push	r17
>>>>>>> Stashed changes
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
<<<<<<< Updated upstream
    3984:	81 11       	cpse	r24, r1
    3986:	2a c0       	rjmp	.+84     	; 0x39dc <udi_cdc_data_received+0x5c>
=======
    35ea:	81 11       	cpse	r24, r1
    35ec:	2a c0       	rjmp	.+84     	; 0x3642 <udi_cdc_data_received+0x5c>
>>>>>>> Stashed changes
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
<<<<<<< Updated upstream
    3988:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <udi_cdc_rx_buf_sel>
    398c:	e1 e0       	ldi	r30, 0x01	; 1
    398e:	81 11       	cpse	r24, r1
    3990:	e0 e0       	ldi	r30, 0x00	; 0
    3992:	84 2f       	mov	r24, r20
	if (!n) {
    3994:	61 15       	cp	r22, r1
    3996:	71 05       	cpc	r23, r1
    3998:	a9 f4       	brne	.+42     	; 0x39c4 <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    399a:	4e 2f       	mov	r20, r30
    399c:	50 e0       	ldi	r21, 0x00	; 0
    399e:	00 24       	eor	r0, r0
    39a0:	56 95       	lsr	r21
    39a2:	47 95       	ror	r20
    39a4:	07 94       	ror	r0
    39a6:	56 95       	lsr	r21
    39a8:	47 95       	ror	r20
    39aa:	07 94       	ror	r0
    39ac:	54 2f       	mov	r21, r20
    39ae:	40 2d       	mov	r20, r0
    39b0:	4e 59       	subi	r20, 0x9E	; 158
    39b2:	5b 4d       	sbci	r21, 0xDB	; 219
=======
    35ee:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <udi_cdc_rx_buf_sel>
    35f2:	e1 e0       	ldi	r30, 0x01	; 1
    35f4:	81 11       	cpse	r24, r1
    35f6:	e0 e0       	ldi	r30, 0x00	; 0
    35f8:	84 2f       	mov	r24, r20
	if (!n) {
    35fa:	61 15       	cp	r22, r1
    35fc:	71 05       	cpc	r23, r1
    35fe:	a9 f4       	brne	.+42     	; 0x362a <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    3600:	4e 2f       	mov	r20, r30
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	00 24       	eor	r0, r0
    3606:	56 95       	lsr	r21
    3608:	47 95       	ror	r20
    360a:	07 94       	ror	r0
    360c:	56 95       	lsr	r21
    360e:	47 95       	ror	r20
    3610:	07 94       	ror	r0
    3612:	54 2f       	mov	r21, r20
    3614:	40 2d       	mov	r20, r0
    3616:	4e 58       	subi	r20, 0x8E	; 142
    3618:	5b 4d       	sbci	r21, 0xDB	; 219
>>>>>>> Stashed changes
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
<<<<<<< Updated upstream
    39b4:	00 ec       	ldi	r16, 0xC0	; 192
    39b6:	1c e1       	ldi	r17, 0x1C	; 28
    39b8:	20 e4       	ldi	r18, 0x40	; 64
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	61 e0       	ldi	r22, 0x01	; 1
    39be:	0e 94 31 28 	call	0x5062	; 0x5062 <udd_ep_run>
=======
    361a:	03 ef       	ldi	r16, 0xF3	; 243
    361c:	1a e1       	ldi	r17, 0x1A	; 26
    361e:	20 e4       	ldi	r18, 0x40	; 64
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	61 e0       	ldi	r22, 0x01	; 1
    3624:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <udd_ep_run>
>>>>>>> Stashed changes
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
<<<<<<< Updated upstream
    39c2:	0c c0       	rjmp	.+24     	; 0x39dc <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	ee 0f       	add	r30, r30
    39c8:	ff 1f       	adc	r31, r31
    39ca:	e2 5a       	subi	r30, 0xA2	; 162
    39cc:	fb 4d       	sbci	r31, 0xDB	; 219
    39ce:	60 83       	st	Z, r22
    39d0:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    39d2:	10 92 5a 24 	sts	0x245A, r1	; 0x80245a <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	0e 94 3e 1c 	call	0x387c	; 0x387c <udi_cdc_rx_start>
}
    39dc:	1f 91       	pop	r17
    39de:	0f 91       	pop	r16
    39e0:	08 95       	ret

000039e2 <udi_cdc_is_rx_ready>:
=======
    3628:	0c c0       	rjmp	.+24     	; 0x3642 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	ee 0f       	add	r30, r30
    362e:	ff 1f       	adc	r31, r31
    3630:	e2 59       	subi	r30, 0x92	; 146
    3632:	fb 4d       	sbci	r31, 0xDB	; 219
    3634:	60 83       	st	Z, r22
    3636:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    3638:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <udi_cdc_rx_start>
}
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	08 95       	ret

00003648 <udi_cdc_is_rx_ready>:
>>>>>>> Stashed changes
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
	return udi_cdc_multi_is_rx_ready(0);
<<<<<<< Updated upstream
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	0e 94 36 1c 	call	0x386c	; 0x386c <udi_cdc_multi_is_rx_ready>
}
    39e8:	08 95       	ret

000039ea <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	1f 92       	push	r1
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
=======
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <udi_cdc_multi_is_rx_ready>
}
    364e:	08 95       	ret

00003650 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    3650:	ef 92       	push	r14
    3652:	ff 92       	push	r15
    3654:	1f 93       	push	r17
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	1f 92       	push	r1
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
<<<<<<< Updated upstream
    39fa:	11 e0       	ldi	r17, 0x01	; 1
    39fc:	80 91 fa 24 	lds	r24, 0x24FA	; 0x8024fa <udi_cdc_line_coding+0x6>
    3a00:	89 30       	cpi	r24, 0x09	; 9
    3a02:	09 f0       	breq	.+2      	; 0x3a06 <udi_cdc_multi_getc+0x1c>
    3a04:	10 e0       	ldi	r17, 0x00	; 0
=======
    3660:	11 e0       	ldi	r17, 0x01	; 1
    3662:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <udi_cdc_line_coding+0x6>
    3666:	89 30       	cpi	r24, 0x09	; 9
    3668:	09 f0       	breq	.+2      	; 0x366c <udi_cdc_multi_getc+0x1c>
    366a:	10 e0       	ldi	r17, 0x00	; 0
>>>>>>> Stashed changes
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
<<<<<<< Updated upstream
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	50 e0       	ldi	r21, 0x00	; 0
=======
    366c:	40 e0       	ldi	r20, 0x00	; 0
    366e:	50 e0       	ldi	r21, 0x00	; 0
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3a0a:	8f b7       	in	r24, 0x3f	; 63
    3a0c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3a0e:	f8 94       	cli
	return flags;
    3a10:	a9 81       	ldd	r26, Y+1	; 0x01
=======
    3670:	8f b7       	in	r24, 0x3f	; 63
    3672:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3674:	f8 94       	cli
	return flags;
    3676:	a9 81       	ldd	r26, Y+1	; 0x01
>>>>>>> Stashed changes
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
<<<<<<< Updated upstream
    3a12:	20 91 5b 24 	lds	r18, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    3a16:	30 91 5c 24 	lds	r19, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3a1a:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	fc 01       	movw	r30, r24
    3a22:	ee 0f       	add	r30, r30
    3a24:	ff 1f       	adc	r31, r31
    3a26:	e2 5a       	subi	r30, 0xA2	; 162
    3a28:	fb 4d       	sbci	r31, 0xDB	; 219
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
=======
    3678:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    367c:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3680:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	fc 01       	movw	r30, r24
    3688:	ee 0f       	add	r30, r30
    368a:	ff 1f       	adc	r31, r31
    368c:	e2 59       	subi	r30, 0x92	; 146
    368e:	fb 4d       	sbci	r31, 0xDB	; 219
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3a2e:	af bf       	out	0x3f, r26	; 63
	cpu_irq_restore(flags);
	while (again) {
    3a30:	26 17       	cp	r18, r22
    3a32:	37 07       	cpc	r19, r23
    3a34:	30 f0       	brcs	.+12     	; 0x3a42 <udi_cdc_multi_getc+0x58>
		if (!udi_cdc_data_running) {
    3a36:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <udi_cdc_data_running>
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	e6 cf       	rjmp	.-52     	; 0x3a0a <udi_cdc_multi_getc+0x20>
			return 0;
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	22 c0       	rjmp	.+68     	; 0x3a86 <udi_cdc_multi_getc+0x9c>
=======
    3694:	af bf       	out	0x3f, r26	; 63
	cpu_irq_restore(flags);
	while (again) {
    3696:	26 17       	cp	r18, r22
    3698:	37 07       	cpc	r19, r23
    369a:	30 f0       	brcs	.+12     	; 0x36a8 <udi_cdc_multi_getc+0x58>
		if (!udi_cdc_data_running) {
    369c:	80 91 f2 24 	lds	r24, 0x24F2	; 0x8024f2 <udi_cdc_data_running>
    36a0:	81 11       	cpse	r24, r1
    36a2:	e6 cf       	rjmp	.-52     	; 0x3670 <udi_cdc_multi_getc+0x20>
			return 0;
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	22 c0       	rjmp	.+68     	; 0x36ec <udi_cdc_multi_getc+0x9c>
>>>>>>> Stashed changes
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
<<<<<<< Updated upstream
    3a42:	fc 01       	movw	r30, r24
    3a44:	00 24       	eor	r0, r0
    3a46:	f6 95       	lsr	r31
    3a48:	e7 95       	ror	r30
    3a4a:	07 94       	ror	r0
    3a4c:	f6 95       	lsr	r31
    3a4e:	e7 95       	ror	r30
    3a50:	07 94       	ror	r0
    3a52:	fe 2f       	mov	r31, r30
    3a54:	e0 2d       	mov	r30, r0
    3a56:	ee 59       	subi	r30, 0x9E	; 158
    3a58:	fb 4d       	sbci	r31, 0xDB	; 219
    3a5a:	e2 0f       	add	r30, r18
    3a5c:	f3 1f       	adc	r31, r19
    3a5e:	80 81       	ld	r24, Z
    3a60:	7a 01       	movw	r14, r20
    3a62:	e8 2a       	or	r14, r24
	udi_cdc_rx_pos[port] = pos+1;
    3a64:	2f 5f       	subi	r18, 0xFF	; 255
    3a66:	3f 4f       	sbci	r19, 0xFF	; 255
    3a68:	20 93 5b 24 	sts	0x245B, r18	; 0x80245b <udi_cdc_rx_pos>
    3a6c:	30 93 5c 24 	sts	0x245C, r19	; 0x80245c <udi_cdc_rx_pos+0x1>

	udi_cdc_rx_start(port);
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	0e 94 3e 1c 	call	0x387c	; 0x387c <udi_cdc_rx_start>

	if (b_databit_9) {
    3a76:	11 23       	and	r17, r17
    3a78:	21 f0       	breq	.+8      	; 0x3a82 <udi_cdc_multi_getc+0x98>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
    3a7a:	5e 2d       	mov	r21, r14
    3a7c:	44 27       	eor	r20, r20
=======
    36a8:	fc 01       	movw	r30, r24
    36aa:	00 24       	eor	r0, r0
    36ac:	f6 95       	lsr	r31
    36ae:	e7 95       	ror	r30
    36b0:	07 94       	ror	r0
    36b2:	f6 95       	lsr	r31
    36b4:	e7 95       	ror	r30
    36b6:	07 94       	ror	r0
    36b8:	fe 2f       	mov	r31, r30
    36ba:	e0 2d       	mov	r30, r0
    36bc:	ee 58       	subi	r30, 0x8E	; 142
    36be:	fb 4d       	sbci	r31, 0xDB	; 219
    36c0:	e2 0f       	add	r30, r18
    36c2:	f3 1f       	adc	r31, r19
    36c4:	80 81       	ld	r24, Z
    36c6:	7a 01       	movw	r14, r20
    36c8:	e8 2a       	or	r14, r24
	udi_cdc_rx_pos[port] = pos+1;
    36ca:	2f 5f       	subi	r18, 0xFF	; 255
    36cc:	3f 4f       	sbci	r19, 0xFF	; 255
    36ce:	20 93 6b 24 	sts	0x246B, r18	; 0x80246b <udi_cdc_rx_pos>
    36d2:	30 93 6c 24 	sts	0x246C, r19	; 0x80246c <udi_cdc_rx_pos+0x1>

	udi_cdc_rx_start(port);
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <udi_cdc_rx_start>

	if (b_databit_9) {
    36dc:	11 23       	and	r17, r17
    36de:	21 f0       	breq	.+8      	; 0x36e8 <udi_cdc_multi_getc+0x98>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
    36e0:	5e 2d       	mov	r21, r14
    36e2:	44 27       	eor	r20, r20
>>>>>>> Stashed changes

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
<<<<<<< Updated upstream
    3a7e:	10 e0       	ldi	r17, 0x00	; 0
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
    3a80:	c4 cf       	rjmp	.-120    	; 0x3a0a <udi_cdc_multi_getc+0x20>
=======
    36e4:	10 e0       	ldi	r17, 0x00	; 0
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
    36e6:	c4 cf       	rjmp	.-120    	; 0x3670 <udi_cdc_multi_getc+0x20>
>>>>>>> Stashed changes
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
<<<<<<< Updated upstream
    3a82:	8e 2d       	mov	r24, r14
    3a84:	9f 2d       	mov	r25, r15
=======
    36e8:	8e 2d       	mov	r24, r14
    36ea:	9f 2d       	mov	r25, r15
>>>>>>> Stashed changes
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
<<<<<<< Updated upstream
    3a86:	0f 90       	pop	r0
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	ff 90       	pop	r15
    3a90:	ef 90       	pop	r14
    3a92:	08 95       	ret

00003a94 <udi_cdc_getc>:
=======
    36ec:	0f 90       	pop	r0
    36ee:	df 91       	pop	r29
    36f0:	cf 91       	pop	r28
    36f2:	1f 91       	pop	r17
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	08 95       	ret

000036fa <udi_cdc_getc>:
>>>>>>> Stashed changes

int udi_cdc_getc(void)
{
	return udi_cdc_multi_getc(0);
<<<<<<< Updated upstream
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <udi_cdc_multi_getc>
}
    3a9a:	08 95       	ret

00003a9c <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    3a9c:	cf 92       	push	r12
    3a9e:	df 92       	push	r13
    3aa0:	ef 92       	push	r14
    3aa2:	ff 92       	push	r15
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	1f 92       	push	r1
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	6b 01       	movw	r12, r22
    3ab4:	7a 01       	movw	r14, r20
=======
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	0e 94 28 1b 	call	0x3650	; 0x3650 <udi_cdc_multi_getc>
}
    3700:	08 95       	ret

00003702 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    3702:	cf 92       	push	r12
    3704:	df 92       	push	r13
    3706:	ef 92       	push	r14
    3708:	ff 92       	push	r15
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	1f 92       	push	r1
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	6b 01       	movw	r12, r22
    371a:	7a 01       	movw	r14, r20
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3ab6:	8f b7       	in	r24, 0x3f	; 63
    3ab8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3aba:	f8 94       	cli
	return flags;
    3abc:	49 81       	ldd	r20, Y+1	; 0x01
=======
    371c:	8f b7       	in	r24, 0x3f	; 63
    371e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3720:	f8 94       	cli
	return flags;
    3722:	49 81       	ldd	r20, Y+1	; 0x01
>>>>>>> Stashed changes
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
<<<<<<< Updated upstream
    3abe:	60 91 5b 24 	lds	r22, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    3ac2:	70 91 5c 24 	lds	r23, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3ac6:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	fc 01       	movw	r30, r24
    3ace:	ee 0f       	add	r30, r30
    3ad0:	ff 1f       	adc	r31, r31
    3ad2:	e2 5a       	subi	r30, 0xA2	; 162
    3ad4:	fb 4d       	sbci	r31, 0xDB	; 219
    3ad6:	20 81       	ld	r18, Z
    3ad8:	31 81       	ldd	r19, Z+1	; 0x01
=======
    3724:	60 91 6b 24 	lds	r22, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    3728:	70 91 6c 24 	lds	r23, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    372c:	80 91 6d 24 	lds	r24, 0x246D	; 0x80246d <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	fc 01       	movw	r30, r24
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	e2 59       	subi	r30, 0x92	; 146
    373a:	fb 4d       	sbci	r31, 0xDB	; 219
    373c:	20 81       	ld	r18, Z
    373e:	31 81       	ldd	r19, Z+1	; 0x01
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3ada:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	while (again) {
    3adc:	62 17       	cp	r22, r18
    3ade:	73 07       	cpc	r23, r19
    3ae0:	38 f0       	brcs	.+14     	; 0x3af0 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
    3ae2:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <udi_cdc_data_running>
    3ae6:	81 11       	cpse	r24, r1
    3ae8:	e6 cf       	rjmp	.-52     	; 0x3ab6 <udi_cdc_multi_read_buf+0x1a>
    3aea:	8e 2d       	mov	r24, r14
    3aec:	9f 2d       	mov	r25, r15
    3aee:	36 c0       	rjmp	.+108    	; 0x3b5c <udi_cdc_multi_read_buf+0xc0>
=======
    3740:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	while (again) {
    3742:	62 17       	cp	r22, r18
    3744:	73 07       	cpc	r23, r19
    3746:	38 f0       	brcs	.+14     	; 0x3756 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
    3748:	80 91 f2 24 	lds	r24, 0x24F2	; 0x8024f2 <udi_cdc_data_running>
    374c:	81 11       	cpse	r24, r1
    374e:	e6 cf       	rjmp	.-52     	; 0x371c <udi_cdc_multi_read_buf+0x1a>
    3750:	8e 2d       	mov	r24, r14
    3752:	9f 2d       	mov	r25, r15
    3754:	36 c0       	rjmp	.+108    	; 0x37c2 <udi_cdc_multi_read_buf+0xc0>
>>>>>>> Stashed changes
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
<<<<<<< Updated upstream
    3af0:	fc 01       	movw	r30, r24
    3af2:	ee 0f       	add	r30, r30
    3af4:	ff 1f       	adc	r31, r31
    3af6:	e2 5a       	subi	r30, 0xA2	; 162
    3af8:	fb 4d       	sbci	r31, 0xDB	; 219
    3afa:	20 81       	ld	r18, Z
    3afc:	31 81       	ldd	r19, Z+1	; 0x01
    3afe:	26 1b       	sub	r18, r22
    3b00:	37 0b       	sbc	r19, r23
    3b02:	87 01       	movw	r16, r14
    3b04:	2e 15       	cp	r18, r14
    3b06:	3f 05       	cpc	r19, r15
    3b08:	08 f4       	brcc	.+2      	; 0x3b0c <udi_cdc_multi_read_buf+0x70>
    3b0a:	89 01       	movw	r16, r18
=======
    3756:	fc 01       	movw	r30, r24
    3758:	ee 0f       	add	r30, r30
    375a:	ff 1f       	adc	r31, r31
    375c:	e2 59       	subi	r30, 0x92	; 146
    375e:	fb 4d       	sbci	r31, 0xDB	; 219
    3760:	20 81       	ld	r18, Z
    3762:	31 81       	ldd	r19, Z+1	; 0x01
    3764:	26 1b       	sub	r18, r22
    3766:	37 0b       	sbc	r19, r23
    3768:	87 01       	movw	r16, r14
    376a:	2e 15       	cp	r18, r14
    376c:	3f 05       	cpc	r19, r15
    376e:	08 f4       	brcc	.+2      	; 0x3772 <udi_cdc_multi_read_buf+0x70>
    3770:	89 01       	movw	r16, r18
>>>>>>> Stashed changes
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
<<<<<<< Updated upstream
    3b0c:	00 24       	eor	r0, r0
    3b0e:	96 95       	lsr	r25
    3b10:	87 95       	ror	r24
    3b12:	07 94       	ror	r0
    3b14:	96 95       	lsr	r25
    3b16:	87 95       	ror	r24
    3b18:	07 94       	ror	r0
    3b1a:	98 2f       	mov	r25, r24
    3b1c:	80 2d       	mov	r24, r0
    3b1e:	68 0f       	add	r22, r24
    3b20:	79 1f       	adc	r23, r25
    3b22:	6e 59       	subi	r22, 0x9E	; 158
    3b24:	7b 4d       	sbci	r23, 0xDB	; 219
    3b26:	a8 01       	movw	r20, r16
    3b28:	c6 01       	movw	r24, r12
    3b2a:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
	udi_cdc_rx_pos[port] += copy_nb;
    3b2e:	80 91 5b 24 	lds	r24, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    3b32:	90 91 5c 24 	lds	r25, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
    3b36:	80 0f       	add	r24, r16
    3b38:	91 1f       	adc	r25, r17
    3b3a:	80 93 5b 24 	sts	0x245B, r24	; 0x80245b <udi_cdc_rx_pos>
    3b3e:	90 93 5c 24 	sts	0x245C, r25	; 0x80245c <udi_cdc_rx_pos+0x1>
	ptr_buf += copy_nb;
    3b42:	c0 0e       	add	r12, r16
    3b44:	d1 1e       	adc	r13, r17
	size -= copy_nb;
    3b46:	e0 1a       	sub	r14, r16
    3b48:	f1 0a       	sbc	r15, r17
	udi_cdc_rx_start(port);
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	0e 94 3e 1c 	call	0x387c	; 0x387c <udi_cdc_rx_start>

	if (size) {
    3b50:	e1 14       	cp	r14, r1
    3b52:	f1 04       	cpc	r15, r1
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <udi_cdc_multi_read_buf+0xbc>
    3b56:	af cf       	rjmp	.-162    	; 0x3ab6 <udi_cdc_multi_read_buf+0x1a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
}
    3b5c:	0f 90       	pop	r0
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	df 90       	pop	r13
    3b6c:	cf 90       	pop	r12
    3b6e:	08 95       	ret

00003b70 <udi_cdc_read_no_polling>:
=======
    3772:	00 24       	eor	r0, r0
    3774:	96 95       	lsr	r25
    3776:	87 95       	ror	r24
    3778:	07 94       	ror	r0
    377a:	96 95       	lsr	r25
    377c:	87 95       	ror	r24
    377e:	07 94       	ror	r0
    3780:	98 2f       	mov	r25, r24
    3782:	80 2d       	mov	r24, r0
    3784:	68 0f       	add	r22, r24
    3786:	79 1f       	adc	r23, r25
    3788:	6e 58       	subi	r22, 0x8E	; 142
    378a:	7b 4d       	sbci	r23, 0xDB	; 219
    378c:	a8 01       	movw	r20, r16
    378e:	c6 01       	movw	r24, r12
    3790:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <memcpy>
	udi_cdc_rx_pos[port] += copy_nb;
    3794:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    3798:	90 91 6c 24 	lds	r25, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
    379c:	80 0f       	add	r24, r16
    379e:	91 1f       	adc	r25, r17
    37a0:	80 93 6b 24 	sts	0x246B, r24	; 0x80246b <udi_cdc_rx_pos>
    37a4:	90 93 6c 24 	sts	0x246C, r25	; 0x80246c <udi_cdc_rx_pos+0x1>
	ptr_buf += copy_nb;
    37a8:	c0 0e       	add	r12, r16
    37aa:	d1 1e       	adc	r13, r17
	size -= copy_nb;
    37ac:	e0 1a       	sub	r14, r16
    37ae:	f1 0a       	sbc	r15, r17
	udi_cdc_rx_start(port);
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <udi_cdc_rx_start>

	if (size) {
    37b6:	e1 14       	cp	r14, r1
    37b8:	f1 04       	cpc	r15, r1
    37ba:	09 f0       	breq	.+2      	; 0x37be <udi_cdc_multi_read_buf+0xbc>
    37bc:	af cf       	rjmp	.-162    	; 0x371c <udi_cdc_multi_read_buf+0x1a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	90 e0       	ldi	r25, 0x00	; 0
}
    37c2:	0f 90       	pop	r0
    37c4:	df 91       	pop	r29
    37c6:	cf 91       	pop	r28
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	ff 90       	pop	r15
    37ce:	ef 90       	pop	r14
    37d0:	df 90       	pop	r13
    37d2:	cf 90       	pop	r12
    37d4:	08 95       	ret

000037d6 <udi_cdc_read_no_polling>:
>>>>>>> Stashed changes
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
<<<<<<< Updated upstream
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	1f 92       	push	r1
    3b7e:	1f 92       	push	r1
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	dc 01       	movw	r26, r24
=======
    37d6:	ef 92       	push	r14
    37d8:	ff 92       	push	r15
    37da:	0f 93       	push	r16
    37dc:	1f 93       	push	r17
    37de:	cf 93       	push	r28
    37e0:	df 93       	push	r29
    37e2:	1f 92       	push	r1
    37e4:	1f 92       	push	r1
    37e6:	cd b7       	in	r28, 0x3d	; 61
    37e8:	de b7       	in	r29, 0x3e	; 62
    37ea:	dc 01       	movw	r26, r24
>>>>>>> Stashed changes
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
<<<<<<< Updated upstream
    3b86:	90 91 e2 24 	lds	r25, 0x24E2	; 0x8024e2 <udi_cdc_data_running>
    3b8a:	99 23       	and	r25, r25
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <udi_cdc_read_no_polling+0x20>
    3b8e:	45 c0       	rjmp	.+138    	; 0x3c1a <udi_cdc_read_no_polling+0xaa>
=======
    37ec:	90 91 f2 24 	lds	r25, 0x24F2	; 0x8024f2 <udi_cdc_data_running>
    37f0:	99 23       	and	r25, r25
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <udi_cdc_read_no_polling+0x20>
    37f4:	45 c0       	rjmp	.+138    	; 0x3880 <udi_cdc_read_no_polling+0xaa>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3b90:	8f b7       	in	r24, 0x3f	; 63
    3b92:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3b94:	f8 94       	cli
	return flags;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
=======
    37f6:	8f b7       	in	r24, 0x3f	; 63
    37f8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    37fa:	f8 94       	cli
	return flags;
    37fc:	89 81       	ldd	r24, Y+1	; 0x01
>>>>>>> Stashed changes
	}
	
	//Get number of available data
	// Check available data
	flags = cpu_irq_save(); // to protect udi_cdc_rx_pos & udi_cdc_rx_buf_sel
	pos = udi_cdc_rx_pos[port];
<<<<<<< Updated upstream
    3b98:	40 91 5b 24 	lds	r20, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    3b9c:	50 91 5c 24 	lds	r21, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3ba0:	20 91 5d 24 	lds	r18, 0x245D	; 0x80245d <udi_cdc_rx_buf_sel>
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	f9 01       	movw	r30, r18
    3ba8:	ee 0f       	add	r30, r30
    3baa:	ff 1f       	adc	r31, r31
    3bac:	e2 5a       	subi	r30, 0xA2	; 162
    3bae:	fb 4d       	sbci	r31, 0xDB	; 219
    3bb0:	e0 80       	ld	r14, Z
    3bb2:	f1 80       	ldd	r15, Z+1	; 0x01
    3bb4:	e4 1a       	sub	r14, r20
    3bb6:	f5 0a       	sbc	r15, r21
=======
    37fe:	40 91 6b 24 	lds	r20, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    3802:	50 91 6c 24 	lds	r21, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3806:	20 91 6d 24 	lds	r18, 0x246D	; 0x80246d <udi_cdc_rx_buf_sel>
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	f9 01       	movw	r30, r18
    380e:	ee 0f       	add	r30, r30
    3810:	ff 1f       	adc	r31, r31
    3812:	e2 59       	subi	r30, 0x92	; 146
    3814:	fb 4d       	sbci	r31, 0xDB	; 219
    3816:	e0 80       	ld	r14, Z
    3818:	f1 80       	ldd	r15, Z+1	; 0x01
    381a:	e4 1a       	sub	r14, r20
    381c:	f5 0a       	sbc	r15, r21
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3bb8:	8f bf       	out	0x3f, r24	; 63
    3bba:	06 2f       	mov	r16, r22
    3bbc:	17 2f       	mov	r17, r23
    3bbe:	e0 16       	cp	r14, r16
    3bc0:	f1 06       	cpc	r15, r17
    3bc2:	08 f4       	brcc	.+2      	; 0x3bc6 <udi_cdc_read_no_polling+0x56>
    3bc4:	87 01       	movw	r16, r14
=======
    381e:	8f bf       	out	0x3f, r24	; 63
    3820:	06 2f       	mov	r16, r22
    3822:	17 2f       	mov	r17, r23
    3824:	e0 16       	cp	r14, r16
    3826:	f1 06       	cpc	r15, r17
    3828:	08 f4       	brcc	.+2      	; 0x382c <udi_cdc_read_no_polling+0x56>
    382a:	87 01       	movw	r16, r14
>>>>>>> Stashed changes
	//If the buffer contains less than the requested number of data,
	//adjust read size
	if(nb_avail_data<size) {
		size = nb_avail_data;
	}
	if(size>0) {
<<<<<<< Updated upstream
    3bc6:	01 15       	cp	r16, r1
    3bc8:	11 05       	cpc	r17, r1
    3bca:	51 f1       	breq	.+84     	; 0x3c20 <udi_cdc_read_no_polling+0xb0>
    3bcc:	cd 01       	movw	r24, r26
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
    3bce:	00 24       	eor	r0, r0
    3bd0:	36 95       	lsr	r19
    3bd2:	27 95       	ror	r18
    3bd4:	07 94       	ror	r0
    3bd6:	36 95       	lsr	r19
    3bd8:	27 95       	ror	r18
    3bda:	07 94       	ror	r0
    3bdc:	32 2f       	mov	r19, r18
    3bde:	20 2d       	mov	r18, r0
    3be0:	b9 01       	movw	r22, r18
    3be2:	64 0f       	add	r22, r20
    3be4:	75 1f       	adc	r23, r21
    3be6:	6e 59       	subi	r22, 0x9E	; 158
    3be8:	7b 4d       	sbci	r23, 0xDB	; 219
    3bea:	a8 01       	movw	r20, r16
    3bec:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
=======
    382c:	01 15       	cp	r16, r1
    382e:	11 05       	cpc	r17, r1
    3830:	51 f1       	breq	.+84     	; 0x3886 <udi_cdc_read_no_polling+0xb0>
    3832:	cd 01       	movw	r24, r26
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
    3834:	00 24       	eor	r0, r0
    3836:	36 95       	lsr	r19
    3838:	27 95       	ror	r18
    383a:	07 94       	ror	r0
    383c:	36 95       	lsr	r19
    383e:	27 95       	ror	r18
    3840:	07 94       	ror	r0
    3842:	32 2f       	mov	r19, r18
    3844:	20 2d       	mov	r18, r0
    3846:	b9 01       	movw	r22, r18
    3848:	64 0f       	add	r22, r20
    384a:	75 1f       	adc	r23, r21
    384c:	6e 58       	subi	r22, 0x8E	; 142
    384e:	7b 4d       	sbci	r23, 0xDB	; 219
    3850:	a8 01       	movw	r20, r16
    3852:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <memcpy>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3bf0:	8f b7       	in	r24, 0x3f	; 63
    3bf2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3bf4:	f8 94       	cli
	return flags;
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
		flags = cpu_irq_save(); // to protect udi_cdc_rx_pos
		udi_cdc_rx_pos[port] += size;
    3bf8:	20 91 5b 24 	lds	r18, 0x245B	; 0x80245b <udi_cdc_rx_pos>
    3bfc:	30 91 5c 24 	lds	r19, 0x245C	; 0x80245c <udi_cdc_rx_pos+0x1>
    3c00:	02 0f       	add	r16, r18
    3c02:	13 1f       	adc	r17, r19
    3c04:	00 93 5b 24 	sts	0x245B, r16	; 0x80245b <udi_cdc_rx_pos>
    3c08:	10 93 5c 24 	sts	0x245C, r17	; 0x80245c <udi_cdc_rx_pos+0x1>
=======
    3856:	8f b7       	in	r24, 0x3f	; 63
    3858:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    385a:	f8 94       	cli
	return flags;
    385c:	8a 81       	ldd	r24, Y+2	; 0x02
		flags = cpu_irq_save(); // to protect udi_cdc_rx_pos
		udi_cdc_rx_pos[port] += size;
    385e:	20 91 6b 24 	lds	r18, 0x246B	; 0x80246b <udi_cdc_rx_pos>
    3862:	30 91 6c 24 	lds	r19, 0x246C	; 0x80246c <udi_cdc_rx_pos+0x1>
    3866:	02 0f       	add	r16, r18
    3868:	13 1f       	adc	r17, r19
    386a:	00 93 6b 24 	sts	0x246B, r16	; 0x80246b <udi_cdc_rx_pos>
    386e:	10 93 6c 24 	sts	0x246C, r17	; 0x80246c <udi_cdc_rx_pos+0x1>
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3c0c:	8f bf       	out	0x3f, r24	; 63
=======
    3872:	8f bf       	out	0x3f, r24	; 63
>>>>>>> Stashed changes
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
<<<<<<< Updated upstream
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	0e 94 3e 1c 	call	0x387c	; 0x387c <udi_cdc_rx_start>
	}
	return(nb_avail_data);
    3c14:	8e 2d       	mov	r24, r14
    3c16:	9f 2d       	mov	r25, r15
    3c18:	05 c0       	rjmp	.+10     	; 0x3c24 <udi_cdc_read_no_polling+0xb4>
=======
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <udi_cdc_rx_start>
	}
	return(nb_avail_data);
    387a:	8e 2d       	mov	r24, r14
    387c:	9f 2d       	mov	r25, r15
    387e:	05 c0       	rjmp	.+10     	; 0x388a <udi_cdc_read_no_polling+0xb4>
>>>>>>> Stashed changes
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
		return 0;
<<<<<<< Updated upstream
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <udi_cdc_read_no_polling+0xb4>
=======
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	02 c0       	rjmp	.+4      	; 0x388a <udi_cdc_read_no_polling+0xb4>
>>>>>>> Stashed changes
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
	}
	return(nb_avail_data);
<<<<<<< Updated upstream
    3c20:	8e 2d       	mov	r24, r14
    3c22:	9f 2d       	mov	r25, r15
=======
    3886:	8e 2d       	mov	r24, r14
    3888:	9f 2d       	mov	r25, r15
>>>>>>> Stashed changes
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
<<<<<<< Updated upstream
    3c24:	0f 90       	pop	r0
    3c26:	0f 90       	pop	r0
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	08 95       	ret

00003c36 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    3c36:	ab 01       	movw	r20, r22
	return udi_cdc_multi_read_buf(0, buf, size);
    3c38:	bc 01       	movw	r22, r24
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <udi_cdc_multi_read_buf>
}
    3c40:	08 95       	ret

00003c42 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    3c42:	cf 93       	push	r28
    3c44:	df 93       	push	r29
    3c46:	1f 92       	push	r1
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
=======
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	08 95       	ret

0000389c <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    389c:	ab 01       	movw	r20, r22
	return udi_cdc_multi_read_buf(0, buf, size);
    389e:	bc 01       	movw	r22, r24
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	0e 94 81 1b 	call	0x3702	; 0x3702 <udi_cdc_multi_read_buf>
}
    38a6:	08 95       	ret

000038a8 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	1f 92       	push	r1
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3c4c:	8f b7       	in	r24, 0x3f	; 63
    3c4e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3c50:	f8 94       	cli
	return flags;
    3c52:	99 81       	ldd	r25, Y+1	; 0x01
=======
    38b2:	8f b7       	in	r24, 0x3f	; 63
    38b4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    38b6:	f8 94       	cli
	return flags;
    38b8:	99 81       	ldd	r25, Y+1	; 0x01
>>>>>>> Stashed changes
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
<<<<<<< Updated upstream
    3c54:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udi_cdc_tx_buf_sel>
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3c58:	e8 2f       	mov	r30, r24
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	ee 0f       	add	r30, r30
    3c5e:	ff 1f       	adc	r31, r31
    3c60:	ea 52       	subi	r30, 0x2A	; 42
    3c62:	fc 4d       	sbci	r31, 0xDC	; 220
    3c64:	20 81       	ld	r18, Z
    3c66:	31 81       	ldd	r19, Z+1	; 0x01
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    3c68:	20 34       	cpi	r18, 0x40	; 64
    3c6a:	31 05       	cpc	r19, r1
    3c6c:	89 f4       	brne	.+34     	; 0x3c90 <udi_cdc_multi_get_free_tx_buffer+0x4e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    3c6e:	40 91 d2 23 	lds	r20, 0x23D2	; 0x8023d2 <udi_cdc_tx_trans_ongoing>
    3c72:	41 11       	cpse	r20, r1
    3c74:	0d c0       	rjmp	.+26     	; 0x3c90 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    3c76:	40 91 d1 23 	lds	r20, 0x23D1	; 0x8023d1 <udi_cdc_tx_both_buf_to_send>
    3c7a:	41 11       	cpse	r20, r1
    3c7c:	09 c0       	rjmp	.+18     	; 0x3c90 <udi_cdc_multi_get_free_tx_buffer+0x4e>
=======
    38ba:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_tx_buf_sel>
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    38be:	e8 2f       	mov	r30, r24
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	ee 0f       	add	r30, r30
    38c4:	ff 1f       	adc	r31, r31
    38c6:	ea 51       	subi	r30, 0x1A	; 26
    38c8:	fc 4d       	sbci	r31, 0xDC	; 220
    38ca:	20 81       	ld	r18, Z
    38cc:	31 81       	ldd	r19, Z+1	; 0x01
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    38ce:	20 34       	cpi	r18, 0x40	; 64
    38d0:	31 05       	cpc	r19, r1
    38d2:	89 f4       	brne	.+34     	; 0x38f6 <udi_cdc_multi_get_free_tx_buffer+0x4e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    38d4:	40 91 e2 23 	lds	r20, 0x23E2	; 0x8023e2 <udi_cdc_tx_trans_ongoing>
    38d8:	41 11       	cpse	r20, r1
    38da:	0d c0       	rjmp	.+26     	; 0x38f6 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    38dc:	40 91 e1 23 	lds	r20, 0x23E1	; 0x8023e1 <udi_cdc_tx_both_buf_to_send>
    38e0:	41 11       	cpse	r20, r1
    38e2:	09 c0       	rjmp	.+18     	; 0x38f6 <udi_cdc_multi_get_free_tx_buffer+0x4e>
>>>>>>> Stashed changes
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
<<<<<<< Updated upstream
    3c7e:	21 e0       	ldi	r18, 0x01	; 1
    3c80:	20 93 d1 23 	sts	0x23D1, r18	; 0x8023d1 <udi_cdc_tx_both_buf_to_send>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    3c84:	81 11       	cpse	r24, r1
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	20 93 d5 23 	sts	0x23D5, r18	; 0x8023d5 <udi_cdc_tx_buf_sel>
			buf_sel_nb = 0;
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
=======
    38e4:	21 e0       	ldi	r18, 0x01	; 1
    38e6:	20 93 e1 23 	sts	0x23E1, r18	; 0x8023e1 <udi_cdc_tx_both_buf_to_send>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    38ea:	81 11       	cpse	r24, r1
    38ec:	20 e0       	ldi	r18, 0x00	; 0
    38ee:	20 93 e5 23 	sts	0x23E5, r18	; 0x8023e5 <udi_cdc_tx_buf_sel>
			buf_sel_nb = 0;
    38f2:	20 e0       	ldi	r18, 0x00	; 0
    38f4:	30 e0       	ldi	r19, 0x00	; 0
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3c90:	9f bf       	out	0x3f, r25	; 63
=======
    38f6:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
<<<<<<< Updated upstream
    3c92:	80 e4       	ldi	r24, 0x40	; 64
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	82 1b       	sub	r24, r18
    3c98:	93 0b       	sbc	r25, r19
    3c9a:	0f 90       	pop	r0
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	08 95       	ret

00003ca2 <udi_cdc_get_free_tx_buffer>:
=======
    38f8:	80 e4       	ldi	r24, 0x40	; 64
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	82 1b       	sub	r24, r18
    38fe:	93 0b       	sbc	r25, r19
    3900:	0f 90       	pop	r0
    3902:	df 91       	pop	r29
    3904:	cf 91       	pop	r28
    3906:	08 95       	ret

00003908 <udi_cdc_get_free_tx_buffer>:
>>>>>>> Stashed changes

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
<<<<<<< Updated upstream
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <udi_cdc_multi_get_free_tx_buffer>
}
    3ca8:	08 95       	ret

00003caa <udi_cdc_multi_is_tx_ready>:
=======
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <udi_cdc_multi_get_free_tx_buffer>
}
    390e:	08 95       	ret

00003910 <udi_cdc_multi_is_tx_ready>:
>>>>>>> Stashed changes

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
<<<<<<< Updated upstream
    3caa:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <udi_cdc_multi_get_free_tx_buffer>
    3cae:	21 e0       	ldi	r18, 0x01	; 1
    3cb0:	89 2b       	or	r24, r25
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <udi_cdc_multi_is_tx_ready+0xc>
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
}
    3cb6:	82 2f       	mov	r24, r18
    3cb8:	08 95       	ret

00003cba <udi_cdc_is_tx_ready>:
=======
    3910:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <udi_cdc_multi_get_free_tx_buffer>
    3914:	21 e0       	ldi	r18, 0x01	; 1
    3916:	89 2b       	or	r24, r25
    3918:	09 f4       	brne	.+2      	; 0x391c <udi_cdc_multi_is_tx_ready+0xc>
    391a:	20 e0       	ldi	r18, 0x00	; 0
}
    391c:	82 2f       	mov	r24, r18
    391e:	08 95       	ret

00003920 <udi_cdc_is_tx_ready>:
>>>>>>> Stashed changes

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
<<<<<<< Updated upstream
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	0e 94 55 1e 	call	0x3caa	; 0x3caa <udi_cdc_multi_is_tx_ready>
}
    3cc0:	08 95       	ret

00003cc2 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    3cc2:	ff 92       	push	r15
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	1f 92       	push	r1
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	f6 2e       	mov	r15, r22
    3cd4:	17 2f       	mov	r17, r23
=======
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	0e 94 88 1c 	call	0x3910	; 0x3910 <udi_cdc_multi_is_tx_ready>
}
    3926:	08 95       	ret

00003928 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    3928:	ff 92       	push	r15
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	1f 92       	push	r1
    3934:	cd b7       	in	r28, 0x3d	; 61
    3936:	de b7       	in	r29, 0x3e	; 62
    3938:	f6 2e       	mov	r15, r22
    393a:	17 2f       	mov	r17, r23
>>>>>>> Stashed changes

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
<<<<<<< Updated upstream
    3cd6:	01 e0       	ldi	r16, 0x01	; 1
    3cd8:	80 91 fa 24 	lds	r24, 0x24FA	; 0x8024fa <udi_cdc_line_coding+0x6>
    3cdc:	89 30       	cpi	r24, 0x09	; 9
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <udi_cdc_multi_putc+0x20>
    3ce0:	00 e0       	ldi	r16, 0x00	; 0
=======
    393c:	01 e0       	ldi	r16, 0x01	; 1
    393e:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <udi_cdc_line_coding+0x6>
    3942:	89 30       	cpi	r24, 0x09	; 9
    3944:	09 f0       	breq	.+2      	; 0x3948 <udi_cdc_multi_putc+0x20>
    3946:	00 e0       	ldi	r16, 0x00	; 0
>>>>>>> Stashed changes

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
<<<<<<< Updated upstream
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	0e 94 55 1e 	call	0x3caa	; 0x3caa <udi_cdc_multi_is_tx_ready>
    3ce8:	81 11       	cpse	r24, r1
    3cea:	07 c0       	rjmp	.+14     	; 0x3cfa <udi_cdc_multi_putc+0x38>
		if (!udi_cdc_data_running) {
    3cec:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <udi_cdc_data_running>
    3cf0:	81 11       	cpse	r24, r1
    3cf2:	f7 cf       	rjmp	.-18     	; 0x3ce2 <udi_cdc_multi_putc+0x20>
			return false;
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	2c c0       	rjmp	.+88     	; 0x3d52 <udi_cdc_multi_putc+0x90>
=======
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	0e 94 88 1c 	call	0x3910	; 0x3910 <udi_cdc_multi_is_tx_ready>
    394e:	81 11       	cpse	r24, r1
    3950:	07 c0       	rjmp	.+14     	; 0x3960 <udi_cdc_multi_putc+0x38>
		if (!udi_cdc_data_running) {
    3952:	80 91 f2 24 	lds	r24, 0x24F2	; 0x8024f2 <udi_cdc_data_running>
    3956:	81 11       	cpse	r24, r1
    3958:	f7 cf       	rjmp	.-18     	; 0x3948 <udi_cdc_multi_putc+0x20>
			return false;
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	2c c0       	rjmp	.+88     	; 0x39b8 <udi_cdc_multi_putc+0x90>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3cfa:	8f b7       	in	r24, 0x3f	; 63
    3cfc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3cfe:	f8 94       	cli
	return flags;
    3d00:	49 81       	ldd	r20, Y+1	; 0x01
=======
    3960:	8f b7       	in	r24, 0x3f	; 63
    3962:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3964:	f8 94       	cli
	return flags;
    3966:	49 81       	ldd	r20, Y+1	; 0x01
>>>>>>> Stashed changes
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
<<<<<<< Updated upstream
    3d02:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	fc 01       	movw	r30, r24
    3d0a:	ee 0f       	add	r30, r30
    3d0c:	ff 1f       	adc	r31, r31
    3d0e:	ea 52       	subi	r30, 0x2A	; 42
    3d10:	fc 4d       	sbci	r31, 0xDC	; 220
    3d12:	20 81       	ld	r18, Z
    3d14:	31 81       	ldd	r19, Z+1	; 0x01
    3d16:	b9 01       	movw	r22, r18
    3d18:	6f 5f       	subi	r22, 0xFF	; 255
    3d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1c:	60 83       	st	Z, r22
    3d1e:	71 83       	std	Z+1, r23	; 0x01
    3d20:	00 24       	eor	r0, r0
    3d22:	96 95       	lsr	r25
    3d24:	87 95       	ror	r24
    3d26:	07 94       	ror	r0
    3d28:	96 95       	lsr	r25
    3d2a:	87 95       	ror	r24
    3d2c:	07 94       	ror	r0
    3d2e:	98 2f       	mov	r25, r24
    3d30:	80 2d       	mov	r24, r0
    3d32:	86 52       	subi	r24, 0x26	; 38
    3d34:	9c 4d       	sbci	r25, 0xDC	; 220
    3d36:	fc 01       	movw	r30, r24
    3d38:	e2 0f       	add	r30, r18
    3d3a:	f3 1f       	adc	r31, r19
    3d3c:	f0 82       	st	Z, r15
=======
    3968:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	fc 01       	movw	r30, r24
    3970:	ee 0f       	add	r30, r30
    3972:	ff 1f       	adc	r31, r31
    3974:	ea 51       	subi	r30, 0x1A	; 26
    3976:	fc 4d       	sbci	r31, 0xDC	; 220
    3978:	20 81       	ld	r18, Z
    397a:	31 81       	ldd	r19, Z+1	; 0x01
    397c:	b9 01       	movw	r22, r18
    397e:	6f 5f       	subi	r22, 0xFF	; 255
    3980:	7f 4f       	sbci	r23, 0xFF	; 255
    3982:	60 83       	st	Z, r22
    3984:	71 83       	std	Z+1, r23	; 0x01
    3986:	00 24       	eor	r0, r0
    3988:	96 95       	lsr	r25
    398a:	87 95       	ror	r24
    398c:	07 94       	ror	r0
    398e:	96 95       	lsr	r25
    3990:	87 95       	ror	r24
    3992:	07 94       	ror	r0
    3994:	98 2f       	mov	r25, r24
    3996:	80 2d       	mov	r24, r0
    3998:	86 51       	subi	r24, 0x16	; 22
    399a:	9c 4d       	sbci	r25, 0xDC	; 220
    399c:	fc 01       	movw	r30, r24
    399e:	e2 0f       	add	r30, r18
    39a0:	f3 1f       	adc	r31, r19
    39a2:	f0 82       	st	Z, r15
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3d3e:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    3d40:	00 23       	and	r16, r16
    3d42:	29 f0       	breq	.+10     	; 0x3d4e <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    3d44:	f1 2e       	mov	r15, r17
    3d46:	11 0f       	add	r17, r17
    3d48:	11 0b       	sbc	r17, r17
=======
    39a4:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    39a6:	00 23       	and	r16, r16
    39a8:	29 f0       	breq	.+10     	; 0x39b4 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    39aa:	f1 2e       	mov	r15, r17
    39ac:	11 0f       	add	r17, r17
    39ae:	11 0b       	sbc	r17, r17
>>>>>>> Stashed changes
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
<<<<<<< Updated upstream
    3d4a:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    3d4c:	ca cf       	rjmp	.-108    	; 0x3ce2 <udi_cdc_multi_putc+0x20>
	}
	return true;
    3d4e:	81 e0       	ldi	r24, 0x01	; 1
    3d50:	90 e0       	ldi	r25, 0x00	; 0
}
    3d52:	0f 90       	pop	r0
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	08 95       	ret

00003d60 <udi_cdc_putc>:
=======
    39b0:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    39b2:	ca cf       	rjmp	.-108    	; 0x3948 <udi_cdc_multi_putc+0x20>
	}
	return true;
    39b4:	81 e0       	ldi	r24, 0x01	; 1
    39b6:	90 e0       	ldi	r25, 0x00	; 0
}
    39b8:	0f 90       	pop	r0
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	ff 90       	pop	r15
    39c4:	08 95       	ret

000039c6 <udi_cdc_putc>:
>>>>>>> Stashed changes

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
<<<<<<< Updated upstream
    3d60:	bc 01       	movw	r22, r24
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <udi_cdc_multi_putc>
}
    3d68:	08 95       	ret

00003d6a <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    3d6a:	5f 92       	push	r5
    3d6c:	6f 92       	push	r6
    3d6e:	7f 92       	push	r7
    3d70:	8f 92       	push	r8
    3d72:	9f 92       	push	r9
    3d74:	af 92       	push	r10
    3d76:	bf 92       	push	r11
    3d78:	cf 92       	push	r12
    3d7a:	df 92       	push	r13
    3d7c:	ef 92       	push	r14
    3d7e:	ff 92       	push	r15
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	1f 92       	push	r1
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	4b 01       	movw	r8, r22
    3d90:	5a 01       	movw	r10, r20
=======
    39c6:	bc 01       	movw	r22, r24
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	0e 94 94 1c 	call	0x3928	; 0x3928 <udi_cdc_multi_putc>
}
    39ce:	08 95       	ret

000039d0 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    39d0:	5f 92       	push	r5
    39d2:	6f 92       	push	r6
    39d4:	7f 92       	push	r7
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	0f 93       	push	r16
    39e8:	1f 93       	push	r17
    39ea:	cf 93       	push	r28
    39ec:	df 93       	push	r29
    39ee:	1f 92       	push	r1
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	4b 01       	movw	r8, r22
    39f6:	5a 01       	movw	r10, r20
>>>>>>> Stashed changes

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
<<<<<<< Updated upstream
    3d92:	80 91 fa 24 	lds	r24, 0x24FA	; 0x8024fa <udi_cdc_line_coding+0x6>
    3d96:	89 30       	cpi	r24, 0x09	; 9
    3d98:	11 f4       	brne	.+4      	; 0x3d9e <udi_cdc_multi_write_buf+0x34>
		size *=2;
    3d9a:	aa 0c       	add	r10, r10
    3d9c:	bb 1c       	adc	r11, r11
=======
    39f8:	80 91 0a 25 	lds	r24, 0x250A	; 0x80250a <udi_cdc_line_coding+0x6>
    39fc:	89 30       	cpi	r24, 0x09	; 9
    39fe:	11 f4       	brne	.+4      	; 0x3a04 <udi_cdc_multi_write_buf+0x34>
		size *=2;
    3a00:	aa 0c       	add	r10, r10
    3a02:	bb 1c       	adc	r11, r11
>>>>>>> Stashed changes

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
<<<<<<< Updated upstream
    3d9e:	68 94       	set
    3da0:	66 24       	eor	r6, r6
    3da2:	66 f8       	bld	r6, 6
    3da4:	71 2c       	mov	r7, r1
=======
    3a04:	68 94       	set
    3a06:	66 24       	eor	r6, r6
    3a08:	66 f8       	bld	r6, 6
    3a0a:	71 2c       	mov	r7, r1
>>>>>>> Stashed changes
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
<<<<<<< Updated upstream
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	0e 94 55 1e 	call	0x3caa	; 0x3caa <udi_cdc_multi_is_tx_ready>
    3dac:	81 11       	cpse	r24, r1
    3dae:	07 c0       	rjmp	.+14     	; 0x3dbe <udi_cdc_multi_write_buf+0x54>
		if (!udi_cdc_data_running) {
    3db0:	80 91 e2 24 	lds	r24, 0x24E2	; 0x8024e2 <udi_cdc_data_running>
    3db4:	81 11       	cpse	r24, r1
    3db6:	f7 cf       	rjmp	.-18     	; 0x3da6 <udi_cdc_multi_write_buf+0x3c>
    3db8:	8a 2d       	mov	r24, r10
    3dba:	9b 2d       	mov	r25, r11
    3dbc:	3a c0       	rjmp	.+116    	; 0x3e32 <udi_cdc_multi_write_buf+0xc8>
=======
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	0e 94 88 1c 	call	0x3910	; 0x3910 <udi_cdc_multi_is_tx_ready>
    3a12:	81 11       	cpse	r24, r1
    3a14:	07 c0       	rjmp	.+14     	; 0x3a24 <udi_cdc_multi_write_buf+0x54>
		if (!udi_cdc_data_running) {
    3a16:	80 91 f2 24 	lds	r24, 0x24F2	; 0x8024f2 <udi_cdc_data_running>
    3a1a:	81 11       	cpse	r24, r1
    3a1c:	f7 cf       	rjmp	.-18     	; 0x3a0c <udi_cdc_multi_write_buf+0x3c>
    3a1e:	8a 2d       	mov	r24, r10
    3a20:	9b 2d       	mov	r25, r11
    3a22:	3a c0       	rjmp	.+116    	; 0x3a98 <udi_cdc_multi_write_buf+0xc8>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    3dbe:	8f b7       	in	r24, 0x3f	; 63
    3dc0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3dc2:	f8 94       	cli
	return flags;
    3dc4:	59 80       	ldd	r5, Y+1	; 0x01
=======
    3a24:	8f b7       	in	r24, 0x3f	; 63
    3a26:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3a28:	f8 94       	cli
	return flags;
    3a2a:	59 80       	ldd	r5, Y+1	; 0x01
>>>>>>> Stashed changes
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
<<<<<<< Updated upstream
    3dc6:	00 91 d5 23 	lds	r16, 0x23D5	; 0x8023d5 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3dca:	10 e0       	ldi	r17, 0x00	; 0
    3dcc:	f8 01       	movw	r30, r16
    3dce:	ee 0f       	add	r30, r30
    3dd0:	ff 1f       	adc	r31, r31
    3dd2:	ea 52       	subi	r30, 0x2A	; 42
    3dd4:	fc 4d       	sbci	r31, 0xDC	; 220
    3dd6:	e0 80       	ld	r14, Z
    3dd8:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3dda:	c3 01       	movw	r24, r6
    3ddc:	8e 19       	sub	r24, r14
    3dde:	9f 09       	sbc	r25, r15
    3de0:	65 01       	movw	r12, r10
    3de2:	8a 15       	cp	r24, r10
    3de4:	9b 05       	cpc	r25, r11
    3de6:	08 f4       	brcc	.+2      	; 0x3dea <udi_cdc_multi_write_buf+0x80>
    3de8:	6c 01       	movw	r12, r24
=======
    3a2c:	00 91 e5 23 	lds	r16, 0x23E5	; 0x8023e5 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3a30:	10 e0       	ldi	r17, 0x00	; 0
    3a32:	f8 01       	movw	r30, r16
    3a34:	ee 0f       	add	r30, r30
    3a36:	ff 1f       	adc	r31, r31
    3a38:	ea 51       	subi	r30, 0x1A	; 26
    3a3a:	fc 4d       	sbci	r31, 0xDC	; 220
    3a3c:	e0 80       	ld	r14, Z
    3a3e:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3a40:	c3 01       	movw	r24, r6
    3a42:	8e 19       	sub	r24, r14
    3a44:	9f 09       	sbc	r25, r15
    3a46:	65 01       	movw	r12, r10
    3a48:	8a 15       	cp	r24, r10
    3a4a:	9b 05       	cpc	r25, r11
    3a4c:	08 f4       	brcc	.+2      	; 0x3a50 <udi_cdc_multi_write_buf+0x80>
    3a4e:	6c 01       	movw	r12, r24
>>>>>>> Stashed changes
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
<<<<<<< Updated upstream
    3dea:	c8 01       	movw	r24, r16
    3dec:	00 24       	eor	r0, r0
    3dee:	96 95       	lsr	r25
    3df0:	87 95       	ror	r24
    3df2:	07 94       	ror	r0
    3df4:	96 95       	lsr	r25
    3df6:	87 95       	ror	r24
    3df8:	07 94       	ror	r0
    3dfa:	98 2f       	mov	r25, r24
    3dfc:	80 2d       	mov	r24, r0
    3dfe:	8e 0d       	add	r24, r14
    3e00:	9f 1d       	adc	r25, r15
    3e02:	a6 01       	movw	r20, r12
    3e04:	b4 01       	movw	r22, r8
    3e06:	86 52       	subi	r24, 0x26	; 38
    3e08:	9c 4d       	sbci	r25, 0xDC	; 220
    3e0a:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    3e0e:	00 0f       	add	r16, r16
    3e10:	11 1f       	adc	r17, r17
    3e12:	f8 01       	movw	r30, r16
    3e14:	ea 52       	subi	r30, 0x2A	; 42
    3e16:	fc 4d       	sbci	r31, 0xDC	; 220
    3e18:	ec 0c       	add	r14, r12
    3e1a:	fd 1c       	adc	r15, r13
    3e1c:	e0 82       	st	Z, r14
    3e1e:	f1 82       	std	Z+1, r15	; 0x01
=======
    3a50:	c8 01       	movw	r24, r16
    3a52:	00 24       	eor	r0, r0
    3a54:	96 95       	lsr	r25
    3a56:	87 95       	ror	r24
    3a58:	07 94       	ror	r0
    3a5a:	96 95       	lsr	r25
    3a5c:	87 95       	ror	r24
    3a5e:	07 94       	ror	r0
    3a60:	98 2f       	mov	r25, r24
    3a62:	80 2d       	mov	r24, r0
    3a64:	8e 0d       	add	r24, r14
    3a66:	9f 1d       	adc	r25, r15
    3a68:	a6 01       	movw	r20, r12
    3a6a:	b4 01       	movw	r22, r8
    3a6c:	86 51       	subi	r24, 0x16	; 22
    3a6e:	9c 4d       	sbci	r25, 0xDC	; 220
    3a70:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    3a74:	00 0f       	add	r16, r16
    3a76:	11 1f       	adc	r17, r17
    3a78:	f8 01       	movw	r30, r16
    3a7a:	ea 51       	subi	r30, 0x1A	; 26
    3a7c:	fc 4d       	sbci	r31, 0xDC	; 220
    3a7e:	ec 0c       	add	r14, r12
    3a80:	fd 1c       	adc	r15, r13
    3a82:	e0 82       	st	Z, r14
    3a84:	f1 82       	std	Z+1, r15	; 0x01
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    3e20:	5f be       	out	0x3f, r5	; 63
=======
    3a86:	5f be       	out	0x3f, r5	; 63
>>>>>>> Stashed changes
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
<<<<<<< Updated upstream
    3e22:	8c 0c       	add	r8, r12
    3e24:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    3e26:	ac 18       	sub	r10, r12
    3e28:	bd 08       	sbc	r11, r13

	if (size) {
    3e2a:	09 f0       	breq	.+2      	; 0x3e2e <udi_cdc_multi_write_buf+0xc4>
    3e2c:	bc cf       	rjmp	.-136    	; 0x3da6 <udi_cdc_multi_write_buf+0x3c>
=======
    3a88:	8c 0c       	add	r8, r12
    3a8a:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    3a8c:	ac 18       	sub	r10, r12
    3a8e:	bd 08       	sbc	r11, r13

	if (size) {
    3a90:	09 f0       	breq	.+2      	; 0x3a94 <udi_cdc_multi_write_buf+0xc4>
    3a92:	bc cf       	rjmp	.-136    	; 0x3a0c <udi_cdc_multi_write_buf+0x3c>
>>>>>>> Stashed changes
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
<<<<<<< Updated upstream
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
}
    3e32:	0f 90       	pop	r0
    3e34:	df 91       	pop	r29
    3e36:	cf 91       	pop	r28
    3e38:	1f 91       	pop	r17
    3e3a:	0f 91       	pop	r16
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	df 90       	pop	r13
    3e42:	cf 90       	pop	r12
    3e44:	bf 90       	pop	r11
    3e46:	af 90       	pop	r10
    3e48:	9f 90       	pop	r9
    3e4a:	8f 90       	pop	r8
    3e4c:	7f 90       	pop	r7
    3e4e:	6f 90       	pop	r6
    3e50:	5f 90       	pop	r5
    3e52:	08 95       	ret

00003e54 <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    3e54:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
    3e56:	bc 01       	movw	r22, r24
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <udi_cdc_multi_write_buf>
}
    3e5e:	08 95       	ret

00003e60 <udc_next_desc_in_iface>:
=======
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
}
    3a98:	0f 90       	pop	r0
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	1f 91       	pop	r17
    3aa0:	0f 91       	pop	r16
    3aa2:	ff 90       	pop	r15
    3aa4:	ef 90       	pop	r14
    3aa6:	df 90       	pop	r13
    3aa8:	cf 90       	pop	r12
    3aaa:	bf 90       	pop	r11
    3aac:	af 90       	pop	r10
    3aae:	9f 90       	pop	r9
    3ab0:	8f 90       	pop	r8
    3ab2:	7f 90       	pop	r7
    3ab4:	6f 90       	pop	r6
    3ab6:	5f 90       	pop	r5
    3ab8:	08 95       	ret

00003aba <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    3aba:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
    3abc:	bc 01       	movw	r22, r24
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <udi_cdc_multi_write_buf>
}
    3ac4:	08 95       	ret

00003ac6 <udc_next_desc_in_iface>:
>>>>>>> Stashed changes
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
<<<<<<< Updated upstream
    3e60:	e0 91 00 25 	lds	r30, 0x2500	; 0x802500 <udc_ptr_conf>
    3e64:	f0 91 01 25 	lds	r31, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    3e68:	01 90       	ld	r0, Z+
    3e6a:	f0 81       	ld	r31, Z
    3e6c:	e0 2d       	mov	r30, r0
=======
    3ac6:	e0 91 10 25 	lds	r30, 0x2510	; 0x802510 <udc_ptr_conf>
    3aca:	f0 91 11 25 	lds	r31, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3ace:	01 90       	ld	r0, Z+
    3ad0:	f0 81       	ld	r31, Z
    3ad2:	e0 2d       	mov	r30, r0
>>>>>>> Stashed changes
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
<<<<<<< Updated upstream
    3e6e:	22 81       	ldd	r18, Z+2	; 0x02
    3e70:	33 81       	ldd	r19, Z+3	; 0x03
    3e72:	2e 0f       	add	r18, r30
    3e74:	3f 1f       	adc	r19, r31
=======
    3ad4:	22 81       	ldd	r18, Z+2	; 0x02
    3ad6:	33 81       	ldd	r19, Z+3	; 0x03
    3ad8:	2e 0f       	add	r18, r30
    3ada:	3f 1f       	adc	r19, r31
>>>>>>> Stashed changes
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
<<<<<<< Updated upstream
    3e76:	fc 01       	movw	r30, r24
    3e78:	40 81       	ld	r20, Z
    3e7a:	e4 0f       	add	r30, r20
    3e7c:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3e7e:	e2 17       	cp	r30, r18
    3e80:	f3 07       	cpc	r31, r19
    3e82:	a0 f4       	brcc	.+40     	; 0x3eac <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3e84:	81 81       	ldd	r24, Z+1	; 0x01
    3e86:	84 30       	cpi	r24, 0x04	; 4
    3e88:	a1 f0       	breq	.+40     	; 0x3eb2 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3e8a:	86 13       	cpse	r24, r22
    3e8c:	06 c0       	rjmp	.+12     	; 0x3e9a <udc_next_desc_in_iface+0x3a>
    3e8e:	14 c0       	rjmp	.+40     	; 0x3eb8 <udc_next_desc_in_iface+0x58>
=======
    3adc:	fc 01       	movw	r30, r24
    3ade:	40 81       	ld	r20, Z
    3ae0:	e4 0f       	add	r30, r20
    3ae2:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3ae4:	e2 17       	cp	r30, r18
    3ae6:	f3 07       	cpc	r31, r19
    3ae8:	a0 f4       	brcc	.+40     	; 0x3b12 <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3aea:	81 81       	ldd	r24, Z+1	; 0x01
    3aec:	84 30       	cpi	r24, 0x04	; 4
    3aee:	a1 f0       	breq	.+40     	; 0x3b18 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3af0:	86 13       	cpse	r24, r22
    3af2:	06 c0       	rjmp	.+12     	; 0x3b00 <udc_next_desc_in_iface+0x3a>
    3af4:	14 c0       	rjmp	.+40     	; 0x3b1e <udc_next_desc_in_iface+0x58>
>>>>>>> Stashed changes
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
<<<<<<< Updated upstream
    3e90:	81 81       	ldd	r24, Z+1	; 0x01
    3e92:	84 30       	cpi	r24, 0x04	; 4
    3e94:	a1 f0       	breq	.+40     	; 0x3ebe <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3e96:	86 17       	cp	r24, r22
    3e98:	a9 f0       	breq	.+42     	; 0x3ec4 <udc_next_desc_in_iface+0x64>
=======
    3af6:	81 81       	ldd	r24, Z+1	; 0x01
    3af8:	84 30       	cpi	r24, 0x04	; 4
    3afa:	a1 f0       	breq	.+40     	; 0x3b24 <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3afc:	86 17       	cp	r24, r22
    3afe:	a9 f0       	breq	.+42     	; 0x3b2a <udc_next_desc_in_iface+0x64>
>>>>>>> Stashed changes
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
<<<<<<< Updated upstream
    3e9a:	80 81       	ld	r24, Z
    3e9c:	e8 0f       	add	r30, r24
    3e9e:	f1 1d       	adc	r31, r1
=======
    3b00:	80 81       	ld	r24, Z
    3b02:	e8 0f       	add	r30, r24
    3b04:	f1 1d       	adc	r31, r1
>>>>>>> Stashed changes
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
<<<<<<< Updated upstream
    3ea0:	e2 17       	cp	r30, r18
    3ea2:	f3 07       	cpc	r31, r19
    3ea4:	a8 f3       	brcs	.-22     	; 0x3e90 <udc_next_desc_in_iface+0x30>
=======
    3b06:	e2 17       	cp	r30, r18
    3b08:	f3 07       	cpc	r31, r19
    3b0a:	a8 f3       	brcs	.-22     	; 0x3af6 <udc_next_desc_in_iface+0x30>
>>>>>>> Stashed changes
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
<<<<<<< Updated upstream
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	08 95       	ret
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	08 95       	ret
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	08 95       	ret
=======
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	08 95       	ret
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	08 95       	ret
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	08 95       	ret
>>>>>>> Stashed changes
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
<<<<<<< Updated upstream
    3eb8:	8e 2f       	mov	r24, r30
    3eba:	9f 2f       	mov	r25, r31
    3ebc:	08 95       	ret
=======
    3b1e:	8e 2f       	mov	r24, r30
    3b20:	9f 2f       	mov	r25, r31
    3b22:	08 95       	ret
>>>>>>> Stashed changes
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
<<<<<<< Updated upstream
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	08 95       	ret
=======
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	08 95       	ret
>>>>>>> Stashed changes
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
<<<<<<< Updated upstream
    3ec4:	8e 2f       	mov	r24, r30
    3ec6:	9f 2f       	mov	r25, r31
=======
    3b2a:	8e 2f       	mov	r24, r30
    3b2c:	9f 2f       	mov	r25, r31
>>>>>>> Stashed changes
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
<<<<<<< Updated upstream
    3ec8:	08 95       	ret

00003eca <udc_valid_address>:
=======
    3b2e:	08 95       	ret

00003b30 <udc_valid_address>:
>>>>>>> Stashed changes
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
<<<<<<< Updated upstream
    3eca:	80 91 53 26 	lds	r24, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    3ece:	8f 77       	andi	r24, 0x7F	; 127
    3ed0:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <udd_set_address>
    3ed4:	08 95       	ret

00003ed6 <udc_update_iface_desc>:
=======
    3b30:	80 91 63 26 	lds	r24, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    3b34:	8f 77       	andi	r24, 0x7F	; 127
    3b36:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <udd_set_address>
    3b3a:	08 95       	ret

00003b3c <udc_update_iface_desc>:
>>>>>>> Stashed changes
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
<<<<<<< Updated upstream
    3ed6:	90 91 02 25 	lds	r25, 0x2502	; 0x802502 <udc_num_configuration>
    3eda:	99 23       	and	r25, r25
    3edc:	81 f1       	breq	.+96     	; 0x3f3e <udc_update_iface_desc+0x68>
=======
    3b3c:	90 91 12 25 	lds	r25, 0x2512	; 0x802512 <udc_num_configuration>
    3b40:	99 23       	and	r25, r25
    3b42:	81 f1       	breq	.+96     	; 0x3ba4 <udc_update_iface_desc+0x68>
>>>>>>> Stashed changes
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
<<<<<<< Updated upstream
    3ede:	e0 91 00 25 	lds	r30, 0x2500	; 0x802500 <udc_ptr_conf>
    3ee2:	f0 91 01 25 	lds	r31, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    3ee6:	01 90       	ld	r0, Z+
    3ee8:	f0 81       	ld	r31, Z
    3eea:	e0 2d       	mov	r30, r0
    3eec:	94 81       	ldd	r25, Z+4	; 0x04
    3eee:	89 17       	cp	r24, r25
    3ef0:	40 f5       	brcc	.+80     	; 0x3f42 <udc_update_iface_desc+0x6c>
=======
    3b44:	e0 91 10 25 	lds	r30, 0x2510	; 0x802510 <udc_ptr_conf>
    3b48:	f0 91 11 25 	lds	r31, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3b4c:	01 90       	ld	r0, Z+
    3b4e:	f0 81       	ld	r31, Z
    3b50:	e0 2d       	mov	r30, r0
    3b52:	94 81       	ldd	r25, Z+4	; 0x04
    3b54:	89 17       	cp	r24, r25
    3b56:	40 f5       	brcc	.+80     	; 0x3ba8 <udc_update_iface_desc+0x6c>
>>>>>>> Stashed changes
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
<<<<<<< Updated upstream
    3ef2:	e0 93 fe 24 	sts	0x24FE, r30	; 0x8024fe <udc_ptr_iface>
    3ef6:	f0 93 ff 24 	sts	0x24FF, r31	; 0x8024ff <udc_ptr_iface+0x1>
=======
    3b58:	e0 93 0e 25 	sts	0x250E, r30	; 0x80250e <udc_ptr_iface>
    3b5c:	f0 93 0f 25 	sts	0x250F, r31	; 0x80250f <udc_ptr_iface+0x1>
>>>>>>> Stashed changes
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
<<<<<<< Updated upstream
    3efa:	22 81       	ldd	r18, Z+2	; 0x02
    3efc:	33 81       	ldd	r19, Z+3	; 0x03
    3efe:	2e 0f       	add	r18, r30
    3f00:	3f 1f       	adc	r19, r31
=======
    3b60:	22 81       	ldd	r18, Z+2	; 0x02
    3b62:	33 81       	ldd	r19, Z+3	; 0x03
    3b64:	2e 0f       	add	r18, r30
    3b66:	3f 1f       	adc	r19, r31
>>>>>>> Stashed changes
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
<<<<<<< Updated upstream
    3f02:	e2 17       	cp	r30, r18
    3f04:	f3 07       	cpc	r31, r19
    3f06:	f8 f4       	brcc	.+62     	; 0x3f46 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3f08:	91 81       	ldd	r25, Z+1	; 0x01
    3f0a:	94 30       	cpi	r25, 0x04	; 4
    3f0c:	61 f4       	brne	.+24     	; 0x3f26 <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3f0e:	92 81       	ldd	r25, Z+2	; 0x02
    3f10:	89 13       	cpse	r24, r25
    3f12:	09 c0       	rjmp	.+18     	; 0x3f26 <udc_update_iface_desc+0x50>
    3f14:	93 81       	ldd	r25, Z+3	; 0x03
    3f16:	96 13       	cpse	r25, r22
    3f18:	06 c0       	rjmp	.+12     	; 0x3f26 <udc_update_iface_desc+0x50>
    3f1a:	e0 93 fe 24 	sts	0x24FE, r30	; 0x8024fe <udc_ptr_iface>
    3f1e:	f0 93 ff 24 	sts	0x24FF, r31	; 0x8024ff <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	08 95       	ret
=======
    3b68:	e2 17       	cp	r30, r18
    3b6a:	f3 07       	cpc	r31, r19
    3b6c:	f8 f4       	brcc	.+62     	; 0x3bac <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	94 30       	cpi	r25, 0x04	; 4
    3b72:	61 f4       	brne	.+24     	; 0x3b8c <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3b74:	92 81       	ldd	r25, Z+2	; 0x02
    3b76:	89 13       	cpse	r24, r25
    3b78:	09 c0       	rjmp	.+18     	; 0x3b8c <udc_update_iface_desc+0x50>
    3b7a:	93 81       	ldd	r25, Z+3	; 0x03
    3b7c:	96 13       	cpse	r25, r22
    3b7e:	06 c0       	rjmp	.+12     	; 0x3b8c <udc_update_iface_desc+0x50>
    3b80:	e0 93 0e 25 	sts	0x250E, r30	; 0x80250e <udc_ptr_iface>
    3b84:	f0 93 0f 25 	sts	0x250F, r31	; 0x80250f <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	08 95       	ret
>>>>>>> Stashed changes
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
<<<<<<< Updated upstream
    3f26:	90 81       	ld	r25, Z
    3f28:	e9 0f       	add	r30, r25
    3f2a:	f1 1d       	adc	r31, r1
=======
    3b8c:	90 81       	ld	r25, Z
    3b8e:	e9 0f       	add	r30, r25
    3b90:	f1 1d       	adc	r31, r1
>>>>>>> Stashed changes
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
<<<<<<< Updated upstream
    3f2c:	e2 17       	cp	r30, r18
    3f2e:	f3 07       	cpc	r31, r19
    3f30:	58 f3       	brcs	.-42     	; 0x3f08 <udc_update_iface_desc+0x32>
    3f32:	e0 93 fe 24 	sts	0x24FE, r30	; 0x8024fe <udc_ptr_iface>
    3f36:	f0 93 ff 24 	sts	0x24FF, r31	; 0x8024ff <udc_ptr_iface+0x1>
=======
    3b92:	e2 17       	cp	r30, r18
    3b94:	f3 07       	cpc	r31, r19
    3b96:	58 f3       	brcs	.-42     	; 0x3b6e <udc_update_iface_desc+0x32>
    3b98:	e0 93 0e 25 	sts	0x250E, r30	; 0x80250e <udc_ptr_iface>
    3b9c:	f0 93 0f 25 	sts	0x250F, r31	; 0x80250f <udc_ptr_iface+0x1>
>>>>>>> Stashed changes
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
<<<<<<< Updated upstream
    3f3a:	80 e0       	ldi	r24, 0x00	; 0
    3f3c:	08 95       	ret
=======
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	08 95       	ret
>>>>>>> Stashed changes
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
<<<<<<< Updated upstream
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	08 95       	ret
=======
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	08 95       	ret
>>>>>>> Stashed changes
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
<<<<<<< Updated upstream
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	08 95       	ret
=======
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	08 95       	ret
>>>>>>> Stashed changes
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
<<<<<<< Updated upstream
    3f46:	80 e0       	ldi	r24, 0x00	; 0
}
    3f48:	08 95       	ret

00003f4a <udc_iface_disable>:
=======
    3bac:	80 e0       	ldi	r24, 0x00	; 0
}
    3bae:	08 95       	ret

00003bb0 <udc_iface_disable>:
>>>>>>> Stashed changes
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
<<<<<<< Updated upstream
    3f4a:	ef 92       	push	r14
    3f4c:	ff 92       	push	r15
    3f4e:	1f 93       	push	r17
    3f50:	cf 93       	push	r28
    3f52:	df 93       	push	r29
    3f54:	c8 2f       	mov	r28, r24
=======
    3bb0:	ef 92       	push	r14
    3bb2:	ff 92       	push	r15
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	c8 2f       	mov	r28, r24
>>>>>>> Stashed changes
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
<<<<<<< Updated upstream
    3f56:	60 e0       	ldi	r22, 0x00	; 0
    3f58:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    3f5c:	18 2f       	mov	r17, r24
    3f5e:	88 23       	and	r24, r24
    3f60:	91 f1       	breq	.+100    	; 0x3fc6 <udc_iface_disable+0x7c>
=======
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    3bc2:	18 2f       	mov	r17, r24
    3bc4:	88 23       	and	r24, r24
    3bc6:	91 f1       	breq	.+100    	; 0x3c2c <udc_iface_disable+0x7c>
>>>>>>> Stashed changes
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
<<<<<<< Updated upstream
    3f62:	a0 91 00 25 	lds	r26, 0x2500	; 0x802500 <udc_ptr_conf>
    3f66:	b0 91 01 25 	lds	r27, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    3f6a:	ec 2f       	mov	r30, r28
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	ee 0f       	add	r30, r30
    3f70:	ff 1f       	adc	r31, r31
    3f72:	12 96       	adiw	r26, 0x02	; 2
    3f74:	8d 91       	ld	r24, X+
    3f76:	9c 91       	ld	r25, X
    3f78:	13 97       	sbiw	r26, 0x03	; 3
    3f7a:	e8 0f       	add	r30, r24
    3f7c:	f9 1f       	adc	r31, r25
    3f7e:	e0 80       	ld	r14, Z
    3f80:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3f82:	d7 01       	movw	r26, r14
    3f84:	16 96       	adiw	r26, 0x06	; 6
    3f86:	ed 91       	ld	r30, X+
    3f88:	fc 91       	ld	r31, X
    3f8a:	17 97       	sbiw	r26, 0x07	; 7
    3f8c:	19 95       	eicall
    3f8e:	68 2f       	mov	r22, r24
    3f90:	8c 2f       	mov	r24, r28
    3f92:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    3f96:	18 2f       	mov	r17, r24
    3f98:	88 23       	and	r24, r24
    3f9a:	a9 f0       	breq	.+42     	; 0x3fc6 <udc_iface_disable+0x7c>
=======
    3bc8:	a0 91 10 25 	lds	r26, 0x2510	; 0x802510 <udc_ptr_conf>
    3bcc:	b0 91 11 25 	lds	r27, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3bd0:	ec 2f       	mov	r30, r28
    3bd2:	f0 e0       	ldi	r31, 0x00	; 0
    3bd4:	ee 0f       	add	r30, r30
    3bd6:	ff 1f       	adc	r31, r31
    3bd8:	12 96       	adiw	r26, 0x02	; 2
    3bda:	8d 91       	ld	r24, X+
    3bdc:	9c 91       	ld	r25, X
    3bde:	13 97       	sbiw	r26, 0x03	; 3
    3be0:	e8 0f       	add	r30, r24
    3be2:	f9 1f       	adc	r31, r25
    3be4:	e0 80       	ld	r14, Z
    3be6:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3be8:	d7 01       	movw	r26, r14
    3bea:	16 96       	adiw	r26, 0x06	; 6
    3bec:	ed 91       	ld	r30, X+
    3bee:	fc 91       	ld	r31, X
    3bf0:	17 97       	sbiw	r26, 0x07	; 7
    3bf2:	19 95       	eicall
    3bf4:	68 2f       	mov	r22, r24
    3bf6:	8c 2f       	mov	r24, r28
    3bf8:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    3bfc:	18 2f       	mov	r17, r24
    3bfe:	88 23       	and	r24, r24
    3c00:	a9 f0       	breq	.+42     	; 0x3c2c <udc_iface_disable+0x7c>
>>>>>>> Stashed changes
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
<<<<<<< Updated upstream
    3f9c:	c0 91 fe 24 	lds	r28, 0x24FE	; 0x8024fe <udc_ptr_iface>
    3fa0:	d0 91 ff 24 	lds	r29, 0x24FF	; 0x8024ff <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3fa4:	65 e0       	ldi	r22, 0x05	; 5
    3fa6:	ce 01       	movw	r24, r28
    3fa8:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <udc_next_desc_in_iface>
    3fac:	ec 01       	movw	r28, r24
=======
    3c02:	c0 91 0e 25 	lds	r28, 0x250E	; 0x80250e <udc_ptr_iface>
    3c06:	d0 91 0f 25 	lds	r29, 0x250F	; 0x80250f <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3c0a:	65 e0       	ldi	r22, 0x05	; 5
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <udc_next_desc_in_iface>
    3c12:	ec 01       	movw	r28, r24
>>>>>>> Stashed changes
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
<<<<<<< Updated upstream
    3fae:	89 2b       	or	r24, r25
    3fb0:	21 f0       	breq	.+8      	; 0x3fba <udc_iface_disable+0x70>
=======
    3c14:	89 2b       	or	r24, r25
    3c16:	21 f0       	breq	.+8      	; 0x3c20 <udc_iface_disable+0x70>
>>>>>>> Stashed changes
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
<<<<<<< Updated upstream
    3fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb4:	0e 94 4f 29 	call	0x529e	; 0x529e <udd_ep_free>
		}
    3fb8:	f5 cf       	rjmp	.-22     	; 0x3fa4 <udc_iface_disable+0x5a>
=======
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	0e 94 82 27 	call	0x4f04	; 0x4f04 <udd_ep_free>
		}
    3c1e:	f5 cf       	rjmp	.-22     	; 0x3c0a <udc_iface_disable+0x5a>
>>>>>>> Stashed changes
	}
#endif

	// Disable interface
	udi_api->disable();
<<<<<<< Updated upstream
    3fba:	d7 01       	movw	r26, r14
    3fbc:	12 96       	adiw	r26, 0x02	; 2
    3fbe:	ed 91       	ld	r30, X+
    3fc0:	fc 91       	ld	r31, X
    3fc2:	13 97       	sbiw	r26, 0x03	; 3
    3fc4:	19 95       	eicall
	return true;
}
    3fc6:	81 2f       	mov	r24, r17
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	ff 90       	pop	r15
    3fd0:	ef 90       	pop	r14
    3fd2:	08 95       	ret

00003fd4 <udc_iface_enable>:
=======
    3c20:	d7 01       	movw	r26, r14
    3c22:	12 96       	adiw	r26, 0x02	; 2
    3c24:	ed 91       	ld	r30, X+
    3c26:	fc 91       	ld	r31, X
    3c28:	13 97       	sbiw	r26, 0x03	; 3
    3c2a:	19 95       	eicall
	return true;
}
    3c2c:	81 2f       	mov	r24, r17
    3c2e:	df 91       	pop	r29
    3c30:	cf 91       	pop	r28
    3c32:	1f 91       	pop	r17
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	08 95       	ret

00003c3a <udc_iface_enable>:
>>>>>>> Stashed changes
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
<<<<<<< Updated upstream
    3fd4:	1f 93       	push	r17
    3fd6:	cf 93       	push	r28
    3fd8:	df 93       	push	r29
    3fda:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3fdc:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    3fe0:	88 23       	and	r24, r24
    3fe2:	49 f1       	breq	.+82     	; 0x4036 <__stack+0x37>
=======
    3c3a:	1f 93       	push	r17
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3c42:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    3c46:	88 23       	and	r24, r24
    3c48:	49 f1       	breq	.+82     	; 0x3c9c <udc_iface_enable+0x62>
>>>>>>> Stashed changes

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
<<<<<<< Updated upstream
    3fe4:	c0 91 fe 24 	lds	r28, 0x24FE	; 0x8024fe <udc_ptr_iface>
    3fe8:	d0 91 ff 24 	lds	r29, 0x24FF	; 0x8024ff <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3fec:	65 e0       	ldi	r22, 0x05	; 5
    3fee:	ce 01       	movw	r24, r28
    3ff0:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <udc_next_desc_in_iface>
    3ff4:	ec 01       	movw	r28, r24
=======
    3c4a:	c0 91 0e 25 	lds	r28, 0x250E	; 0x80250e <udc_ptr_iface>
    3c4e:	d0 91 0f 25 	lds	r29, 0x250F	; 0x80250f <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3c52:	65 e0       	ldi	r22, 0x05	; 5
    3c54:	ce 01       	movw	r24, r28
    3c56:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <udc_next_desc_in_iface>
    3c5a:	ec 01       	movw	r28, r24
>>>>>>> Stashed changes
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
<<<<<<< Updated upstream
    3ff6:	89 2b       	or	r24, r25
    3ff8:	49 f0       	breq	.+18     	; 0x400c <__stack+0xd>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3ffa:	4c 81       	ldd	r20, Y+4	; 0x04
    3ffc:	5d 81       	ldd	r21, Y+5	; 0x05
    3ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    4000:	8a 81       	ldd	r24, Y+2	; 0x02
    4002:	0e 94 42 27 	call	0x4e84	; 0x4e84 <udd_ep_alloc>
    4006:	81 11       	cpse	r24, r1
    4008:	f1 cf       	rjmp	.-30     	; 0x3fec <udc_iface_enable+0x18>
    400a:	15 c0       	rjmp	.+42     	; 0x4036 <__stack+0x37>
=======
    3c5c:	89 2b       	or	r24, r25
    3c5e:	49 f0       	breq	.+18     	; 0x3c72 <udc_iface_enable+0x38>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3c60:	4c 81       	ldd	r20, Y+4	; 0x04
    3c62:	5d 81       	ldd	r21, Y+5	; 0x05
    3c64:	6b 81       	ldd	r22, Y+3	; 0x03
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	0e 94 75 25 	call	0x4aea	; 0x4aea <udd_ep_alloc>
    3c6c:	81 11       	cpse	r24, r1
    3c6e:	f1 cf       	rjmp	.-30     	; 0x3c52 <udc_iface_enable+0x18>
    3c70:	15 c0       	rjmp	.+42     	; 0x3c9c <udc_iface_enable+0x62>
>>>>>>> Stashed changes
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
<<<<<<< Updated upstream
    400c:	a0 91 00 25 	lds	r26, 0x2500	; 0x802500 <udc_ptr_conf>
    4010:	b0 91 01 25 	lds	r27, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    4014:	e1 2f       	mov	r30, r17
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	ee 0f       	add	r30, r30
    401a:	ff 1f       	adc	r31, r31
    401c:	12 96       	adiw	r26, 0x02	; 2
    401e:	8d 91       	ld	r24, X+
    4020:	9c 91       	ld	r25, X
    4022:	13 97       	sbiw	r26, 0x03	; 3
    4024:	e8 0f       	add	r30, r24
    4026:	f9 1f       	adc	r31, r25
    4028:	01 90       	ld	r0, Z+
    402a:	f0 81       	ld	r31, Z
    402c:	e0 2d       	mov	r30, r0
    402e:	01 90       	ld	r0, Z+
    4030:	f0 81       	ld	r31, Z
    4032:	e0 2d       	mov	r30, r0
    4034:	19 95       	eicall
}
    4036:	df 91       	pop	r29
    4038:	cf 91       	pop	r28
    403a:	1f 91       	pop	r17
    403c:	08 95       	ret

0000403e <udc_get_interface_desc>:
=======
    3c72:	a0 91 10 25 	lds	r26, 0x2510	; 0x802510 <udc_ptr_conf>
    3c76:	b0 91 11 25 	lds	r27, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3c7a:	e1 2f       	mov	r30, r17
    3c7c:	f0 e0       	ldi	r31, 0x00	; 0
    3c7e:	ee 0f       	add	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	12 96       	adiw	r26, 0x02	; 2
    3c84:	8d 91       	ld	r24, X+
    3c86:	9c 91       	ld	r25, X
    3c88:	13 97       	sbiw	r26, 0x03	; 3
    3c8a:	e8 0f       	add	r30, r24
    3c8c:	f9 1f       	adc	r31, r25
    3c8e:	01 90       	ld	r0, Z+
    3c90:	f0 81       	ld	r31, Z
    3c92:	e0 2d       	mov	r30, r0
    3c94:	01 90       	ld	r0, Z+
    3c96:	f0 81       	ld	r31, Z
    3c98:	e0 2d       	mov	r30, r0
    3c9a:	19 95       	eicall
}
    3c9c:	df 91       	pop	r29
    3c9e:	cf 91       	pop	r28
    3ca0:	1f 91       	pop	r17
    3ca2:	08 95       	ret

00003ca4 <udc_get_interface_desc>:
>>>>>>> Stashed changes
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
<<<<<<< Updated upstream
    403e:	80 91 fe 24 	lds	r24, 0x24FE	; 0x8024fe <udc_ptr_iface>
    4042:	90 91 ff 24 	lds	r25, 0x24FF	; 0x8024ff <udc_ptr_iface+0x1>
    4046:	08 95       	ret

00004048 <udc_start>:
=======
    3ca4:	80 91 0e 25 	lds	r24, 0x250E	; 0x80250e <udc_ptr_iface>
    3ca8:	90 91 0f 25 	lds	r25, 0x250F	; 0x80250f <udc_ptr_iface+0x1>
    3cac:	08 95       	ret

00003cae <udc_start>:
>>>>>>> Stashed changes

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
<<<<<<< Updated upstream
    4048:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <udd_enable>
    404c:	08 95       	ret

0000404e <udc_reset>:
=======
    3cae:	0e 94 c2 24 	call	0x4984	; 0x4984 <udd_enable>
    3cb2:	08 95       	ret

00003cb4 <udc_reset>:
>>>>>>> Stashed changes
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
<<<<<<< Updated upstream
    404e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4050:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udc_num_configuration>
    4054:	88 23       	and	r24, r24
    4056:	c9 f0       	breq	.+50     	; 0x408a <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4058:	e0 91 00 25 	lds	r30, 0x2500	; 0x802500 <udc_ptr_conf>
    405c:	f0 91 01 25 	lds	r31, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    4060:	01 90       	ld	r0, Z+
    4062:	f0 81       	ld	r31, Z
    4064:	e0 2d       	mov	r30, r0
=======
    3cb4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3cb6:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udc_num_configuration>
    3cba:	88 23       	and	r24, r24
    3cbc:	c9 f0       	breq	.+50     	; 0x3cf0 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3cbe:	e0 91 10 25 	lds	r30, 0x2510	; 0x802510 <udc_ptr_conf>
    3cc2:	f0 91 11 25 	lds	r31, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3cc6:	01 90       	ld	r0, Z+
    3cc8:	f0 81       	ld	r31, Z
    3cca:	e0 2d       	mov	r30, r0
>>>>>>> Stashed changes
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
<<<<<<< Updated upstream
    4066:	84 81       	ldd	r24, Z+4	; 0x04
    4068:	88 23       	and	r24, r24
    406a:	79 f0       	breq	.+30     	; 0x408a <udc_reset+0x3c>
    406c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    406e:	8c 2f       	mov	r24, r28
    4070:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <udc_iface_disable>
=======
    3ccc:	84 81       	ldd	r24, Z+4	; 0x04
    3cce:	88 23       	and	r24, r24
    3cd0:	79 f0       	breq	.+30     	; 0x3cf0 <udc_reset+0x3c>
    3cd2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3cd4:	8c 2f       	mov	r24, r28
    3cd6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <udc_iface_disable>
>>>>>>> Stashed changes
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
<<<<<<< Updated upstream
    4074:	cf 5f       	subi	r28, 0xFF	; 255
=======
    3cda:	cf 5f       	subi	r28, 0xFF	; 255
>>>>>>> Stashed changes
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
<<<<<<< Updated upstream
    4076:	e0 91 00 25 	lds	r30, 0x2500	; 0x802500 <udc_ptr_conf>
    407a:	f0 91 01 25 	lds	r31, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    407e:	01 90       	ld	r0, Z+
    4080:	f0 81       	ld	r31, Z
    4082:	e0 2d       	mov	r30, r0
=======
    3cdc:	e0 91 10 25 	lds	r30, 0x2510	; 0x802510 <udc_ptr_conf>
    3ce0:	f0 91 11 25 	lds	r31, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3ce4:	01 90       	ld	r0, Z+
    3ce6:	f0 81       	ld	r31, Z
    3ce8:	e0 2d       	mov	r30, r0
>>>>>>> Stashed changes
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
<<<<<<< Updated upstream
    4084:	84 81       	ldd	r24, Z+4	; 0x04
    4086:	c8 17       	cp	r28, r24
    4088:	90 f3       	brcs	.-28     	; 0x406e <udc_reset+0x20>
=======
    3cea:	84 81       	ldd	r24, Z+4	; 0x04
    3cec:	c8 17       	cp	r28, r24
    3cee:	90 f3       	brcs	.-28     	; 0x3cd4 <udc_reset+0x20>
>>>>>>> Stashed changes
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
<<<<<<< Updated upstream
    408a:	10 92 02 25 	sts	0x2502, r1	; 0x802502 <udc_num_configuration>
=======
    3cf0:	10 92 12 25 	sts	0x2512, r1	; 0x802512 <udc_num_configuration>
>>>>>>> Stashed changes
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
<<<<<<< Updated upstream
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	80 93 06 25 	sts	0x2506, r24	; 0x802506 <udc_device_status>
    4096:	90 93 07 25 	sts	0x2507, r25	; 0x802507 <udc_device_status+0x1>
=======
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	80 93 16 25 	sts	0x2516, r24	; 0x802516 <udc_device_status>
    3cfc:	90 93 17 25 	sts	0x2517, r25	; 0x802517 <udc_device_status+0x1>
>>>>>>> Stashed changes
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
<<<<<<< Updated upstream
    409a:	cf 91       	pop	r28
    409c:	08 95       	ret

0000409e <udc_stop>:
=======
    3d00:	cf 91       	pop	r28
    3d02:	08 95       	ret

00003d04 <udc_stop>:
>>>>>>> Stashed changes

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
<<<<<<< Updated upstream
    409e:	0e 94 31 26 	call	0x4c62	; 0x4c62 <udd_disable>
	udc_reset();
    40a2:	0e 94 27 20 	call	0x404e	; 0x404e <udc_reset>
    40a6:	08 95       	ret

000040a8 <udc_sof_notify>:
=======
    3d04:	0e 94 64 24 	call	0x48c8	; 0x48c8 <udd_disable>
	udc_reset();
    3d08:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <udc_reset>
    3d0c:	08 95       	ret

00003d0e <udc_sof_notify>:
>>>>>>> Stashed changes
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
<<<<<<< Updated upstream
    40a8:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    40aa:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udc_num_configuration>
    40ae:	88 23       	and	r24, r24
    40b0:	49 f1       	breq	.+82     	; 0x4104 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    40b2:	a0 91 00 25 	lds	r26, 0x2500	; 0x802500 <udc_ptr_conf>
    40b6:	b0 91 01 25 	lds	r27, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    40ba:	ed 91       	ld	r30, X+
    40bc:	fc 91       	ld	r31, X
    40be:	11 97       	sbiw	r26, 0x01	; 1
=======
    3d0e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3d10:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udc_num_configuration>
    3d14:	88 23       	and	r24, r24
    3d16:	49 f1       	breq	.+82     	; 0x3d6a <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3d18:	a0 91 10 25 	lds	r26, 0x2510	; 0x802510 <udc_ptr_conf>
    3d1c:	b0 91 11 25 	lds	r27, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3d20:	ed 91       	ld	r30, X+
    3d22:	fc 91       	ld	r31, X
    3d24:	11 97       	sbiw	r26, 0x01	; 1
>>>>>>> Stashed changes
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
<<<<<<< Updated upstream
    40c0:	84 81       	ldd	r24, Z+4	; 0x04
    40c2:	88 23       	and	r24, r24
    40c4:	f9 f0       	breq	.+62     	; 0x4104 <udc_sof_notify+0x5c>
    40c6:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    40c8:	ec 2f       	mov	r30, r28
    40ca:	f0 e0       	ldi	r31, 0x00	; 0
    40cc:	ee 0f       	add	r30, r30
    40ce:	ff 1f       	adc	r31, r31
    40d0:	12 96       	adiw	r26, 0x02	; 2
    40d2:	8d 91       	ld	r24, X+
    40d4:	9c 91       	ld	r25, X
    40d6:	13 97       	sbiw	r26, 0x03	; 3
    40d8:	e8 0f       	add	r30, r24
    40da:	f9 1f       	adc	r31, r25
    40dc:	01 90       	ld	r0, Z+
    40de:	f0 81       	ld	r31, Z
    40e0:	e0 2d       	mov	r30, r0
    40e2:	00 84       	ldd	r0, Z+8	; 0x08
    40e4:	f1 85       	ldd	r31, Z+9	; 0x09
    40e6:	e0 2d       	mov	r30, r0
    40e8:	30 97       	sbiw	r30, 0x00	; 0
    40ea:	09 f0       	breq	.+2      	; 0x40ee <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    40ec:	19 95       	eicall
=======
    3d26:	84 81       	ldd	r24, Z+4	; 0x04
    3d28:	88 23       	and	r24, r24
    3d2a:	f9 f0       	breq	.+62     	; 0x3d6a <udc_sof_notify+0x5c>
    3d2c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3d2e:	ec 2f       	mov	r30, r28
    3d30:	f0 e0       	ldi	r31, 0x00	; 0
    3d32:	ee 0f       	add	r30, r30
    3d34:	ff 1f       	adc	r31, r31
    3d36:	12 96       	adiw	r26, 0x02	; 2
    3d38:	8d 91       	ld	r24, X+
    3d3a:	9c 91       	ld	r25, X
    3d3c:	13 97       	sbiw	r26, 0x03	; 3
    3d3e:	e8 0f       	add	r30, r24
    3d40:	f9 1f       	adc	r31, r25
    3d42:	01 90       	ld	r0, Z+
    3d44:	f0 81       	ld	r31, Z
    3d46:	e0 2d       	mov	r30, r0
    3d48:	00 84       	ldd	r0, Z+8	; 0x08
    3d4a:	f1 85       	ldd	r31, Z+9	; 0x09
    3d4c:	e0 2d       	mov	r30, r0
    3d4e:	30 97       	sbiw	r30, 0x00	; 0
    3d50:	09 f0       	breq	.+2      	; 0x3d54 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3d52:	19 95       	eicall
>>>>>>> Stashed changes
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
<<<<<<< Updated upstream
    40ee:	cf 5f       	subi	r28, 0xFF	; 255
=======
    3d54:	cf 5f       	subi	r28, 0xFF	; 255
>>>>>>> Stashed changes
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
<<<<<<< Updated upstream
    40f0:	a0 91 00 25 	lds	r26, 0x2500	; 0x802500 <udc_ptr_conf>
    40f4:	b0 91 01 25 	lds	r27, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    40f8:	ed 91       	ld	r30, X+
    40fa:	fc 91       	ld	r31, X
    40fc:	11 97       	sbiw	r26, 0x01	; 1
=======
    3d56:	a0 91 10 25 	lds	r26, 0x2510	; 0x802510 <udc_ptr_conf>
    3d5a:	b0 91 11 25 	lds	r27, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3d5e:	ed 91       	ld	r30, X+
    3d60:	fc 91       	ld	r31, X
    3d62:	11 97       	sbiw	r26, 0x01	; 1
>>>>>>> Stashed changes
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
<<<<<<< Updated upstream
    40fe:	84 81       	ldd	r24, Z+4	; 0x04
    4100:	c8 17       	cp	r28, r24
    4102:	10 f3       	brcs	.-60     	; 0x40c8 <udc_sof_notify+0x20>
=======
    3d64:	84 81       	ldd	r24, Z+4	; 0x04
    3d66:	c8 17       	cp	r28, r24
    3d68:	10 f3       	brcs	.-60     	; 0x3d2e <udc_sof_notify+0x20>
>>>>>>> Stashed changes
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
<<<<<<< Updated upstream
    4104:	cf 91       	pop	r28
    4106:	08 95       	ret

00004108 <udc_process_setup>:
=======
    3d6a:	cf 91       	pop	r28
    3d6c:	08 95       	ret

00003d6e <udc_process_setup>:
>>>>>>> Stashed changes
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
<<<<<<< Updated upstream
    4108:	0f 93       	push	r16
    410a:	1f 93       	push	r17
    410c:	cf 93       	push	r28
    410e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4110:	e1 e5       	ldi	r30, 0x51	; 81
    4112:	f6 e2       	ldi	r31, 0x26	; 38
    4114:	12 86       	std	Z+10, r1	; 0x0a
    4116:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    4118:	14 86       	std	Z+12, r1	; 0x0c
    411a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    411c:	16 86       	std	Z+14, r1	; 0x0e
    411e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    4120:	80 81       	ld	r24, Z
    4122:	88 23       	and	r24, r24
    4124:	0c f0       	brlt	.+2      	; 0x4128 <udc_process_setup+0x20>
    4126:	81 c2       	rjmp	.+1282   	; 0x462a <udc_process_setup+0x522>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4128:	20 91 57 26 	lds	r18, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    412c:	30 91 58 26 	lds	r19, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    4130:	21 15       	cp	r18, r1
    4132:	31 05       	cpc	r19, r1
    4134:	09 f0       	breq	.+2      	; 0x4138 <udc_process_setup+0x30>
    4136:	74 c2       	rjmp	.+1256   	; 0x4620 <udc_process_setup+0x518>
    4138:	6b c2       	rjmp	.+1238   	; 0x4610 <udc_process_setup+0x508>
    413a:	8f 71       	andi	r24, 0x1F	; 31
=======
    3d6e:	0f 93       	push	r16
    3d70:	1f 93       	push	r17
    3d72:	cf 93       	push	r28
    3d74:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3d76:	e1 e6       	ldi	r30, 0x61	; 97
    3d78:	f6 e2       	ldi	r31, 0x26	; 38
    3d7a:	12 86       	std	Z+10, r1	; 0x0a
    3d7c:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3d7e:	14 86       	std	Z+12, r1	; 0x0c
    3d80:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3d82:	16 86       	std	Z+14, r1	; 0x0e
    3d84:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3d86:	80 81       	ld	r24, Z
    3d88:	88 23       	and	r24, r24
    3d8a:	0c f0       	brlt	.+2      	; 0x3d8e <udc_process_setup+0x20>
    3d8c:	81 c2       	rjmp	.+1282   	; 0x4290 <__stack+0x291>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3d8e:	20 91 67 26 	lds	r18, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    3d92:	30 91 68 26 	lds	r19, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    3d96:	21 15       	cp	r18, r1
    3d98:	31 05       	cpc	r19, r1
    3d9a:	09 f0       	breq	.+2      	; 0x3d9e <udc_process_setup+0x30>
    3d9c:	74 c2       	rjmp	.+1256   	; 0x4286 <__stack+0x287>
    3d9e:	6b c2       	rjmp	.+1238   	; 0x4276 <__stack+0x277>
    3da0:	8f 71       	andi	r24, 0x1F	; 31
>>>>>>> Stashed changes
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
<<<<<<< Updated upstream
    413c:	09 f0       	breq	.+2      	; 0x4140 <udc_process_setup+0x38>
    413e:	ab c0       	rjmp	.+342    	; 0x4296 <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4140:	90 91 52 26 	lds	r25, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    4144:	96 30       	cpi	r25, 0x06	; 6
    4146:	81 f0       	breq	.+32     	; 0x4168 <udc_process_setup+0x60>
    4148:	98 30       	cpi	r25, 0x08	; 8
    414a:	09 f4       	brne	.+2      	; 0x414e <udc_process_setup+0x46>
    414c:	99 c0       	rjmp	.+306    	; 0x4280 <udc_process_setup+0x178>
    414e:	91 11       	cpse	r25, r1
    4150:	a2 c0       	rjmp	.+324    	; 0x4296 <udc_process_setup+0x18e>
=======
    3da2:	09 f0       	breq	.+2      	; 0x3da6 <udc_process_setup+0x38>
    3da4:	ab c0       	rjmp	.+342    	; 0x3efc <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3da6:	90 91 62 26 	lds	r25, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    3daa:	96 30       	cpi	r25, 0x06	; 6
    3dac:	81 f0       	breq	.+32     	; 0x3dce <udc_process_setup+0x60>
    3dae:	98 30       	cpi	r25, 0x08	; 8
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <udc_process_setup+0x46>
    3db2:	99 c0       	rjmp	.+306    	; 0x3ee6 <udc_process_setup+0x178>
    3db4:	91 11       	cpse	r25, r1
    3db6:	a2 c0       	rjmp	.+324    	; 0x3efc <udc_process_setup+0x18e>
>>>>>>> Stashed changes
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
<<<<<<< Updated upstream
    4152:	22 30       	cpi	r18, 0x02	; 2
    4154:	31 05       	cpc	r19, r1
    4156:	09 f0       	breq	.+2      	; 0x415a <udc_process_setup+0x52>
    4158:	16 c2       	rjmp	.+1068   	; 0x4586 <udc_process_setup+0x47e>
=======
    3db8:	22 30       	cpi	r18, 0x02	; 2
    3dba:	31 05       	cpc	r19, r1
    3dbc:	09 f0       	breq	.+2      	; 0x3dc0 <udc_process_setup+0x52>
    3dbe:	16 c2       	rjmp	.+1068   	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
<<<<<<< Updated upstream
    415a:	62 e0       	ldi	r22, 0x02	; 2
    415c:	70 e0       	ldi	r23, 0x00	; 0
    415e:	86 e0       	ldi	r24, 0x06	; 6
    4160:	95 e2       	ldi	r25, 0x25	; 37
    4162:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    4166:	6a c2       	rjmp	.+1236   	; 0x463c <udc_process_setup+0x534>
=======
    3dc0:	62 e0       	ldi	r22, 0x02	; 2
    3dc2:	70 e0       	ldi	r23, 0x00	; 0
    3dc4:	86 e1       	ldi	r24, 0x16	; 22
    3dc6:	95 e2       	ldi	r25, 0x25	; 37
    3dc8:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3dcc:	6a c2       	rjmp	.+1236   	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
<<<<<<< Updated upstream
    4168:	80 91 53 26 	lds	r24, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    416c:	90 91 54 26 	lds	r25, 0x2654	; 0x802654 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4170:	29 2f       	mov	r18, r25
    4172:	33 27       	eor	r19, r19
    4174:	22 30       	cpi	r18, 0x02	; 2
    4176:	31 05       	cpc	r19, r1
    4178:	b1 f0       	breq	.+44     	; 0x41a6 <udc_process_setup+0x9e>
    417a:	20 f4       	brcc	.+8      	; 0x4184 <udc_process_setup+0x7c>
    417c:	21 30       	cpi	r18, 0x01	; 1
    417e:	31 05       	cpc	r19, r1
    4180:	41 f0       	breq	.+16     	; 0x4192 <udc_process_setup+0x8a>
    4182:	c1 c1       	rjmp	.+898    	; 0x4506 <udc_process_setup+0x3fe>
    4184:	23 30       	cpi	r18, 0x03	; 3
    4186:	31 05       	cpc	r19, r1
    4188:	f1 f1       	breq	.+124    	; 0x4206 <udc_process_setup+0xfe>
    418a:	2f 30       	cpi	r18, 0x0F	; 15
    418c:	31 05       	cpc	r19, r1
    418e:	61 f1       	breq	.+88     	; 0x41e8 <udc_process_setup+0xe0>
    4190:	ba c1       	rjmp	.+884    	; 0x4506 <udc_process_setup+0x3fe>
=======
    3dce:	80 91 63 26 	lds	r24, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    3dd2:	90 91 64 26 	lds	r25, 0x2664	; 0x802664 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3dd6:	29 2f       	mov	r18, r25
    3dd8:	33 27       	eor	r19, r19
    3dda:	22 30       	cpi	r18, 0x02	; 2
    3ddc:	31 05       	cpc	r19, r1
    3dde:	b1 f0       	breq	.+44     	; 0x3e0c <udc_process_setup+0x9e>
    3de0:	20 f4       	brcc	.+8      	; 0x3dea <udc_process_setup+0x7c>
    3de2:	21 30       	cpi	r18, 0x01	; 1
    3de4:	31 05       	cpc	r19, r1
    3de6:	41 f0       	breq	.+16     	; 0x3df8 <udc_process_setup+0x8a>
    3de8:	c1 c1       	rjmp	.+898    	; 0x416c <__stack+0x16d>
    3dea:	23 30       	cpi	r18, 0x03	; 3
    3dec:	31 05       	cpc	r19, r1
    3dee:	f1 f1       	breq	.+124    	; 0x3e6c <udc_process_setup+0xfe>
    3df0:	2f 30       	cpi	r18, 0x0F	; 15
    3df2:	31 05       	cpc	r19, r1
    3df4:	61 f1       	breq	.+88     	; 0x3e4e <udc_process_setup+0xe0>
    3df6:	ba c1       	rjmp	.+884    	; 0x416c <__stack+0x16d>
>>>>>>> Stashed changes
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
<<<<<<< Updated upstream
    4192:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <udc_config>
    4196:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <udc_config+0x1>
=======
    3df8:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <udc_config>
    3dfc:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <udc_config+0x1>
>>>>>>> Stashed changes
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
<<<<<<< Updated upstream
    419a:	dc 01       	movw	r26, r24
    419c:	6c 91       	ld	r22, X
    419e:	70 e0       	ldi	r23, 0x00	; 0
    41a0:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    41a4:	5e c0       	rjmp	.+188    	; 0x4262 <udc_process_setup+0x15a>
=======
    3e00:	dc 01       	movw	r26, r24
    3e02:	6c 91       	ld	r22, X
    3e04:	70 e0       	ldi	r23, 0x00	; 0
    3e06:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3e0a:	5e c0       	rjmp	.+188    	; 0x3ec8 <udc_process_setup+0x15a>
>>>>>>> Stashed changes
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
<<<<<<< Updated upstream
    41a6:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <udc_config>
    41aa:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <udc_config+0x1>
    41ae:	21 89       	ldd	r18, Z+17	; 0x11
    41b0:	82 17       	cp	r24, r18
    41b2:	08 f0       	brcs	.+2      	; 0x41b6 <udc_process_setup+0xae>
    41b4:	e8 c1       	rjmp	.+976    	; 0x4586 <udc_process_setup+0x47e>
=======
    3e0c:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    3e10:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
    3e14:	21 89       	ldd	r18, Z+17	; 0x11
    3e16:	82 17       	cp	r24, r18
    3e18:	08 f0       	brcs	.+2      	; 0x3e1c <udc_process_setup+0xae>
    3e1a:	e8 c1       	rjmp	.+976    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
<<<<<<< Updated upstream
    41b6:	99 27       	eor	r25, r25
    41b8:	88 0f       	add	r24, r24
    41ba:	99 1f       	adc	r25, r25
    41bc:	88 0f       	add	r24, r24
    41be:	99 1f       	adc	r25, r25
    41c0:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <udc_config+0x2>
    41c4:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <udc_config+0x3>
    41c8:	e8 0f       	add	r30, r24
    41ca:	f9 1f       	adc	r31, r25
    41cc:	80 81       	ld	r24, Z
    41ce:	91 81       	ldd	r25, Z+1	; 0x01
=======
    3e1c:	99 27       	eor	r25, r25
    3e1e:	88 0f       	add	r24, r24
    3e20:	99 1f       	adc	r25, r25
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    3e2a:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    3e2e:	e8 0f       	add	r30, r24
    3e30:	f9 1f       	adc	r31, r25
    3e32:	80 81       	ld	r24, Z
    3e34:	91 81       	ldd	r25, Z+1	; 0x01
>>>>>>> Stashed changes
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
<<<<<<< Updated upstream
    41d0:	fc 01       	movw	r30, r24
    41d2:	62 81       	ldd	r22, Z+2	; 0x02
    41d4:	73 81       	ldd	r23, Z+3	; 0x03
    41d6:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
=======
    3e36:	fc 01       	movw	r30, r24
    3e38:	62 81       	ldd	r22, Z+2	; 0x02
    3e3a:	73 81       	ldd	r23, Z+3	; 0x03
    3e3c:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
>>>>>>> Stashed changes
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
<<<<<<< Updated upstream
    41da:	e0 91 59 26 	lds	r30, 0x2659	; 0x802659 <udd_g_ctrlreq+0x8>
    41de:	f0 91 5a 26 	lds	r31, 0x265A	; 0x80265a <udd_g_ctrlreq+0x9>
    41e2:	82 e0       	ldi	r24, 0x02	; 2
    41e4:	81 83       	std	Z+1, r24	; 0x01
    41e6:	3d c0       	rjmp	.+122    	; 0x4262 <udc_process_setup+0x15a>
=======
    3e40:	e0 91 69 26 	lds	r30, 0x2669	; 0x802669 <udd_g_ctrlreq+0x8>
    3e44:	f0 91 6a 26 	lds	r31, 0x266A	; 0x80266a <udd_g_ctrlreq+0x9>
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	81 83       	std	Z+1, r24	; 0x01
    3e4c:	3d c0       	rjmp	.+122    	; 0x3ec8 <udc_process_setup+0x15a>
>>>>>>> Stashed changes
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
<<<<<<< Updated upstream
    41e8:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <udc_config+0x4>
    41ec:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <udc_config+0x5>
    41f0:	00 97       	sbiw	r24, 0x00	; 0
    41f2:	09 f4       	brne	.+2      	; 0x41f6 <udc_process_setup+0xee>
    41f4:	c8 c1       	rjmp	.+912    	; 0x4586 <udc_process_setup+0x47e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    41f6:	dc 01       	movw	r26, r24
    41f8:	12 96       	adiw	r26, 0x02	; 2
    41fa:	6d 91       	ld	r22, X+
    41fc:	7c 91       	ld	r23, X
    41fe:	13 97       	sbiw	r26, 0x03	; 3
    4200:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    4204:	2e c0       	rjmp	.+92     	; 0x4262 <udc_process_setup+0x15a>
=======
    3e4e:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <udc_config+0x4>
    3e52:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <udc_config+0x5>
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <udc_process_setup+0xee>
    3e5a:	c8 c1       	rjmp	.+912    	; 0x41ec <__stack+0x1ed>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	12 96       	adiw	r26, 0x02	; 2
    3e60:	6d 91       	ld	r22, X+
    3e62:	7c 91       	ld	r23, X
    3e64:	13 97       	sbiw	r26, 0x03	; 3
    3e66:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3e6a:	2e c0       	rjmp	.+92     	; 0x3ec8 <udc_process_setup+0x15a>
>>>>>>> Stashed changes
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
<<<<<<< Updated upstream
    4206:	99 27       	eor	r25, r25
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	91 05       	cpc	r25, r1
    420c:	99 f0       	breq	.+38     	; 0x4234 <udc_process_setup+0x12c>
    420e:	58 f0       	brcs	.+22     	; 0x4226 <udc_process_setup+0x11e>
    4210:	82 30       	cpi	r24, 0x02	; 2
    4212:	91 05       	cpc	r25, r1
    4214:	09 f4       	brne	.+2      	; 0x4218 <udc_process_setup+0x110>
    4216:	0e c2       	rjmp	.+1052   	; 0x4634 <udc_process_setup+0x52c>
    4218:	03 97       	sbiw	r24, 0x03	; 3
    421a:	09 f0       	breq	.+2      	; 0x421e <udc_process_setup+0x116>
    421c:	7d c1       	rjmp	.+762    	; 0x4518 <udc_process_setup+0x410>
=======
    3e6c:	99 27       	eor	r25, r25
    3e6e:	81 30       	cpi	r24, 0x01	; 1
    3e70:	91 05       	cpc	r25, r1
    3e72:	99 f0       	breq	.+38     	; 0x3e9a <udc_process_setup+0x12c>
    3e74:	58 f0       	brcs	.+22     	; 0x3e8c <udc_process_setup+0x11e>
    3e76:	82 30       	cpi	r24, 0x02	; 2
    3e78:	91 05       	cpc	r25, r1
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <udc_process_setup+0x110>
    3e7c:	0e c2       	rjmp	.+1052   	; 0x429a <__stack+0x29b>
    3e7e:	03 97       	sbiw	r24, 0x03	; 3
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <udc_process_setup+0x116>
    3e82:	7d c1       	rjmp	.+762    	; 0x417e <__stack+0x17f>
>>>>>>> Stashed changes
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
<<<<<<< Updated upstream
    421e:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    4220:	e1 eb       	ldi	r30, 0xB1	; 177
    4222:	f3 e2       	ldi	r31, 0x23	; 35
    4224:	0a c0       	rjmp	.+20     	; 0x423a <udc_process_setup+0x132>
=======
    3e84:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    3e86:	e0 ec       	ldi	r30, 0xC0	; 192
    3e88:	f3 e2       	ldi	r31, 0x23	; 35
    3e8a:	0a c0       	rjmp	.+20     	; 0x3ea0 <udc_process_setup+0x132>
>>>>>>> Stashed changes
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
<<<<<<< Updated upstream
    4226:	64 e0       	ldi	r22, 0x04	; 4
    4228:	70 e0       	ldi	r23, 0x00	; 0
    422a:	8e e4       	ldi	r24, 0x4E	; 78
    422c:	90 e2       	ldi	r25, 0x20	; 32
    422e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    4232:	17 c0       	rjmp	.+46     	; 0x4262 <udc_process_setup+0x15a>
=======
    3e8c:	64 e0       	ldi	r22, 0x04	; 4
    3e8e:	70 e0       	ldi	r23, 0x00	; 0
    3e90:	88 e4       	ldi	r24, 0x48	; 72
    3e92:	90 e2       	ldi	r25, 0x20	; 32
    3e94:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3e98:	17 c0       	rjmp	.+46     	; 0x3ec8 <udc_process_setup+0x15a>
>>>>>>> Stashed changes
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
<<<<<<< Updated upstream
    4234:	e8 e4       	ldi	r30, 0x48	; 72
    4236:	f0 e2       	ldi	r31, 0x20	; 32
=======
    3e9a:	e2 e4       	ldi	r30, 0x42	; 66
    3e9c:	f0 e2       	ldi	r31, 0x20	; 32
>>>>>>> Stashed changes
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
<<<<<<< Updated upstream
    4238:	35 e0       	ldi	r19, 0x05	; 5
    423a:	a0 e2       	ldi	r26, 0x20	; 32
    423c:	b0 e2       	ldi	r27, 0x20	; 32
    423e:	20 e0       	ldi	r18, 0x00	; 0
=======
    3e9e:	35 e0       	ldi	r19, 0x05	; 5
    3ea0:	aa e1       	ldi	r26, 0x1A	; 26
    3ea2:	b0 e2       	ldi	r27, 0x20	; 32
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
>>>>>>> Stashed changes
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
<<<<<<< Updated upstream
    4240:	81 91       	ld	r24, Z+
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	8d 93       	st	X+, r24
    4246:	9d 93       	st	X+, r25
=======
    3ea6:	81 91       	ld	r24, Z+
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	8d 93       	st	X+, r24
    3eac:	9d 93       	st	X+, r25
>>>>>>> Stashed changes
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
<<<<<<< Updated upstream
    4248:	2f 5f       	subi	r18, 0xFF	; 255
    424a:	23 17       	cp	r18, r19
    424c:	c8 f3       	brcs	.-14     	; 0x4240 <udc_process_setup+0x138>
=======
    3eae:	2f 5f       	subi	r18, 0xFF	; 255
    3eb0:	23 17       	cp	r18, r19
    3eb2:	c8 f3       	brcs	.-14     	; 0x3ea6 <udc_process_setup+0x138>
>>>>>>> Stashed changes
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
<<<<<<< Updated upstream
    424e:	63 2f       	mov	r22, r19
    4250:	66 0f       	add	r22, r22
    4252:	6e 5f       	subi	r22, 0xFE	; 254
    4254:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <udc_string_desc>
		udd_set_setup_payload(
    4258:	70 e0       	ldi	r23, 0x00	; 0
    425a:	8e e1       	ldi	r24, 0x1E	; 30
    425c:	90 e2       	ldi	r25, 0x20	; 32
    425e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
=======
    3eb4:	63 2f       	mov	r22, r19
    3eb6:	66 0f       	add	r22, r22
    3eb8:	6e 5f       	subi	r22, 0xFE	; 254
    3eba:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <udc_string_desc>
		udd_set_setup_payload(
    3ebe:	70 e0       	ldi	r23, 0x00	; 0
    3ec0:	88 e1       	ldi	r24, 0x18	; 24
    3ec2:	90 e2       	ldi	r25, 0x20	; 32
    3ec4:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
>>>>>>> Stashed changes
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
<<<<<<< Updated upstream
    4262:	e1 e5       	ldi	r30, 0x51	; 81
    4264:	f6 e2       	ldi	r31, 0x26	; 38
    4266:	86 81       	ldd	r24, Z+6	; 0x06
    4268:	97 81       	ldd	r25, Z+7	; 0x07
    426a:	22 85       	ldd	r18, Z+10	; 0x0a
    426c:	33 85       	ldd	r19, Z+11	; 0x0b
    426e:	82 17       	cp	r24, r18
    4270:	93 07       	cpc	r25, r19
    4272:	08 f0       	brcs	.+2      	; 0x4276 <udc_process_setup+0x16e>
    4274:	e3 c1       	rjmp	.+966    	; 0x463c <udc_process_setup+0x534>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    4276:	80 93 5b 26 	sts	0x265B, r24	; 0x80265b <udd_g_ctrlreq+0xa>
    427a:	90 93 5c 26 	sts	0x265C, r25	; 0x80265c <udd_g_ctrlreq+0xb>
    427e:	de c1       	rjmp	.+956    	; 0x463c <udc_process_setup+0x534>
=======
    3ec8:	e1 e6       	ldi	r30, 0x61	; 97
    3eca:	f6 e2       	ldi	r31, 0x26	; 38
    3ecc:	86 81       	ldd	r24, Z+6	; 0x06
    3ece:	97 81       	ldd	r25, Z+7	; 0x07
    3ed0:	22 85       	ldd	r18, Z+10	; 0x0a
    3ed2:	33 85       	ldd	r19, Z+11	; 0x0b
    3ed4:	82 17       	cp	r24, r18
    3ed6:	93 07       	cpc	r25, r19
    3ed8:	08 f0       	brcs	.+2      	; 0x3edc <udc_process_setup+0x16e>
    3eda:	e3 c1       	rjmp	.+966    	; 0x42a2 <__stack+0x2a3>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3edc:	80 93 6b 26 	sts	0x266B, r24	; 0x80266b <udd_g_ctrlreq+0xa>
    3ee0:	90 93 6c 26 	sts	0x266C, r25	; 0x80266c <udd_g_ctrlreq+0xb>
    3ee4:	de c1       	rjmp	.+956    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
<<<<<<< Updated upstream
    4280:	21 30       	cpi	r18, 0x01	; 1
    4282:	31 05       	cpc	r19, r1
    4284:	09 f0       	breq	.+2      	; 0x4288 <udc_process_setup+0x180>
    4286:	7f c1       	rjmp	.+766    	; 0x4586 <udc_process_setup+0x47e>
=======
    3ee6:	21 30       	cpi	r18, 0x01	; 1
    3ee8:	31 05       	cpc	r19, r1
    3eea:	09 f0       	breq	.+2      	; 0x3eee <udc_process_setup+0x180>
    3eec:	7f c1       	rjmp	.+766    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
<<<<<<< Updated upstream
    4288:	61 e0       	ldi	r22, 0x01	; 1
    428a:	70 e0       	ldi	r23, 0x00	; 0
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	95 e2       	ldi	r25, 0x25	; 37
    4290:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    4294:	d3 c1       	rjmp	.+934    	; 0x463c <udc_process_setup+0x534>
=======
    3eee:	61 e0       	ldi	r22, 0x01	; 1
    3ef0:	70 e0       	ldi	r23, 0x00	; 0
    3ef2:	82 e1       	ldi	r24, 0x12	; 18
    3ef4:	95 e2       	ldi	r25, 0x25	; 37
    3ef6:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3efa:	d3 c1       	rjmp	.+934    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
<<<<<<< Updated upstream
    4296:	81 30       	cpi	r24, 0x01	; 1
    4298:	f1 f5       	brne	.+124    	; 0x4316 <udc_process_setup+0x20e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    429a:	90 91 52 26 	lds	r25, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    429e:	9a 30       	cpi	r25, 0x0A	; 10
    42a0:	d1 f5       	brne	.+116    	; 0x4316 <udc_process_setup+0x20e>
=======
    3efc:	81 30       	cpi	r24, 0x01	; 1
    3efe:	f1 f5       	brne	.+124    	; 0x3f7c <udc_process_setup+0x20e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3f00:	90 91 62 26 	lds	r25, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    3f04:	9a 30       	cpi	r25, 0x0A	; 10
    3f06:	d1 f5       	brne	.+116    	; 0x3f7c <udc_process_setup+0x20e>
>>>>>>> Stashed changes
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
<<<<<<< Updated upstream
    42a2:	21 30       	cpi	r18, 0x01	; 1
    42a4:	31 05       	cpc	r19, r1
    42a6:	09 f0       	breq	.+2      	; 0x42aa <udc_process_setup+0x1a2>
    42a8:	3c c1       	rjmp	.+632    	; 0x4522 <udc_process_setup+0x41a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    42aa:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udc_num_configuration>
    42ae:	88 23       	and	r24, r24
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <udc_process_setup+0x1ac>
    42b2:	37 c1       	rjmp	.+622    	; 0x4522 <udc_process_setup+0x41a>
=======
    3f08:	21 30       	cpi	r18, 0x01	; 1
    3f0a:	31 05       	cpc	r19, r1
    3f0c:	09 f0       	breq	.+2      	; 0x3f10 <udc_process_setup+0x1a2>
    3f0e:	3c c1       	rjmp	.+632    	; 0x4188 <__stack+0x189>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3f10:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udc_num_configuration>
    3f14:	88 23       	and	r24, r24
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <udc_process_setup+0x1ac>
    3f18:	37 c1       	rjmp	.+622    	; 0x4188 <__stack+0x189>
>>>>>>> Stashed changes
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
<<<<<<< Updated upstream
    42b4:	c0 91 55 26 	lds	r28, 0x2655	; 0x802655 <udd_g_ctrlreq+0x4>
    42b8:	d0 91 56 26 	lds	r29, 0x2656	; 0x802656 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    42bc:	00 91 00 25 	lds	r16, 0x2500	; 0x802500 <udc_ptr_conf>
    42c0:	10 91 01 25 	lds	r17, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    42c4:	d8 01       	movw	r26, r16
    42c6:	ed 91       	ld	r30, X+
    42c8:	fc 91       	ld	r31, X
    42ca:	84 81       	ldd	r24, Z+4	; 0x04
    42cc:	c8 17       	cp	r28, r24
    42ce:	08 f0       	brcs	.+2      	; 0x42d2 <udc_process_setup+0x1ca>
    42d0:	28 c1       	rjmp	.+592    	; 0x4522 <udc_process_setup+0x41a>
=======
    3f1a:	c0 91 65 26 	lds	r28, 0x2665	; 0x802665 <udd_g_ctrlreq+0x4>
    3f1e:	d0 91 66 26 	lds	r29, 0x2666	; 0x802666 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3f22:	00 91 10 25 	lds	r16, 0x2510	; 0x802510 <udc_ptr_conf>
    3f26:	10 91 11 25 	lds	r17, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    3f2a:	d8 01       	movw	r26, r16
    3f2c:	ed 91       	ld	r30, X+
    3f2e:	fc 91       	ld	r31, X
    3f30:	84 81       	ldd	r24, Z+4	; 0x04
    3f32:	c8 17       	cp	r28, r24
    3f34:	08 f0       	brcs	.+2      	; 0x3f38 <udc_process_setup+0x1ca>
    3f36:	28 c1       	rjmp	.+592    	; 0x4188 <__stack+0x189>
>>>>>>> Stashed changes
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
<<<<<<< Updated upstream
    42d2:	60 e0       	ldi	r22, 0x00	; 0
    42d4:	8c 2f       	mov	r24, r28
    42d6:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    42da:	88 23       	and	r24, r24
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <udc_process_setup+0x1d8>
    42de:	1c c1       	rjmp	.+568    	; 0x4518 <udc_process_setup+0x410>
=======
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	8c 2f       	mov	r24, r28
    3f3c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    3f40:	88 23       	and	r24, r24
    3f42:	09 f4       	brne	.+2      	; 0x3f46 <udc_process_setup+0x1d8>
    3f44:	1c c1       	rjmp	.+568    	; 0x417e <__stack+0x17f>
>>>>>>> Stashed changes
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
<<<<<<< Updated upstream
    42e0:	ce 01       	movw	r24, r28
    42e2:	99 27       	eor	r25, r25
    42e4:	88 0f       	add	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	d8 01       	movw	r26, r16
    42ea:	12 96       	adiw	r26, 0x02	; 2
    42ec:	ed 91       	ld	r30, X+
    42ee:	fc 91       	ld	r31, X
    42f0:	13 97       	sbiw	r26, 0x03	; 3
    42f2:	e8 0f       	add	r30, r24
    42f4:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    42f6:	01 90       	ld	r0, Z+
    42f8:	f0 81       	ld	r31, Z
    42fa:	e0 2d       	mov	r30, r0
    42fc:	86 81       	ldd	r24, Z+6	; 0x06
    42fe:	97 81       	ldd	r25, Z+7	; 0x07
    4300:	fc 01       	movw	r30, r24
    4302:	19 95       	eicall
    4304:	80 93 04 25 	sts	0x2504, r24	; 0x802504 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4308:	61 e0       	ldi	r22, 0x01	; 1
    430a:	70 e0       	ldi	r23, 0x00	; 0
    430c:	84 e0       	ldi	r24, 0x04	; 4
    430e:	95 e2       	ldi	r25, 0x25	; 37
    4310:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    4314:	93 c1       	rjmp	.+806    	; 0x463c <udc_process_setup+0x534>
=======
    3f46:	ce 01       	movw	r24, r28
    3f48:	99 27       	eor	r25, r25
    3f4a:	88 0f       	add	r24, r24
    3f4c:	99 1f       	adc	r25, r25
    3f4e:	d8 01       	movw	r26, r16
    3f50:	12 96       	adiw	r26, 0x02	; 2
    3f52:	ed 91       	ld	r30, X+
    3f54:	fc 91       	ld	r31, X
    3f56:	13 97       	sbiw	r26, 0x03	; 3
    3f58:	e8 0f       	add	r30, r24
    3f5a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    3f5c:	01 90       	ld	r0, Z+
    3f5e:	f0 81       	ld	r31, Z
    3f60:	e0 2d       	mov	r30, r0
    3f62:	86 81       	ldd	r24, Z+6	; 0x06
    3f64:	97 81       	ldd	r25, Z+7	; 0x07
    3f66:	fc 01       	movw	r30, r24
    3f68:	19 95       	eicall
    3f6a:	80 93 14 25 	sts	0x2514, r24	; 0x802514 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    3f6e:	61 e0       	ldi	r22, 0x01	; 1
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	84 e1       	ldi	r24, 0x14	; 20
    3f74:	95 e2       	ldi	r25, 0x25	; 37
    3f76:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3f7a:	93 c1       	rjmp	.+806    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
<<<<<<< Updated upstream
    4316:	82 30       	cpi	r24, 0x02	; 2
    4318:	09 f0       	breq	.+2      	; 0x431c <udc_process_setup+0x214>
    431a:	fe c0       	rjmp	.+508    	; 0x4518 <udc_process_setup+0x410>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    431c:	80 91 52 26 	lds	r24, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    4320:	81 11       	cpse	r24, r1
    4322:	f3 c0       	rjmp	.+486    	; 0x450a <udc_process_setup+0x402>
=======
    3f7c:	82 30       	cpi	r24, 0x02	; 2
    3f7e:	09 f0       	breq	.+2      	; 0x3f82 <udc_process_setup+0x214>
    3f80:	fe c0       	rjmp	.+508    	; 0x417e <__stack+0x17f>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    3f82:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    3f86:	81 11       	cpse	r24, r1
    3f88:	f3 c0       	rjmp	.+486    	; 0x4170 <__stack+0x171>
>>>>>>> Stashed changes
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
<<<<<<< Updated upstream
    4324:	22 30       	cpi	r18, 0x02	; 2
    4326:	31 05       	cpc	r19, r1
    4328:	09 f0       	breq	.+2      	; 0x432c <udc_process_setup+0x224>
    432a:	2d c1       	rjmp	.+602    	; 0x4586 <udc_process_setup+0x47e>
=======
    3f8a:	22 30       	cpi	r18, 0x02	; 2
    3f8c:	31 05       	cpc	r19, r1
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <udc_process_setup+0x224>
    3f90:	2d c1       	rjmp	.+602    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
<<<<<<< Updated upstream
    432c:	80 91 55 26 	lds	r24, 0x2655	; 0x802655 <udd_g_ctrlreq+0x4>
    4330:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <udd_ep_is_halted>
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	80 93 fc 24 	sts	0x24FC, r24	; 0x8024fc <udc_ep_status.4927>
    433a:	90 93 fd 24 	sts	0x24FD, r25	; 0x8024fd <udc_ep_status.4927+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    433e:	62 e0       	ldi	r22, 0x02	; 2
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	8c ef       	ldi	r24, 0xFC	; 252
    4344:	94 e2       	ldi	r25, 0x24	; 36
    4346:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <udd_set_setup_payload>
    434a:	78 c1       	rjmp	.+752    	; 0x463c <udc_process_setup+0x534>
    434c:	8f 71       	andi	r24, 0x1F	; 31
=======
    3f92:	80 91 65 26 	lds	r24, 0x2665	; 0x802665 <udd_g_ctrlreq+0x4>
    3f96:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <udd_ep_is_halted>
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	80 93 0c 25 	sts	0x250C, r24	; 0x80250c <udc_ep_status.4927>
    3fa0:	90 93 0d 25 	sts	0x250D, r25	; 0x80250d <udc_ep_status.4927+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    3fa4:	62 e0       	ldi	r22, 0x02	; 2
    3fa6:	70 e0       	ldi	r23, 0x00	; 0
    3fa8:	8c e0       	ldi	r24, 0x0C	; 12
    3faa:	95 e2       	ldi	r25, 0x25	; 37
    3fac:	0e 94 6e 25 	call	0x4adc	; 0x4adc <udd_set_setup_payload>
    3fb0:	78 c1       	rjmp	.+752    	; 0x42a2 <__stack+0x2a3>
    3fb2:	8f 71       	andi	r24, 0x1F	; 31
>>>>>>> Stashed changes
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
<<<<<<< Updated upstream
    434e:	09 f0       	breq	.+2      	; 0x4352 <udc_process_setup+0x24a>
    4350:	86 c0       	rjmp	.+268    	; 0x445e <udc_process_setup+0x356>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4352:	90 91 52 26 	lds	r25, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    4356:	93 30       	cpi	r25, 0x03	; 3
    4358:	09 f4       	brne	.+2      	; 0x435c <udc_process_setup+0x254>
    435a:	d9 c0       	rjmp	.+434    	; 0x450e <udc_process_setup+0x406>
    435c:	18 f4       	brcc	.+6      	; 0x4364 <udc_process_setup+0x25c>
    435e:	91 30       	cpi	r25, 0x01	; 1
    4360:	a1 f0       	breq	.+40     	; 0x438a <udc_process_setup+0x282>
    4362:	7d c0       	rjmp	.+250    	; 0x445e <udc_process_setup+0x356>
    4364:	95 30       	cpi	r25, 0x05	; 5
    4366:	19 f0       	breq	.+6      	; 0x436e <udc_process_setup+0x266>
    4368:	99 30       	cpi	r25, 0x09	; 9
    436a:	39 f1       	breq	.+78     	; 0x43ba <udc_process_setup+0x2b2>
    436c:	78 c0       	rjmp	.+240    	; 0x445e <udc_process_setup+0x356>
=======
    3fb4:	09 f0       	breq	.+2      	; 0x3fb8 <udc_process_setup+0x24a>
    3fb6:	86 c0       	rjmp	.+268    	; 0x40c4 <__stack+0xc5>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3fb8:	90 91 62 26 	lds	r25, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    3fbc:	93 30       	cpi	r25, 0x03	; 3
    3fbe:	09 f4       	brne	.+2      	; 0x3fc2 <udc_process_setup+0x254>
    3fc0:	d9 c0       	rjmp	.+434    	; 0x4174 <__stack+0x175>
    3fc2:	18 f4       	brcc	.+6      	; 0x3fca <udc_process_setup+0x25c>
    3fc4:	91 30       	cpi	r25, 0x01	; 1
    3fc6:	a1 f0       	breq	.+40     	; 0x3ff0 <udc_process_setup+0x282>
    3fc8:	7d c0       	rjmp	.+250    	; 0x40c4 <__stack+0xc5>
    3fca:	95 30       	cpi	r25, 0x05	; 5
    3fcc:	19 f0       	breq	.+6      	; 0x3fd4 <udc_process_setup+0x266>
    3fce:	99 30       	cpi	r25, 0x09	; 9
    3fd0:	39 f1       	breq	.+78     	; 0x4020 <__stack+0x21>
    3fd2:	78 c0       	rjmp	.+240    	; 0x40c4 <__stack+0xc5>
>>>>>>> Stashed changes
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
<<<<<<< Updated upstream
    436e:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    4372:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    4376:	89 2b       	or	r24, r25
    4378:	09 f0       	breq	.+2      	; 0x437c <udc_process_setup+0x274>
    437a:	05 c1       	rjmp	.+522    	; 0x4586 <udc_process_setup+0x47e>
=======
    3fd4:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    3fd8:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    3fdc:	89 2b       	or	r24, r25
    3fde:	09 f0       	breq	.+2      	; 0x3fe2 <udc_process_setup+0x274>
    3fe0:	05 c1       	rjmp	.+522    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
<<<<<<< Updated upstream
    437c:	85 e6       	ldi	r24, 0x65	; 101
    437e:	9f e1       	ldi	r25, 0x1F	; 31
    4380:	80 93 5d 26 	sts	0x265D, r24	; 0x80265d <udd_g_ctrlreq+0xc>
    4384:	90 93 5e 26 	sts	0x265E, r25	; 0x80265e <udd_g_ctrlreq+0xd>
    4388:	59 c1       	rjmp	.+690    	; 0x463c <udc_process_setup+0x534>
=======
    3fe2:	88 e9       	ldi	r24, 0x98	; 152
    3fe4:	9d e1       	ldi	r25, 0x1D	; 29
    3fe6:	80 93 6d 26 	sts	0x266D, r24	; 0x80266d <udd_g_ctrlreq+0xc>
    3fea:	90 93 6e 26 	sts	0x266E, r25	; 0x80266e <udd_g_ctrlreq+0xd>
    3fee:	59 c1       	rjmp	.+690    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
<<<<<<< Updated upstream
    438a:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    438e:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    4392:	89 2b       	or	r24, r25
    4394:	09 f0       	breq	.+2      	; 0x4398 <udc_process_setup+0x290>
    4396:	f7 c0       	rjmp	.+494    	; 0x4586 <udc_process_setup+0x47e>
=======
    3ff0:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    3ff4:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    3ff8:	89 2b       	or	r24, r25
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <udc_process_setup+0x290>
    3ffc:	f7 c0       	rjmp	.+494    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
<<<<<<< Updated upstream
    4398:	80 91 53 26 	lds	r24, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    439c:	90 91 54 26 	lds	r25, 0x2654	; 0x802654 <udd_g_ctrlreq+0x3>
    43a0:	01 97       	sbiw	r24, 0x01	; 1
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <udc_process_setup+0x29e>
    43a4:	f0 c0       	rjmp	.+480    	; 0x4586 <udc_process_setup+0x47e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    43a6:	80 91 06 25 	lds	r24, 0x2506	; 0x802506 <udc_device_status>
    43aa:	90 91 07 25 	lds	r25, 0x2507	; 0x802507 <udc_device_status+0x1>
    43ae:	8d 7f       	andi	r24, 0xFD	; 253
    43b0:	80 93 06 25 	sts	0x2506, r24	; 0x802506 <udc_device_status>
    43b4:	90 93 07 25 	sts	0x2507, r25	; 0x802507 <udc_device_status+0x1>
    43b8:	41 c1       	rjmp	.+642    	; 0x463c <udc_process_setup+0x534>
=======
    3ffe:	80 91 63 26 	lds	r24, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    4002:	90 91 64 26 	lds	r25, 0x2664	; 0x802664 <udd_g_ctrlreq+0x3>
    4006:	01 97       	sbiw	r24, 0x01	; 1
    4008:	09 f0       	breq	.+2      	; 0x400c <__stack+0xd>
    400a:	f0 c0       	rjmp	.+480    	; 0x41ec <__stack+0x1ed>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    400c:	80 91 16 25 	lds	r24, 0x2516	; 0x802516 <udc_device_status>
    4010:	90 91 17 25 	lds	r25, 0x2517	; 0x802517 <udc_device_status+0x1>
    4014:	8d 7f       	andi	r24, 0xFD	; 253
    4016:	80 93 16 25 	sts	0x2516, r24	; 0x802516 <udc_device_status>
    401a:	90 93 17 25 	sts	0x2517, r25	; 0x802517 <udc_device_status+0x1>
    401e:	41 c1       	rjmp	.+642    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
<<<<<<< Updated upstream
    43ba:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    43be:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    43c2:	89 2b       	or	r24, r25
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <udc_process_setup+0x2c0>
    43c6:	df c0       	rjmp	.+446    	; 0x4586 <udc_process_setup+0x47e>
=======
    4020:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    4024:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    4028:	89 2b       	or	r24, r25
    402a:	09 f0       	breq	.+2      	; 0x402e <__stack+0x2f>
    402c:	df c0       	rjmp	.+446    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
<<<<<<< Updated upstream
    43c8:	0e 94 20 27 	call	0x4e40	; 0x4e40 <udd_getaddress>
    43cc:	88 23       	and	r24, r24
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <udc_process_setup+0x2ca>
    43d0:	a3 c0       	rjmp	.+326    	; 0x4518 <udc_process_setup+0x410>
=======
    402e:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <udd_getaddress>
    4032:	88 23       	and	r24, r24
    4034:	09 f4       	brne	.+2      	; 0x4038 <__stack+0x39>
    4036:	a3 c0       	rjmp	.+326    	; 0x417e <__stack+0x17f>
>>>>>>> Stashed changes
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
<<<<<<< Updated upstream
    43d2:	20 91 53 26 	lds	r18, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    43d6:	30 91 54 26 	lds	r19, 0x2654	; 0x802654 <udd_g_ctrlreq+0x3>
    43da:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    43dc:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <udc_config>
    43e0:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <udc_config+0x1>
=======
    4038:	20 91 63 26 	lds	r18, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    403c:	30 91 64 26 	lds	r19, 0x2664	; 0x802664 <udd_g_ctrlreq+0x3>
    4040:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4042:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    4046:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
>>>>>>> Stashed changes
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
<<<<<<< Updated upstream
    43e4:	81 89       	ldd	r24, Z+17	; 0x11
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	82 17       	cp	r24, r18
    43ea:	93 07       	cpc	r25, r19
    43ec:	08 f4       	brcc	.+2      	; 0x43f0 <udc_process_setup+0x2e8>
    43ee:	94 c0       	rjmp	.+296    	; 0x4518 <udc_process_setup+0x410>
=======
    404a:	81 89       	ldd	r24, Z+17	; 0x11
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	82 17       	cp	r24, r18
    4050:	93 07       	cpc	r25, r19
    4052:	08 f4       	brcc	.+2      	; 0x4056 <__stack+0x57>
    4054:	94 c0       	rjmp	.+296    	; 0x417e <__stack+0x17f>
>>>>>>> Stashed changes
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
<<<<<<< Updated upstream
    43f0:	0e 94 27 20 	call	0x404e	; 0x404e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    43f4:	80 91 53 26 	lds	r24, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    43f8:	90 91 54 26 	lds	r25, 0x2654	; 0x802654 <udd_g_ctrlreq+0x3>
    43fc:	80 93 02 25 	sts	0x2502, r24	; 0x802502 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    4400:	88 23       	and	r24, r24
    4402:	09 f4       	brne	.+2      	; 0x4406 <udc_process_setup+0x2fe>
    4404:	1b c1       	rjmp	.+566    	; 0x463c <udc_process_setup+0x534>
=======
    4056:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    405a:	80 91 63 26 	lds	r24, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    405e:	90 91 64 26 	lds	r25, 0x2664	; 0x802664 <udd_g_ctrlreq+0x3>
    4062:	80 93 12 25 	sts	0x2512, r24	; 0x802512 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    4066:	88 23       	and	r24, r24
    4068:	09 f4       	brne	.+2      	; 0x406c <__stack+0x6d>
    406a:	1b c1       	rjmp	.+566    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
<<<<<<< Updated upstream
    4406:	99 27       	eor	r25, r25
    4408:	81 50       	subi	r24, 0x01	; 1
    440a:	90 4c       	sbci	r25, 0xC0	; 192
    440c:	88 0f       	add	r24, r24
    440e:	99 1f       	adc	r25, r25
    4410:	88 0f       	add	r24, r24
    4412:	99 1f       	adc	r25, r25
    4414:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <udc_config+0x2>
    4418:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <udc_config+0x3>
    441c:	e8 0f       	add	r30, r24
    441e:	f9 1f       	adc	r31, r25
    4420:	e0 93 00 25 	sts	0x2500, r30	; 0x802500 <udc_ptr_conf>
    4424:	f0 93 01 25 	sts	0x2501, r31	; 0x802501 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4428:	01 90       	ld	r0, Z+
    442a:	f0 81       	ld	r31, Z
    442c:	e0 2d       	mov	r30, r0
    442e:	84 81       	ldd	r24, Z+4	; 0x04
    4430:	88 23       	and	r24, r24
    4432:	09 f4       	brne	.+2      	; 0x4436 <udc_process_setup+0x32e>
    4434:	03 c1       	rjmp	.+518    	; 0x463c <udc_process_setup+0x534>
    4436:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	8c 2f       	mov	r24, r28
    443c:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <udc_iface_enable>
    4440:	88 23       	and	r24, r24
    4442:	09 f4       	brne	.+2      	; 0x4446 <udc_process_setup+0x33e>
    4444:	69 c0       	rjmp	.+210    	; 0x4518 <udc_process_setup+0x410>
=======
    406c:	99 27       	eor	r25, r25
    406e:	81 50       	subi	r24, 0x01	; 1
    4070:	90 4c       	sbci	r25, 0xC0	; 192
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	88 0f       	add	r24, r24
    4078:	99 1f       	adc	r25, r25
    407a:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    407e:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    4082:	e8 0f       	add	r30, r24
    4084:	f9 1f       	adc	r31, r25
    4086:	e0 93 10 25 	sts	0x2510, r30	; 0x802510 <udc_ptr_conf>
    408a:	f0 93 11 25 	sts	0x2511, r31	; 0x802511 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    408e:	01 90       	ld	r0, Z+
    4090:	f0 81       	ld	r31, Z
    4092:	e0 2d       	mov	r30, r0
    4094:	84 81       	ldd	r24, Z+4	; 0x04
    4096:	88 23       	and	r24, r24
    4098:	09 f4       	brne	.+2      	; 0x409c <__stack+0x9d>
    409a:	03 c1       	rjmp	.+518    	; 0x42a2 <__stack+0x2a3>
    409c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	8c 2f       	mov	r24, r28
    40a2:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <udc_iface_enable>
    40a6:	88 23       	and	r24, r24
    40a8:	09 f4       	brne	.+2      	; 0x40ac <__stack+0xad>
    40aa:	69 c0       	rjmp	.+210    	; 0x417e <__stack+0x17f>
>>>>>>> Stashed changes
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
<<<<<<< Updated upstream
    4446:	cf 5f       	subi	r28, 0xFF	; 255
=======
    40ac:	cf 5f       	subi	r28, 0xFF	; 255
>>>>>>> Stashed changes
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
<<<<<<< Updated upstream
    4448:	e0 91 00 25 	lds	r30, 0x2500	; 0x802500 <udc_ptr_conf>
    444c:	f0 91 01 25 	lds	r31, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    4450:	01 90       	ld	r0, Z+
    4452:	f0 81       	ld	r31, Z
    4454:	e0 2d       	mov	r30, r0
    4456:	84 81       	ldd	r24, Z+4	; 0x04
    4458:	c8 17       	cp	r28, r24
    445a:	70 f3       	brcs	.-36     	; 0x4438 <udc_process_setup+0x330>
    445c:	ef c0       	rjmp	.+478    	; 0x463c <udc_process_setup+0x534>
=======
    40ae:	e0 91 10 25 	lds	r30, 0x2510	; 0x802510 <udc_ptr_conf>
    40b2:	f0 91 11 25 	lds	r31, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    40b6:	01 90       	ld	r0, Z+
    40b8:	f0 81       	ld	r31, Z
    40ba:	e0 2d       	mov	r30, r0
    40bc:	84 81       	ldd	r24, Z+4	; 0x04
    40be:	c8 17       	cp	r28, r24
    40c0:	70 f3       	brcs	.-36     	; 0x409e <__stack+0x9f>
    40c2:	ef c0       	rjmp	.+478    	; 0x42a2 <__stack+0x2a3>
>>>>>>> Stashed changes
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
<<<<<<< Updated upstream
    445e:	81 30       	cpi	r24, 0x01	; 1
    4460:	f9 f4       	brne	.+62     	; 0x44a0 <udc_process_setup+0x398>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4462:	90 91 52 26 	lds	r25, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    4466:	9b 30       	cpi	r25, 0x0B	; 11
    4468:	d9 f4       	brne	.+54     	; 0x44a0 <udc_process_setup+0x398>
=======
    40c4:	81 30       	cpi	r24, 0x01	; 1
    40c6:	f9 f4       	brne	.+62     	; 0x4106 <__stack+0x107>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    40c8:	90 91 62 26 	lds	r25, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    40cc:	9b 30       	cpi	r25, 0x0B	; 11
    40ce:	d9 f4       	brne	.+54     	; 0x4106 <__stack+0x107>
>>>>>>> Stashed changes
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
<<<<<<< Updated upstream
    446a:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    446e:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    4472:	89 2b       	or	r24, r25
    4474:	09 f0       	breq	.+2      	; 0x4478 <udc_process_setup+0x370>
    4476:	55 c0       	rjmp	.+170    	; 0x4522 <udc_process_setup+0x41a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4478:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udc_num_configuration>
    447c:	88 23       	and	r24, r24
    447e:	09 f4       	brne	.+2      	; 0x4482 <udc_process_setup+0x37a>
    4480:	50 c0       	rjmp	.+160    	; 0x4522 <udc_process_setup+0x41a>
=======
    40d0:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    40d4:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    40d8:	89 2b       	or	r24, r25
    40da:	09 f0       	breq	.+2      	; 0x40de <__stack+0xdf>
    40dc:	55 c0       	rjmp	.+170    	; 0x4188 <__stack+0x189>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    40de:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udc_num_configuration>
    40e2:	88 23       	and	r24, r24
    40e4:	09 f4       	brne	.+2      	; 0x40e8 <__stack+0xe9>
    40e6:	50 c0       	rjmp	.+160    	; 0x4188 <__stack+0x189>
>>>>>>> Stashed changes
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
<<<<<<< Updated upstream
    4482:	e1 e5       	ldi	r30, 0x51	; 81
    4484:	f6 e2       	ldi	r31, 0x26	; 38
    4486:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    4488:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    448a:	8c 2f       	mov	r24, r28
    448c:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <udc_iface_disable>
    4490:	88 23       	and	r24, r24
    4492:	09 f4       	brne	.+2      	; 0x4496 <udc_process_setup+0x38e>
    4494:	41 c0       	rjmp	.+130    	; 0x4518 <udc_process_setup+0x410>
=======
    40e8:	e1 e6       	ldi	r30, 0x61	; 97
    40ea:	f6 e2       	ldi	r31, 0x26	; 38
    40ec:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    40ee:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    40f0:	8c 2f       	mov	r24, r28
    40f2:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <udc_iface_disable>
    40f6:	88 23       	and	r24, r24
    40f8:	09 f4       	brne	.+2      	; 0x40fc <__stack+0xfd>
    40fa:	41 c0       	rjmp	.+130    	; 0x417e <__stack+0x17f>
>>>>>>> Stashed changes
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
<<<<<<< Updated upstream
    4496:	6d 2f       	mov	r22, r29
    4498:	8c 2f       	mov	r24, r28
    449a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <udc_iface_enable>
    449e:	3a c0       	rjmp	.+116    	; 0x4514 <udc_process_setup+0x40c>
=======
    40fc:	6d 2f       	mov	r22, r29
    40fe:	8c 2f       	mov	r24, r28
    4100:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <udc_iface_enable>
    4104:	3a c0       	rjmp	.+116    	; 0x417a <__stack+0x17b>
>>>>>>> Stashed changes
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
<<<<<<< Updated upstream
    44a0:	82 30       	cpi	r24, 0x02	; 2
    44a2:	d1 f5       	brne	.+116    	; 0x4518 <udc_process_setup+0x410>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    44a4:	80 91 52 26 	lds	r24, 0x2652	; 0x802652 <udd_g_ctrlreq+0x1>
    44a8:	81 30       	cpi	r24, 0x01	; 1
    44aa:	19 f0       	breq	.+6      	; 0x44b2 <udc_process_setup+0x3aa>
    44ac:	83 30       	cpi	r24, 0x03	; 3
    44ae:	a1 f0       	breq	.+40     	; 0x44d8 <udc_process_setup+0x3d0>
    44b0:	30 c0       	rjmp	.+96     	; 0x4512 <udc_process_setup+0x40a>
=======
    4106:	82 30       	cpi	r24, 0x02	; 2
    4108:	d1 f5       	brne	.+116    	; 0x417e <__stack+0x17f>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    410a:	80 91 62 26 	lds	r24, 0x2662	; 0x802662 <udd_g_ctrlreq+0x1>
    410e:	81 30       	cpi	r24, 0x01	; 1
    4110:	19 f0       	breq	.+6      	; 0x4118 <__stack+0x119>
    4112:	83 30       	cpi	r24, 0x03	; 3
    4114:	a1 f0       	breq	.+40     	; 0x413e <__stack+0x13f>
    4116:	30 c0       	rjmp	.+96     	; 0x4178 <__stack+0x179>
>>>>>>> Stashed changes
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
<<<<<<< Updated upstream
    44b2:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    44b6:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    44ba:	89 2b       	or	r24, r25
    44bc:	09 f0       	breq	.+2      	; 0x44c0 <udc_process_setup+0x3b8>
    44be:	63 c0       	rjmp	.+198    	; 0x4586 <udc_process_setup+0x47e>
=======
    4118:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    411c:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    4120:	89 2b       	or	r24, r25
    4122:	09 f0       	breq	.+2      	; 0x4126 <__stack+0x127>
    4124:	63 c0       	rjmp	.+198    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
<<<<<<< Updated upstream
    44c0:	80 91 53 26 	lds	r24, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    44c4:	90 91 54 26 	lds	r25, 0x2654	; 0x802654 <udd_g_ctrlreq+0x3>
    44c8:	89 2b       	or	r24, r25
    44ca:	09 f0       	breq	.+2      	; 0x44ce <udc_process_setup+0x3c6>
    44cc:	5c c0       	rjmp	.+184    	; 0x4586 <udc_process_setup+0x47e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44ce:	80 91 55 26 	lds	r24, 0x2655	; 0x802655 <udd_g_ctrlreq+0x4>
    44d2:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <udd_ep_clear_halt>
    44d6:	1e c0       	rjmp	.+60     	; 0x4514 <udc_process_setup+0x40c>
=======
    4126:	80 91 63 26 	lds	r24, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    412a:	90 91 64 26 	lds	r25, 0x2664	; 0x802664 <udd_g_ctrlreq+0x3>
    412e:	89 2b       	or	r24, r25
    4130:	09 f0       	breq	.+2      	; 0x4134 <__stack+0x135>
    4132:	5c c0       	rjmp	.+184    	; 0x41ec <__stack+0x1ed>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4134:	80 91 65 26 	lds	r24, 0x2665	; 0x802665 <udd_g_ctrlreq+0x4>
    4138:	0e 94 21 26 	call	0x4c42	; 0x4c42 <udd_ep_clear_halt>
    413c:	1e c0       	rjmp	.+60     	; 0x417a <__stack+0x17b>
>>>>>>> Stashed changes
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
<<<<<<< Updated upstream
    44d8:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    44dc:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    44e0:	89 2b       	or	r24, r25
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <udc_process_setup+0x3de>
    44e4:	50 c0       	rjmp	.+160    	; 0x4586 <udc_process_setup+0x47e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44e6:	80 91 53 26 	lds	r24, 0x2653	; 0x802653 <udd_g_ctrlreq+0x2>
    44ea:	90 91 54 26 	lds	r25, 0x2654	; 0x802654 <udd_g_ctrlreq+0x3>
    44ee:	89 2b       	or	r24, r25
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <udc_process_setup+0x3ec>
    44f2:	49 c0       	rjmp	.+146    	; 0x4586 <udc_process_setup+0x47e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    44f4:	c1 e5       	ldi	r28, 0x51	; 81
    44f6:	d6 e2       	ldi	r29, 0x26	; 38
    44f8:	8c 81       	ldd	r24, Y+4	; 0x04
    44fa:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4500:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <udd_ep_set_halt>
    4504:	07 c0       	rjmp	.+14     	; 0x4514 <udc_process_setup+0x40c>
=======
    413e:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    4142:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    4146:	89 2b       	or	r24, r25
    4148:	09 f0       	breq	.+2      	; 0x414c <__stack+0x14d>
    414a:	50 c0       	rjmp	.+160    	; 0x41ec <__stack+0x1ed>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    414c:	80 91 63 26 	lds	r24, 0x2663	; 0x802663 <udd_g_ctrlreq+0x2>
    4150:	90 91 64 26 	lds	r25, 0x2664	; 0x802664 <udd_g_ctrlreq+0x3>
    4154:	89 2b       	or	r24, r25
    4156:	09 f0       	breq	.+2      	; 0x415a <__stack+0x15b>
    4158:	49 c0       	rjmp	.+146    	; 0x41ec <__stack+0x1ed>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    415a:	c1 e6       	ldi	r28, 0x61	; 97
    415c:	d6 e2       	ldi	r29, 0x26	; 38
    415e:	8c 81       	ldd	r24, Y+4	; 0x04
    4160:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4164:	8c 81       	ldd	r24, Y+4	; 0x04
    4166:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <udd_ep_set_halt>
    416a:	07 c0       	rjmp	.+14     	; 0x417a <__stack+0x17b>
>>>>>>> Stashed changes
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
<<<<<<< Updated upstream
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	05 c0       	rjmp	.+10     	; 0x4514 <udc_process_setup+0x40c>
=======
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	05 c0       	rjmp	.+10     	; 0x417a <__stack+0x17b>
>>>>>>> Stashed changes
				break;
			}
		}
#endif
	}
	return false;
<<<<<<< Updated upstream
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	03 c0       	rjmp	.+6      	; 0x4514 <udc_process_setup+0x40c>
=======
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	03 c0       	rjmp	.+6      	; 0x417a <__stack+0x17b>
>>>>>>> Stashed changes
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
<<<<<<< Updated upstream
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	01 c0       	rjmp	.+2      	; 0x4514 <udc_process_setup+0x40c>
=======
    4174:	80 e0       	ldi	r24, 0x00	; 0
    4176:	01 c0       	rjmp	.+2      	; 0x417a <__stack+0x17b>
>>>>>>> Stashed changes
				break;
			}
		}
#endif
	}
	return false;
<<<<<<< Updated upstream
    4512:	80 e0       	ldi	r24, 0x00	; 0
=======
    4178:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
<<<<<<< Updated upstream
    4514:	81 11       	cpse	r24, r1
    4516:	93 c0       	rjmp	.+294    	; 0x463e <udc_process_setup+0x536>
=======
    417a:	81 11       	cpse	r24, r1
    417c:	93 c0       	rjmp	.+294    	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
<<<<<<< Updated upstream
    4518:	80 91 51 26 	lds	r24, 0x2651	; 0x802651 <udd_g_ctrlreq>
    451c:	8f 71       	andi	r24, 0x1F	; 31
    451e:	81 30       	cpi	r24, 0x01	; 1
    4520:	91 f5       	brne	.+100    	; 0x4586 <udc_process_setup+0x47e>
=======
    417e:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <udd_g_ctrlreq>
    4182:	8f 71       	andi	r24, 0x1F	; 31
    4184:	81 30       	cpi	r24, 0x01	; 1
    4186:	91 f5       	brne	.+100    	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
<<<<<<< Updated upstream
    4522:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udc_num_configuration>
    4526:	88 23       	and	r24, r24
    4528:	09 f4       	brne	.+2      	; 0x452c <udc_process_setup+0x424>
    452a:	74 c0       	rjmp	.+232    	; 0x4614 <udc_process_setup+0x50c>
=======
    4188:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udc_num_configuration>
    418c:	88 23       	and	r24, r24
    418e:	09 f4       	brne	.+2      	; 0x4192 <__stack+0x193>
    4190:	74 c0       	rjmp	.+232    	; 0x427a <__stack+0x27b>
>>>>>>> Stashed changes
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
<<<<<<< Updated upstream
    452c:	00 91 55 26 	lds	r16, 0x2655	; 0x802655 <udd_g_ctrlreq+0x4>
    4530:	10 91 56 26 	lds	r17, 0x2656	; 0x802656 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4534:	c0 91 00 25 	lds	r28, 0x2500	; 0x802500 <udc_ptr_conf>
    4538:	d0 91 01 25 	lds	r29, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    453c:	e8 81       	ld	r30, Y
    453e:	f9 81       	ldd	r31, Y+1	; 0x01
    4540:	84 81       	ldd	r24, Z+4	; 0x04
    4542:	08 17       	cp	r16, r24
    4544:	08 f0       	brcs	.+2      	; 0x4548 <udc_process_setup+0x440>
    4546:	68 c0       	rjmp	.+208    	; 0x4618 <udc_process_setup+0x510>
=======
    4192:	00 91 65 26 	lds	r16, 0x2665	; 0x802665 <udd_g_ctrlreq+0x4>
    4196:	10 91 66 26 	lds	r17, 0x2666	; 0x802666 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    419a:	c0 91 10 25 	lds	r28, 0x2510	; 0x802510 <udc_ptr_conf>
    419e:	d0 91 11 25 	lds	r29, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    41a2:	e8 81       	ld	r30, Y
    41a4:	f9 81       	ldd	r31, Y+1	; 0x01
    41a6:	84 81       	ldd	r24, Z+4	; 0x04
    41a8:	08 17       	cp	r16, r24
    41aa:	08 f0       	brcs	.+2      	; 0x41ae <__stack+0x1af>
    41ac:	68 c0       	rjmp	.+208    	; 0x427e <__stack+0x27f>
>>>>>>> Stashed changes
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
<<<<<<< Updated upstream
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	80 2f       	mov	r24, r16
    454c:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    4550:	88 23       	and	r24, r24
    4552:	c9 f0       	breq	.+50     	; 0x4586 <udc_process_setup+0x47e>
=======
    41ae:	60 e0       	ldi	r22, 0x00	; 0
    41b0:	80 2f       	mov	r24, r16
    41b2:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    41b6:	88 23       	and	r24, r24
    41b8:	c9 f0       	breq	.+50     	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
<<<<<<< Updated upstream
    4554:	f8 01       	movw	r30, r16
    4556:	ff 27       	eor	r31, r31
    4558:	cf 01       	movw	r24, r30
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	ea 81       	ldd	r30, Y+2	; 0x02
    4560:	fb 81       	ldd	r31, Y+3	; 0x03
    4562:	e8 0f       	add	r30, r24
    4564:	f9 1f       	adc	r31, r25
    4566:	c0 81       	ld	r28, Z
    4568:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    456a:	ee 81       	ldd	r30, Y+6	; 0x06
    456c:	ff 81       	ldd	r31, Y+7	; 0x07
    456e:	19 95       	eicall
    4570:	68 2f       	mov	r22, r24
    4572:	80 2f       	mov	r24, r16
    4574:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    4578:	88 23       	and	r24, r24
    457a:	29 f0       	breq	.+10     	; 0x4586 <udc_process_setup+0x47e>
=======
    41ba:	f8 01       	movw	r30, r16
    41bc:	ff 27       	eor	r31, r31
    41be:	cf 01       	movw	r24, r30
    41c0:	88 0f       	add	r24, r24
    41c2:	99 1f       	adc	r25, r25
    41c4:	ea 81       	ldd	r30, Y+2	; 0x02
    41c6:	fb 81       	ldd	r31, Y+3	; 0x03
    41c8:	e8 0f       	add	r30, r24
    41ca:	f9 1f       	adc	r31, r25
    41cc:	c0 81       	ld	r28, Z
    41ce:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    41d0:	ee 81       	ldd	r30, Y+6	; 0x06
    41d2:	ff 81       	ldd	r31, Y+7	; 0x07
    41d4:	19 95       	eicall
    41d6:	68 2f       	mov	r22, r24
    41d8:	80 2f       	mov	r24, r16
    41da:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    41de:	88 23       	and	r24, r24
    41e0:	29 f0       	breq	.+10     	; 0x41ec <__stack+0x1ed>
>>>>>>> Stashed changes
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
<<<<<<< Updated upstream
    457c:	ec 81       	ldd	r30, Y+4	; 0x04
    457e:	fd 81       	ldd	r31, Y+5	; 0x05
    4580:	19 95       	eicall
=======
    41e2:	ec 81       	ldd	r30, Y+4	; 0x04
    41e4:	fd 81       	ldd	r31, Y+5	; 0x05
    41e6:	19 95       	eicall
>>>>>>> Stashed changes
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
<<<<<<< Updated upstream
    4582:	81 11       	cpse	r24, r1
    4584:	5c c0       	rjmp	.+184    	; 0x463e <udc_process_setup+0x536>
=======
    41e8:	81 11       	cpse	r24, r1
    41ea:	5c c0       	rjmp	.+184    	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
<<<<<<< Updated upstream
    4586:	80 91 51 26 	lds	r24, 0x2651	; 0x802651 <udd_g_ctrlreq>
    458a:	8f 71       	andi	r24, 0x1F	; 31
    458c:	82 30       	cpi	r24, 0x02	; 2
    458e:	09 f0       	breq	.+2      	; 0x4592 <udc_process_setup+0x48a>
    4590:	45 c0       	rjmp	.+138    	; 0x461c <udc_process_setup+0x514>
=======
    41ec:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <udd_g_ctrlreq>
    41f0:	8f 71       	andi	r24, 0x1F	; 31
    41f2:	82 30       	cpi	r24, 0x02	; 2
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <__stack+0x1f9>
    41f6:	45 c0       	rjmp	.+138    	; 0x4282 <__stack+0x283>
>>>>>>> Stashed changes
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
<<<<<<< Updated upstream
    4592:	80 91 02 25 	lds	r24, 0x2502	; 0x802502 <udc_num_configuration>
    4596:	88 23       	and	r24, r24
    4598:	b9 f1       	breq	.+110    	; 0x4608 <udc_process_setup+0x500>
=======
    41f8:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udc_num_configuration>
    41fc:	88 23       	and	r24, r24
    41fe:	b9 f1       	breq	.+110    	; 0x426e <__stack+0x26f>
>>>>>>> Stashed changes
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
<<<<<<< Updated upstream
    459a:	a0 91 00 25 	lds	r26, 0x2500	; 0x802500 <udc_ptr_conf>
    459e:	b0 91 01 25 	lds	r27, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    45a2:	ed 91       	ld	r30, X+
    45a4:	fc 91       	ld	r31, X
    45a6:	11 97       	sbiw	r26, 0x01	; 1
    45a8:	84 81       	ldd	r24, Z+4	; 0x04
    45aa:	88 23       	and	r24, r24
    45ac:	79 f1       	breq	.+94     	; 0x460c <udc_process_setup+0x504>
    45ae:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    45b0:	ec 2f       	mov	r30, r28
    45b2:	f0 e0       	ldi	r31, 0x00	; 0
    45b4:	ee 0f       	add	r30, r30
    45b6:	ff 1f       	adc	r31, r31
    45b8:	12 96       	adiw	r26, 0x02	; 2
    45ba:	8d 91       	ld	r24, X+
    45bc:	9c 91       	ld	r25, X
    45be:	13 97       	sbiw	r26, 0x03	; 3
    45c0:	e8 0f       	add	r30, r24
    45c2:	f9 1f       	adc	r31, r25
    45c4:	00 81       	ld	r16, Z
    45c6:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    45c8:	d8 01       	movw	r26, r16
    45ca:	16 96       	adiw	r26, 0x06	; 6
    45cc:	ed 91       	ld	r30, X+
    45ce:	fc 91       	ld	r31, X
    45d0:	17 97       	sbiw	r26, 0x07	; 7
    45d2:	19 95       	eicall
    45d4:	68 2f       	mov	r22, r24
    45d6:	8c 2f       	mov	r24, r28
    45d8:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <udc_update_iface_desc>
    45dc:	88 23       	and	r24, r24
    45de:	79 f1       	breq	.+94     	; 0x463e <udc_process_setup+0x536>
=======
    4200:	a0 91 10 25 	lds	r26, 0x2510	; 0x802510 <udc_ptr_conf>
    4204:	b0 91 11 25 	lds	r27, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    4208:	ed 91       	ld	r30, X+
    420a:	fc 91       	ld	r31, X
    420c:	11 97       	sbiw	r26, 0x01	; 1
    420e:	84 81       	ldd	r24, Z+4	; 0x04
    4210:	88 23       	and	r24, r24
    4212:	79 f1       	breq	.+94     	; 0x4272 <__stack+0x273>
    4214:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4216:	ec 2f       	mov	r30, r28
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	ee 0f       	add	r30, r30
    421c:	ff 1f       	adc	r31, r31
    421e:	12 96       	adiw	r26, 0x02	; 2
    4220:	8d 91       	ld	r24, X+
    4222:	9c 91       	ld	r25, X
    4224:	13 97       	sbiw	r26, 0x03	; 3
    4226:	e8 0f       	add	r30, r24
    4228:	f9 1f       	adc	r31, r25
    422a:	00 81       	ld	r16, Z
    422c:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    422e:	d8 01       	movw	r26, r16
    4230:	16 96       	adiw	r26, 0x06	; 6
    4232:	ed 91       	ld	r30, X+
    4234:	fc 91       	ld	r31, X
    4236:	17 97       	sbiw	r26, 0x07	; 7
    4238:	19 95       	eicall
    423a:	68 2f       	mov	r22, r24
    423c:	8c 2f       	mov	r24, r28
    423e:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <udc_update_iface_desc>
    4242:	88 23       	and	r24, r24
    4244:	79 f1       	breq	.+94     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
<<<<<<< Updated upstream
    45e0:	d8 01       	movw	r26, r16
    45e2:	14 96       	adiw	r26, 0x04	; 4
    45e4:	ed 91       	ld	r30, X+
    45e6:	fc 91       	ld	r31, X
    45e8:	15 97       	sbiw	r26, 0x05	; 5
    45ea:	19 95       	eicall
    45ec:	81 11       	cpse	r24, r1
    45ee:	27 c0       	rjmp	.+78     	; 0x463e <udc_process_setup+0x536>
=======
    4246:	d8 01       	movw	r26, r16
    4248:	14 96       	adiw	r26, 0x04	; 4
    424a:	ed 91       	ld	r30, X+
    424c:	fc 91       	ld	r31, X
    424e:	15 97       	sbiw	r26, 0x05	; 5
    4250:	19 95       	eicall
    4252:	81 11       	cpse	r24, r1
    4254:	27 c0       	rjmp	.+78     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
<<<<<<< Updated upstream
    45f0:	cf 5f       	subi	r28, 0xFF	; 255
=======
    4256:	cf 5f       	subi	r28, 0xFF	; 255
>>>>>>> Stashed changes
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
<<<<<<< Updated upstream
    45f2:	a0 91 00 25 	lds	r26, 0x2500	; 0x802500 <udc_ptr_conf>
    45f6:	b0 91 01 25 	lds	r27, 0x2501	; 0x802501 <udc_ptr_conf+0x1>
    45fa:	ed 91       	ld	r30, X+
    45fc:	fc 91       	ld	r31, X
    45fe:	11 97       	sbiw	r26, 0x01	; 1
    4600:	94 81       	ldd	r25, Z+4	; 0x04
    4602:	c9 17       	cp	r28, r25
    4604:	a8 f2       	brcs	.-86     	; 0x45b0 <udc_process_setup+0x4a8>
    4606:	1b c0       	rjmp	.+54     	; 0x463e <udc_process_setup+0x536>
=======
    4258:	a0 91 10 25 	lds	r26, 0x2510	; 0x802510 <udc_ptr_conf>
    425c:	b0 91 11 25 	lds	r27, 0x2511	; 0x802511 <udc_ptr_conf+0x1>
    4260:	ed 91       	ld	r30, X+
    4262:	fc 91       	ld	r31, X
    4264:	11 97       	sbiw	r26, 0x01	; 1
    4266:	94 81       	ldd	r25, Z+4	; 0x04
    4268:	c9 17       	cp	r28, r25
    426a:	a8 f2       	brcs	.-86     	; 0x4216 <__stack+0x217>
    426c:	1b c0       	rjmp	.+54     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
<<<<<<< Updated upstream
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	19 c0       	rjmp	.+50     	; 0x463e <udc_process_setup+0x536>
=======
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	19 c0       	rjmp	.+50     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
<<<<<<< Updated upstream
    460c:	80 e0       	ldi	r24, 0x00	; 0
    460e:	17 c0       	rjmp	.+46     	; 0x463e <udc_process_setup+0x536>
=======
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	17 c0       	rjmp	.+46     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
<<<<<<< Updated upstream
    4610:	80 e0       	ldi	r24, 0x00	; 0
    4612:	15 c0       	rjmp	.+42     	; 0x463e <udc_process_setup+0x536>
=======
    4276:	80 e0       	ldi	r24, 0x00	; 0
    4278:	15 c0       	rjmp	.+42     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
<<<<<<< Updated upstream
    4614:	80 e0       	ldi	r24, 0x00	; 0
    4616:	13 c0       	rjmp	.+38     	; 0x463e <udc_process_setup+0x536>
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	11 c0       	rjmp	.+34     	; 0x463e <udc_process_setup+0x536>
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	0f c0       	rjmp	.+30     	; 0x463e <udc_process_setup+0x536>
=======
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	13 c0       	rjmp	.+38     	; 0x42a4 <__stack+0x2a5>
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	11 c0       	rjmp	.+34     	; 0x42a4 <__stack+0x2a5>
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	0f c0       	rjmp	.+30     	; 0x42a4 <__stack+0x2a5>
>>>>>>> Stashed changes
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
<<<<<<< Updated upstream
    4620:	98 2f       	mov	r25, r24
    4622:	90 76       	andi	r25, 0x60	; 96
    4624:	09 f0       	breq	.+2      	; 0x4628 <udc_process_setup+0x520>
    4626:	78 cf       	rjmp	.-272    	; 0x4518 <udc_process_setup+0x410>
    4628:	88 cd       	rjmp	.-1264   	; 0x413a <udc_process_setup+0x32>
    462a:	98 2f       	mov	r25, r24
    462c:	90 76       	andi	r25, 0x60	; 96
    462e:	09 f0       	breq	.+2      	; 0x4632 <udc_process_setup+0x52a>
    4630:	73 cf       	rjmp	.-282    	; 0x4518 <udc_process_setup+0x410>
    4632:	8c ce       	rjmp	.-744    	; 0x434c <udc_process_setup+0x244>
=======
    4286:	98 2f       	mov	r25, r24
    4288:	90 76       	andi	r25, 0x60	; 96
    428a:	09 f0       	breq	.+2      	; 0x428e <__stack+0x28f>
    428c:	78 cf       	rjmp	.-272    	; 0x417e <__stack+0x17f>
    428e:	88 cd       	rjmp	.-1264   	; 0x3da0 <udc_process_setup+0x32>
    4290:	98 2f       	mov	r25, r24
    4292:	90 76       	andi	r25, 0x60	; 96
    4294:	09 f0       	breq	.+2      	; 0x4298 <__stack+0x299>
    4296:	73 cf       	rjmp	.-282    	; 0x417e <__stack+0x17f>
    4298:	8c ce       	rjmp	.-744    	; 0x3fb2 <udc_process_setup+0x244>
>>>>>>> Stashed changes
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
<<<<<<< Updated upstream
    4634:	3d e0       	ldi	r19, 0x0D	; 13
		str = udc_string_product_name;
    4636:	ea e3       	ldi	r30, 0x3A	; 58
    4638:	f0 e2       	ldi	r31, 0x20	; 32
    463a:	ff cd       	rjmp	.-1026   	; 0x423a <udc_process_setup+0x132>
=======
    429a:	3d e0       	ldi	r19, 0x0D	; 13
		str = udc_string_product_name;
    429c:	e4 e3       	ldi	r30, 0x34	; 52
    429e:	f0 e2       	ldi	r31, 0x20	; 32
    42a0:	ff cd       	rjmp	.-1026   	; 0x3ea0 <udc_process_setup+0x132>
>>>>>>> Stashed changes
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
<<<<<<< Updated upstream
    463c:	81 e0       	ldi	r24, 0x01	; 1
=======
    42a2:	81 e0       	ldi	r24, 0x01	; 1
>>>>>>> Stashed changes
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
<<<<<<< Updated upstream
    463e:	df 91       	pop	r29
    4640:	cf 91       	pop	r28
    4642:	1f 91       	pop	r17
    4644:	0f 91       	pop	r16
    4646:	08 95       	ret

00004648 <udd_sleep_mode>:
=======
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	08 95       	ret

000042ae <udd_sleep_mode>:
>>>>>>> Stashed changes
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
<<<<<<< Updated upstream
    4648:	cf 93       	push	r28
    464a:	df 93       	push	r29
    464c:	1f 92       	push	r1
    464e:	1f 92       	push	r1
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62
	if (!b_idle && udd_b_idle) {
    4654:	81 11       	cpse	r24, r1
    4656:	26 c0       	rjmp	.+76     	; 0x46a4 <udd_sleep_mode+0x5c>
    4658:	90 91 50 26 	lds	r25, 0x2650	; 0x802650 <udd_b_idle>
    465c:	99 23       	and	r25, r25
    465e:	f9 f0       	breq	.+62     	; 0x469e <udd_sleep_mode+0x56>
=======
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	1f 92       	push	r1
    42b4:	1f 92       	push	r1
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
	if (!b_idle && udd_b_idle) {
    42ba:	81 11       	cpse	r24, r1
    42bc:	26 c0       	rjmp	.+76     	; 0x430a <udd_sleep_mode+0x5c>
    42be:	90 91 60 26 	lds	r25, 0x2660	; 0x802660 <udd_b_idle>
    42c2:	99 23       	and	r25, r25
    42c4:	f9 f0       	breq	.+62     	; 0x4304 <udd_sleep_mode+0x56>
>>>>>>> Stashed changes
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
<<<<<<< Updated upstream
    4660:	90 91 62 26 	lds	r25, 0x2662	; 0x802662 <sleepmgr_locks+0x1>
    4664:	91 11       	cpse	r25, r1
    4666:	01 c0       	rjmp	.+2      	; 0x466a <udd_sleep_mode+0x22>
    4668:	ff cf       	rjmp	.-2      	; 0x4668 <udd_sleep_mode+0x20>
=======
    42c6:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <sleepmgr_locks+0x1>
    42ca:	91 11       	cpse	r25, r1
    42cc:	01 c0       	rjmp	.+2      	; 0x42d0 <udd_sleep_mode+0x22>
    42ce:	ff cf       	rjmp	.-2      	; 0x42ce <udd_sleep_mode+0x20>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    466a:	9f b7       	in	r25, 0x3f	; 63
    466c:	9a 83       	std	Y+2, r25	; 0x02
	cpu_irq_disable();
    466e:	f8 94       	cli
	return flags;
    4670:	2a 81       	ldd	r18, Y+2	; 0x02
=======
    42d0:	9f b7       	in	r25, 0x3f	; 63
    42d2:	9a 83       	std	Y+2, r25	; 0x02
	cpu_irq_disable();
    42d4:	f8 94       	cli
	return flags;
    42d6:	2a 81       	ldd	r18, Y+2	; 0x02
>>>>>>> Stashed changes
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
<<<<<<< Updated upstream
    4672:	e1 e6       	ldi	r30, 0x61	; 97
    4674:	f6 e2       	ldi	r31, 0x26	; 38
    4676:	91 81       	ldd	r25, Z+1	; 0x01
    4678:	91 50       	subi	r25, 0x01	; 1
    467a:	91 83       	std	Z+1, r25	; 0x01
=======
    42d8:	e1 e7       	ldi	r30, 0x71	; 113
    42da:	f6 e2       	ldi	r31, 0x26	; 38
    42dc:	91 81       	ldd	r25, Z+1	; 0x01
    42de:	91 50       	subi	r25, 0x01	; 1
    42e0:	91 83       	std	Z+1, r25	; 0x01
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    467c:	2f bf       	out	0x3f, r18	; 63
    467e:	0f c0       	rjmp	.+30     	; 0x469e <udd_sleep_mode+0x56>
=======
    42e2:	2f bf       	out	0x3f, r18	; 63
    42e4:	0f c0       	rjmp	.+30     	; 0x4304 <udd_sleep_mode+0x56>
>>>>>>> Stashed changes
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
<<<<<<< Updated upstream
    4680:	90 91 62 26 	lds	r25, 0x2662	; 0x802662 <sleepmgr_locks+0x1>
    4684:	9f 3f       	cpi	r25, 0xFF	; 255
    4686:	09 f4       	brne	.+2      	; 0x468a <udd_sleep_mode+0x42>
    4688:	ff cf       	rjmp	.-2      	; 0x4688 <udd_sleep_mode+0x40>
=======
    42e6:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <sleepmgr_locks+0x1>
    42ea:	9f 3f       	cpi	r25, 0xFF	; 255
    42ec:	09 f4       	brne	.+2      	; 0x42f0 <udd_sleep_mode+0x42>
    42ee:	ff cf       	rjmp	.-2      	; 0x42ee <udd_sleep_mode+0x40>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    468a:	9f b7       	in	r25, 0x3f	; 63
    468c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    468e:	f8 94       	cli
	return flags;
    4690:	29 81       	ldd	r18, Y+1	; 0x01
=======
    42f0:	9f b7       	in	r25, 0x3f	; 63
    42f2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    42f4:	f8 94       	cli
	return flags;
    42f6:	29 81       	ldd	r18, Y+1	; 0x01
>>>>>>> Stashed changes
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
<<<<<<< Updated upstream
    4692:	e1 e6       	ldi	r30, 0x61	; 97
    4694:	f6 e2       	ldi	r31, 0x26	; 38
    4696:	91 81       	ldd	r25, Z+1	; 0x01
    4698:	9f 5f       	subi	r25, 0xFF	; 255
    469a:	91 83       	std	Z+1, r25	; 0x01
=======
    42f8:	e1 e7       	ldi	r30, 0x71	; 113
    42fa:	f6 e2       	ldi	r31, 0x26	; 38
    42fc:	91 81       	ldd	r25, Z+1	; 0x01
    42fe:	9f 5f       	subi	r25, 0xFF	; 255
    4300:	91 83       	std	Z+1, r25	; 0x01
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    469c:	2f bf       	out	0x3f, r18	; 63
=======
    4302:	2f bf       	out	0x3f, r18	; 63
>>>>>>> Stashed changes
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
<<<<<<< Updated upstream
    469e:	80 93 50 26 	sts	0x2650, r24	; 0x802650 <udd_b_idle>
}
    46a2:	05 c0       	rjmp	.+10     	; 0x46ae <udd_sleep_mode+0x66>
=======
    4304:	80 93 60 26 	sts	0x2660, r24	; 0x802660 <udd_b_idle>
}
    4308:	05 c0       	rjmp	.+10     	; 0x4314 <udd_sleep_mode+0x66>
>>>>>>> Stashed changes
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
<<<<<<< Updated upstream
    46a4:	90 91 50 26 	lds	r25, 0x2650	; 0x802650 <udd_b_idle>
    46a8:	99 23       	and	r25, r25
    46aa:	51 f3       	breq	.-44     	; 0x4680 <udd_sleep_mode+0x38>
    46ac:	f8 cf       	rjmp	.-16     	; 0x469e <udd_sleep_mode+0x56>
=======
    430a:	90 91 60 26 	lds	r25, 0x2660	; 0x802660 <udd_b_idle>
    430e:	99 23       	and	r25, r25
    4310:	51 f3       	breq	.-44     	; 0x42e6 <udd_sleep_mode+0x38>
    4312:	f8 cf       	rjmp	.-16     	; 0x4304 <udd_sleep_mode+0x56>
>>>>>>> Stashed changes
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
<<<<<<< Updated upstream
    46ae:	0f 90       	pop	r0
    46b0:	0f 90       	pop	r0
    46b2:	df 91       	pop	r29
    46b4:	cf 91       	pop	r28
    46b6:	08 95       	ret

000046b8 <udd_ctrl_init>:
=======
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	08 95       	ret

0000431e <udd_ctrl_init>:
>>>>>>> Stashed changes

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
<<<<<<< Updated upstream
    46b8:	0f 93       	push	r16
	udd_disable_overflow_interrupt();
    46ba:	e8 ec       	ldi	r30, 0xC8	; 200
    46bc:	f4 e0       	ldi	r31, 0x04	; 4
    46be:	80 81       	ld	r24, Z
    46c0:	8f 7d       	andi	r24, 0xDF	; 223
    46c2:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    46c4:	80 81       	ld	r24, Z
    46c6:	8f 7d       	andi	r24, 0xDF	; 223
    46c8:	80 83       	st	Z, r24
=======
    431e:	0f 93       	push	r16
	udd_disable_overflow_interrupt();
    4320:	e8 ec       	ldi	r30, 0xC8	; 200
    4322:	f4 e0       	ldi	r31, 0x04	; 4
    4324:	80 81       	ld	r24, Z
    4326:	8f 7d       	andi	r24, 0xDF	; 223
    4328:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    432a:	80 81       	ld	r24, Z
    432c:	8f 7d       	andi	r24, 0xDF	; 223
    432e:	80 83       	st	Z, r24
>>>>>>> Stashed changes

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
<<<<<<< Updated upstream
    46ca:	e8 e1       	ldi	r30, 0x18	; 24
    46cc:	f6 e2       	ldi	r31, 0x26	; 38
    46ce:	02 e0       	ldi	r16, 0x02	; 2
    46d0:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    46d2:	10 92 1a 26 	sts	0x261A, r1	; 0x80261a <udd_sram+0x1a>
    46d6:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <udd_sram+0x1b>
	udd_control_in_ack_tc();
    46da:	00 e2       	ldi	r16, 0x20	; 32
    46dc:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    46de:	00 e4       	ldi	r16, 0x40	; 64
    46e0:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    46e2:	e0 e1       	ldi	r30, 0x10	; 16
    46e4:	f6 e2       	ldi	r31, 0x26	; 38
    46e6:	00 e4       	ldi	r16, 0x40	; 64
    46e8:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    46ea:	e1 e5       	ldi	r30, 0x51	; 81
    46ec:	f6 e2       	ldi	r31, 0x26	; 38
    46ee:	14 86       	std	Z+12, r1	; 0x0c
    46f0:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    46f2:	16 86       	std	Z+14, r1	; 0x0e
    46f4:	17 86       	std	Z+15, r1	; 0x0f
	udd_g_ctrlreq.payload_size = 0;
    46f6:	12 86       	std	Z+10, r1	; 0x0a
    46f8:	13 86       	std	Z+11, r1	; 0x0b
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    46fa:	10 92 f1 25 	sts	0x25F1, r1	; 0x8025f1 <udd_ep_control_state>
}
    46fe:	0f 91       	pop	r16
    4700:	08 95       	ret

00004702 <udd_ctrl_stall_data>:
=======
    4330:	e8 e2       	ldi	r30, 0x28	; 40
    4332:	f6 e2       	ldi	r31, 0x26	; 38
    4334:	02 e0       	ldi	r16, 0x02	; 2
    4336:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    4338:	10 92 2a 26 	sts	0x262A, r1	; 0x80262a <udd_sram+0x1a>
    433c:	10 92 2b 26 	sts	0x262B, r1	; 0x80262b <udd_sram+0x1b>
	udd_control_in_ack_tc();
    4340:	00 e2       	ldi	r16, 0x20	; 32
    4342:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    4344:	00 e4       	ldi	r16, 0x40	; 64
    4346:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    4348:	e0 e2       	ldi	r30, 0x20	; 32
    434a:	f6 e2       	ldi	r31, 0x26	; 38
    434c:	00 e4       	ldi	r16, 0x40	; 64
    434e:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    4350:	e1 e6       	ldi	r30, 0x61	; 97
    4352:	f6 e2       	ldi	r31, 0x26	; 38
    4354:	14 86       	std	Z+12, r1	; 0x0c
    4356:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    4358:	16 86       	std	Z+14, r1	; 0x0e
    435a:	17 86       	std	Z+15, r1	; 0x0f
	udd_g_ctrlreq.payload_size = 0;
    435c:	12 86       	std	Z+10, r1	; 0x0a
    435e:	13 86       	std	Z+11, r1	; 0x0b
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    4360:	10 92 01 26 	sts	0x2601, r1	; 0x802601 <udd_ep_control_state>
}
    4364:	0f 91       	pop	r16
    4366:	08 95       	ret

00004368 <udd_ctrl_stall_data>:
>>>>>>> Stashed changes
		udd_control_out_enable_stall();
	}
}

static void udd_ctrl_stall_data(void)
{
<<<<<<< Updated upstream
    4702:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    4704:	85 e0       	ldi	r24, 0x05	; 5
    4706:	80 93 f1 25 	sts	0x25F1, r24	; 0x8025f1 <udd_ep_control_state>
	udd_control_in_enable_stall();
    470a:	e9 e1       	ldi	r30, 0x19	; 25
    470c:	f6 e2       	ldi	r31, 0x26	; 38
    470e:	04 e0       	ldi	r16, 0x04	; 4
    4710:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    4712:	e1 e1       	ldi	r30, 0x11	; 17
    4714:	f6 e2       	ldi	r31, 0x26	; 38
    4716:	04 e0       	ldi	r16, 0x04	; 4
    4718:	05 93       	las	Z, r16
}
    471a:	0f 91       	pop	r16
    471c:	08 95       	ret

0000471e <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    471e:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4720:	83 e0       	ldi	r24, 0x03	; 3
    4722:	80 93 f1 25 	sts	0x25F1, r24	; 0x8025f1 <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    4726:	10 92 1a 26 	sts	0x261A, r1	; 0x80261a <udd_sram+0x1a>
    472a:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <udd_sram+0x1b>
	udd_control_in_clear_NACK0();
    472e:	e8 e1       	ldi	r30, 0x18	; 24
    4730:	f6 e2       	ldi	r31, 0x26	; 38
    4732:	02 e0       	ldi	r16, 0x02	; 2
    4734:	06 93       	lac	Z, r16
}
    4736:	0f 91       	pop	r16
    4738:	08 95       	ret

0000473a <udd_ctrl_endofrequest>:
=======
    4368:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    436a:	85 e0       	ldi	r24, 0x05	; 5
    436c:	80 93 01 26 	sts	0x2601, r24	; 0x802601 <udd_ep_control_state>
	udd_control_in_enable_stall();
    4370:	e9 e2       	ldi	r30, 0x29	; 41
    4372:	f6 e2       	ldi	r31, 0x26	; 38
    4374:	04 e0       	ldi	r16, 0x04	; 4
    4376:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    4378:	e1 e2       	ldi	r30, 0x21	; 33
    437a:	f6 e2       	ldi	r31, 0x26	; 38
    437c:	04 e0       	ldi	r16, 0x04	; 4
    437e:	05 93       	las	Z, r16
}
    4380:	0f 91       	pop	r16
    4382:	08 95       	ret

00004384 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    4384:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4386:	83 e0       	ldi	r24, 0x03	; 3
    4388:	80 93 01 26 	sts	0x2601, r24	; 0x802601 <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    438c:	10 92 2a 26 	sts	0x262A, r1	; 0x80262a <udd_sram+0x1a>
    4390:	10 92 2b 26 	sts	0x262B, r1	; 0x80262b <udd_sram+0x1b>
	udd_control_in_clear_NACK0();
    4394:	e8 e2       	ldi	r30, 0x28	; 40
    4396:	f6 e2       	ldi	r31, 0x26	; 38
    4398:	02 e0       	ldi	r16, 0x02	; 2
    439a:	06 93       	lac	Z, r16
}
    439c:	0f 91       	pop	r16
    439e:	08 95       	ret

000043a0 <udd_ctrl_endofrequest>:
>>>>>>> Stashed changes
}

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
<<<<<<< Updated upstream
    473a:	e0 91 5d 26 	lds	r30, 0x265D	; 0x80265d <udd_g_ctrlreq+0xc>
    473e:	f0 91 5e 26 	lds	r31, 0x265E	; 0x80265e <udd_g_ctrlreq+0xd>
    4742:	30 97       	sbiw	r30, 0x00	; 0
    4744:	09 f0       	breq	.+2      	; 0x4748 <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    4746:	19 95       	eicall
    4748:	08 95       	ret

0000474a <udd_ctrl_in_sent>:
=======
    43a0:	e0 91 6d 26 	lds	r30, 0x266D	; 0x80266d <udd_g_ctrlreq+0xc>
    43a4:	f0 91 6e 26 	lds	r31, 0x266E	; 0x80266e <udd_g_ctrlreq+0xd>
    43a8:	30 97       	sbiw	r30, 0x00	; 0
    43aa:	09 f0       	breq	.+2      	; 0x43ae <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    43ac:	19 95       	eicall
    43ae:	08 95       	ret

000043b0 <udd_ctrl_in_sent>:
>>>>>>> Stashed changes
		udd_control_out_ack_tc();
	}
}

static void udd_ctrl_in_sent(void)
{
<<<<<<< Updated upstream
    474a:	0f 93       	push	r16
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
=======
    43b0:	0f 93       	push	r16
    43b2:	cf 93       	push	r28
    43b4:	df 93       	push	r29
>>>>>>> Stashed changes
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
<<<<<<< Updated upstream
    4750:	80 91 f1 25 	lds	r24, 0x25F1	; 0x8025f1 <udd_ep_control_state>
    4754:	83 30       	cpi	r24, 0x03	; 3
    4756:	29 f4       	brne	.+10     	; 0x4762 <udd_ctrl_in_sent+0x18>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    4758:	0e 94 9d 23 	call	0x473a	; 0x473a <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    475c:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <udd_ctrl_init>
		return;
    4760:	5e c0       	rjmp	.+188    	; 0x481e <udd_ctrl_in_sent+0xd4>
=======
    43b6:	80 91 01 26 	lds	r24, 0x2601	; 0x802601 <udd_ep_control_state>
    43ba:	83 30       	cpi	r24, 0x03	; 3
    43bc:	29 f4       	brne	.+10     	; 0x43c8 <udd_ctrl_in_sent+0x18>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    43be:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    43c2:	0e 94 8f 21 	call	0x431e	; 0x431e <udd_ctrl_init>
		return;
    43c6:	5e c0       	rjmp	.+188    	; 0x4484 <udd_ctrl_in_sent+0xd4>
>>>>>>> Stashed changes
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
<<<<<<< Updated upstream
    4762:	80 91 ed 25 	lds	r24, 0x25ED	; 0x8025ed <udd_ctrl_payload_nb_trans>
    4766:	90 91 ee 25 	lds	r25, 0x25EE	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
    476a:	c0 91 5b 26 	lds	r28, 0x265B	; 0x80265b <udd_g_ctrlreq+0xa>
    476e:	d0 91 5c 26 	lds	r29, 0x265C	; 0x80265c <udd_g_ctrlreq+0xb>
    4772:	c8 1b       	sub	r28, r24
    4774:	d9 0b       	sbc	r29, r25
	if (0 == nb_remain) {
    4776:	71 f5       	brne	.+92     	; 0x47d4 <udd_ctrl_in_sent+0x8a>
		// Update number of total data sending by previous playload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    4778:	20 91 ef 25 	lds	r18, 0x25EF	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    477c:	30 91 f0 25 	lds	r19, 0x25F0	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
    4780:	82 0f       	add	r24, r18
    4782:	93 1f       	adc	r25, r19
    4784:	80 93 ef 25 	sts	0x25EF, r24	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    4788:	90 93 f0 25 	sts	0x25F0, r25	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    478c:	20 91 57 26 	lds	r18, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    4790:	30 91 58 26 	lds	r19, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    4794:	82 17       	cp	r24, r18
    4796:	93 07       	cpc	r25, r19
    4798:	21 f0       	breq	.+8      	; 0x47a2 <udd_ctrl_in_sent+0x58>
				|| b_shortpacket) {
    479a:	80 91 08 25 	lds	r24, 0x2508	; 0x802508 <b_shortpacket.5638>
    479e:	88 23       	and	r24, r24
    47a0:	41 f0       	breq	.+16     	; 0x47b2 <udd_ctrl_in_sent+0x68>
=======
    43c8:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <udd_ctrl_payload_nb_trans>
    43cc:	90 91 fe 25 	lds	r25, 0x25FE	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
    43d0:	c0 91 6b 26 	lds	r28, 0x266B	; 0x80266b <udd_g_ctrlreq+0xa>
    43d4:	d0 91 6c 26 	lds	r29, 0x266C	; 0x80266c <udd_g_ctrlreq+0xb>
    43d8:	c8 1b       	sub	r28, r24
    43da:	d9 0b       	sbc	r29, r25
	if (0 == nb_remain) {
    43dc:	71 f5       	brne	.+92     	; 0x443a <udd_ctrl_in_sent+0x8a>
		// Update number of total data sending by previous playload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    43de:	20 91 ff 25 	lds	r18, 0x25FF	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    43e2:	30 91 00 26 	lds	r19, 0x2600	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
    43e6:	82 0f       	add	r24, r18
    43e8:	93 1f       	adc	r25, r19
    43ea:	80 93 ff 25 	sts	0x25FF, r24	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    43ee:	90 93 00 26 	sts	0x2600, r25	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    43f2:	20 91 67 26 	lds	r18, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    43f6:	30 91 68 26 	lds	r19, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    43fa:	82 17       	cp	r24, r18
    43fc:	93 07       	cpc	r25, r19
    43fe:	21 f0       	breq	.+8      	; 0x4408 <udd_ctrl_in_sent+0x58>
				|| b_shortpacket) {
    4400:	80 91 18 25 	lds	r24, 0x2518	; 0x802518 <b_shortpacket.5638>
    4404:	88 23       	and	r24, r24
    4406:	41 f0       	breq	.+16     	; 0x4418 <udd_ctrl_in_sent+0x68>
>>>>>>> Stashed changes
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
<<<<<<< Updated upstream
    47a2:	84 e0       	ldi	r24, 0x04	; 4
    47a4:	80 93 f1 25 	sts	0x25F1, r24	; 0x8025f1 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    47a8:	e0 e1       	ldi	r30, 0x10	; 16
    47aa:	f6 e2       	ldi	r31, 0x26	; 38
    47ac:	02 e0       	ldi	r16, 0x02	; 2
    47ae:	06 93       	lac	Z, r16
    47b0:	36 c0       	rjmp	.+108    	; 0x481e <udd_ctrl_in_sent+0xd4>
=======
    4408:	84 e0       	ldi	r24, 0x04	; 4
    440a:	80 93 01 26 	sts	0x2601, r24	; 0x802601 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    440e:	e0 e2       	ldi	r30, 0x20	; 32
    4410:	f6 e2       	ldi	r31, 0x26	; 38
    4412:	02 e0       	ldi	r16, 0x02	; 2
    4414:	06 93       	lac	Z, r16
    4416:	36 c0       	rjmp	.+108    	; 0x4484 <udd_ctrl_in_sent+0xd4>
>>>>>>> Stashed changes
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
<<<<<<< Updated upstream
    47b2:	e0 91 5f 26 	lds	r30, 0x265F	; 0x80265f <udd_g_ctrlreq+0xe>
    47b6:	f0 91 60 26 	lds	r31, 0x2660	; 0x802660 <udd_g_ctrlreq+0xf>
    47ba:	30 97       	sbiw	r30, 0x00	; 0
    47bc:	99 f0       	breq	.+38     	; 0x47e4 <udd_ctrl_in_sent+0x9a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    47be:	19 95       	eicall
    47c0:	88 23       	and	r24, r24
    47c2:	81 f0       	breq	.+32     	; 0x47e4 <udd_ctrl_in_sent+0x9a>
=======
    4418:	e0 91 6f 26 	lds	r30, 0x266F	; 0x80266f <udd_g_ctrlreq+0xe>
    441c:	f0 91 70 26 	lds	r31, 0x2670	; 0x802670 <udd_g_ctrlreq+0xf>
    4420:	30 97       	sbiw	r30, 0x00	; 0
    4422:	99 f0       	breq	.+38     	; 0x444a <udd_ctrl_in_sent+0x9a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    4424:	19 95       	eicall
    4426:	88 23       	and	r24, r24
    4428:	81 f0       	breq	.+32     	; 0x444a <udd_ctrl_in_sent+0x9a>
>>>>>>> Stashed changes
			// Underrun then send zlp on IN
			// nb_remain == 0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
<<<<<<< Updated upstream
    47c4:	10 92 ed 25 	sts	0x25ED, r1	; 0x8025ed <udd_ctrl_payload_nb_trans>
    47c8:	10 92 ee 25 	sts	0x25EE, r1	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
			nb_remain = udd_g_ctrlreq.payload_size;
    47cc:	c0 91 5b 26 	lds	r28, 0x265B	; 0x80265b <udd_g_ctrlreq+0xa>
    47d0:	d0 91 5c 26 	lds	r29, 0x265C	; 0x80265c <udd_g_ctrlreq+0xb>
=======
    442a:	10 92 fd 25 	sts	0x25FD, r1	; 0x8025fd <udd_ctrl_payload_nb_trans>
    442e:	10 92 fe 25 	sts	0x25FE, r1	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
			nb_remain = udd_g_ctrlreq.payload_size;
    4432:	c0 91 6b 26 	lds	r28, 0x266B	; 0x80266b <udd_g_ctrlreq+0xa>
    4436:	d0 91 6c 26 	lds	r29, 0x266C	; 0x80266c <udd_g_ctrlreq+0xb>
>>>>>>> Stashed changes
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
<<<<<<< Updated upstream
    47d4:	c0 34       	cpi	r28, 0x40	; 64
    47d6:	d1 05       	cpc	r29, r1
    47d8:	28 f0       	brcs	.+10     	; 0x47e4 <udd_ctrl_in_sent+0x9a>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    47da:	10 92 08 25 	sts	0x2508, r1	; 0x802508 <b_shortpacket.5638>
=======
    443a:	c0 34       	cpi	r28, 0x40	; 64
    443c:	d1 05       	cpc	r29, r1
    443e:	28 f0       	brcs	.+10     	; 0x444a <udd_ctrl_in_sent+0x9a>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    4440:	10 92 18 25 	sts	0x2518, r1	; 0x802518 <b_shortpacket.5638>
>>>>>>> Stashed changes
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
<<<<<<< Updated upstream
    47de:	c0 e4       	ldi	r28, 0x40	; 64
    47e0:	d0 e0       	ldi	r29, 0x00	; 0
    47e2:	03 c0       	rjmp	.+6      	; 0x47ea <udd_ctrl_in_sent+0xa0>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    47e4:	81 e0       	ldi	r24, 0x01	; 1
    47e6:	80 93 08 25 	sts	0x2508, r24	; 0x802508 <b_shortpacket.5638>
	}
	udd_control_in_set_bytecnt(nb_remain);
    47ea:	e0 e0       	ldi	r30, 0x00	; 0
    47ec:	f6 e2       	ldi	r31, 0x26	; 38
    47ee:	c2 8f       	std	Z+26, r28	; 0x1a
    47f0:	d3 8f       	std	Z+27, r29	; 0x1b

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    47f2:	80 91 ed 25 	lds	r24, 0x25ED	; 0x8025ed <udd_ctrl_payload_nb_trans>
    47f6:	90 91 ee 25 	lds	r25, 0x25EE	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
    47fa:	20 91 59 26 	lds	r18, 0x2659	; 0x802659 <udd_g_ctrlreq+0x8>
    47fe:	30 91 5a 26 	lds	r19, 0x265A	; 0x80265a <udd_g_ctrlreq+0x9>
    4802:	28 0f       	add	r18, r24
    4804:	39 1f       	adc	r19, r25
    4806:	24 8f       	std	Z+28, r18	; 0x1c
    4808:	35 8f       	std	Z+29, r19	; 0x1d
	udd_ctrl_payload_nb_trans += nb_remain;
    480a:	c8 0f       	add	r28, r24
    480c:	d9 1f       	adc	r29, r25
    480e:	c0 93 ed 25 	sts	0x25ED, r28	; 0x8025ed <udd_ctrl_payload_nb_trans>
    4812:	d0 93 ee 25 	sts	0x25EE, r29	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    4816:	e8 e1       	ldi	r30, 0x18	; 24
    4818:	f6 e2       	ldi	r31, 0x26	; 38
    481a:	02 e0       	ldi	r16, 0x02	; 2
    481c:	06 93       	lac	Z, r16
}
    481e:	df 91       	pop	r29
    4820:	cf 91       	pop	r28
    4822:	0f 91       	pop	r16
    4824:	08 95       	ret

00004826 <udd_ep_get_size>:
=======
    4444:	c0 e4       	ldi	r28, 0x40	; 64
    4446:	d0 e0       	ldi	r29, 0x00	; 0
    4448:	03 c0       	rjmp	.+6      	; 0x4450 <udd_ctrl_in_sent+0xa0>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	80 93 18 25 	sts	0x2518, r24	; 0x802518 <b_shortpacket.5638>
	}
	udd_control_in_set_bytecnt(nb_remain);
    4450:	e0 e1       	ldi	r30, 0x10	; 16
    4452:	f6 e2       	ldi	r31, 0x26	; 38
    4454:	c2 8f       	std	Z+26, r28	; 0x1a
    4456:	d3 8f       	std	Z+27, r29	; 0x1b

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    4458:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <udd_ctrl_payload_nb_trans>
    445c:	90 91 fe 25 	lds	r25, 0x25FE	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
    4460:	20 91 69 26 	lds	r18, 0x2669	; 0x802669 <udd_g_ctrlreq+0x8>
    4464:	30 91 6a 26 	lds	r19, 0x266A	; 0x80266a <udd_g_ctrlreq+0x9>
    4468:	28 0f       	add	r18, r24
    446a:	39 1f       	adc	r19, r25
    446c:	24 8f       	std	Z+28, r18	; 0x1c
    446e:	35 8f       	std	Z+29, r19	; 0x1d
	udd_ctrl_payload_nb_trans += nb_remain;
    4470:	c8 0f       	add	r28, r24
    4472:	d9 1f       	adc	r29, r25
    4474:	c0 93 fd 25 	sts	0x25FD, r28	; 0x8025fd <udd_ctrl_payload_nb_trans>
    4478:	d0 93 fe 25 	sts	0x25FE, r29	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    447c:	e8 e2       	ldi	r30, 0x28	; 40
    447e:	f6 e2       	ldi	r31, 0x26	; 38
    4480:	02 e0       	ldi	r16, 0x02	; 2
    4482:	06 93       	lac	Z, r16
}
    4484:	df 91       	pop	r29
    4486:	cf 91       	pop	r28
    4488:	0f 91       	pop	r16
    448a:	08 95       	ret

0000448c <udd_ep_get_size>:
>>>>>>> Stashed changes
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
<<<<<<< Updated upstream
    4826:	fc 01       	movw	r30, r24
    4828:	81 81       	ldd	r24, Z+1	; 0x01
    482a:	e8 2f       	mov	r30, r24
    482c:	e7 70       	andi	r30, 0x07	; 7
    482e:	8e 2f       	mov	r24, r30
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	fc 01       	movw	r30, r24
    4834:	31 97       	sbiw	r30, 0x01	; 1
    4836:	e7 30       	cpi	r30, 0x07	; 7
    4838:	f1 05       	cpc	r31, r1
    483a:	d8 f4       	brcc	.+54     	; 0x4872 <udd_ep_get_size+0x4c>
    483c:	88 27       	eor	r24, r24
    483e:	e6 52       	subi	r30, 0x26	; 38
    4840:	fe 4f       	sbci	r31, 0xFE	; 254
    4842:	8f 4f       	sbci	r24, 0xFF	; 255
    4844:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__tablejump2__>
=======
    448c:	fc 01       	movw	r30, r24
    448e:	81 81       	ldd	r24, Z+1	; 0x01
    4490:	e8 2f       	mov	r30, r24
    4492:	e7 70       	andi	r30, 0x07	; 7
    4494:	8e 2f       	mov	r24, r30
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	fc 01       	movw	r30, r24
    449a:	31 97       	sbiw	r30, 0x01	; 1
    449c:	e7 30       	cpi	r30, 0x07	; 7
    449e:	f1 05       	cpc	r31, r1
    44a0:	d8 f4       	brcc	.+54     	; 0x44d8 <udd_ep_get_size+0x4c>
    44a2:	88 27       	eor	r24, r24
    44a4:	e2 53       	subi	r30, 0x32	; 50
    44a6:	fe 4f       	sbci	r31, 0xFE	; 254
    44a8:	8f 4f       	sbci	r24, 0xFF	; 255
    44aa:	0c 94 0f 2f 	jmp	0x5e1e	; 0x5e1e <__tablejump2__>
>>>>>>> Stashed changes
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
	case USB_EP_BUFSIZE_16_gc:
		return 16;
<<<<<<< Updated upstream
    4848:	80 e1       	ldi	r24, 0x10	; 16
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	08 95       	ret
	case USB_EP_BUFSIZE_32_gc:
		return 32;
    484e:	80 e2       	ldi	r24, 0x20	; 32
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	08 95       	ret
	case USB_EP_BUFSIZE_64_gc:
		return 64;
    4854:	80 e4       	ldi	r24, 0x40	; 64
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	08 95       	ret
	case USB_EP_BUFSIZE_128_gc:
		return 128;
    485a:	80 e8       	ldi	r24, 0x80	; 128
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	08 95       	ret
	case USB_EP_BUFSIZE_256_gc:
		return 256;
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	91 e0       	ldi	r25, 0x01	; 1
    4864:	08 95       	ret
	case USB_EP_BUFSIZE_512_gc:
		return 512;
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	92 e0       	ldi	r25, 0x02	; 2
    486a:	08 95       	ret
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
    486c:	8f ef       	ldi	r24, 0xFF	; 255
    486e:	93 e0       	ldi	r25, 0x03	; 3
    4870:	08 95       	ret
=======
    44ae:	80 e1       	ldi	r24, 0x10	; 16
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	08 95       	ret
	case USB_EP_BUFSIZE_32_gc:
		return 32;
    44b4:	80 e2       	ldi	r24, 0x20	; 32
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	08 95       	ret
	case USB_EP_BUFSIZE_64_gc:
		return 64;
    44ba:	80 e4       	ldi	r24, 0x40	; 64
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	08 95       	ret
	case USB_EP_BUFSIZE_128_gc:
		return 128;
    44c0:	80 e8       	ldi	r24, 0x80	; 128
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	08 95       	ret
	case USB_EP_BUFSIZE_256_gc:
		return 256;
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	91 e0       	ldi	r25, 0x01	; 1
    44ca:	08 95       	ret
	case USB_EP_BUFSIZE_512_gc:
		return 512;
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	92 e0       	ldi	r25, 0x02	; 2
    44d0:	08 95       	ret
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
    44d2:	8f ef       	ldi	r24, 0xFF	; 255
    44d4:	93 e0       	ldi	r25, 0x03	; 3
    44d6:	08 95       	ret
>>>>>>> Stashed changes
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
<<<<<<< Updated upstream
    4872:	88 e0       	ldi	r24, 0x08	; 8
    4874:	90 e0       	ldi	r25, 0x00	; 0
=======
    44d8:	88 e0       	ldi	r24, 0x08	; 8
    44da:	90 e0       	ldi	r25, 0x00	; 0
>>>>>>> Stashed changes
	case USB_EP_BUFSIZE_512_gc:
		return 512;
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
	}
}
<<<<<<< Updated upstream
    4876:	08 95       	ret

00004878 <udd_ep_get_job>:
=======
    44dc:	08 95       	ret

000044de <udd_ep_get_job>:
>>>>>>> Stashed changes

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    4878:	28 2f       	mov	r18, r24
    487a:	2f 70       	andi	r18, 0x0F	; 15
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	22 0f       	add	r18, r18
    4880:	33 1f       	adc	r19, r19
    4882:	08 2e       	mov	r0, r24
    4884:	00 0c       	add	r0, r0
    4886:	99 0b       	sbc	r25, r25
    4888:	88 27       	eor	r24, r24
    488a:	99 0f       	add	r25, r25
    488c:	88 1f       	adc	r24, r24
    488e:	99 27       	eor	r25, r25
    4890:	82 0f       	add	r24, r18
    4892:	93 1f       	adc	r25, r19
    4894:	02 97       	sbiw	r24, 0x02	; 2
    4896:	9c 01       	movw	r18, r24
    4898:	22 0f       	add	r18, r18
    489a:	33 1f       	adc	r19, r19
    489c:	22 0f       	add	r18, r18
    489e:	33 1f       	adc	r19, r19
    48a0:	22 0f       	add	r18, r18
    48a2:	33 1f       	adc	r19, r19
    48a4:	82 0f       	add	r24, r18
    48a6:	93 1f       	adc	r25, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    48a8:	87 57       	subi	r24, 0x77	; 119
    48aa:	9a 4d       	sbci	r25, 0xDA	; 218
    48ac:	08 95       	ret

000048ae <udd_ctrl_interrupt_tc_setup>:
=======
    44de:	28 2f       	mov	r18, r24
    44e0:	2f 70       	andi	r18, 0x0F	; 15
    44e2:	30 e0       	ldi	r19, 0x00	; 0
    44e4:	22 0f       	add	r18, r18
    44e6:	33 1f       	adc	r19, r19
    44e8:	08 2e       	mov	r0, r24
    44ea:	00 0c       	add	r0, r0
    44ec:	99 0b       	sbc	r25, r25
    44ee:	88 27       	eor	r24, r24
    44f0:	99 0f       	add	r25, r25
    44f2:	88 1f       	adc	r24, r24
    44f4:	99 27       	eor	r25, r25
    44f6:	82 0f       	add	r24, r18
    44f8:	93 1f       	adc	r25, r19
    44fa:	02 97       	sbiw	r24, 0x02	; 2
    44fc:	9c 01       	movw	r18, r24
    44fe:	22 0f       	add	r18, r18
    4500:	33 1f       	adc	r19, r19
    4502:	22 0f       	add	r18, r18
    4504:	33 1f       	adc	r19, r19
    4506:	22 0f       	add	r18, r18
    4508:	33 1f       	adc	r19, r19
    450a:	82 0f       	add	r24, r18
    450c:	93 1f       	adc	r25, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    450e:	87 56       	subi	r24, 0x67	; 103
    4510:	9a 4d       	sbci	r25, 0xDA	; 218
    4512:	08 95       	ret

00004514 <udd_ctrl_interrupt_tc_setup>:
>>>>>>> Stashed changes
	}
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
<<<<<<< Updated upstream
    48ae:	0f 93       	push	r16
    48b0:	cf 93       	push	r28
	if (!udd_is_setup_event()) {
    48b2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    48b6:	80 ff       	sbrs	r24, 0
    48b8:	6a c0       	rjmp	.+212    	; 0x498e <udd_ctrl_interrupt_tc_setup+0xe0>
		return false;
	}
	udd_ack_setup_event();
    48ba:	81 e0       	ldi	r24, 0x01	; 1
    48bc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    48c0:	e0 e1       	ldi	r30, 0x10	; 16
    48c2:	f6 e2       	ldi	r31, 0x26	; 38
    48c4:	00 e8       	ldi	r16, 0x80	; 128
    48c6:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    48c8:	e8 e1       	ldi	r30, 0x18	; 24
    48ca:	f6 e2       	ldi	r31, 0x26	; 38
    48cc:	00 e8       	ldi	r16, 0x80	; 128
    48ce:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    48d0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
=======
    4514:	0f 93       	push	r16
    4516:	cf 93       	push	r28
	if (!udd_is_setup_event()) {
    4518:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    451c:	80 ff       	sbrs	r24, 0
    451e:	6a c0       	rjmp	.+212    	; 0x45f4 <udd_ctrl_interrupt_tc_setup+0xe0>
		return false;
	}
	udd_ack_setup_event();
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    4526:	e0 e2       	ldi	r30, 0x20	; 32
    4528:	f6 e2       	ldi	r31, 0x26	; 38
    452a:	00 e8       	ldi	r16, 0x80	; 128
    452c:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    452e:	e8 e2       	ldi	r30, 0x28	; 40
    4530:	f6 e2       	ldi	r31, 0x26	; 38
    4532:	00 e8       	ldi	r16, 0x80	; 128
    4534:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    4536:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
>>>>>>> Stashed changes

	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
<<<<<<< Updated upstream
    48d4:	e0 e1       	ldi	r30, 0x10	; 16
    48d6:	f6 e2       	ldi	r31, 0x26	; 38
    48d8:	00 e1       	ldi	r16, 0x10	; 16
    48da:	06 93       	lac	Z, r16
=======
    453a:	e0 e2       	ldi	r30, 0x20	; 32
    453c:	f6 e2       	ldi	r31, 0x26	; 38
    453e:	00 e1       	ldi	r16, 0x10	; 16
    4540:	06 93       	lac	Z, r16
>>>>>>> Stashed changes
	udd_ep_control_state = UDD_EPCTRL_SETUP;
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
<<<<<<< Updated upstream
    48dc:	80 91 f1 25 	lds	r24, 0x25F1	; 0x8025f1 <udd_ep_control_state>
    48e0:	88 23       	and	r24, r24
    48e2:	39 f0       	breq	.+14     	; 0x48f2 <udd_ctrl_interrupt_tc_setup+0x44>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    48e4:	83 50       	subi	r24, 0x03	; 3
    48e6:	82 30       	cpi	r24, 0x02	; 2
    48e8:	10 f4       	brcc	.+4      	; 0x48ee <udd_ctrl_interrupt_tc_setup+0x40>
=======
    4542:	80 91 01 26 	lds	r24, 0x2601	; 0x802601 <udd_ep_control_state>
    4546:	88 23       	and	r24, r24
    4548:	39 f0       	breq	.+14     	; 0x4558 <udd_ctrl_interrupt_tc_setup+0x44>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    454a:	83 50       	subi	r24, 0x03	; 3
    454c:	82 30       	cpi	r24, 0x02	; 2
    454e:	10 f4       	brcc	.+4      	; 0x4554 <udd_ctrl_interrupt_tc_setup+0x40>
>>>>>>> Stashed changes
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// Accept that ZLP event can be hidden by setup packet event
			// in case of setup packet sending quickly after a ZLP
			udd_ctrl_endofrequest();
<<<<<<< Updated upstream
    48ea:	0e 94 9d 23 	call	0x473a	; 0x473a <udd_ctrl_endofrequest>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    48ee:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    48f2:	80 91 12 26 	lds	r24, 0x2612	; 0x802612 <udd_sram+0x12>
    48f6:	90 91 13 26 	lds	r25, 0x2613	; 0x802613 <udd_sram+0x13>
    48fa:	08 97       	sbiw	r24, 0x08	; 8
    48fc:	09 f0       	breq	.+2      	; 0x4900 <udd_ctrl_interrupt_tc_setup+0x52>
    48fe:	49 c0       	rjmp	.+146    	; 0x4992 <udd_ctrl_interrupt_tc_setup+0xe4>
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    4900:	88 e0       	ldi	r24, 0x08	; 8
    4902:	ed ea       	ldi	r30, 0xAD	; 173
    4904:	f5 e2       	ldi	r31, 0x25	; 37
    4906:	a1 e5       	ldi	r26, 0x51	; 81
    4908:	b6 e2       	ldi	r27, 0x26	; 38
    490a:	01 90       	ld	r0, Z+
    490c:	0d 92       	st	X+, r0
    490e:	8a 95       	dec	r24
    4910:	e1 f7       	brne	.-8      	; 0x490a <udd_ctrl_interrupt_tc_setup+0x5c>

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    4912:	e8 ec       	ldi	r30, 0xC8	; 200
    4914:	f4 e0       	ldi	r31, 0x04	; 4
    4916:	80 81       	ld	r24, Z
    4918:	80 62       	ori	r24, 0x20	; 32
    491a:	80 83       	st	Z, r24
	udd_enable_underflow_interrupt();
    491c:	80 81       	ld	r24, Z
    491e:	80 62       	ori	r24, 0x20	; 32
    4920:	80 83       	st	Z, r24

	// Decode setup request
	if (udc_process_setup() == false) {
    4922:	0e 94 84 20 	call	0x4108	; 0x4108 <udc_process_setup>
    4926:	c8 2f       	mov	r28, r24
    4928:	81 11       	cpse	r24, r1
    492a:	04 c0       	rjmp	.+8      	; 0x4934 <udd_ctrl_interrupt_tc_setup+0x86>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    492c:	0e 94 81 23 	call	0x4702	; 0x4702 <udd_ctrl_stall_data>
=======
    4550:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <udd_ctrl_endofrequest>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    4554:	0e 94 8f 21 	call	0x431e	; 0x431e <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    4558:	80 91 22 26 	lds	r24, 0x2622	; 0x802622 <udd_sram+0x12>
    455c:	90 91 23 26 	lds	r25, 0x2623	; 0x802623 <udd_sram+0x13>
    4560:	08 97       	sbiw	r24, 0x08	; 8
    4562:	09 f0       	breq	.+2      	; 0x4566 <udd_ctrl_interrupt_tc_setup+0x52>
    4564:	49 c0       	rjmp	.+146    	; 0x45f8 <udd_ctrl_interrupt_tc_setup+0xe4>
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    4566:	88 e0       	ldi	r24, 0x08	; 8
    4568:	ed eb       	ldi	r30, 0xBD	; 189
    456a:	f5 e2       	ldi	r31, 0x25	; 37
    456c:	a1 e6       	ldi	r26, 0x61	; 97
    456e:	b6 e2       	ldi	r27, 0x26	; 38
    4570:	01 90       	ld	r0, Z+
    4572:	0d 92       	st	X+, r0
    4574:	8a 95       	dec	r24
    4576:	e1 f7       	brne	.-8      	; 0x4570 <udd_ctrl_interrupt_tc_setup+0x5c>

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    4578:	e8 ec       	ldi	r30, 0xC8	; 200
    457a:	f4 e0       	ldi	r31, 0x04	; 4
    457c:	80 81       	ld	r24, Z
    457e:	80 62       	ori	r24, 0x20	; 32
    4580:	80 83       	st	Z, r24
	udd_enable_underflow_interrupt();
    4582:	80 81       	ld	r24, Z
    4584:	80 62       	ori	r24, 0x20	; 32
    4586:	80 83       	st	Z, r24

	// Decode setup request
	if (udc_process_setup() == false) {
    4588:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <udc_process_setup>
    458c:	c8 2f       	mov	r28, r24
    458e:	81 11       	cpse	r24, r1
    4590:	04 c0       	rjmp	.+8      	; 0x459a <udd_ctrl_interrupt_tc_setup+0x86>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    4592:	0e 94 b4 21 	call	0x4368	; 0x4368 <udd_ctrl_stall_data>
>>>>>>> Stashed changes
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
<<<<<<< Updated upstream
    4930:	c1 e0       	ldi	r28, 0x01	; 1
    4932:	30 c0       	rjmp	.+96     	; 0x4994 <udd_ctrl_interrupt_tc_setup+0xe6>
=======
    4596:	c1 e0       	ldi	r28, 0x01	; 1
    4598:	30 c0       	rjmp	.+96     	; 0x45fa <udd_ctrl_interrupt_tc_setup+0xe6>
>>>>>>> Stashed changes
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
		return;
	}

	if (Udd_setup_is_in()) {
<<<<<<< Updated upstream
    4934:	80 91 51 26 	lds	r24, 0x2651	; 0x802651 <udd_g_ctrlreq>
    4938:	88 23       	and	r24, r24
    493a:	74 f4       	brge	.+28     	; 0x4958 <udd_ctrl_interrupt_tc_setup+0xaa>
		udd_ctrl_prev_payload_nb_trans = 0;
    493c:	10 92 ef 25 	sts	0x25EF, r1	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    4940:	10 92 f0 25 	sts	0x25F0, r1	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    4944:	10 92 ed 25 	sts	0x25ED, r1	; 0x8025ed <udd_ctrl_payload_nb_trans>
    4948:	10 92 ee 25 	sts	0x25EE, r1	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    494c:	82 e0       	ldi	r24, 0x02	; 2
    494e:	80 93 f1 25 	sts	0x25F1, r24	; 0x8025f1 <udd_ep_control_state>
		udd_ctrl_in_sent(); // Send first data transfer
    4952:	0e 94 a5 23 	call	0x474a	; 0x474a <udd_ctrl_in_sent>
    4956:	1e c0       	rjmp	.+60     	; 0x4994 <udd_ctrl_interrupt_tc_setup+0xe6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    4958:	80 91 57 26 	lds	r24, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    495c:	90 91 58 26 	lds	r25, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    4960:	89 2b       	or	r24, r25
    4962:	19 f4       	brne	.+6      	; 0x496a <udd_ctrl_interrupt_tc_setup+0xbc>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    4964:	0e 94 8f 23 	call	0x471e	; 0x471e <udd_ctrl_send_zlp_in>
    4968:	15 c0       	rjmp	.+42     	; 0x4994 <udd_ctrl_interrupt_tc_setup+0xe6>
=======
    459a:	80 91 61 26 	lds	r24, 0x2661	; 0x802661 <udd_g_ctrlreq>
    459e:	88 23       	and	r24, r24
    45a0:	74 f4       	brge	.+28     	; 0x45be <udd_ctrl_interrupt_tc_setup+0xaa>
		udd_ctrl_prev_payload_nb_trans = 0;
    45a2:	10 92 ff 25 	sts	0x25FF, r1	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    45a6:	10 92 00 26 	sts	0x2600, r1	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    45aa:	10 92 fd 25 	sts	0x25FD, r1	; 0x8025fd <udd_ctrl_payload_nb_trans>
    45ae:	10 92 fe 25 	sts	0x25FE, r1	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	80 93 01 26 	sts	0x2601, r24	; 0x802601 <udd_ep_control_state>
		udd_ctrl_in_sent(); // Send first data transfer
    45b8:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <udd_ctrl_in_sent>
    45bc:	1e c0       	rjmp	.+60     	; 0x45fa <udd_ctrl_interrupt_tc_setup+0xe6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    45be:	80 91 67 26 	lds	r24, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    45c2:	90 91 68 26 	lds	r25, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    45c6:	89 2b       	or	r24, r25
    45c8:	19 f4       	brne	.+6      	; 0x45d0 <udd_ctrl_interrupt_tc_setup+0xbc>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    45ca:	0e 94 c2 21 	call	0x4384	; 0x4384 <udd_ctrl_send_zlp_in>
    45ce:	15 c0       	rjmp	.+42     	; 0x45fa <udd_ctrl_interrupt_tc_setup+0xe6>
>>>>>>> Stashed changes
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
<<<<<<< Updated upstream
    496a:	10 92 ef 25 	sts	0x25EF, r1	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    496e:	10 92 f0 25 	sts	0x25F0, r1	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    4972:	10 92 ed 25 	sts	0x25ED, r1	; 0x8025ed <udd_ctrl_payload_nb_trans>
    4976:	10 92 ee 25 	sts	0x25EE, r1	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    497a:	81 e0       	ldi	r24, 0x01	; 1
    497c:	80 93 f1 25 	sts	0x25F1, r24	; 0x8025f1 <udd_ep_control_state>
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    4980:	e0 e1       	ldi	r30, 0x10	; 16
    4982:	f6 e2       	ldi	r31, 0x26	; 38
    4984:	02 e0       	ldi	r16, 0x02	; 2
    4986:	06 93       	lac	Z, r16
		udd_control_out_ack_tc();
    4988:	00 e2       	ldi	r16, 0x20	; 32
    498a:	06 93       	lac	Z, r16
    498c:	03 c0       	rjmp	.+6      	; 0x4994 <udd_ctrl_interrupt_tc_setup+0xe6>
=======
    45d0:	10 92 ff 25 	sts	0x25FF, r1	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    45d4:	10 92 00 26 	sts	0x2600, r1	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    45d8:	10 92 fd 25 	sts	0x25FD, r1	; 0x8025fd <udd_ctrl_payload_nb_trans>
    45dc:	10 92 fe 25 	sts	0x25FE, r1	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	80 93 01 26 	sts	0x2601, r24	; 0x802601 <udd_ep_control_state>
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    45e6:	e0 e2       	ldi	r30, 0x20	; 32
    45e8:	f6 e2       	ldi	r31, 0x26	; 38
    45ea:	02 e0       	ldi	r16, 0x02	; 2
    45ec:	06 93       	lac	Z, r16
		udd_control_out_ack_tc();
    45ee:	00 e2       	ldi	r16, 0x20	; 32
    45f0:	06 93       	lac	Z, r16
    45f2:	03 c0       	rjmp	.+6      	; 0x45fa <udd_ctrl_interrupt_tc_setup+0xe6>
>>>>>>> Stashed changes
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
		return false;
<<<<<<< Updated upstream
    498e:	c0 e0       	ldi	r28, 0x00	; 0
    4990:	01 c0       	rjmp	.+2      	; 0x4994 <udd_ctrl_interrupt_tc_setup+0xe6>
=======
    45f4:	c0 e0       	ldi	r28, 0x00	; 0
    45f6:	01 c0       	rjmp	.+2      	; 0x45fa <udd_ctrl_interrupt_tc_setup+0xe6>
>>>>>>> Stashed changes
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
<<<<<<< Updated upstream
    4992:	c1 e0       	ldi	r28, 0x01	; 1
}
    4994:	8c 2f       	mov	r24, r28
    4996:	cf 91       	pop	r28
    4998:	0f 91       	pop	r16
    499a:	08 95       	ret

0000499c <udd_ep_trans_complet>:
=======
    45f8:	c1 e0       	ldi	r28, 0x01	; 1
}
    45fa:	8c 2f       	mov	r24, r28
    45fc:	cf 91       	pop	r28
    45fe:	0f 91       	pop	r16
    4600:	08 95       	ret

00004602 <udd_ep_trans_complet>:
>>>>>>> Stashed changes
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
<<<<<<< Updated upstream
    499c:	8f 92       	push	r8
    499e:	9f 92       	push	r9
    49a0:	af 92       	push	r10
    49a2:	bf 92       	push	r11
    49a4:	df 92       	push	r13
    49a6:	ef 92       	push	r14
    49a8:	ff 92       	push	r15
    49aa:	0f 93       	push	r16
    49ac:	1f 93       	push	r17
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	d8 2e       	mov	r13, r24
=======
    4602:	8f 92       	push	r8
    4604:	9f 92       	push	r9
    4606:	af 92       	push	r10
    4608:	bf 92       	push	r11
    460a:	df 92       	push	r13
    460c:	ef 92       	push	r14
    460e:	ff 92       	push	r15
    4610:	0f 93       	push	r16
    4612:	1f 93       	push	r17
    4614:	cf 93       	push	r28
    4616:	df 93       	push	r29
    4618:	d8 2e       	mov	r13, r24
>>>>>>> Stashed changes
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
<<<<<<< Updated upstream
    49b4:	0e 94 3c 24 	call	0x4878	; 0x4878 <udd_ep_get_job>
    49b8:	8c 01       	movw	r16, r24
=======
    461a:	0e 94 6f 22 	call	0x44de	; 0x44de <udd_ep_get_job>
    461e:	8c 01       	movw	r16, r24
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    49ba:	cd 2d       	mov	r28, r13
    49bc:	cf 70       	andi	r28, 0x0F	; 15
    49be:	d0 e0       	ldi	r29, 0x00	; 0
    49c0:	ce 01       	movw	r24, r28
    49c2:	88 0f       	add	r24, r24
    49c4:	99 1f       	adc	r25, r25
    49c6:	cd 2d       	mov	r28, r13
    49c8:	0d 2c       	mov	r0, r13
    49ca:	00 0c       	add	r0, r0
    49cc:	dd 0b       	sbc	r29, r29
    49ce:	cc 27       	eor	r28, r28
    49d0:	dd 0f       	add	r29, r29
    49d2:	cc 1f       	adc	r28, r28
    49d4:	dd 27       	eor	r29, r29
    49d6:	c8 0f       	add	r28, r24
    49d8:	d9 1f       	adc	r29, r25
    49da:	ce 01       	movw	r24, r28
    49dc:	88 0f       	add	r24, r24
    49de:	99 1f       	adc	r25, r25
    49e0:	88 0f       	add	r24, r24
    49e2:	99 1f       	adc	r25, r25
    49e4:	88 0f       	add	r24, r24
    49e6:	99 1f       	adc	r25, r25
    49e8:	9c 01       	movw	r18, r24
    49ea:	20 5f       	subi	r18, 0xF0	; 240
    49ec:	39 4d       	sbci	r19, 0xD9	; 217
    49ee:	79 01       	movw	r14, r18
=======
    4620:	cd 2d       	mov	r28, r13
    4622:	cf 70       	andi	r28, 0x0F	; 15
    4624:	d0 e0       	ldi	r29, 0x00	; 0
    4626:	ce 01       	movw	r24, r28
    4628:	88 0f       	add	r24, r24
    462a:	99 1f       	adc	r25, r25
    462c:	cd 2d       	mov	r28, r13
    462e:	0d 2c       	mov	r0, r13
    4630:	00 0c       	add	r0, r0
    4632:	dd 0b       	sbc	r29, r29
    4634:	cc 27       	eor	r28, r28
    4636:	dd 0f       	add	r29, r29
    4638:	cc 1f       	adc	r28, r28
    463a:	dd 27       	eor	r29, r29
    463c:	c8 0f       	add	r28, r24
    463e:	d9 1f       	adc	r29, r25
    4640:	ce 01       	movw	r24, r28
    4642:	88 0f       	add	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	88 0f       	add	r24, r24
    4648:	99 1f       	adc	r25, r25
    464a:	88 0f       	add	r24, r24
    464c:	99 1f       	adc	r25, r25
    464e:	9c 01       	movw	r18, r24
    4650:	20 5e       	subi	r18, 0xE0	; 224
    4652:	39 4d       	sbci	r19, 0xD9	; 217
    4654:	79 01       	movw	r14, r18
>>>>>>> Stashed changes
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	ep_size = udd_ep_get_size(ep_ctrl);
<<<<<<< Updated upstream
    49f0:	c9 01       	movw	r24, r18
    49f2:	0e 94 13 24 	call	0x4826	; 0x4826 <udd_ep_get_size>
    49f6:	4c 01       	movw	r8, r24

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    49f8:	dd 20       	and	r13, r13
    49fa:	0c f0       	brlt	.+2      	; 0x49fe <udd_ep_trans_complet+0x62>
    49fc:	72 c0       	rjmp	.+228    	; 0x4ae2 <udd_ep_trans_complet+0x146>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    49fe:	fe 01       	movw	r30, r28
    4a00:	ee 0f       	add	r30, r30
    4a02:	ff 1f       	adc	r31, r31
    4a04:	ee 0f       	add	r30, r30
    4a06:	ff 1f       	adc	r31, r31
    4a08:	ee 0f       	add	r30, r30
    4a0a:	ff 1f       	adc	r31, r31
    4a0c:	e0 50       	subi	r30, 0x00	; 0
    4a0e:	fa 4d       	sbci	r31, 0xDA	; 218
    4a10:	26 89       	ldd	r18, Z+22	; 0x16
    4a12:	37 89       	ldd	r19, Z+23	; 0x17

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    4a14:	d8 01       	movw	r26, r16
    4a16:	15 96       	adiw	r26, 0x05	; 5
    4a18:	8d 91       	ld	r24, X+
    4a1a:	9c 91       	ld	r25, X
    4a1c:	16 97       	sbiw	r26, 0x06	; 6
    4a1e:	82 0f       	add	r24, r18
    4a20:	93 1f       	adc	r25, r19
    4a22:	15 96       	adiw	r26, 0x05	; 5
    4a24:	8d 93       	st	X+, r24
    4a26:	9c 93       	st	X, r25
    4a28:	16 97       	sbiw	r26, 0x06	; 6

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    4a2a:	13 96       	adiw	r26, 0x03	; 3
    4a2c:	2d 91       	ld	r18, X+
    4a2e:	3c 91       	ld	r19, X
    4a30:	14 97       	sbiw	r26, 0x04	; 4
    4a32:	82 17       	cp	r24, r18
    4a34:	93 07       	cpc	r25, r19
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <udd_ep_trans_complet+0x9e>
    4a38:	3e c0       	rjmp	.+124    	; 0x4ab6 <udd_ep_trans_complet+0x11a>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4a3a:	28 1b       	sub	r18, r24
    4a3c:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4a3e:	21 15       	cp	r18, r1
    4a40:	b4 e0       	ldi	r27, 0x04	; 4
    4a42:	3b 07       	cpc	r19, r27
    4a44:	40 f0       	brcs	.+16     	; 0x4a56 <udd_ep_trans_complet+0xba>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4a46:	2f ef       	ldi	r18, 0xFF	; 255
    4a48:	33 e0       	ldi	r19, 0x03	; 3
    4a4a:	c9 01       	movw	r24, r18
    4a4c:	b4 01       	movw	r22, r8
    4a4e:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    4a52:	28 1b       	sub	r18, r24
    4a54:	39 0b       	sbc	r19, r25
=======
    4656:	c9 01       	movw	r24, r18
    4658:	0e 94 46 22 	call	0x448c	; 0x448c <udd_ep_get_size>
    465c:	4c 01       	movw	r8, r24

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    465e:	dd 20       	and	r13, r13
    4660:	0c f0       	brlt	.+2      	; 0x4664 <udd_ep_trans_complet+0x62>
    4662:	72 c0       	rjmp	.+228    	; 0x4748 <udd_ep_trans_complet+0x146>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    4664:	fe 01       	movw	r30, r28
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	ee 0f       	add	r30, r30
    466c:	ff 1f       	adc	r31, r31
    466e:	ee 0f       	add	r30, r30
    4670:	ff 1f       	adc	r31, r31
    4672:	e0 5f       	subi	r30, 0xF0	; 240
    4674:	f9 4d       	sbci	r31, 0xD9	; 217
    4676:	26 89       	ldd	r18, Z+22	; 0x16
    4678:	37 89       	ldd	r19, Z+23	; 0x17

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    467a:	d8 01       	movw	r26, r16
    467c:	15 96       	adiw	r26, 0x05	; 5
    467e:	8d 91       	ld	r24, X+
    4680:	9c 91       	ld	r25, X
    4682:	16 97       	sbiw	r26, 0x06	; 6
    4684:	82 0f       	add	r24, r18
    4686:	93 1f       	adc	r25, r19
    4688:	15 96       	adiw	r26, 0x05	; 5
    468a:	8d 93       	st	X+, r24
    468c:	9c 93       	st	X, r25
    468e:	16 97       	sbiw	r26, 0x06	; 6

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    4690:	13 96       	adiw	r26, 0x03	; 3
    4692:	2d 91       	ld	r18, X+
    4694:	3c 91       	ld	r19, X
    4696:	14 97       	sbiw	r26, 0x04	; 4
    4698:	82 17       	cp	r24, r18
    469a:	93 07       	cpc	r25, r19
    469c:	09 f4       	brne	.+2      	; 0x46a0 <udd_ep_trans_complet+0x9e>
    469e:	3e c0       	rjmp	.+124    	; 0x471c <udd_ep_trans_complet+0x11a>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    46a0:	28 1b       	sub	r18, r24
    46a2:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    46a4:	21 15       	cp	r18, r1
    46a6:	b4 e0       	ldi	r27, 0x04	; 4
    46a8:	3b 07       	cpc	r19, r27
    46aa:	40 f0       	brcs	.+16     	; 0x46bc <udd_ep_trans_complet+0xba>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    46ac:	2f ef       	ldi	r18, 0xFF	; 255
    46ae:	33 e0       	ldi	r19, 0x03	; 3
    46b0:	c9 01       	movw	r24, r18
    46b2:	b4 01       	movw	r22, r8
    46b4:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    46b8:	28 1b       	sub	r18, r24
    46ba:	39 0b       	sbc	r19, r25
>>>>>>> Stashed changes
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
				&& (0==(next_trans % ep_size));
<<<<<<< Updated upstream
    4a56:	f8 01       	movw	r30, r16
    4a58:	80 81       	ld	r24, Z
    4a5a:	81 ff       	sbrs	r24, 1
    4a5c:	0a c0       	rjmp	.+20     	; 0x4a72 <udd_ep_trans_complet+0xd6>
    4a5e:	c9 01       	movw	r24, r18
    4a60:	b4 01       	movw	r22, r8
    4a62:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    4a66:	41 e0       	ldi	r20, 0x01	; 1
    4a68:	89 2b       	or	r24, r25
    4a6a:	09 f0       	breq	.+2      	; 0x4a6e <udd_ep_trans_complet+0xd2>
    4a6c:	40 e0       	ldi	r20, 0x00	; 0
    4a6e:	84 2f       	mov	r24, r20
    4a70:	01 c0       	rjmp	.+2      	; 0x4a74 <udd_ep_trans_complet+0xd8>
    4a72:	80 e0       	ldi	r24, 0x00	; 0
=======
    46bc:	f8 01       	movw	r30, r16
    46be:	80 81       	ld	r24, Z
    46c0:	81 ff       	sbrs	r24, 1
    46c2:	0a c0       	rjmp	.+20     	; 0x46d8 <udd_ep_trans_complet+0xd6>
    46c4:	c9 01       	movw	r24, r18
    46c6:	b4 01       	movw	r22, r8
    46c8:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    46cc:	41 e0       	ldi	r20, 0x01	; 1
    46ce:	89 2b       	or	r24, r25
    46d0:	09 f0       	breq	.+2      	; 0x46d4 <udd_ep_trans_complet+0xd2>
    46d2:	40 e0       	ldi	r20, 0x00	; 0
    46d4:	84 2f       	mov	r24, r20
    46d6:	01 c0       	rjmp	.+2      	; 0x46da <udd_ep_trans_complet+0xd8>
    46d8:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
<<<<<<< Updated upstream
    4a74:	d8 01       	movw	r26, r16
    4a76:	9c 91       	ld	r25, X
    4a78:	80 fb       	bst	r24, 0
    4a7a:	91 f9       	bld	r25, 1
    4a7c:	9c 93       	st	X, r25
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4a7e:	cc 0f       	add	r28, r28
    4a80:	dd 1f       	adc	r29, r29
    4a82:	cc 0f       	add	r28, r28
    4a84:	dd 1f       	adc	r29, r29
    4a86:	cc 0f       	add	r28, r28
    4a88:	dd 1f       	adc	r29, r29
    4a8a:	c0 50       	subi	r28, 0x00	; 0
    4a8c:	da 4d       	sbci	r29, 0xDA	; 218
    4a8e:	1e 8a       	std	Y+22, r1	; 0x16
    4a90:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    4a92:	2a 8b       	std	Y+18, r18	; 0x12
    4a94:	3b 8b       	std	Y+19, r19	; 0x13
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    4a96:	11 96       	adiw	r26, 0x01	; 1
    4a98:	2d 91       	ld	r18, X+
    4a9a:	3c 91       	ld	r19, X
    4a9c:	12 97       	sbiw	r26, 0x02	; 2
    4a9e:	15 96       	adiw	r26, 0x05	; 5
    4aa0:	8d 91       	ld	r24, X+
    4aa2:	9c 91       	ld	r25, X
    4aa4:	16 97       	sbiw	r26, 0x06	; 6
    4aa6:	82 0f       	add	r24, r18
    4aa8:	93 1f       	adc	r25, r19
    4aaa:	8c 8b       	std	Y+20, r24	; 0x14
    4aac:	9d 8b       	std	Y+21, r25	; 0x15
			udd_endpoint_clear_NACK0(ep_ctrl);
    4aae:	f7 01       	movw	r30, r14
    4ab0:	02 e0       	ldi	r16, 0x02	; 2
    4ab2:	06 93       	lac	Z, r16
			return;
    4ab4:	ca c0       	rjmp	.+404    	; 0x4c4a <udd_ep_trans_complet+0x2ae>
=======
    46da:	d8 01       	movw	r26, r16
    46dc:	9c 91       	ld	r25, X
    46de:	80 fb       	bst	r24, 0
    46e0:	91 f9       	bld	r25, 1
    46e2:	9c 93       	st	X, r25
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    46e4:	cc 0f       	add	r28, r28
    46e6:	dd 1f       	adc	r29, r29
    46e8:	cc 0f       	add	r28, r28
    46ea:	dd 1f       	adc	r29, r29
    46ec:	cc 0f       	add	r28, r28
    46ee:	dd 1f       	adc	r29, r29
    46f0:	c0 5f       	subi	r28, 0xF0	; 240
    46f2:	d9 4d       	sbci	r29, 0xD9	; 217
    46f4:	1e 8a       	std	Y+22, r1	; 0x16
    46f6:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    46f8:	2a 8b       	std	Y+18, r18	; 0x12
    46fa:	3b 8b       	std	Y+19, r19	; 0x13
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    46fc:	11 96       	adiw	r26, 0x01	; 1
    46fe:	2d 91       	ld	r18, X+
    4700:	3c 91       	ld	r19, X
    4702:	12 97       	sbiw	r26, 0x02	; 2
    4704:	15 96       	adiw	r26, 0x05	; 5
    4706:	8d 91       	ld	r24, X+
    4708:	9c 91       	ld	r25, X
    470a:	16 97       	sbiw	r26, 0x06	; 6
    470c:	82 0f       	add	r24, r18
    470e:	93 1f       	adc	r25, r19
    4710:	8c 8b       	std	Y+20, r24	; 0x14
    4712:	9d 8b       	std	Y+21, r25	; 0x15
			udd_endpoint_clear_NACK0(ep_ctrl);
    4714:	f7 01       	movw	r30, r14
    4716:	02 e0       	ldi	r16, 0x02	; 2
    4718:	06 93       	lac	Z, r16
			return;
    471a:	ca c0       	rjmp	.+404    	; 0x48b0 <udd_ep_trans_complet+0x2ae>
>>>>>>> Stashed changes
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
<<<<<<< Updated upstream
    4ab6:	d8 01       	movw	r26, r16
    4ab8:	8c 91       	ld	r24, X
    4aba:	81 ff       	sbrs	r24, 1
    4abc:	b3 c0       	rjmp	.+358    	; 0x4c24 <udd_ep_trans_complet+0x288>
			ptr_job->b_shortpacket = false;
    4abe:	8d 7f       	andi	r24, 0xFD	; 253
    4ac0:	8c 93       	st	X, r24
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4ac2:	cc 0f       	add	r28, r28
    4ac4:	dd 1f       	adc	r29, r29
    4ac6:	cc 0f       	add	r28, r28
    4ac8:	dd 1f       	adc	r29, r29
    4aca:	cc 0f       	add	r28, r28
    4acc:	dd 1f       	adc	r29, r29
    4ace:	c0 50       	subi	r28, 0x00	; 0
    4ad0:	da 4d       	sbci	r29, 0xDA	; 218
    4ad2:	1e 8a       	std	Y+22, r1	; 0x16
    4ad4:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    4ad6:	1a 8a       	std	Y+18, r1	; 0x12
    4ad8:	1b 8a       	std	Y+19, r1	; 0x13
			udd_endpoint_clear_NACK0(ep_ctrl);
    4ada:	f7 01       	movw	r30, r14
    4adc:	02 e0       	ldi	r16, 0x02	; 2
    4ade:	06 93       	lac	Z, r16
			return;
    4ae0:	b4 c0       	rjmp	.+360    	; 0x4c4a <udd_ep_trans_complet+0x2ae>
=======
    471c:	d8 01       	movw	r26, r16
    471e:	8c 91       	ld	r24, X
    4720:	81 ff       	sbrs	r24, 1
    4722:	b3 c0       	rjmp	.+358    	; 0x488a <udd_ep_trans_complet+0x288>
			ptr_job->b_shortpacket = false;
    4724:	8d 7f       	andi	r24, 0xFD	; 253
    4726:	8c 93       	st	X, r24
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4728:	cc 0f       	add	r28, r28
    472a:	dd 1f       	adc	r29, r29
    472c:	cc 0f       	add	r28, r28
    472e:	dd 1f       	adc	r29, r29
    4730:	cc 0f       	add	r28, r28
    4732:	dd 1f       	adc	r29, r29
    4734:	c0 5f       	subi	r28, 0xF0	; 240
    4736:	d9 4d       	sbci	r29, 0xD9	; 217
    4738:	1e 8a       	std	Y+22, r1	; 0x16
    473a:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    473c:	1a 8a       	std	Y+18, r1	; 0x12
    473e:	1b 8a       	std	Y+19, r1	; 0x13
			udd_endpoint_clear_NACK0(ep_ctrl);
    4740:	f7 01       	movw	r30, r14
    4742:	02 e0       	ldi	r16, 0x02	; 2
    4744:	06 93       	lac	Z, r16
			return;
    4746:	b4 c0       	rjmp	.+360    	; 0x48b0 <udd_ep_trans_complet+0x2ae>
>>>>>>> Stashed changes
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
<<<<<<< Updated upstream
    4ae2:	fe 01       	movw	r30, r28
    4ae4:	ee 0f       	add	r30, r30
    4ae6:	ff 1f       	adc	r31, r31
    4ae8:	ee 0f       	add	r30, r30
    4aea:	ff 1f       	adc	r31, r31
    4aec:	ee 0f       	add	r30, r30
    4aee:	ff 1f       	adc	r31, r31
    4af0:	e0 50       	subi	r30, 0x00	; 0
    4af2:	fa 4d       	sbci	r31, 0xDA	; 218
    4af4:	a2 88       	ldd	r10, Z+18	; 0x12
    4af6:	b3 88       	ldd	r11, Z+19	; 0x13

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    4af8:	d8 01       	movw	r26, r16
    4afa:	8c 91       	ld	r24, X
    4afc:	82 ff       	sbrs	r24, 2
    4afe:	1b c0       	rjmp	.+54     	; 0x4b36 <udd_ep_trans_complet+0x19a>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    4b00:	11 96       	adiw	r26, 0x01	; 1
    4b02:	ed 91       	ld	r30, X+
    4b04:	fc 91       	ld	r31, X
    4b06:	12 97       	sbiw	r26, 0x02	; 2
    4b08:	15 96       	adiw	r26, 0x05	; 5
    4b0a:	2d 91       	ld	r18, X+
    4b0c:	3c 91       	ld	r19, X
    4b0e:	16 97       	sbiw	r26, 0x06	; 6
    4b10:	13 96       	adiw	r26, 0x03	; 3
    4b12:	8d 91       	ld	r24, X+
    4b14:	9c 91       	ld	r25, X
    4b16:	14 97       	sbiw	r26, 0x04	; 4
    4b18:	b4 01       	movw	r22, r8
    4b1a:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    4b1e:	b0 e4       	ldi	r27, 0x40	; 64
    4b20:	db 9e       	mul	r13, r27
    4b22:	b0 01       	movw	r22, r0
    4b24:	11 24       	eor	r1, r1
    4b26:	67 53       	subi	r22, 0x37	; 55
    4b28:	7b 4d       	sbci	r23, 0xDB	; 219
    4b2a:	ac 01       	movw	r20, r24
    4b2c:	cf 01       	movw	r24, r30
    4b2e:	82 0f       	add	r24, r18
    4b30:	93 1f       	adc	r25, r19
    4b32:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
=======
    4748:	fe 01       	movw	r30, r28
    474a:	ee 0f       	add	r30, r30
    474c:	ff 1f       	adc	r31, r31
    474e:	ee 0f       	add	r30, r30
    4750:	ff 1f       	adc	r31, r31
    4752:	ee 0f       	add	r30, r30
    4754:	ff 1f       	adc	r31, r31
    4756:	e0 5f       	subi	r30, 0xF0	; 240
    4758:	f9 4d       	sbci	r31, 0xD9	; 217
    475a:	a2 88       	ldd	r10, Z+18	; 0x12
    475c:	b3 88       	ldd	r11, Z+19	; 0x13

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    475e:	d8 01       	movw	r26, r16
    4760:	8c 91       	ld	r24, X
    4762:	82 ff       	sbrs	r24, 2
    4764:	1b c0       	rjmp	.+54     	; 0x479c <udd_ep_trans_complet+0x19a>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    4766:	11 96       	adiw	r26, 0x01	; 1
    4768:	ed 91       	ld	r30, X+
    476a:	fc 91       	ld	r31, X
    476c:	12 97       	sbiw	r26, 0x02	; 2
    476e:	15 96       	adiw	r26, 0x05	; 5
    4770:	2d 91       	ld	r18, X+
    4772:	3c 91       	ld	r19, X
    4774:	16 97       	sbiw	r26, 0x06	; 6
    4776:	13 96       	adiw	r26, 0x03	; 3
    4778:	8d 91       	ld	r24, X+
    477a:	9c 91       	ld	r25, X
    477c:	14 97       	sbiw	r26, 0x04	; 4
    477e:	b4 01       	movw	r22, r8
    4780:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    4784:	b0 e4       	ldi	r27, 0x40	; 64
    4786:	db 9e       	mul	r13, r27
    4788:	b0 01       	movw	r22, r0
    478a:	11 24       	eor	r1, r1
    478c:	67 52       	subi	r22, 0x27	; 39
    478e:	7b 4d       	sbci	r23, 0xDB	; 219
    4790:	ac 01       	movw	r20, r24
    4792:	cf 01       	movw	r24, r30
    4794:	82 0f       	add	r24, r18
    4796:	93 1f       	adc	r25, r19
    4798:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <memcpy>
>>>>>>> Stashed changes
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
<<<<<<< Updated upstream
    4b36:	f8 01       	movw	r30, r16
    4b38:	25 81       	ldd	r18, Z+5	; 0x05
    4b3a:	36 81       	ldd	r19, Z+6	; 0x06
    4b3c:	2a 0d       	add	r18, r10
    4b3e:	3b 1d       	adc	r19, r11
    4b40:	25 83       	std	Z+5, r18	; 0x05
    4b42:	36 83       	std	Z+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    4b44:	83 81       	ldd	r24, Z+3	; 0x03
    4b46:	94 81       	ldd	r25, Z+4	; 0x04
    4b48:	82 17       	cp	r24, r18
    4b4a:	93 07       	cpc	r25, r19
    4b4c:	68 f4       	brcc	.+26     	; 0x4b68 <udd_ep_trans_complet+0x1cc>
			ptr_job->nb_trans = ptr_job->buf_size;
    4b4e:	85 83       	std	Z+5, r24	; 0x05
    4b50:	96 83       	std	Z+6, r25	; 0x06
=======
    479c:	f8 01       	movw	r30, r16
    479e:	25 81       	ldd	r18, Z+5	; 0x05
    47a0:	36 81       	ldd	r19, Z+6	; 0x06
    47a2:	2a 0d       	add	r18, r10
    47a4:	3b 1d       	adc	r19, r11
    47a6:	25 83       	std	Z+5, r18	; 0x05
    47a8:	36 83       	std	Z+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    47aa:	83 81       	ldd	r24, Z+3	; 0x03
    47ac:	94 81       	ldd	r25, Z+4	; 0x04
    47ae:	82 17       	cp	r24, r18
    47b0:	93 07       	cpc	r25, r19
    47b2:	68 f4       	brcc	.+26     	; 0x47ce <udd_ep_trans_complet+0x1cc>
			ptr_job->nb_trans = ptr_job->buf_size;
    47b4:	85 83       	std	Z+5, r24	; 0x05
    47b6:	96 83       	std	Z+6, r25	; 0x06
>>>>>>> Stashed changes
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
<<<<<<< Updated upstream
    4b52:	cc 0f       	add	r28, r28
    4b54:	dd 1f       	adc	r29, r29
    4b56:	cc 0f       	add	r28, r28
    4b58:	dd 1f       	adc	r29, r29
    4b5a:	cc 0f       	add	r28, r28
    4b5c:	dd 1f       	adc	r29, r29
    4b5e:	c0 50       	subi	r28, 0x00	; 0
    4b60:	da 4d       	sbci	r29, 0xDA	; 218
    4b62:	8e 89       	ldd	r24, Y+22	; 0x16
    4b64:	9f 89       	ldd	r25, Y+23	; 0x17
    4b66:	5e c0       	rjmp	.+188    	; 0x4c24 <udd_ep_trans_complet+0x288>
    4b68:	fe 01       	movw	r30, r28
    4b6a:	ee 0f       	add	r30, r30
    4b6c:	ff 1f       	adc	r31, r31
    4b6e:	ee 0f       	add	r30, r30
    4b70:	ff 1f       	adc	r31, r31
    4b72:	ee 0f       	add	r30, r30
    4b74:	ff 1f       	adc	r31, r31
    4b76:	e0 50       	subi	r30, 0x00	; 0
    4b78:	fa 4d       	sbci	r31, 0xDA	; 218
    4b7a:	46 89       	ldd	r20, Z+22	; 0x16
    4b7c:	57 89       	ldd	r21, Z+23	; 0x17
    4b7e:	a4 16       	cp	r10, r20
    4b80:	b5 06       	cpc	r11, r21
    4b82:	09 f0       	breq	.+2      	; 0x4b86 <udd_ep_trans_complet+0x1ea>
    4b84:	4f c0       	rjmp	.+158    	; 0x4c24 <udd_ep_trans_complet+0x288>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    4b86:	28 17       	cp	r18, r24
    4b88:	39 07       	cpc	r19, r25
    4b8a:	09 f4       	brne	.+2      	; 0x4b8e <udd_ep_trans_complet+0x1f2>
    4b8c:	4b c0       	rjmp	.+150    	; 0x4c24 <udd_ep_trans_complet+0x288>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4b8e:	ac 01       	movw	r20, r24
    4b90:	42 1b       	sub	r20, r18
    4b92:	53 0b       	sbc	r21, r19
    4b94:	9a 01       	movw	r18, r20
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4b96:	21 15       	cp	r18, r1
    4b98:	54 e0       	ldi	r21, 0x04	; 4
    4b9a:	35 07       	cpc	r19, r21
    4b9c:	48 f0       	brcs	.+18     	; 0x4bb0 <udd_ep_trans_complet+0x214>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    4b9e:	2f ef       	ldi	r18, 0xFF	; 255
    4ba0:	33 e0       	ldi	r19, 0x03	; 3
    4ba2:	c9 01       	movw	r24, r18
    4ba4:	b4 01       	movw	r22, r8
    4ba6:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    4baa:	28 1b       	sub	r18, r24
    4bac:	39 0b       	sbc	r19, r25
    4bae:	06 c0       	rjmp	.+12     	; 0x4bbc <udd_ep_trans_complet+0x220>
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    4bb0:	c9 01       	movw	r24, r18
    4bb2:	b4 01       	movw	r22, r8
    4bb4:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    4bb8:	28 1b       	sub	r18, r24
    4bba:	39 0b       	sbc	r19, r25
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    4bbc:	fe 01       	movw	r30, r28
    4bbe:	ee 0f       	add	r30, r30
    4bc0:	ff 1f       	adc	r31, r31
    4bc2:	ee 0f       	add	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	ee 0f       	add	r30, r30
    4bc8:	ff 1f       	adc	r31, r31
    4bca:	e0 50       	subi	r30, 0x00	; 0
    4bcc:	fa 4d       	sbci	r31, 0xDA	; 218
    4bce:	12 8a       	std	Z+18, r1	; 0x12
    4bd0:	13 8a       	std	Z+19, r1	; 0x13
			if (next_trans < ep_size) {
    4bd2:	28 15       	cp	r18, r8
    4bd4:	39 05       	cpc	r19, r9
    4bd6:	78 f4       	brcc	.+30     	; 0x4bf6 <udd_ep_trans_complet+0x25a>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    4bd8:	d8 01       	movw	r26, r16
    4bda:	8c 91       	ld	r24, X
    4bdc:	84 60       	ori	r24, 0x04	; 4
    4bde:	8c 93       	st	X, r24
				udd_endpoint_set_buf( ep_ctrl,
    4be0:	b0 e4       	ldi	r27, 0x40	; 64
    4be2:	db 9e       	mul	r13, r27
    4be4:	c0 01       	movw	r24, r0
    4be6:	11 24       	eor	r1, r1
    4be8:	87 53       	subi	r24, 0x37	; 55
    4bea:	9b 4d       	sbci	r25, 0xDB	; 219
    4bec:	84 8b       	std	Z+20, r24	; 0x14
    4bee:	95 8b       	std	Z+21, r25	; 0x15
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    4bf0:	86 8a       	std	Z+22, r8	; 0x16
    4bf2:	97 8a       	std	Z+23, r9	; 0x17
    4bf4:	13 c0       	rjmp	.+38     	; 0x4c1c <udd_ep_trans_complet+0x280>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    4bf6:	f8 01       	movw	r30, r16
    4bf8:	41 81       	ldd	r20, Z+1	; 0x01
    4bfa:	52 81       	ldd	r21, Z+2	; 0x02
    4bfc:	85 81       	ldd	r24, Z+5	; 0x05
    4bfe:	96 81       	ldd	r25, Z+6	; 0x06
    4c00:	84 0f       	add	r24, r20
    4c02:	95 1f       	adc	r25, r21
    4c04:	cc 0f       	add	r28, r28
    4c06:	dd 1f       	adc	r29, r29
    4c08:	cc 0f       	add	r28, r28
    4c0a:	dd 1f       	adc	r29, r29
    4c0c:	cc 0f       	add	r28, r28
    4c0e:	dd 1f       	adc	r29, r29
    4c10:	c0 50       	subi	r28, 0x00	; 0
    4c12:	da 4d       	sbci	r29, 0xDA	; 218
    4c14:	8c 8b       	std	Y+20, r24	; 0x14
    4c16:	9d 8b       	std	Y+21, r25	; 0x15
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    4c18:	2e 8b       	std	Y+22, r18	; 0x16
    4c1a:	3f 8b       	std	Y+23, r19	; 0x17
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    4c1c:	f7 01       	movw	r30, r14
    4c1e:	02 e0       	ldi	r16, 0x02	; 2
    4c20:	06 93       	lac	Z, r16
			return;
    4c22:	13 c0       	rjmp	.+38     	; 0x4c4a <udd_ep_trans_complet+0x2ae>
=======
    47b8:	cc 0f       	add	r28, r28
    47ba:	dd 1f       	adc	r29, r29
    47bc:	cc 0f       	add	r28, r28
    47be:	dd 1f       	adc	r29, r29
    47c0:	cc 0f       	add	r28, r28
    47c2:	dd 1f       	adc	r29, r29
    47c4:	c0 5f       	subi	r28, 0xF0	; 240
    47c6:	d9 4d       	sbci	r29, 0xD9	; 217
    47c8:	8e 89       	ldd	r24, Y+22	; 0x16
    47ca:	9f 89       	ldd	r25, Y+23	; 0x17
    47cc:	5e c0       	rjmp	.+188    	; 0x488a <udd_ep_trans_complet+0x288>
    47ce:	fe 01       	movw	r30, r28
    47d0:	ee 0f       	add	r30, r30
    47d2:	ff 1f       	adc	r31, r31
    47d4:	ee 0f       	add	r30, r30
    47d6:	ff 1f       	adc	r31, r31
    47d8:	ee 0f       	add	r30, r30
    47da:	ff 1f       	adc	r31, r31
    47dc:	e0 5f       	subi	r30, 0xF0	; 240
    47de:	f9 4d       	sbci	r31, 0xD9	; 217
    47e0:	46 89       	ldd	r20, Z+22	; 0x16
    47e2:	57 89       	ldd	r21, Z+23	; 0x17
    47e4:	a4 16       	cp	r10, r20
    47e6:	b5 06       	cpc	r11, r21
    47e8:	09 f0       	breq	.+2      	; 0x47ec <udd_ep_trans_complet+0x1ea>
    47ea:	4f c0       	rjmp	.+158    	; 0x488a <udd_ep_trans_complet+0x288>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    47ec:	28 17       	cp	r18, r24
    47ee:	39 07       	cpc	r19, r25
    47f0:	09 f4       	brne	.+2      	; 0x47f4 <udd_ep_trans_complet+0x1f2>
    47f2:	4b c0       	rjmp	.+150    	; 0x488a <udd_ep_trans_complet+0x288>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    47f4:	ac 01       	movw	r20, r24
    47f6:	42 1b       	sub	r20, r18
    47f8:	53 0b       	sbc	r21, r19
    47fa:	9a 01       	movw	r18, r20
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    47fc:	21 15       	cp	r18, r1
    47fe:	54 e0       	ldi	r21, 0x04	; 4
    4800:	35 07       	cpc	r19, r21
    4802:	48 f0       	brcs	.+18     	; 0x4816 <udd_ep_trans_complet+0x214>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    4804:	2f ef       	ldi	r18, 0xFF	; 255
    4806:	33 e0       	ldi	r19, 0x03	; 3
    4808:	c9 01       	movw	r24, r18
    480a:	b4 01       	movw	r22, r8
    480c:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    4810:	28 1b       	sub	r18, r24
    4812:	39 0b       	sbc	r19, r25
    4814:	06 c0       	rjmp	.+12     	; 0x4822 <udd_ep_trans_complet+0x220>
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    4816:	c9 01       	movw	r24, r18
    4818:	b4 01       	movw	r22, r8
    481a:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    481e:	28 1b       	sub	r18, r24
    4820:	39 0b       	sbc	r19, r25
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    4822:	fe 01       	movw	r30, r28
    4824:	ee 0f       	add	r30, r30
    4826:	ff 1f       	adc	r31, r31
    4828:	ee 0f       	add	r30, r30
    482a:	ff 1f       	adc	r31, r31
    482c:	ee 0f       	add	r30, r30
    482e:	ff 1f       	adc	r31, r31
    4830:	e0 5f       	subi	r30, 0xF0	; 240
    4832:	f9 4d       	sbci	r31, 0xD9	; 217
    4834:	12 8a       	std	Z+18, r1	; 0x12
    4836:	13 8a       	std	Z+19, r1	; 0x13
			if (next_trans < ep_size) {
    4838:	28 15       	cp	r18, r8
    483a:	39 05       	cpc	r19, r9
    483c:	78 f4       	brcc	.+30     	; 0x485c <udd_ep_trans_complet+0x25a>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    483e:	d8 01       	movw	r26, r16
    4840:	8c 91       	ld	r24, X
    4842:	84 60       	ori	r24, 0x04	; 4
    4844:	8c 93       	st	X, r24
				udd_endpoint_set_buf( ep_ctrl,
    4846:	b0 e4       	ldi	r27, 0x40	; 64
    4848:	db 9e       	mul	r13, r27
    484a:	c0 01       	movw	r24, r0
    484c:	11 24       	eor	r1, r1
    484e:	87 52       	subi	r24, 0x27	; 39
    4850:	9b 4d       	sbci	r25, 0xDB	; 219
    4852:	84 8b       	std	Z+20, r24	; 0x14
    4854:	95 8b       	std	Z+21, r25	; 0x15
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    4856:	86 8a       	std	Z+22, r8	; 0x16
    4858:	97 8a       	std	Z+23, r9	; 0x17
    485a:	13 c0       	rjmp	.+38     	; 0x4882 <udd_ep_trans_complet+0x280>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    485c:	f8 01       	movw	r30, r16
    485e:	41 81       	ldd	r20, Z+1	; 0x01
    4860:	52 81       	ldd	r21, Z+2	; 0x02
    4862:	85 81       	ldd	r24, Z+5	; 0x05
    4864:	96 81       	ldd	r25, Z+6	; 0x06
    4866:	84 0f       	add	r24, r20
    4868:	95 1f       	adc	r25, r21
    486a:	cc 0f       	add	r28, r28
    486c:	dd 1f       	adc	r29, r29
    486e:	cc 0f       	add	r28, r28
    4870:	dd 1f       	adc	r29, r29
    4872:	cc 0f       	add	r28, r28
    4874:	dd 1f       	adc	r29, r29
    4876:	c0 5f       	subi	r28, 0xF0	; 240
    4878:	d9 4d       	sbci	r29, 0xD9	; 217
    487a:	8c 8b       	std	Y+20, r24	; 0x14
    487c:	9d 8b       	std	Y+21, r25	; 0x15
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    487e:	2e 8b       	std	Y+22, r18	; 0x16
    4880:	3f 8b       	std	Y+23, r19	; 0x17
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    4882:	f7 01       	movw	r30, r14
    4884:	02 e0       	ldi	r16, 0x02	; 2
    4886:	06 93       	lac	Z, r16
			return;
    4888:	13 c0       	rjmp	.+38     	; 0x48b0 <udd_ep_trans_complet+0x2ae>
>>>>>>> Stashed changes
		}
	}

	// Job complete then call callback
	if (ptr_job->busy) {
<<<<<<< Updated upstream
    4c24:	d8 01       	movw	r26, r16
    4c26:	8c 91       	ld	r24, X
    4c28:	80 ff       	sbrs	r24, 0
    4c2a:	0f c0       	rjmp	.+30     	; 0x4c4a <udd_ep_trans_complet+0x2ae>
		ptr_job->busy = false;
    4c2c:	8e 7f       	andi	r24, 0xFE	; 254
    4c2e:	8c 93       	st	X, r24
		if (NULL != ptr_job->call_trans) {
    4c30:	17 96       	adiw	r26, 0x07	; 7
    4c32:	ed 91       	ld	r30, X+
    4c34:	fc 91       	ld	r31, X
    4c36:	18 97       	sbiw	r26, 0x08	; 8
    4c38:	30 97       	sbiw	r30, 0x00	; 0
    4c3a:	39 f0       	breq	.+14     	; 0x4c4a <udd_ep_trans_complet+0x2ae>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    4c3c:	15 96       	adiw	r26, 0x05	; 5
    4c3e:	6d 91       	ld	r22, X+
    4c40:	7c 91       	ld	r23, X
    4c42:	16 97       	sbiw	r26, 0x06	; 6
    4c44:	4d 2d       	mov	r20, r13
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	19 95       	eicall
=======
    488a:	d8 01       	movw	r26, r16
    488c:	8c 91       	ld	r24, X
    488e:	80 ff       	sbrs	r24, 0
    4890:	0f c0       	rjmp	.+30     	; 0x48b0 <udd_ep_trans_complet+0x2ae>
		ptr_job->busy = false;
    4892:	8e 7f       	andi	r24, 0xFE	; 254
    4894:	8c 93       	st	X, r24
		if (NULL != ptr_job->call_trans) {
    4896:	17 96       	adiw	r26, 0x07	; 7
    4898:	ed 91       	ld	r30, X+
    489a:	fc 91       	ld	r31, X
    489c:	18 97       	sbiw	r26, 0x08	; 8
    489e:	30 97       	sbiw	r30, 0x00	; 0
    48a0:	39 f0       	breq	.+14     	; 0x48b0 <udd_ep_trans_complet+0x2ae>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    48a2:	15 96       	adiw	r26, 0x05	; 5
    48a4:	6d 91       	ld	r22, X+
    48a6:	7c 91       	ld	r23, X
    48a8:	16 97       	sbiw	r26, 0x06	; 6
    48aa:	4d 2d       	mov	r20, r13
    48ac:	80 e0       	ldi	r24, 0x00	; 0
    48ae:	19 95       	eicall
>>>>>>> Stashed changes
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
}
<<<<<<< Updated upstream
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	ff 90       	pop	r15
    4c54:	ef 90       	pop	r14
    4c56:	df 90       	pop	r13
    4c58:	bf 90       	pop	r11
    4c5a:	af 90       	pop	r10
    4c5c:	9f 90       	pop	r9
    4c5e:	8f 90       	pop	r8
    4c60:	08 95       	ret

00004c62 <udd_disable>:
=======
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	ff 90       	pop	r15
    48ba:	ef 90       	pop	r14
    48bc:	df 90       	pop	r13
    48be:	bf 90       	pop	r11
    48c0:	af 90       	pop	r10
    48c2:	9f 90       	pop	r9
    48c4:	8f 90       	pop	r8
    48c6:	08 95       	ret

000048c8 <udd_disable>:
>>>>>>> Stashed changes
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
<<<<<<< Updated upstream
    4c62:	1f 93       	push	r17
    4c64:	cf 93       	push	r28
    4c66:	df 93       	push	r29
    4c68:	1f 92       	push	r1
    4c6a:	1f 92       	push	r1
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
=======
    48c8:	1f 93       	push	r17
    48ca:	cf 93       	push	r28
    48cc:	df 93       	push	r29
    48ce:	1f 92       	push	r1
    48d0:	1f 92       	push	r1
    48d2:	cd b7       	in	r28, 0x3d	; 61
    48d4:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    4c70:	8f b7       	in	r24, 0x3f	; 63
    4c72:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c74:	f8 94       	cli
	return flags;
    4c76:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();
	udd_detach_device();
    4c78:	e1 ec       	ldi	r30, 0xC1	; 193
    4c7a:	f4 e0       	ldi	r31, 0x04	; 4
    4c7c:	80 81       	ld	r24, Z
    4c7e:	8e 7f       	andi	r24, 0xFE	; 254
    4c80:	80 83       	st	Z, r24
	// Disable interface
	USB_CTRLA = 0;
    4c82:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	USB_CTRLB = 0;
    4c86:	10 82       	st	Z, r1
	sysclk_disable_usb();
    4c88:	0e 94 8d 2c 	call	0x591a	; 0x591a <sysclk_disable_usb>
	udd_sleep_mode(false);
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	0e 94 24 23 	call	0x4648	; 0x4648 <udd_sleep_mode>
=======
    48d6:	8f b7       	in	r24, 0x3f	; 63
    48d8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    48da:	f8 94       	cli
	return flags;
    48dc:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();
	udd_detach_device();
    48de:	e1 ec       	ldi	r30, 0xC1	; 193
    48e0:	f4 e0       	ldi	r31, 0x04	; 4
    48e2:	80 81       	ld	r24, Z
    48e4:	8e 7f       	andi	r24, 0xFE	; 254
    48e6:	80 83       	st	Z, r24
	// Disable interface
	USB_CTRLA = 0;
    48e8:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	USB_CTRLB = 0;
    48ec:	10 82       	st	Z, r1
	sysclk_disable_usb();
    48ee:	0e 94 c0 2a 	call	0x5580	; 0x5580 <sysclk_disable_usb>
	udd_sleep_mode(false);
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	0e 94 57 21 	call	0x42ae	; 0x42ae <udd_sleep_mode>
>>>>>>> Stashed changes
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
<<<<<<< Updated upstream
    4c92:	80 91 66 26 	lds	r24, 0x2666	; 0x802666 <sleepmgr_locks+0x5>
    4c96:	81 11       	cpse	r24, r1
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <udd_disable+0x3a>
    4c9a:	ff cf       	rjmp	.-2      	; 0x4c9a <udd_disable+0x38>
=======
    48f8:	80 91 76 26 	lds	r24, 0x2676	; 0x802676 <sleepmgr_locks+0x5>
    48fc:	81 11       	cpse	r24, r1
    48fe:	01 c0       	rjmp	.+2      	; 0x4902 <udd_disable+0x3a>
    4900:	ff cf       	rjmp	.-2      	; 0x4900 <udd_disable+0x38>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    4c9c:	8f b7       	in	r24, 0x3f	; 63
    4c9e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4ca0:	f8 94       	cli
	return flags;
    4ca2:	9a 81       	ldd	r25, Y+2	; 0x02
=======
    4902:	8f b7       	in	r24, 0x3f	; 63
    4904:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4906:	f8 94       	cli
	return flags;
    4908:	9a 81       	ldd	r25, Y+2	; 0x02
>>>>>>> Stashed changes
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
<<<<<<< Updated upstream
    4ca4:	e1 e6       	ldi	r30, 0x61	; 97
    4ca6:	f6 e2       	ldi	r31, 0x26	; 38
    4ca8:	85 81       	ldd	r24, Z+5	; 0x05
    4caa:	81 50       	subi	r24, 0x01	; 1
    4cac:	85 83       	std	Z+5, r24	; 0x05
=======
    490a:	e1 e7       	ldi	r30, 0x71	; 113
    490c:	f6 e2       	ldi	r31, 0x26	; 38
    490e:	85 81       	ldd	r24, Z+5	; 0x05
    4910:	81 50       	subi	r24, 0x01	; 1
    4912:	85 83       	std	Z+5, r24	; 0x05
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    4cae:	9f bf       	out	0x3f, r25	; 63
    4cb0:	1f bf       	out	0x3f, r17	; 63
=======
    4914:	9f bf       	out	0x3f, r25	; 63
    4916:	1f bf       	out	0x3f, r17	; 63
>>>>>>> Stashed changes
#ifndef UDD_NO_SLEEP_MGR
	sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif
	cpu_irq_restore(flags);
}
<<<<<<< Updated upstream
    4cb2:	0f 90       	pop	r0
    4cb4:	0f 90       	pop	r0
    4cb6:	df 91       	pop	r29
    4cb8:	cf 91       	pop	r28
    4cba:	1f 91       	pop	r17
    4cbc:	08 95       	ret

00004cbe <udd_include_vbus_monitoring>:
=======
    4918:	0f 90       	pop	r0
    491a:	0f 90       	pop	r0
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	1f 91       	pop	r17
    4922:	08 95       	ret

00004924 <udd_include_vbus_monitoring>:
>>>>>>> Stashed changes

bool udd_include_vbus_monitoring(void)
{
	return false; // No Vbus monitoring
}
<<<<<<< Updated upstream
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	08 95       	ret

00004cc2 <udd_attach>:

void udd_attach(void)
{
    4cc2:	1f 93       	push	r17
    4cc4:	cf 93       	push	r28
    4cc6:	df 93       	push	r29
    4cc8:	1f 92       	push	r1
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
=======
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	08 95       	ret

00004928 <udd_attach>:

void udd_attach(void)
{
    4928:	1f 93       	push	r17
    492a:	cf 93       	push	r28
    492c:	df 93       	push	r29
    492e:	1f 92       	push	r1
    4930:	cd b7       	in	r28, 0x3d	; 61
    4932:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    4cce:	8f b7       	in	r24, 0x3f	; 63
    4cd0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4cd2:	f8 94       	cli
	return flags;
    4cd4:	19 81       	ldd	r17, Y+1	; 0x01
=======
    4934:	8f b7       	in	r24, 0x3f	; 63
    4936:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4938:	f8 94       	cli
	return flags;
    493a:	19 81       	ldd	r17, Y+1	; 0x01
>>>>>>> Stashed changes
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
<<<<<<< Updated upstream
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	0e 94 24 23 	call	0x4648	; 0x4648 <udd_sleep_mode>

	udd_ack_suspend_event();
    4cdc:	ea ec       	ldi	r30, 0xCA	; 202
    4cde:	f4 e0       	ldi	r31, 0x04	; 4
    4ce0:	80 e4       	ldi	r24, 0x40	; 64
    4ce2:	80 83       	st	Z, r24
	udd_ack_resume_event();
    4ce4:	80 e2       	ldi	r24, 0x20	; 32
    4ce6:	80 83       	st	Z, r24
	udd_attach_device();
    4ce8:	e1 ec       	ldi	r30, 0xC1	; 193
    4cea:	f4 e0       	ldi	r31, 0x04	; 4
    4cec:	80 81       	ld	r24, Z
    4cee:	81 60       	ori	r24, 0x01	; 1
    4cf0:	80 83       	st	Z, r24
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    4cf2:	a9 ec       	ldi	r26, 0xC9	; 201
    4cf4:	b4 e0       	ldi	r27, 0x04	; 4
    4cf6:	8c 91       	ld	r24, X
    4cf8:	82 60       	ori	r24, 0x02	; 2
    4cfa:	8c 93       	st	X, r24
	udd_enable_busevt_interrupt();
    4cfc:	e8 ec       	ldi	r30, 0xC8	; 200
    4cfe:	f4 e0       	ldi	r31, 0x04	; 4
    4d00:	80 81       	ld	r24, Z
    4d02:	80 64       	ori	r24, 0x40	; 64
    4d04:	80 83       	st	Z, r24
	udd_enable_setup_interrupt();
    4d06:	8c 91       	ld	r24, X
    4d08:	81 60       	ori	r24, 0x01	; 1
    4d0a:	8c 93       	st	X, r24
	udd_enable_start_of_frame_interrupt();
    4d0c:	80 81       	ld	r24, Z
    4d0e:	80 68       	ori	r24, 0x80	; 128
    4d10:	80 83       	st	Z, r24
=======
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	0e 94 57 21 	call	0x42ae	; 0x42ae <udd_sleep_mode>

	udd_ack_suspend_event();
    4942:	ea ec       	ldi	r30, 0xCA	; 202
    4944:	f4 e0       	ldi	r31, 0x04	; 4
    4946:	80 e4       	ldi	r24, 0x40	; 64
    4948:	80 83       	st	Z, r24
	udd_ack_resume_event();
    494a:	80 e2       	ldi	r24, 0x20	; 32
    494c:	80 83       	st	Z, r24
	udd_attach_device();
    494e:	e1 ec       	ldi	r30, 0xC1	; 193
    4950:	f4 e0       	ldi	r31, 0x04	; 4
    4952:	80 81       	ld	r24, Z
    4954:	81 60       	ori	r24, 0x01	; 1
    4956:	80 83       	st	Z, r24
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    4958:	a9 ec       	ldi	r26, 0xC9	; 201
    495a:	b4 e0       	ldi	r27, 0x04	; 4
    495c:	8c 91       	ld	r24, X
    495e:	82 60       	ori	r24, 0x02	; 2
    4960:	8c 93       	st	X, r24
	udd_enable_busevt_interrupt();
    4962:	e8 ec       	ldi	r30, 0xC8	; 200
    4964:	f4 e0       	ldi	r31, 0x04	; 4
    4966:	80 81       	ld	r24, Z
    4968:	80 64       	ori	r24, 0x40	; 64
    496a:	80 83       	st	Z, r24
	udd_enable_setup_interrupt();
    496c:	8c 91       	ld	r24, X
    496e:	81 60       	ori	r24, 0x01	; 1
    4970:	8c 93       	st	X, r24
	udd_enable_start_of_frame_interrupt();
    4972:	80 81       	ld	r24, Z
    4974:	80 68       	ori	r24, 0x80	; 128
    4976:	80 83       	st	Z, r24
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    4d12:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
}
    4d14:	0f 90       	pop	r0
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	1f 91       	pop	r17
    4d1c:	08 95       	ret

00004d1e <udd_enable>:
=======
    4978:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
}
    497a:	0f 90       	pop	r0
    497c:	df 91       	pop	r29
    497e:	cf 91       	pop	r28
    4980:	1f 91       	pop	r17
    4982:	08 95       	ret

00004984 <udd_enable>:
>>>>>>> Stashed changes
#endif // (0!=USB_DEVICE_MAX_EP)
//@}


void udd_enable(void)
{
<<<<<<< Updated upstream
    4d1e:	0f 93       	push	r16
    4d20:	1f 93       	push	r17
    4d22:	cf 93       	push	r28
    4d24:	df 93       	push	r29
    4d26:	1f 92       	push	r1
    4d28:	1f 92       	push	r1
    4d2a:	cd b7       	in	r28, 0x3d	; 61
    4d2c:	de b7       	in	r29, 0x3e	; 62
=======
    4984:	0f 93       	push	r16
    4986:	1f 93       	push	r17
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	1f 92       	push	r1
    498e:	1f 92       	push	r1
    4990:	cd b7       	in	r28, 0x3d	; 61
    4992:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes
# if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// RC oscillator calibration via USB Start Of Frame is not available
	// in low speed mode.
	// Thus, the calibration is disabled
	// when USB interface start in low speed mode
	DFLLRC32M.CTRL = 0;
<<<<<<< Updated upstream
    4d2e:	00 e6       	ldi	r16, 0x60	; 96
    4d30:	10 e0       	ldi	r17, 0x00	; 0
    4d32:	f8 01       	movw	r30, r16
    4d34:	10 82       	st	Z, r1
=======
    4994:	00 e6       	ldi	r16, 0x60	; 96
    4996:	10 e0       	ldi	r17, 0x00	; 0
    4998:	f8 01       	movw	r30, r16
    499a:	10 82       	st	Z, r1
>>>>>>> Stashed changes
	// The USB hardware need of 6MHz in low speed mode
	sysclk_enable_usb(6);
	udd_set_low_speed();
#else
	// The USB hardware need of 48MHz in full speed mode
	sysclk_enable_usb(48);
<<<<<<< Updated upstream
    4d36:	80 e3       	ldi	r24, 0x30	; 48
    4d38:	0e 94 46 2c 	call	0x588c	; 0x588c <sysclk_enable_usb>
	udd_set_full_speed();
    4d3c:	e0 ec       	ldi	r30, 0xC0	; 192
    4d3e:	f4 e0       	ldi	r31, 0x04	; 4
    4d40:	80 81       	ld	r24, Z
    4d42:	80 64       	ori	r24, 0x40	; 64
    4d44:	80 83       	st	Z, r24
=======
    499c:	80 e3       	ldi	r24, 0x30	; 48
    499e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <sysclk_enable_usb>
	udd_set_full_speed();
    49a2:	e0 ec       	ldi	r30, 0xC0	; 192
    49a4:	f4 e0       	ldi	r31, 0x04	; 4
    49a6:	80 81       	ld	r24, Z
    49a8:	80 64       	ori	r24, 0x40	; 64
    49aa:	80 83       	st	Z, r24
>>>>>>> Stashed changes
// The XMEGA_A1U does not support the RC calibration through Keepalive (Low speed).
#if (!defined USB_DEVICE_LOW_SPEED) || (!XMEGA_A1U)
# ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
#   if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// The SOF calibration can be enabled
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
<<<<<<< Updated upstream
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	f8 01       	movw	r30, r16
    4d4a:	80 83       	st	Z, r24
=======
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	f8 01       	movw	r30, r16
    49b0:	80 83       	st	Z, r24
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    4d4c:	8f b7       	in	r24, 0x3f	; 63
    4d4e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4d50:	f8 94       	cli
	return flags;
    4d52:	1a 81       	ldd	r17, Y+2	; 0x02
=======
    49b2:	8f b7       	in	r24, 0x3f	; 63
    49b4:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    49b6:	f8 94       	cli
	return flags;
    49b8:	1a 81       	ldd	r17, Y+2	; 0x02
>>>>>>> Stashed changes

	flags = cpu_irq_save();

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
<<<<<<< Updated upstream
    4d54:	e0 e0       	ldi	r30, 0x00	; 0
    4d56:	f6 e2       	ldi	r31, 0x26	; 38
    4d58:	11 8a       	std	Z+17, r1	; 0x11
    4d5a:	11 8e       	std	Z+25, r1	; 0x19
    4d5c:	11 a2       	std	Z+33, r1	; 0x21
    4d5e:	11 a6       	std	Z+41, r1	; 0x29
    4d60:	11 aa       	std	Z+49, r1	; 0x31
    4d62:	11 ae       	std	Z+57, r1	; 0x39
=======
    49ba:	e0 e1       	ldi	r30, 0x10	; 16
    49bc:	f6 e2       	ldi	r31, 0x26	; 38
    49be:	11 8a       	std	Z+17, r1	; 0x11
    49c0:	11 8e       	std	Z+25, r1	; 0x19
    49c2:	11 a2       	std	Z+33, r1	; 0x21
    49c4:	11 a6       	std	Z+41, r1	; 0x29
    49c6:	11 aa       	std	Z+49, r1	; 0x31
    49c8:	11 ae       	std	Z+57, r1	; 0x39
>>>>>>> Stashed changes
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
		udd_ep_job[i].busy = false;
<<<<<<< Updated upstream
    4d64:	e9 e8       	ldi	r30, 0x89	; 137
    4d66:	f5 e2       	ldi	r31, 0x25	; 37
    4d68:	80 81       	ld	r24, Z
    4d6a:	8e 7f       	andi	r24, 0xFE	; 254
    4d6c:	80 83       	st	Z, r24
    4d6e:	e2 e9       	ldi	r30, 0x92	; 146
    4d70:	f5 e2       	ldi	r31, 0x25	; 37
    4d72:	80 81       	ld	r24, Z
    4d74:	8e 7f       	andi	r24, 0xFE	; 254
    4d76:	80 83       	st	Z, r24
    4d78:	eb e9       	ldi	r30, 0x9B	; 155
    4d7a:	f5 e2       	ldi	r31, 0x25	; 37
    4d7c:	80 81       	ld	r24, Z
    4d7e:	8e 7f       	andi	r24, 0xFE	; 254
    4d80:	80 83       	st	Z, r24
    4d82:	e4 ea       	ldi	r30, 0xA4	; 164
    4d84:	f5 e2       	ldi	r31, 0x25	; 37
    4d86:	80 81       	ld	r24, Z
    4d88:	8e 7f       	andi	r24, 0xFE	; 254
    4d8a:	80 83       	st	Z, r24
=======
    49ca:	e9 e9       	ldi	r30, 0x99	; 153
    49cc:	f5 e2       	ldi	r31, 0x25	; 37
    49ce:	80 81       	ld	r24, Z
    49d0:	8e 7f       	andi	r24, 0xFE	; 254
    49d2:	80 83       	st	Z, r24
    49d4:	e2 ea       	ldi	r30, 0xA2	; 162
    49d6:	f5 e2       	ldi	r31, 0x25	; 37
    49d8:	80 81       	ld	r24, Z
    49da:	8e 7f       	andi	r24, 0xFE	; 254
    49dc:	80 83       	st	Z, r24
    49de:	eb ea       	ldi	r30, 0xAB	; 171
    49e0:	f5 e2       	ldi	r31, 0x25	; 37
    49e2:	80 81       	ld	r24, Z
    49e4:	8e 7f       	andi	r24, 0xFE	; 254
    49e6:	80 83       	st	Z, r24
    49e8:	e4 eb       	ldi	r30, 0xB4	; 180
    49ea:	f5 e2       	ldi	r31, 0x25	; 37
    49ec:	80 81       	ld	r24, Z
    49ee:	8e 7f       	andi	r24, 0xFE	; 254
    49f0:	80 83       	st	Z, r24
>>>>>>> Stashed changes
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
<<<<<<< Updated upstream
    4d8c:	6a e1       	ldi	r22, 0x1A	; 26
    4d8e:	70 e0       	ldi	r23, 0x00	; 0
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
=======
    49f2:	6a e1       	ldi	r22, 0x1A	; 26
    49f4:	70 e0       	ldi	r23, 0x00	; 0
    49f6:	82 e0       	ldi	r24, 0x02	; 2
    49f8:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
>>>>>>> Stashed changes
#ifdef USB_PAD_USER_CAL0
	USB_CAL0 = USB_PAD_USER_CAL0;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL0));
	if (cal != 0xFF) {
<<<<<<< Updated upstream
    4d96:	8f 3f       	cpi	r24, 0xFF	; 255
    4d98:	19 f0       	breq	.+6      	; 0x4da0 <udd_enable+0x82>
		USB_CAL0 = cal;
    4d9a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4d9e:	03 c0       	rjmp	.+6      	; 0x4da6 <udd_enable+0x88>
	} else {
		USB_CAL0 = 0x1F;
    4da0:	8f e1       	ldi	r24, 0x1F	; 31
    4da2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4da6:	6b e1       	ldi	r22, 0x1B	; 27
    4da8:	70 e0       	ldi	r23, 0x00	; 0
    4daa:	82 e0       	ldi	r24, 0x02	; 2
    4dac:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
=======
    49fc:	8f 3f       	cpi	r24, 0xFF	; 255
    49fe:	19 f0       	breq	.+6      	; 0x4a06 <udd_enable+0x82>
		USB_CAL0 = cal;
    4a00:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4a04:	03 c0       	rjmp	.+6      	; 0x4a0c <udd_enable+0x88>
	} else {
		USB_CAL0 = 0x1F;
    4a06:	8f e1       	ldi	r24, 0x1F	; 31
    4a08:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4a0c:	6b e1       	ldi	r22, 0x1B	; 27
    4a0e:	70 e0       	ldi	r23, 0x00	; 0
    4a10:	82 e0       	ldi	r24, 0x02	; 2
    4a12:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
>>>>>>> Stashed changes
#ifdef USB_PAD_USER_CAL1
	USB_CAL1 = USB_PAD_USER_CAL1;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL1));
	if (cal != 0xFF) {
<<<<<<< Updated upstream
    4db0:	8f 3f       	cpi	r24, 0xFF	; 255
    4db2:	19 f0       	breq	.+6      	; 0x4dba <udd_enable+0x9c>
		USB_CAL1 = cal;
    4db4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4db8:	03 c0       	rjmp	.+6      	; 0x4dc0 <udd_enable+0xa2>
	} else {
		USB_CAL1 = 0x1F;
    4dba:	8f e1       	ldi	r24, 0x1F	; 31
    4dbc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
=======
    4a16:	8f 3f       	cpi	r24, 0xFF	; 255
    4a18:	19 f0       	breq	.+6      	; 0x4a20 <udd_enable+0x9c>
		USB_CAL1 = cal;
    4a1a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4a1e:	03 c0       	rjmp	.+6      	; 0x4a26 <udd_enable+0xa2>
	} else {
		USB_CAL1 = 0x1F;
    4a20:	8f e1       	ldi	r24, 0x1F	; 31
    4a22:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
>>>>>>> Stashed changes
	}
#endif

	//** Enable USB hardware
	usb_pad_init();
	udd_set_nb_max_ep(USB_DEVICE_MAX_EP);
<<<<<<< Updated upstream
    4dc0:	e0 ec       	ldi	r30, 0xC0	; 192
    4dc2:	f4 e0       	ldi	r31, 0x04	; 4
    4dc4:	80 81       	ld	r24, Z
    4dc6:	82 60       	ori	r24, 0x02	; 2
    4dc8:	80 83       	st	Z, r24
	udd_enable_interface();
    4dca:	80 81       	ld	r24, Z
    4dcc:	80 68       	ori	r24, 0x80	; 128
    4dce:	80 83       	st	Z, r24
	udd_enable_store_frame_number();
    4dd0:	80 81       	ld	r24, Z
    4dd2:	80 61       	ori	r24, 0x10	; 16
    4dd4:	80 83       	st	Z, r24
=======
    4a26:	e0 ec       	ldi	r30, 0xC0	; 192
    4a28:	f4 e0       	ldi	r31, 0x04	; 4
    4a2a:	80 81       	ld	r24, Z
    4a2c:	82 60       	ori	r24, 0x02	; 2
    4a2e:	80 83       	st	Z, r24
	udd_enable_interface();
    4a30:	80 81       	ld	r24, Z
    4a32:	80 68       	ori	r24, 0x80	; 128
    4a34:	80 83       	st	Z, r24
	udd_enable_store_frame_number();
    4a36:	80 81       	ld	r24, Z
    4a38:	80 61       	ori	r24, 0x10	; 16
    4a3a:	80 83       	st	Z, r24
>>>>>>> Stashed changes
#if XMEGA_A1U
	Assert(((uint16_t)(&udd_sram) & 0x0F) == 0); /* check align on 16bit */
#else
	Assert(((uint16_t)(&udd_sram) & 0x01) == 0); /* check align on WORD */
#endif
	udd_set_ep_table_addr(udd_sram.ep_ctrl);
<<<<<<< Updated upstream
    4dd6:	80 e1       	ldi	r24, 0x10	; 16
    4dd8:	96 e2       	ldi	r25, 0x26	; 38
    4dda:	86 83       	std	Z+6, r24	; 0x06
    4ddc:	97 83       	std	Z+7, r25	; 0x07
	// Enable TC fifo management
	udd_enable_fifo();
    4dde:	80 81       	ld	r24, Z
    4de0:	80 62       	ori	r24, 0x20	; 32
    4de2:	80 83       	st	Z, r24
	udd_reset_fifo();
    4de4:	8f ef       	ldi	r24, 0xFF	; 255
    4de6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    4dea:	e8 ec       	ldi	r30, 0xC8	; 200
    4dec:	f4 e0       	ldi	r31, 0x04	; 4
    4dee:	80 81       	ld	r24, Z
    4df0:	81 60       	ori	r24, 0x01	; 1
    4df2:	80 83       	st	Z, r24
=======
    4a3c:	80 e2       	ldi	r24, 0x20	; 32
    4a3e:	96 e2       	ldi	r25, 0x26	; 38
    4a40:	86 83       	std	Z+6, r24	; 0x06
    4a42:	97 83       	std	Z+7, r25	; 0x07
	// Enable TC fifo management
	udd_enable_fifo();
    4a44:	80 81       	ld	r24, Z
    4a46:	80 62       	ori	r24, 0x20	; 32
    4a48:	80 83       	st	Z, r24
	udd_reset_fifo();
    4a4a:	8f ef       	ldi	r24, 0xFF	; 255
    4a4c:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    4a50:	e8 ec       	ldi	r30, 0xC8	; 200
    4a52:	f4 e0       	ldi	r31, 0x04	; 4
    4a54:	80 81       	ld	r24, Z
    4a56:	81 60       	ori	r24, 0x01	; 1
    4a58:	80 83       	st	Z, r24
>>>>>>> Stashed changes

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
<<<<<<< Updated upstream
    4df4:	10 92 50 26 	sts	0x2650, r1	; 0x802650 <udd_b_idle>
=======
    4a5a:	10 92 60 26 	sts	0x2660, r1	; 0x802660 <udd_b_idle>
>>>>>>> Stashed changes
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
<<<<<<< Updated upstream
    4df8:	80 91 66 26 	lds	r24, 0x2666	; 0x802666 <sleepmgr_locks+0x5>
    4dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <udd_enable+0xe4>
    4e00:	ff cf       	rjmp	.-2      	; 0x4e00 <udd_enable+0xe2>
=======
    4a5e:	80 91 76 26 	lds	r24, 0x2676	; 0x802676 <sleepmgr_locks+0x5>
    4a62:	8f 3f       	cpi	r24, 0xFF	; 255
    4a64:	09 f4       	brne	.+2      	; 0x4a68 <udd_enable+0xe4>
    4a66:	ff cf       	rjmp	.-2      	; 0x4a66 <udd_enable+0xe2>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    4e02:	8f b7       	in	r24, 0x3f	; 63
    4e04:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4e06:	f8 94       	cli
	return flags;
    4e08:	99 81       	ldd	r25, Y+1	; 0x01
=======
    4a68:	8f b7       	in	r24, 0x3f	; 63
    4a6a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4a6c:	f8 94       	cli
	return flags;
    4a6e:	99 81       	ldd	r25, Y+1	; 0x01
>>>>>>> Stashed changes
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
<<<<<<< Updated upstream
    4e0a:	e1 e6       	ldi	r30, 0x61	; 97
    4e0c:	f6 e2       	ldi	r31, 0x26	; 38
    4e0e:	85 81       	ldd	r24, Z+5	; 0x05
    4e10:	8f 5f       	subi	r24, 0xFF	; 255
    4e12:	85 83       	std	Z+5, r24	; 0x05
=======
    4a70:	e1 e7       	ldi	r30, 0x71	; 113
    4a72:	f6 e2       	ldi	r31, 0x26	; 38
    4a74:	85 81       	ldd	r24, Z+5	; 0x05
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	85 83       	std	Z+5, r24	; 0x05
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    4e14:	9f bf       	out	0x3f, r25	; 63
=======
    4a7a:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif

#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
<<<<<<< Updated upstream
    4e16:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <udd_attach>
    4e1a:	1f bf       	out	0x3f, r17	; 63
#endif
	cpu_irq_restore(flags);
}
    4e1c:	0f 90       	pop	r0
    4e1e:	0f 90       	pop	r0
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	0f 91       	pop	r16
    4e28:	08 95       	ret

00004e2a <udd_detach>:
=======
    4a7c:	0e 94 94 24 	call	0x4928	; 0x4928 <udd_attach>
    4a80:	1f bf       	out	0x3f, r17	; 63
#endif
	cpu_irq_restore(flags);
}
    4a82:	0f 90       	pop	r0
    4a84:	0f 90       	pop	r0
    4a86:	df 91       	pop	r29
    4a88:	cf 91       	pop	r28
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	08 95       	ret

00004a90 <udd_detach>:
>>>>>>> Stashed changes
}

void udd_detach(void)
{
	// Detach device from the bus
	udd_detach_device();
<<<<<<< Updated upstream
    4e2a:	e1 ec       	ldi	r30, 0xC1	; 193
    4e2c:	f4 e0       	ldi	r31, 0x04	; 4
    4e2e:	80 81       	ld	r24, Z
    4e30:	8e 7f       	andi	r24, 0xFE	; 254
    4e32:	80 83       	st	Z, r24
    4e34:	08 95       	ret

00004e36 <udd_is_high_speed>:
=======
    4a90:	e1 ec       	ldi	r30, 0xC1	; 193
    4a92:	f4 e0       	ldi	r31, 0x04	; 4
    4a94:	80 81       	ld	r24, Z
    4a96:	8e 7f       	andi	r24, 0xFE	; 254
    4a98:	80 83       	st	Z, r24
    4a9a:	08 95       	ret

00004a9c <udd_is_high_speed>:
>>>>>>> Stashed changes
}

bool udd_is_high_speed(void)
{
	return false;
}
<<<<<<< Updated upstream
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	08 95       	ret

00004e3a <udd_set_address>:
=======
    4a9c:	80 e0       	ldi	r24, 0x00	; 0
    4a9e:	08 95       	ret

00004aa0 <udd_set_address>:
>>>>>>> Stashed changes

void udd_set_address(uint8_t address)
{
	udd_set_device_address(address);
<<<<<<< Updated upstream
    4e3a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4e3e:	08 95       	ret

00004e40 <udd_getaddress>:
=======
    4aa0:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4aa4:	08 95       	ret

00004aa6 <udd_getaddress>:
>>>>>>> Stashed changes
}

uint8_t udd_getaddress(void)
{
	return udd_get_device_address();
<<<<<<< Updated upstream
    4e40:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
}
    4e44:	08 95       	ret

00004e46 <udd_get_frame_number>:
=======
    4aa6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
}
    4aaa:	08 95       	ret

00004aac <udd_get_frame_number>:
>>>>>>> Stashed changes

uint16_t udd_get_frame_number(void)
{
	return udd_sram.frame_number;
<<<<<<< Updated upstream
    4e46:	80 91 40 26 	lds	r24, 0x2640	; 0x802640 <udd_sram+0x40>
    4e4a:	90 91 41 26 	lds	r25, 0x2641	; 0x802641 <udd_sram+0x41>
}
    4e4e:	08 95       	ret

00004e50 <udd_get_micro_frame_number>:
=======
    4aac:	80 91 50 26 	lds	r24, 0x2650	; 0x802650 <udd_sram+0x40>
    4ab0:	90 91 51 26 	lds	r25, 0x2651	; 0x802651 <udd_sram+0x41>
}
    4ab4:	08 95       	ret

00004ab6 <udd_get_micro_frame_number>:
>>>>>>> Stashed changes

uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
<<<<<<< Updated upstream
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	08 95       	ret

00004e56 <udd_send_remotewakeup>:
=======
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	08 95       	ret

00004abc <udd_send_remotewakeup>:
>>>>>>> Stashed changes

void udd_send_remotewakeup(void)
{
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
<<<<<<< Updated upstream
    4e56:	80 91 50 26 	lds	r24, 0x2650	; 0x802650 <udd_b_idle>
    4e5a:	81 11       	cpse	r24, r1
    4e5c:	0b c0       	rjmp	.+22     	; 0x4e74 <udd_send_remotewakeup+0x1e>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	0e 94 24 23 	call	0x4648	; 0x4648 <udd_sleep_mode>
		udd_send_remote_wake_up();
    4e64:	e1 ec       	ldi	r30, 0xC1	; 193
    4e66:	f4 e0       	ldi	r31, 0x04	; 4
    4e68:	80 81       	ld	r24, Z
    4e6a:	8b 7f       	andi	r24, 0xFB	; 251
    4e6c:	80 83       	st	Z, r24
    4e6e:	80 81       	ld	r24, Z
    4e70:	84 60       	ori	r24, 0x04	; 4
    4e72:	80 83       	st	Z, r24
    4e74:	08 95       	ret

00004e76 <udd_set_setup_payload>:
=======
    4abc:	80 91 60 26 	lds	r24, 0x2660	; 0x802660 <udd_b_idle>
    4ac0:	81 11       	cpse	r24, r1
    4ac2:	0b c0       	rjmp	.+22     	; 0x4ada <udd_send_remotewakeup+0x1e>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	0e 94 57 21 	call	0x42ae	; 0x42ae <udd_sleep_mode>
		udd_send_remote_wake_up();
    4aca:	e1 ec       	ldi	r30, 0xC1	; 193
    4acc:	f4 e0       	ldi	r31, 0x04	; 4
    4ace:	80 81       	ld	r24, Z
    4ad0:	8b 7f       	andi	r24, 0xFB	; 251
    4ad2:	80 83       	st	Z, r24
    4ad4:	80 81       	ld	r24, Z
    4ad6:	84 60       	ori	r24, 0x04	; 4
    4ad8:	80 83       	st	Z, r24
    4ada:	08 95       	ret

00004adc <udd_set_setup_payload>:
>>>>>>> Stashed changes
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
<<<<<<< Updated upstream
    4e76:	e1 e5       	ldi	r30, 0x51	; 81
    4e78:	f6 e2       	ldi	r31, 0x26	; 38
    4e7a:	80 87       	std	Z+8, r24	; 0x08
    4e7c:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    4e7e:	62 87       	std	Z+10, r22	; 0x0a
    4e80:	73 87       	std	Z+11, r23	; 0x0b
    4e82:	08 95       	ret

00004e84 <udd_ep_alloc>:
=======
    4adc:	e1 e6       	ldi	r30, 0x61	; 97
    4ade:	f6 e2       	ldi	r31, 0x26	; 38
    4ae0:	80 87       	std	Z+8, r24	; 0x08
    4ae2:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    4ae4:	62 87       	std	Z+10, r22	; 0x0a
    4ae6:	73 87       	std	Z+11, r23	; 0x0b
    4ae8:	08 95       	ret

00004aea <udd_ep_alloc>:
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    4e84:	28 2f       	mov	r18, r24
    4e86:	2f 70       	andi	r18, 0x0F	; 15
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	22 0f       	add	r18, r18
    4e8c:	33 1f       	adc	r19, r19
    4e8e:	08 2e       	mov	r0, r24
    4e90:	00 0c       	add	r0, r0
    4e92:	99 0b       	sbc	r25, r25
    4e94:	88 27       	eor	r24, r24
    4e96:	99 0f       	add	r25, r25
    4e98:	88 1f       	adc	r24, r24
    4e9a:	99 27       	eor	r25, r25
    4e9c:	82 0f       	add	r24, r18
    4e9e:	93 1f       	adc	r25, r19
=======
    4aea:	28 2f       	mov	r18, r24
    4aec:	2f 70       	andi	r18, 0x0F	; 15
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	22 0f       	add	r18, r18
    4af2:	33 1f       	adc	r19, r19
    4af4:	08 2e       	mov	r0, r24
    4af6:	00 0c       	add	r0, r0
    4af8:	99 0b       	sbc	r25, r25
    4afa:	88 27       	eor	r24, r24
    4afc:	99 0f       	add	r25, r25
    4afe:	88 1f       	adc	r24, r24
    4b00:	99 27       	eor	r25, r25
    4b02:	82 0f       	add	r24, r18
    4b04:	93 1f       	adc	r25, r19
>>>>>>> Stashed changes
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
<<<<<<< Updated upstream
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	ee 0f       	add	r30, r30
    4ea4:	ff 1f       	adc	r31, r31
    4ea6:	ee 0f       	add	r30, r30
    4ea8:	ff 1f       	adc	r31, r31
    4eaa:	ee 0f       	add	r30, r30
    4eac:	ff 1f       	adc	r31, r31
    4eae:	e0 50       	subi	r30, 0x00	; 0
    4eb0:	fa 4d       	sbci	r31, 0xDA	; 218
    4eb2:	21 89       	ldd	r18, Z+17	; 0x11
    4eb4:	20 7c       	andi	r18, 0xC0	; 192
    4eb6:	09 f0       	breq	.+2      	; 0x4eba <udd_ep_alloc+0x36>
    4eb8:	72 c0       	rjmp	.+228    	; 0x4f9e <udd_ep_alloc+0x11a>
=======
    4b06:	fc 01       	movw	r30, r24
    4b08:	ee 0f       	add	r30, r30
    4b0a:	ff 1f       	adc	r31, r31
    4b0c:	ee 0f       	add	r30, r30
    4b0e:	ff 1f       	adc	r31, r31
    4b10:	ee 0f       	add	r30, r30
    4b12:	ff 1f       	adc	r31, r31
    4b14:	e0 5f       	subi	r30, 0xF0	; 240
    4b16:	f9 4d       	sbci	r31, 0xD9	; 217
    4b18:	21 89       	ldd	r18, Z+17	; 0x11
    4b1a:	20 7c       	andi	r18, 0xC0	; 192
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <udd_ep_alloc+0x36>
    4b1e:	72 c0       	rjmp	.+228    	; 0x4c04 <udd_ep_alloc+0x11a>
>>>>>>> Stashed changes
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
<<<<<<< Updated upstream
    4eba:	63 70       	andi	r22, 0x03	; 3
    4ebc:	61 30       	cpi	r22, 0x01	; 1
    4ebe:	11 f0       	breq	.+4      	; 0x4ec4 <udd_ep_alloc+0x40>
    4ec0:	18 f4       	brcc	.+6      	; 0x4ec8 <udd_ep_alloc+0x44>
    4ec2:	04 c0       	rjmp	.+8      	; 0x4ecc <udd_ep_alloc+0x48>
=======
    4b20:	63 70       	andi	r22, 0x03	; 3
    4b22:	61 30       	cpi	r22, 0x01	; 1
    4b24:	11 f0       	breq	.+4      	; 0x4b2a <udd_ep_alloc+0x40>
    4b26:	18 f4       	brcc	.+6      	; 0x4b2e <udd_ep_alloc+0x44>
    4b28:	04 c0       	rjmp	.+8      	; 0x4b32 <udd_ep_alloc+0x48>
>>>>>>> Stashed changes
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
<<<<<<< Updated upstream
    4ec4:	60 ec       	ldi	r22, 0xC0	; 192
    4ec6:	03 c0       	rjmp	.+6      	; 0x4ece <udd_ep_alloc+0x4a>
=======
    4b2a:	60 ec       	ldi	r22, 0xC0	; 192
    4b2c:	03 c0       	rjmp	.+6      	; 0x4b34 <udd_ep_alloc+0x4a>
>>>>>>> Stashed changes
		break;
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
<<<<<<< Updated upstream
    4ec8:	60 e8       	ldi	r22, 0x80	; 128
    4eca:	01 c0       	rjmp	.+2      	; 0x4ece <udd_ep_alloc+0x4a>
=======
    4b2e:	60 e8       	ldi	r22, 0x80	; 128
    4b30:	01 c0       	rjmp	.+2      	; 0x4b34 <udd_ep_alloc+0x4a>
>>>>>>> Stashed changes

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
<<<<<<< Updated upstream
    4ecc:	60 e4       	ldi	r22, 0x40	; 64
=======
    4b32:	60 e4       	ldi	r22, 0x40	; 64
>>>>>>> Stashed changes
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
<<<<<<< Updated upstream
    4ece:	40 38       	cpi	r20, 0x80	; 128
    4ed0:	51 05       	cpc	r21, r1
    4ed2:	e9 f0       	breq	.+58     	; 0x4f0e <udd_ep_alloc+0x8a>
    4ed4:	50 f4       	brcc	.+20     	; 0x4eea <udd_ep_alloc+0x66>
    4ed6:	40 32       	cpi	r20, 0x20	; 32
    4ed8:	51 05       	cpc	r21, r1
    4eda:	a9 f0       	breq	.+42     	; 0x4f06 <udd_ep_alloc+0x82>
    4edc:	40 34       	cpi	r20, 0x40	; 64
    4ede:	51 05       	cpc	r21, r1
    4ee0:	a1 f0       	breq	.+40     	; 0x4f0a <udd_ep_alloc+0x86>
    4ee2:	40 31       	cpi	r20, 0x10	; 16
    4ee4:	51 05       	cpc	r21, r1
    4ee6:	d9 f4       	brne	.+54     	; 0x4f1e <udd_ep_alloc+0x9a>
    4ee8:	0c c0       	rjmp	.+24     	; 0x4f02 <udd_ep_alloc+0x7e>
    4eea:	41 15       	cp	r20, r1
    4eec:	22 e0       	ldi	r18, 0x02	; 2
    4eee:	52 07       	cpc	r21, r18
    4ef0:	91 f0       	breq	.+36     	; 0x4f16 <udd_ep_alloc+0x92>
    4ef2:	4f 3f       	cpi	r20, 0xFF	; 255
    4ef4:	23 e0       	ldi	r18, 0x03	; 3
    4ef6:	52 07       	cpc	r21, r18
    4ef8:	81 f0       	breq	.+32     	; 0x4f1a <udd_ep_alloc+0x96>
    4efa:	41 15       	cp	r20, r1
    4efc:	51 40       	sbci	r21, 0x01	; 1
    4efe:	79 f4       	brne	.+30     	; 0x4f1e <udd_ep_alloc+0x9a>
    4f00:	08 c0       	rjmp	.+16     	; 0x4f12 <udd_ep_alloc+0x8e>
=======
    4b34:	40 38       	cpi	r20, 0x80	; 128
    4b36:	51 05       	cpc	r21, r1
    4b38:	e9 f0       	breq	.+58     	; 0x4b74 <udd_ep_alloc+0x8a>
    4b3a:	50 f4       	brcc	.+20     	; 0x4b50 <udd_ep_alloc+0x66>
    4b3c:	40 32       	cpi	r20, 0x20	; 32
    4b3e:	51 05       	cpc	r21, r1
    4b40:	a9 f0       	breq	.+42     	; 0x4b6c <udd_ep_alloc+0x82>
    4b42:	40 34       	cpi	r20, 0x40	; 64
    4b44:	51 05       	cpc	r21, r1
    4b46:	a1 f0       	breq	.+40     	; 0x4b70 <udd_ep_alloc+0x86>
    4b48:	40 31       	cpi	r20, 0x10	; 16
    4b4a:	51 05       	cpc	r21, r1
    4b4c:	d9 f4       	brne	.+54     	; 0x4b84 <udd_ep_alloc+0x9a>
    4b4e:	0c c0       	rjmp	.+24     	; 0x4b68 <udd_ep_alloc+0x7e>
    4b50:	41 15       	cp	r20, r1
    4b52:	22 e0       	ldi	r18, 0x02	; 2
    4b54:	52 07       	cpc	r21, r18
    4b56:	91 f0       	breq	.+36     	; 0x4b7c <udd_ep_alloc+0x92>
    4b58:	4f 3f       	cpi	r20, 0xFF	; 255
    4b5a:	23 e0       	ldi	r18, 0x03	; 3
    4b5c:	52 07       	cpc	r21, r18
    4b5e:	81 f0       	breq	.+32     	; 0x4b80 <udd_ep_alloc+0x96>
    4b60:	41 15       	cp	r20, r1
    4b62:	51 40       	sbci	r21, 0x01	; 1
    4b64:	79 f4       	brne	.+30     	; 0x4b84 <udd_ep_alloc+0x9a>
    4b66:	08 c0       	rjmp	.+16     	; 0x4b78 <udd_ep_alloc+0x8e>
>>>>>>> Stashed changes
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
<<<<<<< Updated upstream
    4f02:	21 e0       	ldi	r18, 0x01	; 1
    4f04:	0d c0       	rjmp	.+26     	; 0x4f20 <udd_ep_alloc+0x9c>
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    4f06:	22 e0       	ldi	r18, 0x02	; 2
    4f08:	0b c0       	rjmp	.+22     	; 0x4f20 <udd_ep_alloc+0x9c>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    4f0a:	23 e0       	ldi	r18, 0x03	; 3
    4f0c:	09 c0       	rjmp	.+18     	; 0x4f20 <udd_ep_alloc+0x9c>
=======
    4b68:	21 e0       	ldi	r18, 0x01	; 1
    4b6a:	0d c0       	rjmp	.+26     	; 0x4b86 <udd_ep_alloc+0x9c>
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    4b6c:	22 e0       	ldi	r18, 0x02	; 2
    4b6e:	0b c0       	rjmp	.+22     	; 0x4b86 <udd_ep_alloc+0x9c>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    4b70:	23 e0       	ldi	r18, 0x03	; 3
    4b72:	09 c0       	rjmp	.+18     	; 0x4b86 <udd_ep_alloc+0x9c>
>>>>>>> Stashed changes
		break;
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
<<<<<<< Updated upstream
    4f0e:	24 e0       	ldi	r18, 0x04	; 4
    4f10:	07 c0       	rjmp	.+14     	; 0x4f20 <udd_ep_alloc+0x9c>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    4f12:	25 e0       	ldi	r18, 0x05	; 5
    4f14:	05 c0       	rjmp	.+10     	; 0x4f20 <udd_ep_alloc+0x9c>
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    4f16:	26 e0       	ldi	r18, 0x06	; 6
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <udd_ep_alloc+0x9c>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    4f1a:	27 e0       	ldi	r18, 0x07	; 7
    4f1c:	01 c0       	rjmp	.+2      	; 0x4f20 <udd_ep_alloc+0x9c>
=======
    4b74:	24 e0       	ldi	r18, 0x04	; 4
    4b76:	07 c0       	rjmp	.+14     	; 0x4b86 <udd_ep_alloc+0x9c>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    4b78:	25 e0       	ldi	r18, 0x05	; 5
    4b7a:	05 c0       	rjmp	.+10     	; 0x4b86 <udd_ep_alloc+0x9c>
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    4b7c:	26 e0       	ldi	r18, 0x06	; 6
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <udd_ep_alloc+0x9c>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    4b80:	27 e0       	ldi	r18, 0x07	; 7
    4b82:	01 c0       	rjmp	.+2      	; 0x4b86 <udd_ep_alloc+0x9c>
>>>>>>> Stashed changes
	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
<<<<<<< Updated upstream
    4f1e:	20 e0       	ldi	r18, 0x00	; 0
=======
    4b84:	20 e0       	ldi	r18, 0x00	; 0
>>>>>>> Stashed changes
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
<<<<<<< Updated upstream
    4f20:	fc 01       	movw	r30, r24
    4f22:	ee 0f       	add	r30, r30
    4f24:	ff 1f       	adc	r31, r31
    4f26:	ee 0f       	add	r30, r30
    4f28:	ff 1f       	adc	r31, r31
    4f2a:	ee 0f       	add	r30, r30
    4f2c:	ff 1f       	adc	r31, r31
    4f2e:	e0 50       	subi	r30, 0x00	; 0
    4f30:	fa 4d       	sbci	r31, 0xDA	; 218
    4f32:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    4f34:	dc 01       	movw	r26, r24
    4f36:	aa 0f       	add	r26, r26
    4f38:	bb 1f       	adc	r27, r27
    4f3a:	aa 0f       	add	r26, r26
    4f3c:	bb 1f       	adc	r27, r27
    4f3e:	aa 0f       	add	r26, r26
    4f40:	bb 1f       	adc	r27, r27
    4f42:	a0 5f       	subi	r26, 0xF0	; 240
    4f44:	b9 4d       	sbci	r27, 0xD9	; 217
    4f46:	36 e0       	ldi	r19, 0x06	; 6
    4f48:	3c 93       	st	X, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4f4a:	26 2b       	or	r18, r22
    4f4c:	21 8b       	std	Z+17, r18	; 0x11
=======
    4b86:	fc 01       	movw	r30, r24
    4b88:	ee 0f       	add	r30, r30
    4b8a:	ff 1f       	adc	r31, r31
    4b8c:	ee 0f       	add	r30, r30
    4b8e:	ff 1f       	adc	r31, r31
    4b90:	ee 0f       	add	r30, r30
    4b92:	ff 1f       	adc	r31, r31
    4b94:	e0 5f       	subi	r30, 0xF0	; 240
    4b96:	f9 4d       	sbci	r31, 0xD9	; 217
    4b98:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	aa 0f       	add	r26, r26
    4b9e:	bb 1f       	adc	r27, r27
    4ba0:	aa 0f       	add	r26, r26
    4ba2:	bb 1f       	adc	r27, r27
    4ba4:	aa 0f       	add	r26, r26
    4ba6:	bb 1f       	adc	r27, r27
    4ba8:	a0 5e       	subi	r26, 0xE0	; 224
    4baa:	b9 4d       	sbci	r27, 0xD9	; 217
    4bac:	36 e0       	ldi	r19, 0x06	; 6
    4bae:	3c 93       	st	X, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4bb0:	26 2b       	or	r18, r22
    4bb2:	21 8b       	std	Z+17, r18	; 0x11
>>>>>>> Stashed changes
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
<<<<<<< Updated upstream
    4f4e:	fc 01       	movw	r30, r24
    4f50:	ee 0f       	add	r30, r30
    4f52:	ff 1f       	adc	r31, r31
    4f54:	ee 0f       	add	r30, r30
    4f56:	ff 1f       	adc	r31, r31
    4f58:	ee 0f       	add	r30, r30
    4f5a:	ff 1f       	adc	r31, r31
    4f5c:	e0 50       	subi	r30, 0x00	; 0
    4f5e:	fa 4d       	sbci	r31, 0xDA	; 218
    4f60:	21 89       	ldd	r18, Z+17	; 0x11
    4f62:	20 7c       	andi	r18, 0xC0	; 192
    4f64:	20 3c       	cpi	r18, 0xC0	; 192
    4f66:	69 f4       	brne	.+26     	; 0x4f82 <udd_ep_alloc+0xfe>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    4f68:	fc 01       	movw	r30, r24
    4f6a:	ee 0f       	add	r30, r30
    4f6c:	ff 1f       	adc	r31, r31
    4f6e:	ee 0f       	add	r30, r30
    4f70:	ff 1f       	adc	r31, r31
    4f72:	ee 0f       	add	r30, r30
    4f74:	ff 1f       	adc	r31, r31
    4f76:	e0 50       	subi	r30, 0x00	; 0
    4f78:	fa 4d       	sbci	r31, 0xDA	; 218
    4f7a:	21 89       	ldd	r18, Z+17	; 0x11
    4f7c:	27 70       	andi	r18, 0x07	; 7
    4f7e:	27 30       	cpi	r18, 0x07	; 7
    4f80:	81 f0       	breq	.+32     	; 0x4fa2 <udd_ep_alloc+0x11e>
=======
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	ee 0f       	add	r30, r30
    4bb8:	ff 1f       	adc	r31, r31
    4bba:	ee 0f       	add	r30, r30
    4bbc:	ff 1f       	adc	r31, r31
    4bbe:	ee 0f       	add	r30, r30
    4bc0:	ff 1f       	adc	r31, r31
    4bc2:	e0 5f       	subi	r30, 0xF0	; 240
    4bc4:	f9 4d       	sbci	r31, 0xD9	; 217
    4bc6:	21 89       	ldd	r18, Z+17	; 0x11
    4bc8:	20 7c       	andi	r18, 0xC0	; 192
    4bca:	20 3c       	cpi	r18, 0xC0	; 192
    4bcc:	69 f4       	brne	.+26     	; 0x4be8 <udd_ep_alloc+0xfe>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    4bce:	fc 01       	movw	r30, r24
    4bd0:	ee 0f       	add	r30, r30
    4bd2:	ff 1f       	adc	r31, r31
    4bd4:	ee 0f       	add	r30, r30
    4bd6:	ff 1f       	adc	r31, r31
    4bd8:	ee 0f       	add	r30, r30
    4bda:	ff 1f       	adc	r31, r31
    4bdc:	e0 5f       	subi	r30, 0xF0	; 240
    4bde:	f9 4d       	sbci	r31, 0xD9	; 217
    4be0:	21 89       	ldd	r18, Z+17	; 0x11
    4be2:	27 70       	andi	r18, 0x07	; 7
    4be4:	27 30       	cpi	r18, 0x07	; 7
    4be6:	81 f0       	breq	.+32     	; 0x4c08 <udd_ep_alloc+0x11e>
>>>>>>> Stashed changes
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
<<<<<<< Updated upstream
    4f82:	88 0f       	add	r24, r24
    4f84:	99 1f       	adc	r25, r25
    4f86:	88 0f       	add	r24, r24
    4f88:	99 1f       	adc	r25, r25
    4f8a:	88 0f       	add	r24, r24
    4f8c:	99 1f       	adc	r25, r25
    4f8e:	fc 01       	movw	r30, r24
    4f90:	e0 50       	subi	r30, 0x00	; 0
    4f92:	fa 4d       	sbci	r31, 0xDA	; 218
    4f94:	81 89       	ldd	r24, Z+17	; 0x11
    4f96:	80 62       	ori	r24, 0x20	; 32
    4f98:	81 8b       	std	Z+17, r24	; 0x11
	return true;
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	08 95       	ret
=======
    4be8:	88 0f       	add	r24, r24
    4bea:	99 1f       	adc	r25, r25
    4bec:	88 0f       	add	r24, r24
    4bee:	99 1f       	adc	r25, r25
    4bf0:	88 0f       	add	r24, r24
    4bf2:	99 1f       	adc	r25, r25
    4bf4:	fc 01       	movw	r30, r24
    4bf6:	e0 5f       	subi	r30, 0xF0	; 240
    4bf8:	f9 4d       	sbci	r31, 0xD9	; 217
    4bfa:	81 89       	ldd	r24, Z+17	; 0x11
    4bfc:	80 62       	ori	r24, 0x20	; 32
    4bfe:	81 8b       	std	Z+17, r24	; 0x11
	return true;
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	08 95       	ret
>>>>>>> Stashed changes
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
<<<<<<< Updated upstream
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	08 95       	ret
=======
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	08 95       	ret
>>>>>>> Stashed changes

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
<<<<<<< Updated upstream
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
=======
    4c08:	81 e0       	ldi	r24, 0x01	; 1
>>>>>>> Stashed changes
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
<<<<<<< Updated upstream
    4fa4:	08 95       	ret

00004fa6 <udd_ep_is_halted>:
=======
    4c0a:	08 95       	ret

00004c0c <udd_ep_is_halted>:
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    4fa6:	e8 2f       	mov	r30, r24
    4fa8:	ef 70       	andi	r30, 0x0F	; 15
    4faa:	f0 e0       	ldi	r31, 0x00	; 0
    4fac:	ee 0f       	add	r30, r30
    4fae:	ff 1f       	adc	r31, r31
    4fb0:	08 2e       	mov	r0, r24
    4fb2:	00 0c       	add	r0, r0
    4fb4:	99 0b       	sbc	r25, r25
    4fb6:	88 27       	eor	r24, r24
    4fb8:	99 0f       	add	r25, r25
    4fba:	88 1f       	adc	r24, r24
    4fbc:	99 27       	eor	r25, r25
    4fbe:	e8 0f       	add	r30, r24
    4fc0:	f9 1f       	adc	r31, r25
=======
    4c0c:	e8 2f       	mov	r30, r24
    4c0e:	ef 70       	andi	r30, 0x0F	; 15
    4c10:	f0 e0       	ldi	r31, 0x00	; 0
    4c12:	ee 0f       	add	r30, r30
    4c14:	ff 1f       	adc	r31, r31
    4c16:	08 2e       	mov	r0, r24
    4c18:	00 0c       	add	r0, r0
    4c1a:	99 0b       	sbc	r25, r25
    4c1c:	88 27       	eor	r24, r24
    4c1e:	99 0f       	add	r25, r25
    4c20:	88 1f       	adc	r24, r24
    4c22:	99 27       	eor	r25, r25
    4c24:	e8 0f       	add	r30, r24
    4c26:	f9 1f       	adc	r31, r25
>>>>>>> Stashed changes
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
<<<<<<< Updated upstream
    4fc2:	ee 0f       	add	r30, r30
    4fc4:	ff 1f       	adc	r31, r31
    4fc6:	ee 0f       	add	r30, r30
    4fc8:	ff 1f       	adc	r31, r31
    4fca:	ee 0f       	add	r30, r30
    4fcc:	ff 1f       	adc	r31, r31
    4fce:	e0 50       	subi	r30, 0x00	; 0
    4fd0:	fa 4d       	sbci	r31, 0xDA	; 218
    4fd2:	81 89       	ldd	r24, Z+17	; 0x11
}
    4fd4:	82 fb       	bst	r24, 2
    4fd6:	88 27       	eor	r24, r24
    4fd8:	80 f9       	bld	r24, 0
    4fda:	08 95       	ret

00004fdc <udd_ep_clear_halt>:
=======
    4c28:	ee 0f       	add	r30, r30
    4c2a:	ff 1f       	adc	r31, r31
    4c2c:	ee 0f       	add	r30, r30
    4c2e:	ff 1f       	adc	r31, r31
    4c30:	ee 0f       	add	r30, r30
    4c32:	ff 1f       	adc	r31, r31
    4c34:	e0 5f       	subi	r30, 0xF0	; 240
    4c36:	f9 4d       	sbci	r31, 0xD9	; 217
    4c38:	81 89       	ldd	r24, Z+17	; 0x11
}
    4c3a:	82 fb       	bst	r24, 2
    4c3c:	88 27       	eor	r24, r24
    4c3e:	80 f9       	bld	r24, 0
    4c40:	08 95       	ret

00004c42 <udd_ep_clear_halt>:
>>>>>>> Stashed changes
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
<<<<<<< Updated upstream
    4fdc:	0f 93       	push	r16
=======
    4c42:	0f 93       	push	r16
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    4fde:	28 2f       	mov	r18, r24
    4fe0:	2f 70       	andi	r18, 0x0F	; 15
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	a9 01       	movw	r20, r18
    4fe6:	44 0f       	add	r20, r20
    4fe8:	55 1f       	adc	r21, r21
    4fea:	28 2f       	mov	r18, r24
    4fec:	08 2e       	mov	r0, r24
    4fee:	00 0c       	add	r0, r0
    4ff0:	33 0b       	sbc	r19, r19
    4ff2:	22 27       	eor	r18, r18
    4ff4:	33 0f       	add	r19, r19
    4ff6:	22 1f       	adc	r18, r18
    4ff8:	33 27       	eor	r19, r19
    4ffa:	24 0f       	add	r18, r20
    4ffc:	35 1f       	adc	r19, r21
=======
    4c44:	28 2f       	mov	r18, r24
    4c46:	2f 70       	andi	r18, 0x0F	; 15
    4c48:	30 e0       	ldi	r19, 0x00	; 0
    4c4a:	a9 01       	movw	r20, r18
    4c4c:	44 0f       	add	r20, r20
    4c4e:	55 1f       	adc	r21, r21
    4c50:	28 2f       	mov	r18, r24
    4c52:	08 2e       	mov	r0, r24
    4c54:	00 0c       	add	r0, r0
    4c56:	33 0b       	sbc	r19, r19
    4c58:	22 27       	eor	r18, r18
    4c5a:	33 0f       	add	r19, r19
    4c5c:	22 1f       	adc	r18, r18
    4c5e:	33 27       	eor	r19, r19
    4c60:	24 0f       	add	r18, r20
    4c62:	35 1f       	adc	r19, r21
>>>>>>> Stashed changes
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_clear_dtgl(ep_ctrl);
<<<<<<< Updated upstream
    4ffe:	f9 01       	movw	r30, r18
    5000:	ee 0f       	add	r30, r30
    5002:	ff 1f       	adc	r31, r31
    5004:	ee 0f       	add	r30, r30
    5006:	ff 1f       	adc	r31, r31
    5008:	ee 0f       	add	r30, r30
    500a:	ff 1f       	adc	r31, r31
    500c:	e0 5f       	subi	r30, 0xF0	; 240
    500e:	f9 4d       	sbci	r31, 0xD9	; 217
    5010:	01 e0       	ldi	r16, 0x01	; 1
    5012:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    5014:	f9 01       	movw	r30, r18
    5016:	ee 0f       	add	r30, r30
    5018:	ff 1f       	adc	r31, r31
    501a:	ee 0f       	add	r30, r30
    501c:	ff 1f       	adc	r31, r31
    501e:	ee 0f       	add	r30, r30
    5020:	ff 1f       	adc	r31, r31
    5022:	e0 50       	subi	r30, 0x00	; 0
    5024:	fa 4d       	sbci	r31, 0xDA	; 218
    5026:	91 89       	ldd	r25, Z+17	; 0x11
    5028:	92 ff       	sbrs	r25, 2
    502a:	18 c0       	rjmp	.+48     	; 0x505c <udd_ep_clear_halt+0x80>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    502c:	22 0f       	add	r18, r18
    502e:	33 1f       	adc	r19, r19
    5030:	22 0f       	add	r18, r18
    5032:	33 1f       	adc	r19, r19
    5034:	22 0f       	add	r18, r18
    5036:	33 1f       	adc	r19, r19
    5038:	f9 01       	movw	r30, r18
    503a:	e0 50       	subi	r30, 0x00	; 0
    503c:	fa 4d       	sbci	r31, 0xDA	; 218
    503e:	91 89       	ldd	r25, Z+17	; 0x11
    5040:	9b 7f       	andi	r25, 0xFB	; 251
    5042:	91 8b       	std	Z+17, r25	; 0x11
=======
    4c64:	f9 01       	movw	r30, r18
    4c66:	ee 0f       	add	r30, r30
    4c68:	ff 1f       	adc	r31, r31
    4c6a:	ee 0f       	add	r30, r30
    4c6c:	ff 1f       	adc	r31, r31
    4c6e:	ee 0f       	add	r30, r30
    4c70:	ff 1f       	adc	r31, r31
    4c72:	e0 5e       	subi	r30, 0xE0	; 224
    4c74:	f9 4d       	sbci	r31, 0xD9	; 217
    4c76:	01 e0       	ldi	r16, 0x01	; 1
    4c78:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    4c7a:	f9 01       	movw	r30, r18
    4c7c:	ee 0f       	add	r30, r30
    4c7e:	ff 1f       	adc	r31, r31
    4c80:	ee 0f       	add	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	ee 0f       	add	r30, r30
    4c86:	ff 1f       	adc	r31, r31
    4c88:	e0 5f       	subi	r30, 0xF0	; 240
    4c8a:	f9 4d       	sbci	r31, 0xD9	; 217
    4c8c:	91 89       	ldd	r25, Z+17	; 0x11
    4c8e:	92 ff       	sbrs	r25, 2
    4c90:	18 c0       	rjmp	.+48     	; 0x4cc2 <udd_ep_clear_halt+0x80>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    4c92:	22 0f       	add	r18, r18
    4c94:	33 1f       	adc	r19, r19
    4c96:	22 0f       	add	r18, r18
    4c98:	33 1f       	adc	r19, r19
    4c9a:	22 0f       	add	r18, r18
    4c9c:	33 1f       	adc	r19, r19
    4c9e:	f9 01       	movw	r30, r18
    4ca0:	e0 5f       	subi	r30, 0xF0	; 240
    4ca2:	f9 4d       	sbci	r31, 0xD9	; 217
    4ca4:	91 89       	ldd	r25, Z+17	; 0x11
    4ca6:	9b 7f       	andi	r25, 0xFB	; 251
    4ca8:	91 8b       	std	Z+17, r25	; 0x11
>>>>>>> Stashed changes

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
<<<<<<< Updated upstream
    5044:	0e 94 3c 24 	call	0x4878	; 0x4878 <udd_ep_get_job>
    5048:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    504a:	80 81       	ld	r24, Z
    504c:	80 ff       	sbrs	r24, 0
    504e:	06 c0       	rjmp	.+12     	; 0x505c <udd_ep_clear_halt+0x80>
		ptr_job->busy = false;
    5050:	8e 7f       	andi	r24, 0xFE	; 254
    5052:	80 83       	st	Z, r24
		ptr_job->call_nohalt();
    5054:	07 80       	ldd	r0, Z+7	; 0x07
    5056:	f0 85       	ldd	r31, Z+8	; 0x08
    5058:	e0 2d       	mov	r30, r0
    505a:	19 95       	eicall
	}
	return true;
}
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	0f 91       	pop	r16
    5060:	08 95       	ret

00005062 <udd_ep_run>:
=======
    4caa:	0e 94 6f 22 	call	0x44de	; 0x44de <udd_ep_get_job>
    4cae:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    4cb0:	80 81       	ld	r24, Z
    4cb2:	80 ff       	sbrs	r24, 0
    4cb4:	06 c0       	rjmp	.+12     	; 0x4cc2 <udd_ep_clear_halt+0x80>
		ptr_job->busy = false;
    4cb6:	8e 7f       	andi	r24, 0xFE	; 254
    4cb8:	80 83       	st	Z, r24
		ptr_job->call_nohalt();
    4cba:	07 80       	ldd	r0, Z+7	; 0x07
    4cbc:	f0 85       	ldd	r31, Z+8	; 0x08
    4cbe:	e0 2d       	mov	r30, r0
    4cc0:	19 95       	eicall
	}
	return true;
}
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	0f 91       	pop	r16
    4cc6:	08 95       	ret

00004cc8 <udd_ep_run>:
>>>>>>> Stashed changes

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
<<<<<<< Updated upstream
    5062:	6f 92       	push	r6
    5064:	7f 92       	push	r7
    5066:	8f 92       	push	r8
    5068:	9f 92       	push	r9
    506a:	af 92       	push	r10
    506c:	bf 92       	push	r11
    506e:	cf 92       	push	r12
    5070:	df 92       	push	r13
    5072:	ef 92       	push	r14
    5074:	ff 92       	push	r15
    5076:	0f 93       	push	r16
    5078:	1f 93       	push	r17
    507a:	cf 93       	push	r28
    507c:	df 93       	push	r29
    507e:	1f 92       	push	r1
    5080:	cd b7       	in	r28, 0x3d	; 61
    5082:	de b7       	in	r29, 0x3e	; 62
    5084:	78 2e       	mov	r7, r24
    5086:	66 2e       	mov	r6, r22
    5088:	4a 01       	movw	r8, r20
    508a:	59 01       	movw	r10, r18
=======
    4cc8:	6f 92       	push	r6
    4cca:	7f 92       	push	r7
    4ccc:	8f 92       	push	r8
    4cce:	9f 92       	push	r9
    4cd0:	af 92       	push	r10
    4cd2:	bf 92       	push	r11
    4cd4:	cf 92       	push	r12
    4cd6:	df 92       	push	r13
    4cd8:	ef 92       	push	r14
    4cda:	ff 92       	push	r15
    4cdc:	0f 93       	push	r16
    4cde:	1f 93       	push	r17
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    4ce4:	1f 92       	push	r1
    4ce6:	cd b7       	in	r28, 0x3d	; 61
    4ce8:	de b7       	in	r29, 0x3e	; 62
    4cea:	78 2e       	mov	r7, r24
    4cec:	66 2e       	mov	r6, r22
    4cee:	4a 01       	movw	r8, r20
    4cf0:	59 01       	movw	r10, r18
>>>>>>> Stashed changes
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
<<<<<<< Updated upstream
    508c:	0e 94 3c 24 	call	0x4878	; 0x4878 <udd_ep_get_job>
    5090:	6c 01       	movw	r12, r24
=======
    4cf2:	0e 94 6f 22 	call	0x44de	; 0x44de <udd_ep_get_job>
    4cf6:	6c 01       	movw	r12, r24
>>>>>>> Stashed changes
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
<<<<<<< Updated upstream
    5092:	27 2d       	mov	r18, r7
=======
    4cf8:	27 2d       	mov	r18, r7
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    5094:	87 2d       	mov	r24, r7
    5096:	8f 70       	andi	r24, 0x0F	; 15
    5098:	e8 2e       	mov	r14, r24
    509a:	f1 2c       	mov	r15, r1
    509c:	c7 01       	movw	r24, r14
    509e:	88 0f       	add	r24, r24
    50a0:	99 1f       	adc	r25, r25
    50a2:	e7 2c       	mov	r14, r7
    50a4:	07 2c       	mov	r0, r7
    50a6:	00 0c       	add	r0, r0
    50a8:	ff 08       	sbc	r15, r15
    50aa:	ee 24       	eor	r14, r14
    50ac:	ff 0c       	add	r15, r15
    50ae:	ee 1c       	adc	r14, r14
    50b0:	ff 24       	eor	r15, r15
    50b2:	e8 0e       	add	r14, r24
    50b4:	f9 1e       	adc	r15, r25
=======
    4cfa:	87 2d       	mov	r24, r7
    4cfc:	8f 70       	andi	r24, 0x0F	; 15
    4cfe:	e8 2e       	mov	r14, r24
    4d00:	f1 2c       	mov	r15, r1
    4d02:	c7 01       	movw	r24, r14
    4d04:	88 0f       	add	r24, r24
    4d06:	99 1f       	adc	r25, r25
    4d08:	e7 2c       	mov	r14, r7
    4d0a:	07 2c       	mov	r0, r7
    4d0c:	00 0c       	add	r0, r0
    4d0e:	ff 08       	sbc	r15, r15
    4d10:	ee 24       	eor	r14, r14
    4d12:	ff 0c       	add	r15, r15
    4d14:	ee 1c       	adc	r14, r14
    4d16:	ff 24       	eor	r15, r15
    4d18:	e8 0e       	add	r14, r24
    4d1a:	f9 1e       	adc	r15, r25
>>>>>>> Stashed changes

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
<<<<<<< Updated upstream
    50b6:	f7 01       	movw	r30, r14
    50b8:	ee 0f       	add	r30, r30
    50ba:	ff 1f       	adc	r31, r31
    50bc:	ee 0f       	add	r30, r30
    50be:	ff 1f       	adc	r31, r31
    50c0:	ee 0f       	add	r30, r30
    50c2:	ff 1f       	adc	r31, r31
    50c4:	e0 50       	subi	r30, 0x00	; 0
    50c6:	fa 4d       	sbci	r31, 0xDA	; 218
    50c8:	81 89       	ldd	r24, Z+17	; 0x11
    50ca:	80 7c       	andi	r24, 0xC0	; 192
    50cc:	09 f4       	brne	.+2      	; 0x50d0 <udd_ep_run+0x6e>
    50ce:	84 c0       	rjmp	.+264    	; 0x51d8 <udd_ep_run+0x176>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    50d0:	f7 01       	movw	r30, r14
    50d2:	ee 0f       	add	r30, r30
    50d4:	ff 1f       	adc	r31, r31
    50d6:	ee 0f       	add	r30, r30
    50d8:	ff 1f       	adc	r31, r31
    50da:	ee 0f       	add	r30, r30
    50dc:	ff 1f       	adc	r31, r31
    50de:	e0 50       	subi	r30, 0x00	; 0
    50e0:	fa 4d       	sbci	r31, 0xDA	; 218
    50e2:	81 89       	ldd	r24, Z+17	; 0x11
    50e4:	80 7c       	andi	r24, 0xC0	; 192
    50e6:	80 3c       	cpi	r24, 0xC0	; 192
    50e8:	61 f0       	breq	.+24     	; 0x5102 <udd_ep_run+0xa0>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    50ea:	f7 01       	movw	r30, r14
    50ec:	ee 0f       	add	r30, r30
    50ee:	ff 1f       	adc	r31, r31
    50f0:	ee 0f       	add	r30, r30
    50f2:	ff 1f       	adc	r31, r31
    50f4:	ee 0f       	add	r30, r30
    50f6:	ff 1f       	adc	r31, r31
    50f8:	e0 50       	subi	r30, 0x00	; 0
    50fa:	fa 4d       	sbci	r31, 0xDA	; 218
    50fc:	81 89       	ldd	r24, Z+17	; 0x11
    50fe:	82 fd       	sbrc	r24, 2
    5100:	6d c0       	rjmp	.+218    	; 0x51dc <udd_ep_run+0x17a>
=======
    4d1c:	f7 01       	movw	r30, r14
    4d1e:	ee 0f       	add	r30, r30
    4d20:	ff 1f       	adc	r31, r31
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	ee 0f       	add	r30, r30
    4d28:	ff 1f       	adc	r31, r31
    4d2a:	e0 5f       	subi	r30, 0xF0	; 240
    4d2c:	f9 4d       	sbci	r31, 0xD9	; 217
    4d2e:	81 89       	ldd	r24, Z+17	; 0x11
    4d30:	80 7c       	andi	r24, 0xC0	; 192
    4d32:	09 f4       	brne	.+2      	; 0x4d36 <udd_ep_run+0x6e>
    4d34:	84 c0       	rjmp	.+264    	; 0x4e3e <udd_ep_run+0x176>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    4d36:	f7 01       	movw	r30, r14
    4d38:	ee 0f       	add	r30, r30
    4d3a:	ff 1f       	adc	r31, r31
    4d3c:	ee 0f       	add	r30, r30
    4d3e:	ff 1f       	adc	r31, r31
    4d40:	ee 0f       	add	r30, r30
    4d42:	ff 1f       	adc	r31, r31
    4d44:	e0 5f       	subi	r30, 0xF0	; 240
    4d46:	f9 4d       	sbci	r31, 0xD9	; 217
    4d48:	81 89       	ldd	r24, Z+17	; 0x11
    4d4a:	80 7c       	andi	r24, 0xC0	; 192
    4d4c:	80 3c       	cpi	r24, 0xC0	; 192
    4d4e:	61 f0       	breq	.+24     	; 0x4d68 <udd_ep_run+0xa0>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    4d50:	f7 01       	movw	r30, r14
    4d52:	ee 0f       	add	r30, r30
    4d54:	ff 1f       	adc	r31, r31
    4d56:	ee 0f       	add	r30, r30
    4d58:	ff 1f       	adc	r31, r31
    4d5a:	ee 0f       	add	r30, r30
    4d5c:	ff 1f       	adc	r31, r31
    4d5e:	e0 5f       	subi	r30, 0xF0	; 240
    4d60:	f9 4d       	sbci	r31, 0xD9	; 217
    4d62:	81 89       	ldd	r24, Z+17	; 0x11
    4d64:	82 fd       	sbrc	r24, 2
    4d66:	6d c0       	rjmp	.+218    	; 0x4e42 <udd_ep_run+0x17a>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    5102:	8f b7       	in	r24, 0x3f	; 63
    5104:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5106:	f8 94       	cli
	return flags;
    5108:	89 81       	ldd	r24, Y+1	; 0x01
=======
    4d68:	8f b7       	in	r24, 0x3f	; 63
    4d6a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4d6c:	f8 94       	cli
	return flags;
    4d6e:	89 81       	ldd	r24, Y+1	; 0x01
>>>>>>> Stashed changes
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
<<<<<<< Updated upstream
    510a:	f6 01       	movw	r30, r12
    510c:	90 81       	ld	r25, Z
    510e:	90 ff       	sbrs	r25, 0
    5110:	03 c0       	rjmp	.+6      	; 0x5118 <udd_ep_run+0xb6>
=======
    4d70:	f6 01       	movw	r30, r12
    4d72:	90 81       	ld	r25, Z
    4d74:	90 ff       	sbrs	r25, 0
    4d76:	03 c0       	rjmp	.+6      	; 0x4d7e <udd_ep_run+0xb6>
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    5112:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		return false; // Job already on going
    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	63 c0       	rjmp	.+198    	; 0x51de <udd_ep_run+0x17c>
	}
	ptr_job->busy = true;
    5118:	f6 01       	movw	r30, r12
    511a:	90 81       	ld	r25, Z
    511c:	91 60       	ori	r25, 0x01	; 1
    511e:	90 83       	st	Z, r25
    5120:	8f bf       	out	0x3f, r24	; 63
=======
    4d78:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		return false; // Job already on going
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	63 c0       	rjmp	.+198    	; 0x4e44 <udd_ep_run+0x17c>
	}
	ptr_job->busy = true;
    4d7e:	f6 01       	movw	r30, r12
    4d80:	90 81       	ld	r25, Z
    4d82:	91 60       	ori	r25, 0x01	; 1
    4d84:	90 83       	st	Z, r25
    4d86:	8f bf       	out	0x3f, r24	; 63
>>>>>>> Stashed changes
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
<<<<<<< Updated upstream
    5122:	81 82       	std	Z+1, r8	; 0x01
    5124:	92 82       	std	Z+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    5126:	a3 82       	std	Z+3, r10	; 0x03
    5128:	b4 82       	std	Z+4, r11	; 0x04
	ptr_job->nb_trans = 0;
    512a:	15 82       	std	Z+5, r1	; 0x05
    512c:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->call_trans = callback;
    512e:	07 83       	std	Z+7, r16	; 0x07
    5130:	10 87       	std	Z+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    5132:	61 10       	cpse	r6, r1
    5134:	06 c0       	rjmp	.+12     	; 0x5142 <udd_ep_run+0xe0>
    5136:	91 e0       	ldi	r25, 0x01	; 1
    5138:	a1 14       	cp	r10, r1
    513a:	b1 04       	cpc	r11, r1
    513c:	19 f0       	breq	.+6      	; 0x5144 <udd_ep_run+0xe2>
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	01 c0       	rjmp	.+2      	; 0x5144 <udd_ep_run+0xe2>
    5142:	91 e0       	ldi	r25, 0x01	; 1
    5144:	f6 01       	movw	r30, r12
    5146:	80 81       	ld	r24, Z
    5148:	90 fb       	bst	r25, 0
    514a:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    514c:	8b 7f       	andi	r24, 0xFB	; 251
    514e:	80 83       	st	Z, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    5150:	22 23       	and	r18, r18
    5152:	64 f4       	brge	.+24     	; 0x516c <udd_ep_run+0x10a>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    5154:	f7 01       	movw	r30, r14
    5156:	ee 0f       	add	r30, r30
    5158:	ff 1f       	adc	r31, r31
    515a:	ee 0f       	add	r30, r30
    515c:	ff 1f       	adc	r31, r31
    515e:	ee 0f       	add	r30, r30
    5160:	ff 1f       	adc	r31, r31
    5162:	e0 50       	subi	r30, 0x00	; 0
    5164:	fa 4d       	sbci	r31, 0xDA	; 218
    5166:	16 8a       	std	Z+22, r1	; 0x16
    5168:	17 8a       	std	Z+23, r1	; 0x17
    516a:	31 c0       	rjmp	.+98     	; 0x51ce <udd_ep_run+0x16c>
=======
    4d88:	81 82       	std	Z+1, r8	; 0x01
    4d8a:	92 82       	std	Z+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    4d8c:	a3 82       	std	Z+3, r10	; 0x03
    4d8e:	b4 82       	std	Z+4, r11	; 0x04
	ptr_job->nb_trans = 0;
    4d90:	15 82       	std	Z+5, r1	; 0x05
    4d92:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->call_trans = callback;
    4d94:	07 83       	std	Z+7, r16	; 0x07
    4d96:	10 87       	std	Z+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    4d98:	61 10       	cpse	r6, r1
    4d9a:	06 c0       	rjmp	.+12     	; 0x4da8 <udd_ep_run+0xe0>
    4d9c:	91 e0       	ldi	r25, 0x01	; 1
    4d9e:	a1 14       	cp	r10, r1
    4da0:	b1 04       	cpc	r11, r1
    4da2:	19 f0       	breq	.+6      	; 0x4daa <udd_ep_run+0xe2>
    4da4:	90 e0       	ldi	r25, 0x00	; 0
    4da6:	01 c0       	rjmp	.+2      	; 0x4daa <udd_ep_run+0xe2>
    4da8:	91 e0       	ldi	r25, 0x01	; 1
    4daa:	f6 01       	movw	r30, r12
    4dac:	80 81       	ld	r24, Z
    4dae:	90 fb       	bst	r25, 0
    4db0:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    4db2:	8b 7f       	andi	r24, 0xFB	; 251
    4db4:	80 83       	st	Z, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    4db6:	22 23       	and	r18, r18
    4db8:	64 f4       	brge	.+24     	; 0x4dd2 <udd_ep_run+0x10a>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4dba:	f7 01       	movw	r30, r14
    4dbc:	ee 0f       	add	r30, r30
    4dbe:	ff 1f       	adc	r31, r31
    4dc0:	ee 0f       	add	r30, r30
    4dc2:	ff 1f       	adc	r31, r31
    4dc4:	ee 0f       	add	r30, r30
    4dc6:	ff 1f       	adc	r31, r31
    4dc8:	e0 5f       	subi	r30, 0xF0	; 240
    4dca:	f9 4d       	sbci	r31, 0xD9	; 217
    4dcc:	16 8a       	std	Z+22, r1	; 0x16
    4dce:	17 8a       	std	Z+23, r1	; 0x17
    4dd0:	31 c0       	rjmp	.+98     	; 0x4e34 <udd_ep_run+0x16c>
>>>>>>> Stashed changes
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
<<<<<<< Updated upstream
    516c:	f7 01       	movw	r30, r14
    516e:	ee 0f       	add	r30, r30
    5170:	ff 1f       	adc	r31, r31
    5172:	ee 0f       	add	r30, r30
    5174:	ff 1f       	adc	r31, r31
    5176:	ee 0f       	add	r30, r30
    5178:	ff 1f       	adc	r31, r31
    517a:	e0 50       	subi	r30, 0x00	; 0
    517c:	fa 4d       	sbci	r31, 0xDA	; 218
    517e:	81 89       	ldd	r24, Z+17	; 0x11
    5180:	80 7c       	andi	r24, 0xC0	; 192
    5182:	80 3c       	cpi	r24, 0xC0	; 192
    5184:	b9 f4       	brne	.+46     	; 0x51b4 <udd_ep_run+0x152>
=======
    4dd2:	f7 01       	movw	r30, r14
    4dd4:	ee 0f       	add	r30, r30
    4dd6:	ff 1f       	adc	r31, r31
    4dd8:	ee 0f       	add	r30, r30
    4dda:	ff 1f       	adc	r31, r31
    4ddc:	ee 0f       	add	r30, r30
    4dde:	ff 1f       	adc	r31, r31
    4de0:	e0 5f       	subi	r30, 0xF0	; 240
    4de2:	f9 4d       	sbci	r31, 0xD9	; 217
    4de4:	81 89       	ldd	r24, Z+17	; 0x11
    4de6:	80 7c       	andi	r24, 0xC0	; 192
    4de8:	80 3c       	cpi	r24, 0xC0	; 192
    4dea:	b9 f4       	brne	.+46     	; 0x4e1a <udd_ep_run+0x152>
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    5186:	c7 01       	movw	r24, r14
    5188:	88 0f       	add	r24, r24
    518a:	99 1f       	adc	r25, r25
    518c:	88 0f       	add	r24, r24
    518e:	99 1f       	adc	r25, r25
    5190:	88 0f       	add	r24, r24
    5192:	99 1f       	adc	r25, r25
=======
    4dec:	c7 01       	movw	r24, r14
    4dee:	88 0f       	add	r24, r24
    4df0:	99 1f       	adc	r25, r25
    4df2:	88 0f       	add	r24, r24
    4df4:	99 1f       	adc	r25, r25
    4df6:	88 0f       	add	r24, r24
    4df8:	99 1f       	adc	r25, r25
>>>>>>> Stashed changes
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
<<<<<<< Updated upstream
    5194:	80 5f       	subi	r24, 0xF0	; 240
    5196:	99 4d       	sbci	r25, 0xD9	; 217
    5198:	0e 94 13 24 	call	0x4826	; 0x4826 <udd_ep_get_size>
    519c:	bc 01       	movw	r22, r24
    519e:	c5 01       	movw	r24, r10
    51a0:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    51a4:	89 2b       	or	r24, r25
    51a6:	31 f0       	breq	.+12     	; 0x51b4 <udd_ep_run+0x152>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    51a8:	f6 01       	movw	r30, r12
    51aa:	80 81       	ld	r24, Z
    51ac:	8e 7f       	andi	r24, 0xFE	; 254
    51ae:	80 83       	st	Z, r24
			return false;
    51b0:	80 e0       	ldi	r24, 0x00	; 0
    51b2:	15 c0       	rjmp	.+42     	; 0x51de <udd_ep_run+0x17c>
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    51b4:	f7 01       	movw	r30, r14
    51b6:	ee 0f       	add	r30, r30
    51b8:	ff 1f       	adc	r31, r31
    51ba:	ee 0f       	add	r30, r30
    51bc:	ff 1f       	adc	r31, r31
    51be:	ee 0f       	add	r30, r30
    51c0:	ff 1f       	adc	r31, r31
    51c2:	e0 50       	subi	r30, 0x00	; 0
    51c4:	fa 4d       	sbci	r31, 0xDA	; 218
    51c6:	12 8a       	std	Z+18, r1	; 0x12
    51c8:	13 8a       	std	Z+19, r1	; 0x13
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    51ca:	16 8a       	std	Z+22, r1	; 0x16
    51cc:	17 8a       	std	Z+23, r1	; 0x17
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    51ce:	87 2d       	mov	r24, r7
    51d0:	0e 94 ce 24 	call	0x499c	; 0x499c <udd_ep_trans_complet>
	return true;
    51d4:	81 e0       	ldi	r24, 0x01	; 1
    51d6:	03 c0       	rjmp	.+6      	; 0x51de <udd_ep_run+0x17c>
=======
    4dfa:	80 5e       	subi	r24, 0xE0	; 224
    4dfc:	99 4d       	sbci	r25, 0xD9	; 217
    4dfe:	0e 94 46 22 	call	0x448c	; 0x448c <udd_ep_get_size>
    4e02:	bc 01       	movw	r22, r24
    4e04:	c5 01       	movw	r24, r10
    4e06:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    4e0a:	89 2b       	or	r24, r25
    4e0c:	31 f0       	breq	.+12     	; 0x4e1a <udd_ep_run+0x152>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    4e0e:	f6 01       	movw	r30, r12
    4e10:	80 81       	ld	r24, Z
    4e12:	8e 7f       	andi	r24, 0xFE	; 254
    4e14:	80 83       	st	Z, r24
			return false;
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	15 c0       	rjmp	.+42     	; 0x4e44 <udd_ep_run+0x17c>
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    4e1a:	f7 01       	movw	r30, r14
    4e1c:	ee 0f       	add	r30, r30
    4e1e:	ff 1f       	adc	r31, r31
    4e20:	ee 0f       	add	r30, r30
    4e22:	ff 1f       	adc	r31, r31
    4e24:	ee 0f       	add	r30, r30
    4e26:	ff 1f       	adc	r31, r31
    4e28:	e0 5f       	subi	r30, 0xF0	; 240
    4e2a:	f9 4d       	sbci	r31, 0xD9	; 217
    4e2c:	12 8a       	std	Z+18, r1	; 0x12
    4e2e:	13 8a       	std	Z+19, r1	; 0x13
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    4e30:	16 8a       	std	Z+22, r1	; 0x16
    4e32:	17 8a       	std	Z+23, r1	; 0x17
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    4e34:	87 2d       	mov	r24, r7
    4e36:	0e 94 01 23 	call	0x4602	; 0x4602 <udd_ep_trans_complet>
	return true;
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	03 c0       	rjmp	.+6      	; 0x4e44 <udd_ep_run+0x17c>
>>>>>>> Stashed changes
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
<<<<<<< Updated upstream
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	01 c0       	rjmp	.+2      	; 0x51de <udd_ep_run+0x17c>
=======
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	01 c0       	rjmp	.+2      	; 0x4e44 <udd_ep_run+0x17c>
>>>>>>> Stashed changes
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
		&& udd_endpoint_is_stall(ep_ctrl)) {
		return false; // Endpoint is halted
<<<<<<< Updated upstream
    51dc:	80 e0       	ldi	r24, 0x00	; 0
=======
    4e42:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
<<<<<<< Updated upstream
    51de:	0f 90       	pop	r0
    51e0:	df 91       	pop	r29
    51e2:	cf 91       	pop	r28
    51e4:	1f 91       	pop	r17
    51e6:	0f 91       	pop	r16
    51e8:	ff 90       	pop	r15
    51ea:	ef 90       	pop	r14
    51ec:	df 90       	pop	r13
    51ee:	cf 90       	pop	r12
    51f0:	bf 90       	pop	r11
    51f2:	af 90       	pop	r10
    51f4:	9f 90       	pop	r9
    51f6:	8f 90       	pop	r8
    51f8:	7f 90       	pop	r7
    51fa:	6f 90       	pop	r6
    51fc:	08 95       	ret

000051fe <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	18 2f       	mov	r17, r24
=======
    4e44:	0f 90       	pop	r0
    4e46:	df 91       	pop	r29
    4e48:	cf 91       	pop	r28
    4e4a:	1f 91       	pop	r17
    4e4c:	0f 91       	pop	r16
    4e4e:	ff 90       	pop	r15
    4e50:	ef 90       	pop	r14
    4e52:	df 90       	pop	r13
    4e54:	cf 90       	pop	r12
    4e56:	bf 90       	pop	r11
    4e58:	af 90       	pop	r10
    4e5a:	9f 90       	pop	r9
    4e5c:	8f 90       	pop	r8
    4e5e:	7f 90       	pop	r7
    4e60:	6f 90       	pop	r6
    4e62:	08 95       	ret

00004e64 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    4e64:	ff 92       	push	r15
    4e66:	0f 93       	push	r16
    4e68:	1f 93       	push	r17
    4e6a:	cf 93       	push	r28
    4e6c:	df 93       	push	r29
    4e6e:	18 2f       	mov	r17, r24
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    520a:	c8 2f       	mov	r28, r24
    520c:	cf 70       	andi	r28, 0x0F	; 15
    520e:	d0 e0       	ldi	r29, 0x00	; 0
    5210:	ce 01       	movw	r24, r28
    5212:	88 0f       	add	r24, r24
    5214:	99 1f       	adc	r25, r25
    5216:	c1 2f       	mov	r28, r17
    5218:	01 2e       	mov	r0, r17
    521a:	00 0c       	add	r0, r0
    521c:	dd 0b       	sbc	r29, r29
    521e:	cc 27       	eor	r28, r28
    5220:	dd 0f       	add	r29, r29
    5222:	cc 1f       	adc	r28, r28
    5224:	dd 27       	eor	r29, r29
    5226:	c8 0f       	add	r28, r24
    5228:	d9 1f       	adc	r29, r25
=======
    4e70:	c8 2f       	mov	r28, r24
    4e72:	cf 70       	andi	r28, 0x0F	; 15
    4e74:	d0 e0       	ldi	r29, 0x00	; 0
    4e76:	ce 01       	movw	r24, r28
    4e78:	88 0f       	add	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	c1 2f       	mov	r28, r17
    4e7e:	01 2e       	mov	r0, r17
    4e80:	00 0c       	add	r0, r0
    4e82:	dd 0b       	sbc	r29, r29
    4e84:	cc 27       	eor	r28, r28
    4e86:	dd 0f       	add	r29, r29
    4e88:	cc 1f       	adc	r28, r28
    4e8a:	dd 27       	eor	r29, r29
    4e8c:	c8 0f       	add	r28, r24
    4e8e:	d9 1f       	adc	r29, r25
>>>>>>> Stashed changes
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
<<<<<<< Updated upstream
    522a:	81 2f       	mov	r24, r17
    522c:	0e 94 3c 24 	call	0x4878	; 0x4878 <udd_ep_get_job>
    5230:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    5232:	fe 01       	movw	r30, r28
    5234:	ee 0f       	add	r30, r30
    5236:	ff 1f       	adc	r31, r31
    5238:	ee 0f       	add	r30, r30
    523a:	ff 1f       	adc	r31, r31
    523c:	ee 0f       	add	r30, r30
    523e:	ff 1f       	adc	r31, r31
    5240:	e0 5f       	subi	r30, 0xF0	; 240
    5242:	f9 4d       	sbci	r31, 0xD9	; 217
    5244:	02 e0       	ldi	r16, 0x02	; 2
    5246:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    5248:	8c 91       	ld	r24, X
    524a:	80 ff       	sbrs	r24, 0
    524c:	22 c0       	rjmp	.+68     	; 0x5292 <udd_ep_abort+0x94>
		return; // No job on going
	}
	ptr_job->busy = false;
    524e:	8e 7f       	andi	r24, 0xFE	; 254
    5250:	8c 93       	st	X, r24
	if (NULL != ptr_job->call_trans) {
    5252:	17 96       	adiw	r26, 0x07	; 7
    5254:	ed 91       	ld	r30, X+
    5256:	fc 91       	ld	r31, X
    5258:	18 97       	sbiw	r26, 0x08	; 8
    525a:	30 97       	sbiw	r30, 0x00	; 0
    525c:	d1 f0       	breq	.+52     	; 0x5292 <udd_ep_abort+0x94>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    525e:	11 23       	and	r17, r17
    5260:	5c f4       	brge	.+22     	; 0x5278 <udd_ep_abort+0x7a>
    5262:	cc 0f       	add	r28, r28
    5264:	dd 1f       	adc	r29, r29
    5266:	cc 0f       	add	r28, r28
    5268:	dd 1f       	adc	r29, r29
    526a:	cc 0f       	add	r28, r28
    526c:	dd 1f       	adc	r29, r29
    526e:	c0 50       	subi	r28, 0x00	; 0
    5270:	da 4d       	sbci	r29, 0xDA	; 218
    5272:	6e 89       	ldd	r22, Y+22	; 0x16
    5274:	7f 89       	ldd	r23, Y+23	; 0x17
    5276:	0a c0       	rjmp	.+20     	; 0x528c <udd_ep_abort+0x8e>
    5278:	cc 0f       	add	r28, r28
    527a:	dd 1f       	adc	r29, r29
    527c:	cc 0f       	add	r28, r28
    527e:	dd 1f       	adc	r29, r29
    5280:	cc 0f       	add	r28, r28
    5282:	dd 1f       	adc	r29, r29
    5284:	c0 50       	subi	r28, 0x00	; 0
    5286:	da 4d       	sbci	r29, 0xDA	; 218
    5288:	6a 89       	ldd	r22, Y+18	; 0x12
    528a:	7b 89       	ldd	r23, Y+19	; 0x13
    528c:	41 2f       	mov	r20, r17
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	19 95       	eicall
=======
    4e90:	81 2f       	mov	r24, r17
    4e92:	0e 94 6f 22 	call	0x44de	; 0x44de <udd_ep_get_job>
    4e96:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    4e98:	fe 01       	movw	r30, r28
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	ee 0f       	add	r30, r30
    4ea0:	ff 1f       	adc	r31, r31
    4ea2:	ee 0f       	add	r30, r30
    4ea4:	ff 1f       	adc	r31, r31
    4ea6:	e0 5e       	subi	r30, 0xE0	; 224
    4ea8:	f9 4d       	sbci	r31, 0xD9	; 217
    4eaa:	02 e0       	ldi	r16, 0x02	; 2
    4eac:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    4eae:	8c 91       	ld	r24, X
    4eb0:	80 ff       	sbrs	r24, 0
    4eb2:	22 c0       	rjmp	.+68     	; 0x4ef8 <udd_ep_abort+0x94>
		return; // No job on going
	}
	ptr_job->busy = false;
    4eb4:	8e 7f       	andi	r24, 0xFE	; 254
    4eb6:	8c 93       	st	X, r24
	if (NULL != ptr_job->call_trans) {
    4eb8:	17 96       	adiw	r26, 0x07	; 7
    4eba:	ed 91       	ld	r30, X+
    4ebc:	fc 91       	ld	r31, X
    4ebe:	18 97       	sbiw	r26, 0x08	; 8
    4ec0:	30 97       	sbiw	r30, 0x00	; 0
    4ec2:	d1 f0       	breq	.+52     	; 0x4ef8 <udd_ep_abort+0x94>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    4ec4:	11 23       	and	r17, r17
    4ec6:	5c f4       	brge	.+22     	; 0x4ede <udd_ep_abort+0x7a>
    4ec8:	cc 0f       	add	r28, r28
    4eca:	dd 1f       	adc	r29, r29
    4ecc:	cc 0f       	add	r28, r28
    4ece:	dd 1f       	adc	r29, r29
    4ed0:	cc 0f       	add	r28, r28
    4ed2:	dd 1f       	adc	r29, r29
    4ed4:	c0 5f       	subi	r28, 0xF0	; 240
    4ed6:	d9 4d       	sbci	r29, 0xD9	; 217
    4ed8:	6e 89       	ldd	r22, Y+22	; 0x16
    4eda:	7f 89       	ldd	r23, Y+23	; 0x17
    4edc:	0a c0       	rjmp	.+20     	; 0x4ef2 <udd_ep_abort+0x8e>
    4ede:	cc 0f       	add	r28, r28
    4ee0:	dd 1f       	adc	r29, r29
    4ee2:	cc 0f       	add	r28, r28
    4ee4:	dd 1f       	adc	r29, r29
    4ee6:	cc 0f       	add	r28, r28
    4ee8:	dd 1f       	adc	r29, r29
    4eea:	c0 5f       	subi	r28, 0xF0	; 240
    4eec:	d9 4d       	sbci	r29, 0xD9	; 217
    4eee:	6a 89       	ldd	r22, Y+18	; 0x12
    4ef0:	7b 89       	ldd	r23, Y+19	; 0x13
    4ef2:	41 2f       	mov	r20, r17
    4ef4:	81 e0       	ldi	r24, 0x01	; 1
    4ef6:	19 95       	eicall
>>>>>>> Stashed changes
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
<<<<<<< Updated upstream
    5292:	df 91       	pop	r29
    5294:	cf 91       	pop	r28
    5296:	1f 91       	pop	r17
    5298:	0f 91       	pop	r16
    529a:	ff 90       	pop	r15
    529c:	08 95       	ret

0000529e <udd_ep_free>:
=======
    4ef8:	df 91       	pop	r29
    4efa:	cf 91       	pop	r28
    4efc:	1f 91       	pop	r17
    4efe:	0f 91       	pop	r16
    4f00:	ff 90       	pop	r15
    4f02:	08 95       	ret

00004f04 <udd_ep_free>:
>>>>>>> Stashed changes
	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}

void udd_ep_free(udd_ep_id_t ep)
{
<<<<<<< Updated upstream
    529e:	cf 93       	push	r28
    52a0:	c8 2f       	mov	r28, r24
=======
    4f04:	cf 93       	push	r28
    4f06:	c8 2f       	mov	r28, r24
>>>>>>> Stashed changes
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
<<<<<<< Updated upstream
    52a2:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
=======
    4f08:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    52a6:	ec 2f       	mov	r30, r28
    52a8:	ef 70       	andi	r30, 0x0F	; 15
    52aa:	f0 e0       	ldi	r31, 0x00	; 0
    52ac:	ee 0f       	add	r30, r30
    52ae:	ff 1f       	adc	r31, r31
    52b0:	8c 2f       	mov	r24, r28
    52b2:	cc 0f       	add	r28, r28
    52b4:	99 0b       	sbc	r25, r25
    52b6:	88 27       	eor	r24, r24
    52b8:	99 0f       	add	r25, r25
    52ba:	88 1f       	adc	r24, r24
    52bc:	99 27       	eor	r25, r25
    52be:	e8 0f       	add	r30, r24
    52c0:	f9 1f       	adc	r31, r25
=======
    4f0c:	ec 2f       	mov	r30, r28
    4f0e:	ef 70       	andi	r30, 0x0F	; 15
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	ee 0f       	add	r30, r30
    4f14:	ff 1f       	adc	r31, r31
    4f16:	8c 2f       	mov	r24, r28
    4f18:	cc 0f       	add	r28, r28
    4f1a:	99 0b       	sbc	r25, r25
    4f1c:	88 27       	eor	r24, r24
    4f1e:	99 0f       	add	r25, r25
    4f20:	88 1f       	adc	r24, r24
    4f22:	99 27       	eor	r25, r25
    4f24:	e8 0f       	add	r30, r24
    4f26:	f9 1f       	adc	r31, r25
>>>>>>> Stashed changes
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
<<<<<<< Updated upstream
    52c2:	ee 0f       	add	r30, r30
    52c4:	ff 1f       	adc	r31, r31
    52c6:	ee 0f       	add	r30, r30
    52c8:	ff 1f       	adc	r31, r31
    52ca:	ee 0f       	add	r30, r30
    52cc:	ff 1f       	adc	r31, r31
    52ce:	e0 50       	subi	r30, 0x00	; 0
    52d0:	fa 4d       	sbci	r31, 0xDA	; 218
    52d2:	11 8a       	std	Z+17, r1	; 0x11
}
    52d4:	cf 91       	pop	r28
    52d6:	08 95       	ret

000052d8 <udd_ep_set_halt>:
=======
    4f28:	ee 0f       	add	r30, r30
    4f2a:	ff 1f       	adc	r31, r31
    4f2c:	ee 0f       	add	r30, r30
    4f2e:	ff 1f       	adc	r31, r31
    4f30:	ee 0f       	add	r30, r30
    4f32:	ff 1f       	adc	r31, r31
    4f34:	e0 5f       	subi	r30, 0xF0	; 240
    4f36:	f9 4d       	sbci	r31, 0xD9	; 217
    4f38:	11 8a       	std	Z+17, r1	; 0x11
}
    4f3a:	cf 91       	pop	r28
    4f3c:	08 95       	ret

00004f3e <udd_ep_set_halt>:
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    52d8:	e8 2f       	mov	r30, r24
    52da:	ef 70       	andi	r30, 0x0F	; 15
    52dc:	f0 e0       	ldi	r31, 0x00	; 0
    52de:	ee 0f       	add	r30, r30
    52e0:	ff 1f       	adc	r31, r31
    52e2:	28 2f       	mov	r18, r24
    52e4:	08 2e       	mov	r0, r24
    52e6:	00 0c       	add	r0, r0
    52e8:	33 0b       	sbc	r19, r19
    52ea:	22 27       	eor	r18, r18
    52ec:	33 0f       	add	r19, r19
    52ee:	22 1f       	adc	r18, r18
    52f0:	33 27       	eor	r19, r19
    52f2:	e2 0f       	add	r30, r18
    52f4:	f3 1f       	adc	r31, r19
=======
    4f3e:	e8 2f       	mov	r30, r24
    4f40:	ef 70       	andi	r30, 0x0F	; 15
    4f42:	f0 e0       	ldi	r31, 0x00	; 0
    4f44:	ee 0f       	add	r30, r30
    4f46:	ff 1f       	adc	r31, r31
    4f48:	28 2f       	mov	r18, r24
    4f4a:	08 2e       	mov	r0, r24
    4f4c:	00 0c       	add	r0, r0
    4f4e:	33 0b       	sbc	r19, r19
    4f50:	22 27       	eor	r18, r18
    4f52:	33 0f       	add	r19, r19
    4f54:	22 1f       	adc	r18, r18
    4f56:	33 27       	eor	r19, r19
    4f58:	e2 0f       	add	r30, r18
    4f5a:	f3 1f       	adc	r31, r19
>>>>>>> Stashed changes
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_enable_stall(ep_ctrl);
<<<<<<< Updated upstream
    52f6:	ee 0f       	add	r30, r30
    52f8:	ff 1f       	adc	r31, r31
    52fa:	ee 0f       	add	r30, r30
    52fc:	ff 1f       	adc	r31, r31
    52fe:	ee 0f       	add	r30, r30
    5300:	ff 1f       	adc	r31, r31
    5302:	e0 50       	subi	r30, 0x00	; 0
    5304:	fa 4d       	sbci	r31, 0xDA	; 218
    5306:	91 89       	ldd	r25, Z+17	; 0x11
    5308:	94 60       	ori	r25, 0x04	; 4
    530a:	91 8b       	std	Z+17, r25	; 0x11

	udd_ep_abort(ep);
    530c:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
	return true;
}
    5310:	81 e0       	ldi	r24, 0x01	; 1
    5312:	08 95       	ret

00005314 <udd_ep_wait_stall_clear>:
=======
    4f5c:	ee 0f       	add	r30, r30
    4f5e:	ff 1f       	adc	r31, r31
    4f60:	ee 0f       	add	r30, r30
    4f62:	ff 1f       	adc	r31, r31
    4f64:	ee 0f       	add	r30, r30
    4f66:	ff 1f       	adc	r31, r31
    4f68:	e0 5f       	subi	r30, 0xF0	; 240
    4f6a:	f9 4d       	sbci	r31, 0xD9	; 217
    4f6c:	91 89       	ldd	r25, Z+17	; 0x11
    4f6e:	94 60       	ori	r25, 0x04	; 4
    4f70:	91 8b       	std	Z+17, r25	; 0x11

	udd_ep_abort(ep);
    4f72:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
	return true;
}
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	08 95       	ret

00004f7a <udd_ep_wait_stall_clear>:
>>>>>>> Stashed changes
	}
}

bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
<<<<<<< Updated upstream
    5314:	0f 93       	push	r16
    5316:	1f 93       	push	r17
    5318:	cf 93       	push	r28
    531a:	df 93       	push	r29
    531c:	8b 01       	movw	r16, r22
=======
    4f7a:	0f 93       	push	r16
    4f7c:	1f 93       	push	r17
    4f7e:	cf 93       	push	r28
    4f80:	df 93       	push	r29
    4f82:	8b 01       	movw	r16, r22
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    531e:	c8 2f       	mov	r28, r24
    5320:	cf 70       	andi	r28, 0x0F	; 15
    5322:	d0 e0       	ldi	r29, 0x00	; 0
    5324:	cc 0f       	add	r28, r28
    5326:	dd 1f       	adc	r29, r29
    5328:	28 2f       	mov	r18, r24
    532a:	08 2e       	mov	r0, r24
    532c:	00 0c       	add	r0, r0
    532e:	33 0b       	sbc	r19, r19
    5330:	22 27       	eor	r18, r18
    5332:	33 0f       	add	r19, r19
    5334:	22 1f       	adc	r18, r18
    5336:	33 27       	eor	r19, r19
    5338:	c2 0f       	add	r28, r18
    533a:	d3 1f       	adc	r29, r19
=======
    4f84:	c8 2f       	mov	r28, r24
    4f86:	cf 70       	andi	r28, 0x0F	; 15
    4f88:	d0 e0       	ldi	r29, 0x00	; 0
    4f8a:	cc 0f       	add	r28, r28
    4f8c:	dd 1f       	adc	r29, r29
    4f8e:	28 2f       	mov	r18, r24
    4f90:	08 2e       	mov	r0, r24
    4f92:	00 0c       	add	r0, r0
    4f94:	33 0b       	sbc	r19, r19
    4f96:	22 27       	eor	r18, r18
    4f98:	33 0f       	add	r19, r19
    4f9a:	22 1f       	adc	r18, r18
    4f9c:	33 27       	eor	r19, r19
    4f9e:	c2 0f       	add	r28, r18
    4fa0:	d3 1f       	adc	r29, r19
>>>>>>> Stashed changes
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
<<<<<<< Updated upstream
    533c:	0e 94 3c 24 	call	0x4878	; 0x4878 <udd_ep_get_job>

	if (udd_endpoint_is_stall(ep_ctrl)) {
    5340:	cc 0f       	add	r28, r28
    5342:	dd 1f       	adc	r29, r29
    5344:	cc 0f       	add	r28, r28
    5346:	dd 1f       	adc	r29, r29
    5348:	cc 0f       	add	r28, r28
    534a:	dd 1f       	adc	r29, r29
    534c:	c0 50       	subi	r28, 0x00	; 0
    534e:	da 4d       	sbci	r29, 0xDA	; 218
    5350:	29 89       	ldd	r18, Y+17	; 0x11
    5352:	22 ff       	sbrs	r18, 2
    5354:	0a c0       	rjmp	.+20     	; 0x536a <udd_ep_wait_stall_clear+0x56>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    5356:	fc 01       	movw	r30, r24
    5358:	20 81       	ld	r18, Z
    535a:	20 fd       	sbrc	r18, 0
    535c:	0a c0       	rjmp	.+20     	; 0x5372 <udd_ep_wait_stall_clear+0x5e>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    535e:	21 60       	ori	r18, 0x01	; 1
    5360:	20 83       	st	Z, r18
		ptr_job->call_nohalt = callback;
    5362:	07 83       	std	Z+7, r16	; 0x07
    5364:	10 87       	std	Z+8, r17	; 0x08
=======
    4fa2:	0e 94 6f 22 	call	0x44de	; 0x44de <udd_ep_get_job>

	if (udd_endpoint_is_stall(ep_ctrl)) {
    4fa6:	cc 0f       	add	r28, r28
    4fa8:	dd 1f       	adc	r29, r29
    4faa:	cc 0f       	add	r28, r28
    4fac:	dd 1f       	adc	r29, r29
    4fae:	cc 0f       	add	r28, r28
    4fb0:	dd 1f       	adc	r29, r29
    4fb2:	c0 5f       	subi	r28, 0xF0	; 240
    4fb4:	d9 4d       	sbci	r29, 0xD9	; 217
    4fb6:	29 89       	ldd	r18, Y+17	; 0x11
    4fb8:	22 ff       	sbrs	r18, 2
    4fba:	0a c0       	rjmp	.+20     	; 0x4fd0 <udd_ep_wait_stall_clear+0x56>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    4fbc:	fc 01       	movw	r30, r24
    4fbe:	20 81       	ld	r18, Z
    4fc0:	20 fd       	sbrc	r18, 0
    4fc2:	0a c0       	rjmp	.+20     	; 0x4fd8 <udd_ep_wait_stall_clear+0x5e>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    4fc4:	21 60       	ori	r18, 0x01	; 1
    4fc6:	20 83       	st	Z, r18
		ptr_job->call_nohalt = callback;
    4fc8:	07 83       	std	Z+7, r16	; 0x07
    4fca:	10 87       	std	Z+8, r17	; 0x08
>>>>>>> Stashed changes
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
<<<<<<< Updated upstream
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	05 c0       	rjmp	.+10     	; 0x5374 <udd_ep_wait_stall_clear+0x60>
=======
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	05 c0       	rjmp	.+10     	; 0x4fda <udd_ep_wait_stall_clear+0x60>
>>>>>>> Stashed changes
		}
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
<<<<<<< Updated upstream
    536a:	f8 01       	movw	r30, r16
    536c:	19 95       	eicall
	}
	return true;
    536e:	81 e0       	ldi	r24, 0x01	; 1
    5370:	01 c0       	rjmp	.+2      	; 0x5374 <udd_ep_wait_stall_clear+0x60>
=======
    4fd0:	f8 01       	movw	r30, r16
    4fd2:	19 95       	eicall
	}
	return true;
    4fd4:	81 e0       	ldi	r24, 0x01	; 1
    4fd6:	01 c0       	rjmp	.+2      	; 0x4fda <udd_ep_wait_stall_clear+0x60>
>>>>>>> Stashed changes
	ptr_job = udd_ep_get_job(ep);

	if (udd_endpoint_is_stall(ep_ctrl)) {
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
			return false; // Job already on going
<<<<<<< Updated upstream
    5372:	80 e0       	ldi	r24, 0x00	; 0
=======
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> Stashed changes
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
<<<<<<< Updated upstream
    5374:	df 91       	pop	r29
    5376:	cf 91       	pop	r28
    5378:	1f 91       	pop	r17
    537a:	0f 91       	pop	r16
    537c:	08 95       	ret

0000537e <__vector_125>:
=======
    4fda:	df 91       	pop	r29
    4fdc:	cf 91       	pop	r28
    4fde:	1f 91       	pop	r17
    4fe0:	0f 91       	pop	r16
    4fe2:	08 95       	ret

00004fe4 <__vector_125>:
>>>>>>> Stashed changes
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
<<<<<<< Updated upstream
    537e:	1f 92       	push	r1
    5380:	0f 92       	push	r0
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	0f 92       	push	r0
    5386:	11 24       	eor	r1, r1
    5388:	08 b6       	in	r0, 0x38	; 56
    538a:	0f 92       	push	r0
    538c:	18 be       	out	0x38, r1	; 56
    538e:	09 b6       	in	r0, 0x39	; 57
    5390:	0f 92       	push	r0
    5392:	19 be       	out	0x39, r1	; 57
    5394:	0b b6       	in	r0, 0x3b	; 59
    5396:	0f 92       	push	r0
    5398:	1b be       	out	0x3b, r1	; 59
    539a:	0f 93       	push	r16
    539c:	2f 93       	push	r18
    539e:	3f 93       	push	r19
    53a0:	4f 93       	push	r20
    53a2:	5f 93       	push	r21
    53a4:	6f 93       	push	r22
    53a6:	7f 93       	push	r23
    53a8:	8f 93       	push	r24
    53aa:	9f 93       	push	r25
    53ac:	af 93       	push	r26
    53ae:	bf 93       	push	r27
    53b0:	ef 93       	push	r30
    53b2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    53b4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    53b8:	88 23       	and	r24, r24
    53ba:	34 f4       	brge	.+12     	; 0x53c8 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    53bc:	80 e8       	ldi	r24, 0x80	; 128
    53be:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    53c2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <udc_sof_notify>
=======
    4fe4:	1f 92       	push	r1
    4fe6:	0f 92       	push	r0
    4fe8:	0f b6       	in	r0, 0x3f	; 63
    4fea:	0f 92       	push	r0
    4fec:	11 24       	eor	r1, r1
    4fee:	08 b6       	in	r0, 0x38	; 56
    4ff0:	0f 92       	push	r0
    4ff2:	18 be       	out	0x38, r1	; 56
    4ff4:	09 b6       	in	r0, 0x39	; 57
    4ff6:	0f 92       	push	r0
    4ff8:	19 be       	out	0x39, r1	; 57
    4ffa:	0b b6       	in	r0, 0x3b	; 59
    4ffc:	0f 92       	push	r0
    4ffe:	1b be       	out	0x3b, r1	; 59
    5000:	0f 93       	push	r16
    5002:	2f 93       	push	r18
    5004:	3f 93       	push	r19
    5006:	4f 93       	push	r20
    5008:	5f 93       	push	r21
    500a:	6f 93       	push	r22
    500c:	7f 93       	push	r23
    500e:	8f 93       	push	r24
    5010:	9f 93       	push	r25
    5012:	af 93       	push	r26
    5014:	bf 93       	push	r27
    5016:	ef 93       	push	r30
    5018:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    501a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    501e:	88 23       	and	r24, r24
    5020:	34 f4       	brge	.+12     	; 0x502e <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    5022:	80 e8       	ldi	r24, 0x80	; 128
    5024:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    5028:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <udc_sof_notify>
>>>>>>> Stashed changes
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
<<<<<<< Updated upstream
    53c6:	90 c0       	rjmp	.+288    	; 0x54e8 <__vector_125+0x16a>
=======
    502c:	90 c0       	rjmp	.+288    	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
<<<<<<< Updated upstream
    53c8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    53cc:	82 ff       	sbrs	r24, 2
    53ce:	22 c0       	rjmp	.+68     	; 0x5414 <__vector_125+0x96>
		udd_ack_underflow_event();
    53d0:	84 e0       	ldi	r24, 0x04	; 4
    53d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    53d6:	80 91 18 26 	lds	r24, 0x2618	; 0x802618 <udd_sram+0x18>
    53da:	86 ff       	sbrs	r24, 6
    53dc:	85 c0       	rjmp	.+266    	; 0x54e8 <__vector_125+0x16a>
=======
    502e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5032:	82 ff       	sbrs	r24, 2
    5034:	22 c0       	rjmp	.+68     	; 0x507a <__vector_125+0x96>
		udd_ack_underflow_event();
    5036:	84 e0       	ldi	r24, 0x04	; 4
    5038:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    503c:	80 91 28 26 	lds	r24, 0x2628	; 0x802628 <udd_sram+0x18>
    5040:	86 ff       	sbrs	r24, 6
    5042:	85 c0       	rjmp	.+266    	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
<<<<<<< Updated upstream
    53de:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    53e2:	81 fd       	sbrc	r24, 1
    53e4:	81 c0       	rjmp	.+258    	; 0x54e8 <__vector_125+0x16a>
    53e6:	0e 94 57 24 	call	0x48ae	; 0x48ae <udd_ctrl_interrupt_tc_setup>
    53ea:	81 11       	cpse	r24, r1
    53ec:	7d c0       	rjmp	.+250    	; 0x54e8 <__vector_125+0x16a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    53ee:	80 91 f1 25 	lds	r24, 0x25F1	; 0x8025f1 <udd_ep_control_state>
    53f2:	81 30       	cpi	r24, 0x01	; 1
    53f4:	19 f4       	brne	.+6      	; 0x53fc <__vector_125+0x7e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    53f6:	0e 94 8f 23 	call	0x471e	; 0x471e <udd_ctrl_send_zlp_in>
    53fa:	76 c0       	rjmp	.+236    	; 0x54e8 <__vector_125+0x16a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    53fc:	84 30       	cpi	r24, 0x04	; 4
    53fe:	09 f0       	breq	.+2      	; 0x5402 <__vector_125+0x84>
    5400:	73 c0       	rjmp	.+230    	; 0x54e8 <__vector_125+0x16a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5402:	e9 e1       	ldi	r30, 0x19	; 25
    5404:	f6 e2       	ldi	r31, 0x26	; 38
    5406:	04 e0       	ldi	r16, 0x04	; 4
    5408:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    540a:	e1 e1       	ldi	r30, 0x11	; 17
    540c:	f6 e2       	ldi	r31, 0x26	; 38
    540e:	04 e0       	ldi	r16, 0x04	; 4
    5410:	05 93       	las	Z, r16
    5412:	6a c0       	rjmp	.+212    	; 0x54e8 <__vector_125+0x16a>
=======
    5044:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5048:	81 fd       	sbrc	r24, 1
    504a:	81 c0       	rjmp	.+258    	; 0x514e <__vector_125+0x16a>
    504c:	0e 94 8a 22 	call	0x4514	; 0x4514 <udd_ctrl_interrupt_tc_setup>
    5050:	81 11       	cpse	r24, r1
    5052:	7d c0       	rjmp	.+250    	; 0x514e <__vector_125+0x16a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5054:	80 91 01 26 	lds	r24, 0x2601	; 0x802601 <udd_ep_control_state>
    5058:	81 30       	cpi	r24, 0x01	; 1
    505a:	19 f4       	brne	.+6      	; 0x5062 <__vector_125+0x7e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    505c:	0e 94 c2 21 	call	0x4384	; 0x4384 <udd_ctrl_send_zlp_in>
    5060:	76 c0       	rjmp	.+236    	; 0x514e <__vector_125+0x16a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5062:	84 30       	cpi	r24, 0x04	; 4
    5064:	09 f0       	breq	.+2      	; 0x5068 <__vector_125+0x84>
    5066:	73 c0       	rjmp	.+230    	; 0x514e <__vector_125+0x16a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    5068:	e9 e2       	ldi	r30, 0x29	; 41
    506a:	f6 e2       	ldi	r31, 0x26	; 38
    506c:	04 e0       	ldi	r16, 0x04	; 4
    506e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5070:	e1 e2       	ldi	r30, 0x21	; 33
    5072:	f6 e2       	ldi	r31, 0x26	; 38
    5074:	04 e0       	ldi	r16, 0x04	; 4
    5076:	05 93       	las	Z, r16
    5078:	6a c0       	rjmp	.+212    	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
<<<<<<< Updated upstream
    5414:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5418:	81 ff       	sbrs	r24, 1
    541a:	61 c0       	rjmp	.+194    	; 0x54de <__vector_125+0x160>
		udd_ack_overflow_event();
    541c:	82 e0       	ldi	r24, 0x02	; 2
    541e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5422:	80 91 10 26 	lds	r24, 0x2610	; 0x802610 <udd_sram+0x10>
    5426:	86 ff       	sbrs	r24, 6
    5428:	5f c0       	rjmp	.+190    	; 0x54e8 <__vector_125+0x16a>
=======
    507a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    507e:	81 ff       	sbrs	r24, 1
    5080:	61 c0       	rjmp	.+194    	; 0x5144 <__vector_125+0x160>
		udd_ack_overflow_event();
    5082:	82 e0       	ldi	r24, 0x02	; 2
    5084:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    5088:	80 91 20 26 	lds	r24, 0x2620	; 0x802620 <udd_sram+0x10>
    508c:	86 ff       	sbrs	r24, 6
    508e:	5f c0       	rjmp	.+190    	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
<<<<<<< Updated upstream
    542a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    542e:	81 fd       	sbrc	r24, 1
    5430:	5b c0       	rjmp	.+182    	; 0x54e8 <__vector_125+0x16a>
    5432:	0e 94 57 24 	call	0x48ae	; 0x48ae <udd_ctrl_interrupt_tc_setup>
    5436:	81 11       	cpse	r24, r1
    5438:	57 c0       	rjmp	.+174    	; 0x54e8 <__vector_125+0x16a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    543a:	80 91 f1 25 	lds	r24, 0x25F1	; 0x8025f1 <udd_ep_control_state>
    543e:	82 30       	cpi	r24, 0x02	; 2
    5440:	41 f4       	brne	.+16     	; 0x5452 <__vector_125+0xd4>
=======
    5090:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5094:	81 fd       	sbrc	r24, 1
    5096:	5b c0       	rjmp	.+182    	; 0x514e <__vector_125+0x16a>
    5098:	0e 94 8a 22 	call	0x4514	; 0x4514 <udd_ctrl_interrupt_tc_setup>
    509c:	81 11       	cpse	r24, r1
    509e:	57 c0       	rjmp	.+174    	; 0x514e <__vector_125+0x16a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    50a0:	80 91 01 26 	lds	r24, 0x2601	; 0x802601 <udd_ep_control_state>
    50a4:	82 30       	cpi	r24, 0x02	; 2
    50a6:	41 f4       	brne	.+16     	; 0x50b8 <__vector_125+0xd4>
>>>>>>> Stashed changes
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
<<<<<<< Updated upstream
    5442:	84 e0       	ldi	r24, 0x04	; 4
    5444:	80 93 f1 25 	sts	0x25F1, r24	; 0x8025f1 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5448:	e0 e1       	ldi	r30, 0x10	; 16
    544a:	f6 e2       	ldi	r31, 0x26	; 38
    544c:	02 e0       	ldi	r16, 0x02	; 2
    544e:	06 93       	lac	Z, r16
    5450:	4b c0       	rjmp	.+150    	; 0x54e8 <__vector_125+0x16a>
=======
    50a8:	84 e0       	ldi	r24, 0x04	; 4
    50aa:	80 93 01 26 	sts	0x2601, r24	; 0x802601 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    50ae:	e0 e2       	ldi	r30, 0x20	; 32
    50b0:	f6 e2       	ldi	r31, 0x26	; 38
    50b2:	02 e0       	ldi	r16, 0x02	; 2
    50b4:	06 93       	lac	Z, r16
    50b6:	4b c0       	rjmp	.+150    	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
<<<<<<< Updated upstream
    5452:	83 30       	cpi	r24, 0x03	; 3
    5454:	09 f0       	breq	.+2      	; 0x5458 <__vector_125+0xda>
    5456:	48 c0       	rjmp	.+144    	; 0x54e8 <__vector_125+0x16a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5458:	e9 e1       	ldi	r30, 0x19	; 25
    545a:	f6 e2       	ldi	r31, 0x26	; 38
    545c:	04 e0       	ldi	r16, 0x04	; 4
    545e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5460:	e1 e1       	ldi	r30, 0x11	; 17
    5462:	f6 e2       	ldi	r31, 0x26	; 38
    5464:	04 e0       	ldi	r16, 0x04	; 4
    5466:	05 93       	las	Z, r16
    5468:	3f c0       	rjmp	.+126    	; 0x54e8 <__vector_125+0x16a>
=======
    50b8:	83 30       	cpi	r24, 0x03	; 3
    50ba:	09 f0       	breq	.+2      	; 0x50be <__vector_125+0xda>
    50bc:	48 c0       	rjmp	.+144    	; 0x514e <__vector_125+0x16a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    50be:	e9 e2       	ldi	r30, 0x29	; 41
    50c0:	f6 e2       	ldi	r31, 0x26	; 38
    50c2:	04 e0       	ldi	r16, 0x04	; 4
    50c4:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    50c6:	e1 e2       	ldi	r30, 0x21	; 33
    50c8:	f6 e2       	ldi	r31, 0x26	; 38
    50ca:	04 e0       	ldi	r16, 0x04	; 4
    50cc:	05 93       	las	Z, r16
    50ce:	3f c0       	rjmp	.+126    	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
<<<<<<< Updated upstream
    546a:	80 e1       	ldi	r24, 0x10	; 16
    546c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
=======
    50d0:	80 e1       	ldi	r24, 0x10	; 16
    50d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
>>>>>>> Stashed changes
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
<<<<<<< Updated upstream
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5476:	81 e8       	ldi	r24, 0x81	; 129
    5478:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
=======
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    50dc:	81 e8       	ldi	r24, 0x81	; 129
    50de:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
>>>>>>> Stashed changes
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
<<<<<<< Updated upstream
    547c:	82 e0       	ldi	r24, 0x02	; 2
    547e:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5482:	82 e8       	ldi	r24, 0x82	; 130
    5484:	0e 94 ff 28 	call	0x51fe	; 0x51fe <udd_ep_abort>
		}
#endif
		udc_reset();
    5488:	0e 94 27 20 	call	0x404e	; 0x404e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    548c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
=======
    50e2:	82 e0       	ldi	r24, 0x02	; 2
    50e4:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    50e8:	82 e8       	ldi	r24, 0x82	; 130
    50ea:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_abort>
		}
#endif
		udc_reset();
    50ee:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    50f2:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
>>>>>>> Stashed changes
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
<<<<<<< Updated upstream
    5490:	e0 e0       	ldi	r30, 0x00	; 0
    5492:	f6 e2       	ldi	r31, 0x26	; 38
    5494:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    5496:	96 e0       	ldi	r25, 0x06	; 6
    5498:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    549a:	83 e4       	ldi	r24, 0x43	; 67
    549c:	81 8b       	std	Z+17, r24	; 0x11
=======
    50f6:	e0 e1       	ldi	r30, 0x10	; 16
    50f8:	f6 e2       	ldi	r31, 0x26	; 38
    50fa:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    50fc:	96 e0       	ldi	r25, 0x06	; 6
    50fe:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5100:	83 e4       	ldi	r24, 0x43	; 67
    5102:	81 8b       	std	Z+17, r24	; 0x11
>>>>>>> Stashed changes
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
<<<<<<< Updated upstream
    549e:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    54a0:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    54a2:	81 8f       	std	Z+25, r24	; 0x19
=======
    5104:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    5106:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5108:	81 8f       	std	Z+25, r24	; 0x19
>>>>>>> Stashed changes
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
<<<<<<< Updated upstream
    54a4:	8d ea       	ldi	r24, 0xAD	; 173
    54a6:	95 e2       	ldi	r25, 0x25	; 37
    54a8:	84 8b       	std	Z+20, r24	; 0x14
    54aa:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    54ac:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    54b0:	1b c0       	rjmp	.+54     	; 0x54e8 <__vector_125+0x16a>
	}

	if (udd_is_suspend_event()) {
    54b2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    54b6:	86 ff       	sbrs	r24, 6
    54b8:	07 c0       	rjmp	.+14     	; 0x54c8 <__vector_125+0x14a>
		udd_ack_suspend_event();
    54ba:	80 e4       	ldi	r24, 0x40	; 64
    54bc:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	0e 94 24 23 	call	0x4648	; 0x4648 <udd_sleep_mode>
=======
    510a:	8d eb       	ldi	r24, 0xBD	; 189
    510c:	95 e2       	ldi	r25, 0x25	; 37
    510e:	84 8b       	std	Z+20, r24	; 0x14
    5110:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    5112:	0e 94 8f 21 	call	0x431e	; 0x431e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    5116:	1b c0       	rjmp	.+54     	; 0x514e <__vector_125+0x16a>
	}

	if (udd_is_suspend_event()) {
    5118:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    511c:	86 ff       	sbrs	r24, 6
    511e:	07 c0       	rjmp	.+14     	; 0x512e <__vector_125+0x14a>
		udd_ack_suspend_event();
    5120:	80 e4       	ldi	r24, 0x40	; 64
    5122:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    5126:	80 e0       	ldi	r24, 0x00	; 0
    5128:	0e 94 57 21 	call	0x42ae	; 0x42ae <udd_sleep_mode>
>>>>>>> Stashed changes
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
<<<<<<< Updated upstream
    54c6:	10 c0       	rjmp	.+32     	; 0x54e8 <__vector_125+0x16a>
	}

	if (udd_is_resume_event()) {
    54c8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    54cc:	85 ff       	sbrs	r24, 5
    54ce:	0c c0       	rjmp	.+24     	; 0x54e8 <__vector_125+0x16a>
		udd_ack_resume_event();
    54d0:	80 e2       	ldi	r24, 0x20	; 32
    54d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	0e 94 24 23 	call	0x4648	; 0x4648 <udd_sleep_mode>
=======
    512c:	10 c0       	rjmp	.+32     	; 0x514e <__vector_125+0x16a>
	}

	if (udd_is_resume_event()) {
    512e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5132:	85 ff       	sbrs	r24, 5
    5134:	0c c0       	rjmp	.+24     	; 0x514e <__vector_125+0x16a>
		udd_ack_resume_event();
    5136:	80 e2       	ldi	r24, 0x20	; 32
    5138:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	0e 94 57 21 	call	0x42ae	; 0x42ae <udd_sleep_mode>
>>>>>>> Stashed changes
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
<<<<<<< Updated upstream
    54dc:	05 c0       	rjmp	.+10     	; 0x54e8 <__vector_125+0x16a>
=======
    5142:	05 c0       	rjmp	.+10     	; 0x514e <__vector_125+0x16a>
>>>>>>> Stashed changes
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
<<<<<<< Updated upstream
    54de:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    54e2:	84 fd       	sbrc	r24, 4
    54e4:	c2 cf       	rjmp	.-124    	; 0x546a <__vector_125+0xec>
    54e6:	e5 cf       	rjmp	.-54     	; 0x54b2 <__vector_125+0x134>
=======
    5144:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5148:	84 fd       	sbrc	r24, 4
    514a:	c2 cf       	rjmp	.-124    	; 0x50d0 <__vector_125+0xec>
    514c:	e5 cf       	rjmp	.-54     	; 0x5118 <__vector_125+0x134>
>>>>>>> Stashed changes
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
<<<<<<< Updated upstream
    54e8:	ff 91       	pop	r31
    54ea:	ef 91       	pop	r30
    54ec:	bf 91       	pop	r27
    54ee:	af 91       	pop	r26
    54f0:	9f 91       	pop	r25
    54f2:	8f 91       	pop	r24
    54f4:	7f 91       	pop	r23
    54f6:	6f 91       	pop	r22
    54f8:	5f 91       	pop	r21
    54fa:	4f 91       	pop	r20
    54fc:	3f 91       	pop	r19
    54fe:	2f 91       	pop	r18
    5500:	0f 91       	pop	r16
    5502:	0f 90       	pop	r0
    5504:	0b be       	out	0x3b, r0	; 59
    5506:	0f 90       	pop	r0
    5508:	09 be       	out	0x39, r0	; 57
    550a:	0f 90       	pop	r0
    550c:	08 be       	out	0x38, r0	; 56
    550e:	0f 90       	pop	r0
    5510:	0f be       	out	0x3f, r0	; 63
    5512:	0f 90       	pop	r0
    5514:	1f 90       	pop	r1
    5516:	18 95       	reti

00005518 <__vector_126>:
=======
    514e:	ff 91       	pop	r31
    5150:	ef 91       	pop	r30
    5152:	bf 91       	pop	r27
    5154:	af 91       	pop	r26
    5156:	9f 91       	pop	r25
    5158:	8f 91       	pop	r24
    515a:	7f 91       	pop	r23
    515c:	6f 91       	pop	r22
    515e:	5f 91       	pop	r21
    5160:	4f 91       	pop	r20
    5162:	3f 91       	pop	r19
    5164:	2f 91       	pop	r18
    5166:	0f 91       	pop	r16
    5168:	0f 90       	pop	r0
    516a:	0b be       	out	0x3b, r0	; 59
    516c:	0f 90       	pop	r0
    516e:	09 be       	out	0x39, r0	; 57
    5170:	0f 90       	pop	r0
    5172:	08 be       	out	0x38, r0	; 56
    5174:	0f 90       	pop	r0
    5176:	0f be       	out	0x3f, r0	; 63
    5178:	0f 90       	pop	r0
    517a:	1f 90       	pop	r1
    517c:	18 95       	reti

0000517e <__vector_126>:
>>>>>>> Stashed changes
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
<<<<<<< Updated upstream
    5518:	1f 92       	push	r1
    551a:	0f 92       	push	r0
    551c:	0f b6       	in	r0, 0x3f	; 63
    551e:	0f 92       	push	r0
    5520:	11 24       	eor	r1, r1
    5522:	08 b6       	in	r0, 0x38	; 56
    5524:	0f 92       	push	r0
    5526:	18 be       	out	0x38, r1	; 56
    5528:	09 b6       	in	r0, 0x39	; 57
    552a:	0f 92       	push	r0
    552c:	19 be       	out	0x39, r1	; 57
    552e:	0a b6       	in	r0, 0x3a	; 58
    5530:	0f 92       	push	r0
    5532:	1a be       	out	0x3a, r1	; 58
    5534:	0b b6       	in	r0, 0x3b	; 59
    5536:	0f 92       	push	r0
    5538:	1b be       	out	0x3b, r1	; 59
    553a:	0f 93       	push	r16
    553c:	1f 93       	push	r17
    553e:	2f 93       	push	r18
    5540:	3f 93       	push	r19
    5542:	4f 93       	push	r20
    5544:	5f 93       	push	r21
    5546:	6f 93       	push	r22
    5548:	7f 93       	push	r23
    554a:	8f 93       	push	r24
    554c:	9f 93       	push	r25
    554e:	af 93       	push	r26
    5550:	bf 93       	push	r27
    5552:	cf 93       	push	r28
    5554:	df 93       	push	r29
    5556:	ef 93       	push	r30
    5558:	ff 93       	push	r31
=======
    517e:	1f 92       	push	r1
    5180:	0f 92       	push	r0
    5182:	0f b6       	in	r0, 0x3f	; 63
    5184:	0f 92       	push	r0
    5186:	11 24       	eor	r1, r1
    5188:	08 b6       	in	r0, 0x38	; 56
    518a:	0f 92       	push	r0
    518c:	18 be       	out	0x38, r1	; 56
    518e:	09 b6       	in	r0, 0x39	; 57
    5190:	0f 92       	push	r0
    5192:	19 be       	out	0x39, r1	; 57
    5194:	0a b6       	in	r0, 0x3a	; 58
    5196:	0f 92       	push	r0
    5198:	1a be       	out	0x3a, r1	; 58
    519a:	0b b6       	in	r0, 0x3b	; 59
    519c:	0f 92       	push	r0
    519e:	1b be       	out	0x3b, r1	; 59
    51a0:	0f 93       	push	r16
    51a2:	1f 93       	push	r17
    51a4:	2f 93       	push	r18
    51a6:	3f 93       	push	r19
    51a8:	4f 93       	push	r20
    51aa:	5f 93       	push	r21
    51ac:	6f 93       	push	r22
    51ae:	7f 93       	push	r23
    51b0:	8f 93       	push	r24
    51b2:	9f 93       	push	r25
    51b4:	af 93       	push	r26
    51b6:	bf 93       	push	r27
    51b8:	cf 93       	push	r28
    51ba:	df 93       	push	r29
    51bc:	ef 93       	push	r30
    51be:	ff 93       	push	r31
>>>>>>> Stashed changes
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
<<<<<<< Updated upstream
    555a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    555e:	81 fd       	sbrc	r24, 1
    5560:	04 c0       	rjmp	.+8      	; 0x556a <__vector_126+0x52>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5562:	0e 94 57 24 	call	0x48ae	; 0x48ae <udd_ctrl_interrupt_tc_setup>
    5566:	81 11       	cpse	r24, r1
    5568:	c4 c0       	rjmp	.+392    	; 0x56f2 <__vector_126+0x1da>
=======
    51c0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    51c4:	81 fd       	sbrc	r24, 1
    51c6:	04 c0       	rjmp	.+8      	; 0x51d0 <__vector_126+0x52>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    51c8:	0e 94 8a 22 	call	0x4514	; 0x4514 <udd_ctrl_interrupt_tc_setup>
    51cc:	81 11       	cpse	r24, r1
    51ce:	c4 c0       	rjmp	.+392    	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
<<<<<<< Updated upstream
    556a:	82 e0       	ldi	r24, 0x02	; 2
    556c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
=======
    51d0:	82 e0       	ldi	r24, 0x02	; 2
    51d2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
>>>>>>> Stashed changes

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
<<<<<<< Updated upstream
    5570:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
=======
    51d6:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
>>>>>>> Stashed changes
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
<<<<<<< Updated upstream
    5574:	81 95       	neg	r24
    5576:	88 0f       	add	r24, r24
    5578:	e0 e1       	ldi	r30, 0x10	; 16
    557a:	f6 e2       	ldi	r31, 0x26	; 38
    557c:	e8 1b       	sub	r30, r24
    557e:	f1 09       	sbc	r31, r1
    5580:	20 81       	ld	r18, Z
    5582:	31 81       	ldd	r19, Z+1	; 0x01
    5584:	20 51       	subi	r18, 0x10	; 16
    5586:	36 42       	sbci	r19, 0x26	; 38
    5588:	36 95       	lsr	r19
    558a:	27 95       	ror	r18
    558c:	36 95       	lsr	r19
    558e:	27 95       	ror	r18
    5590:	36 95       	lsr	r19
    5592:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5594:	82 2f       	mov	r24, r18
    5596:	86 95       	lsr	r24
    5598:	20 fd       	sbrc	r18, 0
    559a:	02 c0       	rjmp	.+4      	; 0x55a0 <__vector_126+0x88>
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	01 c0       	rjmp	.+2      	; 0x55a2 <__vector_126+0x8a>
    55a0:	90 e8       	ldi	r25, 0x80	; 128
    55a2:	89 0f       	add	r24, r25
=======
    51da:	81 95       	neg	r24
    51dc:	88 0f       	add	r24, r24
    51de:	e0 e2       	ldi	r30, 0x20	; 32
    51e0:	f6 e2       	ldi	r31, 0x26	; 38
    51e2:	e8 1b       	sub	r30, r24
    51e4:	f1 09       	sbc	r31, r1
    51e6:	20 81       	ld	r18, Z
    51e8:	31 81       	ldd	r19, Z+1	; 0x01
    51ea:	20 52       	subi	r18, 0x20	; 32
    51ec:	36 42       	sbci	r19, 0x26	; 38
    51ee:	36 95       	lsr	r19
    51f0:	27 95       	ror	r18
    51f2:	36 95       	lsr	r19
    51f4:	27 95       	ror	r18
    51f6:	36 95       	lsr	r19
    51f8:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    51fa:	82 2f       	mov	r24, r18
    51fc:	86 95       	lsr	r24
    51fe:	20 fd       	sbrc	r18, 0
    5200:	02 c0       	rjmp	.+4      	; 0x5206 <__vector_126+0x88>
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	01 c0       	rjmp	.+2      	; 0x5208 <__vector_126+0x8a>
    5206:	90 e8       	ldi	r25, 0x80	; 128
    5208:	89 0f       	add	r24, r25
>>>>>>> Stashed changes
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
<<<<<<< Updated upstream
    55a4:	e8 2f       	mov	r30, r24
    55a6:	ef 70       	andi	r30, 0x0F	; 15
    55a8:	f0 e0       	ldi	r31, 0x00	; 0
    55aa:	ee 0f       	add	r30, r30
    55ac:	ff 1f       	adc	r31, r31
    55ae:	28 2f       	mov	r18, r24
    55b0:	08 2e       	mov	r0, r24
    55b2:	00 0c       	add	r0, r0
    55b4:	33 0b       	sbc	r19, r19
    55b6:	22 27       	eor	r18, r18
    55b8:	33 0f       	add	r19, r19
    55ba:	22 1f       	adc	r18, r18
    55bc:	33 27       	eor	r19, r19
    55be:	e2 0f       	add	r30, r18
    55c0:	f3 1f       	adc	r31, r19
=======
    520a:	e8 2f       	mov	r30, r24
    520c:	ef 70       	andi	r30, 0x0F	; 15
    520e:	f0 e0       	ldi	r31, 0x00	; 0
    5210:	ee 0f       	add	r30, r30
    5212:	ff 1f       	adc	r31, r31
    5214:	28 2f       	mov	r18, r24
    5216:	08 2e       	mov	r0, r24
    5218:	00 0c       	add	r0, r0
    521a:	33 0b       	sbc	r19, r19
    521c:	22 27       	eor	r18, r18
    521e:	33 0f       	add	r19, r19
    5220:	22 1f       	adc	r18, r18
    5222:	33 27       	eor	r19, r19
    5224:	e2 0f       	add	r30, r18
    5226:	f3 1f       	adc	r31, r19
>>>>>>> Stashed changes
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
<<<<<<< Updated upstream
    55c2:	df 01       	movw	r26, r30
    55c4:	aa 0f       	add	r26, r26
    55c6:	bb 1f       	adc	r27, r27
    55c8:	aa 0f       	add	r26, r26
    55ca:	bb 1f       	adc	r27, r27
    55cc:	aa 0f       	add	r26, r26
    55ce:	bb 1f       	adc	r27, r27
    55d0:	a0 5f       	subi	r26, 0xF0	; 240
    55d2:	b9 4d       	sbci	r27, 0xD9	; 217
    55d4:	9c 91       	ld	r25, X
    55d6:	95 ff       	sbrs	r25, 5
    55d8:	8c c0       	rjmp	.+280    	; 0x56f2 <__vector_126+0x1da>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    55da:	fd 01       	movw	r30, r26
    55dc:	00 e2       	ldi	r16, 0x20	; 32
    55de:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    55e0:	81 11       	cpse	r24, r1
    55e2:	80 c0       	rjmp	.+256    	; 0x56e4 <__vector_126+0x1cc>
=======
    5228:	df 01       	movw	r26, r30
    522a:	aa 0f       	add	r26, r26
    522c:	bb 1f       	adc	r27, r27
    522e:	aa 0f       	add	r26, r26
    5230:	bb 1f       	adc	r27, r27
    5232:	aa 0f       	add	r26, r26
    5234:	bb 1f       	adc	r27, r27
    5236:	a0 5e       	subi	r26, 0xE0	; 224
    5238:	b9 4d       	sbci	r27, 0xD9	; 217
    523a:	9c 91       	ld	r25, X
    523c:	95 ff       	sbrs	r25, 5
    523e:	8c c0       	rjmp	.+280    	; 0x5358 <__vector_126+0x1da>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    5240:	fd 01       	movw	r30, r26
    5242:	00 e2       	ldi	r16, 0x20	; 32
    5244:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    5246:	81 11       	cpse	r24, r1
    5248:	80 c0       	rjmp	.+256    	; 0x534a <__vector_126+0x1cc>
>>>>>>> Stashed changes

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
<<<<<<< Updated upstream
    55e4:	80 91 f1 25 	lds	r24, 0x25F1	; 0x8025f1 <udd_ep_control_state>
    55e8:	84 30       	cpi	r24, 0x04	; 4
    55ea:	29 f4       	brne	.+10     	; 0x55f6 <__vector_126+0xde>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    55ec:	0e 94 9d 23 	call	0x473a	; 0x473a <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    55f0:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <udd_ctrl_init>
    55f4:	7e c0       	rjmp	.+252    	; 0x56f2 <__vector_126+0x1da>
=======
    524a:	80 91 01 26 	lds	r24, 0x2601	; 0x802601 <udd_ep_control_state>
    524e:	84 30       	cpi	r24, 0x04	; 4
    5250:	29 f4       	brne	.+10     	; 0x525c <__vector_126+0xde>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    5252:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    5256:	0e 94 8f 21 	call	0x431e	; 0x431e <udd_ctrl_init>
    525a:	7e c0       	rjmp	.+252    	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
<<<<<<< Updated upstream
    55f6:	00 91 12 26 	lds	r16, 0x2612	; 0x802612 <udd_sram+0x12>
    55fa:	10 91 13 26 	lds	r17, 0x2613	; 0x802613 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    55fe:	80 91 5b 26 	lds	r24, 0x265B	; 0x80265b <udd_g_ctrlreq+0xa>
    5602:	90 91 5c 26 	lds	r25, 0x265C	; 0x80265c <udd_g_ctrlreq+0xb>
    5606:	c0 91 ed 25 	lds	r28, 0x25ED	; 0x8025ed <udd_ctrl_payload_nb_trans>
    560a:	d0 91 ee 25 	lds	r29, 0x25EE	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
    560e:	98 01       	movw	r18, r16
    5610:	2c 0f       	add	r18, r28
    5612:	3d 1f       	adc	r19, r29
    5614:	82 17       	cp	r24, r18
    5616:	93 07       	cpc	r25, r19
    5618:	18 f4       	brcc	.+6      	; 0x5620 <__vector_126+0x108>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    561a:	8c 01       	movw	r16, r24
    561c:	0c 1b       	sub	r16, r28
    561e:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    5620:	80 91 59 26 	lds	r24, 0x2659	; 0x802659 <udd_g_ctrlreq+0x8>
    5624:	90 91 5a 26 	lds	r25, 0x265A	; 0x80265a <udd_g_ctrlreq+0x9>
    5628:	a8 01       	movw	r20, r16
    562a:	6d ea       	ldi	r22, 0xAD	; 173
    562c:	75 e2       	ldi	r23, 0x25	; 37
    562e:	8c 0f       	add	r24, r28
    5630:	9d 1f       	adc	r25, r29
    5632:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    5636:	c0 0f       	add	r28, r16
    5638:	d1 1f       	adc	r29, r17
    563a:	c0 93 ed 25 	sts	0x25ED, r28	; 0x8025ed <udd_ctrl_payload_nb_trans>
    563e:	d0 93 ee 25 	sts	0x25EE, r29	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5642:	00 34       	cpi	r16, 0x40	; 64
    5644:	11 05       	cpc	r17, r1
    5646:	69 f4       	brne	.+26     	; 0x5662 <__vector_126+0x14a>
    5648:	80 91 ef 25 	lds	r24, 0x25EF	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    564c:	90 91 f0 25 	lds	r25, 0x25F0	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
    5650:	8c 0f       	add	r24, r28
    5652:	9d 1f       	adc	r25, r29
    5654:	20 91 57 26 	lds	r18, 0x2657	; 0x802657 <udd_g_ctrlreq+0x6>
    5658:	30 91 58 26 	lds	r19, 0x2658	; 0x802658 <udd_g_ctrlreq+0x7>
    565c:	82 17       	cp	r24, r18
    565e:	93 07       	cpc	r25, r19
    5660:	90 f0       	brcs	.+36     	; 0x5686 <__vector_126+0x16e>
=======
    525c:	00 91 22 26 	lds	r16, 0x2622	; 0x802622 <udd_sram+0x12>
    5260:	10 91 23 26 	lds	r17, 0x2623	; 0x802623 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5264:	80 91 6b 26 	lds	r24, 0x266B	; 0x80266b <udd_g_ctrlreq+0xa>
    5268:	90 91 6c 26 	lds	r25, 0x266C	; 0x80266c <udd_g_ctrlreq+0xb>
    526c:	c0 91 fd 25 	lds	r28, 0x25FD	; 0x8025fd <udd_ctrl_payload_nb_trans>
    5270:	d0 91 fe 25 	lds	r29, 0x25FE	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
    5274:	98 01       	movw	r18, r16
    5276:	2c 0f       	add	r18, r28
    5278:	3d 1f       	adc	r19, r29
    527a:	82 17       	cp	r24, r18
    527c:	93 07       	cpc	r25, r19
    527e:	18 f4       	brcc	.+6      	; 0x5286 <__vector_126+0x108>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5280:	8c 01       	movw	r16, r24
    5282:	0c 1b       	sub	r16, r28
    5284:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    5286:	80 91 69 26 	lds	r24, 0x2669	; 0x802669 <udd_g_ctrlreq+0x8>
    528a:	90 91 6a 26 	lds	r25, 0x266A	; 0x80266a <udd_g_ctrlreq+0x9>
    528e:	a8 01       	movw	r20, r16
    5290:	6d eb       	ldi	r22, 0xBD	; 189
    5292:	75 e2       	ldi	r23, 0x25	; 37
    5294:	8c 0f       	add	r24, r28
    5296:	9d 1f       	adc	r25, r29
    5298:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    529c:	c0 0f       	add	r28, r16
    529e:	d1 1f       	adc	r29, r17
    52a0:	c0 93 fd 25 	sts	0x25FD, r28	; 0x8025fd <udd_ctrl_payload_nb_trans>
    52a4:	d0 93 fe 25 	sts	0x25FE, r29	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    52a8:	00 34       	cpi	r16, 0x40	; 64
    52aa:	11 05       	cpc	r17, r1
    52ac:	69 f4       	brne	.+26     	; 0x52c8 <__vector_126+0x14a>
    52ae:	80 91 ff 25 	lds	r24, 0x25FF	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    52b2:	90 91 00 26 	lds	r25, 0x2600	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
    52b6:	8c 0f       	add	r24, r28
    52b8:	9d 1f       	adc	r25, r29
    52ba:	20 91 67 26 	lds	r18, 0x2667	; 0x802667 <udd_g_ctrlreq+0x6>
    52be:	30 91 68 26 	lds	r19, 0x2668	; 0x802668 <udd_g_ctrlreq+0x7>
    52c2:	82 17       	cp	r24, r18
    52c4:	93 07       	cpc	r25, r19
    52c6:	90 f0       	brcs	.+36     	; 0x52ec <__vector_126+0x16e>
>>>>>>> Stashed changes
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
<<<<<<< Updated upstream
    5662:	e1 e5       	ldi	r30, 0x51	; 81
    5664:	f6 e2       	ldi	r31, 0x26	; 38
    5666:	c2 87       	std	Z+10, r28	; 0x0a
    5668:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    566a:	06 84       	ldd	r0, Z+14	; 0x0e
    566c:	f7 85       	ldd	r31, Z+15	; 0x0f
    566e:	e0 2d       	mov	r30, r0
    5670:	30 97       	sbiw	r30, 0x00	; 0
    5672:	31 f0       	breq	.+12     	; 0x5680 <__vector_126+0x168>
			if (!udd_g_ctrlreq.over_under_run()) {
    5674:	19 95       	eicall
    5676:	81 11       	cpse	r24, r1
    5678:	03 c0       	rjmp	.+6      	; 0x5680 <__vector_126+0x168>
				// Stall ZLP
				udd_ctrl_stall_data();
    567a:	0e 94 81 23 	call	0x4702	; 0x4702 <udd_ctrl_stall_data>
    567e:	39 c0       	rjmp	.+114    	; 0x56f2 <__vector_126+0x1da>
=======
    52c8:	e1 e6       	ldi	r30, 0x61	; 97
    52ca:	f6 e2       	ldi	r31, 0x26	; 38
    52cc:	c2 87       	std	Z+10, r28	; 0x0a
    52ce:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    52d0:	06 84       	ldd	r0, Z+14	; 0x0e
    52d2:	f7 85       	ldd	r31, Z+15	; 0x0f
    52d4:	e0 2d       	mov	r30, r0
    52d6:	30 97       	sbiw	r30, 0x00	; 0
    52d8:	31 f0       	breq	.+12     	; 0x52e6 <__vector_126+0x168>
			if (!udd_g_ctrlreq.over_under_run()) {
    52da:	19 95       	eicall
    52dc:	81 11       	cpse	r24, r1
    52de:	03 c0       	rjmp	.+6      	; 0x52e6 <__vector_126+0x168>
				// Stall ZLP
				udd_ctrl_stall_data();
    52e0:	0e 94 b4 21 	call	0x4368	; 0x4368 <udd_ctrl_stall_data>
    52e4:	39 c0       	rjmp	.+114    	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
<<<<<<< Updated upstream
    5680:	0e 94 8f 23 	call	0x471e	; 0x471e <udd_ctrl_send_zlp_in>
    5684:	36 c0       	rjmp	.+108    	; 0x56f2 <__vector_126+0x1da>
=======
    52e6:	0e 94 c2 21 	call	0x4384	; 0x4384 <udd_ctrl_send_zlp_in>
    52ea:	36 c0       	rjmp	.+108    	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
<<<<<<< Updated upstream
    5686:	80 91 5b 26 	lds	r24, 0x265B	; 0x80265b <udd_g_ctrlreq+0xa>
    568a:	90 91 5c 26 	lds	r25, 0x265C	; 0x80265c <udd_g_ctrlreq+0xb>
    568e:	c8 17       	cp	r28, r24
    5690:	d9 07       	cpc	r29, r25
    5692:	09 f5       	brne	.+66     	; 0x56d6 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    5694:	e0 91 5f 26 	lds	r30, 0x265F	; 0x80265f <udd_g_ctrlreq+0xe>
    5698:	f0 91 60 26 	lds	r31, 0x2660	; 0x802660 <udd_g_ctrlreq+0xf>
    569c:	30 97       	sbiw	r30, 0x00	; 0
    569e:	19 f4       	brne	.+6      	; 0x56a6 <__vector_126+0x18e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    56a0:	0e 94 81 23 	call	0x4702	; 0x4702 <udd_ctrl_stall_data>
    56a4:	26 c0       	rjmp	.+76     	; 0x56f2 <__vector_126+0x1da>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    56a6:	19 95       	eicall
    56a8:	81 11       	cpse	r24, r1
    56aa:	03 c0       	rjmp	.+6      	; 0x56b2 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    56ac:	0e 94 81 23 	call	0x4702	; 0x4702 <udd_ctrl_stall_data>
    56b0:	20 c0       	rjmp	.+64     	; 0x56f2 <__vector_126+0x1da>
=======
    52ec:	80 91 6b 26 	lds	r24, 0x266B	; 0x80266b <udd_g_ctrlreq+0xa>
    52f0:	90 91 6c 26 	lds	r25, 0x266C	; 0x80266c <udd_g_ctrlreq+0xb>
    52f4:	c8 17       	cp	r28, r24
    52f6:	d9 07       	cpc	r29, r25
    52f8:	09 f5       	brne	.+66     	; 0x533c <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    52fa:	e0 91 6f 26 	lds	r30, 0x266F	; 0x80266f <udd_g_ctrlreq+0xe>
    52fe:	f0 91 70 26 	lds	r31, 0x2670	; 0x802670 <udd_g_ctrlreq+0xf>
    5302:	30 97       	sbiw	r30, 0x00	; 0
    5304:	19 f4       	brne	.+6      	; 0x530c <__vector_126+0x18e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    5306:	0e 94 b4 21 	call	0x4368	; 0x4368 <udd_ctrl_stall_data>
    530a:	26 c0       	rjmp	.+76     	; 0x5358 <__vector_126+0x1da>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    530c:	19 95       	eicall
    530e:	81 11       	cpse	r24, r1
    5310:	03 c0       	rjmp	.+6      	; 0x5318 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    5312:	0e 94 b4 21 	call	0x4368	; 0x4368 <udd_ctrl_stall_data>
    5316:	20 c0       	rjmp	.+64     	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
<<<<<<< Updated upstream
    56b2:	20 91 ef 25 	lds	r18, 0x25EF	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    56b6:	30 91 f0 25 	lds	r19, 0x25F0	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
    56ba:	80 91 ed 25 	lds	r24, 0x25ED	; 0x8025ed <udd_ctrl_payload_nb_trans>
    56be:	90 91 ee 25 	lds	r25, 0x25EE	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
    56c2:	82 0f       	add	r24, r18
    56c4:	93 1f       	adc	r25, r19
    56c6:	80 93 ef 25 	sts	0x25EF, r24	; 0x8025ef <udd_ctrl_prev_payload_nb_trans>
    56ca:	90 93 f0 25 	sts	0x25F0, r25	; 0x8025f0 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    56ce:	10 92 ed 25 	sts	0x25ED, r1	; 0x8025ed <udd_ctrl_payload_nb_trans>
    56d2:	10 92 ee 25 	sts	0x25EE, r1	; 0x8025ee <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    56d6:	e0 e1       	ldi	r30, 0x10	; 16
    56d8:	f6 e2       	ldi	r31, 0x26	; 38
    56da:	02 e0       	ldi	r16, 0x02	; 2
    56dc:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    56de:	00 e2       	ldi	r16, 0x20	; 32
    56e0:	06 93       	lac	Z, r16
    56e2:	07 c0       	rjmp	.+14     	; 0x56f2 <__vector_126+0x1da>
=======
    5318:	20 91 ff 25 	lds	r18, 0x25FF	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    531c:	30 91 00 26 	lds	r19, 0x2600	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
    5320:	80 91 fd 25 	lds	r24, 0x25FD	; 0x8025fd <udd_ctrl_payload_nb_trans>
    5324:	90 91 fe 25 	lds	r25, 0x25FE	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
    5328:	82 0f       	add	r24, r18
    532a:	93 1f       	adc	r25, r19
    532c:	80 93 ff 25 	sts	0x25FF, r24	; 0x8025ff <udd_ctrl_prev_payload_nb_trans>
    5330:	90 93 00 26 	sts	0x2600, r25	; 0x802600 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    5334:	10 92 fd 25 	sts	0x25FD, r1	; 0x8025fd <udd_ctrl_payload_nb_trans>
    5338:	10 92 fe 25 	sts	0x25FE, r1	; 0x8025fe <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    533c:	e0 e2       	ldi	r30, 0x20	; 32
    533e:	f6 e2       	ldi	r31, 0x26	; 38
    5340:	02 e0       	ldi	r16, 0x02	; 2
    5342:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    5344:	00 e2       	ldi	r16, 0x20	; 32
    5346:	06 93       	lac	Z, r16
    5348:	07 c0       	rjmp	.+14     	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
<<<<<<< Updated upstream
    56e4:	80 38       	cpi	r24, 0x80	; 128
    56e6:	19 f4       	brne	.+6      	; 0x56ee <__vector_126+0x1d6>
		udd_ctrl_in_sent();
    56e8:	0e 94 a5 23 	call	0x474a	; 0x474a <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    56ec:	02 c0       	rjmp	.+4      	; 0x56f2 <__vector_126+0x1da>
=======
    534a:	80 38       	cpi	r24, 0x80	; 128
    534c:	19 f4       	brne	.+6      	; 0x5354 <__vector_126+0x1d6>
		udd_ctrl_in_sent();
    534e:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    5352:	02 c0       	rjmp	.+4      	; 0x5358 <__vector_126+0x1da>
>>>>>>> Stashed changes
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
<<<<<<< Updated upstream
    56ee:	0e 94 ce 24 	call	0x499c	; 0x499c <udd_ep_trans_complet>
=======
    5354:	0e 94 01 23 	call	0x4602	; 0x4602 <udd_ep_trans_complet>
>>>>>>> Stashed changes
	}
#endif

udd_interrupt_tc_end:
	return;
}
<<<<<<< Updated upstream
    56f2:	ff 91       	pop	r31
    56f4:	ef 91       	pop	r30
    56f6:	df 91       	pop	r29
    56f8:	cf 91       	pop	r28
    56fa:	bf 91       	pop	r27
    56fc:	af 91       	pop	r26
    56fe:	9f 91       	pop	r25
    5700:	8f 91       	pop	r24
    5702:	7f 91       	pop	r23
    5704:	6f 91       	pop	r22
    5706:	5f 91       	pop	r21
    5708:	4f 91       	pop	r20
    570a:	3f 91       	pop	r19
    570c:	2f 91       	pop	r18
    570e:	1f 91       	pop	r17
    5710:	0f 91       	pop	r16
    5712:	0f 90       	pop	r0
    5714:	0b be       	out	0x3b, r0	; 59
    5716:	0f 90       	pop	r0
    5718:	0a be       	out	0x3a, r0	; 58
    571a:	0f 90       	pop	r0
    571c:	09 be       	out	0x39, r0	; 57
    571e:	0f 90       	pop	r0
    5720:	08 be       	out	0x38, r0	; 56
    5722:	0f 90       	pop	r0
    5724:	0f be       	out	0x3f, r0	; 63
    5726:	0f 90       	pop	r0
    5728:	1f 90       	pop	r1
    572a:	18 95       	reti

0000572c <udd_ep_is_valid>:
=======
    5358:	ff 91       	pop	r31
    535a:	ef 91       	pop	r30
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	bf 91       	pop	r27
    5362:	af 91       	pop	r26
    5364:	9f 91       	pop	r25
    5366:	8f 91       	pop	r24
    5368:	7f 91       	pop	r23
    536a:	6f 91       	pop	r22
    536c:	5f 91       	pop	r21
    536e:	4f 91       	pop	r20
    5370:	3f 91       	pop	r19
    5372:	2f 91       	pop	r18
    5374:	1f 91       	pop	r17
    5376:	0f 91       	pop	r16
    5378:	0f 90       	pop	r0
    537a:	0b be       	out	0x3b, r0	; 59
    537c:	0f 90       	pop	r0
    537e:	0a be       	out	0x3a, r0	; 58
    5380:	0f 90       	pop	r0
    5382:	09 be       	out	0x39, r0	; 57
    5384:	0f 90       	pop	r0
    5386:	08 be       	out	0x38, r0	; 56
    5388:	0f 90       	pop	r0
    538a:	0f be       	out	0x3f, r0	; 63
    538c:	0f 90       	pop	r0
    538e:	1f 90       	pop	r1
    5390:	18 95       	reti

00005392 <udd_ep_is_valid>:
>>>>>>> Stashed changes
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
<<<<<<< Updated upstream
    572c:	98 2f       	mov	r25, r24
    572e:	9f 70       	andi	r25, 0x0F	; 15
	if (ep == 0) {
    5730:	29 f0       	breq	.+10     	; 0x573c <udd_ep_is_valid+0x10>
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
    5732:	81 e0       	ldi	r24, 0x01	; 1
    5734:	93 30       	cpi	r25, 0x03	; 3
    5736:	18 f0       	brcs	.+6      	; 0x573e <udd_ep_is_valid+0x12>
    5738:	80 e0       	ldi	r24, 0x00	; 0
    573a:	08 95       	ret
=======
    5392:	98 2f       	mov	r25, r24
    5394:	9f 70       	andi	r25, 0x0F	; 15
	if (ep == 0) {
    5396:	29 f0       	breq	.+10     	; 0x53a2 <udd_ep_is_valid+0x10>
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
    5398:	81 e0       	ldi	r24, 0x01	; 1
    539a:	93 30       	cpi	r25, 0x03	; 3
    539c:	18 f0       	brcs	.+6      	; 0x53a4 <udd_ep_is_valid+0x12>
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	08 95       	ret
>>>>>>> Stashed changes

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	if (ep == 0) {
		return false;
<<<<<<< Updated upstream
    573c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    573e:	08 95       	ret

00005740 <sysclk_init>:
=======
    53a2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    53a4:	08 95       	ret

000053a6 <sysclk_init>:
>>>>>>> Stashed changes
#  include <nvm.h>
#endif


void sysclk_init(void)
{
<<<<<<< Updated upstream
    5740:	0f 93       	push	r16
    5742:	1f 93       	push	r17
    5744:	cf 93       	push	r28
    5746:	df 93       	push	r29
    5748:	cd b7       	in	r28, 0x3d	; 61
    574a:	de b7       	in	r29, 0x3e	; 62
    574c:	27 97       	sbiw	r28, 0x07	; 7
    574e:	cd bf       	out	0x3d, r28	; 61
    5750:	de bf       	out	0x3e, r29	; 62
=======
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	cf 93       	push	r28
    53ac:	df 93       	push	r29
    53ae:	cd b7       	in	r28, 0x3d	; 61
    53b0:	de b7       	in	r29, 0x3e	; 62
    53b2:	27 97       	sbiw	r28, 0x07	; 7
    53b4:	cd bf       	out	0x3d, r28	; 61
    53b6:	de bf       	out	0x3e, r29	; 62
>>>>>>> Stashed changes
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
<<<<<<< Updated upstream
    5752:	8f ef       	ldi	r24, 0xFF	; 255
    5754:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    5758:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    575c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    5760:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    5764:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    5768:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    576c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
=======
    53b8:	8f ef       	ldi	r24, 0xFF	; 255
    53ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    53be:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    53c2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    53c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    53ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    53ce:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    53d2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
>>>>>>> Stashed changes
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
<<<<<<< Updated upstream
    5770:	64 e0       	ldi	r22, 0x04	; 4
    5772:	81 e4       	ldi	r24, 0x41	; 65
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
    577a:	6c e1       	ldi	r22, 0x1C	; 28
    577c:	70 e0       	ldi	r23, 0x00	; 0
    577e:	82 e0       	ldi	r24, 0x02	; 2
    5780:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
=======
    53d6:	64 e0       	ldi	r22, 0x04	; 4
    53d8:	81 e4       	ldi	r24, 0x41	; 65
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
    53e0:	6c e1       	ldi	r22, 0x1C	; 28
    53e2:	70 e0       	ldi	r23, 0x00	; 0
    53e4:	82 e0       	ldi	r24, 0x02	; 2
    53e6:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
>>>>>>> Stashed changes
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
<<<<<<< Updated upstream
    5784:	8a 83       	std	Y+2, r24	; 0x02
    5786:	6d e1       	ldi	r22, 0x1D	; 29
    5788:	70 e0       	ldi	r23, 0x00	; 0
    578a:	82 e0       	ldi	r24, 0x02	; 2
    578c:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    5790:	89 83       	std	Y+1, r24	; 0x01
=======
    53ea:	8a 83       	std	Y+2, r24	; 0x02
    53ec:	6d e1       	ldi	r22, 0x1D	; 29
    53ee:	70 e0       	ldi	r23, 0x00	; 0
    53f0:	82 e0       	ldi	r24, 0x02	; 2
    53f2:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    53f6:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
<<<<<<< Updated upstream
    5792:	89 81       	ldd	r24, Y+1	; 0x01
    5794:	9a 81       	ldd	r25, Y+2	; 0x02
    5796:	01 96       	adiw	r24, 0x01	; 1
    5798:	21 f4       	brne	.+8      	; 0x57a2 <sysclk_init+0x62>
		cal = 0x2340;
    579a:	80 e4       	ldi	r24, 0x40	; 64
    579c:	93 e2       	ldi	r25, 0x23	; 35
    579e:	89 83       	std	Y+1, r24	; 0x01
    57a0:	9a 83       	std	Y+2, r25	; 0x02
    57a2:	89 81       	ldd	r24, Y+1	; 0x01
    57a4:	9a 81       	ldd	r25, Y+2	; 0x02
    57a6:	8b 83       	std	Y+3, r24	; 0x03
    57a8:	9c 83       	std	Y+4, r25	; 0x04
=======
    53f8:	89 81       	ldd	r24, Y+1	; 0x01
    53fa:	9a 81       	ldd	r25, Y+2	; 0x02
    53fc:	01 96       	adiw	r24, 0x01	; 1
    53fe:	21 f4       	brne	.+8      	; 0x5408 <sysclk_init+0x62>
		cal = 0x2340;
    5400:	80 e4       	ldi	r24, 0x40	; 64
    5402:	93 e2       	ldi	r25, 0x23	; 35
    5404:	89 83       	std	Y+1, r24	; 0x01
    5406:	9a 83       	std	Y+2, r25	; 0x02
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	9a 81       	ldd	r25, Y+2	; 0x02
    540c:	8b 83       	std	Y+3, r24	; 0x03
    540e:	9c 83       	std	Y+4, r25	; 0x04
>>>>>>> Stashed changes
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
<<<<<<< Updated upstream
    57aa:	e0 e6       	ldi	r30, 0x60	; 96
    57ac:	f0 e0       	ldi	r31, 0x00	; 0
    57ae:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    57b0:	8c 81       	ldd	r24, Y+4	; 0x04
    57b2:	83 83       	std	Z+3, r24	; 0x03
=======
    5410:	e0 e6       	ldi	r30, 0x60	; 96
    5412:	f0 e0       	ldi	r31, 0x00	; 0
    5414:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    5416:	8c 81       	ldd	r24, Y+4	; 0x04
    5418:	83 83       	std	Z+3, r24	; 0x03
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    57b4:	8f b7       	in	r24, 0x3f	; 63
    57b6:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    57b8:	f8 94       	cli
	return flags;
    57ba:	9e 81       	ldd	r25, Y+6	; 0x06
=======
    541a:	8f b7       	in	r24, 0x3f	; 63
    541c:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    541e:	f8 94       	cli
	return flags;
    5420:	9e 81       	ldd	r25, Y+6	; 0x06
>>>>>>> Stashed changes
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
<<<<<<< Updated upstream
    57bc:	e0 e5       	ldi	r30, 0x50	; 80
    57be:	f0 e0       	ldi	r31, 0x00	; 0
    57c0:	80 81       	ld	r24, Z
    57c2:	82 60       	ori	r24, 0x02	; 2
    57c4:	80 83       	st	Z, r24
=======
    5422:	e0 e5       	ldi	r30, 0x50	; 80
    5424:	f0 e0       	ldi	r31, 0x00	; 0
    5426:	80 81       	ld	r24, Z
    5428:	82 60       	ori	r24, 0x02	; 2
    542a:	80 83       	st	Z, r24
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    57c6:	9f bf       	out	0x3f, r25	; 63
=======
    542c:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
<<<<<<< Updated upstream
    57c8:	81 81       	ldd	r24, Z+1	; 0x01
=======
    542e:	81 81       	ldd	r24, Z+1	; 0x01
>>>>>>> Stashed changes
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
<<<<<<< Updated upstream
    57ca:	81 ff       	sbrs	r24, 1
    57cc:	fd cf       	rjmp	.-6      	; 0x57c8 <sysclk_init+0x88>
=======
    5430:	81 ff       	sbrs	r24, 1
    5432:	fd cf       	rjmp	.-6      	; 0x542e <sysclk_init+0x88>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    57ce:	8f b7       	in	r24, 0x3f	; 63
    57d0:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    57d2:	f8 94       	cli
	return flags;
    57d4:	9f 81       	ldd	r25, Y+7	; 0x07
=======
    5434:	8f b7       	in	r24, 0x3f	; 63
    5436:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    5438:	f8 94       	cli
	return flags;
    543a:	9f 81       	ldd	r25, Y+7	; 0x07
>>>>>>> Stashed changes
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
<<<<<<< Updated upstream
    57d6:	00 e5       	ldi	r16, 0x50	; 80
    57d8:	10 e0       	ldi	r17, 0x00	; 0
    57da:	d8 01       	movw	r26, r16
    57dc:	16 96       	adiw	r26, 0x06	; 6
    57de:	8c 91       	ld	r24, X
    57e0:	16 97       	sbiw	r26, 0x06	; 6
    57e2:	89 7f       	andi	r24, 0xF9	; 249
    57e4:	16 96       	adiw	r26, 0x06	; 6
    57e6:	8c 93       	st	X, r24
    57e8:	16 97       	sbiw	r26, 0x06	; 6
=======
    543c:	00 e5       	ldi	r16, 0x50	; 80
    543e:	10 e0       	ldi	r17, 0x00	; 0
    5440:	d8 01       	movw	r26, r16
    5442:	16 96       	adiw	r26, 0x06	; 6
    5444:	8c 91       	ld	r24, X
    5446:	16 97       	sbiw	r26, 0x06	; 6
    5448:	89 7f       	andi	r24, 0xF9	; 249
    544a:	16 96       	adiw	r26, 0x06	; 6
    544c:	8c 93       	st	X, r24
    544e:	16 97       	sbiw	r26, 0x06	; 6
>>>>>>> Stashed changes
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
<<<<<<< Updated upstream
    57ea:	e0 e6       	ldi	r30, 0x60	; 96
    57ec:	f0 e0       	ldi	r31, 0x00	; 0
    57ee:	80 e8       	ldi	r24, 0x80	; 128
    57f0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    57f2:	8b eb       	ldi	r24, 0xBB	; 187
    57f4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    57f6:	16 96       	adiw	r26, 0x06	; 6
    57f8:	8c 91       	ld	r24, X
    57fa:	16 97       	sbiw	r26, 0x06	; 6
    57fc:	84 60       	ori	r24, 0x04	; 4
    57fe:	16 96       	adiw	r26, 0x06	; 6
    5800:	8c 93       	st	X, r24
=======
    5450:	e0 e6       	ldi	r30, 0x60	; 96
    5452:	f0 e0       	ldi	r31, 0x00	; 0
    5454:	80 e8       	ldi	r24, 0x80	; 128
    5456:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    5458:	8b eb       	ldi	r24, 0xBB	; 187
    545a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    545c:	16 96       	adiw	r26, 0x06	; 6
    545e:	8c 91       	ld	r24, X
    5460:	16 97       	sbiw	r26, 0x06	; 6
    5462:	84 60       	ori	r24, 0x04	; 4
    5464:	16 96       	adiw	r26, 0x06	; 6
    5466:	8c 93       	st	X, r24
>>>>>>> Stashed changes
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
<<<<<<< Updated upstream
    5802:	80 81       	ld	r24, Z
    5804:	81 60       	ori	r24, 0x01	; 1
    5806:	80 83       	st	Z, r24
=======
    5468:	80 81       	ld	r24, Z
    546a:	81 60       	ori	r24, 0x01	; 1
    546c:	80 83       	st	Z, r24
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    5808:	9f bf       	out	0x3f, r25	; 63
=======
    546e:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
<<<<<<< Updated upstream
    580a:	61 e0       	ldi	r22, 0x01	; 1
    580c:	80 e4       	ldi	r24, 0x40	; 64
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
=======
    5470:	61 e0       	ldi	r22, 0x01	; 1
    5472:	80 e4       	ldi	r24, 0x40	; 64
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    5814:	8f b7       	in	r24, 0x3f	; 63
    5816:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    5818:	f8 94       	cli
	return flags;
    581a:	9d 81       	ldd	r25, Y+5	; 0x05
=======
    547a:	8f b7       	in	r24, 0x3f	; 63
    547c:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    547e:	f8 94       	cli
	return flags;
    5480:	9d 81       	ldd	r25, Y+5	; 0x05
>>>>>>> Stashed changes
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
<<<<<<< Updated upstream
    581c:	f8 01       	movw	r30, r16
    581e:	80 81       	ld	r24, Z
    5820:	8e 7f       	andi	r24, 0xFE	; 254
    5822:	80 83       	st	Z, r24
=======
    5482:	f8 01       	movw	r30, r16
    5484:	80 81       	ld	r24, Z
    5486:	8e 7f       	andi	r24, 0xFE	; 254
    5488:	80 83       	st	Z, r24
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    5824:	9f bf       	out	0x3f, r25	; 63
=======
    548a:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
<<<<<<< Updated upstream
    5826:	27 96       	adiw	r28, 0x07	; 7
    5828:	cd bf       	out	0x3d, r28	; 61
    582a:	de bf       	out	0x3e, r29	; 62
    582c:	df 91       	pop	r29
    582e:	cf 91       	pop	r28
    5830:	1f 91       	pop	r17
    5832:	0f 91       	pop	r16
    5834:	08 95       	ret

00005836 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	1f 92       	push	r1
    583c:	cd b7       	in	r28, 0x3d	; 61
    583e:	de b7       	in	r29, 0x3e	; 62
=======
    548c:	27 96       	adiw	r28, 0x07	; 7
    548e:	cd bf       	out	0x3d, r28	; 61
    5490:	de bf       	out	0x3e, r29	; 62
    5492:	df 91       	pop	r29
    5494:	cf 91       	pop	r28
    5496:	1f 91       	pop	r17
    5498:	0f 91       	pop	r16
    549a:	08 95       	ret

0000549c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    549c:	cf 93       	push	r28
    549e:	df 93       	push	r29
    54a0:	1f 92       	push	r1
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    5840:	9f b7       	in	r25, 0x3f	; 63
    5842:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    5844:	f8 94       	cli
	return flags;
    5846:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5848:	e8 2f       	mov	r30, r24
    584a:	f0 e0       	ldi	r31, 0x00	; 0
    584c:	e0 59       	subi	r30, 0x90	; 144
    584e:	ff 4f       	sbci	r31, 0xFF	; 255
    5850:	60 95       	com	r22
    5852:	80 81       	ld	r24, Z
    5854:	68 23       	and	r22, r24
    5856:	60 83       	st	Z, r22
=======
    54a6:	9f b7       	in	r25, 0x3f	; 63
    54a8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    54aa:	f8 94       	cli
	return flags;
    54ac:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    54ae:	e8 2f       	mov	r30, r24
    54b0:	f0 e0       	ldi	r31, 0x00	; 0
    54b2:	e0 59       	subi	r30, 0x90	; 144
    54b4:	ff 4f       	sbci	r31, 0xFF	; 255
    54b6:	60 95       	com	r22
    54b8:	80 81       	ld	r24, Z
    54ba:	68 23       	and	r22, r24
    54bc:	60 83       	st	Z, r22
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    5858:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    585a:	0f 90       	pop	r0
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	08 95       	ret

00005862 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	1f 92       	push	r1
    5868:	cd b7       	in	r28, 0x3d	; 61
    586a:	de b7       	in	r29, 0x3e	; 62
=======
    54be:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    54c0:	0f 90       	pop	r0
    54c2:	df 91       	pop	r29
    54c4:	cf 91       	pop	r28
    54c6:	08 95       	ret

000054c8 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    54c8:	cf 93       	push	r28
    54ca:	df 93       	push	r29
    54cc:	1f 92       	push	r1
    54ce:	cd b7       	in	r28, 0x3d	; 61
    54d0:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    586c:	9f b7       	in	r25, 0x3f	; 63
    586e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    5870:	f8 94       	cli
	return flags;
    5872:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    5874:	e8 2f       	mov	r30, r24
    5876:	f0 e0       	ldi	r31, 0x00	; 0
    5878:	e0 59       	subi	r30, 0x90	; 144
    587a:	ff 4f       	sbci	r31, 0xFF	; 255
    587c:	80 81       	ld	r24, Z
    587e:	68 2b       	or	r22, r24
    5880:	60 83       	st	Z, r22
=======
    54d2:	9f b7       	in	r25, 0x3f	; 63
    54d4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    54d6:	f8 94       	cli
	return flags;
    54d8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    54da:	e8 2f       	mov	r30, r24
    54dc:	f0 e0       	ldi	r31, 0x00	; 0
    54de:	e0 59       	subi	r30, 0x90	; 144
    54e0:	ff 4f       	sbci	r31, 0xFF	; 255
    54e2:	80 81       	ld	r24, Z
    54e4:	68 2b       	or	r22, r24
    54e6:	60 83       	st	Z, r22
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    5882:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    5884:	0f 90       	pop	r0
    5886:	df 91       	pop	r29
    5888:	cf 91       	pop	r28
    588a:	08 95       	ret

0000588c <sysclk_enable_usb>:
=======
    54e8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    54ea:	0f 90       	pop	r0
    54ec:	df 91       	pop	r29
    54ee:	cf 91       	pop	r28
    54f0:	08 95       	ret

000054f2 <sysclk_enable_usb>:
>>>>>>> Stashed changes
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
<<<<<<< Updated upstream
    588c:	cf 93       	push	r28
    588e:	df 93       	push	r29
    5890:	1f 92       	push	r1
    5892:	1f 92       	push	r1
    5894:	cd b7       	in	r28, 0x3d	; 61
    5896:	de b7       	in	r29, 0x3e	; 62
=======
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	1f 92       	push	r1
    54f8:	1f 92       	push	r1
    54fa:	cd b7       	in	r28, 0x3d	; 61
    54fc:	de b7       	in	r29, 0x3e	; 62
>>>>>>> Stashed changes

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
<<<<<<< Updated upstream
    5898:	86 30       	cpi	r24, 0x06	; 6
    589a:	11 f0       	breq	.+4      	; 0x58a0 <sysclk_enable_usb+0x14>
=======
    54fe:	86 30       	cpi	r24, 0x06	; 6
    5500:	11 f0       	breq	.+4      	; 0x5506 <sysclk_enable_usb+0x14>
>>>>>>> Stashed changes
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
<<<<<<< Updated upstream
    589c:	60 e0       	ldi	r22, 0x00	; 0
    589e:	01 c0       	rjmp	.+2      	; 0x58a2 <sysclk_enable_usb+0x16>
=======
    5502:	60 e0       	ldi	r22, 0x00	; 0
    5504:	01 c0       	rjmp	.+2      	; 0x5508 <sysclk_enable_usb+0x16>
>>>>>>> Stashed changes
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
<<<<<<< Updated upstream
    58a0:	68 e1       	ldi	r22, 0x18	; 24
=======
    5506:	68 e1       	ldi	r22, 0x18	; 24
>>>>>>> Stashed changes

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
<<<<<<< Updated upstream
    58a2:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
=======
    5508:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
>>>>>>> Stashed changes
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
<<<<<<< Updated upstream
    58a6:	81 fd       	sbrc	r24, 1
    58a8:	2a c0       	rjmp	.+84     	; 0x58fe <sysclk_enable_usb+0x72>
=======
    550c:	81 fd       	sbrc	r24, 1
    550e:	2a c0       	rjmp	.+84     	; 0x5564 <sysclk_enable_usb+0x72>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    58aa:	8f b7       	in	r24, 0x3f	; 63
    58ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    58ae:	f8 94       	cli
	return flags;
    58b0:	99 81       	ldd	r25, Y+1	; 0x01
=======
    5510:	8f b7       	in	r24, 0x3f	; 63
    5512:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5514:	f8 94       	cli
	return flags;
    5516:	99 81       	ldd	r25, Y+1	; 0x01
>>>>>>> Stashed changes
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
<<<<<<< Updated upstream
    58b2:	e0 e5       	ldi	r30, 0x50	; 80
    58b4:	f0 e0       	ldi	r31, 0x00	; 0
    58b6:	80 81       	ld	r24, Z
    58b8:	82 60       	ori	r24, 0x02	; 2
    58ba:	80 83       	st	Z, r24
=======
    5518:	e0 e5       	ldi	r30, 0x50	; 80
    551a:	f0 e0       	ldi	r31, 0x00	; 0
    551c:	80 81       	ld	r24, Z
    551e:	82 60       	ori	r24, 0x02	; 2
    5520:	80 83       	st	Z, r24
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    58bc:	9f bf       	out	0x3f, r25	; 63
=======
    5522:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
<<<<<<< Updated upstream
    58be:	81 81       	ldd	r24, Z+1	; 0x01
    58c0:	81 ff       	sbrs	r24, 1
    58c2:	fd cf       	rjmp	.-6      	; 0x58be <sysclk_enable_usb+0x32>
=======
    5524:	81 81       	ldd	r24, Z+1	; 0x01
    5526:	81 ff       	sbrs	r24, 1
    5528:	fd cf       	rjmp	.-6      	; 0x5524 <sysclk_enable_usb+0x32>
>>>>>>> Stashed changes

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
<<<<<<< Updated upstream
    58c4:	8f b7       	in	r24, 0x3f	; 63
    58c6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    58c8:	f8 94       	cli
	return flags;
    58ca:	9a 81       	ldd	r25, Y+2	; 0x02
=======
    552a:	8f b7       	in	r24, 0x3f	; 63
    552c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    552e:	f8 94       	cli
	return flags;
    5530:	9a 81       	ldd	r25, Y+2	; 0x02
>>>>>>> Stashed changes
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
<<<<<<< Updated upstream
    58cc:	a0 e5       	ldi	r26, 0x50	; 80
    58ce:	b0 e0       	ldi	r27, 0x00	; 0
    58d0:	16 96       	adiw	r26, 0x06	; 6
    58d2:	8c 91       	ld	r24, X
    58d4:	16 97       	sbiw	r26, 0x06	; 6
    58d6:	89 7f       	andi	r24, 0xF9	; 249
    58d8:	16 96       	adiw	r26, 0x06	; 6
    58da:	8c 93       	st	X, r24
    58dc:	16 97       	sbiw	r26, 0x06	; 6
=======
    5532:	a0 e5       	ldi	r26, 0x50	; 80
    5534:	b0 e0       	ldi	r27, 0x00	; 0
    5536:	16 96       	adiw	r26, 0x06	; 6
    5538:	8c 91       	ld	r24, X
    553a:	16 97       	sbiw	r26, 0x06	; 6
    553c:	89 7f       	andi	r24, 0xF9	; 249
    553e:	16 96       	adiw	r26, 0x06	; 6
    5540:	8c 93       	st	X, r24
    5542:	16 97       	sbiw	r26, 0x06	; 6
>>>>>>> Stashed changes
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
<<<<<<< Updated upstream
    58de:	e0 e6       	ldi	r30, 0x60	; 96
    58e0:	f0 e0       	ldi	r31, 0x00	; 0
    58e2:	80 e8       	ldi	r24, 0x80	; 128
    58e4:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    58e6:	8b eb       	ldi	r24, 0xBB	; 187
    58e8:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    58ea:	16 96       	adiw	r26, 0x06	; 6
    58ec:	8c 91       	ld	r24, X
    58ee:	16 97       	sbiw	r26, 0x06	; 6
    58f0:	84 60       	ori	r24, 0x04	; 4
    58f2:	16 96       	adiw	r26, 0x06	; 6
    58f4:	8c 93       	st	X, r24
=======
    5544:	e0 e6       	ldi	r30, 0x60	; 96
    5546:	f0 e0       	ldi	r31, 0x00	; 0
    5548:	80 e8       	ldi	r24, 0x80	; 128
    554a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    554c:	8b eb       	ldi	r24, 0xBB	; 187
    554e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    5550:	16 96       	adiw	r26, 0x06	; 6
    5552:	8c 91       	ld	r24, X
    5554:	16 97       	sbiw	r26, 0x06	; 6
    5556:	84 60       	ori	r24, 0x04	; 4
    5558:	16 96       	adiw	r26, 0x06	; 6
    555a:	8c 93       	st	X, r24
>>>>>>> Stashed changes
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
<<<<<<< Updated upstream
    58f6:	80 81       	ld	r24, Z
    58f8:	81 60       	ori	r24, 0x01	; 1
    58fa:	80 83       	st	Z, r24
=======
    555c:	80 81       	ld	r24, Z
    555e:	81 60       	ori	r24, 0x01	; 1
    5560:	80 83       	st	Z, r24
>>>>>>> Stashed changes
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
<<<<<<< Updated upstream
    58fc:	9f bf       	out	0x3f, r25	; 63
=======
    5562:	9f bf       	out	0x3f, r25	; 63
>>>>>>> Stashed changes
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
<<<<<<< Updated upstream
    58fe:	63 60       	ori	r22, 0x03	; 3
    5900:	84 e4       	ldi	r24, 0x44	; 68
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
=======
    5564:	63 60       	ori	r22, 0x03	; 3
    5566:	84 e4       	ldi	r24, 0x44	; 68
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
>>>>>>> Stashed changes
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
<<<<<<< Updated upstream
    5908:	60 e4       	ldi	r22, 0x40	; 64
    590a:	80 e0       	ldi	r24, 0x00	; 0
    590c:	0e 94 1b 2c 	call	0x5836	; 0x5836 <sysclk_enable_module>
}
    5910:	0f 90       	pop	r0
    5912:	0f 90       	pop	r0
    5914:	df 91       	pop	r29
    5916:	cf 91       	pop	r28
    5918:	08 95       	ret

0000591a <sysclk_disable_usb>:
=======
    556e:	60 e4       	ldi	r22, 0x40	; 64
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	0e 94 4e 2a 	call	0x549c	; 0x549c <sysclk_enable_module>
}
    5576:	0f 90       	pop	r0
    5578:	0f 90       	pop	r0
    557a:	df 91       	pop	r29
    557c:	cf 91       	pop	r28
    557e:	08 95       	ret

00005580 <sysclk_disable_usb>:
>>>>>>> Stashed changes
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
<<<<<<< Updated upstream
    591a:	60 e4       	ldi	r22, 0x40	; 64
    591c:	80 e0       	ldi	r24, 0x00	; 0
    591e:	0e 94 31 2c 	call	0x5862	; 0x5862 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    5922:	60 e0       	ldi	r22, 0x00	; 0
    5924:	84 e4       	ldi	r24, 0x44	; 68
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
    592c:	08 95       	ret

0000592e <nvm_read_device_serial>:
=======
    5580:	60 e4       	ldi	r22, 0x40	; 64
    5582:	80 e0       	ldi	r24, 0x00	; 0
    5584:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    5588:	60 e0       	ldi	r22, 0x00	; 0
    558a:	84 e4       	ldi	r24, 0x44	; 68
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
    5592:	08 95       	ret

00005594 <nvm_read_device_serial>:
>>>>>>> Stashed changes
 *       the program space reads will be corrupted.
 *
 * \retval storage Pointer to the structure where to store the device serial
 */
void nvm_read_device_serial(struct nvm_device_serial *storage)
{
<<<<<<< Updated upstream
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	ec 01       	movw	r28, r24
    5934:	68 e0       	ldi	r22, 0x08	; 8
    5936:	70 e0       	ldi	r23, 0x00	; 0
    5938:	82 e0       	ldi	r24, 0x02	; 2
    593a:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
	storage->lotnum0 = nvm_read_production_signature_row(
    593e:	88 83       	st	Y, r24
    5940:	69 e0       	ldi	r22, 0x09	; 9
    5942:	70 e0       	ldi	r23, 0x00	; 0
    5944:	82 e0       	ldi	r24, 0x02	; 2
    5946:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    594a:	89 83       	std	Y+1, r24	; 0x01
    594c:	6a e0       	ldi	r22, 0x0A	; 10
    594e:	70 e0       	ldi	r23, 0x00	; 0
    5950:	82 e0       	ldi	r24, 0x02	; 2
    5952:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    5956:	8a 83       	std	Y+2, r24	; 0x02
    5958:	6b e0       	ldi	r22, 0x0B	; 11
    595a:	70 e0       	ldi	r23, 0x00	; 0
    595c:	82 e0       	ldi	r24, 0x02	; 2
    595e:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    5962:	8b 83       	std	Y+3, r24	; 0x03
    5964:	6c e0       	ldi	r22, 0x0C	; 12
    5966:	70 e0       	ldi	r23, 0x00	; 0
    5968:	82 e0       	ldi	r24, 0x02	; 2
    596a:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    596e:	8c 83       	std	Y+4, r24	; 0x04
    5970:	6d e0       	ldi	r22, 0x0D	; 13
    5972:	70 e0       	ldi	r23, 0x00	; 0
    5974:	82 e0       	ldi	r24, 0x02	; 2
    5976:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    597a:	8d 83       	std	Y+5, r24	; 0x05
    597c:	60 e1       	ldi	r22, 0x10	; 16
    597e:	70 e0       	ldi	r23, 0x00	; 0
    5980:	82 e0       	ldi	r24, 0x02	; 2
    5982:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    5986:	8e 83       	std	Y+6, r24	; 0x06
    5988:	62 e1       	ldi	r22, 0x12	; 18
    598a:	70 e0       	ldi	r23, 0x00	; 0
    598c:	82 e0       	ldi	r24, 0x02	; 2
    598e:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    5992:	8f 83       	std	Y+7, r24	; 0x07
    5994:	63 e1       	ldi	r22, 0x13	; 19
    5996:	70 e0       	ldi	r23, 0x00	; 0
    5998:	82 e0       	ldi	r24, 0x02	; 2
    599a:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    599e:	88 87       	std	Y+8, r24	; 0x08
    59a0:	64 e1       	ldi	r22, 0x14	; 20
    59a2:	70 e0       	ldi	r23, 0x00	; 0
    59a4:	82 e0       	ldi	r24, 0x02	; 2
    59a6:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    59aa:	89 87       	std	Y+9, r24	; 0x09
    59ac:	65 e1       	ldi	r22, 0x15	; 21
    59ae:	70 e0       	ldi	r23, 0x00	; 0
    59b0:	82 e0       	ldi	r24, 0x02	; 2
    59b2:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    59b6:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    59b8:	df 91       	pop	r29
    59ba:	cf 91       	pop	r28
    59bc:	08 95       	ret

000059be <nvm_eeprom_read_byte>:
=======
    5594:	cf 93       	push	r28
    5596:	df 93       	push	r29
    5598:	ec 01       	movw	r28, r24
    559a:	68 e0       	ldi	r22, 0x08	; 8
    559c:	70 e0       	ldi	r23, 0x00	; 0
    559e:	82 e0       	ldi	r24, 0x02	; 2
    55a0:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
	storage->lotnum0 = nvm_read_production_signature_row(
    55a4:	88 83       	st	Y, r24
    55a6:	69 e0       	ldi	r22, 0x09	; 9
    55a8:	70 e0       	ldi	r23, 0x00	; 0
    55aa:	82 e0       	ldi	r24, 0x02	; 2
    55ac:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    55b0:	89 83       	std	Y+1, r24	; 0x01
    55b2:	6a e0       	ldi	r22, 0x0A	; 10
    55b4:	70 e0       	ldi	r23, 0x00	; 0
    55b6:	82 e0       	ldi	r24, 0x02	; 2
    55b8:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    55bc:	8a 83       	std	Y+2, r24	; 0x02
    55be:	6b e0       	ldi	r22, 0x0B	; 11
    55c0:	70 e0       	ldi	r23, 0x00	; 0
    55c2:	82 e0       	ldi	r24, 0x02	; 2
    55c4:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    55c8:	8b 83       	std	Y+3, r24	; 0x03
    55ca:	6c e0       	ldi	r22, 0x0C	; 12
    55cc:	70 e0       	ldi	r23, 0x00	; 0
    55ce:	82 e0       	ldi	r24, 0x02	; 2
    55d0:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    55d4:	8c 83       	std	Y+4, r24	; 0x04
    55d6:	6d e0       	ldi	r22, 0x0D	; 13
    55d8:	70 e0       	ldi	r23, 0x00	; 0
    55da:	82 e0       	ldi	r24, 0x02	; 2
    55dc:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    55e0:	8d 83       	std	Y+5, r24	; 0x05
    55e2:	60 e1       	ldi	r22, 0x10	; 16
    55e4:	70 e0       	ldi	r23, 0x00	; 0
    55e6:	82 e0       	ldi	r24, 0x02	; 2
    55e8:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    55ec:	8e 83       	std	Y+6, r24	; 0x06
    55ee:	62 e1       	ldi	r22, 0x12	; 18
    55f0:	70 e0       	ldi	r23, 0x00	; 0
    55f2:	82 e0       	ldi	r24, 0x02	; 2
    55f4:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    55f8:	8f 83       	std	Y+7, r24	; 0x07
    55fa:	63 e1       	ldi	r22, 0x13	; 19
    55fc:	70 e0       	ldi	r23, 0x00	; 0
    55fe:	82 e0       	ldi	r24, 0x02	; 2
    5600:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    5604:	88 87       	std	Y+8, r24	; 0x08
    5606:	64 e1       	ldi	r22, 0x14	; 20
    5608:	70 e0       	ldi	r23, 0x00	; 0
    560a:	82 e0       	ldi	r24, 0x02	; 2
    560c:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    5610:	89 87       	std	Y+9, r24	; 0x09
    5612:	65 e1       	ldi	r22, 0x15	; 21
    5614:	70 e0       	ldi	r23, 0x00	; 0
    5616:	82 e0       	ldi	r24, 0x02	; 2
    5618:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    561c:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    561e:	df 91       	pop	r29
    5620:	cf 91       	pop	r28
    5622:	08 95       	ret

00005624 <nvm_eeprom_read_byte>:
>>>>>>> Stashed changes
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
<<<<<<< Updated upstream
    59be:	dc 01       	movw	r26, r24
=======
    5624:	dc 01       	movw	r26, r24
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    59c0:	e0 ec       	ldi	r30, 0xC0	; 192
    59c2:	f1 e0       	ldi	r31, 0x01	; 1
    59c4:	97 85       	ldd	r25, Z+15	; 0x0f
    59c6:	99 23       	and	r25, r25
    59c8:	ec f3       	brlt	.-6      	; 0x59c4 <nvm_eeprom_read_byte+0x6>
=======
    5626:	e0 ec       	ldi	r30, 0xC0	; 192
    5628:	f1 e0       	ldi	r31, 0x01	; 1
    562a:	97 85       	ldd	r25, Z+15	; 0x0f
    562c:	99 23       	and	r25, r25
    562e:	ec f3       	brlt	.-6      	; 0x562a <nvm_eeprom_read_byte+0x6>
>>>>>>> Stashed changes
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
<<<<<<< Updated upstream
    59ca:	ec ec       	ldi	r30, 0xCC	; 204
    59cc:	f1 e0       	ldi	r31, 0x01	; 1
    59ce:	80 81       	ld	r24, Z
    59d0:	88 60       	ori	r24, 0x08	; 8
    59d2:	80 83       	st	Z, r24
=======
    5630:	ec ec       	ldi	r30, 0xCC	; 204
    5632:	f1 e0       	ldi	r31, 0x01	; 1
    5634:	80 81       	ld	r24, Z
    5636:	88 60       	ori	r24, 0x08	; 8
    5638:	80 83       	st	Z, r24
>>>>>>> Stashed changes
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
<<<<<<< Updated upstream
    59d4:	b0 5f       	subi	r27, 0xF0	; 240
    59d6:	8c 91       	ld	r24, X
=======
    563a:	b0 5f       	subi	r27, 0xF0	; 240
    563c:	8c 91       	ld	r24, X
>>>>>>> Stashed changes
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
<<<<<<< Updated upstream
    59d8:	90 81       	ld	r25, Z
    59da:	97 7f       	andi	r25, 0xF7	; 247
    59dc:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    59de:	08 95       	ret

000059e0 <nvm_eeprom_read_buffer>:
=======
    563e:	90 81       	ld	r25, Z
    5640:	97 7f       	andi	r25, 0xF7	; 247
    5642:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    5644:	08 95       	ret

00005646 <nvm_eeprom_read_buffer>:
>>>>>>> Stashed changes
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
<<<<<<< Updated upstream
    59e0:	cf 93       	push	r28
    59e2:	df 93       	push	r29
    59e4:	9c 01       	movw	r18, r24
    59e6:	db 01       	movw	r26, r22
=======
    5646:	cf 93       	push	r28
    5648:	df 93       	push	r29
    564a:	9c 01       	movw	r18, r24
    564c:	db 01       	movw	r26, r22
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    59e8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ea:	f1 e0       	ldi	r31, 0x01	; 1
    59ec:	97 85       	ldd	r25, Z+15	; 0x0f
    59ee:	99 23       	and	r25, r25
    59f0:	ec f3       	brlt	.-6      	; 0x59ec <nvm_eeprom_read_buffer+0xc>
=======
    564e:	e0 ec       	ldi	r30, 0xC0	; 192
    5650:	f1 e0       	ldi	r31, 0x01	; 1
    5652:	97 85       	ldd	r25, Z+15	; 0x0f
    5654:	99 23       	and	r25, r25
    5656:	ec f3       	brlt	.-6      	; 0x5652 <nvm_eeprom_read_buffer+0xc>
>>>>>>> Stashed changes
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
<<<<<<< Updated upstream
    59f2:	cc ec       	ldi	r28, 0xCC	; 204
    59f4:	d1 e0       	ldi	r29, 0x01	; 1
    59f6:	98 81       	ld	r25, Y
    59f8:	98 60       	ori	r25, 0x08	; 8
    59fa:	98 83       	st	Y, r25
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    59fc:	b9 01       	movw	r22, r18
    59fe:	70 5f       	subi	r23, 0xF0	; 240
    5a00:	cd 01       	movw	r24, r26
    5a02:	0e 94 0e 31 	call	0x621c	; 0x621c <memcpy>
=======
    5658:	cc ec       	ldi	r28, 0xCC	; 204
    565a:	d1 e0       	ldi	r29, 0x01	; 1
    565c:	98 81       	ld	r25, Y
    565e:	98 60       	ori	r25, 0x08	; 8
    5660:	98 83       	st	Y, r25
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    5662:	b9 01       	movw	r22, r18
    5664:	70 5f       	subi	r23, 0xF0	; 240
    5666:	cd 01       	movw	r24, r26
    5668:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <memcpy>
>>>>>>> Stashed changes
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
<<<<<<< Updated upstream
    5a06:	88 81       	ld	r24, Y
    5a08:	87 7f       	andi	r24, 0xF7	; 247
    5a0a:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	08 95       	ret

00005a12 <nvm_eeprom_flush_buffer>:
=======
    566c:	88 81       	ld	r24, Y
    566e:	87 7f       	andi	r24, 0xF7	; 247
    5670:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    5672:	df 91       	pop	r29
    5674:	cf 91       	pop	r28
    5676:	08 95       	ret

00005678 <nvm_eeprom_flush_buffer>:
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5a12:	e0 ec       	ldi	r30, 0xC0	; 192
    5a14:	f1 e0       	ldi	r31, 0x01	; 1
    5a16:	87 85       	ldd	r24, Z+15	; 0x0f
    5a18:	88 23       	and	r24, r24
    5a1a:	ec f3       	brlt	.-6      	; 0x5a16 <nvm_eeprom_flush_buffer+0x4>
=======
    5678:	e0 ec       	ldi	r30, 0xC0	; 192
    567a:	f1 e0       	ldi	r31, 0x01	; 1
    567c:	87 85       	ldd	r24, Z+15	; 0x0f
    567e:	88 23       	and	r24, r24
    5680:	ec f3       	brlt	.-6      	; 0x567c <nvm_eeprom_flush_buffer+0x4>
>>>>>>> Stashed changes
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
<<<<<<< Updated upstream
    5a1c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5a20:	81 ff       	sbrs	r24, 1
    5a22:	08 c0       	rjmp	.+16     	; 0x5a34 <nvm_eeprom_flush_buffer+0x22>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    5a24:	86 e3       	ldi	r24, 0x36	; 54
    5a26:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
=======
    5682:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5686:	81 ff       	sbrs	r24, 1
    5688:	08 c0       	rjmp	.+16     	; 0x569a <nvm_eeprom_flush_buffer+0x22>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    568a:	86 e3       	ldi	r24, 0x36	; 54
    568c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
>>>>>>> Stashed changes
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
<<<<<<< Updated upstream
    5a2a:	61 e0       	ldi	r22, 0x01	; 1
    5a2c:	8b ec       	ldi	r24, 0xCB	; 203
    5a2e:	91 e0       	ldi	r25, 0x01	; 1
    5a30:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
    5a34:	08 95       	ret

00005a36 <nvm_eeprom_load_byte_to_buffer>:
=======
    5690:	61 e0       	ldi	r22, 0x01	; 1
    5692:	8b ec       	ldi	r24, 0xCB	; 203
    5694:	91 e0       	ldi	r25, 0x01	; 1
    5696:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
    569a:	08 95       	ret

0000569c <nvm_eeprom_load_byte_to_buffer>:
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5a36:	e0 ec       	ldi	r30, 0xC0	; 192
    5a38:	f1 e0       	ldi	r31, 0x01	; 1
    5a3a:	97 85       	ldd	r25, Z+15	; 0x0f
    5a3c:	99 23       	and	r25, r25
    5a3e:	ec f3       	brlt	.-6      	; 0x5a3a <nvm_eeprom_load_byte_to_buffer+0x4>
=======
    569c:	e0 ec       	ldi	r30, 0xC0	; 192
    569e:	f1 e0       	ldi	r31, 0x01	; 1
    56a0:	97 85       	ldd	r25, Z+15	; 0x0f
    56a2:	99 23       	and	r25, r25
    56a4:	ec f3       	brlt	.-6      	; 0x56a0 <nvm_eeprom_load_byte_to_buffer+0x4>
>>>>>>> Stashed changes
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
<<<<<<< Updated upstream
    5a40:	ac ec       	ldi	r26, 0xCC	; 204
    5a42:	b1 e0       	ldi	r27, 0x01	; 1
    5a44:	9c 91       	ld	r25, X
    5a46:	98 60       	ori	r25, 0x08	; 8
    5a48:	9c 93       	st	X, r25
=======
    56a6:	ac ec       	ldi	r26, 0xCC	; 204
    56a8:	b1 e0       	ldi	r27, 0x01	; 1
    56aa:	9c 91       	ld	r25, X
    56ac:	98 60       	ori	r25, 0x08	; 8
    56ae:	9c 93       	st	X, r25
>>>>>>> Stashed changes
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
<<<<<<< Updated upstream
    5a4a:	e8 2f       	mov	r30, r24
    5a4c:	f0 e0       	ldi	r31, 0x00	; 0
    5a4e:	f0 5f       	subi	r31, 0xF0	; 240
    5a50:	60 83       	st	Z, r22
=======
    56b0:	e8 2f       	mov	r30, r24
    56b2:	f0 e0       	ldi	r31, 0x00	; 0
    56b4:	f0 5f       	subi	r31, 0xF0	; 240
    56b6:	60 83       	st	Z, r22
>>>>>>> Stashed changes
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
<<<<<<< Updated upstream
    5a52:	8c 91       	ld	r24, X
    5a54:	87 7f       	andi	r24, 0xF7	; 247
    5a56:	8c 93       	st	X, r24
    5a58:	08 95       	ret

00005a5a <nvm_eeprom_write_byte>:
=======
    56b8:	8c 91       	ld	r24, X
    56ba:	87 7f       	andi	r24, 0xF7	; 247
    56bc:	8c 93       	st	X, r24
    56be:	08 95       	ret

000056c0 <nvm_eeprom_write_byte>:
>>>>>>> Stashed changes
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
<<<<<<< Updated upstream
    5a5a:	ff 92       	push	r15
    5a5c:	0f 93       	push	r16
    5a5e:	1f 93       	push	r17
    5a60:	cf 93       	push	r28
    5a62:	df 93       	push	r29
    5a64:	18 2f       	mov	r17, r24
    5a66:	f9 2e       	mov	r15, r25
    5a68:	c6 2f       	mov	r28, r22
=======
    56c0:	ff 92       	push	r15
    56c2:	0f 93       	push	r16
    56c4:	1f 93       	push	r17
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	18 2f       	mov	r17, r24
    56cc:	f9 2e       	mov	r15, r25
    56ce:	c6 2f       	mov	r28, r22
>>>>>>> Stashed changes

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
<<<<<<< Updated upstream
    5a6a:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    5a6e:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <nvm_eeprom_flush_buffer>
=======
    56d0:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    56d4:	0e 94 3c 2b 	call	0x5678	; 0x5678 <nvm_eeprom_flush_buffer>
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5a72:	e0 ec       	ldi	r30, 0xC0	; 192
    5a74:	f1 e0       	ldi	r31, 0x01	; 1
    5a76:	87 85       	ldd	r24, Z+15	; 0x0f
    5a78:	88 23       	and	r24, r24
    5a7a:	ec f3       	brlt	.-6      	; 0x5a76 <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    5a7c:	6c 2f       	mov	r22, r28
    5a7e:	81 2f       	mov	r24, r17
    5a80:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    5a84:	c0 ec       	ldi	r28, 0xC0	; 192
    5a86:	d1 e0       	ldi	r29, 0x01	; 1
    5a88:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5a8a:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5a8c:	18 83       	st	Y, r17
=======
    56d8:	e0 ec       	ldi	r30, 0xC0	; 192
    56da:	f1 e0       	ldi	r31, 0x01	; 1
    56dc:	87 85       	ldd	r24, Z+15	; 0x0f
    56de:	88 23       	and	r24, r24
    56e0:	ec f3       	brlt	.-6      	; 0x56dc <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    56e2:	6c 2f       	mov	r22, r28
    56e4:	81 2f       	mov	r24, r17
    56e6:	0e 94 4e 2b 	call	0x569c	; 0x569c <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    56ea:	c0 ec       	ldi	r28, 0xC0	; 192
    56ec:	d1 e0       	ldi	r29, 0x01	; 1
    56ee:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    56f0:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    56f2:	18 83       	st	Y, r17
>>>>>>> Stashed changes

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
<<<<<<< Updated upstream
    5a8e:	85 e3       	ldi	r24, 0x35	; 53
    5a90:	8a 87       	std	Y+10, r24	; 0x0a
=======
    56f4:	85 e3       	ldi	r24, 0x35	; 53
    56f6:	8a 87       	std	Y+10, r24	; 0x0a
>>>>>>> Stashed changes
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
<<<<<<< Updated upstream
    5a92:	61 e0       	ldi	r22, 0x01	; 1
    5a94:	8b ec       	ldi	r24, 0xCB	; 203
    5a96:	91 e0       	ldi	r25, 0x01	; 1
    5a98:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    5a9c:	0a 87       	std	Y+10, r16	; 0x0a
}
    5a9e:	df 91       	pop	r29
    5aa0:	cf 91       	pop	r28
    5aa2:	1f 91       	pop	r17
    5aa4:	0f 91       	pop	r16
    5aa6:	ff 90       	pop	r15
    5aa8:	08 95       	ret

00005aaa <nvm_eeprom_load_page_to_buffer>:
=======
    56f8:	61 e0       	ldi	r22, 0x01	; 1
    56fa:	8b ec       	ldi	r24, 0xCB	; 203
    56fc:	91 e0       	ldi	r25, 0x01	; 1
    56fe:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    5702:	0a 87       	std	Y+10, r16	; 0x0a
}
    5704:	df 91       	pop	r29
    5706:	cf 91       	pop	r28
    5708:	1f 91       	pop	r17
    570a:	0f 91       	pop	r16
    570c:	ff 90       	pop	r15
    570e:	08 95       	ret

00005710 <nvm_eeprom_load_page_to_buffer>:
>>>>>>> Stashed changes
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
<<<<<<< Updated upstream
    5aaa:	0f 93       	push	r16
    5aac:	1f 93       	push	r17
    5aae:	cf 93       	push	r28
    5ab0:	8c 01       	movw	r16, r24
=======
    5710:	0f 93       	push	r16
    5712:	1f 93       	push	r17
    5714:	cf 93       	push	r28
    5716:	8c 01       	movw	r16, r24
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5ab2:	e0 ec       	ldi	r30, 0xC0	; 192
    5ab4:	f1 e0       	ldi	r31, 0x01	; 1
    5ab6:	87 85       	ldd	r24, Z+15	; 0x0f
    5ab8:	88 23       	and	r24, r24
    5aba:	ec f3       	brlt	.-6      	; 0x5ab6 <nvm_eeprom_load_page_to_buffer+0xc>
    5abc:	c0 e0       	ldi	r28, 0x00	; 0
=======
    5718:	e0 ec       	ldi	r30, 0xC0	; 192
    571a:	f1 e0       	ldi	r31, 0x01	; 1
    571c:	87 85       	ldd	r24, Z+15	; 0x0f
    571e:	88 23       	and	r24, r24
    5720:	ec f3       	brlt	.-6      	; 0x571c <nvm_eeprom_load_page_to_buffer+0xc>
    5722:	c0 e0       	ldi	r28, 0x00	; 0
>>>>>>> Stashed changes
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
<<<<<<< Updated upstream
    5abe:	f8 01       	movw	r30, r16
    5ac0:	61 91       	ld	r22, Z+
    5ac2:	8f 01       	movw	r16, r30
    5ac4:	8c 2f       	mov	r24, r28
    5ac6:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <nvm_eeprom_load_byte_to_buffer>
=======
    5724:	f8 01       	movw	r30, r16
    5726:	61 91       	ld	r22, Z+
    5728:	8f 01       	movw	r16, r30
    572a:	8c 2f       	mov	r24, r28
    572c:	0e 94 4e 2b 	call	0x569c	; 0x569c <nvm_eeprom_load_byte_to_buffer>
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
<<<<<<< Updated upstream
    5aca:	cf 5f       	subi	r28, 0xFF	; 255
    5acc:	c0 32       	cpi	r28, 0x20	; 32
    5ace:	b9 f7       	brne	.-18     	; 0x5abe <nvm_eeprom_load_page_to_buffer+0x14>
=======
    5730:	cf 5f       	subi	r28, 0xFF	; 255
    5732:	c0 32       	cpi	r28, 0x20	; 32
    5734:	b9 f7       	brne	.-18     	; 0x5724 <nvm_eeprom_load_page_to_buffer+0x14>
>>>>>>> Stashed changes
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
<<<<<<< Updated upstream
    5ad0:	cf 91       	pop	r28
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	08 95       	ret

00005ad8 <nvm_eeprom_atomic_write_page>:
=======
    5736:	cf 91       	pop	r28
    5738:	1f 91       	pop	r17
    573a:	0f 91       	pop	r16
    573c:	08 95       	ret

0000573e <nvm_eeprom_atomic_write_page>:
>>>>>>> Stashed changes
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
<<<<<<< Updated upstream
    5ad8:	1f 93       	push	r17
    5ada:	cf 93       	push	r28
    5adc:	df 93       	push	r29
    5ade:	e0 ec       	ldi	r30, 0xC0	; 192
    5ae0:	f1 e0       	ldi	r31, 0x01	; 1
    5ae2:	97 85       	ldd	r25, Z+15	; 0x0f
    5ae4:	99 23       	and	r25, r25
    5ae6:	ec f3       	brlt	.-6      	; 0x5ae2 <nvm_eeprom_atomic_write_page+0xa>
=======
    573e:	1f 93       	push	r17
    5740:	cf 93       	push	r28
    5742:	df 93       	push	r29
    5744:	e0 ec       	ldi	r30, 0xC0	; 192
    5746:	f1 e0       	ldi	r31, 0x01	; 1
    5748:	97 85       	ldd	r25, Z+15	; 0x0f
    574a:	99 23       	and	r25, r25
    574c:	ec f3       	brlt	.-6      	; 0x5748 <nvm_eeprom_atomic_write_page+0xa>
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
<<<<<<< Updated upstream
    5ae8:	20 e2       	ldi	r18, 0x20	; 32
    5aea:	82 9f       	mul	r24, r18
    5aec:	c0 01       	movw	r24, r0
    5aee:	11 24       	eor	r1, r1
=======
    574e:	20 e2       	ldi	r18, 0x20	; 32
    5750:	82 9f       	mul	r24, r18
    5752:	c0 01       	movw	r24, r0
    5754:	11 24       	eor	r1, r1
>>>>>>> Stashed changes

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
<<<<<<< Updated upstream
    5af0:	c0 ec       	ldi	r28, 0xC0	; 192
    5af2:	d1 e0       	ldi	r29, 0x01	; 1
    5af4:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5af6:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5af8:	88 83       	st	Y, r24
=======
    5756:	c0 ec       	ldi	r28, 0xC0	; 192
    5758:	d1 e0       	ldi	r29, 0x01	; 1
    575a:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    575c:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    575e:	88 83       	st	Y, r24
>>>>>>> Stashed changes
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
<<<<<<< Updated upstream
    5afa:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5afc:	85 e3       	ldi	r24, 0x35	; 53
    5afe:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5b00:	61 e0       	ldi	r22, 0x01	; 1
    5b02:	8b ec       	ldi	r24, 0xCB	; 203
    5b04:	91 e0       	ldi	r25, 0x01	; 1
    5b06:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
	NVM.CMD = old_cmd;
    5b0a:	1a 87       	std	Y+10, r17	; 0x0a
=======
    5760:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5762:	85 e3       	ldi	r24, 0x35	; 53
    5764:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5766:	61 e0       	ldi	r22, 0x01	; 1
    5768:	8b ec       	ldi	r24, 0xCB	; 203
    576a:	91 e0       	ldi	r25, 0x01	; 1
    576c:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
	NVM.CMD = old_cmd;
    5770:	1a 87       	std	Y+10, r17	; 0x0a
>>>>>>> Stashed changes

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
<<<<<<< Updated upstream
    5b0c:	df 91       	pop	r29
    5b0e:	cf 91       	pop	r28
    5b10:	1f 91       	pop	r17
    5b12:	08 95       	ret

00005b14 <nvm_eeprom_erase_and_write_buffer>:
=======
    5772:	df 91       	pop	r29
    5774:	cf 91       	pop	r28
    5776:	1f 91       	pop	r17
    5778:	08 95       	ret

0000577a <nvm_eeprom_erase_and_write_buffer>:
>>>>>>> Stashed changes
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
<<<<<<< Updated upstream
    5b14:	cf 92       	push	r12
    5b16:	df 92       	push	r13
    5b18:	ef 92       	push	r14
    5b1a:	ff 92       	push	r15
    5b1c:	0f 93       	push	r16
    5b1e:	1f 93       	push	r17
    5b20:	cf 93       	push	r28
    5b22:	df 93       	push	r29
    5b24:	ec 01       	movw	r28, r24
    5b26:	7b 01       	movw	r14, r22
    5b28:	8a 01       	movw	r16, r20
	while (len) {
    5b2a:	45 2b       	or	r20, r21
    5b2c:	69 f1       	breq	.+90     	; 0x5b88 <nvm_eeprom_erase_and_write_buffer+0x74>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    5b2e:	ce 01       	movw	r24, r28
    5b30:	8f 71       	andi	r24, 0x1F	; 31
    5b32:	99 27       	eor	r25, r25
    5b34:	89 2b       	or	r24, r25
    5b36:	c1 f4       	brne	.+48     	; 0x5b68 <nvm_eeprom_erase_and_write_buffer+0x54>
    5b38:	00 32       	cpi	r16, 0x20	; 32
    5b3a:	11 05       	cpc	r17, r1
    5b3c:	a8 f0       	brcs	.+42     	; 0x5b68 <nvm_eeprom_erase_and_write_buffer+0x54>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    5b3e:	c7 01       	movw	r24, r14
    5b40:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    5b44:	ce 01       	movw	r24, r28
    5b46:	96 95       	lsr	r25
    5b48:	87 95       	ror	r24
    5b4a:	92 95       	swap	r25
    5b4c:	82 95       	swap	r24
    5b4e:	8f 70       	andi	r24, 0x0F	; 15
    5b50:	89 27       	eor	r24, r25
    5b52:	9f 70       	andi	r25, 0x0F	; 15
    5b54:	89 27       	eor	r24, r25
    5b56:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    5b5a:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    5b5c:	80 e2       	ldi	r24, 0x20	; 32
    5b5e:	e8 0e       	add	r14, r24
    5b60:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    5b62:	00 52       	subi	r16, 0x20	; 32
    5b64:	11 09       	sbc	r17, r1
    5b66:	0d c0       	rjmp	.+26     	; 0x5b82 <nvm_eeprom_erase_and_write_buffer+0x6e>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    5b68:	6e 01       	movw	r12, r28
    5b6a:	ef ef       	ldi	r30, 0xFF	; 255
    5b6c:	ce 1a       	sub	r12, r30
    5b6e:	de 0a       	sbc	r13, r30
    5b70:	f7 01       	movw	r30, r14
    5b72:	61 91       	ld	r22, Z+
    5b74:	7f 01       	movw	r14, r30
    5b76:	ce 01       	movw	r24, r28
    5b78:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    5b7c:	01 50       	subi	r16, 0x01	; 1
    5b7e:	11 09       	sbc	r17, r1
=======
    577a:	cf 92       	push	r12
    577c:	df 92       	push	r13
    577e:	ef 92       	push	r14
    5780:	ff 92       	push	r15
    5782:	0f 93       	push	r16
    5784:	1f 93       	push	r17
    5786:	cf 93       	push	r28
    5788:	df 93       	push	r29
    578a:	ec 01       	movw	r28, r24
    578c:	7b 01       	movw	r14, r22
    578e:	8a 01       	movw	r16, r20
	while (len) {
    5790:	45 2b       	or	r20, r21
    5792:	69 f1       	breq	.+90     	; 0x57ee <nvm_eeprom_erase_and_write_buffer+0x74>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    5794:	ce 01       	movw	r24, r28
    5796:	8f 71       	andi	r24, 0x1F	; 31
    5798:	99 27       	eor	r25, r25
    579a:	89 2b       	or	r24, r25
    579c:	c1 f4       	brne	.+48     	; 0x57ce <nvm_eeprom_erase_and_write_buffer+0x54>
    579e:	00 32       	cpi	r16, 0x20	; 32
    57a0:	11 05       	cpc	r17, r1
    57a2:	a8 f0       	brcs	.+42     	; 0x57ce <nvm_eeprom_erase_and_write_buffer+0x54>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    57a4:	c7 01       	movw	r24, r14
    57a6:	0e 94 88 2b 	call	0x5710	; 0x5710 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    57aa:	ce 01       	movw	r24, r28
    57ac:	96 95       	lsr	r25
    57ae:	87 95       	ror	r24
    57b0:	92 95       	swap	r25
    57b2:	82 95       	swap	r24
    57b4:	8f 70       	andi	r24, 0x0F	; 15
    57b6:	89 27       	eor	r24, r25
    57b8:	9f 70       	andi	r25, 0x0F	; 15
    57ba:	89 27       	eor	r24, r25
    57bc:	0e 94 9f 2b 	call	0x573e	; 0x573e <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    57c0:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    57c2:	80 e2       	ldi	r24, 0x20	; 32
    57c4:	e8 0e       	add	r14, r24
    57c6:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    57c8:	00 52       	subi	r16, 0x20	; 32
    57ca:	11 09       	sbc	r17, r1
    57cc:	0d c0       	rjmp	.+26     	; 0x57e8 <nvm_eeprom_erase_and_write_buffer+0x6e>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    57ce:	6e 01       	movw	r12, r28
    57d0:	ef ef       	ldi	r30, 0xFF	; 255
    57d2:	ce 1a       	sub	r12, r30
    57d4:	de 0a       	sbc	r13, r30
    57d6:	f7 01       	movw	r30, r14
    57d8:	61 91       	ld	r22, Z+
    57da:	7f 01       	movw	r14, r30
    57dc:	ce 01       	movw	r24, r28
    57de:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    57e2:	01 50       	subi	r16, 0x01	; 1
    57e4:	11 09       	sbc	r17, r1
>>>>>>> Stashed changes
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
<<<<<<< Updated upstream
    5b80:	e6 01       	movw	r28, r12
=======
    57e6:	e6 01       	movw	r28, r12
>>>>>>> Stashed changes
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
<<<<<<< Updated upstream
    5b82:	01 15       	cp	r16, r1
    5b84:	11 05       	cpc	r17, r1
    5b86:	99 f6       	brne	.-90     	; 0x5b2e <nvm_eeprom_erase_and_write_buffer+0x1a>
=======
    57e8:	01 15       	cp	r16, r1
    57ea:	11 05       	cpc	r17, r1
    57ec:	99 f6       	brne	.-90     	; 0x5794 <nvm_eeprom_erase_and_write_buffer+0x1a>
>>>>>>> Stashed changes
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
<<<<<<< Updated upstream
    5b88:	df 91       	pop	r29
    5b8a:	cf 91       	pop	r28
    5b8c:	1f 91       	pop	r17
    5b8e:	0f 91       	pop	r16
    5b90:	ff 90       	pop	r15
    5b92:	ef 90       	pop	r14
    5b94:	df 90       	pop	r13
    5b96:	cf 90       	pop	r12
    5b98:	08 95       	ret

00005b9a <nvm_eeprom_split_write_page>:
=======
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	1f 91       	pop	r17
    57f4:	0f 91       	pop	r16
    57f6:	ff 90       	pop	r15
    57f8:	ef 90       	pop	r14
    57fa:	df 90       	pop	r13
    57fc:	cf 90       	pop	r12
    57fe:	08 95       	ret

00005800 <nvm_eeprom_split_write_page>:
>>>>>>> Stashed changes
 * before writing.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_split_write_page(uint8_t page_addr)
{
<<<<<<< Updated upstream
    5b9a:	1f 93       	push	r17
    5b9c:	cf 93       	push	r28
    5b9e:	df 93       	push	r29
=======
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5ba0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ba2:	f1 e0       	ldi	r31, 0x01	; 1
    5ba4:	97 85       	ldd	r25, Z+15	; 0x0f
    5ba6:	99 23       	and	r25, r25
    5ba8:	ec f3       	brlt	.-6      	; 0x5ba4 <nvm_eeprom_split_write_page+0xa>
=======
    5806:	e0 ec       	ldi	r30, 0xC0	; 192
    5808:	f1 e0       	ldi	r31, 0x01	; 1
    580a:	97 85       	ldd	r25, Z+15	; 0x0f
    580c:	99 23       	and	r25, r25
    580e:	ec f3       	brlt	.-6      	; 0x580a <nvm_eeprom_split_write_page+0xa>
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
<<<<<<< Updated upstream
    5baa:	20 e2       	ldi	r18, 0x20	; 32
    5bac:	82 9f       	mul	r24, r18
    5bae:	c0 01       	movw	r24, r0
    5bb0:	11 24       	eor	r1, r1
=======
    5810:	20 e2       	ldi	r18, 0x20	; 32
    5812:	82 9f       	mul	r24, r18
    5814:	c0 01       	movw	r24, r0
    5816:	11 24       	eor	r1, r1
>>>>>>> Stashed changes

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
<<<<<<< Updated upstream
    5bb2:	c0 ec       	ldi	r28, 0xC0	; 192
    5bb4:	d1 e0       	ldi	r29, 0x01	; 1
    5bb6:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5bb8:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5bba:	88 83       	st	Y, r24
=======
    5818:	c0 ec       	ldi	r28, 0xC0	; 192
    581a:	d1 e0       	ldi	r29, 0x01	; 1
    581c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    581e:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5820:	88 83       	st	Y, r24
>>>>>>> Stashed changes
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
<<<<<<< Updated upstream
    5bbc:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5bbe:	84 e3       	ldi	r24, 0x34	; 52
    5bc0:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5bc2:	61 e0       	ldi	r22, 0x01	; 1
    5bc4:	8b ec       	ldi	r24, 0xCB	; 203
    5bc6:	91 e0       	ldi	r25, 0x01	; 1
    5bc8:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
	NVM.CMD = old_cmd;
    5bcc:	1a 87       	std	Y+10, r17	; 0x0a
=======
    5822:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5824:	84 e3       	ldi	r24, 0x34	; 52
    5826:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5828:	61 e0       	ldi	r22, 0x01	; 1
    582a:	8b ec       	ldi	r24, 0xCB	; 203
    582c:	91 e0       	ldi	r25, 0x01	; 1
    582e:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
	NVM.CMD = old_cmd;
    5832:	1a 87       	std	Y+10, r17	; 0x0a
>>>>>>> Stashed changes

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
}
<<<<<<< Updated upstream
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	1f 91       	pop	r17
    5bd4:	08 95       	ret

00005bd6 <nvm_eeprom_fill_buffer_with_value>:
=======
    5834:	df 91       	pop	r29
    5836:	cf 91       	pop	r28
    5838:	1f 91       	pop	r17
    583a:	08 95       	ret

0000583c <nvm_eeprom_fill_buffer_with_value>:
>>>>>>> Stashed changes
 *       EEPROM write page operation.
 *
 * \param  value Value to copy to the page buffer.
 */
void nvm_eeprom_fill_buffer_with_value(uint8_t value)
{
<<<<<<< Updated upstream
    5bd6:	cf 93       	push	r28
    5bd8:	df 93       	push	r29
    5bda:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    5bdc:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <nvm_eeprom_flush_buffer>
=======
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    5842:	0e 94 3c 2b 	call	0x5678	; 0x5678 <nvm_eeprom_flush_buffer>
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5be0:	e0 ec       	ldi	r30, 0xC0	; 192
    5be2:	f1 e0       	ldi	r31, 0x01	; 1
    5be4:	87 85       	ldd	r24, Z+15	; 0x0f
    5be6:	88 23       	and	r24, r24
    5be8:	ec f3       	brlt	.-6      	; 0x5be4 <nvm_eeprom_fill_buffer_with_value+0xe>
    5bea:	c0 e0       	ldi	r28, 0x00	; 0
=======
    5846:	e0 ec       	ldi	r30, 0xC0	; 192
    5848:	f1 e0       	ldi	r31, 0x01	; 1
    584a:	87 85       	ldd	r24, Z+15	; 0x0f
    584c:	88 23       	and	r24, r24
    584e:	ec f3       	brlt	.-6      	; 0x584a <nvm_eeprom_fill_buffer_with_value+0xe>
    5850:	c0 e0       	ldi	r28, 0x00	; 0
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, value);
<<<<<<< Updated upstream
    5bec:	6d 2f       	mov	r22, r29
    5bee:	8c 2f       	mov	r24, r28
    5bf0:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <nvm_eeprom_load_byte_to_buffer>
=======
    5852:	6d 2f       	mov	r22, r29
    5854:	8c 2f       	mov	r24, r28
    5856:	0e 94 4e 2b 	call	0x569c	; 0x569c <nvm_eeprom_load_byte_to_buffer>
>>>>>>> Stashed changes
	nvm_eeprom_flush_buffer();
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
<<<<<<< Updated upstream
    5bf4:	cf 5f       	subi	r28, 0xFF	; 255
    5bf6:	c0 32       	cpi	r28, 0x20	; 32
    5bf8:	c9 f7       	brne	.-14     	; 0x5bec <nvm_eeprom_fill_buffer_with_value+0x16>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    5bfa:	df 91       	pop	r29
    5bfc:	cf 91       	pop	r28
    5bfe:	08 95       	ret

00005c00 <nvm_eeprom_erase_bytes_in_page>:
=======
    585a:	cf 5f       	subi	r28, 0xFF	; 255
    585c:	c0 32       	cpi	r28, 0x20	; 32
    585e:	c9 f7       	brne	.-14     	; 0x5852 <nvm_eeprom_fill_buffer_with_value+0x16>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    5860:	df 91       	pop	r29
    5862:	cf 91       	pop	r28
    5864:	08 95       	ret

00005866 <nvm_eeprom_erase_bytes_in_page>:
>>>>>>> Stashed changes
 * written to in the page buffer reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_bytes_in_page(uint8_t page_addr)
{
<<<<<<< Updated upstream
    5c00:	1f 93       	push	r17
    5c02:	cf 93       	push	r28
    5c04:	df 93       	push	r29
    5c06:	e0 ec       	ldi	r30, 0xC0	; 192
    5c08:	f1 e0       	ldi	r31, 0x01	; 1
    5c0a:	97 85       	ldd	r25, Z+15	; 0x0f
    5c0c:	99 23       	and	r25, r25
    5c0e:	ec f3       	brlt	.-6      	; 0x5c0a <nvm_eeprom_erase_bytes_in_page+0xa>
=======
    5866:	1f 93       	push	r17
    5868:	cf 93       	push	r28
    586a:	df 93       	push	r29
    586c:	e0 ec       	ldi	r30, 0xC0	; 192
    586e:	f1 e0       	ldi	r31, 0x01	; 1
    5870:	97 85       	ldd	r25, Z+15	; 0x0f
    5872:	99 23       	and	r25, r25
    5874:	ec f3       	brlt	.-6      	; 0x5870 <nvm_eeprom_erase_bytes_in_page+0xa>
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
<<<<<<< Updated upstream
    5c10:	20 e2       	ldi	r18, 0x20	; 32
    5c12:	82 9f       	mul	r24, r18
    5c14:	c0 01       	movw	r24, r0
    5c16:	11 24       	eor	r1, r1
=======
    5876:	20 e2       	ldi	r18, 0x20	; 32
    5878:	82 9f       	mul	r24, r18
    587a:	c0 01       	movw	r24, r0
    587c:	11 24       	eor	r1, r1
>>>>>>> Stashed changes

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
<<<<<<< Updated upstream
    5c18:	c0 ec       	ldi	r28, 0xC0	; 192
    5c1a:	d1 e0       	ldi	r29, 0x01	; 1
    5c1c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5c1e:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5c20:	88 83       	st	Y, r24
=======
    587e:	c0 ec       	ldi	r28, 0xC0	; 192
    5880:	d1 e0       	ldi	r29, 0x01	; 1
    5882:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5884:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5886:	88 83       	st	Y, r24
>>>>>>> Stashed changes
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
<<<<<<< Updated upstream
    5c22:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5c24:	82 e3       	ldi	r24, 0x32	; 50
    5c26:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5c28:	61 e0       	ldi	r22, 0x01	; 1
    5c2a:	8b ec       	ldi	r24, 0xCB	; 203
    5c2c:	91 e0       	ldi	r25, 0x01	; 1
    5c2e:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
	NVM.CMD = old_cmd;
    5c32:	1a 87       	std	Y+10, r17	; 0x0a
=======
    5888:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    588a:	82 e3       	ldi	r24, 0x32	; 50
    588c:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    588e:	61 e0       	ldi	r22, 0x01	; 1
    5890:	8b ec       	ldi	r24, 0xCB	; 203
    5892:	91 e0       	ldi	r25, 0x01	; 1
    5894:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
	NVM.CMD = old_cmd;
    5898:	1a 87       	std	Y+10, r17	; 0x0a
>>>>>>> Stashed changes

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
}
<<<<<<< Updated upstream
    5c34:	df 91       	pop	r29
    5c36:	cf 91       	pop	r28
    5c38:	1f 91       	pop	r17
    5c3a:	08 95       	ret

00005c3c <nvm_eeprom_erase_page>:
=======
    589a:	df 91       	pop	r29
    589c:	cf 91       	pop	r28
    589e:	1f 91       	pop	r17
    58a0:	08 95       	ret

000058a2 <nvm_eeprom_erase_page>:
>>>>>>> Stashed changes
 * This function erases one EEPROM page, so that every location reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_page(uint8_t page_addr)
{
<<<<<<< Updated upstream
    5c3c:	cf 93       	push	r28
    5c3e:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    5c40:	8f ef       	ldi	r24, 0xFF	; 255
    5c42:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    5c46:	8c 2f       	mov	r24, r28
    5c48:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <nvm_eeprom_erase_bytes_in_page>
}
    5c4c:	cf 91       	pop	r28
    5c4e:	08 95       	ret

00005c50 <nvm_eeprom_erase_bytes_in_all_pages>:
=======
    58a2:	cf 93       	push	r28
    58a4:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    58a6:	8f ef       	ldi	r24, 0xFF	; 255
    58a8:	0e 94 1e 2c 	call	0x583c	; 0x583c <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    58ac:	8c 2f       	mov	r24, r28
    58ae:	0e 94 33 2c 	call	0x5866	; 0x5866 <nvm_eeprom_erase_bytes_in_page>
}
    58b2:	cf 91       	pop	r28
    58b4:	08 95       	ret

000058b6 <nvm_eeprom_erase_bytes_in_all_pages>:
>>>>>>> Stashed changes
 *
 * This function erases bytes from all EEPROM pages, so that every location
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
<<<<<<< Updated upstream
    5c50:	1f 93       	push	r17
    5c52:	cf 93       	push	r28
    5c54:	df 93       	push	r29
=======
    58b6:	1f 93       	push	r17
    58b8:	cf 93       	push	r28
    58ba:	df 93       	push	r29
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5c56:	e0 ec       	ldi	r30, 0xC0	; 192
    5c58:	f1 e0       	ldi	r31, 0x01	; 1
    5c5a:	87 85       	ldd	r24, Z+15	; 0x0f
    5c5c:	88 23       	and	r24, r24
    5c5e:	ec f3       	brlt	.-6      	; 0x5c5a <nvm_eeprom_erase_bytes_in_all_pages+0xa>
=======
    58bc:	e0 ec       	ldi	r30, 0xC0	; 192
    58be:	f1 e0       	ldi	r31, 0x01	; 1
    58c0:	87 85       	ldd	r24, Z+15	; 0x0f
    58c2:	88 23       	and	r24, r24
    58c4:	ec f3       	brlt	.-6      	; 0x58c0 <nvm_eeprom_erase_bytes_in_all_pages+0xa>
>>>>>>> Stashed changes
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
<<<<<<< Updated upstream
    5c60:	c0 ec       	ldi	r28, 0xC0	; 192
    5c62:	d1 e0       	ldi	r29, 0x01	; 1
    5c64:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5c66:	80 e3       	ldi	r24, 0x30	; 48
    5c68:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5c6a:	61 e0       	ldi	r22, 0x01	; 1
    5c6c:	8b ec       	ldi	r24, 0xCB	; 203
    5c6e:	91 e0       	ldi	r25, 0x01	; 1
    5c70:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
	NVM.CMD = old_cmd;
    5c74:	1a 87       	std	Y+10, r17	; 0x0a
=======
    58c6:	c0 ec       	ldi	r28, 0xC0	; 192
    58c8:	d1 e0       	ldi	r29, 0x01	; 1
    58ca:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    58cc:	80 e3       	ldi	r24, 0x30	; 48
    58ce:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    58d0:	61 e0       	ldi	r22, 0x01	; 1
    58d2:	8b ec       	ldi	r24, 0xCB	; 203
    58d4:	91 e0       	ldi	r25, 0x01	; 1
    58d6:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
	NVM.CMD = old_cmd;
    58da:	1a 87       	std	Y+10, r17	; 0x0a
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
}
<<<<<<< Updated upstream
    5c76:	df 91       	pop	r29
    5c78:	cf 91       	pop	r28
    5c7a:	1f 91       	pop	r17
    5c7c:	08 95       	ret

00005c7e <nvm_eeprom_erase_all>:
=======
    58dc:	df 91       	pop	r29
    58de:	cf 91       	pop	r28
    58e0:	1f 91       	pop	r17
    58e2:	08 95       	ret

000058e4 <nvm_eeprom_erase_all>:
>>>>>>> Stashed changes
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
<<<<<<< Updated upstream
    5c7e:	8f ef       	ldi	r24, 0xFF	; 255
    5c80:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    5c84:	0e 94 28 2e 	call	0x5c50	; 0x5c50 <nvm_eeprom_erase_bytes_in_all_pages>
    5c88:	08 95       	ret

00005c8a <nvm_issue_flash_range_crc>:
=======
    58e4:	8f ef       	ldi	r24, 0xFF	; 255
    58e6:	0e 94 1e 2c 	call	0x583c	; 0x583c <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    58ea:	0e 94 5b 2c 	call	0x58b6	; 0x58b6 <nvm_eeprom_erase_bytes_in_all_pages>
    58ee:	08 95       	ret

000058f0 <nvm_issue_flash_range_crc>:
>>>>>>> Stashed changes
 *
 * \param start_addr  end byte address
 * \param end_addr    start byte address
 */
void nvm_issue_flash_range_crc(flash_addr_t start_addr, flash_addr_t end_addr)
{
<<<<<<< Updated upstream
    5c8a:	cf 92       	push	r12
    5c8c:	df 92       	push	r13
    5c8e:	ef 92       	push	r14
    5c90:	ff 92       	push	r15
    5c92:	1f 93       	push	r17
    5c94:	cf 93       	push	r28
    5c96:	df 93       	push	r29
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    5c98:	c0 ec       	ldi	r28, 0xC0	; 192
    5c9a:	d1 e0       	ldi	r29, 0x01	; 1
    5c9c:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    5c9e:	ea e3       	ldi	r30, 0x3A	; 58
    5ca0:	ea 87       	std	Y+10, r30	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    5ca2:	68 83       	st	Y, r22
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    5ca4:	c7 2e       	mov	r12, r23
    5ca6:	d8 2e       	mov	r13, r24
    5ca8:	e9 2e       	mov	r14, r25
    5caa:	ff 24       	eor	r15, r15
    5cac:	c9 82       	std	Y+1, r12	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    5cae:	aa 27       	eor	r26, r26
    5cb0:	bb 27       	eor	r27, r27
    5cb2:	8a 83       	std	Y+2, r24	; 0x02
=======
    58f0:	cf 92       	push	r12
    58f2:	df 92       	push	r13
    58f4:	ef 92       	push	r14
    58f6:	ff 92       	push	r15
    58f8:	1f 93       	push	r17
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    58fe:	c0 ec       	ldi	r28, 0xC0	; 192
    5900:	d1 e0       	ldi	r29, 0x01	; 1
    5902:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    5904:	ea e3       	ldi	r30, 0x3A	; 58
    5906:	ea 87       	std	Y+10, r30	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    5908:	68 83       	st	Y, r22
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    590a:	c7 2e       	mov	r12, r23
    590c:	d8 2e       	mov	r13, r24
    590e:	e9 2e       	mov	r14, r25
    5910:	ff 24       	eor	r15, r15
    5912:	c9 82       	std	Y+1, r12	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    5914:	aa 27       	eor	r26, r26
    5916:	bb 27       	eor	r27, r27
    5918:	8a 83       	std	Y+2, r24	; 0x02
>>>>>>> Stashed changes
#endif

	// Load the end byte address in NVM Data Register
	NVM.DATA0 = end_addr & 0xFF;
<<<<<<< Updated upstream
    5cb4:	2c 83       	std	Y+4, r18	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    5cb6:	bb 27       	eor	r27, r27
    5cb8:	a5 2f       	mov	r26, r21
    5cba:	94 2f       	mov	r25, r20
    5cbc:	83 2f       	mov	r24, r19
    5cbe:	8d 83       	std	Y+5, r24	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    5cc0:	ca 01       	movw	r24, r20
    5cc2:	aa 27       	eor	r26, r26
    5cc4:	bb 27       	eor	r27, r27
    5cc6:	8e 83       	std	Y+6, r24	; 0x06
=======
    591a:	2c 83       	std	Y+4, r18	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    591c:	bb 27       	eor	r27, r27
    591e:	a5 2f       	mov	r26, r21
    5920:	94 2f       	mov	r25, r20
    5922:	83 2f       	mov	r24, r19
    5924:	8d 83       	std	Y+5, r24	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    5926:	ca 01       	movw	r24, r20
    5928:	aa 27       	eor	r26, r26
    592a:	bb 27       	eor	r27, r27
    592c:	8e 83       	std	Y+6, r24	; 0x06
>>>>>>> Stashed changes
#endif

	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
<<<<<<< Updated upstream
    5cc8:	61 e0       	ldi	r22, 0x01	; 1
    5cca:	8b ec       	ldi	r24, 0xCB	; 203
    5ccc:	91 e0       	ldi	r25, 0x01	; 1
    5cce:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    5cd2:	1a 87       	std	Y+10, r17	; 0x0a
}
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	1f 91       	pop	r17
    5cda:	ff 90       	pop	r15
    5cdc:	ef 90       	pop	r14
    5cde:	df 90       	pop	r13
    5ce0:	cf 90       	pop	r12
    5ce2:	08 95       	ret

00005ce4 <nvm_flash_read_buffer>:
=======
    592e:	61 e0       	ldi	r22, 0x01	; 1
    5930:	8b ec       	ldi	r24, 0xCB	; 203
    5932:	91 e0       	ldi	r25, 0x01	; 1
    5934:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    5938:	1a 87       	std	Y+10, r17	; 0x0a
}
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	1f 91       	pop	r17
    5940:	ff 90       	pop	r15
    5942:	ef 90       	pop	r14
    5944:	df 90       	pop	r13
    5946:	cf 90       	pop	r12
    5948:	08 95       	ret

0000594a <nvm_flash_read_buffer>:
>>>>>>> Stashed changes
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
<<<<<<< Updated upstream
    5ce4:	da 01       	movw	r26, r20
    5ce6:	a9 01       	movw	r20, r18
=======
    594a:	da 01       	movw	r26, r20
    594c:	a9 01       	movw	r20, r18
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5ce8:	e0 ec       	ldi	r30, 0xC0	; 192
    5cea:	f1 e0       	ldi	r31, 0x01	; 1
    5cec:	37 85       	ldd	r19, Z+15	; 0x0f
    5cee:	33 23       	and	r19, r19
    5cf0:	ec f3       	brlt	.-6      	; 0x5cec <nvm_flash_read_buffer+0x8>
=======
    594e:	e0 ec       	ldi	r30, 0xC0	; 192
    5950:	f1 e0       	ldi	r31, 0x01	; 1
    5952:	37 85       	ldd	r19, Z+15	; 0x0f
    5954:	33 23       	and	r19, r19
    5956:	ec f3       	brlt	.-6      	; 0x5952 <nvm_flash_read_buffer+0x8>
>>>>>>> Stashed changes
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
<<<<<<< Updated upstream
    5cf2:	41 15       	cp	r20, r1
    5cf4:	51 05       	cpc	r21, r1
    5cf6:	79 f0       	breq	.+30     	; 0x5d16 <nvm_flash_read_buffer+0x32>
    5cf8:	4a 0f       	add	r20, r26
    5cfa:	5b 1f       	adc	r21, r27
=======
    5958:	41 15       	cp	r20, r1
    595a:	51 05       	cpc	r21, r1
    595c:	79 f0       	breq	.+30     	; 0x597c <nvm_flash_read_buffer+0x32>
    595e:	4a 0f       	add	r20, r26
    5960:	5b 1f       	adc	r21, r27
>>>>>>> Stashed changes
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
<<<<<<< Updated upstream
    5cfc:	0b b6       	in	r0, 0x3b	; 59
    5cfe:	8b bf       	out	0x3b, r24	; 59
    5d00:	fb 01       	movw	r30, r22
    5d02:	37 91       	elpm	r19, Z+
    5d04:	0b be       	out	0x3b, r0	; 59
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    5d06:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    5d08:	6f 5f       	subi	r22, 0xFF	; 255
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d0e:	9f 4f       	sbci	r25, 0xFF	; 255
=======
    5962:	0b b6       	in	r0, 0x3b	; 59
    5964:	8b bf       	out	0x3b, r24	; 59
    5966:	fb 01       	movw	r30, r22
    5968:	37 91       	elpm	r19, Z+
    596a:	0b be       	out	0x3b, r0	; 59
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    596c:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    596e:	6f 5f       	subi	r22, 0xFF	; 255
    5970:	7f 4f       	sbci	r23, 0xFF	; 255
    5972:	8f 4f       	sbci	r24, 0xFF	; 255
    5974:	9f 4f       	sbci	r25, 0xFF	; 255
>>>>>>> Stashed changes
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
<<<<<<< Updated upstream
    5d10:	a4 17       	cp	r26, r20
    5d12:	b5 07       	cpc	r27, r21
    5d14:	99 f7       	brne	.-26     	; 0x5cfc <nvm_flash_read_buffer+0x18>
    5d16:	08 95       	ret

00005d18 <nvm_user_sig_read_buffer>:
=======
    5976:	a4 17       	cp	r26, r20
    5978:	b5 07       	cpc	r27, r21
    597a:	99 f7       	brne	.-26     	; 0x5962 <nvm_flash_read_buffer+0x18>
    597c:	08 95       	ret

0000597e <nvm_user_sig_read_buffer>:
>>>>>>> Stashed changes
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
<<<<<<< Updated upstream
    5d18:	ef 92       	push	r14
    5d1a:	ff 92       	push	r15
    5d1c:	0f 93       	push	r16
    5d1e:	1f 93       	push	r17
    5d20:	cf 93       	push	r28
    5d22:	df 93       	push	r29
    5d24:	7a 01       	movw	r14, r20
    5d26:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    5d28:	eb 01       	movw	r28, r22
    5d2a:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    5d2c:	23 2b       	or	r18, r19
    5d2e:	59 f0       	breq	.+22     	; 0x5d46 <nvm_user_sig_read_buffer+0x2e>
=======
    597e:	ef 92       	push	r14
    5980:	ff 92       	push	r15
    5982:	0f 93       	push	r16
    5984:	1f 93       	push	r17
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
    598a:	7a 01       	movw	r14, r20
    598c:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    598e:	eb 01       	movw	r28, r22
    5990:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    5992:	23 2b       	or	r18, r19
    5994:	59 f0       	breq	.+22     	; 0x59ac <nvm_user_sig_read_buffer+0x2e>
>>>>>>> Stashed changes
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
<<<<<<< Updated upstream
    5d30:	be 01       	movw	r22, r28
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    5d38:	f7 01       	movw	r30, r14
    5d3a:	81 93       	st	Z+, r24
    5d3c:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    5d3e:	21 96       	adiw	r28, 0x01	; 1
		len--;
    5d40:	01 50       	subi	r16, 0x01	; 1
    5d42:	11 09       	sbc	r17, r1
=======
    5996:	be 01       	movw	r22, r28
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    599e:	f7 01       	movw	r30, r14
    59a0:	81 93       	st	Z+, r24
    59a2:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    59a4:	21 96       	adiw	r28, 0x01	; 1
		len--;
    59a6:	01 50       	subi	r16, 0x01	; 1
    59a8:	11 09       	sbc	r17, r1
>>>>>>> Stashed changes
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
<<<<<<< Updated upstream
    5d44:	a9 f7       	brne	.-22     	; 0x5d30 <nvm_user_sig_read_buffer+0x18>
=======
    59aa:	a9 f7       	brne	.-22     	; 0x5996 <nvm_user_sig_read_buffer+0x18>
>>>>>>> Stashed changes
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
<<<<<<< Updated upstream
    5d46:	df 91       	pop	r29
    5d48:	cf 91       	pop	r28
    5d4a:	1f 91       	pop	r17
    5d4c:	0f 91       	pop	r16
    5d4e:	ff 90       	pop	r15
    5d50:	ef 90       	pop	r14
    5d52:	08 95       	ret

00005d54 <nvm_user_sig_write_buffer>:
=======
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	1f 91       	pop	r17
    59b2:	0f 91       	pop	r16
    59b4:	ff 90       	pop	r15
    59b6:	ef 90       	pop	r14
    59b8:	08 95       	ret

000059ba <nvm_user_sig_write_buffer>:
>>>>>>> Stashed changes
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
<<<<<<< Updated upstream
    5d54:	2f 92       	push	r2
    5d56:	3f 92       	push	r3
    5d58:	4f 92       	push	r4
    5d5a:	5f 92       	push	r5
    5d5c:	6f 92       	push	r6
    5d5e:	7f 92       	push	r7
    5d60:	8f 92       	push	r8
    5d62:	9f 92       	push	r9
    5d64:	af 92       	push	r10
    5d66:	bf 92       	push	r11
    5d68:	cf 92       	push	r12
    5d6a:	df 92       	push	r13
    5d6c:	ef 92       	push	r14
    5d6e:	ff 92       	push	r15
    5d70:	0f 93       	push	r16
    5d72:	1f 93       	push	r17
    5d74:	cf 93       	push	r28
    5d76:	df 93       	push	r29
    5d78:	00 d0       	rcall	.+0      	; 0x5d7a <nvm_user_sig_write_buffer+0x26>
    5d7a:	1f 92       	push	r1
    5d7c:	cd b7       	in	r28, 0x3d	; 61
    5d7e:	de b7       	in	r29, 0x3e	; 62
    5d80:	4b 83       	std	Y+3, r20	; 0x03
    5d82:	5c 83       	std	Y+4, r21	; 0x04
    5d84:	79 01       	movw	r14, r18
    5d86:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    5d88:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    5d8a:	23 2b       	or	r18, r19
    5d8c:	09 f0       	breq	.+2      	; 0x5d90 <nvm_user_sig_write_buffer+0x3c>
    5d8e:	51 c0       	rjmp	.+162    	; 0x5e32 <nvm_user_sig_write_buffer+0xde>
    5d90:	67 c0       	rjmp	.+206    	; 0x5e60 <nvm_user_sig_write_buffer+0x10c>
    5d92:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5d94:	33 20       	and	r3, r3
    5d96:	89 f0       	breq	.+34     	; 0x5dba <nvm_user_sig_write_buffer+0x66>
    5d98:	b2 01       	movw	r22, r4
    5d9a:	81 e0       	ldi	r24, 0x01	; 1
    5d9c:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    5da0:	89 83       	std	Y+1, r24	; 0x01
    5da2:	b8 01       	movw	r22, r16
    5da4:	81 e0       	ldi	r24, 0x01	; 1
    5da6:	0e 94 33 30 	call	0x6066	; 0x6066 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    5daa:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    5dac:	89 81       	ldd	r24, Y+1	; 0x01
    5dae:	9a 81       	ldd	r25, Y+2	; 0x02
    5db0:	01 96       	adiw	r24, 0x01	; 1
    5db2:	29 f0       	breq	.+10     	; 0x5dbe <nvm_user_sig_write_buffer+0x6a>
					b_flag_erase = true; // The page is not empty
    5db4:	22 24       	eor	r2, r2
    5db6:	23 94       	inc	r2
    5db8:	02 c0       	rjmp	.+4      	; 0x5dbe <nvm_user_sig_write_buffer+0x6a>
				}
			}else{
				w_value = 0xFFFF;
    5dba:	89 82       	std	Y+1, r8	; 0x01
    5dbc:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    5dbe:	e1 14       	cp	r14, r1
    5dc0:	f1 04       	cpc	r15, r1
    5dc2:	09 f1       	breq	.+66     	; 0x5e06 <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == page_pos) {
    5dc4:	ac 14       	cp	r10, r12
    5dc6:	bd 04       	cpc	r11, r13
    5dc8:	79 f4       	brne	.+30     	; 0x5de8 <nvm_user_sig_write_buffer+0x94>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	e8 1a       	sub	r14, r24
    5dce:	f1 08       	sbc	r15, r1
					opt_address++;
    5dd0:	ef ef       	ldi	r30, 0xFF	; 255
    5dd2:	ce 1a       	sub	r12, r30
    5dd4:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    5dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    5dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    5dda:	81 91       	ld	r24, Z+
    5ddc:	eb 83       	std	Y+3, r30	; 0x03
    5dde:	fc 83       	std	Y+4, r31	; 0x04
    5de0:	89 83       	std	Y+1, r24	; 0x01
=======
    59ba:	2f 92       	push	r2
    59bc:	3f 92       	push	r3
    59be:	4f 92       	push	r4
    59c0:	5f 92       	push	r5
    59c2:	6f 92       	push	r6
    59c4:	7f 92       	push	r7
    59c6:	8f 92       	push	r8
    59c8:	9f 92       	push	r9
    59ca:	af 92       	push	r10
    59cc:	bf 92       	push	r11
    59ce:	cf 92       	push	r12
    59d0:	df 92       	push	r13
    59d2:	ef 92       	push	r14
    59d4:	ff 92       	push	r15
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	cf 93       	push	r28
    59dc:	df 93       	push	r29
    59de:	00 d0       	rcall	.+0      	; 0x59e0 <nvm_user_sig_write_buffer+0x26>
    59e0:	1f 92       	push	r1
    59e2:	cd b7       	in	r28, 0x3d	; 61
    59e4:	de b7       	in	r29, 0x3e	; 62
    59e6:	4b 83       	std	Y+3, r20	; 0x03
    59e8:	5c 83       	std	Y+4, r21	; 0x04
    59ea:	79 01       	movw	r14, r18
    59ec:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    59ee:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    59f0:	23 2b       	or	r18, r19
    59f2:	09 f0       	breq	.+2      	; 0x59f6 <nvm_user_sig_write_buffer+0x3c>
    59f4:	51 c0       	rjmp	.+162    	; 0x5a98 <nvm_user_sig_write_buffer+0xde>
    59f6:	67 c0       	rjmp	.+206    	; 0x5ac6 <nvm_user_sig_write_buffer+0x10c>
    59f8:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    59fa:	33 20       	and	r3, r3
    59fc:	89 f0       	breq	.+34     	; 0x5a20 <nvm_user_sig_write_buffer+0x66>
    59fe:	b2 01       	movw	r22, r4
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    5a06:	89 83       	std	Y+1, r24	; 0x01
    5a08:	b8 01       	movw	r22, r16
    5a0a:	81 e0       	ldi	r24, 0x01	; 1
    5a0c:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    5a10:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    5a12:	89 81       	ldd	r24, Y+1	; 0x01
    5a14:	9a 81       	ldd	r25, Y+2	; 0x02
    5a16:	01 96       	adiw	r24, 0x01	; 1
    5a18:	29 f0       	breq	.+10     	; 0x5a24 <nvm_user_sig_write_buffer+0x6a>
					b_flag_erase = true; // The page is not empty
    5a1a:	22 24       	eor	r2, r2
    5a1c:	23 94       	inc	r2
    5a1e:	02 c0       	rjmp	.+4      	; 0x5a24 <nvm_user_sig_write_buffer+0x6a>
				}
			}else{
				w_value = 0xFFFF;
    5a20:	89 82       	std	Y+1, r8	; 0x01
    5a22:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    5a24:	e1 14       	cp	r14, r1
    5a26:	f1 04       	cpc	r15, r1
    5a28:	09 f1       	breq	.+66     	; 0x5a6c <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == page_pos) {
    5a2a:	ac 14       	cp	r10, r12
    5a2c:	bd 04       	cpc	r11, r13
    5a2e:	79 f4       	brne	.+30     	; 0x5a4e <nvm_user_sig_write_buffer+0x94>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	e8 1a       	sub	r14, r24
    5a34:	f1 08       	sbc	r15, r1
					opt_address++;
    5a36:	ef ef       	ldi	r30, 0xFF	; 255
    5a38:	ce 1a       	sub	r12, r30
    5a3a:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    5a3c:	eb 81       	ldd	r30, Y+3	; 0x03
    5a3e:	fc 81       	ldd	r31, Y+4	; 0x04
    5a40:	81 91       	ld	r24, Z+
    5a42:	eb 83       	std	Y+3, r30	; 0x03
    5a44:	fc 83       	std	Y+4, r31	; 0x04
    5a46:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
<<<<<<< Updated upstream
    5de2:	e1 14       	cp	r14, r1
    5de4:	f1 04       	cpc	r15, r1
    5de6:	79 f0       	breq	.+30     	; 0x5e06 <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == (page_pos+1)) {
    5de8:	c0 16       	cp	r12, r16
    5dea:	d1 06       	cpc	r13, r17
    5dec:	61 f4       	brne	.+24     	; 0x5e06 <nvm_user_sig_write_buffer+0xb2>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5dee:	f1 e0       	ldi	r31, 0x01	; 1
    5df0:	ef 1a       	sub	r14, r31
    5df2:	f1 08       	sbc	r15, r1
					opt_address++;
    5df4:	2f ef       	ldi	r18, 0xFF	; 255
    5df6:	c2 1a       	sub	r12, r18
    5df8:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    5dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    5dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    5dfe:	81 91       	ld	r24, Z+
    5e00:	eb 83       	std	Y+3, r30	; 0x03
    5e02:	fc 83       	std	Y+4, r31	; 0x04
    5e04:	8a 83       	std	Y+2, r24	; 0x02
=======
    5a48:	e1 14       	cp	r14, r1
    5a4a:	f1 04       	cpc	r15, r1
    5a4c:	79 f0       	breq	.+30     	; 0x5a6c <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == (page_pos+1)) {
    5a4e:	c0 16       	cp	r12, r16
    5a50:	d1 06       	cpc	r13, r17
    5a52:	61 f4       	brne	.+24     	; 0x5a6c <nvm_user_sig_write_buffer+0xb2>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5a54:	f1 e0       	ldi	r31, 0x01	; 1
    5a56:	ef 1a       	sub	r14, r31
    5a58:	f1 08       	sbc	r15, r1
					opt_address++;
    5a5a:	2f ef       	ldi	r18, 0xFF	; 255
    5a5c:	c2 1a       	sub	r12, r18
    5a5e:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    5a60:	eb 81       	ldd	r30, Y+3	; 0x03
    5a62:	fc 81       	ldd	r31, Y+4	; 0x04
    5a64:	81 91       	ld	r24, Z+
    5a66:	eb 83       	std	Y+3, r30	; 0x03
    5a68:	fc 83       	std	Y+4, r31	; 0x04
    5a6a:	8a 83       	std	Y+2, r24	; 0x02
>>>>>>> Stashed changes
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
<<<<<<< Updated upstream
    5e06:	49 81       	ldd	r20, Y+1	; 0x01
    5e08:	5a 81       	ldd	r21, Y+2	; 0x02
    5e0a:	c3 01       	movw	r24, r6
    5e0c:	b2 01       	movw	r22, r4
    5e0e:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
    5e12:	f2 e0       	ldi	r31, 0x02	; 2
    5e14:	4f 0e       	add	r4, r31
    5e16:	51 1c       	adc	r5, r1
    5e18:	61 1c       	adc	r6, r1
    5e1a:	71 1c       	adc	r7, r1
    5e1c:	0e 5f       	subi	r16, 0xFE	; 254
    5e1e:	1f 4f       	sbci	r17, 0xFF	; 255
=======
    5a6c:	49 81       	ldd	r20, Y+1	; 0x01
    5a6e:	5a 81       	ldd	r21, Y+2	; 0x02
    5a70:	c3 01       	movw	r24, r6
    5a72:	b2 01       	movw	r22, r4
    5a74:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
    5a78:	f2 e0       	ldi	r31, 0x02	; 2
    5a7a:	4f 0e       	add	r4, r31
    5a7c:	51 1c       	adc	r5, r1
    5a7e:	61 1c       	adc	r6, r1
    5a80:	71 1c       	adc	r7, r1
    5a82:	0e 5f       	subi	r16, 0xFE	; 254
    5a84:	1f 4f       	sbci	r17, 0xFF	; 255
>>>>>>> Stashed changes
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
<<<<<<< Updated upstream
    5e20:	01 30       	cpi	r16, 0x01	; 1
    5e22:	22 e0       	ldi	r18, 0x02	; 2
    5e24:	12 07       	cpc	r17, r18
    5e26:	09 f0       	breq	.+2      	; 0x5e2a <nvm_user_sig_write_buffer+0xd6>
    5e28:	b4 cf       	rjmp	.-152    	; 0x5d92 <nvm_user_sig_write_buffer+0x3e>
=======
    5a86:	01 30       	cpi	r16, 0x01	; 1
    5a88:	22 e0       	ldi	r18, 0x02	; 2
    5a8a:	12 07       	cpc	r17, r18
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <nvm_user_sig_write_buffer+0xd6>
    5a8e:	b4 cf       	rjmp	.-152    	; 0x59f8 <nvm_user_sig_write_buffer+0x3e>
>>>>>>> Stashed changes
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
<<<<<<< Updated upstream
    5e2a:	e1 14       	cp	r14, r1
    5e2c:	f1 04       	cpc	r15, r1
    5e2e:	29 f4       	brne	.+10     	; 0x5e3a <nvm_user_sig_write_buffer+0xe6>
    5e30:	0a c0       	rjmp	.+20     	; 0x5e46 <nvm_user_sig_write_buffer+0xf2>
    5e32:	21 2c       	mov	r2, r1
=======
    5a90:	e1 14       	cp	r14, r1
    5a92:	f1 04       	cpc	r15, r1
    5a94:	29 f4       	brne	.+10     	; 0x5aa0 <nvm_user_sig_write_buffer+0xe6>
    5a96:	0a c0       	rjmp	.+20     	; 0x5aac <nvm_user_sig_write_buffer+0xf2>
    5a98:	21 2c       	mov	r2, r1
>>>>>>> Stashed changes
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
<<<<<<< Updated upstream
    5e34:	88 24       	eor	r8, r8
    5e36:	8a 94       	dec	r8
    5e38:	98 2c       	mov	r9, r8
=======
    5a9a:	88 24       	eor	r8, r8
    5a9c:	8a 94       	dec	r8
    5a9e:	98 2c       	mov	r9, r8
>>>>>>> Stashed changes
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
<<<<<<< Updated upstream
    5e3a:	01 e0       	ldi	r16, 0x01	; 1
    5e3c:	10 e0       	ldi	r17, 0x00	; 0
    5e3e:	41 2c       	mov	r4, r1
    5e40:	51 2c       	mov	r5, r1
    5e42:	32 01       	movw	r6, r4
    5e44:	a6 cf       	rjmp	.-180    	; 0x5d92 <nvm_user_sig_write_buffer+0x3e>
=======
    5aa0:	01 e0       	ldi	r16, 0x01	; 1
    5aa2:	10 e0       	ldi	r17, 0x00	; 0
    5aa4:	41 2c       	mov	r4, r1
    5aa6:	51 2c       	mov	r5, r1
    5aa8:	32 01       	movw	r6, r4
    5aaa:	a6 cf       	rjmp	.-180    	; 0x59f8 <nvm_user_sig_write_buffer+0x3e>
>>>>>>> Stashed changes
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
<<<<<<< Updated upstream
    5e46:	22 20       	and	r2, r2
    5e48:	59 f0       	breq	.+22     	; 0x5e60 <nvm_user_sig_write_buffer+0x10c>
=======
    5aac:	22 20       	and	r2, r2
    5aae:	59 f0       	breq	.+22     	; 0x5ac6 <nvm_user_sig_write_buffer+0x10c>
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5e4a:	e0 ec       	ldi	r30, 0xC0	; 192
    5e4c:	f1 e0       	ldi	r31, 0x01	; 1
    5e4e:	87 85       	ldd	r24, Z+15	; 0x0f
    5e50:	88 23       	and	r24, r24
    5e52:	ec f3       	brlt	.-6      	; 0x5e4e <nvm_user_sig_write_buffer+0xfa>
=======
    5ab0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ab2:	f1 e0       	ldi	r31, 0x01	; 1
    5ab4:	87 85       	ldd	r24, Z+15	; 0x0f
    5ab6:	88 23       	and	r24, r24
    5ab8:	ec f3       	brlt	.-6      	; 0x5ab4 <nvm_user_sig_write_buffer+0xfa>
>>>>>>> Stashed changes
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
<<<<<<< Updated upstream
    5e54:	48 e1       	ldi	r20, 0x18	; 24
    5e56:	60 e0       	ldi	r22, 0x00	; 0
    5e58:	70 e0       	ldi	r23, 0x00	; 0
    5e5a:	cb 01       	movw	r24, r22
    5e5c:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
=======
    5aba:	48 e1       	ldi	r20, 0x18	; 24
    5abc:	60 e0       	ldi	r22, 0x00	; 0
    5abe:	70 e0       	ldi	r23, 0x00	; 0
    5ac0:	cb 01       	movw	r24, r22
    5ac2:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5e60:	e0 ec       	ldi	r30, 0xC0	; 192
    5e62:	f1 e0       	ldi	r31, 0x01	; 1
    5e64:	87 85       	ldd	r24, Z+15	; 0x0f
    5e66:	88 23       	and	r24, r24
    5e68:	ec f3       	brlt	.-6      	; 0x5e64 <nvm_user_sig_write_buffer+0x110>
=======
    5ac6:	e0 ec       	ldi	r30, 0xC0	; 192
    5ac8:	f1 e0       	ldi	r31, 0x01	; 1
    5aca:	87 85       	ldd	r24, Z+15	; 0x0f
    5acc:	88 23       	and	r24, r24
    5ace:	ec f3       	brlt	.-6      	; 0x5aca <nvm_user_sig_write_buffer+0x110>
>>>>>>> Stashed changes
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
<<<<<<< Updated upstream
    5e6a:	4a e1       	ldi	r20, 0x1A	; 26
    5e6c:	60 e0       	ldi	r22, 0x00	; 0
    5e6e:	70 e0       	ldi	r23, 0x00	; 0
    5e70:	cb 01       	movw	r24, r22
    5e72:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
=======
    5ad0:	4a e1       	ldi	r20, 0x1A	; 26
    5ad2:	60 e0       	ldi	r22, 0x00	; 0
    5ad4:	70 e0       	ldi	r23, 0x00	; 0
    5ad6:	cb 01       	movw	r24, r22
    5ad8:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
>>>>>>> Stashed changes
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
<<<<<<< Updated upstream
    5e76:	24 96       	adiw	r28, 0x04	; 4
    5e78:	cd bf       	out	0x3d, r28	; 61
    5e7a:	de bf       	out	0x3e, r29	; 62
    5e7c:	df 91       	pop	r29
    5e7e:	cf 91       	pop	r28
    5e80:	1f 91       	pop	r17
    5e82:	0f 91       	pop	r16
    5e84:	ff 90       	pop	r15
    5e86:	ef 90       	pop	r14
    5e88:	df 90       	pop	r13
    5e8a:	cf 90       	pop	r12
    5e8c:	bf 90       	pop	r11
    5e8e:	af 90       	pop	r10
    5e90:	9f 90       	pop	r9
    5e92:	8f 90       	pop	r8
    5e94:	7f 90       	pop	r7
    5e96:	6f 90       	pop	r6
    5e98:	5f 90       	pop	r5
    5e9a:	4f 90       	pop	r4
    5e9c:	3f 90       	pop	r3
    5e9e:	2f 90       	pop	r2
    5ea0:	08 95       	ret

00005ea2 <nvm_flash_erase_and_write_buffer>:
=======
    5adc:	24 96       	adiw	r28, 0x04	; 4
    5ade:	cd bf       	out	0x3d, r28	; 61
    5ae0:	de bf       	out	0x3e, r29	; 62
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	ff 90       	pop	r15
    5aec:	ef 90       	pop	r14
    5aee:	df 90       	pop	r13
    5af0:	cf 90       	pop	r12
    5af2:	bf 90       	pop	r11
    5af4:	af 90       	pop	r10
    5af6:	9f 90       	pop	r9
    5af8:	8f 90       	pop	r8
    5afa:	7f 90       	pop	r7
    5afc:	6f 90       	pop	r6
    5afe:	5f 90       	pop	r5
    5b00:	4f 90       	pop	r4
    5b02:	3f 90       	pop	r3
    5b04:	2f 90       	pop	r2
    5b06:	08 95       	ret

00005b08 <nvm_flash_erase_and_write_buffer>:
>>>>>>> Stashed changes
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
<<<<<<< Updated upstream
    5ea2:	2f 92       	push	r2
    5ea4:	3f 92       	push	r3
    5ea6:	4f 92       	push	r4
    5ea8:	5f 92       	push	r5
    5eaa:	6f 92       	push	r6
    5eac:	7f 92       	push	r7
    5eae:	8f 92       	push	r8
    5eb0:	9f 92       	push	r9
    5eb2:	af 92       	push	r10
    5eb4:	bf 92       	push	r11
    5eb6:	cf 92       	push	r12
    5eb8:	df 92       	push	r13
    5eba:	ef 92       	push	r14
    5ebc:	ff 92       	push	r15
    5ebe:	0f 93       	push	r16
    5ec0:	1f 93       	push	r17
    5ec2:	cf 93       	push	r28
    5ec4:	df 93       	push	r29
    5ec6:	cd b7       	in	r28, 0x3d	; 61
    5ec8:	de b7       	in	r29, 0x3e	; 62
    5eca:	2a 97       	sbiw	r28, 0x0a	; 10
    5ecc:	cd bf       	out	0x3d, r28	; 61
    5ece:	de bf       	out	0x3e, r29	; 62
    5ed0:	2b 01       	movw	r4, r22
    5ed2:	3c 01       	movw	r6, r24
    5ed4:	1a 01       	movw	r2, r20
    5ed6:	59 01       	movw	r10, r18
=======
    5b08:	2f 92       	push	r2
    5b0a:	3f 92       	push	r3
    5b0c:	4f 92       	push	r4
    5b0e:	5f 92       	push	r5
    5b10:	6f 92       	push	r6
    5b12:	7f 92       	push	r7
    5b14:	8f 92       	push	r8
    5b16:	9f 92       	push	r9
    5b18:	af 92       	push	r10
    5b1a:	bf 92       	push	r11
    5b1c:	cf 92       	push	r12
    5b1e:	df 92       	push	r13
    5b20:	ef 92       	push	r14
    5b22:	ff 92       	push	r15
    5b24:	0f 93       	push	r16
    5b26:	1f 93       	push	r17
    5b28:	cf 93       	push	r28
    5b2a:	df 93       	push	r29
    5b2c:	cd b7       	in	r28, 0x3d	; 61
    5b2e:	de b7       	in	r29, 0x3e	; 62
    5b30:	2a 97       	sbiw	r28, 0x0a	; 10
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	de bf       	out	0x3e, r29	; 62
    5b36:	2b 01       	movw	r4, r22
    5b38:	3c 01       	movw	r6, r24
    5b3a:	1a 01       	movw	r2, r20
    5b3c:	59 01       	movw	r10, r18
>>>>>>> Stashed changes
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
<<<<<<< Updated upstream
    5ed8:	dc 01       	movw	r26, r24
    5eda:	cb 01       	movw	r24, r22
    5edc:	88 27       	eor	r24, r24
    5ede:	9e 7f       	andi	r25, 0xFE	; 254
    5ee0:	8f 83       	std	Y+7, r24	; 0x07
    5ee2:	98 87       	std	Y+8, r25	; 0x08
    5ee4:	a9 87       	std	Y+9, r26	; 0x09
    5ee6:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    5ee8:	23 2b       	or	r18, r19
    5eea:	09 f4       	brne	.+2      	; 0x5eee <nvm_flash_erase_and_write_buffer+0x4c>
    5eec:	8d c0       	rjmp	.+282    	; 0x6008 <nvm_flash_erase_and_write_buffer+0x166>
=======
    5b3e:	dc 01       	movw	r26, r24
    5b40:	cb 01       	movw	r24, r22
    5b42:	88 27       	eor	r24, r24
    5b44:	9e 7f       	andi	r25, 0xFE	; 254
    5b46:	8f 83       	std	Y+7, r24	; 0x07
    5b48:	98 87       	std	Y+8, r25	; 0x08
    5b4a:	a9 87       	std	Y+9, r26	; 0x09
    5b4c:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    5b4e:	23 2b       	or	r18, r19
    5b50:	09 f4       	brne	.+2      	; 0x5b54 <nvm_flash_erase_and_write_buffer+0x4c>
    5b52:	8d c0       	rjmp	.+282    	; 0x5c6e <nvm_flash_erase_and_write_buffer+0x166>
>>>>>>> Stashed changes
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
<<<<<<< Updated upstream
    5eee:	88 24       	eor	r8, r8
    5ef0:	8a 94       	dec	r8
    5ef2:	98 2c       	mov	r9, r8
    5ef4:	04 c0       	rjmp	.+8      	; 0x5efe <nvm_flash_erase_and_write_buffer+0x5c>
    5ef6:	cf 82       	std	Y+7, r12	; 0x07
    5ef8:	d8 86       	std	Y+8, r13	; 0x08
    5efa:	e9 86       	std	Y+9, r14	; 0x09
    5efc:	fa 86       	std	Y+10, r15	; 0x0a
=======
    5b54:	88 24       	eor	r8, r8
    5b56:	8a 94       	dec	r8
    5b58:	98 2c       	mov	r9, r8
    5b5a:	04 c0       	rjmp	.+8      	; 0x5b64 <nvm_flash_erase_and_write_buffer+0x5c>
    5b5c:	cf 82       	std	Y+7, r12	; 0x07
    5b5e:	d8 86       	std	Y+8, r13	; 0x08
    5b60:	e9 86       	std	Y+9, r14	; 0x09
    5b62:	fa 86       	std	Y+10, r15	; 0x0a
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5efe:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5f02:	88 23       	and	r24, r24
    5f04:	e4 f3       	brlt	.-8      	; 0x5efe <nvm_flash_erase_and_write_buffer+0x5c>
    5f06:	8f 81       	ldd	r24, Y+7	; 0x07
    5f08:	98 85       	ldd	r25, Y+8	; 0x08
    5f0a:	a9 85       	ldd	r26, Y+9	; 0x09
    5f0c:	ba 85       	ldd	r27, Y+10	; 0x0a
    5f0e:	9e 5f       	subi	r25, 0xFE	; 254
    5f10:	af 4f       	sbci	r26, 0xFF	; 255
    5f12:	bf 4f       	sbci	r27, 0xFF	; 255
    5f14:	8b 83       	std	Y+3, r24	; 0x03
    5f16:	9c 83       	std	Y+4, r25	; 0x04
    5f18:	ad 83       	std	Y+5, r26	; 0x05
    5f1a:	be 83       	std	Y+6, r27	; 0x06
    5f1c:	cf 80       	ldd	r12, Y+7	; 0x07
    5f1e:	d8 84       	ldd	r13, Y+8	; 0x08
    5f20:	e9 84       	ldd	r14, Y+9	; 0x09
    5f22:	fa 84       	ldd	r15, Y+10	; 0x0a
    5f24:	10 e0       	ldi	r17, 0x00	; 0
=======
    5b64:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5b68:	88 23       	and	r24, r24
    5b6a:	e4 f3       	brlt	.-8      	; 0x5b64 <nvm_flash_erase_and_write_buffer+0x5c>
    5b6c:	8f 81       	ldd	r24, Y+7	; 0x07
    5b6e:	98 85       	ldd	r25, Y+8	; 0x08
    5b70:	a9 85       	ldd	r26, Y+9	; 0x09
    5b72:	ba 85       	ldd	r27, Y+10	; 0x0a
    5b74:	9e 5f       	subi	r25, 0xFE	; 254
    5b76:	af 4f       	sbci	r26, 0xFF	; 255
    5b78:	bf 4f       	sbci	r27, 0xFF	; 255
    5b7a:	8b 83       	std	Y+3, r24	; 0x03
    5b7c:	9c 83       	std	Y+4, r25	; 0x04
    5b7e:	ad 83       	std	Y+5, r26	; 0x05
    5b80:	be 83       	std	Y+6, r27	; 0x06
    5b82:	cf 80       	ldd	r12, Y+7	; 0x07
    5b84:	d8 84       	ldd	r13, Y+8	; 0x08
    5b86:	e9 84       	ldd	r14, Y+9	; 0x09
    5b88:	fa 84       	ldd	r15, Y+10	; 0x0a
    5b8a:	10 e0       	ldi	r17, 0x00	; 0
>>>>>>> Stashed changes
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
<<<<<<< Updated upstream
    5f26:	00 23       	and	r16, r16
    5f28:	61 f0       	breq	.+24     	; 0x5f42 <nvm_flash_erase_and_write_buffer+0xa0>
=======
    5b8c:	00 23       	and	r16, r16
    5b8e:	61 f0       	breq	.+24     	; 0x5ba8 <nvm_flash_erase_and_write_buffer+0xa0>
>>>>>>> Stashed changes
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
<<<<<<< Updated upstream
    5f2a:	0b b6       	in	r0, 0x3b	; 59
    5f2c:	eb be       	out	0x3b, r14	; 59
    5f2e:	f6 01       	movw	r30, r12
    5f30:	87 91       	elpm	r24, Z+
    5f32:	96 91       	elpm	r25, Z
    5f34:	0b be       	out	0x3b, r0	; 59
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    5f36:	89 83       	std	Y+1, r24	; 0x01
    5f38:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    5f3a:	01 96       	adiw	r24, 0x01	; 1
    5f3c:	21 f0       	breq	.+8      	; 0x5f46 <nvm_flash_erase_and_write_buffer+0xa4>
					b_flag_erase = true; // The page is not empty
    5f3e:	11 e0       	ldi	r17, 0x01	; 1
    5f40:	02 c0       	rjmp	.+4      	; 0x5f46 <nvm_flash_erase_and_write_buffer+0xa4>
				}
			}else{
				w_value = 0xFFFF;
    5f42:	89 82       	std	Y+1, r8	; 0x01
    5f44:	9a 82       	std	Y+2, r9	; 0x02
=======
    5b90:	0b b6       	in	r0, 0x3b	; 59
    5b92:	eb be       	out	0x3b, r14	; 59
    5b94:	f6 01       	movw	r30, r12
    5b96:	87 91       	elpm	r24, Z+
    5b98:	96 91       	elpm	r25, Z
    5b9a:	0b be       	out	0x3b, r0	; 59
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    5b9c:	89 83       	std	Y+1, r24	; 0x01
    5b9e:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    5ba0:	01 96       	adiw	r24, 0x01	; 1
    5ba2:	21 f0       	breq	.+8      	; 0x5bac <nvm_flash_erase_and_write_buffer+0xa4>
					b_flag_erase = true; // The page is not empty
    5ba4:	11 e0       	ldi	r17, 0x01	; 1
    5ba6:	02 c0       	rjmp	.+4      	; 0x5bac <nvm_flash_erase_and_write_buffer+0xa4>
				}
			}else{
				w_value = 0xFFFF;
    5ba8:	89 82       	std	Y+1, r8	; 0x01
    5baa:	9a 82       	std	Y+2, r9	; 0x02
>>>>>>> Stashed changes
			}

			// Update flash buffer
			if (len) {
<<<<<<< Updated upstream
    5f46:	a1 14       	cp	r10, r1
    5f48:	b1 04       	cpc	r11, r1
    5f4a:	61 f1       	breq	.+88     	; 0x5fa4 <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == page_address) {
    5f4c:	c4 14       	cp	r12, r4
    5f4e:	d5 04       	cpc	r13, r5
    5f50:	e6 04       	cpc	r14, r6
    5f52:	f7 04       	cpc	r15, r7
    5f54:	79 f4       	brne	.+30     	; 0x5f74 <nvm_flash_erase_and_write_buffer+0xd2>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5f56:	b1 e0       	ldi	r27, 0x01	; 1
    5f58:	ab 1a       	sub	r10, r27
    5f5a:	b1 08       	sbc	r11, r1
					opt_address++;
    5f5c:	ef ef       	ldi	r30, 0xFF	; 255
    5f5e:	4e 1a       	sub	r4, r30
    5f60:	5e 0a       	sbc	r5, r30
    5f62:	6e 0a       	sbc	r6, r30
    5f64:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    5f66:	d1 01       	movw	r26, r2
    5f68:	8d 91       	ld	r24, X+
    5f6a:	1d 01       	movw	r2, r26
    5f6c:	89 83       	std	Y+1, r24	; 0x01
=======
    5bac:	a1 14       	cp	r10, r1
    5bae:	b1 04       	cpc	r11, r1
    5bb0:	61 f1       	breq	.+88     	; 0x5c0a <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == page_address) {
    5bb2:	c4 14       	cp	r12, r4
    5bb4:	d5 04       	cpc	r13, r5
    5bb6:	e6 04       	cpc	r14, r6
    5bb8:	f7 04       	cpc	r15, r7
    5bba:	79 f4       	brne	.+30     	; 0x5bda <nvm_flash_erase_and_write_buffer+0xd2>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5bbc:	b1 e0       	ldi	r27, 0x01	; 1
    5bbe:	ab 1a       	sub	r10, r27
    5bc0:	b1 08       	sbc	r11, r1
					opt_address++;
    5bc2:	ef ef       	ldi	r30, 0xFF	; 255
    5bc4:	4e 1a       	sub	r4, r30
    5bc6:	5e 0a       	sbc	r5, r30
    5bc8:	6e 0a       	sbc	r6, r30
    5bca:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    5bcc:	d1 01       	movw	r26, r2
    5bce:	8d 91       	ld	r24, X+
    5bd0:	1d 01       	movw	r2, r26
    5bd2:	89 83       	std	Y+1, r24	; 0x01
>>>>>>> Stashed changes
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
<<<<<<< Updated upstream
    5f6e:	a1 14       	cp	r10, r1
    5f70:	b1 04       	cpc	r11, r1
    5f72:	c1 f0       	breq	.+48     	; 0x5fa4 <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == (page_address+1)) {
    5f74:	d7 01       	movw	r26, r14
    5f76:	c6 01       	movw	r24, r12
    5f78:	01 96       	adiw	r24, 0x01	; 1
    5f7a:	a1 1d       	adc	r26, r1
    5f7c:	b1 1d       	adc	r27, r1
    5f7e:	84 15       	cp	r24, r4
    5f80:	95 05       	cpc	r25, r5
    5f82:	a6 05       	cpc	r26, r6
    5f84:	b7 05       	cpc	r27, r7
    5f86:	71 f4       	brne	.+28     	; 0x5fa4 <nvm_flash_erase_and_write_buffer+0x102>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5f88:	b1 e0       	ldi	r27, 0x01	; 1
    5f8a:	ab 1a       	sub	r10, r27
    5f8c:	b1 08       	sbc	r11, r1
					opt_address++;
    5f8e:	26 01       	movw	r4, r12
    5f90:	37 01       	movw	r6, r14
    5f92:	e2 e0       	ldi	r30, 0x02	; 2
    5f94:	4e 0e       	add	r4, r30
    5f96:	51 1c       	adc	r5, r1
    5f98:	61 1c       	adc	r6, r1
    5f9a:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    5f9c:	d1 01       	movw	r26, r2
    5f9e:	8d 91       	ld	r24, X+
    5fa0:	1d 01       	movw	r2, r26
    5fa2:	8a 83       	std	Y+2, r24	; 0x02
=======
    5bd4:	a1 14       	cp	r10, r1
    5bd6:	b1 04       	cpc	r11, r1
    5bd8:	c1 f0       	breq	.+48     	; 0x5c0a <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == (page_address+1)) {
    5bda:	d7 01       	movw	r26, r14
    5bdc:	c6 01       	movw	r24, r12
    5bde:	01 96       	adiw	r24, 0x01	; 1
    5be0:	a1 1d       	adc	r26, r1
    5be2:	b1 1d       	adc	r27, r1
    5be4:	84 15       	cp	r24, r4
    5be6:	95 05       	cpc	r25, r5
    5be8:	a6 05       	cpc	r26, r6
    5bea:	b7 05       	cpc	r27, r7
    5bec:	71 f4       	brne	.+28     	; 0x5c0a <nvm_flash_erase_and_write_buffer+0x102>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5bee:	b1 e0       	ldi	r27, 0x01	; 1
    5bf0:	ab 1a       	sub	r10, r27
    5bf2:	b1 08       	sbc	r11, r1
					opt_address++;
    5bf4:	26 01       	movw	r4, r12
    5bf6:	37 01       	movw	r6, r14
    5bf8:	e2 e0       	ldi	r30, 0x02	; 2
    5bfa:	4e 0e       	add	r4, r30
    5bfc:	51 1c       	adc	r5, r1
    5bfe:	61 1c       	adc	r6, r1
    5c00:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    5c02:	d1 01       	movw	r26, r2
    5c04:	8d 91       	ld	r24, X+
    5c06:	1d 01       	movw	r2, r26
    5c08:	8a 83       	std	Y+2, r24	; 0x02
>>>>>>> Stashed changes
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
<<<<<<< Updated upstream
    5fa4:	49 81       	ldd	r20, Y+1	; 0x01
    5fa6:	5a 81       	ldd	r21, Y+2	; 0x02
    5fa8:	c7 01       	movw	r24, r14
    5faa:	b6 01       	movw	r22, r12
    5fac:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
			page_address+=2;
    5fb0:	b2 e0       	ldi	r27, 0x02	; 2
    5fb2:	cb 0e       	add	r12, r27
    5fb4:	d1 1c       	adc	r13, r1
    5fb6:	e1 1c       	adc	r14, r1
    5fb8:	f1 1c       	adc	r15, r1
=======
    5c0a:	49 81       	ldd	r20, Y+1	; 0x01
    5c0c:	5a 81       	ldd	r21, Y+2	; 0x02
    5c0e:	c7 01       	movw	r24, r14
    5c10:	b6 01       	movw	r22, r12
    5c12:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
			page_address+=2;
    5c16:	b2 e0       	ldi	r27, 0x02	; 2
    5c18:	cb 0e       	add	r12, r27
    5c1a:	d1 1c       	adc	r13, r1
    5c1c:	e1 1c       	adc	r14, r1
    5c1e:	f1 1c       	adc	r15, r1
>>>>>>> Stashed changes
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
<<<<<<< Updated upstream
    5fba:	8b 81       	ldd	r24, Y+3	; 0x03
    5fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    5fbe:	ad 81       	ldd	r26, Y+5	; 0x05
    5fc0:	be 81       	ldd	r27, Y+6	; 0x06
    5fc2:	c8 16       	cp	r12, r24
    5fc4:	d9 06       	cpc	r13, r25
    5fc6:	ea 06       	cpc	r14, r26
    5fc8:	fb 06       	cpc	r15, r27
    5fca:	09 f0       	breq	.+2      	; 0x5fce <nvm_flash_erase_and_write_buffer+0x12c>
    5fcc:	ac cf       	rjmp	.-168    	; 0x5f26 <nvm_flash_erase_and_write_buffer+0x84>
=======
    5c20:	8b 81       	ldd	r24, Y+3	; 0x03
    5c22:	9c 81       	ldd	r25, Y+4	; 0x04
    5c24:	ad 81       	ldd	r26, Y+5	; 0x05
    5c26:	be 81       	ldd	r27, Y+6	; 0x06
    5c28:	c8 16       	cp	r12, r24
    5c2a:	d9 06       	cpc	r13, r25
    5c2c:	ea 06       	cpc	r14, r26
    5c2e:	fb 06       	cpc	r15, r27
    5c30:	09 f0       	breq	.+2      	; 0x5c34 <nvm_flash_erase_and_write_buffer+0x12c>
    5c32:	ac cf       	rjmp	.-168    	; 0x5b8c <nvm_flash_erase_and_write_buffer+0x84>
>>>>>>> Stashed changes
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
<<<<<<< Updated upstream
    5fce:	11 23       	and	r17, r17
    5fd0:	61 f0       	breq	.+24     	; 0x5fea <nvm_flash_erase_and_write_buffer+0x148>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    5fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    5fd4:	78 85       	ldd	r23, Y+8	; 0x08
    5fd6:	89 85       	ldd	r24, Y+9	; 0x09
    5fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
=======
    5c34:	11 23       	and	r17, r17
    5c36:	61 f0       	breq	.+24     	; 0x5c50 <nvm_flash_erase_and_write_buffer+0x148>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    5c38:	6f 81       	ldd	r22, Y+7	; 0x07
    5c3a:	78 85       	ldd	r23, Y+8	; 0x08
    5c3c:	89 85       	ldd	r24, Y+9	; 0x09
    5c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5fda:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5fde:	22 23       	and	r18, r18
    5fe0:	e4 f3       	brlt	.-8      	; 0x5fda <nvm_flash_erase_and_write_buffer+0x138>
=======
    5c40:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5c44:	22 23       	and	r18, r18
    5c46:	e4 f3       	brlt	.-8      	; 0x5c40 <nvm_flash_erase_and_write_buffer+0x138>
>>>>>>> Stashed changes
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
<<<<<<< Updated upstream
    5fe2:	45 e2       	ldi	r20, 0x25	; 37
    5fe4:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5fe8:	0b c0       	rjmp	.+22     	; 0x6000 <nvm_flash_erase_and_write_buffer+0x15e>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    5fea:	6f 81       	ldd	r22, Y+7	; 0x07
    5fec:	78 85       	ldd	r23, Y+8	; 0x08
    5fee:	89 85       	ldd	r24, Y+9	; 0x09
    5ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
=======
    5c48:	45 e2       	ldi	r20, 0x25	; 37
    5c4a:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5c4e:	0b c0       	rjmp	.+22     	; 0x5c66 <nvm_flash_erase_and_write_buffer+0x15e>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    5c50:	6f 81       	ldd	r22, Y+7	; 0x07
    5c52:	78 85       	ldd	r23, Y+8	; 0x08
    5c54:	89 85       	ldd	r24, Y+9	; 0x09
    5c56:	9a 85       	ldd	r25, Y+10	; 0x0a
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    5ff2:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5ff6:	22 23       	and	r18, r18
    5ff8:	e4 f3       	brlt	.-8      	; 0x5ff2 <nvm_flash_erase_and_write_buffer+0x150>
=======
    5c58:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5c5c:	22 23       	and	r18, r18
    5c5e:	e4 f3       	brlt	.-8      	; 0x5c58 <nvm_flash_erase_and_write_buffer+0x150>
>>>>>>> Stashed changes
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
<<<<<<< Updated upstream
    5ffa:	44 e2       	ldi	r20, 0x24	; 36
    5ffc:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
=======
    5c60:	44 e2       	ldi	r20, 0x24	; 36
    5c62:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
>>>>>>> Stashed changes

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
<<<<<<< Updated upstream
    6000:	a1 14       	cp	r10, r1
    6002:	b1 04       	cpc	r11, r1
    6004:	09 f0       	breq	.+2      	; 0x6008 <nvm_flash_erase_and_write_buffer+0x166>
    6006:	77 cf       	rjmp	.-274    	; 0x5ef6 <nvm_flash_erase_and_write_buffer+0x54>
=======
    5c66:	a1 14       	cp	r10, r1
    5c68:	b1 04       	cpc	r11, r1
    5c6a:	09 f0       	breq	.+2      	; 0x5c6e <nvm_flash_erase_and_write_buffer+0x166>
    5c6c:	77 cf       	rjmp	.-274    	; 0x5b5c <nvm_flash_erase_and_write_buffer+0x54>
>>>>>>> Stashed changes
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
<<<<<<< Updated upstream
    6008:	2a 96       	adiw	r28, 0x0a	; 10
    600a:	cd bf       	out	0x3d, r28	; 61
    600c:	de bf       	out	0x3e, r29	; 62
    600e:	df 91       	pop	r29
    6010:	cf 91       	pop	r28
    6012:	1f 91       	pop	r17
    6014:	0f 91       	pop	r16
    6016:	ff 90       	pop	r15
    6018:	ef 90       	pop	r14
    601a:	df 90       	pop	r13
    601c:	cf 90       	pop	r12
    601e:	bf 90       	pop	r11
    6020:	af 90       	pop	r10
    6022:	9f 90       	pop	r9
    6024:	8f 90       	pop	r8
    6026:	7f 90       	pop	r7
    6028:	6f 90       	pop	r6
    602a:	5f 90       	pop	r5
    602c:	4f 90       	pop	r4
    602e:	3f 90       	pop	r3
    6030:	2f 90       	pop	r2
    6032:	08 95       	ret

00006034 <nvm_fuses_read>:
=======
    5c6e:	2a 96       	adiw	r28, 0x0a	; 10
    5c70:	cd bf       	out	0x3d, r28	; 61
    5c72:	de bf       	out	0x3e, r29	; 62
    5c74:	df 91       	pop	r29
    5c76:	cf 91       	pop	r28
    5c78:	1f 91       	pop	r17
    5c7a:	0f 91       	pop	r16
    5c7c:	ff 90       	pop	r15
    5c7e:	ef 90       	pop	r14
    5c80:	df 90       	pop	r13
    5c82:	cf 90       	pop	r12
    5c84:	bf 90       	pop	r11
    5c86:	af 90       	pop	r10
    5c88:	9f 90       	pop	r9
    5c8a:	8f 90       	pop	r8
    5c8c:	7f 90       	pop	r7
    5c8e:	6f 90       	pop	r6
    5c90:	5f 90       	pop	r5
    5c92:	4f 90       	pop	r4
    5c94:	3f 90       	pop	r3
    5c96:	2f 90       	pop	r2
    5c98:	08 95       	ret

00005c9a <nvm_fuses_read>:
>>>>>>> Stashed changes
 * \param fuse Fuse byte to read.
 *
 * \return  Byte value of fuse.
 */
uint8_t nvm_fuses_read(enum fuse_byte_t fuse)
{
<<<<<<< Updated upstream
    6034:	1f 93       	push	r17
    6036:	cf 93       	push	r28
    6038:	df 93       	push	r29
=======
    5c9a:	1f 93       	push	r17
    5c9c:	cf 93       	push	r28
    5c9e:	df 93       	push	r29
>>>>>>> Stashed changes
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
<<<<<<< Updated upstream
    603a:	e0 ec       	ldi	r30, 0xC0	; 192
    603c:	f1 e0       	ldi	r31, 0x01	; 1
    603e:	97 85       	ldd	r25, Z+15	; 0x0f
    6040:	99 23       	and	r25, r25
    6042:	ec f3       	brlt	.-6      	; 0x603e <nvm_fuses_read+0xa>
=======
    5ca0:	e0 ec       	ldi	r30, 0xC0	; 192
    5ca2:	f1 e0       	ldi	r31, 0x01	; 1
    5ca4:	97 85       	ldd	r25, Z+15	; 0x0f
    5ca6:	99 23       	and	r25, r25
    5ca8:	ec f3       	brlt	.-6      	; 0x5ca4 <nvm_fuses_read+0xa>
>>>>>>> Stashed changes
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Set address
	NVM.ADDR0 = fuse;
<<<<<<< Updated upstream
    6044:	c0 ec       	ldi	r28, 0xC0	; 192
    6046:	d1 e0       	ldi	r29, 0x01	; 1
    6048:	88 83       	st	Y, r24
=======
    5caa:	c0 ec       	ldi	r28, 0xC0	; 192
    5cac:	d1 e0       	ldi	r29, 0x01	; 1
    5cae:	88 83       	st	Y, r24
>>>>>>> Stashed changes
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
<<<<<<< Updated upstream
    604a:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    604c:	87 e0       	ldi	r24, 0x07	; 7
    604e:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    6050:	61 e0       	ldi	r22, 0x01	; 1
    6052:	8b ec       	ldi	r24, 0xCB	; 203
    6054:	91 e0       	ldi	r25, 0x01	; 1
    6056:	0e 94 3d 30 	call	0x607a	; 0x607a <ccp_write_io>
	NVM.CMD = old_cmd;
    605a:	1a 87       	std	Y+10, r17	; 0x0a
=======
    5cb0:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5cb2:	87 e0       	ldi	r24, 0x07	; 7
    5cb4:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5cb6:	61 e0       	ldi	r22, 0x01	; 1
    5cb8:	8b ec       	ldi	r24, 0xCB	; 203
    5cba:	91 e0       	ldi	r25, 0x01	; 1
    5cbc:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <ccp_write_io>
	NVM.CMD = old_cmd;
    5cc0:	1a 87       	std	Y+10, r17	; 0x0a
>>>>>>> Stashed changes

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);

	return NVM.DATA0;
<<<<<<< Updated upstream
    605c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    605e:	df 91       	pop	r29
    6060:	cf 91       	pop	r28
    6062:	1f 91       	pop	r17
    6064:	08 95       	ret

00006066 <nvm_read_byte>:
    6066:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    606a:	e6 2f       	mov	r30, r22
    606c:	f7 2f       	mov	r31, r23
    606e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    6072:	84 91       	lpm	r24, Z
    6074:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    6078:	08 95       	ret

0000607a <ccp_write_io>:
    607a:	1b be       	out	0x3b, r1	; 59
    607c:	fc 01       	movw	r30, r24
    607e:	28 ed       	ldi	r18, 0xD8	; 216
    6080:	24 bf       	out	0x34, r18	; 52
    6082:	60 83       	st	Z, r22
    6084:	08 95       	ret

00006086 <board_init>:
=======
    5cc2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5cc4:	df 91       	pop	r29
    5cc6:	cf 91       	pop	r28
    5cc8:	1f 91       	pop	r17
    5cca:	08 95       	ret

00005ccc <nvm_read_byte>:
    5ccc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    5cd0:	e6 2f       	mov	r30, r22
    5cd2:	f7 2f       	mov	r31, r23
    5cd4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    5cd8:	84 91       	lpm	r24, Z
    5cda:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    5cde:	08 95       	ret

00005ce0 <ccp_write_io>:
    5ce0:	1b be       	out	0x3b, r1	; 59
    5ce2:	fc 01       	movw	r30, r24
    5ce4:	28 ed       	ldi	r18, 0xD8	; 216
    5ce6:	24 bf       	out	0x34, r18	; 52
    5ce8:	60 83       	st	Z, r22
    5cea:	08 95       	ret

00005cec <board_init>:
>>>>>>> Stashed changes
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	PORTA_DIR = 0;//set all IO's to input
<<<<<<< Updated upstream
    6086:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTB_DIR = 0;//set all IO's to input
    608a:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	PORTC_DIR = (1<<4)|(1<<5)|(1<<7); //set SS, MOSI and SPCK as output
    608e:	80 eb       	ldi	r24, 0xB0	; 176
    6090:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = (1<<0)|(1<<1)|(1<<3)|(1<<4); //set CAN and Ethernet SS and TXD2 as output
    6094:	9b e1       	ldi	r25, 0x1B	; 27
    6096:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE_DIR = (1<<4)|(1<<5)|(1<<7); //set DE, RE and TXD1 as output
    609a:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTF_DIR = (1<<3)|(1<<4)|(1<<5); //set DE, RE and TXD1 as output
    609e:	88 e3       	ldi	r24, 0x38	; 56
    60a0:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTH_DIR = (1<<4)|(1<<5); //set LED1 and LED2 as output
    60a4:	80 e3       	ldi	r24, 0x30	; 48
    60a6:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
	PORTJ_DIR = 0;//set all IO's to input
    60aa:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
	PORTK_DIR = 0;//set all IO's to input
    60ae:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	PORTQ_DIR = (1<<0)|(1<<1)|(1<<2)|(1<<3); //set relays to output
    60b2:	8f e0       	ldi	r24, 0x0F	; 15
    60b4:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
	PORTR_DIR = (1<<0)|(1<<1); //set relays to output
    60b8:	83 e0       	ldi	r24, 0x03	; 3
    60ba:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
	

	PORTA_PIN0CTRL = (1<<PORT_OPC0_bp )|(1<<PORT_OPC1_bp);
    60be:	88 e1       	ldi	r24, 0x18	; 24
    60c0:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    60c4:	08 95       	ret

000060c6 <__mulsi3>:
    60c6:	db 01       	movw	r26, r22
    60c8:	8f 93       	push	r24
    60ca:	9f 93       	push	r25
    60cc:	0e 94 03 31 	call	0x6206	; 0x6206 <__muluhisi3>
    60d0:	bf 91       	pop	r27
    60d2:	af 91       	pop	r26
    60d4:	a2 9f       	mul	r26, r18
    60d6:	80 0d       	add	r24, r0
    60d8:	91 1d       	adc	r25, r1
    60da:	a3 9f       	mul	r26, r19
    60dc:	90 0d       	add	r25, r0
    60de:	b2 9f       	mul	r27, r18
    60e0:	90 0d       	add	r25, r0
    60e2:	11 24       	eor	r1, r1
    60e4:	08 95       	ret

000060e6 <__udivmodhi4>:
    60e6:	aa 1b       	sub	r26, r26
    60e8:	bb 1b       	sub	r27, r27
    60ea:	51 e1       	ldi	r21, 0x11	; 17
    60ec:	07 c0       	rjmp	.+14     	; 0x60fc <__udivmodhi4_ep>

000060ee <__udivmodhi4_loop>:
    60ee:	aa 1f       	adc	r26, r26
    60f0:	bb 1f       	adc	r27, r27
    60f2:	a6 17       	cp	r26, r22
    60f4:	b7 07       	cpc	r27, r23
    60f6:	10 f0       	brcs	.+4      	; 0x60fc <__udivmodhi4_ep>
    60f8:	a6 1b       	sub	r26, r22
    60fa:	b7 0b       	sbc	r27, r23

000060fc <__udivmodhi4_ep>:
    60fc:	88 1f       	adc	r24, r24
    60fe:	99 1f       	adc	r25, r25
    6100:	5a 95       	dec	r21
    6102:	a9 f7       	brne	.-22     	; 0x60ee <__udivmodhi4_loop>
    6104:	80 95       	com	r24
    6106:	90 95       	com	r25
    6108:	bc 01       	movw	r22, r24
    610a:	cd 01       	movw	r24, r26
    610c:	08 95       	ret

0000610e <__divmodhi4>:
    610e:	97 fb       	bst	r25, 7
    6110:	07 2e       	mov	r0, r23
    6112:	16 f4       	brtc	.+4      	; 0x6118 <__divmodhi4+0xa>
    6114:	00 94       	com	r0
    6116:	07 d0       	rcall	.+14     	; 0x6126 <__divmodhi4_neg1>
    6118:	77 fd       	sbrc	r23, 7
    611a:	09 d0       	rcall	.+18     	; 0x612e <__divmodhi4_neg2>
    611c:	0e 94 73 30 	call	0x60e6	; 0x60e6 <__udivmodhi4>
    6120:	07 fc       	sbrc	r0, 7
    6122:	05 d0       	rcall	.+10     	; 0x612e <__divmodhi4_neg2>
    6124:	3e f4       	brtc	.+14     	; 0x6134 <__divmodhi4_exit>

00006126 <__divmodhi4_neg1>:
    6126:	90 95       	com	r25
    6128:	81 95       	neg	r24
    612a:	9f 4f       	sbci	r25, 0xFF	; 255
    612c:	08 95       	ret

0000612e <__divmodhi4_neg2>:
    612e:	70 95       	com	r23
    6130:	61 95       	neg	r22
    6132:	7f 4f       	sbci	r23, 0xFF	; 255

00006134 <__divmodhi4_exit>:
    6134:	08 95       	ret

00006136 <__udivmodsi4>:
    6136:	a1 e2       	ldi	r26, 0x21	; 33
    6138:	1a 2e       	mov	r1, r26
    613a:	aa 1b       	sub	r26, r26
    613c:	bb 1b       	sub	r27, r27
    613e:	fd 01       	movw	r30, r26
    6140:	0d c0       	rjmp	.+26     	; 0x615c <__udivmodsi4_ep>

00006142 <__udivmodsi4_loop>:
    6142:	aa 1f       	adc	r26, r26
    6144:	bb 1f       	adc	r27, r27
    6146:	ee 1f       	adc	r30, r30
    6148:	ff 1f       	adc	r31, r31
    614a:	a2 17       	cp	r26, r18
    614c:	b3 07       	cpc	r27, r19
    614e:	e4 07       	cpc	r30, r20
    6150:	f5 07       	cpc	r31, r21
    6152:	20 f0       	brcs	.+8      	; 0x615c <__udivmodsi4_ep>
    6154:	a2 1b       	sub	r26, r18
    6156:	b3 0b       	sbc	r27, r19
    6158:	e4 0b       	sbc	r30, r20
    615a:	f5 0b       	sbc	r31, r21

0000615c <__udivmodsi4_ep>:
    615c:	66 1f       	adc	r22, r22
    615e:	77 1f       	adc	r23, r23
    6160:	88 1f       	adc	r24, r24
    6162:	99 1f       	adc	r25, r25
    6164:	1a 94       	dec	r1
    6166:	69 f7       	brne	.-38     	; 0x6142 <__udivmodsi4_loop>
    6168:	60 95       	com	r22
    616a:	70 95       	com	r23
    616c:	80 95       	com	r24
    616e:	90 95       	com	r25
    6170:	9b 01       	movw	r18, r22
    6172:	ac 01       	movw	r20, r24
    6174:	bd 01       	movw	r22, r26
    6176:	cf 01       	movw	r24, r30
    6178:	08 95       	ret

0000617a <__divmodsi4>:
    617a:	05 2e       	mov	r0, r21
    617c:	97 fb       	bst	r25, 7
    617e:	1e f4       	brtc	.+6      	; 0x6186 <__divmodsi4+0xc>
    6180:	00 94       	com	r0
    6182:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <__negsi2>
    6186:	57 fd       	sbrc	r21, 7
    6188:	07 d0       	rcall	.+14     	; 0x6198 <__divmodsi4_neg2>
    618a:	0e 94 9b 30 	call	0x6136	; 0x6136 <__udivmodsi4>
    618e:	07 fc       	sbrc	r0, 7
    6190:	03 d0       	rcall	.+6      	; 0x6198 <__divmodsi4_neg2>
    6192:	4e f4       	brtc	.+18     	; 0x61a6 <__divmodsi4_exit>
    6194:	0c 94 d4 30 	jmp	0x61a8	; 0x61a8 <__negsi2>

00006198 <__divmodsi4_neg2>:
    6198:	50 95       	com	r21
    619a:	40 95       	com	r20
    619c:	30 95       	com	r19
    619e:	21 95       	neg	r18
    61a0:	3f 4f       	sbci	r19, 0xFF	; 255
    61a2:	4f 4f       	sbci	r20, 0xFF	; 255
    61a4:	5f 4f       	sbci	r21, 0xFF	; 255

000061a6 <__divmodsi4_exit>:
    61a6:	08 95       	ret

000061a8 <__negsi2>:
    61a8:	90 95       	com	r25
    61aa:	80 95       	com	r24
    61ac:	70 95       	com	r23
    61ae:	61 95       	neg	r22
    61b0:	7f 4f       	sbci	r23, 0xFF	; 255
    61b2:	8f 4f       	sbci	r24, 0xFF	; 255
    61b4:	9f 4f       	sbci	r25, 0xFF	; 255
    61b6:	08 95       	ret

000061b8 <__tablejump2__>:
    61b8:	ee 0f       	add	r30, r30
    61ba:	ff 1f       	adc	r31, r31
    61bc:	88 1f       	adc	r24, r24
    61be:	8b bf       	out	0x3b, r24	; 59
    61c0:	07 90       	elpm	r0, Z+
    61c2:	f6 91       	elpm	r31, Z
    61c4:	e0 2d       	mov	r30, r0
    61c6:	1b be       	out	0x3b, r1	; 59
    61c8:	19 94       	eijmp

000061ca <__mulhisi3>:
    61ca:	0e 94 ed 30 	call	0x61da	; 0x61da <__umulhisi3>
    61ce:	33 23       	and	r19, r19
    61d0:	12 f4       	brpl	.+4      	; 0x61d6 <__mulhisi3+0xc>
    61d2:	8a 1b       	sub	r24, r26
    61d4:	9b 0b       	sbc	r25, r27
    61d6:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__usmulhisi3_tail>

000061da <__umulhisi3>:
    61da:	a2 9f       	mul	r26, r18
    61dc:	b0 01       	movw	r22, r0
    61de:	b3 9f       	mul	r27, r19
    61e0:	c0 01       	movw	r24, r0
    61e2:	a3 9f       	mul	r26, r19
    61e4:	70 0d       	add	r23, r0
    61e6:	81 1d       	adc	r24, r1
    61e8:	11 24       	eor	r1, r1
    61ea:	91 1d       	adc	r25, r1
    61ec:	b2 9f       	mul	r27, r18
    61ee:	70 0d       	add	r23, r0
    61f0:	81 1d       	adc	r24, r1
    61f2:	11 24       	eor	r1, r1
    61f4:	91 1d       	adc	r25, r1
    61f6:	08 95       	ret

000061f8 <__usmulhisi3>:
    61f8:	0e 94 ed 30 	call	0x61da	; 0x61da <__umulhisi3>

000061fc <__usmulhisi3_tail>:
    61fc:	b7 ff       	sbrs	r27, 7
    61fe:	08 95       	ret
    6200:	82 1b       	sub	r24, r18
    6202:	93 0b       	sbc	r25, r19
    6204:	08 95       	ret

00006206 <__muluhisi3>:
    6206:	0e 94 ed 30 	call	0x61da	; 0x61da <__umulhisi3>
    620a:	a5 9f       	mul	r26, r21
    620c:	90 0d       	add	r25, r0
    620e:	b4 9f       	mul	r27, r20
    6210:	90 0d       	add	r25, r0
    6212:	a4 9f       	mul	r26, r20
    6214:	80 0d       	add	r24, r0
    6216:	91 1d       	adc	r25, r1
    6218:	11 24       	eor	r1, r1
    621a:	08 95       	ret

0000621c <memcpy>:
    621c:	fb 01       	movw	r30, r22
    621e:	dc 01       	movw	r26, r24
    6220:	02 c0       	rjmp	.+4      	; 0x6226 <memcpy+0xa>
    6222:	01 90       	ld	r0, Z+
    6224:	0d 92       	st	X+, r0
    6226:	41 50       	subi	r20, 0x01	; 1
    6228:	50 40       	sbci	r21, 0x00	; 0
    622a:	d8 f7       	brcc	.-10     	; 0x6222 <memcpy+0x6>
    622c:	08 95       	ret

0000622e <_exit>:
    622e:	f8 94       	cli

00006230 <__stop_program>:
    6230:	ff cf       	rjmp	.-2      	; 0x6230 <__stop_program>
=======
    5cec:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTB_DIR = 0;//set all IO's to input
    5cf0:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	PORTC_DIR = (1<<4)|(1<<5)|(1<<7); //set SS, MOSI and SPCK as output
    5cf4:	80 eb       	ldi	r24, 0xB0	; 176
    5cf6:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = (1<<0)|(1<<1)|(1<<3)|(1<<4); //set CAN and Ethernet SS and TXD2 as output
    5cfa:	9b e1       	ldi	r25, 0x1B	; 27
    5cfc:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE_DIR = (1<<4)|(1<<5)|(1<<7); //set DE, RE and TXD1 as output
    5d00:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTF_DIR = (1<<3)|(1<<4)|(1<<5); //set DE, RE and TXD1 as output
    5d04:	88 e3       	ldi	r24, 0x38	; 56
    5d06:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTH_DIR = (1<<4)|(1<<5); //set LED1 and LED2 as output
    5d0a:	80 e3       	ldi	r24, 0x30	; 48
    5d0c:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
	PORTJ_DIR = 0;//set all IO's to input
    5d10:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
	PORTK_DIR = 0;//set all IO's to input
    5d14:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	PORTQ_DIR = (1<<0)|(1<<1)|(1<<2)|(1<<3); //set relays to output
    5d18:	8f e0       	ldi	r24, 0x0F	; 15
    5d1a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
	PORTR_DIR = (1<<0)|(1<<1); //set relays to output
    5d1e:	83 e0       	ldi	r24, 0x03	; 3
    5d20:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
	

	PORTA_PIN0CTRL = (1<<PORT_OPC0_bp )|(1<<PORT_OPC1_bp);
    5d24:	88 e1       	ldi	r24, 0x18	; 24
    5d26:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    5d2a:	08 95       	ret

00005d2c <__mulsi3>:
    5d2c:	db 01       	movw	r26, r22
    5d2e:	8f 93       	push	r24
    5d30:	9f 93       	push	r25
    5d32:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__muluhisi3>
    5d36:	bf 91       	pop	r27
    5d38:	af 91       	pop	r26
    5d3a:	a2 9f       	mul	r26, r18
    5d3c:	80 0d       	add	r24, r0
    5d3e:	91 1d       	adc	r25, r1
    5d40:	a3 9f       	mul	r26, r19
    5d42:	90 0d       	add	r25, r0
    5d44:	b2 9f       	mul	r27, r18
    5d46:	90 0d       	add	r25, r0
    5d48:	11 24       	eor	r1, r1
    5d4a:	08 95       	ret

00005d4c <__udivmodhi4>:
    5d4c:	aa 1b       	sub	r26, r26
    5d4e:	bb 1b       	sub	r27, r27
    5d50:	51 e1       	ldi	r21, 0x11	; 17
    5d52:	07 c0       	rjmp	.+14     	; 0x5d62 <__udivmodhi4_ep>

00005d54 <__udivmodhi4_loop>:
    5d54:	aa 1f       	adc	r26, r26
    5d56:	bb 1f       	adc	r27, r27
    5d58:	a6 17       	cp	r26, r22
    5d5a:	b7 07       	cpc	r27, r23
    5d5c:	10 f0       	brcs	.+4      	; 0x5d62 <__udivmodhi4_ep>
    5d5e:	a6 1b       	sub	r26, r22
    5d60:	b7 0b       	sbc	r27, r23

00005d62 <__udivmodhi4_ep>:
    5d62:	88 1f       	adc	r24, r24
    5d64:	99 1f       	adc	r25, r25
    5d66:	5a 95       	dec	r21
    5d68:	a9 f7       	brne	.-22     	; 0x5d54 <__udivmodhi4_loop>
    5d6a:	80 95       	com	r24
    5d6c:	90 95       	com	r25
    5d6e:	bc 01       	movw	r22, r24
    5d70:	cd 01       	movw	r24, r26
    5d72:	08 95       	ret

00005d74 <__divmodhi4>:
    5d74:	97 fb       	bst	r25, 7
    5d76:	07 2e       	mov	r0, r23
    5d78:	16 f4       	brtc	.+4      	; 0x5d7e <__divmodhi4+0xa>
    5d7a:	00 94       	com	r0
    5d7c:	07 d0       	rcall	.+14     	; 0x5d8c <__divmodhi4_neg1>
    5d7e:	77 fd       	sbrc	r23, 7
    5d80:	09 d0       	rcall	.+18     	; 0x5d94 <__divmodhi4_neg2>
    5d82:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__udivmodhi4>
    5d86:	07 fc       	sbrc	r0, 7
    5d88:	05 d0       	rcall	.+10     	; 0x5d94 <__divmodhi4_neg2>
    5d8a:	3e f4       	brtc	.+14     	; 0x5d9a <__divmodhi4_exit>

00005d8c <__divmodhi4_neg1>:
    5d8c:	90 95       	com	r25
    5d8e:	81 95       	neg	r24
    5d90:	9f 4f       	sbci	r25, 0xFF	; 255
    5d92:	08 95       	ret

00005d94 <__divmodhi4_neg2>:
    5d94:	70 95       	com	r23
    5d96:	61 95       	neg	r22
    5d98:	7f 4f       	sbci	r23, 0xFF	; 255

00005d9a <__divmodhi4_exit>:
    5d9a:	08 95       	ret

00005d9c <__udivmodsi4>:
    5d9c:	a1 e2       	ldi	r26, 0x21	; 33
    5d9e:	1a 2e       	mov	r1, r26
    5da0:	aa 1b       	sub	r26, r26
    5da2:	bb 1b       	sub	r27, r27
    5da4:	fd 01       	movw	r30, r26
    5da6:	0d c0       	rjmp	.+26     	; 0x5dc2 <__udivmodsi4_ep>

00005da8 <__udivmodsi4_loop>:
    5da8:	aa 1f       	adc	r26, r26
    5daa:	bb 1f       	adc	r27, r27
    5dac:	ee 1f       	adc	r30, r30
    5dae:	ff 1f       	adc	r31, r31
    5db0:	a2 17       	cp	r26, r18
    5db2:	b3 07       	cpc	r27, r19
    5db4:	e4 07       	cpc	r30, r20
    5db6:	f5 07       	cpc	r31, r21
    5db8:	20 f0       	brcs	.+8      	; 0x5dc2 <__udivmodsi4_ep>
    5dba:	a2 1b       	sub	r26, r18
    5dbc:	b3 0b       	sbc	r27, r19
    5dbe:	e4 0b       	sbc	r30, r20
    5dc0:	f5 0b       	sbc	r31, r21

00005dc2 <__udivmodsi4_ep>:
    5dc2:	66 1f       	adc	r22, r22
    5dc4:	77 1f       	adc	r23, r23
    5dc6:	88 1f       	adc	r24, r24
    5dc8:	99 1f       	adc	r25, r25
    5dca:	1a 94       	dec	r1
    5dcc:	69 f7       	brne	.-38     	; 0x5da8 <__udivmodsi4_loop>
    5dce:	60 95       	com	r22
    5dd0:	70 95       	com	r23
    5dd2:	80 95       	com	r24
    5dd4:	90 95       	com	r25
    5dd6:	9b 01       	movw	r18, r22
    5dd8:	ac 01       	movw	r20, r24
    5dda:	bd 01       	movw	r22, r26
    5ddc:	cf 01       	movw	r24, r30
    5dde:	08 95       	ret

00005de0 <__divmodsi4>:
    5de0:	05 2e       	mov	r0, r21
    5de2:	97 fb       	bst	r25, 7
    5de4:	1e f4       	brtc	.+6      	; 0x5dec <__divmodsi4+0xc>
    5de6:	00 94       	com	r0
    5de8:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__negsi2>
    5dec:	57 fd       	sbrc	r21, 7
    5dee:	07 d0       	rcall	.+14     	; 0x5dfe <__divmodsi4_neg2>
    5df0:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <__udivmodsi4>
    5df4:	07 fc       	sbrc	r0, 7
    5df6:	03 d0       	rcall	.+6      	; 0x5dfe <__divmodsi4_neg2>
    5df8:	4e f4       	brtc	.+18     	; 0x5e0c <__divmodsi4_exit>
    5dfa:	0c 94 07 2f 	jmp	0x5e0e	; 0x5e0e <__negsi2>

00005dfe <__divmodsi4_neg2>:
    5dfe:	50 95       	com	r21
    5e00:	40 95       	com	r20
    5e02:	30 95       	com	r19
    5e04:	21 95       	neg	r18
    5e06:	3f 4f       	sbci	r19, 0xFF	; 255
    5e08:	4f 4f       	sbci	r20, 0xFF	; 255
    5e0a:	5f 4f       	sbci	r21, 0xFF	; 255

00005e0c <__divmodsi4_exit>:
    5e0c:	08 95       	ret

00005e0e <__negsi2>:
    5e0e:	90 95       	com	r25
    5e10:	80 95       	com	r24
    5e12:	70 95       	com	r23
    5e14:	61 95       	neg	r22
    5e16:	7f 4f       	sbci	r23, 0xFF	; 255
    5e18:	8f 4f       	sbci	r24, 0xFF	; 255
    5e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1c:	08 95       	ret

00005e1e <__tablejump2__>:
    5e1e:	ee 0f       	add	r30, r30
    5e20:	ff 1f       	adc	r31, r31
    5e22:	88 1f       	adc	r24, r24
    5e24:	8b bf       	out	0x3b, r24	; 59
    5e26:	07 90       	elpm	r0, Z+
    5e28:	f6 91       	elpm	r31, Z
    5e2a:	e0 2d       	mov	r30, r0
    5e2c:	1b be       	out	0x3b, r1	; 59
    5e2e:	19 94       	eijmp

00005e30 <__mulhisi3>:
    5e30:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__umulhisi3>
    5e34:	33 23       	and	r19, r19
    5e36:	12 f4       	brpl	.+4      	; 0x5e3c <__mulhisi3+0xc>
    5e38:	8a 1b       	sub	r24, r26
    5e3a:	9b 0b       	sbc	r25, r27
    5e3c:	0c 94 31 2f 	jmp	0x5e62	; 0x5e62 <__usmulhisi3_tail>

00005e40 <__umulhisi3>:
    5e40:	a2 9f       	mul	r26, r18
    5e42:	b0 01       	movw	r22, r0
    5e44:	b3 9f       	mul	r27, r19
    5e46:	c0 01       	movw	r24, r0
    5e48:	a3 9f       	mul	r26, r19
    5e4a:	70 0d       	add	r23, r0
    5e4c:	81 1d       	adc	r24, r1
    5e4e:	11 24       	eor	r1, r1
    5e50:	91 1d       	adc	r25, r1
    5e52:	b2 9f       	mul	r27, r18
    5e54:	70 0d       	add	r23, r0
    5e56:	81 1d       	adc	r24, r1
    5e58:	11 24       	eor	r1, r1
    5e5a:	91 1d       	adc	r25, r1
    5e5c:	08 95       	ret

00005e5e <__usmulhisi3>:
    5e5e:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__umulhisi3>

00005e62 <__usmulhisi3_tail>:
    5e62:	b7 ff       	sbrs	r27, 7
    5e64:	08 95       	ret
    5e66:	82 1b       	sub	r24, r18
    5e68:	93 0b       	sbc	r25, r19
    5e6a:	08 95       	ret

00005e6c <__muluhisi3>:
    5e6c:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <__umulhisi3>
    5e70:	a5 9f       	mul	r26, r21
    5e72:	90 0d       	add	r25, r0
    5e74:	b4 9f       	mul	r27, r20
    5e76:	90 0d       	add	r25, r0
    5e78:	a4 9f       	mul	r26, r20
    5e7a:	80 0d       	add	r24, r0
    5e7c:	91 1d       	adc	r25, r1
    5e7e:	11 24       	eor	r1, r1
    5e80:	08 95       	ret

00005e82 <__mulshisi3>:
    5e82:	b7 ff       	sbrs	r27, 7
    5e84:	0c 94 36 2f 	jmp	0x5e6c	; 0x5e6c <__muluhisi3>

00005e88 <__mulohisi3>:
    5e88:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__muluhisi3>
    5e8c:	82 1b       	sub	r24, r18
    5e8e:	93 0b       	sbc	r25, r19
    5e90:	08 95       	ret

00005e92 <memcpy>:
    5e92:	fb 01       	movw	r30, r22
    5e94:	dc 01       	movw	r26, r24
    5e96:	02 c0       	rjmp	.+4      	; 0x5e9c <memcpy+0xa>
    5e98:	01 90       	ld	r0, Z+
    5e9a:	0d 92       	st	X+, r0
    5e9c:	41 50       	subi	r20, 0x01	; 1
    5e9e:	50 40       	sbci	r21, 0x00	; 0
    5ea0:	d8 f7       	brcc	.-10     	; 0x5e98 <memcpy+0x6>
    5ea2:	08 95       	ret

00005ea4 <_exit>:
    5ea4:	f8 94       	cli

00005ea6 <__stop_program>:
    5ea6:	ff cf       	rjmp	.-2      	; 0x5ea6 <__stop_program>
>>>>>>> Stashed changes
