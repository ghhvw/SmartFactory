
SmartFactory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000058  00020000  00020000  00006706  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .jmp_table    000000a8  00007e00  00007e00  0000665e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000624e  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         0000033c  00802000  0000624e  00006322  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002ab  0080233c  0080233c  0000676c  2**4
                  ALLOC
  5 .comment      00000030  00000000  00000000  0000675e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006790  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000a68  00000000  00000000  000067d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00013ad7  00000000  00000000  00007238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006dca  00000000  00000000  0001ad0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008d13  00000000  00000000  00021ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001e8c  00000000  00000000  0002a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00038f3d  00000000  00000000  0002c678  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008b67  00000000  00000000  000655b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000968  00000000  00000000  0006e120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000b533  00000000  00000000  0006ea88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_CommonSPM>:
; ---

.section .BOOT, "ax"

SP_CommonSPM:
	movw	ZL, r24          ; Load R25:R24 into Z.
   20000:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20     ; Load prepared command into NVM Command register.
   20002:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_SPM_gc  ; Prepare Protect SPM signature in R18
   20006:	2d e9       	ldi	r18, 0x9D	; 157
	sts	CCP, r18         ; Enable SPM operation (this disables interrupts for 4 cycles).
   20008:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                      ; Self-program.
   2000c:	e8 95       	spm
	clr	r1               ; Clear R1 for GCC _zero_reg_ to function properly.
   2000e:	11 24       	eor	r1, r1
	out	RAMPZ, r19       ; Restore RAMPZ register.
   20010:	3b bf       	out	0x3b, r19	; 59
	ret
   20012:	08 95       	ret

00020014 <nvm_common_spm>:
	/**
	 * For GCC:
	 * \param address uint32_t r22:r25
	 * \param nvm_cmd uint8_t  r20
	 */
	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   20014:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   20016:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   20018:	fb 01       	movw	r30, r22
	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   2001a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r20      ; Load prepared command into NVM Command register.
   2001e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r23, CCP_SPM_gc   ; Prepare Protect SPM signature (r23 is no longer needed)
   20022:	7d e9       	ldi	r23, 0x9D	; 157
	sts CCP, r23          ; Enable SPM operation (this disables interrupts for 4 cycles).
   20024:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                   ; Self-program.
   20028:	e8 95       	spm
	sts NVM_CMD, r24      ; Restore NVM command register
   2002a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   2002e:	9b bf       	out	0x3b, r25	; 59
	spm                   ; Self-program.
	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   20030:	08 95       	ret

00020032 <nvm_flash_load_word_to_buffer>:
	 * For GCC:
	 * \param word_addr uint32_t r22:r25
	 * \param data      uint16_t r20:r21
	 */
wait_nvm:
	lds r18, NVM_STATUS
   20032:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc r18, NVM_NVMBUSY_bp
   20036:	27 fd       	sbrc	r18, 7
	rjmp wait_nvm
   20038:	fc cf       	rjmp	.-8      	; 0x20032 <nvm_flash_load_word_to_buffer>

	in r25, RAMPZ         ; Store RAMPZ. Highest address byte is ignored, so using that
   2003a:	9b b7       	in	r25, 0x3b	; 59
	out RAMPZ, r24        ; Load R24 into RAMPZ
   2003c:	8b bf       	out	0x3b, r24	; 59
	movw ZL, r22          ; Load R22:R23 into Z.
   2003e:	fb 01       	movw	r30, r22

	lds r24, NVM_CMD      ; Store NVM command register (r24 is no longer needed)
   20040:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi r18, NVM_CMD_LOAD_FLASH_BUFFER_gc
   20044:	23 e2       	ldi	r18, 0x23	; 35
	sts NVM_CMD, r18      ; Load prepared command into NVM Command register.
   20046:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>

	movw r0, r20          ; Load R20:R21 into R0:R1
   2004a:	0a 01       	movw	r0, r20
	spm                   ; Self-program.
   2004c:	e8 95       	spm

	clr r1                ; Clear R1 for GCC _zero_reg_ to function properly.
   2004e:	11 24       	eor	r1, r1
	sts NVM_CMD, r24      ; Restore NVM command register
   20050:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	out RAMPZ, r25        ; Restore RAMPZ register.
   20054:	9b bf       	out	0x3b, r25	; 59

	sts NVM_CMD, r18      ; Restore NVM command register
	out RAMPZ, r19        ; Restore RAMPZ register.
#endif

	ret
   20056:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 02 	jmp	0x55e	; 0x55e <__ctors_end>
       4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
       8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
       c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      10:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      14:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      18:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      1c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      20:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      24:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      28:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      2c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      30:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__vector_12>
      34:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      38:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      3c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      40:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      44:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      48:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      4c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      50:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      54:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      58:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      5c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      60:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      64:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      68:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      6c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      70:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      74:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      78:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      7c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      80:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      84:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      88:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      8c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      90:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      94:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      98:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      9c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      b4:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_45>
      b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      fc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     100:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     104:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     108:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     10c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     110:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     114:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     118:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     11c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     120:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     124:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     128:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     12c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_75>
     130:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     134:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     138:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     13c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     140:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     144:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     148:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     14c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     150:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     154:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     158:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     15c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     160:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     164:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     168:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     16c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     170:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     174:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     178:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     17c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     180:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     184:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     188:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     18c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     190:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__vector_100>
     194:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_101>
     198:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     19c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a8:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_106>
     1ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1f0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1f4:	0c 94 a6 29 	jmp	0x534c	; 0x534c <__vector_125>
     1f8:	0c 94 73 2a 	jmp	0x54e6	; 0x54e6 <__vector_126>
     1fc:	c2 0c       	add	r12, r2
     1fe:	d1 0c       	add	r13, r1
     200:	e0 0c       	add	r14, r0
     202:	ef 0c       	add	r14, r15
     204:	fd 0c       	add	r15, r13
     206:	0c 0d       	add	r16, r12
     208:	1b 0d       	add	r17, r11
     20a:	29 0d       	add	r18, r9
     20c:	36 0d       	add	r19, r6
     20e:	45 0d       	add	r20, r5
     210:	54 0d       	add	r21, r4
     212:	63 0d       	add	r22, r3
     214:	59 16       	cp	r5, r25
     216:	68 16       	cp	r6, r24
     218:	77 16       	cp	r7, r23
     21a:	86 16       	cp	r8, r22
     21c:	94 16       	cp	r9, r20
     21e:	a3 16       	cp	r10, r19
     220:	b2 16       	cp	r11, r18
     222:	c0 16       	cp	r12, r16
     224:	cd 16       	cp	r12, r29
     226:	dc 16       	cp	r13, r28
     228:	eb 16       	cp	r14, r27
     22a:	fa 16       	cp	r15, r26
     22c:	b2 17       	cp	r27, r18
     22e:	b2 17       	cp	r27, r18
     230:	b2 17       	cp	r27, r18
     232:	b2 17       	cp	r27, r18
     234:	b2 17       	cp	r27, r18
     236:	b2 17       	cp	r27, r18
     238:	b2 17       	cp	r27, r18
     23a:	b2 17       	cp	r27, r18
     23c:	b2 17       	cp	r27, r18
     23e:	b2 17       	cp	r27, r18
     240:	b2 17       	cp	r27, r18
     242:	b2 17       	cp	r27, r18
     244:	b2 17       	cp	r27, r18
     246:	b2 17       	cp	r27, r18
     248:	b2 17       	cp	r27, r18
     24a:	b2 17       	cp	r27, r18
     24c:	b2 17       	cp	r27, r18
     24e:	b2 17       	cp	r27, r18
     250:	b2 17       	cp	r27, r18
     252:	b2 17       	cp	r27, r18
     254:	b0 17       	cp	r27, r16
     256:	b0 17       	cp	r27, r16
     258:	b0 17       	cp	r27, r16
     25a:	b0 17       	cp	r27, r16
     25c:	b0 17       	cp	r27, r16
     25e:	b0 17       	cp	r27, r16
     260:	b0 17       	cp	r27, r16
     262:	b0 17       	cp	r27, r16
     264:	b0 17       	cp	r27, r16
     266:	b0 17       	cp	r27, r16
     268:	b0 17       	cp	r27, r16
     26a:	b0 17       	cp	r27, r16
     26c:	b0 17       	cp	r27, r16
     26e:	b0 17       	cp	r27, r16
     270:	b0 17       	cp	r27, r16
     272:	b0 17       	cp	r27, r16
     274:	b0 17       	cp	r27, r16
     276:	b0 17       	cp	r27, r16
     278:	b0 17       	cp	r27, r16
     27a:	b0 17       	cp	r27, r16
     27c:	b4 17       	cp	r27, r20
     27e:	b4 17       	cp	r27, r20
     280:	b4 17       	cp	r27, r20
     282:	b4 17       	cp	r27, r20
     284:	b4 17       	cp	r27, r20
     286:	b4 17       	cp	r27, r20
     288:	b4 17       	cp	r27, r20
     28a:	b4 17       	cp	r27, r20
     28c:	b4 17       	cp	r27, r20
     28e:	b4 17       	cp	r27, r20
     290:	ae 17       	cp	r26, r30
     292:	ae 17       	cp	r26, r30
     294:	ae 17       	cp	r26, r30
     296:	ae 17       	cp	r26, r30
     298:	ae 17       	cp	r26, r30
     29a:	ae 17       	cp	r26, r30
     29c:	ae 17       	cp	r26, r30
     29e:	ae 17       	cp	r26, r30
     2a0:	ae 17       	cp	r26, r30
     2a2:	ae 17       	cp	r26, r30
     2a4:	b4 17       	cp	r27, r20
     2a6:	b4 17       	cp	r27, r20
     2a8:	b4 17       	cp	r27, r20
     2aa:	b4 17       	cp	r27, r20
     2ac:	b4 17       	cp	r27, r20
     2ae:	b4 17       	cp	r27, r20
     2b0:	b4 17       	cp	r27, r20
     2b2:	b4 17       	cp	r27, r20
     2b4:	b4 17       	cp	r27, r20
     2b6:	b4 17       	cp	r27, r20
     2b8:	b4 17       	cp	r27, r20
     2ba:	b4 17       	cp	r27, r20
     2bc:	b4 17       	cp	r27, r20
     2be:	b4 17       	cp	r27, r20
     2c0:	b4 17       	cp	r27, r20
     2c2:	b4 17       	cp	r27, r20
     2c4:	b4 17       	cp	r27, r20
     2c6:	b4 17       	cp	r27, r20
     2c8:	b4 17       	cp	r27, r20
     2ca:	b4 17       	cp	r27, r20
     2cc:	ac 17       	cp	r26, r28
     2ce:	ac 17       	cp	r26, r28
     2d0:	ac 17       	cp	r26, r28
     2d2:	ac 17       	cp	r26, r28
     2d4:	ac 17       	cp	r26, r28
     2d6:	ac 17       	cp	r26, r28
     2d8:	ac 17       	cp	r26, r28
     2da:	ac 17       	cp	r26, r28
     2dc:	ac 17       	cp	r26, r28
     2de:	ac 17       	cp	r26, r28
     2e0:	ac 17       	cp	r26, r28
     2e2:	ac 17       	cp	r26, r28
     2e4:	ac 17       	cp	r26, r28
     2e6:	ac 17       	cp	r26, r28
     2e8:	ac 17       	cp	r26, r28
     2ea:	aa 17       	cp	r26, r26
     2ec:	aa 17       	cp	r26, r26
     2ee:	aa 17       	cp	r26, r26
     2f0:	aa 17       	cp	r26, r26
     2f2:	aa 17       	cp	r26, r26
     2f4:	aa 17       	cp	r26, r26
     2f6:	aa 17       	cp	r26, r26
     2f8:	aa 17       	cp	r26, r26
     2fa:	aa 17       	cp	r26, r26
     2fc:	aa 17       	cp	r26, r26
     2fe:	aa 17       	cp	r26, r26
     300:	aa 17       	cp	r26, r26
     302:	aa 17       	cp	r26, r26
     304:	aa 17       	cp	r26, r26
     306:	aa 17       	cp	r26, r26
     308:	a8 17       	cp	r26, r24
     30a:	a8 17       	cp	r26, r24
     30c:	a8 17       	cp	r26, r24
     30e:	a8 17       	cp	r26, r24
     310:	a8 17       	cp	r26, r24
     312:	a8 17       	cp	r26, r24
     314:	a8 17       	cp	r26, r24
     316:	a8 17       	cp	r26, r24
     318:	a8 17       	cp	r26, r24
     31a:	a8 17       	cp	r26, r24
     31c:	a8 17       	cp	r26, r24
     31e:	a8 17       	cp	r26, r24
     320:	a8 17       	cp	r26, r24
     322:	a8 17       	cp	r26, r24
     324:	a8 17       	cp	r26, r24
     326:	a8 17       	cp	r26, r24
     328:	a8 17       	cp	r26, r24
     32a:	a8 17       	cp	r26, r24
     32c:	a8 17       	cp	r26, r24
     32e:	a8 17       	cp	r26, r24
     330:	a6 17       	cp	r26, r22
     332:	a6 17       	cp	r26, r22
     334:	a6 17       	cp	r26, r22
     336:	a6 17       	cp	r26, r22
     338:	a6 17       	cp	r26, r22
     33a:	a6 17       	cp	r26, r22
     33c:	a6 17       	cp	r26, r22
     33e:	a6 17       	cp	r26, r22
     340:	a6 17       	cp	r26, r22
     342:	a6 17       	cp	r26, r22
     344:	a4 17       	cp	r26, r20
     346:	a4 17       	cp	r26, r20
     348:	a4 17       	cp	r26, r20
     34a:	a4 17       	cp	r26, r20
     34c:	a4 17       	cp	r26, r20
     34e:	a4 17       	cp	r26, r20
     350:	a4 17       	cp	r26, r20
     352:	a4 17       	cp	r26, r20
     354:	a4 17       	cp	r26, r20
     356:	a4 17       	cp	r26, r20
     358:	a4 17       	cp	r26, r20
     35a:	a4 17       	cp	r26, r20
     35c:	a4 17       	cp	r26, r20
     35e:	a4 17       	cp	r26, r20
     360:	a4 17       	cp	r26, r20
     362:	a4 17       	cp	r26, r20
     364:	a4 17       	cp	r26, r20
     366:	a4 17       	cp	r26, r20
     368:	a4 17       	cp	r26, r20
     36a:	a4 17       	cp	r26, r20
     36c:	a4 17       	cp	r26, r20
     36e:	a4 17       	cp	r26, r20
     370:	a4 17       	cp	r26, r20
     372:	a4 17       	cp	r26, r20
     374:	a4 17       	cp	r26, r20
     376:	a4 17       	cp	r26, r20
     378:	a4 17       	cp	r26, r20
     37a:	a4 17       	cp	r26, r20
     37c:	a4 17       	cp	r26, r20
     37e:	a4 17       	cp	r26, r20
     380:	a2 17       	cp	r26, r18
     382:	a2 17       	cp	r26, r18
     384:	a2 17       	cp	r26, r18
     386:	a2 17       	cp	r26, r18
     388:	a2 17       	cp	r26, r18
     38a:	a0 17       	cp	r26, r16
     38c:	a0 17       	cp	r26, r16
     38e:	a0 17       	cp	r26, r16
     390:	a0 17       	cp	r26, r16
     392:	a0 17       	cp	r26, r16
     394:	9e 17       	cp	r25, r30
     396:	9e 17       	cp	r25, r30
     398:	9e 17       	cp	r25, r30
     39a:	9e 17       	cp	r25, r30
     39c:	9e 17       	cp	r25, r30
     39e:	9c 17       	cp	r25, r28
     3a0:	9c 17       	cp	r25, r28
     3a2:	9c 17       	cp	r25, r28
     3a4:	9c 17       	cp	r25, r28
     3a6:	9c 17       	cp	r25, r28
     3a8:	b6 17       	cp	r27, r22
     3aa:	b6 17       	cp	r27, r22
     3ac:	b6 17       	cp	r27, r22
     3ae:	b6 17       	cp	r27, r22
     3b0:	b6 17       	cp	r27, r22
     3b2:	b6 17       	cp	r27, r22
     3b4:	15 24       	eor	r1, r5
     3b6:	18 24       	eor	r1, r8
     3b8:	1b 24       	eor	r1, r11
     3ba:	1e 24       	eor	r1, r14
     3bc:	21 24       	eor	r2, r1
     3be:	24 24       	eor	r2, r4
     3c0:	27 24       	eor	r2, r7

000003c2 <__trampolines_start>:
     3c2:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <_Z15ReadSharpSensorh>
     3c6:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <IO_ReadWrite+0xd0>
     3ca:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <udi_cdc_getsetting>
     3ce:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <_Z13MoveTurntablebji>
     3d2:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <_Z9ToggleLEDv>
     3d6:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <IO_ReadWrite+0x5a>
     3da:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <_Z12IO_ReadWritebh+0x1e>
     3de:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <HomeSorterArm>
     3e2:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <_Z9isSmallerii>
     3e6:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <_Z13requestResultv>
     3ea:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <_Z12IO_ReadWritebh+0x78>
     3ee:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <udi_cdc_data_sent>
     3f2:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <_Z15ReadSharpSensorh+0x46>
     3f6:	0c 94 12 12 	jmp	0x2424	; 0x2424 <MoveSorterArmTo>
     3fa:	0c 94 9c 17 	jmp	0x2f38	; 0x2f38 <_Z15ReadSharpSensorh+0x22>
     3fe:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <udi_cdc_data_received>
     402:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_Z12IO_ReadWritebh+0xec>
     406:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <_Z12IO_ReadWritebh+0x142>
     40a:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <_Z15ReadSharpSensorh+0x3e>
     40e:	0c 94 18 24 	jmp	0x4830	; 0x4830 <udd_ep_get_size+0x28>
     412:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_Z7isEqualii>
     416:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <_Z9set_relaybh>
     41a:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <_Z12IO_ReadWritebh+0x124>
     41e:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <_Z13StopTurntablej>
     422:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <_Z15ReadSharpSensorh+0x4a>
     426:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <_Z15ReadSharpSensorh+0x2a>
     42a:	0c 94 5e 1f 	jmp	0x3ebc	; 0x3ebc <udc_valid_address>
     42e:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <_Z15ReadSharpSensorh+0x52>
     432:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <_Z12IO_ReadWritebh+0xd0>
     436:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_Z8multiplyii>
     43a:	0c 94 85 03 	jmp	0x70a	; 0x70a <_Z3addii>
     43e:	0c 94 64 1b 	jmp	0x36c8	; 0x36c8 <udi_cdc_data_sof_notify>
     442:	0c 94 c7 14 	jmp	0x298e	; 0x298e <_Z13PulseSolenoidh>
     446:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <MoveSorterArmDistance>
     44a:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <_Z3LEDb>
     44e:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_Z11printNumberj>
     452:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <_Z15ReadSharpSensorh+0x26>
     456:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <_Z15ReadSharpSensorh+0x2e>
     45a:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <_Z11DigitalReadi>
     45e:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <_Z15ReadSharpSensorh+0x4e>
     462:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <IO_ReadWrite+0xec>
     466:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <udi_cdc_comm_disable>
     46a:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <IO_ReadWrite+0x1e>
     46e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <_Z10SetAddresshh>
     472:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <IO_ReadWrite+0x124>
     476:	0c 94 05 13 	jmp	0x260a	; 0x260a <_Z8MoveBeltbji>
     47a:	0c 94 4b 1a 	jmp	0x3496	; 0x3496 <udi_cdc_data_setup>
     47e:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <ElevatorIsReady>
     482:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <_Z12IO_ReadWritebh+0x106>
     486:	0c 94 21 24 	jmp	0x4842	; 0x4842 <udd_ep_get_size+0x3a>
     48a:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <_Z12IO_ReadWritebh+0x160>
     48e:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <IO_ReadWrite+0x3c>
     492:	0c 94 81 03 	jmp	0x702	; 0x702 <_Z6invertj>
     496:	0c 94 24 24 	jmp	0x4848	; 0x4848 <udd_ep_get_size+0x40>
     49a:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <IO_ReadWrite+0x78>
     49e:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <_Z15passthrough_TWIv>
     4a2:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <_Z12IO_ReadWritebh+0xb2>
     4a6:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <_Z14requestStartedv>
     4aa:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <_Z15ReadSharpSensorh+0x36>
     4ae:	0c 94 2e 10 	jmp	0x205c	; 0x205c <SorterarmIsFinnished>
     4b2:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_Z8isBiggerii>
     4b6:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <IO_ReadWrite+0x106>
     4ba:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <_Z12IO_ReadWritebh+0x5a>
     4be:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <_Z15ReadSharpSensorh+0x42>
     4c2:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_Z9delay1secv>
     4c6:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <udi_cdc_line_coding_received>
     4ca:	0c 94 94 16 	jmp	0x2d28	; 0x2d28 <_Z12IO_ReadWritebh+0x94>
     4ce:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <IO_ReadWrite+0x160>
     4d2:	0c 94 4f 1a 	jmp	0x349e	; 0x349e <udi_cdc_comm_setup>
     4d6:	0c 94 0b 04 	jmp	0x816	; 0x816 <_Z9logic_andbb>
     4da:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <IO_ReadWrite+0x142>
     4de:	0c 94 5f 13 	jmp	0x26be	; 0x26be <_Z8StopBeltj>
     4e2:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <_Z15OptocouplerReadi>
     4e6:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <_Z13DemoTestBlockv>
     4ea:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <_Z10AnalogReadi>
     4ee:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_Z9logic_xorbb>
     4f2:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <udi_cdc_data_disable>
     4f6:	0c 94 1e 24 	jmp	0x483c	; 0x483c <udd_ep_get_size+0x34>
     4fa:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <_Z15ReadSharpSensorh+0x3a>
     4fe:	0c 94 28 14 	jmp	0x2850	; 0x2850 <_Z17StopDemoTestBlockv>
     502:	0c 94 bb 1b 	jmp	0x3776	; 0x3776 <udi_cdc_serial_state_msg_sent>
     506:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_Z8subtractii>
     50a:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_Z8delay_msj>
     50e:	0c 94 30 10 	jmp	0x2060	; 0x2060 <StopSorterArm>
     512:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <MoveElevator>
     516:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <IO_ReadWrite+0x94>
     51a:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <udd_ep_get_size+0x2e>
     51e:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <IO_ReadWrite+0xb2>
     522:	0c 94 ed 0e 	jmp	0x1dda	; 0x1dda <ReadColourSensor>
     526:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_Z15isBiggerOrEqualii>
     52a:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <_Z15ReadSharpSensorh+0x32>
     52e:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_Z8Solenoidhb>
     532:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <SelectColour>
     536:	0c 94 68 16 	jmp	0x2cd0	; 0x2cd0 <_Z12IO_ReadWritebh+0x3c>
     53a:	0c 94 05 04 	jmp	0x80a	; 0x80a <_Z8logic_orbb>
     53e:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <_Z15ReadSharpSensorh+0x56>
     542:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <udi_cdc_data_enable>
     546:	0c 94 15 24 	jmp	0x482a	; 0x482a <udd_ep_get_size+0x22>
     54a:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <_Z6divideii>
     54e:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <StopElevator>
     552:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <udi_cdc_comm_enable>
     556:	0c 94 27 24 	jmp	0x484e	; 0x484e <udd_ep_get_size+0x46>
     55a:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_Z16isSmallerOrEqualii>

0000055e <__ctors_end>:
     55e:	11 24       	eor	r1, r1
     560:	1f be       	out	0x3f, r1	; 63
     562:	cf ef       	ldi	r28, 0xFF	; 255
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df e3       	ldi	r29, 0x3F	; 63
     568:	de bf       	out	0x3e, r29	; 62
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	0c bf       	out	0x3c, r16	; 60
     56e:	18 be       	out	0x38, r1	; 56
     570:	19 be       	out	0x39, r1	; 57
     572:	1a be       	out	0x3a, r1	; 58
     574:	1b be       	out	0x3b, r1	; 59

00000576 <__do_copy_data>:
     576:	13 e2       	ldi	r17, 0x23	; 35
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e2       	ldi	r27, 0x20	; 32
     57c:	ee e4       	ldi	r30, 0x4E	; 78
     57e:	f2 e6       	ldi	r31, 0x62	; 98
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	0b bf       	out	0x3b, r16	; 59
     584:	02 c0       	rjmp	.+4      	; 0x58a <__do_copy_data+0x14>
     586:	07 90       	elpm	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	ac 33       	cpi	r26, 0x3C	; 60
     58c:	b1 07       	cpc	r27, r17
     58e:	d9 f7       	brne	.-10     	; 0x586 <__do_copy_data+0x10>
     590:	1b be       	out	0x3b, r1	; 59

00000592 <__do_clear_bss>:
     592:	25 e2       	ldi	r18, 0x25	; 37
     594:	ac e3       	ldi	r26, 0x3C	; 60
     596:	b3 e2       	ldi	r27, 0x23	; 35
     598:	01 c0       	rjmp	.+2      	; 0x59c <.do_clear_bss_start>

0000059a <.do_clear_bss_loop>:
     59a:	1d 92       	st	X+, r1

0000059c <.do_clear_bss_start>:
     59c:	a7 3e       	cpi	r26, 0xE7	; 231
     59e:	b2 07       	cpc	r27, r18
     5a0:	e1 f7       	brne	.-8      	; 0x59a <.do_clear_bss_loop>
     5a2:	0e 94 21 19 	call	0x3242	; 0x3242 <main>
     5a6:	0c 94 25 31 	jmp	0x624a	; 0x624a <_exit>

000005aa <__bad_interrupt>:
     5aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ae <SP_ReadByte>:

.section .text
.global SP_ReadByte

SP_ReadByte:
	in	r19, RAMPZ      ; Save RAMPZ.
     5ae:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     5b0:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     5b2:	fb 01       	movw	r30, r22
	elpm	r24, Z          ; Extended load byte from address pointed to by Z.
     5b4:	86 91       	elpm	r24, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     5b6:	3b bf       	out	0x3b, r19	; 59
	ret
     5b8:	08 95       	ret

000005ba <SP_ReadWord>:

.section .text
.global SP_ReadWord

SP_ReadWord:
	in	r19, RAMPZ      ; Save RAMPZ.
     5ba:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     5bc:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     5be:	fb 01       	movw	r30, r22
	elpm	r24, Z+         ; Extended load byte from address pointed to by Z.
     5c0:	87 91       	elpm	r24, Z+
	elpm	r25, Z          ; Extended load byte from address pointed to by Z.
     5c2:	96 91       	elpm	r25, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     5c4:	3b bf       	out	0x3b, r19	; 59
	ret
     5c6:	08 95       	ret

000005c8 <SP_ReadCalibrationByte>:

.section .text
.global SP_ReadCalibrationByte	

SP_ReadCalibrationByte:
	ldi	r20, NVM_CMD_READ_CALIB_ROW_gc    ; Prepare NVM command in R20.
     5c8:	42 e0       	ldi	r20, 0x02	; 2
	rjmp	SP_CommonLPM                      ; Jump to common LPM code.
     5ca:	70 c0       	rjmp	.+224    	; 0x6ac <SP_CommonLPM>

000005cc <SP_ReadUserSignatureByte>:

.section .text	
.global SP_ReadUserSignatureByte

SP_ReadUserSignatureByte:
	ldi	r20, NVM_CMD_READ_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     5cc:	41 e0       	ldi	r20, 0x01	; 1
	rjmp	SP_CommonLPM                       ; Jump to common LPM code.
     5ce:	6e c0       	rjmp	.+220    	; 0x6ac <SP_CommonLPM>

000005d0 <SP_ReadFuseByte>:

.section .text	
.global SP_ReadFuseByte

SP_ReadFuseByte:
	sts	NVM_ADDR0, r24              ; Load fuse byte index into NVM Address Register 0.
     5d0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
	clr	r24                         ; Prepare a zero.
     5d4:	88 27       	eor	r24, r24
	sts	NVM_ADDR1, r24              ; Load zero into NVM Address Register 1.
     5d6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
	sts	NVM_ADDR2, r24              ; Load zero into NVM Address Register 2.
     5da:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
	ldi	r20, NVM_CMD_READ_FUSES_gc  ; Prepare NVM command in R20.
     5de:	47 e0       	ldi	r20, 0x07	; 7
	rcall	SP_CommonCMD                ; Jump to common NVM Action code.
     5e0:	55 d0       	rcall	.+170    	; 0x68c <SP_CommonCMD>
	movw	r24, r22                    ; Move low byte to 1 byte return address.
     5e2:	cb 01       	movw	r24, r22
	ret
     5e4:	08 95       	ret

000005e6 <SP_WriteLockBits>:

.section .text	
.global SP_WriteLockBits

SP_WriteLockBits:
	sts	NVM_DATA0, r24                  ; Load lock bits into NVM Data Register 0.
     5e6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	ldi	r20, NVM_CMD_WRITE_LOCK_BITS_gc ; Prepare NVM command in R20.
     5ea:	48 e0       	ldi	r20, 0x08	; 8
	rjmp	SP_CommonCMD                    ; Jump to common NVM Action code.
     5ec:	4f c0       	rjmp	.+158    	; 0x68c <SP_CommonCMD>

000005ee <SP_ReadLockBits>:

.section .text		
.global SP_ReadLockBits

SP_ReadLockBits:
	lds	r24, NVM_LOCKBITS       ; Read IO-mapped lock bits.
     5ee:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
	ret
     5f2:	08 95       	ret

000005f4 <SP_EraseUserSignatureRow>:

.section .text
.global SP_EraseUserSignatureRow

SP_EraseUserSignatureRow:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     5f4:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_USER_SIG_ROW_gc ; Prepare NVM command in R20.
     5f6:	48 e1       	ldi	r20, 0x18	; 24
	jmp 	SP_CommonSPM                       ; Jump to common SPM code.
     5f8:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005fc <SP_WriteUserSignatureRow>:

.section .text
.global SP_WriteUserSignatureRow

SP_WriteUserSignatureRow:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     5fc:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_WRITE_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     5fe:	4a e1       	ldi	r20, 0x1A	; 26
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     600:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000604 <SP_EraseApplicationSection>:

.section .text
.global SP_EraseApplicationSection

SP_EraseApplicationSection:
	in	r19, RAMPZ                 ; Save RAMPZ, which is restored in SP_CommonSPM.
     604:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_APP_gc  ; Prepare NVM command in R20.
     606:	40 e2       	ldi	r20, 0x20	; 32
	jmp	SP_CommonSPM               ; Jump to common SPM code.
     608:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000060c <SP_EraseApplicationPage>:

.section .text	
.global SP_EraseApplicationPage

SP_EraseApplicationPage:
	in	r19, RAMPZ                      ; Save RAMPZ, which is restored in SP_CommonSPM.
     60c:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                      ; Load RAMPZ with the MSB of the address.
     60e:	8b bf       	out	0x3b, r24	; 59
	movw    r24, r22                        ; Move low bytes for ZH:ZL to R25:R24
     610:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_APP_PAGE_gc  ; Prepare NVM command in R20.
     612:	42 e2       	ldi	r20, 0x22	; 34
	jmp	SP_CommonSPM                    ; Jump to common SPM code.
     614:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000618 <SP_LoadFlashWord>:

.section .text
.global SP_LoadFlashWord

SP_LoadFlashWord:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     618:	3b b7       	in	r19, 0x3b	; 59
	movw	r0, r22                            ; Prepare flash word in R1:R0.
     61a:	0b 01       	movw	r0, r22
	ldi	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
     61c:	43 e2       	ldi	r20, 0x23	; 35
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
     61e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000622 <SP_WriteApplicationPage>:

.section .text		
.global SP_WriteApplicationPage

SP_WriteApplicationPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     622:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     624:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     626:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_APP_PAGE_gc   ; Prepare NVM command in R20.
     628:	44 e2       	ldi	r20, 0x24	; 36
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     62a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000062e <SP_EraseWriteApplicationPage>:

.section .text
.global SP_EraseWriteApplicationPage

SP_EraseWriteApplicationPage:
	in	r19, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
     62e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                            ; Load RAMPZ with the MSB of the address.
     630:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                              ; Move low bytes of address to ZH:ZL from R23:R22
     632:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
     634:	45 e2       	ldi	r20, 0x25	; 37
	jmp	SP_CommonSPM                          ; Jump to common SPM code.
     636:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000063a <SP_EraseFlashBuffer>:

.section .text		
.global SP_EraseFlashBuffer

SP_EraseFlashBuffer:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     63a:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
     63c:	46 e2       	ldi	r20, 0x26	; 38
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     63e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000642 <SP_EraseBootPage>:

.section .text		
.global SP_EraseBootPage

SP_EraseBootPage:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     642:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                         ; Load RAMPZ with the MSB of the address.
     644:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                           ; Move low bytes of address to ZH:ZL from R23:R22
     646:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_BOOT_PAGE_gc    ; Prepare NVM command in R20.
     648:	4a e2       	ldi	r20, 0x2A	; 42
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
     64a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000064e <SP_WriteBootPage>:

.section .text		
.global SP_WriteBootPage

SP_WriteBootPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     64e:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     650:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     652:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     654:	4c e2       	ldi	r20, 0x2C	; 44
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     656:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000065a <SP_EraseWriteBootPage>:

.section .text		
.global SP_EraseWriteBootPage

SP_EraseWriteBootPage:
	in	r19, RAMPZ                             ; Save RAMPZ, which is restored in SP_CommonSPM.
     65a:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                             ; Load RAMPZ with the MSB of the address.
     65c:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                               ; Move low bytes of address to ZH:ZL from R23:R22
     65e:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     660:	4d e2       	ldi	r20, 0x2D	; 45
	jmp	SP_CommonSPM                           ; Jump to common SPM code.
     662:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000666 <SP_ApplicationCRC>:

.section .text	
.global SP_ApplicationCRC

SP_ApplicationCRC:
	ldi	r20, NVM_CMD_APP_CRC_gc    ; Prepare NVM command in R20.
     666:	48 e3       	ldi	r20, 0x38	; 56
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     668:	11 c0       	rjmp	.+34     	; 0x68c <SP_CommonCMD>

0000066a <SP_BootCRC>:

.section .text
.global SP_BootCRC

SP_BootCRC:
	ldi	r20, NVM_CMD_BOOT_CRC_gc   ; Prepare NVM command in R20.
     66a:	49 e3       	ldi	r20, 0x39	; 57
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     66c:	0f c0       	rjmp	.+30     	; 0x68c <SP_CommonCMD>

0000066e <SP_LockSPM>:

.section .text
.global SP_LockSPM

SP_LockSPM:
	ldi	r18, CCP_IOREG_gc     ; Prepare Protect IO-register signature in R18.
     66e:	28 ed       	ldi	r18, 0xD8	; 216
	sts	CCP, r18              ; Enable IO-register operation (this disables interrupts for 4 cycles).
     670:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	ldi	r18, NVM_SPMLOCK_bm   ; Prepare bitmask for locking SPM into R18.
     674:	21 e0       	ldi	r18, 0x01	; 1
	sts	NVM_CTRLB, r18        ; Load bitmask into NVM Control Register B, which locks SPM.
     676:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
	ret
     67a:	08 95       	ret

0000067c <SP_WaitForSPM>:

.section .text
.global SP_WaitForSPM		

SP_WaitForSPM:
	lds	r18, NVM_STATUS     ; Load the NVM Status register.
     67c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc	r18, NVM_NVMBUSY_bp ; Check if bit is cleared.
     680:	27 fd       	sbrc	r18, 7
	rjmp	SP_WaitForSPM       ; Repeat check if bit is not cleared.
     682:	fc cf       	rjmp	.-8      	; 0x67c <SP_WaitForSPM>
	clr	r18
     684:	22 27       	eor	r18, r18
	sts	NVM_CMD, r18        ; Clear up command register to NO_OPERATION.
     686:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ret
     68a:	08 95       	ret

0000068c <SP_CommonCMD>:
; ---

.section .text		

SP_CommonCMD:
	sts	NVM_CMD, r20        ; Load command into NVM Command register.
     68c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_IOREG_gc   ; Prepare Protect IO-register signature in R18.
     690:	28 ed       	ldi	r18, 0xD8	; 216
	ldi	r19, NVM_CMDEX_bm   ; Prepare bitmask for setting NVM Command Execute bit into R19.
     692:	31 e0       	ldi	r19, 0x01	; 1
	sts	CCP, r18            ; Enable IO-register operation (this disables interrupts for 4 cycles).
     694:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	sts	NVM_CTRLA, r19      ; Load bitmask into NVM Control Register A, which executes the command.
     698:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
	lds	r22, NVM_DATA0      ; Load NVM Data Register 0 into R22.
     69c:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	lds	r23, NVM_DATA1      ; Load NVM Data Register 1 into R23.
     6a0:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
	lds	r24, NVM_DATA2      ; Load NVM Data Register 2 into R24.
     6a4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
	clr	r25                 ; Clear R25 in order to return a clean 32-bit value.
     6a8:	99 27       	eor	r25, r25
	ret
     6aa:	08 95       	ret

000006ac <SP_CommonLPM>:
; ---

.section .text		

SP_CommonLPM:
	movw	ZL, r24             ; Load index into Z.
     6ac:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20        ; Load prepared command into NVM Command register.
     6ae:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm	r24,Z
     6b2:	84 91       	lpm	r24, Z
	ret
     6b4:	08 95       	ret

000006b6 <_Z9delay1secv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	8d e3       	ldi	r24, 0x3D	; 61
     6ba:	99 e4       	ldi	r25, 0x49	; 73
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	80 40       	sbci	r24, 0x00	; 0
     6c0:	90 40       	sbci	r25, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <_Z9delay1secv+0x6>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <_Z9delay1secv+0x10>
     6c6:	00 00       	nop
     6c8:	08 95       	ret

000006ca <_Z8delay_msj>:
}


void delay_ms(uint16_t ms)
{
	for(uint16_t i = 0; i < ms; i++)
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	69 f0       	breq	.+26     	; 0x6e8 <_Z8delay_msj+0x1e>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	ef e6       	ldi	r30, 0x6F	; 111
     6d4:	f7 e1       	ldi	r31, 0x17	; 23
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <_Z8delay_msj+0xc>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <_Z8delay_msj+0x12>
     6dc:	00 00       	nop
     6de:	2f 5f       	subi	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	28 17       	cp	r18, r24
     6e4:	39 07       	cpc	r19, r25
     6e6:	a9 f7       	brne	.-22     	; 0x6d2 <_Z8delay_msj+0x8>
     6e8:	08 95       	ret

000006ea <_Z11printNumberj>:



void printNumber(uint16_t num)
{
	USART_Transmit_Number(USARTD0, num);
     6ea:	bc 01       	movw	r22, r24
     6ec:	80 ea       	ldi	r24, 0xA0	; 160
     6ee:	99 e0       	ldi	r25, 0x09	; 9
     6f0:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z21USART_Transmit_NumberR12USART_structi>
	USART_TransmitString(USARTD0, "\n\r");
     6f4:	6a ed       	ldi	r22, 0xDA	; 218
     6f6:	72 e2       	ldi	r23, 0x22	; 34
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
     6fc:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
     700:	08 95       	ret

00000702 <_Z6invertj>:


uint16_t invert(uint16_t num)
{
	return -num;
}
     702:	91 95       	neg	r25
     704:	81 95       	neg	r24
     706:	91 09       	sbc	r25, r1
     708:	08 95       	ret

0000070a <_Z3addii>:



int16_t add(int16_t A, int16_t B)
{
	long res = (long)A + B;
     70a:	09 2e       	mov	r0, r25
     70c:	00 0c       	add	r0, r0
     70e:	aa 0b       	sbc	r26, r26
     710:	bb 0b       	sbc	r27, r27
     712:	ab 01       	movw	r20, r22
     714:	77 0f       	add	r23, r23
     716:	66 0b       	sbc	r22, r22
     718:	77 0b       	sbc	r23, r23
     71a:	84 0f       	add	r24, r20
     71c:	95 1f       	adc	r25, r21
     71e:	a6 1f       	adc	r26, r22
     720:	b7 1f       	adc	r27, r23

	if(res > 32767)
     722:	81 15       	cp	r24, r1
     724:	20 e8       	ldi	r18, 0x80	; 128
     726:	92 07       	cpc	r25, r18
     728:	a1 05       	cpc	r26, r1
     72a:	b1 05       	cpc	r27, r1
     72c:	44 f4       	brge	.+16     	; 0x73e <_Z3addii+0x34>
	return 32767;
	if(res < -32768)
     72e:	81 15       	cp	r24, r1
     730:	20 e8       	ldi	r18, 0x80	; 128
     732:	92 07       	cpc	r25, r18
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	a2 07       	cpc	r26, r18
     738:	b2 07       	cpc	r27, r18
     73a:	24 f0       	brlt	.+8      	; 0x744 <_Z3addii+0x3a>
	return -32767;

	return (int16_t)res;
     73c:	08 95       	ret
int16_t add(int16_t A, int16_t B)
{
	long res = (long)A + B;

	if(res > 32767)
	return 32767;
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	9f e7       	ldi	r25, 0x7F	; 127
     742:	08 95       	ret
	if(res < -32768)
	return -32767;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     748:	08 95       	ret

0000074a <_Z8subtractii>:


int16_t subtract(int16_t A, int16_t B)
{
	long res = (long)A - B;
     74a:	09 2e       	mov	r0, r25
     74c:	00 0c       	add	r0, r0
     74e:	aa 0b       	sbc	r26, r26
     750:	bb 0b       	sbc	r27, r27
     752:	ab 01       	movw	r20, r22
     754:	77 0f       	add	r23, r23
     756:	66 0b       	sbc	r22, r22
     758:	77 0b       	sbc	r23, r23
     75a:	84 1b       	sub	r24, r20
     75c:	95 0b       	sbc	r25, r21
     75e:	a6 0b       	sbc	r26, r22
     760:	b7 0b       	sbc	r27, r23

	if(res > 32767)
     762:	81 15       	cp	r24, r1
     764:	20 e8       	ldi	r18, 0x80	; 128
     766:	92 07       	cpc	r25, r18
     768:	a1 05       	cpc	r26, r1
     76a:	b1 05       	cpc	r27, r1
     76c:	44 f4       	brge	.+16     	; 0x77e <_Z8subtractii+0x34>
	return 32767;
	if(res < -32768)
     76e:	81 15       	cp	r24, r1
     770:	20 e8       	ldi	r18, 0x80	; 128
     772:	92 07       	cpc	r25, r18
     774:	2f ef       	ldi	r18, 0xFF	; 255
     776:	a2 07       	cpc	r26, r18
     778:	b2 07       	cpc	r27, r18
     77a:	24 f0       	brlt	.+8      	; 0x784 <_Z8subtractii+0x3a>
	return -32767;

	return (int16_t)res;
     77c:	08 95       	ret
int16_t subtract(int16_t A, int16_t B)
{
	long res = (long)A - B;

	if(res > 32767)
	return 32767;
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	9f e7       	ldi	r25, 0x7F	; 127
     782:	08 95       	ret
	if(res < -32768)
	return -32767;
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     788:	08 95       	ret

0000078a <_Z8multiplyii>:


int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;
     78a:	9c 01       	movw	r18, r24
     78c:	db 01       	movw	r26, r22
     78e:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <__mulhisi3>

	if(res > 32767)
     792:	61 15       	cp	r22, r1
     794:	20 e8       	ldi	r18, 0x80	; 128
     796:	72 07       	cpc	r23, r18
     798:	81 05       	cpc	r24, r1
     79a:	91 05       	cpc	r25, r1
     79c:	4c f4       	brge	.+18     	; 0x7b0 <_Z8multiplyii+0x26>
	return 32767;
	if(res < -32768)
     79e:	61 15       	cp	r22, r1
     7a0:	20 e8       	ldi	r18, 0x80	; 128
     7a2:	72 07       	cpc	r23, r18
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	82 07       	cpc	r24, r18
     7a8:	92 07       	cpc	r25, r18
     7aa:	2c f0       	brlt	.+10     	; 0x7b6 <_Z8multiplyii+0x2c>
	return -32767;

	return (int16_t)res;
     7ac:	cb 01       	movw	r24, r22
     7ae:	08 95       	ret
int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;

	if(res > 32767)
	return 32767;
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	9f e7       	ldi	r25, 0x7F	; 127
     7b4:	08 95       	ret
	if(res < -32768)
	return -32767;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     7ba:	08 95       	ret

000007bc <_Z6divideii>:


int16_t divide(int16_t A, int16_t B)
{
	return A / B;
     7bc:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
     7c0:	cb 01       	movw	r24, r22
}
     7c2:	08 95       	ret

000007c4 <_Z7isEqualii>:


bool isEqual(int16_t A, int16_t B)			{return A == B; }
     7c4:	21 e0       	ldi	r18, 0x01	; 1
     7c6:	86 17       	cp	r24, r22
     7c8:	97 07       	cpc	r25, r23
     7ca:	09 f0       	breq	.+2      	; 0x7ce <_Z7isEqualii+0xa>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	82 2f       	mov	r24, r18
     7d0:	08 95       	ret

000007d2 <_Z8isBiggerii>:
bool isBigger(int16_t A, int16_t B)			{return A > B;	}
     7d2:	21 e0       	ldi	r18, 0x01	; 1
     7d4:	68 17       	cp	r22, r24
     7d6:	79 07       	cpc	r23, r25
     7d8:	0c f0       	brlt	.+2      	; 0x7dc <_Z8isBiggerii+0xa>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	82 2f       	mov	r24, r18
     7de:	08 95       	ret

000007e0 <_Z9isSmallerii>:
bool isSmaller(int16_t A, int16_t B)		{return A < B;	}
     7e0:	21 e0       	ldi	r18, 0x01	; 1
     7e2:	86 17       	cp	r24, r22
     7e4:	97 07       	cpc	r25, r23
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <_Z9isSmallerii+0xa>
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	82 2f       	mov	r24, r18
     7ec:	08 95       	ret

000007ee <_Z15isBiggerOrEqualii>:
bool isBiggerOrEqual(int16_t A, int16_t B)	{return A >= B;	}
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	86 17       	cp	r24, r22
     7f2:	97 07       	cpc	r25, r23
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <_Z15isBiggerOrEqualii+0xa>
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	82 2f       	mov	r24, r18
     7fa:	08 95       	ret

000007fc <_Z16isSmallerOrEqualii>:
bool isSmallerOrEqual(int16_t A, int16_t B)	{return A <= B; }
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	68 17       	cp	r22, r24
     800:	79 07       	cpc	r23, r25
     802:	0c f4       	brge	.+2      	; 0x806 <_Z16isSmallerOrEqualii+0xa>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	82 2f       	mov	r24, r18
     808:	08 95       	ret

0000080a <_Z8logic_orbb>:

bool logic_or(bool A, bool B)	{return A || B; }
     80a:	81 11       	cpse	r24, r1
     80c:	02 c0       	rjmp	.+4      	; 0x812 <_Z8logic_orbb+0x8>
     80e:	86 2f       	mov	r24, r22
     810:	08 95       	ret
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	08 95       	ret

00000816 <_Z9logic_andbb>:
bool logic_and(bool A, bool B)	{return A && B; }
     816:	81 11       	cpse	r24, r1
     818:	86 2f       	mov	r24, r22
     81a:	08 95       	ret

0000081c <_Z9logic_xorbb>:
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	86 13       	cpse	r24, r22
     820:	01 c0       	rjmp	.+2      	; 0x824 <_Z9logic_xorbb+0x8>
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	89 2f       	mov	r24, r25
     826:	08 95       	ret

00000828 <_Z11hexToNibblec>:
	return (hexToNibble(h) << 4) | hexToNibble(l);
}

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
     828:	90 ed       	ldi	r25, 0xD0	; 208
     82a:	98 0f       	add	r25, r24
     82c:	9a 30       	cpi	r25, 0x0A	; 10
     82e:	60 f0       	brcs	.+24     	; 0x848 <_Z11hexToNibblec+0x20>
	{
		return hex-'0';
	}
	else if(hex >= 'A' && hex <= 'F')
     830:	9f eb       	ldi	r25, 0xBF	; 191
     832:	98 0f       	add	r25, r24
     834:	96 30       	cpi	r25, 0x06	; 6
     836:	10 f4       	brcc	.+4      	; 0x83c <_Z11hexToNibblec+0x14>
	{
		return hex-'A'+10;
     838:	87 53       	subi	r24, 0x37	; 55
     83a:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
     83c:	9f e9       	ldi	r25, 0x9F	; 159
     83e:	98 0f       	add	r25, r24
     840:	96 30       	cpi	r25, 0x06	; 6
     842:	20 f4       	brcc	.+8      	; 0x84c <_Z11hexToNibblec+0x24>
	{
		return hex-'a'+10;
     844:	87 55       	subi	r24, 0x57	; 87
     846:	08 95       	ret

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
	{
		return hex-'0';
     848:	89 2f       	mov	r24, r25
     84a:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
	{
		return hex-'a'+10;
	}
	return 0xff;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
}
     84e:	08 95       	ret

00000850 <_Z9hexToBytecc>:
 */ 

#include "Convert.h"

uint8_t hexToByte(char h, char l)
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	d6 2f       	mov	r29, r22
	return (hexToNibble(h) << 4) | hexToNibble(l);
     856:	0e 94 14 04 	call	0x828	; 0x828 <_Z11hexToNibblec>
     85a:	c8 2f       	mov	r28, r24
     85c:	8d 2f       	mov	r24, r29
     85e:	0e 94 14 04 	call	0x828	; 0x828 <_Z11hexToNibblec>
     862:	90 e1       	ldi	r25, 0x10	; 16
     864:	c9 9f       	mul	r28, r25
     866:	90 01       	movw	r18, r0
     868:	11 24       	eor	r1, r1
}
     86a:	82 2b       	or	r24, r18
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <_Z11resetDevicev>:
 #include "Programming.h"

void resetDevice()
{
	//disable interrupts
	asm("cli");
     872:	f8 94       	cli
	// enable watchdog timer
	CCP = 0xD8;
     874:	88 ed       	ldi	r24, 0xD8	; 216
     876:	84 bf       	out	0x34, r24	; 52
	WDT.CTRL = (1<< WDT_ENABLE_bp)| (1<<WDT_CEN_bp);
     878:	83 e0       	ldi	r24, 0x03	; 3
     87a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 *  Author: Nick
 */

 #include "Programming.h"

void resetDevice()
     87e:	ff cf       	rjmp	.-2      	; 0x87e <_Z11resetDevicev+0xc>

00000880 <_Z12programFlashhjhPh>:
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
}


void programFlash(uint8_t byteCount, uint16_t address, uint8_t recordType, uint8_t* data)
{
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	e8 2e       	mov	r14, r24
     88e:	eb 01       	movw	r28, r22
     890:	89 01       	movw	r16, r18
	static uint16_t previousAddress = 0xFFFF;
	static bool firstByte = true;

	if(recordType == EOF_RECORD)
     892:	41 30       	cpi	r20, 0x01	; 1
     894:	71 f5       	brne	.+92     	; 0x8f2 <_Z12programFlashhjhPh+0x72>
	{
		// if the first byte has already been sent
		if(!firstByte)
     896:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     89a:	81 11       	cpse	r24, r1
     89c:	28 c0       	rjmp	.+80     	; 0x8ee <_Z12programFlashhjhPh+0x6e>
		{
			// check if the address is within the blockly range
			if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     89e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     8a2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     8a6:	90 58       	subi	r25, 0x80	; 128
     8a8:	8f 3f       	cpi	r24, 0xFF	; 255
     8aa:	9f 47       	sbci	r25, 0x7F	; 127
     8ac:	b0 f0       	brcs	.+44     	; 0x8da <_Z12programFlashhjhPh+0x5a>
			{
				USART_TransmitString(USARTD0, "\n\rFlash address:");
     8ae:	6c eb       	ldi	r22, 0xBC	; 188
     8b0:	70 e2       	ldi	r23, 0x20	; 32
     8b2:	80 ea       	ldi	r24, 0xA0	; 160
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
				USART_Transmit_Number(USARTD0, previousAddress);
     8ba:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     8be:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     8c2:	80 ea       	ldi	r24, 0xA0	; 160
     8c4:	99 e0       	ldi	r25, 0x09	; 9
     8c6:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z21USART_Transmit_NumberR12USART_structi>
				USART_TransmitString(USARTD0, " out of range\n\rResetting");
     8ca:	6d ec       	ldi	r22, 0xCD	; 205
     8cc:	70 e2       	ldi	r23, 0x20	; 32
     8ce:	80 ea       	ldi	r24, 0xA0	; 160
     8d0:	99 e0       	ldi	r25, 0x09	; 9
     8d2:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
				
				//USB_TransmitString("\n\rFlash address:");
				//USB_Transmit_Number(previousAddress);
				//USB_TransmitString(" out of range\n\rResetting");
				resetDevice();
     8d6:	0e 94 39 04 	call	0x872	; 0x872 <_Z11resetDevicev>
			}
			
			SP_WaitForSPM();	//wait for nvm module if busy
     8da:	0e 94 3e 03 	call	0x67c	; 0x67c <SP_WaitForSPM>
			SP_EraseWriteApplicationPage(previousAddress); //program page to flash
     8de:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     8e2:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 17 03 	call	0x62e	; 0x62e <SP_EraseWriteApplicationPage>
		}
		// reset device
		resetDevice();
     8ee:	0e 94 39 04 	call	0x872	; 0x872 <_Z11resetDevicev>
	}
	else if(recordType == DATA_RECORD)
     8f2:	41 11       	cpse	r20, r1
     8f4:	56 c0       	rjmp	.+172    	; 0x9a2 <_Z12programFlashhjhPh+0x122>
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     8f6:	88 23       	and	r24, r24
     8f8:	09 f4       	brne	.+2      	; 0x8fc <_Z12programFlashhjhPh+0x7c>
     8fa:	53 c0       	rjmp	.+166    	; 0x9a2 <_Z12programFlashhjhPh+0x122>
     8fc:	f1 2c       	mov	r15, r1
		{
			// if address is in the another page than the last
			if(previousAddress/SPM_PAGESIZE != address/SPM_PAGESIZE)
     8fe:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     902:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     906:	a9 01       	movw	r20, r18
     908:	45 2f       	mov	r20, r21
     90a:	55 27       	eor	r21, r21
     90c:	46 95       	lsr	r20
     90e:	ce 01       	movw	r24, r28
     910:	89 2f       	mov	r24, r25
     912:	99 27       	eor	r25, r25
     914:	86 95       	lsr	r24
     916:	48 17       	cp	r20, r24
     918:	59 07       	cpc	r21, r25
     91a:	41 f1       	breq	.+80     	; 0x96c <_Z12programFlashhjhPh+0xec>
			{
				// if this isn't the first byte
				if(!firstByte)
     91c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     920:	81 11       	cpse	r24, r1
     922:	24 c0       	rjmp	.+72     	; 0x96c <_Z12programFlashhjhPh+0xec>
				{
					if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     924:	30 58       	subi	r19, 0x80	; 128
     926:	2f 3f       	cpi	r18, 0xFF	; 255
     928:	3f 47       	sbci	r19, 0x7F	; 127
     92a:	b0 f0       	brcs	.+44     	; 0x958 <_Z12programFlashhjhPh+0xd8>
					{
						USART_TransmitString(USARTD0, "\n\rFlash address:");
     92c:	6c eb       	ldi	r22, 0xBC	; 188
     92e:	70 e2       	ldi	r23, 0x20	; 32
     930:	80 ea       	ldi	r24, 0xA0	; 160
     932:	99 e0       	ldi	r25, 0x09	; 9
     934:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
						USART_Transmit_Number(USARTD0, previousAddress);
     938:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     93c:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     940:	80 ea       	ldi	r24, 0xA0	; 160
     942:	99 e0       	ldi	r25, 0x09	; 9
     944:	0e 94 ef 09 	call	0x13de	; 0x13de <_Z21USART_Transmit_NumberR12USART_structi>
						USART_TransmitString(USARTD0, " out of range\n\rResetting");
     948:	6d ec       	ldi	r22, 0xCD	; 205
     94a:	70 e2       	ldi	r23, 0x20	; 32
     94c:	80 ea       	ldi	r24, 0xA0	; 160
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
						
						//USB_TransmitString("\n\rFlash address:");
						//USB_Transmit_Number(previousAddress);
						//USB_TransmitString(" out of range\n\rResetting");
						
						resetDevice();
     954:	0e 94 39 04 	call	0x872	; 0x872 <_Z11resetDevicev>
					}
					
					SP_WaitForSPM();
     958:	0e 94 3e 03 	call	0x67c	; 0x67c <SP_WaitForSPM>
					SP_EraseWriteApplicationPage(previousAddress);
     95c:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     960:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 17 03 	call	0x62e	; 0x62e <SP_EraseWriteApplicationPage>
				}
			}
			
			//load byte into temporary page buffer
			SP_WaitForSPM();
     96c:	0e 94 3e 03 	call	0x67c	; 0x67c <SP_WaitForSPM>
			SP_LoadFlashWord(address%SPM_PAGESIZE, ((uint16_t)data[i+1] << 8 | data[i]));
     970:	f8 01       	movw	r30, r16
     972:	ef 0d       	add	r30, r15
     974:	f1 1d       	adc	r31, r1
     976:	61 81       	ldd	r22, Z+1	; 0x01
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	76 2f       	mov	r23, r22
     97c:	66 27       	eor	r22, r22
     97e:	80 81       	ld	r24, Z
     980:	68 2b       	or	r22, r24
     982:	ce 01       	movw	r24, r28
     984:	91 70       	andi	r25, 0x01	; 1
     986:	0e 94 0c 03 	call	0x618	; 0x618 <SP_LoadFlashWord>
				
			// track the programming state
			firstByte = false;
     98a:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
			previousAddress = address;
     98e:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     992:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <__data_start+0x1>
			address+=2;
     996:	22 96       	adiw	r28, 0x02	; 2
		resetDevice();
	}
	else if(recordType == DATA_RECORD)
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     998:	f3 94       	inc	r15
     99a:	f3 94       	inc	r15
     99c:	fe 14       	cp	r15, r14
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <_Z12programFlashhjhPh+0x122>
     9a0:	ae cf       	rjmp	.-164    	; 0x8fe <_Z12programFlashhjhPh+0x7e>
			previousAddress = address;
			address+=2;
		}
	}

     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	ff 90       	pop	r15
     9ac:	ef 90       	pop	r14
     9ae:	08 95       	ret

000009b0 <_Z14programHexLinePc>:
		programHexLine(buff);
	}
}

void programHexLine(char* line)
{
     9b0:	5f 92       	push	r5
     9b2:	6f 92       	push	r6
     9b4:	7f 92       	push	r7
     9b6:	8f 92       	push	r8
     9b8:	9f 92       	push	r9
     9ba:	af 92       	push	r10
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
     9d2:	60 97       	sbiw	r28, 0x10	; 16
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	5c 01       	movw	r10, r24
	cli();
     9da:	f8 94       	cli
	// parse the line
	uint8_t byteCount	= hexToByte(line[1], line[2]);
     9dc:	dc 01       	movw	r26, r24
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	6c 91       	ld	r22, X
     9e2:	12 97       	sbiw	r26, 0x02	; 2
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	8c 91       	ld	r24, X
     9e8:	0e 94 28 04 	call	0x850	; 0x850 <_Z9hexToBytecc>
     9ec:	78 2e       	mov	r7, r24
	uint8_t address_H	= hexToByte(line[3], line[4]);
     9ee:	f5 01       	movw	r30, r10
     9f0:	64 81       	ldd	r22, Z+4	; 0x04
     9f2:	83 81       	ldd	r24, Z+3	; 0x03
     9f4:	0e 94 28 04 	call	0x850	; 0x850 <_Z9hexToBytecc>
     9f8:	58 2e       	mov	r5, r24
	uint8_t address_L	= hexToByte(line[5], line[6]);
     9fa:	d5 01       	movw	r26, r10
     9fc:	16 96       	adiw	r26, 0x06	; 6
     9fe:	6c 91       	ld	r22, X
     a00:	16 97       	sbiw	r26, 0x06	; 6
     a02:	15 96       	adiw	r26, 0x05	; 5
     a04:	8c 91       	ld	r24, X
     a06:	0e 94 28 04 	call	0x850	; 0x850 <_Z9hexToBytecc>
     a0a:	e8 2e       	mov	r14, r24
	uint8_t recordType	= hexToByte(line[7], line[8]);
     a0c:	f5 01       	movw	r30, r10
     a0e:	60 85       	ldd	r22, Z+8	; 0x08
     a10:	87 81       	ldd	r24, Z+7	; 0x07
     a12:	0e 94 28 04 	call	0x850	; 0x850 <_Z9hexToBytecc>
     a16:	68 2e       	mov	r6, r24

	uint8_t checksum = byteCount + address_H + address_L + recordType;
     a18:	f5 2c       	mov	r15, r5
     a1a:	f7 0c       	add	r15, r7
     a1c:	fe 0c       	add	r15, r14
     a1e:	f8 0e       	add	r15, r24
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     a20:	77 20       	and	r7, r7
     a22:	09 f1       	breq	.+66     	; 0xa66 <_Z14programHexLinePc+0xb6>
     a24:	85 01       	movw	r16, r10
     a26:	06 5f       	subi	r16, 0xF6	; 246
     a28:	1f 4f       	sbci	r17, 0xFF	; 255
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	6c 01       	movw	r12, r24
     a30:	88 24       	eor	r8, r8
     a32:	8a 94       	dec	r8
     a34:	87 0c       	add	r8, r7
     a36:	91 2c       	mov	r9, r1
     a38:	96 e0       	ldi	r25, 0x06	; 6
     a3a:	89 0e       	add	r8, r25
     a3c:	91 1c       	adc	r9, r1
     a3e:	88 0c       	add	r8, r8
     a40:	99 1c       	adc	r9, r9
     a42:	8a 0c       	add	r8, r10
     a44:	9b 1c       	adc	r9, r11
     a46:	f8 01       	movw	r30, r16
     a48:	31 97       	sbiw	r30, 0x01	; 1
	{
		uint8_t charOffset = 9+2*i;
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
     a4a:	d8 01       	movw	r26, r16
     a4c:	6c 91       	ld	r22, X
     a4e:	80 81       	ld	r24, Z
     a50:	0e 94 28 04 	call	0x850	; 0x850 <_Z9hexToBytecc>
		checksum += byte;
     a54:	f8 0e       	add	r15, r24
		data[i] = byte;
     a56:	f6 01       	movw	r30, r12
     a58:	81 93       	st	Z+, r24
     a5a:	6f 01       	movw	r12, r30
     a5c:	0e 5f       	subi	r16, 0xFE	; 254
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t checksum = byteCount + address_H + address_L + recordType;
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     a60:	08 15       	cp	r16, r8
     a62:	19 05       	cpc	r17, r9
     a64:	81 f7       	brne	.-32     	; 0xa46 <_Z14programHexLinePc+0x96>
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
		checksum += byte;
		data[i] = byte;
	}

	checksum += hexToByte(line[9+2*byteCount],line[10+2*byteCount]);
     a66:	e7 2d       	mov	r30, r7
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	35 96       	adiw	r30, 0x05	; 5
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ea 0d       	add	r30, r10
     a72:	fb 1d       	adc	r31, r11
     a74:	df 01       	movw	r26, r30
     a76:	11 97       	sbiw	r26, 0x01	; 1
     a78:	60 81       	ld	r22, Z
     a7a:	8c 91       	ld	r24, X
     a7c:	0e 94 28 04 	call	0x850	; 0x850 <_Z9hexToBytecc>
	
	if(checksum != 0)
     a80:	8f 0d       	add	r24, r15
     a82:	41 f0       	breq	.+16     	; 0xa94 <_Z14programHexLinePc+0xe4>
	{
		USART_TransmitString(USARTD0, "\n\rChecksum error while receiving program\n\rResetting");
     a84:	66 ee       	ldi	r22, 0xE6	; 230
     a86:	70 e2       	ldi	r23, 0x20	; 32
     a88:	80 ea       	ldi	r24, 0xA0	; 160
     a8a:	99 e0       	ldi	r25, 0x09	; 9
     a8c:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("\n\rChecksum error while receiving program\n\rResetting");
		resetDevice();
     a90:	0e 94 39 04 	call	0x872	; 0x872 <_Z11resetDevicev>
		return;
	}
	
	USART_TransmitString(USARTD0, "\r\nReceived: ");
     a94:	6a e1       	ldi	r22, 0x1A	; 26
     a96:	71 e2       	ldi	r23, 0x21	; 33
     a98:	80 ea       	ldi	r24, 0xA0	; 160
     a9a:	99 e0       	ldi	r25, 0x09	; 9
     a9c:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit(USARTD0, line, 11+2*byteCount);
     aa0:	47 2d       	mov	r20, r7
     aa2:	44 0f       	add	r20, r20
     aa4:	45 5f       	subi	r20, 0xF5	; 245
     aa6:	b5 01       	movw	r22, r10
     aa8:	80 ea       	ldi	r24, 0xA0	; 160
     aaa:	99 e0       	ldi	r25, 0x09	; 9
     aac:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z14USART_TransmitR12USART_structPKch>
	
	//USB_TransmitString("\r\nReceived: ");
	//USB_Transmit(line, 11+2*byteCount);
		
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
     ab0:	6e 2d       	mov	r22, r14
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	75 29       	or	r23, r5
     ab6:	9e 01       	movw	r18, r28
     ab8:	2f 5f       	subi	r18, 0xFF	; 255
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	46 2d       	mov	r20, r6
     abe:	87 2d       	mov	r24, r7
     ac0:	0e 94 40 04 	call	0x880	; 0x880 <_Z12programFlashhjhPh>
}
     ac4:	60 96       	adiw	r28, 0x10	; 16
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	5f 90       	pop	r5
     ae8:	08 95       	ret

00000aea <_Z17receiveHexFileUSBv>:
		break;
	}
}

void receiveHexFileUSB()
{
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	e2 97       	sbiw	r28, 0x32	; 50
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	6c 01       	movw	r12, r24
     afe:	7e 01       	movw	r14, r28
     b00:	93 e3       	ldi	r25, 0x33	; 51
     b02:	e9 0e       	add	r14, r25
     b04:	f1 1c       	adc	r15, r1
     b06:	ac 2c       	mov	r10, r12
     b08:	bd 2c       	mov	r11, r13
     b0a:	0a 2d       	mov	r16, r10
     b0c:	1b 2d       	mov	r17, r11
	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
		{
			char c = USART_Receive(USARTD0);
     b0e:	80 ea       	ldi	r24, 0xA0	; 160
     b10:	99 e0       	ldi	r25, 0x09	; 9
     b12:	0e 94 6f 09 	call	0x12de	; 0x12de <_Z13USART_ReceiveR12USART_struct>
     b16:	98 01       	movw	r18, r16
     b18:	2c 19       	sub	r18, r12
     b1a:	3d 09       	sbc	r19, r13
			buff[i] = c;
     b1c:	f8 01       	movw	r30, r16
     b1e:	81 93       	st	Z+, r24
     b20:	8f 01       	movw	r16, r30
			if(c == '\n')
     b22:	8a 30       	cpi	r24, 0x0A	; 10
     b24:	41 f4       	brne	.+16     	; 0xb36 <_Z17receiveHexFileUSBv+0x4c>
			{
				buff[i+1] = '\0';
     b26:	e2 e0       	ldi	r30, 0x02	; 2
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	ec 0f       	add	r30, r28
     b2c:	fd 1f       	adc	r31, r29
     b2e:	e2 0f       	add	r30, r18
     b30:	f3 1f       	adc	r31, r19
     b32:	10 82       	st	Z, r1
				break;
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <_Z17receiveHexFileUSBv+0x52>
	char buff[50];

	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
     b36:	ee 15       	cp	r30, r14
     b38:	ff 05       	cpc	r31, r15
     b3a:	49 f7       	brne	.-46     	; 0xb0e <_Z17receiveHexFileUSBv+0x24>
			{
				buff[i+1] = '\0';
				break;
			}
		}
		programHexLine(buff);
     b3c:	8a 2d       	mov	r24, r10
     b3e:	9b 2d       	mov	r25, r11
     b40:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z14programHexLinePc>
	}
     b44:	e2 cf       	rjmp	.-60     	; 0xb0a <_Z17receiveHexFileUSBv+0x20>

00000b46 <_Z10getUsbBootv>:
	// let the watchdog time out
	while(true);
}

void getUsbBoot()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	c0 e1       	ldi	r28, 0x10	; 16
     b50:	d7 e2       	ldi	r29, 0x27	; 39
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
	{
		if(USART_Available(USARTD0))
     b52:	80 ea       	ldi	r24, 0xA0	; 160
     b54:	99 e0       	ldi	r25, 0x09	; 9
     b56:	0e 94 91 09 	call	0x1322	; 0x1322 <_Z15USART_AvailableR12USART_struct>
     b5a:	81 11       	cpse	r24, r1
     b5c:	0c c0       	rjmp	.+24     	; 0xb76 <_Z10getUsbBootv+0x30>
		{
			timeout = false;
			break;
		}
		if(TWI_RecievedAddress(TWIC))
     b5e:	80 e8       	ldi	r24, 0x80	; 128
     b60:	94 e0       	ldi	r25, 0x04	; 4
     b62:	0e 94 78 07 	call	0xef0	; 0xef0 <_Z19TWI_RecievedAddressR10TWI_struct>
     b66:	81 11       	cpse	r24, r1
     b68:	22 c0       	rjmp	.+68     	; 0xbae <_Z10getUsbBootv+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b6a:	86 ef       	ldi	r24, 0xF6	; 246
     b6c:	8a 95       	dec	r24
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <_Z10getUsbBootv+0x26>
     b70:	21 97       	sbiw	r28, 0x01	; 1
void getUsbBoot()
{
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
     b72:	79 f7       	brne	.-34     	; 0xb52 <_Z10getUsbBootv+0xc>
     b74:	1c c0       	rjmp	.+56     	; 0xbae <_Z10getUsbBootv+0x68>
     b76:	c7 e2       	ldi	r28, 0x27	; 39
     b78:	d1 e2       	ldi	r29, 0x21	; 33
     b7a:	0b e2       	ldi	r16, 0x2B	; 43
     b7c:	11 e2       	ldi	r17, 0x21	; 33
	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
	{
		char c = USART_Receive(USARTD0);
     b7e:	80 ea       	ldi	r24, 0xA0	; 160
     b80:	99 e0       	ldi	r25, 0x09	; 9
     b82:	0e 94 6f 09 	call	0x12de	; 0x12de <_Z13USART_ReceiveR12USART_struct>
		//USART0_Transmit(c);
		if(c != check[i])
     b86:	99 91       	ld	r25, Y+
     b88:	98 13       	cpse	r25, r24
     b8a:	11 c0       	rjmp	.+34     	; 0xbae <_Z10getUsbBootv+0x68>
	}

	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
     b8c:	c0 17       	cp	r28, r16
     b8e:	d1 07       	cpc	r29, r17
     b90:	b1 f7       	brne	.-20     	; 0xb7e <_Z10getUsbBootv+0x38>
		if(c != check[i])
		return;
	}


	switch(USART_Receive(USARTD0))
     b92:	80 ea       	ldi	r24, 0xA0	; 160
     b94:	99 e0       	ldi	r25, 0x09	; 9
     b96:	0e 94 6f 09 	call	0x12de	; 0x12de <_Z13USART_ReceiveR12USART_struct>
     b9a:	85 35       	cpi	r24, 0x55	; 85
     b9c:	41 f4       	brne	.+16     	; 0xbae <_Z10getUsbBootv+0x68>
	{
		case 'U':
		// upload hex file via usb
		USART_TransmitString(USARTD0,"Receiving program via UART\n\r");
     b9e:	6c e2       	ldi	r22, 0x2C	; 44
     ba0:	71 e2       	ldi	r23, 0x21	; 33
     ba2:	80 ea       	ldi	r24, 0xA0	; 160
     ba4:	99 e0       	ldi	r25, 0x09	; 9
     ba6:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("Receiving program via UART\n\r");
		receiveHexFileUSB();
     baa:	0e 94 75 05 	call	0xaea	; 0xaea <_Z17receiveHexFileUSBv>
		break;
		default:
		break;
	}
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <_Z17receiveHexFileI2CPFvvE>:
		programHexLine(buff);
	}
}

void receiveHexFileI2C(void (*cb)())
{
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	e2 97       	sbiw	r28, 0x32	; 50
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	8c 01       	movw	r16, r24
	char buff[50];

	while(true)
	{
		USART_TransmitString(USARTD0, "\n\rtest4\n\r");
     bcc:	69 e4       	ldi	r22, 0x49	; 73
     bce:	71 e2       	ldi	r23, 0x21	; 33
     bd0:	80 ea       	ldi	r24, 0xA0	; 160
     bd2:	99 e0       	ldi	r25, 0x09	; 9
     bd4:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		// receive a line of the hex file
		TWI_ReceivePacket(TWIC,(uint8_t*)buff, 50);
     bd8:	42 e3       	ldi	r20, 0x32	; 50
     bda:	be 01       	movw	r22, r28
     bdc:	6f 5f       	subi	r22, 0xFF	; 255
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	80 e8       	ldi	r24, 0x80	; 128
     be2:	94 e0       	ldi	r25, 0x04	; 4
     be4:	0e 94 85 07 	call	0xf0a	; 0xf0a <_Z17TWI_ReceivePacketR10TWI_structPhh>
		
		if(buff[0] == 's') { cb(); } //voer callback uit: stepper-test modus
     be8:	99 81       	ldd	r25, Y+1	; 0x01
     bea:	93 37       	cpi	r25, 0x73	; 115
     bec:	11 f4       	brne	.+4      	; 0xbf2 <_Z17receiveHexFileI2CPFvvE+0x3a>
     bee:	f8 01       	movw	r30, r16
     bf0:	19 95       	eicall
			
		if(buff[0] != ':')
     bf2:	99 81       	ldd	r25, Y+1	; 0x01
     bf4:	9a 33       	cpi	r25, 0x3A	; 58
     bf6:	39 f0       	breq	.+14     	; 0xc06 <_Z17receiveHexFileI2CPFvvE+0x4e>
		{
			USART_TransmitString(USARTD0,"Error while receiving program");
     bf8:	63 e5       	ldi	r22, 0x53	; 83
     bfa:	71 e2       	ldi	r23, 0x21	; 33
     bfc:	80 ea       	ldi	r24, 0xA0	; 160
     bfe:	99 e0       	ldi	r25, 0x09	; 9
     c00:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <_Z17receiveHexFileI2CPFvvE+0x64>
			return;
		}
		USART_TransmitString(USARTD0,"test");
     c06:	61 e7       	ldi	r22, 0x71	; 113
     c08:	71 e2       	ldi	r23, 0x21	; 33
     c0a:	80 ea       	ldi	r24, 0xA0	; 160
     c0c:	99 e0       	ldi	r25, 0x09	; 9
     c0e:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		programHexLine(buff);
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <_Z14programHexLinePc>
	}
     c1a:	d8 cf       	rjmp	.-80     	; 0xbcc <_Z17receiveHexFileI2CPFvvE+0x14>
}
     c1c:	e2 96       	adiw	r28, 0x32	; 50
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <_Z8SPI_InitR10SPI_struct>:
#include <util/delay.h>

void SPI_Init(SPI_struct &SPI)
{
	//enable SPI, Set master mode, 8MHz default Clock
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER0_bm;
     c2c:	81 e5       	ldi	r24, 0x51	; 81
     c2e:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     c32:	08 95       	ret

00000c34 <_Z14SPI_TrancieverR10SPI_structh>:
}

uint8_t SPI_Tranciever(SPI_struct &SPI, uint8_t data)
{
     c34:	fc 01       	movw	r30, r24
	//load data into data buffer
	SPI.DATA = data;
     c36:	63 83       	std	Z+3, r22	; 0x03
	//wait for transmit complete
	while (!(SPI.STATUS & (1<<SPI_IF_bp)));
     c38:	92 81       	ldd	r25, Z+2	; 0x02
     c3a:	99 23       	and	r25, r25
     c3c:	ec f7       	brge	.-6      	; 0xc38 <_Z14SPI_TrancieverR10SPI_structh+0x4>
	
	//return received data
	return(SPI.DATA);		
     c3e:	83 81       	ldd	r24, Z+3	; 0x03
}
     c40:	08 95       	ret

00000c42 <_Z11SS_set_highR11PORT_structh>:

void SS_set_high(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTSET = (1<<pin);
     c42:	21 e0       	ldi	r18, 0x01	; 1
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <_Z11SS_set_highR11PORT_structh+0xa>
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	6a 95       	dec	r22
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <_Z11SS_set_highR11PORT_structh+0x6>
     c50:	fc 01       	movw	r30, r24
     c52:	25 83       	std	Z+5, r18	; 0x05
     c54:	fa e0       	ldi	r31, 0x0A	; 10
     c56:	fa 95       	dec	r31
     c58:	f1 f7       	brne	.-4      	; 0xc56 <_Z11SS_set_highR11PORT_structh+0x14>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <_Z11SS_set_highR11PORT_structh+0x1a>
     c5c:	08 95       	ret

00000c5e <_Z10SS_set_lowR11PORT_structh>:
	_delay_us(1);
}

void SS_set_low(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTCLR = (1<<pin);
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <_Z10SS_set_lowR11PORT_structh+0xa>
     c64:	22 0f       	add	r18, r18
     c66:	33 1f       	adc	r19, r19
     c68:	6a 95       	dec	r22
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <_Z10SS_set_lowR11PORT_structh+0x6>
     c6c:	fc 01       	movw	r30, r24
     c6e:	26 83       	std	Z+6, r18	; 0x06
     c70:	fa e0       	ldi	r31, 0x0A	; 10
     c72:	fa 95       	dec	r31
     c74:	f1 f7       	brne	.-4      	; 0xc72 <_Z10SS_set_lowR11PORT_structh+0x14>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <_Z10SS_set_lowR11PORT_structh+0x1a>
     c78:	08 95       	ret

00000c7a <_Z12SPI_CAN_ReadR10SPI_structhh>:
	_delay_us(1);
}

uint8_t SPI_CAN_Read(SPI_struct &SPI, uint8_t address, uint8_t read_cmd)
{
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
     c82:	16 2f       	mov	r17, r22
	SPI_Tranciever(SPI, read_cmd);
     c84:	64 2f       	mov	r22, r20
     c86:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     c8a:	61 2f       	mov	r22, r17
     c8c:	ce 01       	movw	r24, r28
     c8e:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z14SPI_TrancieverR10SPI_structh>
	uint8_t data = SPI_Tranciever(SPI, 0x00);
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z14SPI_TrancieverR10SPI_structh>
	return data;
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	08 95       	ret

00000ca2 <_Z13SPI_CAN_writeR10SPI_structhhh>:

void SPI_CAN_write(SPI_struct &SPI, uint8_t address, uint8_t data, uint8_t write_cmd)
{
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
     cac:	06 2f       	mov	r16, r22
     cae:	14 2f       	mov	r17, r20
	SPI_Tranciever(SPI, write_cmd);
     cb0:	62 2f       	mov	r22, r18
     cb2:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     cb6:	60 2f       	mov	r22, r16
     cb8:	ce 01       	movw	r24, r28
     cba:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, data);
     cbe:	61 2f       	mov	r22, r17
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 1a 06 	call	0xc34	; 0xc34 <_Z14SPI_TrancieverR10SPI_structh>
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>:
ISR(TWIF_TWIS_vect) { //slave
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
}


void TWI_HandleISR(void (*TxCallback)(), void (*RxCallback)(uint8_t), TWI_struct &TWI) {
     cd0:	fc 01       	movw	r30, r24
	if((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp))) { //read operation
     cd2:	da 01       	movw	r26, r20
     cd4:	1a 96       	adiw	r26, 0x0a	; 10
     cd6:	9c 91       	ld	r25, X
     cd8:	91 ff       	sbrs	r25, 1
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x14>
		if (!TxCallback) { return; } //callback is niet ingesteld
     cdc:	30 97       	sbiw	r30, 0x00	; 0
     cde:	49 f0       	breq	.+18     	; 0xcf2 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		TxCallback();
     ce0:	19 95       	eicall
     ce2:	08 95       	ret
	} else { //write operation
		if (!RxCallback) { return; } //callback is niet ingesteld
     ce4:	61 15       	cp	r22, r1
     ce6:	71 05       	cpc	r23, r1
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		RxCallback(TWI.SLAVE.DATA); //ongetest
     cea:	fa 01       	movw	r30, r20
     cec:	84 85       	ldd	r24, Z+12	; 0x0c
     cee:	fb 01       	movw	r30, r22
     cf0:	19 95       	eicall
     cf2:	08 95       	ret

00000cf4 <__vector_12>:
void (*TWIF_TxCallback)();
void (*TWIC_RxCallback)(uint8_t); //onReceive, data wordt/is ontvangen van master
void (*TWID_RxCallback)(uint8_t); //via callbacks ongetest
void (*TWIE_RxCallback)(uint8_t);
void (*TWIF_RxCallback)(uint8_t);
ISR(TWIC_TWIS_vect) { //slave
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	08 b6       	in	r0, 0x38	; 56
     d00:	0f 92       	push	r0
     d02:	18 be       	out	0x38, r1	; 56
     d04:	09 b6       	in	r0, 0x39	; 57
     d06:	0f 92       	push	r0
     d08:	19 be       	out	0x39, r1	; 57
     d0a:	0b b6       	in	r0, 0x3b	; 59
     d0c:	0f 92       	push	r0
     d0e:	1b be       	out	0x3b, r1	; 59
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
	TWI_HandleISR(TWIC_TxCallback, TWIC_RxCallback, TWIC);
     d28:	60 91 45 23 	lds	r22, 0x2345	; 0x802345 <TWIC_RxCallback>
     d2c:	70 91 46 23 	lds	r23, 0x2346	; 0x802346 <TWIC_RxCallback+0x1>
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	54 e0       	ldi	r21, 0x04	; 4
     d34:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <TWIC_TxCallback>
     d38:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <TWIC_TxCallback+0x1>
     d3c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d40:	ff 91       	pop	r31
     d42:	ef 91       	pop	r30
     d44:	bf 91       	pop	r27
     d46:	af 91       	pop	r26
     d48:	9f 91       	pop	r25
     d4a:	8f 91       	pop	r24
     d4c:	7f 91       	pop	r23
     d4e:	6f 91       	pop	r22
     d50:	5f 91       	pop	r21
     d52:	4f 91       	pop	r20
     d54:	3f 91       	pop	r19
     d56:	2f 91       	pop	r18
     d58:	0f 90       	pop	r0
     d5a:	0b be       	out	0x3b, r0	; 59
     d5c:	0f 90       	pop	r0
     d5e:	09 be       	out	0x39, r0	; 57
     d60:	0f 90       	pop	r0
     d62:	08 be       	out	0x38, r0	; 56
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_75>:
ISR(TWID_TWIS_vect) { //slave
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	08 b6       	in	r0, 0x38	; 56
     d7a:	0f 92       	push	r0
     d7c:	18 be       	out	0x38, r1	; 56
     d7e:	09 b6       	in	r0, 0x39	; 57
     d80:	0f 92       	push	r0
     d82:	19 be       	out	0x39, r1	; 57
     d84:	0b b6       	in	r0, 0x3b	; 59
     d86:	0f 92       	push	r0
     d88:	1b be       	out	0x3b, r1	; 59
     d8a:	2f 93       	push	r18
     d8c:	3f 93       	push	r19
     d8e:	4f 93       	push	r20
     d90:	5f 93       	push	r21
     d92:	6f 93       	push	r22
     d94:	7f 93       	push	r23
     d96:	8f 93       	push	r24
     d98:	9f 93       	push	r25
     d9a:	af 93       	push	r26
     d9c:	bf 93       	push	r27
     d9e:	ef 93       	push	r30
     da0:	ff 93       	push	r31
	TWI_HandleISR(TWID_TxCallback, TWID_RxCallback, TWID);
     da2:	60 91 43 23 	lds	r22, 0x2343	; 0x802343 <TWID_RxCallback>
     da6:	70 91 44 23 	lds	r23, 0x2344	; 0x802344 <TWID_RxCallback+0x1>
     daa:	40 e9       	ldi	r20, 0x90	; 144
     dac:	54 e0       	ldi	r21, 0x04	; 4
     dae:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <TWID_TxCallback>
     db2:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <TWID_TxCallback+0x1>
     db6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	bf 91       	pop	r27
     dc0:	af 91       	pop	r26
     dc2:	9f 91       	pop	r25
     dc4:	8f 91       	pop	r24
     dc6:	7f 91       	pop	r23
     dc8:	6f 91       	pop	r22
     dca:	5f 91       	pop	r21
     dcc:	4f 91       	pop	r20
     dce:	3f 91       	pop	r19
     dd0:	2f 91       	pop	r18
     dd2:	0f 90       	pop	r0
     dd4:	0b be       	out	0x3b, r0	; 59
     dd6:	0f 90       	pop	r0
     dd8:	09 be       	out	0x39, r0	; 57
     dda:	0f 90       	pop	r0
     ddc:	08 be       	out	0x38, r0	; 56
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_45>:
ISR(TWIE_TWIS_vect) { //slave
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	08 b6       	in	r0, 0x38	; 56
     df4:	0f 92       	push	r0
     df6:	18 be       	out	0x38, r1	; 56
     df8:	09 b6       	in	r0, 0x39	; 57
     dfa:	0f 92       	push	r0
     dfc:	19 be       	out	0x39, r1	; 57
     dfe:	0b b6       	in	r0, 0x3b	; 59
     e00:	0f 92       	push	r0
     e02:	1b be       	out	0x3b, r1	; 59
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
	TWI_HandleISR(TWIE_TxCallback, TWIE_RxCallback, TWIE);
     e1c:	60 91 41 23 	lds	r22, 0x2341	; 0x802341 <TWIE_RxCallback>
     e20:	70 91 42 23 	lds	r23, 0x2342	; 0x802342 <TWIE_RxCallback+0x1>
     e24:	40 ea       	ldi	r20, 0xA0	; 160
     e26:	54 e0       	ldi	r21, 0x04	; 4
     e28:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <TWIE_TxCallback>
     e2c:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <TWIE_TxCallback+0x1>
     e30:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0b be       	out	0x3b, r0	; 59
     e50:	0f 90       	pop	r0
     e52:	09 be       	out	0x39, r0	; 57
     e54:	0f 90       	pop	r0
     e56:	08 be       	out	0x38, r0	; 56
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <__vector_106>:
ISR(TWIF_TWIS_vect) { //slave
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	08 b6       	in	r0, 0x38	; 56
     e6e:	0f 92       	push	r0
     e70:	18 be       	out	0x38, r1	; 56
     e72:	09 b6       	in	r0, 0x39	; 57
     e74:	0f 92       	push	r0
     e76:	19 be       	out	0x39, r1	; 57
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	1b be       	out	0x3b, r1	; 59
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
     e96:	60 91 3f 23 	lds	r22, 0x233F	; 0x80233f <TWIF_RxCallback>
     e9a:	70 91 40 23 	lds	r23, 0x2340	; 0x802340 <TWIF_RxCallback+0x1>
     e9e:	40 eb       	ldi	r20, 0xB0	; 176
     ea0:	54 e0       	ldi	r21, 0x04	; 4
     ea2:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <TWIF_TxCallback>
     ea6:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <TWIF_TxCallback+0x1>
     eaa:	0e 94 68 06 	call	0xcd0	; 0xcd0 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0b be       	out	0x3b, r0	; 59
     eca:	0f 90       	pop	r0
     ecc:	09 be       	out	0x39, r0	; 57
     ece:	0f 90       	pop	r0
     ed0:	08 be       	out	0x38, r0	; 56
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <_Z8TWI_initR10TWI_struct>:
	}
}


void TWI_init(TWI_struct &TWI) //als slave
{
     edc:	fc 01       	movw	r30, r24
	TWI.SLAVE.CTRLA = (1<<TWI_SLAVE_APIEN_bp)|(1<<TWI_SLAVE_ENABLE_bp)|(1<<TWI_SLAVE_PIEN_bp)|(1<<TWI_SLAVE_PMEN_bp);
     ede:	8e e1       	ldi	r24, 0x1E	; 30
     ee0:	80 87       	std	Z+8, r24	; 0x08
	TWI.SLAVE.CTRLA |= (1<<TWI_SLAVE_DIEN_bp);
     ee2:	80 85       	ldd	r24, Z+8	; 0x08
     ee4:	80 62       	ori	r24, 0x20	; 32
     ee6:	80 87       	std	Z+8, r24	; 0x08

	//toegevoegd voor TWI_Write(), clear deze bits om het springen naar ISRs uit te schakelen
	TWI.SLAVE.CTRLA |= TWI_MASTER_INTLVL0_bm | TWI_MASTER_INTLVL1_bm; //enable port interrupt high level
     ee8:	80 85       	ldd	r24, Z+8	; 0x08
     eea:	80 6c       	ori	r24, 0xC0	; 192
     eec:	80 87       	std	Z+8, r24	; 0x08
     eee:	08 95       	ret

00000ef0 <_Z19TWI_RecievedAddressR10TWI_struct>:


bool TWI_RecievedAddress(TWI_struct &TWI)
{
	//valid address received and write operation
	return ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)));
     ef0:	fc 01       	movw	r30, r24
     ef2:	22 85       	ldd	r18, Z+10	; 0x0a
     ef4:	26 ff       	sbrs	r18, 6
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <_Z19TWI_RecievedAddressR10TWI_struct+0x16>
     ef8:	82 85       	ldd	r24, Z+10	; 0x0a
     efa:	81 fb       	bst	r24, 1
     efc:	99 27       	eor	r25, r25
     efe:	90 f9       	bld	r25, 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	89 27       	eor	r24, r25
     f04:	08 95       	ret
     f06:	80 e0       	ldi	r24, 0x00	; 0
}
     f08:	08 95       	ret

00000f0a <_Z17TWI_ReceivePacketR10TWI_structPhh>:

//============================================================
//	RECEIVE PACKET : HVWI VERSIE
//============================================================
bool TWI_ReceivePacket(TWI_struct &TWI, uint8_t* buffer, uint8_t bufferLength) {
     f0a:	fc 01       	movw	r30, r24
	//variabelen
	volatile static bool bResult;
	volatile static int i;
	//begin bij de eerste ontvangst databuffer index
	i=0;
     f0c:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f10:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
	//uitgangspunt: het correct ontvangen van data door de slave vanaf de master is niet gelukt
	bResult = false;
     f14:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <__data_end>
	//   TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm; //hier wordt een '1' weggeschreven in het APIF bit waardoor
	//                                       //dit bit wordt gewist(!), zie datasheet. Alle overige 0-bits
	//                                       //hebben geen invloed op de overige register bits inhoud(!)
	//----------------------------------------------------------------------------------------------------
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
     f18:	80 e4       	ldi	r24, 0x40	; 64
     f1a:	82 87       	std	Z+10, r24	; 0x0a
			break;
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     f1c:	50 e0       	ldi	r21, 0x00	; 0
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     f1e:	20 e8       	ldi	r18, 0x80	; 128
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
	//voor altijd doe
	while ( true ) {
		//er is een door de master gegenereerde stop conditie gedetecteerd (want TWI_SLAVE_PIEN_bm in CTRLA is gezet)
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_APIF_bm ) {
     f20:	82 85       	ldd	r24, Z+10	; 0x0a
     f22:	86 ff       	sbrs	r24, 6
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <_Z17TWI_ReceivePacketR10TWI_structPhh+0x24>
			//meld een pass
			bResult = true ;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 3c 23 	sts	0x233C, r24	; 0x80233c <__data_end>
			//verlaat de lus
			break;
     f2c:	1b c0       	rjmp	.+54     	; 0xf64 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
     f2e:	82 85       	ldd	r24, Z+10	; 0x0a
     f30:	88 23       	and	r24, r24
     f32:	b4 f7       	brge	.-20     	; 0xf20 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     f34:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f38:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f3c:	48 17       	cp	r20, r24
     f3e:	59 07       	cpc	r21, r25
     f40:	8c f0       	brlt	.+34     	; 0xf64 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
				//noteer het ontvangen databyte
				buffer[i++] = TWI.SLAVE.DATA;
     f42:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f46:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f4a:	dc 01       	movw	r26, r24
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	a0 93 3d 23 	sts	0x233D, r26	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f52:	b0 93 3e 23 	sts	0x233E, r27	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f56:	34 85       	ldd	r19, Z+12	; 0x0c
     f58:	db 01       	movw	r26, r22
     f5a:	a8 0f       	add	r26, r24
     f5c:	b9 1f       	adc	r27, r25
     f5e:	3c 93       	st	X, r19
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     f60:	22 87       	std	Z+10, r18	; 0x0a
     f62:	de cf       	rjmp	.-68     	; 0xf20 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
		}//if
	}//while
	//rapporteer het resultaat
	return bResult ;
     f64:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <__data_end>
} //TWI_ReceivePacket
     f68:	08 95       	ret

00000f6a <_Z9TWI_WriteR10TWI_structh>:


bool TWI_Write(TWI_struct &TWI, uint8_t byte) //als slave
{
     f6a:	fc 01       	movw	r30, r24
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
     f6c:	82 85       	ldd	r24, Z+10	; 0x0a
     f6e:	86 ff       	sbrs	r24, 6
     f70:	fd cf       	rjmp	.-6      	; 0xf6c <_Z9TWI_WriteR10TWI_structh+0x2>

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
     f72:	82 85       	ldd	r24, Z+10	; 0x0a
     f74:	81 ff       	sbrs	r24, 1
     f76:	26 c0       	rjmp	.+76     	; 0xfc4 <_Z9TWI_WriteR10TWI_structh+0x5a>
		return false; //master write operation
	}

	while(1) {
		TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f78:	82 85       	ldd	r24, Z+10	; 0x0a
     f7a:	80 6c       	ori	r24, 0xC0	; 192
     f7c:	82 87       	std	Z+10, r24	; 0x0a

		TWI.SLAVE.DATA = byte;
     f7e:	64 87       	std	Z+12, r22	; 0x0c

		//acknowledge and send byte
		TWI.SLAVE.CTRLB &= ~(TWI_SLAVE_ACKACT_bm); //ACK
     f80:	81 85       	ldd	r24, Z+9	; 0x09
     f82:	8b 7f       	andi	r24, 0xFB	; 251
     f84:	81 87       	std	Z+9, r24	; 0x09
//		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp); //RESPONSE, er komen meer bytes	//<<< gebruik deze voor een toekomstige TWI_SendPacket functie
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD1_bp); //COMPLETE, enige byte wordt verzonden
     f86:	81 85       	ldd	r24, Z+9	; 0x09
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	81 87       	std	Z+9, r24	; 0x09

		//wait for transmission completed
		while(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIF_bp)) {
     f8c:	0e c0       	rjmp	.+28     	; 0xfaa <_Z9TWI_WriteR10TWI_structh+0x40>
			//check for collisions or bus errors
			if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_COLL_bp) || TWI.SLAVE.STATUS &(1<<TWI_SLAVE_BUSERR_bp)) {
     f8e:	82 85       	ldd	r24, Z+10	; 0x0a
     f90:	83 fd       	sbrc	r24, 3
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <_Z9TWI_WriteR10TWI_structh+0x30>
     f94:	82 85       	ldd	r24, Z+10	; 0x0a
     f96:	82 ff       	sbrs	r24, 2
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <_Z9TWI_WriteR10TWI_structh+0x40>
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_BUSERR_bp); //clear buserror, collision is cleared automatically
     f9a:	82 85       	ldd	r24, Z+10	; 0x0a
     f9c:	84 60       	ori	r24, 0x04	; 4
     f9e:	82 87       	std	Z+10, r24	; 0x0a
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     fa0:	82 85       	ldd	r24, Z+10	; 0x0a
     fa2:	80 6c       	ori	r24, 0xC0	; 192
     fa4:	82 87       	std	Z+10, r24	; 0x0a
				return false;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
		TWI.SLAVE.CTRLB &= ~(TWI_SLAVE_ACKACT_bm); //ACK
//		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp); //RESPONSE, er komen meer bytes	//<<< gebruik deze voor een toekomstige TWI_SendPacket functie
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD1_bp); //COMPLETE, enige byte wordt verzonden

		//wait for transmission completed
		while(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIF_bp)) {
     faa:	82 85       	ldd	r24, Z+10	; 0x0a
     fac:	88 23       	and	r24, r24
     fae:	7c f3       	brlt	.-34     	; 0xf8e <_Z9TWI_WriteR10TWI_structh+0x24>
     fb0:	80 e5       	ldi	r24, 0x50	; 80
     fb2:	8a 95       	dec	r24
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <_Z9TWI_WriteR10TWI_structh+0x48>

		_delay_us(10);

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
     fb6:	82 85       	ldd	r24, Z+10	; 0x0a
     fb8:	86 ff       	sbrs	r24, 6
     fba:	de cf       	rjmp	.-68     	; 0xf78 <_Z9TWI_WriteR10TWI_structh+0xe>
     fbc:	82 85       	ldd	r24, Z+10	; 0x0a
     fbe:	80 fd       	sbrc	r24, 0
     fc0:	db cf       	rjmp	.-74     	; 0xf78 <_Z9TWI_WriteR10TWI_structh+0xe>
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <_Z9TWI_WriteR10TWI_structh+0x5e>
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
		return false; //master write operation
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	08 95       	ret

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
				//received stop condition
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     fc8:	82 85       	ldd	r24, Z+10	; 0x0a
     fca:	80 6c       	ori	r24, 0xC0	; 192
     fcc:	82 87       	std	Z+10, r24	; 0x0a
				return true;
     fce:	81 e0       	ldi	r24, 0x01	; 1
			}
//		} //ACK, continue transmitting
	}
}
     fd0:	08 95       	ret

00000fd2 <_Z13TWI_onRequestPFvvER10TWI_struct>:


//tx callbacks, set function call at interrupt
void TWI_onRequest(void (*f)(), TWI_struct &twi) {
	switch ((int) (&twi)) {
     fd2:	60 39       	cpi	r22, 0x90	; 144
     fd4:	24 e0       	ldi	r18, 0x04	; 4
     fd6:	72 07       	cpc	r23, r18
     fd8:	91 f0       	breq	.+36     	; 0xffe <_Z13TWI_onRequestPFvvER10TWI_struct+0x2c>
     fda:	24 f4       	brge	.+8      	; 0xfe4 <_Z13TWI_onRequestPFvvER10TWI_struct+0x12>
     fdc:	60 38       	cpi	r22, 0x80	; 128
     fde:	74 40       	sbci	r23, 0x04	; 4
     fe0:	49 f0       	breq	.+18     	; 0xff4 <_Z13TWI_onRequestPFvvER10TWI_struct+0x22>
     fe2:	1c c0       	rjmp	.+56     	; 0x101c <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
     fe4:	60 3a       	cpi	r22, 0xA0	; 160
     fe6:	24 e0       	ldi	r18, 0x04	; 4
     fe8:	72 07       	cpc	r23, r18
     fea:	71 f0       	breq	.+28     	; 0x1008 <_Z13TWI_onRequestPFvvER10TWI_struct+0x36>
     fec:	60 3b       	cpi	r22, 0xB0	; 176
     fee:	74 40       	sbci	r23, 0x04	; 4
     ff0:	81 f0       	breq	.+32     	; 0x1012 <_Z13TWI_onRequestPFvvER10TWI_struct+0x40>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_TxCallback = f; break;
     ff4:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <TWIC_TxCallback>
     ff8:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <TWIC_TxCallback+0x1>
     ffc:	08 95       	ret
		case TWID_ptr: TWID_TxCallback = f; break;
     ffe:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <TWID_TxCallback>
    1002:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <TWID_TxCallback+0x1>
    1006:	08 95       	ret
		case TWIE_ptr: TWIE_TxCallback = f; break;
    1008:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <TWIE_TxCallback>
    100c:	90 93 4a 23 	sts	0x234A, r25	; 0x80234a <TWIE_TxCallback+0x1>
    1010:	08 95       	ret
		case TWIF_ptr: TWIF_TxCallback = f; break;
    1012:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <TWIF_TxCallback>
    1016:	90 93 48 23 	sts	0x2348, r25	; 0x802348 <TWIF_TxCallback+0x1>
    101a:	08 95       	ret
}


//tx callbacks, set function call at interrupt
void TWI_onRequest(void (*f)(), TWI_struct &twi) {
	switch ((int) (&twi)) {
    101c:	ff cf       	rjmp	.-2      	; 0x101c <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>

0000101e <_Z13TWI_onReceivePFvhER10TWI_struct>:
}


//rx callbacks, set function call at interrupt
void TWI_onReceive(void (*f)(uint8_t), TWI_struct &twi) {
	switch ((int) &twi) {
    101e:	60 39       	cpi	r22, 0x90	; 144
    1020:	24 e0       	ldi	r18, 0x04	; 4
    1022:	72 07       	cpc	r23, r18
    1024:	91 f0       	breq	.+36     	; 0x104a <_Z13TWI_onReceivePFvhER10TWI_struct+0x2c>
    1026:	24 f4       	brge	.+8      	; 0x1030 <_Z13TWI_onReceivePFvhER10TWI_struct+0x12>
    1028:	60 38       	cpi	r22, 0x80	; 128
    102a:	74 40       	sbci	r23, 0x04	; 4
    102c:	49 f0       	breq	.+18     	; 0x1040 <_Z13TWI_onReceivePFvhER10TWI_struct+0x22>
    102e:	1c c0       	rjmp	.+56     	; 0x1068 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
    1030:	60 3a       	cpi	r22, 0xA0	; 160
    1032:	24 e0       	ldi	r18, 0x04	; 4
    1034:	72 07       	cpc	r23, r18
    1036:	71 f0       	breq	.+28     	; 0x1054 <_Z13TWI_onReceivePFvhER10TWI_struct+0x36>
    1038:	60 3b       	cpi	r22, 0xB0	; 176
    103a:	74 40       	sbci	r23, 0x04	; 4
    103c:	81 f0       	breq	.+32     	; 0x105e <_Z13TWI_onReceivePFvhER10TWI_struct+0x40>
    103e:	14 c0       	rjmp	.+40     	; 0x1068 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_RxCallback = f; break;
    1040:	80 93 45 23 	sts	0x2345, r24	; 0x802345 <TWIC_RxCallback>
    1044:	90 93 46 23 	sts	0x2346, r25	; 0x802346 <TWIC_RxCallback+0x1>
    1048:	08 95       	ret
		case TWID_ptr: TWID_RxCallback = f; break;
    104a:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <TWID_RxCallback>
    104e:	90 93 44 23 	sts	0x2344, r25	; 0x802344 <TWID_RxCallback+0x1>
    1052:	08 95       	ret
		case TWIE_ptr: TWIE_RxCallback = f; break;
    1054:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <TWIE_RxCallback>
    1058:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <TWIE_RxCallback+0x1>
    105c:	08 95       	ret
		case TWIF_ptr: TWIF_RxCallback = f; break;
    105e:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <TWIF_RxCallback>
    1062:	90 93 40 23 	sts	0x2340, r25	; 0x802340 <TWIF_RxCallback+0x1>
    1066:	08 95       	ret
}


//rx callbacks, set function call at interrupt
void TWI_onReceive(void (*f)(uint8_t), TWI_struct &twi) {
	switch ((int) &twi) {
    1068:	ff cf       	rjmp	.-2      	; 0x1068 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>

0000106a <_Z10HexToASCIIh>:

#include "UART.h"

char HexToASCII(uint8_t i)
  {
	  i &= 0x0f;
    106a:	8f 70       	andi	r24, 0x0F	; 15
	  if(i > 9)
    106c:	8a 30       	cpi	r24, 0x0A	; 10
    106e:	10 f0       	brcs	.+4      	; 0x1074 <_Z10HexToASCIIh+0xa>
	  return i+'A'-10;
    1070:	89 5c       	subi	r24, 0xC9	; 201
    1072:	08 95       	ret
	  else
	  return i+'0';
    1074:	80 5d       	subi	r24, 0xD0	; 208
  }
    1076:	08 95       	ret

00001078 <_Z18USART_Set_BaudrateR12USART_structmm>:
 
 bool USART_Set_Baudrate(USART_struct &USART, uint32_t baud, uint32_t cpu_hz)
{
    1078:	2f 92       	push	r2
    107a:	3f 92       	push	r3
    107c:	4f 92       	push	r4
    107e:	5f 92       	push	r5
    1080:	6f 92       	push	r6
    1082:	7f 92       	push	r7
    1084:	8f 92       	push	r8
    1086:	9f 92       	push	r9
    1088:	af 92       	push	r10
    108a:	bf 92       	push	r11
    108c:	cf 92       	push	r12
    108e:	df 92       	push	r13
    1090:	ef 92       	push	r14
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	1c 01       	movw	r2, r24
    109c:	2a 01       	movw	r4, r20
    109e:	3b 01       	movw	r6, r22
    10a0:	48 01       	movw	r8, r16
    10a2:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    10a4:	d9 01       	movw	r26, r18
    10a6:	c8 01       	movw	r24, r16
    10a8:	68 94       	set
    10aa:	12 f8       	bld	r1, 2
    10ac:	b6 95       	lsr	r27
    10ae:	a7 95       	ror	r26
    10b0:	97 95       	ror	r25
    10b2:	87 95       	ror	r24
    10b4:	16 94       	lsr	r1
    10b6:	d1 f7       	brne	.-12     	; 0x10ac <_Z18USART_Set_BaudrateR12USART_structmm+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    10b8:	b9 01       	movw	r22, r18
    10ba:	a8 01       	movw	r20, r16
    10bc:	03 2e       	mov	r0, r19
    10be:	36 e1       	ldi	r19, 0x16	; 22
    10c0:	76 95       	lsr	r23
    10c2:	67 95       	ror	r22
    10c4:	57 95       	ror	r21
    10c6:	47 95       	ror	r20
    10c8:	3a 95       	dec	r19
    10ca:	d1 f7       	brne	.-12     	; 0x10c0 <_Z18USART_Set_BaudrateR12USART_structmm+0x48>
    10cc:	30 2d       	mov	r19, r0

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    10ce:	f1 01       	movw	r30, r2
    10d0:	24 81       	ldd	r18, Z+4	; 0x04
    10d2:	22 fd       	sbrc	r18, 2
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <_Z18USART_Set_BaudrateR12USART_structmm+0x6e>
		max_rate /= 2;
    10d6:	b6 95       	lsr	r27
    10d8:	a7 95       	ror	r26
    10da:	97 95       	ror	r25
    10dc:	87 95       	ror	r24
		min_rate /= 2;
    10de:	76 95       	lsr	r23
    10e0:	67 95       	ror	r22
    10e2:	57 95       	ror	r21
    10e4:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10e6:	84 15       	cp	r24, r4
    10e8:	95 05       	cpc	r25, r5
    10ea:	a6 05       	cpc	r26, r6
    10ec:	b7 05       	cpc	r27, r7
    10ee:	08 f4       	brcc	.+2      	; 0x10f2 <_Z18USART_Set_BaudrateR12USART_structmm+0x7a>
    10f0:	ae c0       	rjmp	.+348    	; 0x124e <_Z18USART_Set_BaudrateR12USART_structmm+0x1d6>
    10f2:	44 16       	cp	r4, r20
    10f4:	55 06       	cpc	r5, r21
    10f6:	66 06       	cpc	r6, r22
    10f8:	77 06       	cpc	r7, r23
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <_Z18USART_Set_BaudrateR12USART_structmm+0x86>
    10fc:	aa c0       	rjmp	.+340    	; 0x1252 <_Z18USART_Set_BaudrateR12USART_structmm+0x1da>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    10fe:	f1 01       	movw	r30, r2
    1100:	84 81       	ldd	r24, Z+4	; 0x04
    1102:	82 fd       	sbrc	r24, 2
    1104:	04 c0       	rjmp	.+8      	; 0x110e <_Z18USART_Set_BaudrateR12USART_structmm+0x96>
		baud *= 2;
    1106:	44 0c       	add	r4, r4
    1108:	55 1c       	adc	r5, r5
    110a:	66 1c       	adc	r6, r6
    110c:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	a3 01       	movw	r20, r6
    1114:	92 01       	movw	r18, r4
    1116:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    111a:	2f 3f       	cpi	r18, 0xFF	; 255
    111c:	31 05       	cpc	r19, r1
    111e:	41 05       	cpc	r20, r1
    1120:	51 05       	cpc	r21, r1
    1122:	08 f4       	brcc	.+2      	; 0x1126 <_Z18USART_Set_BaudrateR12USART_structmm+0xae>
    1124:	98 c0       	rjmp	.+304    	; 0x1256 <_Z18USART_Set_BaudrateR12USART_structmm+0x1de>
    1126:	c1 2c       	mov	r12, r1
    1128:	d1 2c       	mov	r13, r1
    112a:	76 01       	movw	r14, r12
    112c:	ca 94       	dec	r12
    112e:	c9 ef       	ldi	r28, 0xF9	; 249
    1130:	05 c0       	rjmp	.+10     	; 0x113c <_Z18USART_Set_BaudrateR12USART_structmm+0xc4>
    1132:	2c 15       	cp	r18, r12
    1134:	3d 05       	cpc	r19, r13
    1136:	4e 05       	cpc	r20, r14
    1138:	5f 05       	cpc	r21, r15
    113a:	68 f0       	brcs	.+26     	; 0x1156 <_Z18USART_Set_BaudrateR12USART_structmm+0xde>
			break;
		}

		limit <<= 1;
    113c:	cc 0c       	add	r12, r12
    113e:	dd 1c       	adc	r13, r13
    1140:	ee 1c       	adc	r14, r14
    1142:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1144:	cd 3f       	cpi	r28, 0xFD	; 253
    1146:	14 f4       	brge	.+4      	; 0x114c <_Z18USART_Set_BaudrateR12USART_structmm+0xd4>
			limit |= 1;
    1148:	68 94       	set
    114a:	c0 f8       	bld	r12, 0
    114c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    114e:	c7 30       	cpi	r28, 0x07	; 7
    1150:	81 f7       	brne	.-32     	; 0x1132 <_Z18USART_Set_BaudrateR12USART_structmm+0xba>
    1152:	8c 2f       	mov	r24, r28
    1154:	56 c0       	rjmp	.+172    	; 0x1202 <_Z18USART_Set_BaudrateR12USART_structmm+0x18a>
    1156:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1158:	cc 23       	and	r28, r28
    115a:	0c f0       	brlt	.+2      	; 0x115e <_Z18USART_Set_BaudrateR12USART_structmm+0xe6>
    115c:	52 c0       	rjmp	.+164    	; 0x1202 <_Z18USART_Set_BaudrateR12USART_structmm+0x18a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    115e:	d3 01       	movw	r26, r6
    1160:	c2 01       	movw	r24, r4
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	aa 1f       	adc	r26, r26
    1168:	bb 1f       	adc	r27, r27
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	aa 1f       	adc	r26, r26
    1170:	bb 1f       	adc	r27, r27
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	aa 1f       	adc	r26, r26
    1178:	bb 1f       	adc	r27, r27
    117a:	85 01       	movw	r16, r10
    117c:	74 01       	movw	r14, r8
    117e:	e8 1a       	sub	r14, r24
    1180:	f9 0a       	sbc	r15, r25
    1182:	0a 0b       	sbc	r16, r26
    1184:	1b 0b       	sbc	r17, r27
    1186:	d8 01       	movw	r26, r16
    1188:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    118a:	ce 3f       	cpi	r28, 0xFE	; 254
    118c:	f4 f4       	brge	.+60     	; 0x11ca <_Z18USART_Set_BaudrateR12USART_structmm+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    118e:	2d ef       	ldi	r18, 0xFD	; 253
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	2c 1b       	sub	r18, r28
    1194:	31 09       	sbc	r19, r1
    1196:	c7 fd       	sbrc	r28, 7
    1198:	33 95       	inc	r19
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <_Z18USART_Set_BaudrateR12USART_structmm+0x12c>
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	aa 1f       	adc	r26, r26
    11a2:	bb 1f       	adc	r27, r27
    11a4:	2a 95       	dec	r18
    11a6:	d2 f7       	brpl	.-12     	; 0x119c <_Z18USART_Set_BaudrateR12USART_structmm+0x124>
    11a8:	73 01       	movw	r14, r6
    11aa:	62 01       	movw	r12, r4
    11ac:	f6 94       	lsr	r15
    11ae:	e7 94       	ror	r14
    11b0:	d7 94       	ror	r13
    11b2:	c7 94       	ror	r12
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	6c 0d       	add	r22, r12
    11ba:	7d 1d       	adc	r23, r13
    11bc:	8e 1d       	adc	r24, r14
    11be:	9f 1d       	adc	r25, r15
    11c0:	a3 01       	movw	r20, r6
    11c2:	92 01       	movw	r18, r4
    11c4:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>
    11c8:	38 c0       	rjmp	.+112    	; 0x123a <_Z18USART_Set_BaudrateR12USART_structmm+0x1c2>
		} else {
			baud <<= exp + 3;
    11ca:	23 e0       	ldi	r18, 0x03	; 3
    11cc:	2c 0f       	add	r18, r28
    11ce:	83 01       	movw	r16, r6
    11d0:	72 01       	movw	r14, r4
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <_Z18USART_Set_BaudrateR12USART_structmm+0x164>
    11d4:	ee 0c       	add	r14, r14
    11d6:	ff 1c       	adc	r15, r15
    11d8:	00 1f       	adc	r16, r16
    11da:	11 1f       	adc	r17, r17
    11dc:	2a 95       	dec	r18
    11de:	d2 f7       	brpl	.-12     	; 0x11d4 <_Z18USART_Set_BaudrateR12USART_structmm+0x15c>
    11e0:	a8 01       	movw	r20, r16
    11e2:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    11e4:	67 01       	movw	r12, r14
    11e6:	78 01       	movw	r14, r16
    11e8:	f6 94       	lsr	r15
    11ea:	e7 94       	ror	r14
    11ec:	d7 94       	ror	r13
    11ee:	c7 94       	ror	r12
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	6c 0d       	add	r22, r12
    11f6:	7d 1d       	adc	r23, r13
    11f8:	8e 1d       	adc	r24, r14
    11fa:	9f 1d       	adc	r25, r15
    11fc:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>
    1200:	1c c0       	rjmp	.+56     	; 0x123a <_Z18USART_Set_BaudrateR12USART_structmm+0x1c2>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1202:	8d 5f       	subi	r24, 0xFD	; 253
    1204:	a3 01       	movw	r20, r6
    1206:	92 01       	movw	r18, r4
    1208:	04 c0       	rjmp	.+8      	; 0x1212 <_Z18USART_Set_BaudrateR12USART_structmm+0x19a>
    120a:	22 0f       	add	r18, r18
    120c:	33 1f       	adc	r19, r19
    120e:	44 1f       	adc	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	8a 95       	dec	r24
    1214:	d2 f7       	brpl	.-12     	; 0x120a <_Z18USART_Set_BaudrateR12USART_structmm+0x192>
		div = (cpu_hz + baud / 2) / baud - 1;
    1216:	da 01       	movw	r26, r20
    1218:	c9 01       	movw	r24, r18
    121a:	b6 95       	lsr	r27
    121c:	a7 95       	ror	r26
    121e:	97 95       	ror	r25
    1220:	87 95       	ror	r24
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	68 0d       	add	r22, r8
    1228:	79 1d       	adc	r23, r9
    122a:	8a 1d       	adc	r24, r10
    122c:	9b 1d       	adc	r25, r11
    122e:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>
    1232:	21 50       	subi	r18, 0x01	; 1
    1234:	31 09       	sbc	r19, r1
    1236:	41 09       	sbc	r20, r1
    1238:	51 09       	sbc	r21, r1
	}

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    123a:	83 2f       	mov	r24, r19
    123c:	8f 70       	andi	r24, 0x0F	; 15
    123e:	c2 95       	swap	r28
    1240:	c0 7f       	andi	r28, 0xF0	; 240
    1242:	c8 2b       	or	r28, r24
    1244:	f1 01       	movw	r30, r2
    1246:	c7 83       	std	Z+7, r28	; 0x07
	USART.BAUDCTRLA = (uint8_t)div;
    1248:	26 83       	std	Z+6, r18	; 0x06

	return true;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	1c c0       	rjmp	.+56     	; 0x1286 <_Z18USART_Set_BaudrateR12USART_structmm+0x20e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	1a c0       	rjmp	.+52     	; 0x1286 <_Z18USART_Set_BaudrateR12USART_structmm+0x20e>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	18 c0       	rjmp	.+48     	; 0x1286 <_Z18USART_Set_BaudrateR12USART_structmm+0x20e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1256:	d3 01       	movw	r26, r6
    1258:	c2 01       	movw	r24, r4
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	aa 1f       	adc	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	aa 1f       	adc	r26, r26
    1268:	bb 1f       	adc	r27, r27
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	aa 1f       	adc	r26, r26
    1270:	bb 1f       	adc	r27, r27
    1272:	85 01       	movw	r16, r10
    1274:	74 01       	movw	r14, r8
    1276:	e8 1a       	sub	r14, r24
    1278:	f9 0a       	sbc	r15, r25
    127a:	0a 0b       	sbc	r16, r26
    127c:	1b 0b       	sbc	r17, r27
    127e:	d8 01       	movw	r26, r16
    1280:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1282:	c9 ef       	ldi	r28, 0xF9	; 249
    1284:	84 cf       	rjmp	.-248    	; 0x118e <_Z18USART_Set_BaudrateR12USART_structmm+0x116>

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	USART.BAUDCTRLA = (uint8_t)div;

	return true;
}
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	ef 90       	pop	r14
    1290:	df 90       	pop	r13
    1292:	cf 90       	pop	r12
    1294:	bf 90       	pop	r11
    1296:	af 90       	pop	r10
    1298:	9f 90       	pop	r9
    129a:	8f 90       	pop	r8
    129c:	7f 90       	pop	r7
    129e:	6f 90       	pop	r6
    12a0:	5f 90       	pop	r5
    12a2:	4f 90       	pop	r4
    12a4:	3f 90       	pop	r3
    12a6:	2f 90       	pop	r2
    12a8:	08 95       	ret

000012aa <_Z10USART_InitR12USART_structmmb>:
 
 
 void USART_Init(USART_struct &USART, uint32_t baud, uint32_t cpu_hz, bool doubleSpeed)
 {	
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
	 /* Set baud rate */
	 USART_Set_Baudrate(USART, baud,cpu_hz);
    12b4:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z18USART_Set_BaudrateR12USART_structmm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b8:	8f e5       	ldi	r24, 0x5F	; 95
    12ba:	9a ee       	ldi	r25, 0xEA	; 234
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <_Z10USART_InitR12USART_structmmb+0x12>
    12c0:	00 c0       	rjmp	.+0      	; 0x12c2 <_Z10USART_InitR12USART_structmmb+0x18>
    12c2:	00 00       	nop
	 _delay_ms(10); // wait for stable clock
	 //USART.CTRLA = (1 << USART_RXCINTLVL0_bp)|(1 << USART_TXCINTLVL0_bp)|(1 << USART_DREINTLVL0_bp);
	 USART.CTRLB = (1 << USART_RXEN_bp)|(1 << USART_TXEN_bp); 
    12c4:	88 e1       	ldi	r24, 0x18	; 24
    12c6:	8c 83       	std	Y+4, r24	; 0x04
 }
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	08 95       	ret

000012d2 <_Z14USART_TransmitR12USART_structc>:

void USART_Transmit(USART_struct &USART, const char data )
{
    12d2:	fc 01       	movw	r30, r24
	/* Wait for empty transmit buffer */
	while ( !( USART.STATUS & (1<<USART_DREIF_bp)) );
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	95 ff       	sbrs	r25, 5
    12d8:	fd cf       	rjmp	.-6      	; 0x12d4 <_Z14USART_TransmitR12USART_structc+0x2>
	/* Put data into buffer, sends the data */
	USART.DATA = data;
    12da:	60 83       	st	Z, r22
    12dc:	08 95       	ret

000012de <_Z13USART_ReceiveR12USART_struct>:
}

char USART_Receive(USART_struct &USART)
{
    12de:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	while ( !(USART.STATUS & (1<<USART_RXCIF_bp)));
    12e0:	91 81       	ldd	r25, Z+1	; 0x01
    12e2:	99 23       	and	r25, r25
    12e4:	ec f7       	brge	.-6      	; 0x12e0 <_Z13USART_ReceiveR12USART_struct+0x2>
	/* Get and return received data from buffer */
	return USART.DATA;
    12e6:	80 81       	ld	r24, Z
}
    12e8:	08 95       	ret

000012ea <_Z13USART_ReceiveR12USART_structjRb>:

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
    12ea:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    12ec:	61 15       	cp	r22, r1
    12ee:	71 05       	cpc	r23, r1
    12f0:	99 f0       	breq	.+38     	; 0x1318 <_Z13USART_ReceiveR12USART_structjRb+0x2e>
	{
		if(USART.STATUS & (1<<USART_RXCIF_bp))
    12f2:	81 81       	ldd	r24, Z+1	; 0x01
    12f4:	88 23       	and	r24, r24
    12f6:	34 f0       	brlt	.+12     	; 0x1304 <_Z13USART_ReceiveR12USART_structjRb+0x1a>
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <_Z13USART_ReceiveR12USART_structjRb+0x1e>
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	99 23       	and	r25, r25
    1302:	14 f4       	brge	.+4      	; 0x1308 <_Z13USART_ReceiveR12USART_structjRb+0x1e>
		{
			/* Get and return received data from buffer */
			return USART.DATA;
    1304:	80 81       	ld	r24, Z
    1306:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	8a 95       	dec	r24
    130c:	f1 f7       	brne	.-4      	; 0x130a <_Z13USART_ReceiveR12USART_structjRb+0x20>
}

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    130e:	2f 5f       	subi	r18, 0xFF	; 255
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	26 17       	cp	r18, r22
    1314:	37 07       	cpc	r19, r23
    1316:	99 f7       	brne	.-26     	; 0x12fe <_Z13USART_ReceiveR12USART_structjRb+0x14>
		}

		_delay_us(1);
	}
	 
	isTimedOut = true;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	fa 01       	movw	r30, r20
    131c:	80 83       	st	Z, r24
	return 0;
    131e:	80 e0       	ldi	r24, 0x00	; 0
}
    1320:	08 95       	ret

00001322 <_Z15USART_AvailableR12USART_struct>:

 bool USART_Available(USART_struct &USART)
 {
	 return (USART.STATUS & (1<<USART_RXCIF_bp));
    1322:	fc 01       	movw	r30, r24
    1324:	81 81       	ldd	r24, Z+1	; 0x01
 }
    1326:	88 1f       	adc	r24, r24
    1328:	88 27       	eor	r24, r24
    132a:	88 1f       	adc	r24, r24
    132c:	08 95       	ret

0000132e <_Z20USART_TransmitStringR12USART_structPKc>:


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	fb 01       	movw	r30, r22
	 for(uint8_t i = 0; str[i]; i++)
    133a:	60 81       	ld	r22, Z
    133c:	66 23       	and	r22, r22
    133e:	69 f0       	breq	.+26     	; 0x135a <_Z20USART_TransmitStringR12USART_structPKc+0x2c>
    1340:	8f 01       	movw	r16, r30
    1342:	7c 01       	movw	r14, r24
    1344:	c0 e0       	ldi	r28, 0x00	; 0
	 USART_Transmit(USART, str[i]);
    1346:	c7 01       	movw	r24, r14
    1348:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
	 for(uint8_t i = 0; str[i]; i++)
    134c:	cf 5f       	subi	r28, 0xFF	; 255
    134e:	f8 01       	movw	r30, r16
    1350:	ec 0f       	add	r30, r28
    1352:	f1 1d       	adc	r31, r1
    1354:	60 81       	ld	r22, Z
    1356:	61 11       	cpse	r22, r1
    1358:	f6 cf       	rjmp	.-20     	; 0x1346 <_Z20USART_TransmitStringR12USART_structPKc+0x18>
	 USART_Transmit(USART, str[i]);
 }
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	08 95       	ret

00001366 <_Z14USART_TransmitR12USART_structPKch>:


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
	 for(uint8_t i = 0; i < length; i++)
    1372:	44 23       	and	r20, r20
    1374:	81 f0       	breq	.+32     	; 0x1396 <_Z14USART_TransmitR12USART_structPKch+0x30>
    1376:	7c 01       	movw	r14, r24
    1378:	eb 01       	movw	r28, r22
    137a:	41 50       	subi	r20, 0x01	; 1
    137c:	04 2f       	mov	r16, r20
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	0f 5f       	subi	r16, 0xFF	; 255
    1382:	1f 4f       	sbci	r17, 0xFF	; 255
    1384:	06 0f       	add	r16, r22
    1386:	17 1f       	adc	r17, r23
	 USART_Transmit(USART, buff[i]);
    1388:	69 91       	ld	r22, Y+
    138a:	c7 01       	movw	r24, r14
    138c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
	 for(uint8_t i = 0; i < length; i++)
    1390:	c0 17       	cp	r28, r16
    1392:	d1 07       	cpc	r29, r17
    1394:	c9 f7       	brne	.-14     	; 0x1388 <_Z14USART_TransmitR12USART_structPKch+0x22>
	 USART_Transmit(USART, buff[i]);
 }
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	08 95       	ret

000013a4 <_Z18USART_Transmit_HexR12USART_structc>:

 
 void USART_Transmit_Hex(USART_struct &USART, const char data )
 {
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24
    13ac:	16 2f       	mov	r17, r22
	 USART_TransmitString(USART, "0x");
    13ae:	66 e7       	ldi	r22, 0x76	; 118
    13b0:	71 e2       	ldi	r23, 0x21	; 33
    13b2:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	 USART_Transmit(USART, HexToASCII(data>>4));
    13b6:	81 2f       	mov	r24, r17
    13b8:	82 95       	swap	r24
    13ba:	8f 70       	andi	r24, 0x0F	; 15
    13bc:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    13c0:	68 2f       	mov	r22, r24
    13c2:	ce 01       	movw	r24, r28
    13c4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	 USART_Transmit(USART, HexToASCII(data));
    13c8:	81 2f       	mov	r24, r17
    13ca:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    13ce:	68 2f       	mov	r22, r24
    13d0:	ce 01       	movw	r24, r28
    13d2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
 }
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	08 95       	ret

000013de <_Z21USART_Transmit_NumberR12USART_structi>:


 void USART_Transmit_Number(USART_struct &USART, int16_t num)
 {
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	8c 01       	movw	r16, r24
    13e8:	eb 01       	movw	r28, r22
	 if(num < 0)
    13ea:	dd 23       	and	r29, r29
    13ec:	34 f4       	brge	.+12     	; 0x13fa <_Z21USART_Transmit_NumberR12USART_structi+0x1c>
	 {
		 num = -num;
    13ee:	d1 95       	neg	r29
    13f0:	c1 95       	neg	r28
    13f2:	d1 09       	sbc	r29, r1
		 USART_Transmit(USART, '-');
    13f4:	6d e2       	ldi	r22, 0x2D	; 45
    13f6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	 }

	 bool started = false;
	 uint8_t ten_thousands	= (num/10000);
    13fa:	ce 01       	movw	r24, r28
    13fc:	60 e1       	ldi	r22, 0x10	; 16
    13fe:	77 e2       	ldi	r23, 0x27	; 39
    1400:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	 if(ten_thousands > 0)
    1404:	66 23       	and	r22, r22
    1406:	31 f0       	breq	.+12     	; 0x1414 <_Z21USART_Transmit_NumberR12USART_structi+0x36>
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
    1408:	60 5d       	subi	r22, 0xD0	; 208
    140a:	c8 01       	movw	r24, r16
    140c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
		 started = true;
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <_Z21USART_Transmit_NumberR12USART_structi+0x38>
	 {
		 num = -num;
		 USART_Transmit(USART, '-');
	 }

	 bool started = false;
    1414:	20 e0       	ldi	r18, 0x00	; 0
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
		 started = true;
	 }

	 uint8_t thousands	= (num/1000)%10;
    1416:	ce 01       	movw	r24, r28
    1418:	68 ee       	ldi	r22, 0xE8	; 232
    141a:	73 e0       	ldi	r23, 0x03	; 3
    141c:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1420:	cb 01       	movw	r24, r22
    1422:	6a e0       	ldi	r22, 0x0A	; 10
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	 if(thousands > 0)
    142a:	88 23       	and	r24, r24
    142c:	89 f0       	breq	.+34     	; 0x1450 <_Z21USART_Transmit_NumberR12USART_structi+0x72>
	 {
		 USART_Transmit(USART, '0'+thousands);
    142e:	60 e3       	ldi	r22, 0x30	; 48
    1430:	68 0f       	add	r22, r24
    1432:	c8 01       	movw	r24, r16
    1434:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t hundreds	= (num/100)%10;
    1438:	ce 01       	movw	r24, r28
    143a:	64 e6       	ldi	r22, 0x64	; 100
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1442:	cb 01       	movw	r24, r22
    1444:	6a e0       	ldi	r22, 0x0A	; 10
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    144c:	68 2f       	mov	r22, r24
    144e:	0f c0       	rjmp	.+30     	; 0x146e <_Z21USART_Transmit_NumberR12USART_structi+0x90>
    1450:	ce 01       	movw	r24, r28
    1452:	64 e6       	ldi	r22, 0x64	; 100
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    145a:	cb 01       	movw	r24, r22
    145c:	6a e0       	ldi	r22, 0x0A	; 10
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1464:	68 2f       	mov	r22, r24
	 if(hundreds > 0 || started)
    1466:	81 11       	cpse	r24, r1
    1468:	02 c0       	rjmp	.+4      	; 0x146e <_Z21USART_Transmit_NumberR12USART_structi+0x90>
    146a:	22 23       	and	r18, r18
    146c:	f1 f0       	breq	.+60     	; 0x14aa <_Z21USART_Transmit_NumberR12USART_structi+0xcc>
	 {
		 USART_Transmit(USART, '0'+hundreds);
    146e:	60 5d       	subi	r22, 0xD0	; 208
    1470:	c8 01       	movw	r24, r16
    1472:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
    1476:	2a e0       	ldi	r18, 0x0A	; 10
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	ce 01       	movw	r24, r28
    147c:	b9 01       	movw	r22, r18
    147e:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1482:	cb 01       	movw	r24, r22
    1484:	b9 01       	movw	r22, r18
    1486:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    148a:	68 2f       	mov	r22, r24
	 if(tens > 0 || started)
	 {
		 USART_Transmit(USART, '0'+tens);
    148c:	60 5d       	subi	r22, 0xD0	; 208
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
    1494:	ce 01       	movw	r24, r28
    1496:	6a e0       	ldi	r22, 0x0A	; 10
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    149e:	60 e3       	ldi	r22, 0x30	; 48
    14a0:	68 0f       	add	r22, r24
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <_Z21USART_Transmit_NumberR12USART_structi+0xe8>
	 {
		 USART_Transmit(USART, '0'+hundreds);
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
    14aa:	2a e0       	ldi	r18, 0x0A	; 10
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	ce 01       	movw	r24, r28
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    14b6:	cb 01       	movw	r24, r22
    14b8:	b9 01       	movw	r22, r18
    14ba:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    14be:	68 2f       	mov	r22, r24
	 if(tens > 0 || started)
    14c0:	88 23       	and	r24, r24
    14c2:	41 f3       	breq	.-48     	; 0x1494 <_Z21USART_Transmit_NumberR12USART_structi+0xb6>
    14c4:	e3 cf       	rjmp	.-58     	; 0x148c <_Z21USART_Transmit_NumberR12USART_structi+0xae>
		 USART_Transmit(USART, '0'+tens);
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
 }
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	0f 91       	pop	r16
    14ce:	08 95       	ret

000014d0 <_Z18USART_TransmitDoneR12USART_struct>:
 


bool USART_TransmitDone(USART_struct &USART)
{
	return USART.STATUS & (1<<USART_DREIF_bp);
    14d0:	fc 01       	movw	r30, r24
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
}
    14d4:	85 fb       	bst	r24, 5
    14d6:	88 27       	eor	r24, r24
    14d8:	80 f9       	bld	r24, 0
    14da:	08 95       	ret

000014dc <_Z12USB_Transmitc>:

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
    14e2:	08 95       	ret

000014e4 <_Z11USB_Receivev>:
}

char USB_Receive()
{
	// 	/* Wait for data to be received */
	while (!udi_cdc_is_rx_ready());
    14e4:	0e 94 ed 1c 	call	0x39da	; 0x39da <udi_cdc_is_rx_ready>
    14e8:	88 23       	and	r24, r24
    14ea:	e1 f3       	breq	.-8      	; 0x14e4 <_Z11USB_Receivev>
	// 	/* Get and return received data from buffer */
	return udi_cdc_getc();
    14ec:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <udi_cdc_getc>
}
    14f0:	08 95       	ret

000014f2 <_Z11USB_ReceivejRb>:

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	8c 01       	movw	r16, r24
    1500:	7b 01       	movw	r14, r22
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    1502:	89 2b       	or	r24, r25
    1504:	81 f0       	breq	.+32     	; 0x1526 <_Z11USB_ReceivejRb+0x34>
    1506:	c0 e0       	ldi	r28, 0x00	; 0
    1508:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(udi_cdc_is_rx_ready())
    150a:	0e 94 ed 1c 	call	0x39da	; 0x39da <udi_cdc_is_rx_ready>
    150e:	88 23       	and	r24, r24
    1510:	19 f0       	breq	.+6      	; 0x1518 <_Z11USB_ReceivejRb+0x26>
		{
			/* Get and return received data from buffer */
			return udi_cdc_getc();
    1512:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <udi_cdc_getc>
    1516:	0b c0       	rjmp	.+22     	; 0x152e <_Z11USB_ReceivejRb+0x3c>
    1518:	88 e0       	ldi	r24, 0x08	; 8
    151a:	8a 95       	dec	r24
    151c:	f1 f7       	brne	.-4      	; 0x151a <_Z11USB_ReceivejRb+0x28>
}

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    151e:	21 96       	adiw	r28, 0x01	; 1
    1520:	c0 17       	cp	r28, r16
    1522:	d1 07       	cpc	r29, r17
    1524:	91 f7       	brne	.-28     	; 0x150a <_Z11USB_ReceivejRb+0x18>
		}

		_delay_us(1);
	}
	
	isTimedOut = true;
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	f7 01       	movw	r30, r14
    152a:	80 83       	st	Z, r24
	return 0;
    152c:	80 e0       	ldi	r24, 0x00	; 0
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	08 95       	ret

0000153c <_Z13USB_Availablev>:

bool USB_Available()
{
	return (udi_cdc_is_tx_ready());
    153c:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <udi_cdc_is_tx_ready>
}
    1540:	08 95       	ret

00001542 <_Z18USB_TransmitStringPKc>:


void USB_TransmitString(const char* str)
{
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	fc 01       	movw	r30, r24
	for(uint8_t i = 0; str[i]; i++)
    154a:	80 81       	ld	r24, Z
    154c:	88 23       	and	r24, r24
    154e:	61 f0       	breq	.+24     	; 0x1568 <_Z18USB_TransmitStringPKc+0x26>
    1550:	8f 01       	movw	r16, r30
    1552:	c0 e0       	ldi	r28, 0x00	; 0

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
}


void USB_TransmitString(const char* str)
{
	for(uint8_t i = 0; str[i]; i++)
    155a:	cf 5f       	subi	r28, 0xFF	; 255
    155c:	f8 01       	movw	r30, r16
    155e:	ec 0f       	add	r30, r28
    1560:	f1 1d       	adc	r31, r1
    1562:	80 81       	ld	r24, Z
    1564:	81 11       	cpse	r24, r1
    1566:	f6 cf       	rjmp	.-20     	; 0x1554 <_Z18USB_TransmitStringPKc+0x12>
	USB_Transmit(str[i]);
}
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <_Z12USB_TransmitPKch>:


void USB_Transmit(const char* buff, uint8_t length)
{
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
	for(uint8_t i = 0; i < length; i++)
    1578:	66 23       	and	r22, r22
    157a:	79 f0       	breq	.+30     	; 0x159a <_Z12USB_TransmitPKch+0x2a>
    157c:	ec 01       	movw	r28, r24
    157e:	61 50       	subi	r22, 0x01	; 1
    1580:	06 2f       	mov	r16, r22
    1582:	10 e0       	ldi	r17, 0x00	; 0
    1584:	0f 5f       	subi	r16, 0xFF	; 255
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	08 0f       	add	r16, r24
    158a:	19 1f       	adc	r17, r25
	USB_Transmit(buff[i]);
    158c:	89 91       	ld	r24, Y+

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
}


void USB_Transmit(const char* buff, uint8_t length)
{
	for(uint8_t i = 0; i < length; i++)
    1594:	c0 17       	cp	r28, r16
    1596:	d1 07       	cpc	r29, r17
    1598:	c9 f7       	brne	.-14     	; 0x158c <_Z12USB_TransmitPKch+0x1c>
	USB_Transmit(buff[i]);
}
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <_Z16USB_Transmit_Hexc>:


void USB_Transmit_Hex(const char data )
{
    15a4:	cf 93       	push	r28
    15a6:	c8 2f       	mov	r28, r24
	USB_TransmitString("0x");
    15a8:	86 e7       	ldi	r24, 0x76	; 118
    15aa:	91 e2       	ldi	r25, 0x21	; 33
    15ac:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z18USB_TransmitStringPKc>
	USB_Transmit(HexToASCII(data>>4));
    15b0:	8c 2f       	mov	r24, r28
    15b2:	82 95       	swap	r24
    15b4:	8f 70       	andi	r24, 0x0F	; 15
    15b6:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>

void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
    15c0:	8c 2f       	mov	r24, r28
    15c2:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
}
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

000015d0 <_Z19USB_Transmit_Numberi>:


void USB_Transmit_Number(int16_t num)
{
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
	if(num < 0)
    15d6:	99 23       	and	r25, r25
    15d8:	3c f4       	brge	.+14     	; 0x15e8 <_Z19USB_Transmit_Numberi+0x18>
	{
		num = -num;
    15da:	d1 95       	neg	r29
    15dc:	c1 95       	neg	r28
    15de:	d1 09       	sbc	r29, r1

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15e0:	8d e2       	ldi	r24, 0x2D	; 45
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
	uint8_t ten_thousands	= (num/10000);
    15e8:	ce 01       	movw	r24, r28
    15ea:	60 e1       	ldi	r22, 0x10	; 16
    15ec:	77 e2       	ldi	r23, 0x27	; 39
    15ee:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	if(ten_thousands > 0)
    15f2:	66 23       	and	r22, r22
    15f4:	39 f0       	breq	.+14     	; 0x1604 <_Z19USB_Transmit_Numberi+0x34>
	{
		USB_Transmit('0'+ten_thousands);
    15f6:	80 e3       	ldi	r24, 0x30	; 48
    15f8:	86 0f       	add	r24, r22

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
	bool started = false;
	uint8_t ten_thousands	= (num/10000);
	if(ten_thousands > 0)
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
    1600:	21 e0       	ldi	r18, 0x01	; 1
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <_Z19USB_Transmit_Numberi+0x36>
	{
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
    1604:	20 e0       	ldi	r18, 0x00	; 0
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
	}

	uint8_t thousands	= (num/1000)%10;
    1606:	ce 01       	movw	r24, r28
    1608:	68 ee       	ldi	r22, 0xE8	; 232
    160a:	73 e0       	ldi	r23, 0x03	; 3
    160c:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1610:	cb 01       	movw	r24, r22
    1612:	6a e0       	ldi	r22, 0x0A	; 10
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	if(thousands > 0)
    161a:	88 23       	and	r24, r24
    161c:	79 f0       	breq	.+30     	; 0x163c <_Z19USB_Transmit_Numberi+0x6c>
	{
		USB_Transmit('0'+thousands);
    161e:	80 5d       	subi	r24, 0xD0	; 208

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
	{
		USB_Transmit('0'+thousands);
		started = true;
	}

	uint8_t hundreds	= (num/100)%10;
    1626:	ce 01       	movw	r24, r28
    1628:	64 e6       	ldi	r22, 0x64	; 100
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1630:	cb 01       	movw	r24, r22
    1632:	6a e0       	ldi	r22, 0x0A	; 10
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <_Z19USB_Transmit_Numberi+0x88>
    163c:	ce 01       	movw	r24, r28
    163e:	64 e6       	ldi	r22, 0x64	; 100
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1646:	cb 01       	movw	r24, r22
    1648:	6a e0       	ldi	r22, 0x0A	; 10
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	if(hundreds > 0 || started)
    1650:	81 11       	cpse	r24, r1
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_Z19USB_Transmit_Numberi+0x88>
    1654:	22 23       	and	r18, r18
    1656:	e1 f0       	breq	.+56     	; 0x1690 <_Z19USB_Transmit_Numberi+0xc0>
	{
		USB_Transmit('0'+hundreds);
    1658:	80 5d       	subi	r24, 0xD0	; 208

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
    1660:	2a e0       	ldi	r18, 0x0A	; 10
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	ce 01       	movw	r24, r28
    1666:	b9 01       	movw	r22, r18
    1668:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    166c:	cb 01       	movw	r24, r22
    166e:	b9 01       	movw	r22, r18
    1670:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	if(tens > 0 || started)
	{
		USB_Transmit('0'+tens);
    1674:	80 5d       	subi	r24, 0xD0	; 208

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
	{
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
    167c:	ce 01       	movw	r24, r28
    167e:	6a e0       	ldi	r22, 0x0A	; 10
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    1686:	80 5d       	subi	r24, 0xD0	; 208

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <udi_cdc_putc>
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <_Z19USB_Transmit_Numberi+0xda>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
    1690:	2a e0       	ldi	r18, 0x0A	; 10
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	ce 01       	movw	r24, r28
    1696:	b9 01       	movw	r22, r18
    1698:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
    169c:	cb 01       	movw	r24, r22
    169e:	b9 01       	movw	r22, r18
    16a0:	0e 94 95 30 	call	0x612a	; 0x612a <__divmodhi4>
	if(tens > 0 || started)
    16a4:	88 23       	and	r24, r24
    16a6:	51 f3       	breq	.-44     	; 0x167c <_Z19USB_Transmit_Numberi+0xac>
    16a8:	e5 cf       	rjmp	.-54     	; 0x1674 <_Z19USB_Transmit_Numberi+0xa4>
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <StopElevator>:
	}
}


/* blockly functie */
void StopElevator() {
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	1f 92       	push	r1
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	USART_TransmitString(USARTD0, "\n\r -----STOPPING ELEVATOR------ \n\r");
    16be:	69 e7       	ldi	r22, 0x79	; 121
    16c0:	71 e2       	ldi	r23, 0x21	; 33
    16c2:	80 ea       	ldi	r24, 0xA0	; 160
    16c4:	99 e0       	ldi	r25, 0x09	; 9
    16c6:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	uint16_t motor_id = ELEVATOR_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    16ca:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1); // Stopt lift motor
    16cc:	00 eb       	ldi	r16, 0xB0	; 176
    16ce:	1a e0       	ldi	r17, 0x0A	; 10
    16d0:	28 e0       	ldi	r18, 0x08	; 8
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	be 01       	movw	r22, r28
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8c e4       	ldi	r24, 0x4C	; 76
    16dc:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    16e0:	0f 90       	pop	r0
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <ElevatorIsReady>:


/* blockly functie */
bool ElevatorIsReady() {
    16ec:	cf 93       	push	r28
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
    16ee:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <elevatorDirection>
    16f2:	88 23       	and	r24, r24
    16f4:	29 f0       	breq	.+10     	; 0x1700 <ElevatorIsReady+0x14>
    16f6:	c0 91 50 23 	lds	r28, 0x2350	; 0x802350 <elevatorIsUp>
    16fa:	c1 11       	cpse	r28, r1
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <ElevatorIsReady+0x1e>
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <ElevatorIsReady+0x28>
		StopElevator();
		return 1; // Lift is boven aangekomen
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
    1700:	c0 91 4f 23 	lds	r28, 0x234F	; 0x80234f <elevatorIsDown>
    1704:	c1 11       	cpse	r28, r1
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <ElevatorIsReady+0x24>
    1708:	05 c0       	rjmp	.+10     	; 0x1714 <ElevatorIsReady+0x28>

/* blockly functie */
bool ElevatorIsReady() {
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
		StopElevator();
    170a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <StopElevator>
		return 1; // Lift is boven aangekomen
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <ElevatorIsReady+0x28>
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
		StopElevator();
    1710:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <StopElevator>
		return 1; // Lift is beneden aangekomen
	}
	else {
		return 0; // Lift is nog bezig
	}
}
    1714:	8c 2f       	mov	r24, r28
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <ElevatorButtonInISR>:
	}
}


// ISR, switch is ingedrukt
void ElevatorButtonInISR(bool UPdown) {
    171a:	cf 93       	push	r28
	if (UPdown == elevatorDirection) { //Elevator stops moving if it reaches switch opposite to moving direction (ev_richting 1 = up, 0 = down)
    171c:	90 91 51 23 	lds	r25, 0x2351	; 0x802351 <elevatorDirection>
    1720:	89 13       	cpse	r24, r25
    1722:	13 c0       	rjmp	.+38     	; 0x174a <ElevatorButtonInISR+0x30>
    1724:	c8 2f       	mov	r28, r24
		elevatorIsUp = true;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <elevatorIsUp>
		elevatorIsDown = false;
    172c:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <elevatorIsDown>
		StopElevator(); 
    1730:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <StopElevator>
	}
	if (UPdown == elevatorDirection) { //Elevator stops moving if it reaches switch opposite to moving direction (ev_richting 1 = up, 0 = down)
    1734:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <elevatorDirection>
    1738:	c8 13       	cpse	r28, r24
    173a:	07 c0       	rjmp	.+14     	; 0x174a <ElevatorButtonInISR+0x30>
		elevatorIsUp = false;
    173c:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <elevatorIsUp>
		elevatorIsDown = true;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <elevatorIsDown>
		StopElevator(); 
    1746:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <StopElevator>
	}
}
    174a:	cf 91       	pop	r28
    174c:	08 95       	ret

0000174e <resetElevator>:



// Reset de liftknoppen
void resetElevator() {
    174e:	08 95       	ret

00001750 <ElevatorInit>:
	// PORTK_INT0MASK &= ~(LF_SWITCH_PINN_DOWN);
}


// Inputs voor de lift worden op Input-Pullup gezet
void ElevatorInit() {
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
	PORTK_DIR &= ~(EV_SWITCH_PIN_UP); // Set pin as input
    1754:	e0 e2       	ldi	r30, 0x20	; 32
    1756:	f7 e0       	ldi	r31, 0x07	; 7
    1758:	80 81       	ld	r24, Z
    175a:	8f 7e       	andi	r24, 0xEF	; 239
    175c:	80 83       	st	Z, r24
	PORTK_DIR &= ~(EV_SWITCH_PIN_DOWN);
    175e:	80 81       	ld	r24, Z
    1760:	8f 7d       	andi	r24, 0xDF	; 223
    1762:	80 83       	st	Z, r24
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for DOWN\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for DOWN\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for DOWN\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for DOWN\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for DOWN\n\r"); break;
		case PIN5_bm: PORTK_PIN5CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN5CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN5CTRL for DOWN\n\r"); break;
    1764:	e5 e3       	ldi	r30, 0x35	; 53
    1766:	f7 e0       	ldi	r31, 0x07	; 7
    1768:	d8 e1       	ldi	r29, 0x18	; 24
    176a:	d0 83       	st	Z, r29
    176c:	c2 e0       	ldi	r28, 0x02	; 2
    176e:	c0 83       	st	Z, r28
    1770:	6c e9       	ldi	r22, 0x9C	; 156
    1772:	71 e2       	ldi	r23, 0x21	; 33
    1774:	80 ea       	ldi	r24, 0xA0	; 160
    1776:	99 e0       	ldi	r25, 0x09	; 9
    1778:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	switch(EV_SWITCH_PIN_UP){
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for UP\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for UP\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for UP\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for UP\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for UP\n\r"); break;
    177c:	e4 e3       	ldi	r30, 0x34	; 52
    177e:	f7 e0       	ldi	r31, 0x07	; 7
    1780:	d0 83       	st	Z, r29
    1782:	c0 83       	st	Z, r28
    1784:	64 eb       	ldi	r22, 0xB4	; 180
    1786:	71 e2       	ldi	r23, 0x21	; 33
    1788:	80 ea       	ldi	r24, 0xA0	; 160
    178a:	99 e0       	ldi	r25, 0x09	; 9
    178c:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		case PIN6_bm: PORTK_PIN6CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN6CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN6CTRL for UP\n\r"); break;
		case PIN7_bm: PORTK_PIN7CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN7CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN7CTRL for UP\n\r"); break;
		default: break;
	}

	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interrupt opwekkende pin, in het K register
    1790:	ea e2       	ldi	r30, 0x2A	; 42
    1792:	f7 e0       	ldi	r31, 0x07	; 7
    1794:	80 81       	ld	r24, Z
    1796:	80 61       	ori	r24, 0x10	; 16
    1798:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    179a:	80 81       	ld	r24, Z
    179c:	80 62       	ori	r24, 0x20	; 32
    179e:	80 83       	st	Z, r24


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    17a0:	e9 e2       	ldi	r30, 0x29	; 41
    17a2:	f7 e0       	ldi	r31, 0x07	; 7
    17a4:	80 81       	ld	r24, Z
    17a6:	81 60       	ori	r24, 0x01	; 1
    17a8:	80 83       	st	Z, r24
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <ElevatorInterruptSetup>:


// Deprecated. Functionality moved to ElevatorInit()
void ElevatorInterruptSetup() {
	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interreupt opwekkende pin, in het K register
    17b0:	ea e2       	ldi	r30, 0x2A	; 42
    17b2:	f7 e0       	ldi	r31, 0x07	; 7
    17b4:	80 81       	ld	r24, Z
    17b6:	80 61       	ori	r24, 0x10	; 16
    17b8:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    17ba:	80 81       	ld	r24, Z
    17bc:	80 62       	ori	r24, 0x20	; 32
    17be:	80 83       	st	Z, r24

	PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; // Interupts op beide flanken
    17c0:	e4 e3       	ldi	r30, 0x34	; 52
    17c2:	f7 e0       	ldi	r31, 0x07	; 7
    17c4:	80 81       	ld	r24, Z
    17c6:	82 60       	ori	r24, 0x02	; 2
    17c8:	80 83       	st	Z, r24
	PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc;
    17ca:	e5 e3       	ldi	r30, 0x35	; 53
    17cc:	f7 e0       	ldi	r31, 0x07	; 7
    17ce:	80 81       	ld	r24, Z
    17d0:	82 60       	ori	r24, 0x02	; 2
    17d2:	80 83       	st	Z, r24
	// 31-03-2021, Falling edges om gedrag daarvan te bestuderen


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    17d4:	e9 e2       	ldi	r30, 0x29	; 41
    17d6:	f7 e0       	ldi	r31, 0x07	; 7
    17d8:	80 81       	ld	r24, Z
    17da:	81 60       	ori	r24, 0x01	; 1
    17dc:	80 83       	st	Z, r24
    17de:	08 95       	ret

000017e0 <ConfigElevator>:
	}
}



bool ConfigElevator(bool direction) {
    17e0:	cf 93       	push	r28
    17e2:	c8 2f       	mov	r28, r24
	ElevatorInit(); // Liftpinnen worden als input ingesteld
    17e4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <ElevatorInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17e8:	2f e7       	ldi	r18, 0x7F	; 127
    17ea:	82 e3       	ldi	r24, 0x32	; 50
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	21 50       	subi	r18, 0x01	; 1
    17f0:	80 40       	sbci	r24, 0x00	; 0
    17f2:	90 40       	sbci	r25, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <ConfigElevator+0xe>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <ConfigElevator+0x18>
    17f8:	00 00       	nop
	_delay_ms(30); // Debounce tijd

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
    17fa:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17fe:	94 fd       	sbrc	r25, 4
    1800:	19 c0       	rjmp	.+50     	; 0x1834 <ConfigElevator+0x54>
    1802:	c1 11       	cpse	r28, r1
    1804:	1c c0       	rjmp	.+56     	; 0x183e <ConfigElevator+0x5e>
    1806:	48 c0       	rjmp	.+144    	; 0x1898 <ConfigElevator+0xb8>
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    1808:	c1 11       	cpse	r28, r1
    180a:	21 c0       	rjmp	.+66     	; 0x184e <ConfigElevator+0x6e>
    180c:	1c c0       	rjmp	.+56     	; 0x1846 <ConfigElevator+0x66>
		elevatorIsDown = true;
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    180e:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <elevatorIsDown>
    1812:	81 11       	cpse	r24, r1
    1814:	0d c0       	rjmp	.+26     	; 0x1830 <ConfigElevator+0x50>
    1816:	1f c0       	rjmp	.+62     	; 0x1856 <ConfigElevator+0x76>
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    1818:	c1 11       	cpse	r28, r1
    181a:	43 c0       	rjmp	.+134    	; 0x18a2 <ConfigElevator+0xc2>
    181c:	25 c0       	rjmp	.+74     	; 0x1868 <ConfigElevator+0x88>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    181e:	c1 11       	cpse	r28, r1
    1820:	27 c0       	rjmp	.+78     	; 0x1870 <ConfigElevator+0x90>
    1822:	2a c0       	rjmp	.+84     	; 0x1878 <ConfigElevator+0x98>
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    1824:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1828:	85 fd       	sbrc	r24, 5
    182a:	2c c0       	rjmp	.+88     	; 0x1884 <ConfigElevator+0xa4>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	3e c0       	rjmp	.+124    	; 0x18ac <ConfigElevator+0xcc>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	3c c0       	rjmp	.+120    	; 0x18ac <ConfigElevator+0xcc>

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    1834:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1838:	85 ff       	sbrs	r24, 5
    183a:	e6 cf       	rjmp	.-52     	; 0x1808 <ConfigElevator+0x28>
    183c:	08 c0       	rjmp	.+16     	; 0x184e <ConfigElevator+0x6e>
	_delay_ms(30); // Debounce tijd

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <elevatorIsUp>
    1844:	27 c0       	rjmp	.+78     	; 0x1894 <ConfigElevator+0xb4>
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
		elevatorIsDown = true;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <elevatorIsDown>
    184c:	23 c0       	rjmp	.+70     	; 0x1894 <ConfigElevator+0xb4>
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    184e:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <elevatorIsUp>
    1852:	81 11       	cpse	r24, r1
    1854:	dc cf       	rjmp	.-72     	; 0x180e <ConfigElevator+0x2e>
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    1856:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    185a:	84 ff       	sbrs	r24, 4
    185c:	dd cf       	rjmp	.-70     	; 0x1818 <ConfigElevator+0x38>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    185e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1862:	85 ff       	sbrs	r24, 5
    1864:	dc cf       	rjmp	.-72     	; 0x181e <ConfigElevator+0x3e>
    1866:	08 c0       	rjmp	.+16     	; 0x1878 <ConfigElevator+0x98>
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <elevatorIsUp>
    186e:	0e c0       	rjmp	.+28     	; 0x188c <ConfigElevator+0xac>
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <elevatorIsDown>
    1876:	0a c0       	rjmp	.+20     	; 0x188c <ConfigElevator+0xac>
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    1878:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    187c:	84 fd       	sbrc	r24, 4
    187e:	d2 cf       	rjmp	.-92     	; 0x1824 <ConfigElevator+0x44>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <ConfigElevator+0xcc>
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
		elevatorIsUp = false;
    1884:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <elevatorIsUp>
		elevatorIsDown = false;
    1888:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <elevatorIsDown>
	}

	

	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
    188c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <ElevatorInterruptSetup>
		return 1; // Lift mag starten
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0c c0       	rjmp	.+24     	; 0x18ac <ConfigElevator+0xcc>
	}
	else {
		return 0; // Lift mag niet starten
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	0a c0       	rjmp	.+20     	; 0x18ac <ConfigElevator+0xcc>

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    1898:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    189c:	85 ff       	sbrs	r24, 5
    189e:	d3 cf       	rjmp	.-90     	; 0x1846 <ConfigElevator+0x66>
    18a0:	d6 cf       	rjmp	.-84     	; 0x184e <ConfigElevator+0x6e>
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    18a2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    18a6:	85 ff       	sbrs	r24, 5
    18a8:	e3 cf       	rjmp	.-58     	; 0x1870 <ConfigElevator+0x90>
    18aa:	e6 cf       	rjmp	.-52     	; 0x1878 <ConfigElevator+0x98>
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
	}
}
    18ac:	cf 91       	pop	r28
    18ae:	08 95       	ret

000018b0 <MoveElevator>:

bool elevatorDirection;							// Richting van de lift
volatile bool elevatorIsUp, elevatorIsDown;	// Boleans om de stand van de lift bij te houden

/* blockly functie */
void MoveElevator(bool direction) {
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	28 97       	sbiw	r28, 0x08	; 8
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	18 2f       	mov	r17, r24
	elevatorDirection = direction;
    18c8:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <elevatorDirection>
	if (ConfigElevator(direction) == true) {
    18cc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <ConfigElevator>
    18d0:	88 23       	and	r24, r24
    18d2:	31 f1       	breq	.+76     	; 0x1920 <MoveElevator+0x70>
		
		uint16_t motor_id = ELEVATOR_MOTOR_ID; // Motor ID van lift
		bool Direction = !direction;
    18d4:	ee 24       	eor	r14, r14
    18d6:	e3 94       	inc	r14
    18d8:	f1 2e       	mov	r15, r17
    18da:	fe 24       	eor	r15, r14

		char directiondata[] = { Direction };
    18dc:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    18de:	00 eb       	ldi	r16, 0xB0	; 176
    18e0:	1a e0       	ldi	r17, 0x0A	; 10
    18e2:	28 e0       	ldi	r18, 0x08	; 8
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	be 01       	movw	r22, r28
    18e8:	68 5f       	subi	r22, 0xF8	; 248
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8a e4       	ldi	r24, 0x4A	; 74
    18ee:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { 0x03,0x66,0xFF,0xFF,Direction,MOTOR_STEP_HALF,MOTOR_ON };
    18f2:	be 01       	movw	r22, r28
    18f4:	6f 5f       	subi	r22, 0xFF	; 255
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	87 e0       	ldi	r24, 0x07	; 7
    18fa:	fb 01       	movw	r30, r22
    18fc:	11 92       	st	Z+, r1
    18fe:	8a 95       	dec	r24
    1900:	e9 f7       	brne	.-6      	; 0x18fc <MoveElevator+0x4c>
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	86 e6       	ldi	r24, 0x66	; 102
    1908:	8a 83       	std	Y+2, r24	; 0x02
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	8b 83       	std	Y+3, r24	; 0x03
    190e:	8c 83       	std	Y+4, r24	; 0x04
    1910:	ee 82       	std	Y+6, r14	; 0x06
    1912:	ef 82       	std	Y+7, r14	; 0x07
    1914:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    1916:	28 e0       	ldi	r18, 0x08	; 8
    1918:	47 e0       	ldi	r20, 0x07	; 7
    191a:	86 e4       	ldi	r24, 0x46	; 70
    191c:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <_Z11gpioSetModeh9gpioModes>:


void gpioSetMode(uint8_t pin, gpioModes_t mode)
{
	//Set the PORTK Direction register using the DIRSET and DIRCLR register
	if(mode == GPIO_MODE_INPUT){
    1934:	61 11       	cpse	r22, r1
    1936:	03 c0       	rjmp	.+6      	; 0x193e <_Z11gpioSetModeh9gpioModes+0xa>
		//Write PORTK_DIR bit 'pin' to 0
		PORTK_DIRCLR = pin;
    1938:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <__TEXT_REGION_LENGTH__+0x700722>
    193c:	08 95       	ret
	}
	else if(mode == GPIO_MODE_OUTPUT){
    193e:	61 30       	cpi	r22, 0x01	; 1
    1940:	11 f4       	brne	.+4      	; 0x1946 <_Z11gpioSetModeh9gpioModes+0x12>
		PORTK_DIRSET = pin;
    1942:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <__TEXT_REGION_LENGTH__+0x700721>
    1946:	08 95       	ret

00001948 <_Z12gpioSetLevelhb>:
}

void gpioSetLevel(uint8_t pin, bool level)
{
	//Set the output level of PORTK using the OUTSET and OUTCLR register
	if(level){
    1948:	66 23       	and	r22, r22
    194a:	19 f0       	breq	.+6      	; 0x1952 <_Z12gpioSetLevelhb+0xa>
		PORTK_OUTSET = pin;
    194c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1950:	08 95       	ret
	}
	else{
		PORTK_OUTCLR = pin;
    1952:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    1956:	08 95       	ret

00001958 <_Z12gpioGetLevelh>:
}

bool gpioGetLevel(uint8_t pin)
{
	
	return ((PORTK_IN & pin) ? 1 : 0);
    1958:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    195c:	98 23       	and	r25, r24
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	09 f4       	brne	.+2      	; 0x1964 <_Z12gpioGetLevelh+0xc>
    1962:	80 e0       	ldi	r24, 0x00	; 0
}
    1964:	08 95       	ret

00001966 <IO_ReadWrite>:

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
    1966:	98 2f       	mov	r25, r24
	switch(io_port)
    1968:	46 2f       	mov	r20, r22
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	fa 01       	movw	r30, r20
    196e:	31 97       	sbiw	r30, 0x01	; 1
    1970:	ec 30       	cpi	r30, 0x0C	; 12
    1972:	f1 05       	cpc	r31, r1
    1974:	08 f0       	brcs	.+2      	; 0x1978 <IO_ReadWrite+0x12>
    1976:	b6 c0       	rjmp	.+364    	; 0x1ae4 <IO_ReadWrite+0x17e>
    1978:	88 27       	eor	r24, r24
    197a:	e2 50       	subi	r30, 0x02	; 2
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	8f 4f       	sbci	r24, 0xFF	; 255
    1980:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <__tablejump2__>
	{
		case 1:
		if (value == true)
    1984:	99 23       	and	r25, r25
    1986:	21 f0       	breq	.+8      	; 0x1990 <IO_ReadWrite+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    1988:	80 e8       	ldi	r24, 0x80	; 128
    198a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <IO_ReadWrite+0x30>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
    1990:	80 e8       	ldi	r24, 0x80	; 128
    1992:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    1996:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    199a:	88 1f       	adc	r24, r24
    199c:	88 27       	eor	r24, r24
    199e:	88 1f       	adc	r24, r24
    19a0:	08 95       	ret
		break;
		
		case 2:
		if (value == true)
    19a2:	99 23       	and	r25, r25
    19a4:	21 f0       	breq	.+8      	; 0x19ae <IO_ReadWrite+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    19a6:	80 e4       	ldi	r24, 0x40	; 64
    19a8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19ac:	03 c0       	rjmp	.+6      	; 0x19b4 <IO_ReadWrite+0x4e>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
    19ae:	80 e4       	ldi	r24, 0x40	; 64
    19b0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    19b4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19b8:	86 fb       	bst	r24, 6
    19ba:	88 27       	eor	r24, r24
    19bc:	80 f9       	bld	r24, 0
    19be:	08 95       	ret
		break;
		
		case 3:
		if (value == true)
    19c0:	99 23       	and	r25, r25
    19c2:	21 f0       	breq	.+8      	; 0x19cc <IO_ReadWrite+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    19c4:	80 e2       	ldi	r24, 0x20	; 32
    19c6:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <IO_ReadWrite+0x6c>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
    19cc:	80 e2       	ldi	r24, 0x20	; 32
    19ce:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    19d2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19d6:	85 fb       	bst	r24, 5
    19d8:	88 27       	eor	r24, r24
    19da:	80 f9       	bld	r24, 0
    19dc:	08 95       	ret
		break;
		
		case 4: //Lift limit switches
		if (value == true)
    19de:	99 23       	and	r25, r25
    19e0:	21 f0       	breq	.+8      	; 0x19ea <IO_ReadWrite+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    19e2:	80 e1       	ldi	r24, 0x10	; 16
    19e4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <IO_ReadWrite+0x8a>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
    19ea:	80 e1       	ldi	r24, 0x10	; 16
    19ec:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    19f0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19f4:	82 95       	swap	r24
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	08 95       	ret
		break;
		
		case 5:
		if (value == true)
    19fa:	99 23       	and	r25, r25
    19fc:	21 f0       	breq	.+8      	; 0x1a06 <IO_ReadWrite+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    19fe:	88 e0       	ldi	r24, 0x08	; 8
    1a00:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <IO_ReadWrite+0xa6>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
    1a06:	88 e0       	ldi	r24, 0x08	; 8
    1a08:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    1a0c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a10:	83 fb       	bst	r24, 3
    1a12:	88 27       	eor	r24, r24
    1a14:	80 f9       	bld	r24, 0
    1a16:	08 95       	ret
		break;
		
		case 6:
		if (value == true)
    1a18:	99 23       	and	r25, r25
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <IO_ReadWrite+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a22:	03 c0       	rjmp	.+6      	; 0x1a2a <IO_ReadWrite+0xc4>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
    1a24:	84 e0       	ldi	r24, 0x04	; 4
    1a26:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    1a2a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a2e:	82 fb       	bst	r24, 2
    1a30:	88 27       	eor	r24, r24
    1a32:	80 f9       	bld	r24, 0
    1a34:	08 95       	ret
		break;
		
		case 7:
		if (value == true)
    1a36:	99 23       	and	r25, r25
    1a38:	21 f0       	breq	.+8      	; 0x1a42 <IO_ReadWrite+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <IO_ReadWrite+0xe2>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    1a48:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a4c:	86 95       	lsr	r24
    1a4e:	81 70       	andi	r24, 0x01	; 1
    1a50:	08 95       	ret
		break;
		
		case 8:
		if (value == true)
    1a52:	99 23       	and	r25, r25
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <IO_ReadWrite+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <IO_ReadWrite+0xfe>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    1a64:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a68:	81 70       	andi	r24, 0x01	; 1
    1a6a:	08 95       	ret
		break;
		
		case 9:
		if (value == true)
    1a6c:	99 23       	and	r25, r25
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <IO_ReadWrite+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    1a70:	80 e8       	ldi	r24, 0x80	; 128
    1a72:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <IO_ReadWrite+0x118>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
    1a78:	80 e8       	ldi	r24, 0x80	; 128
    1a7a:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    1a7e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    1a82:	88 1f       	adc	r24, r24
    1a84:	88 27       	eor	r24, r24
    1a86:	88 1f       	adc	r24, r24
    1a88:	08 95       	ret
		break;
		
		case 10:
		if (value == true)
    1a8a:	99 23       	and	r25, r25
    1a8c:	21 f0       	breq	.+8      	; 0x1a96 <IO_ReadWrite+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    1a8e:	80 e4       	ldi	r24, 0x40	; 64
    1a90:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    1a94:	03 c0       	rjmp	.+6      	; 0x1a9c <IO_ReadWrite+0x136>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
    1a96:	80 e4       	ldi	r24, 0x40	; 64
    1a98:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    1a9c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    1aa0:	86 fb       	bst	r24, 6
    1aa2:	88 27       	eor	r24, r24
    1aa4:	80 f9       	bld	r24, 0
    1aa6:	08 95       	ret
		break;
		
		case 11:
		if (value == true)
    1aa8:	99 23       	and	r25, r25
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <IO_ReadWrite+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    1aac:	80 e8       	ldi	r24, 0x80	; 128
    1aae:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <IO_ReadWrite+0x154>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
    1ab4:	80 e8       	ldi	r24, 0x80	; 128
    1ab6:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    1aba:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    1abe:	88 1f       	adc	r24, r24
    1ac0:	88 27       	eor	r24, r24
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	08 95       	ret
		break;
		
		case 12:
		if (value == true)
    1ac6:	99 23       	and	r25, r25
    1ac8:	21 f0       	breq	.+8      	; 0x1ad2 <IO_ReadWrite+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    1aca:	80 e4       	ldi	r24, 0x40	; 64
    1acc:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <IO_ReadWrite+0x172>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
    1ad2:	80 e4       	ldi	r24, 0x40	; 64
    1ad4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    1ad8:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    1adc:	86 fb       	bst	r24, 6
    1ade:	88 27       	eor	r24, r24
    1ae0:	80 f9       	bld	r24, 0
    1ae2:	08 95       	ret
		break;
		
	}
	return 0;
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
}
    1ae6:	08 95       	ret

00001ae8 <SelectColour>:

char colour[] = {'#','0','0','0','0','0','0'};


/* blockly functie - functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft */
uint16_t SelectColour(uint16_t i) { return i; }
    1ae8:	08 95       	ret

00001aea <CompareColours>:


/* blockly functie */
#ifdef COLOUR_AS_INDEX
bool CompareColours(uint16_t c1, uint16_t c2) {
	return (c1 == c2);
    1aea:	21 e0       	ldi	r18, 0x01	; 1
    1aec:	86 17       	cp	r24, r22
    1aee:	97 07       	cpc	r25, r23
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <CompareColours+0xa>
    1af2:	20 e0       	ldi	r18, 0x00	; 0
#else
bool CompareColours(char *c1, char *c2) {
	return CompareStrings(c1,c2,7); //"#rrggbb"
#endif
}
    1af4:	82 2f       	mov	r24, r18
    1af6:	08 95       	ret

00001af8 <ReadOneColour>:
	#endif
}


/* stel de kleursensor in en lees 1x een kleur */
uint16_t ReadOneColour(uint8_t colour) {
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
//	PORTJ_DIR &= ~(PIN6_bm);	//set pin as input
	PORTH_DIR |= PIN6_bm | PIN7_bm;	//set pins as output	
    1afc:	e0 ee       	ldi	r30, 0xE0	; 224
    1afe:	f6 e0       	ldi	r31, 0x06	; 6
    1b00:	90 81       	ld	r25, Z
    1b02:	90 6c       	ori	r25, 0xC0	; 192
    1b04:	90 83       	st	Z, r25
	switch (colour) {
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	59 f0       	breq	.+22     	; 0x1b20 <ReadOneColour+0x28>
    1b0a:	18 f0       	brcs	.+6      	; 0x1b12 <ReadOneColour+0x1a>
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	79 f0       	breq	.+30     	; 0x1b2e <ReadOneColour+0x36>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <ReadOneColour+0x42>
		case 0: //red
		PORTH_OUTCLR = (1<<PIN7_bp); //S2, pin 11, schrijf LOW
    1b12:	e6 ee       	ldi	r30, 0xE6	; 230
    1b14:	f6 e0       	ldi	r31, 0x06	; 6
    1b16:	80 e8       	ldi	r24, 0x80	; 128
    1b18:	80 83       	st	Z, r24
		PORTH_OUTCLR = (1<<PIN6_bp); //S3, pin 12, schrijf LOW
    1b1a:	80 e4       	ldi	r24, 0x40	; 64
    1b1c:	80 83       	st	Z, r24
		break;
    1b1e:	0d c0       	rjmp	.+26     	; 0x1b3a <ReadOneColour+0x42>
		
		case 1: //green
		PORTH_OUTSET = (1<<PIN7_bp); //S2, pin 11, schrijf HIGH
    1b20:	e5 ee       	ldi	r30, 0xE5	; 229
    1b22:	f6 e0       	ldi	r31, 0x06	; 6
    1b24:	80 e8       	ldi	r24, 0x80	; 128
    1b26:	80 83       	st	Z, r24
		PORTH_OUTSET = (1<<PIN6_bp); //S3, pin 12, schrijf HIGH
    1b28:	80 e4       	ldi	r24, 0x40	; 64
    1b2a:	80 83       	st	Z, r24
		break;
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <ReadOneColour+0x42>
		
		case 2: //blue
		PORTH_OUTCLR = (1<<PIN7_bp); //S2, pin 11, schrijf LOW
    1b2e:	80 e8       	ldi	r24, 0x80	; 128
    1b30:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		PORTH_OUTSET = (1<<PIN6_bp); //S3, pin 12, schrijf HIGH
    1b34:	80 e4       	ldi	r24, 0x40	; 64
    1b36:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
		break;
	}
	
	return (uint16_t) pulseIn(&PORTJ, PIN6_bm, 0, 10000); //pin 10
    1b3a:	00 e1       	ldi	r16, 0x10	; 16
    1b3c:	17 e2       	ldi	r17, 0x27	; 39
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	60 e4       	ldi	r22, 0x40	; 64
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	97 e0       	ldi	r25, 0x07	; 7
    1b4a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <pulseIn>
}
    1b4e:	cb 01       	movw	r24, r22
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <ValToColour>:
	return (uint8_t) hex2int(i);
}


/* van integers naar \#rrggbb string */
char* ValToColour(uint8_t r, uint8_t g, uint8_t b) {
    1b56:	ff 92       	push	r15
    1b58:	0f 93       	push	r16
    1b5a:	1f 93       	push	r17
    1b5c:	cf 93       	push	r28
    1b5e:	df 93       	push	r29
    1b60:	f8 2e       	mov	r15, r24
    1b62:	06 2f       	mov	r16, r22
    1b64:	14 2f       	mov	r17, r20
	colour[1] = HexToASCII(r>>4);
    1b66:	82 95       	swap	r24
    1b68:	8f 70       	andi	r24, 0x0F	; 15
    1b6a:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    1b6e:	c3 e0       	ldi	r28, 0x03	; 3
    1b70:	d0 e2       	ldi	r29, 0x20	; 32
    1b72:	89 83       	std	Y+1, r24	; 0x01
	colour[2] = HexToASCII(r);
    1b74:	8f 2d       	mov	r24, r15
    1b76:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
	colour[3] = HexToASCII(g>>4);
    1b7c:	80 2f       	mov	r24, r16
    1b7e:	82 95       	swap	r24
    1b80:	8f 70       	andi	r24, 0x0F	; 15
    1b82:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    1b86:	8b 83       	std	Y+3, r24	; 0x03
	colour[4] = HexToASCII(g);
    1b88:	80 2f       	mov	r24, r16
    1b8a:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    1b8e:	8c 83       	std	Y+4, r24	; 0x04
	colour[5] = HexToASCII(b>>4);
    1b90:	81 2f       	mov	r24, r17
    1b92:	82 95       	swap	r24
    1b94:	8f 70       	andi	r24, 0x0F	; 15
    1b96:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
	colour[6] = HexToASCII(b);
    1b9c:	81 2f       	mov	r24, r17
    1b9e:	0e 94 35 08 	call	0x106a	; 0x106a <_Z10HexToASCIIh>
    1ba2:	8e 83       	std	Y+6, r24	; 0x06
    1ba4:	8f e2       	ldi	r24, 0x2F	; 47
    1ba6:	95 e7       	ldi	r25, 0x75	; 117
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <ValToColour+0x52>
    1bac:	00 c0       	rjmp	.+0      	; 0x1bae <ValToColour+0x58>
    1bae:	00 00       	nop
	_delay_ms(5); //zodat i[6] goed wordt opgeslagen
	char *i_ptr = colour;
	return i_ptr; //var mag na het vergelijken meteen overschreven worden
}
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	08 95       	ret

00001bbe <RoundColourVal>:


/* convert RGB value 0...255 to 0, 128 or 255 (colours from blockly) */
uint8_t RoundColourVal(uint8_t val) {
	switch (val) {
    1bbe:	80 38       	cpi	r24, 0x80	; 128
    1bc0:	10 f0       	brcs	.+4      	; 0x1bc6 <RoundColourVal+0x8>
		case 0 ... 84:		return 0;
		case 85 ... 169:	return 128;
		case 170 ... 255:	return 255;
		#else
		case 0 ... 127:		return 0;
		case 128 ... 255:	return 255;
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	08 95       	ret
		#if defined ALLOW_COLOURV_128 && !defined COLOUR_AS_INDEX
		case 0 ... 84:		return 0;
		case 85 ... 169:	return 128;
		case 170 ... 255:	return 255;
		#else
		case 0 ... 127:		return 0;
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
			return 255;
		} else {
			return 0;
		}
	}
}
    1bc8:	08 95       	ret

00001bca <FrequencyToColourVal>:


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f1       	breq	.+90     	; 0x1c28 <FrequencyToColourVal+0x5e>
	long val = 0;
	switch (colour) {
    1bce:	63 30       	cpi	r22, 0x03	; 3
    1bd0:	98 f4       	brcc	.+38     	; 0x1bf8 <FrequencyToColourVal+0x2e>
		
		case 1: //green
		val = map(freq, MINGREENFREQ, MAXGREENFREQ, 0, 255);
		
		case 2: //blue
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
    1bd2:	a0 e0       	ldi	r26, 0x00	; 0
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0

/*
 * https://www.arduino.cc/reference/en/language/functions/math/map/ 
 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1bd6:	9c 01       	movw	r18, r24
    1bd8:	ad 01       	movw	r20, r26
    1bda:	2c 57       	subi	r18, 0x7C	; 124
    1bdc:	31 09       	sbc	r19, r1
    1bde:	41 09       	sbc	r20, r1
    1be0:	51 09       	sbc	r21, r1
    1be2:	af ef       	ldi	r26, 0xFF	; 255
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	0e 94 11 31 	call	0x6222	; 0x6222 <__muluhisi3>
    1bea:	22 e9       	ldi	r18, 0x92	; 146
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f ef       	ldi	r20, 0xFF	; 255
    1bf0:	5f ef       	ldi	r21, 0xFF	; 255
    1bf2:	0e 94 cb 30 	call	0x6196	; 0x6196 <__divmodsi4>
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <FrequencyToColourVal+0x36>


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
	long val = 0;
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	82 2f       	mov	r24, r18
    1c02:	93 2f       	mov	r25, r19
    1c04:	a4 2f       	mov	r26, r20
    1c06:	b5 2f       	mov	r27, r21
    1c08:	bb 23       	and	r27, r27
    1c0a:	1c f4       	brge	.+6      	; 0x1c12 <FrequencyToColourVal+0x48>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	dc 01       	movw	r26, r24
    1c12:	8f 3f       	cpi	r24, 0xFF	; 255
    1c14:	91 05       	cpc	r25, r1
    1c16:	a1 05       	cpc	r26, r1
    1c18:	b1 05       	cpc	r27, r1
    1c1a:	39 f0       	breq	.+14     	; 0x1c2a <FrequencyToColourVal+0x60>
    1c1c:	34 f0       	brlt	.+12     	; 0x1c2a <FrequencyToColourVal+0x60>
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	a0 e0       	ldi	r26, 0x00	; 0
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
		case 2: //blue
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
	}
	if (val<0) { val = 0; }
	if (val>255) { val = 255; }
	return (uint8_t) val;
    1c26:	08 95       	ret
}


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
    1c28:	80 e0       	ldi	r24, 0x00	; 0
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
	}
	if (val<0) { val = 0; }
	if (val>255) { val = 255; }
	return (uint8_t) val;
}
    1c2a:	08 95       	ret

00001c2c <ArrAvg>:


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
    1c2c:	26 2f       	mov	r18, r22
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1c2e:	66 23       	and	r22, r22
    1c30:	b9 f0       	breq	.+46     	; 0x1c60 <ArrAvg+0x34>
    1c32:	fc 01       	movw	r30, r24
    1c34:	3f ef       	ldi	r19, 0xFF	; 255
    1c36:	36 0f       	add	r19, r22
    1c38:	a3 2f       	mov	r26, r19
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	11 96       	adiw	r26, 0x01	; 1
    1c3e:	aa 0f       	add	r26, r26
    1c40:	bb 1f       	adc	r27, r27
    1c42:	a8 0f       	add	r26, r24
    1c44:	b9 1f       	adc	r27, r25
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	cb 01       	movw	r24, r22
		sum += a[i];
    1c4c:	41 91       	ld	r20, Z+
    1c4e:	51 91       	ld	r21, Z+
    1c50:	64 0f       	add	r22, r20
    1c52:	75 1f       	adc	r23, r21
    1c54:	81 1d       	adc	r24, r1
    1c56:	91 1d       	adc	r25, r1


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1c58:	ea 17       	cp	r30, r26
    1c5a:	fb 07       	cpc	r31, r27
    1c5c:	b9 f7       	brne	.-18     	; 0x1c4c <ArrAvg+0x20>
    1c5e:	03 c0       	rjmp	.+6      	; 0x1c66 <ArrAvg+0x3a>
}


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	cb 01       	movw	r24, r22
	for (uint8_t i=0; i<size; i++) {
		sum += a[i];
	}
	sum /= size;
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>
	return sum;
}
    1c70:	c9 01       	movw	r24, r18
    1c72:	08 95       	ret

00001c74 <CompareStrings>:


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
    1c74:	44 23       	and	r20, r20
    1c76:	49 f0       	breq	.+18     	; 0x1c8a <CompareStrings+0x16>
		if (c1+i != c2+i) {
    1c78:	86 17       	cp	r24, r22
    1c7a:	97 07       	cpc	r25, r23
    1c7c:	41 f4       	brne	.+16     	; 0x1c8e <CompareStrings+0x1a>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
	return sum;
}


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	84 13       	cpse	r24, r20
    1c84:	fd cf       	rjmp	.-6      	; 0x1c80 <CompareStrings+0xc>
		if (c1+i != c2+i) {
			return 0;
		}
	}
	return 1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	08 95       	ret
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	08 95       	ret


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
		if (c1+i != c2+i) {
			return 0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
    1c90:	08 95       	ret

00001c92 <hex2int>:
/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    while (*hex) {
    1c92:	fc 01       	movw	r30, r24
    1c94:	30 81       	ld	r19, Z
    1c96:	33 23       	and	r19, r19
    1c98:	89 f1       	breq	.+98     	; 0x1cfc <hex2int+0x6a>
    1c9a:	31 96       	adiw	r30, 0x01	; 1
    1c9c:	60 e0       	ldi	r22, 0x00	; 0
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	cb 01       	movw	r24, r22
        // get current character then increment
        uint8_t byte = *hex++; 
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
    1ca2:	20 ed       	ldi	r18, 0xD0	; 208
    1ca4:	23 0f       	add	r18, r19
    1ca6:	2a 30       	cpi	r18, 0x0A	; 10
    1ca8:	78 f0       	brcs	.+30     	; 0x1cc8 <hex2int+0x36>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
    1caa:	2f e9       	ldi	r18, 0x9F	; 159
    1cac:	23 0f       	add	r18, r19
    1cae:	26 30       	cpi	r18, 0x06	; 6
    1cb0:	18 f4       	brcc	.+6      	; 0x1cb8 <hex2int+0x26>
    1cb2:	29 ea       	ldi	r18, 0xA9	; 169
    1cb4:	23 0f       	add	r18, r19
    1cb6:	08 c0       	rjmp	.+16     	; 0x1cc8 <hex2int+0x36>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;    
    1cb8:	2f eb       	ldi	r18, 0xBF	; 191
    1cba:	23 0f       	add	r18, r19
    1cbc:	26 30       	cpi	r18, 0x06	; 6
    1cbe:	18 f4       	brcc	.+6      	; 0x1cc6 <hex2int+0x34>
    1cc0:	29 ec       	ldi	r18, 0xC9	; 201
    1cc2:	23 0f       	add	r18, r19
    1cc4:	01 c0       	rjmp	.+2      	; 0x1cc8 <hex2int+0x36>
    1cc6:	23 2f       	mov	r18, r19
        // shift 4 to make space for new digit, and add the 4 bits of the new digit 
        val = (val << 4) | (byte & 0xF);
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	aa 1f       	adc	r26, r26
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	aa 1f       	adc	r26, r26
    1cda:	bb 1f       	adc	r27, r27
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	aa 1f       	adc	r26, r26
    1ce2:	bb 1f       	adc	r27, r27
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	bb 1f       	adc	r27, r27
    1cec:	2f 70       	andi	r18, 0x0F	; 15
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	62 2b       	or	r22, r18
/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    while (*hex) {
    1cf4:	31 91       	ld	r19, Z+
    1cf6:	31 11       	cpse	r19, r1
    1cf8:	d4 cf       	rjmp	.-88     	; 0x1ca2 <hex2int+0x10>
    1cfa:	08 95       	ret

/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	cb 01       	movw	r24, r22
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;    
        // shift 4 to make space for new digit, and add the 4 bits of the new digit 
        val = (val << 4) | (byte & 0xF);
    }
    return val;
}
    1d02:	08 95       	ret

00001d04 <ColourToRed>:
	return val;
}


/* van \#rrggbb string naar int */
uint8_t ColourToRed(char *colour) {
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <ColourToRed+0x6>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d0e:	20 e3       	ldi	r18, 0x30	; 48
    1d10:	30 e3       	ldi	r19, 0x30	; 48
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	29 83       	std	Y+1, r18	; 0x01
    1d16:	3a 83       	std	Y+2, r19	; 0x02
    1d18:	4b 83       	std	Y+3, r20	; 0x03
	memcpy(i, colour + 1, 2);
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	81 81       	ldd	r24, Z+1	; 0x01
    1d1e:	92 81       	ldd	r25, Z+2	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d24:	ce 01       	movw	r24, r28
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <hex2int>
    1d2c:	86 2f       	mov	r24, r22
}
    1d2e:	23 96       	adiw	r28, 0x03	; 3
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <ColourToGreen>:


/* van \#rrggbb string naar int */
uint8_t ColourToGreen(char *colour) {
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <ColourToGreen+0x6>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d44:	20 e3       	ldi	r18, 0x30	; 48
    1d46:	30 e3       	ldi	r19, 0x30	; 48
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	29 83       	std	Y+1, r18	; 0x01
    1d4c:	3a 83       	std	Y+2, r19	; 0x02
    1d4e:	4b 83       	std	Y+3, r20	; 0x03
	memcpy(i, colour + 3, 2);
    1d50:	fc 01       	movw	r30, r24
    1d52:	83 81       	ldd	r24, Z+3	; 0x03
    1d54:	94 81       	ldd	r25, Z+4	; 0x04
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <hex2int>
    1d62:	86 2f       	mov	r24, r22
}
    1d64:	23 96       	adiw	r28, 0x03	; 3
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	08 95       	ret

00001d70 <ColourToBlue>:


/* van \#rrggbb string naar int */
uint8_t ColourToBlue(char *colour) {
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <ColourToBlue+0x6>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d7a:	20 e3       	ldi	r18, 0x30	; 48
    1d7c:	30 e3       	ldi	r19, 0x30	; 48
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	29 83       	std	Y+1, r18	; 0x01
    1d82:	3a 83       	std	Y+2, r19	; 0x02
    1d84:	4b 83       	std	Y+3, r20	; 0x03
	memcpy(i, colour + 5, 2);
    1d86:	fc 01       	movw	r30, r24
    1d88:	85 81       	ldd	r24, Z+5	; 0x05
    1d8a:	96 81       	ldd	r25, Z+6	; 0x06
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <hex2int>
    1d98:	86 2f       	mov	r24, r22
}
    1d9a:	23 96       	adiw	r28, 0x03	; 3
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	df 91       	pop	r29
    1da2:	cf 91       	pop	r28
    1da4:	08 95       	ret

00001da6 <ColourToIndex>:

/*
 * functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft, 
 * uiteindelijk moet ReadColourSensor() een char* teruggeven die met CompareStrings wordt vergeleken. 
 */
uint8_t ColourToIndex(char *colour) {
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	8c 01       	movw	r16, r24
	//'#000000' = 0, '#0000ff' = 1, '#00ff00' = 2, '#00ffff' = 3, etc. 
	uint8_t val = 0;
	
	if (ColourToRed(colour) > 0) {
    1dae:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <ColourToRed>
    1db2:	88 23       	and	r24, r24
    1db4:	11 f0       	breq	.+4      	; 0x1dba <ColourToIndex+0x14>
		val |= (1<<2);
    1db6:	c4 e0       	ldi	r28, 0x04	; 4
    1db8:	01 c0       	rjmp	.+2      	; 0x1dbc <ColourToIndex+0x16>
 * functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft, 
 * uiteindelijk moet ReadColourSensor() een char* teruggeven die met CompareStrings wordt vergeleken. 
 */
uint8_t ColourToIndex(char *colour) {
	//'#000000' = 0, '#0000ff' = 1, '#00ff00' = 2, '#00ffff' = 3, etc. 
	uint8_t val = 0;
    1dba:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (ColourToRed(colour) > 0) {
		val |= (1<<2);
	}
	if (ColourToGreen(colour) > 0) {
    1dbc:	c8 01       	movw	r24, r16
    1dbe:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <ColourToGreen>
    1dc2:	81 11       	cpse	r24, r1
		val |= (1<<1);
    1dc4:	c2 60       	ori	r28, 0x02	; 2
	}
	if (ColourToBlue(colour) > 0) {
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <ColourToBlue>
    1dcc:	81 11       	cpse	r24, r1
		val |= (1<<0);
    1dce:	c1 60       	ori	r28, 0x01	; 1
	}
	return val;
}
    1dd0:	8c 2f       	mov	r24, r28
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	08 95       	ret

00001dda <ReadColourSensor>:


/* blockly functie - ga R G & B een aantal keer langs en lees kleur */
#define READVALTIMES 5
#ifdef COLOUR_AS_INDEX
uint16_t ReadColourSensor() {
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ff 92       	push	r15
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	2d 97       	sbiw	r28, 0x0d	; 13
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	5e 01       	movw	r10, r28
    1df8:	8b e0       	ldi	r24, 0x0B	; 11
    1dfa:	a8 0e       	add	r10, r24
    1dfc:	b1 1c       	adc	r11, r1
#endif
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
    1dfe:	f1 2c       	mov	r15, r1
    1e00:	65 01       	movw	r12, r10
    1e02:	1b c0       	rjmp	.+54     	; 0x1e3a <ReadColourSensor+0x60>
		for (uint8_t i=0; i<READVALTIMES; i++) {
			buf[i] = ReadOneColour(j);
    1e04:	8f 2d       	mov	r24, r15
    1e06:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ReadOneColour>
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	81 93       	st	Z+, r24
    1e0e:	91 93       	st	Z+, r25
    1e10:	8f 01       	movw	r16, r30
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
		for (uint8_t i=0; i<READVALTIMES; i++) {
    1e12:	ec 15       	cp	r30, r12
    1e14:	fd 05       	cpc	r31, r13
    1e16:	b1 f7       	brne	.-20     	; 0x1e04 <ReadColourSensor+0x2a>
			buf[i] = ReadOneColour(j);
		}
		//frequency mappen naar RGB value defined in blockly
		colourVal[j] = RoundColourVal(FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j));
    1e18:	65 e0       	ldi	r22, 0x05	; 5
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <ArrAvg>
    1e22:	6f 2d       	mov	r22, r15
    1e24:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <FrequencyToColourVal>
    1e28:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <RoundColourVal>
    1e2c:	f5 01       	movw	r30, r10
    1e2e:	81 93       	st	Z+, r24
    1e30:	5f 01       	movw	r10, r30
#endif
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
    1e32:	f3 94       	inc	r15
    1e34:	f3 e0       	ldi	r31, 0x03	; 3
    1e36:	ff 16       	cp	r15, r31
    1e38:	21 f0       	breq	.+8      	; 0x1e42 <ReadColourSensor+0x68>
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	0f 5f       	subi	r16, 0xFF	; 255
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	e1 cf       	rjmp	.-62     	; 0x1e04 <ReadColourSensor+0x2a>
		colourVal[j] = RoundColourVal(FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j));
//		colourVal[j] = FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j);
	}
	
	#ifdef COLOUR_AS_INDEX
	return (uint16_t) ColourToIndex(ValToColour(colourVal[0], colourVal[1], colourVal[2]));
    1e42:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e46:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e48:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <ValToColour>
    1e4c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <ColourToIndex>
	#else
	return ValToColour(colourVal[0], colourVal[1], colourVal[2]);
	#endif
}
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	2d 96       	adiw	r28, 0x0d	; 13
    1e54:	cd bf       	out	0x3d, r28	; 61
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	08 95       	ret

00001e6c <map>:


/*
 * https://www.arduino.cc/reference/en/language/functions/math/map/ 
 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	af 92       	push	r10
    1e76:	bf 92       	push	r11
    1e78:	cf 92       	push	r12
    1e7a:	df 92       	push	r13
    1e7c:	ef 92       	push	r14
    1e7e:	ff 92       	push	r15
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	29 01       	movw	r4, r18
    1e8e:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1e90:	9b 01       	movw	r18, r22
    1e92:	ac 01       	movw	r20, r24
    1e94:	24 19       	sub	r18, r4
    1e96:	35 09       	sbc	r19, r5
    1e98:	46 09       	sbc	r20, r6
    1e9a:	57 09       	sbc	r21, r7
    1e9c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e9e:	9b 89       	ldd	r25, Y+19	; 0x13
    1ea0:	ac 89       	ldd	r26, Y+20	; 0x14
    1ea2:	bd 89       	ldd	r27, Y+21	; 0x15
    1ea4:	bc 01       	movw	r22, r24
    1ea6:	cd 01       	movw	r24, r26
    1ea8:	6a 19       	sub	r22, r10
    1eaa:	7b 09       	sbc	r23, r11
    1eac:	8c 09       	sbc	r24, r12
    1eae:	9d 09       	sbc	r25, r13
    1eb0:	0e 94 71 30 	call	0x60e2	; 0x60e2 <__mulsi3>
    1eb4:	a8 01       	movw	r20, r16
    1eb6:	97 01       	movw	r18, r14
    1eb8:	24 19       	sub	r18, r4
    1eba:	35 09       	sbc	r19, r5
    1ebc:	46 09       	sbc	r20, r6
    1ebe:	57 09       	sbc	r21, r7
    1ec0:	0e 94 cb 30 	call	0x6196	; 0x6196 <__divmodsi4>
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	6a 0d       	add	r22, r10
    1eca:	7b 1d       	adc	r23, r11
    1ecc:	8c 1d       	adc	r24, r12
    1ece:	9d 1d       	adc	r25, r13
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	7f 90       	pop	r7
    1ee6:	6f 90       	pop	r6
    1ee8:	5f 90       	pop	r5
    1eea:	4f 90       	pop	r4
    1eec:	08 95       	ret

00001eee <pulseIn>:

#include "pulseIn.h"


unsigned long pulseIn(PORT_struct *port, uint8_t pin_bm, uint8_t state, unsigned long timeout)
{
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	fc 01       	movw	r30, r24
    1f04:	86 2f       	mov	r24, r22
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
    1f06:	44 23       	and	r20, r20
    1f08:	11 f0       	breq	.+4      	; 0x1f0e <pulseIn+0x20>
    1f0a:	a6 2f       	mov	r26, r22
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <pulseIn+0x22>
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    1f10:	b9 01       	movw	r22, r18
    1f12:	a8 01       	movw	r20, r16
    1f14:	44 0f       	add	r20, r20
    1f16:	55 1f       	adc	r21, r21
    1f18:	66 1f       	adc	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	04 0f       	add	r16, r20
    1f1e:	15 1f       	adc	r17, r21
    1f20:	26 1f       	adc	r18, r22
    1f22:	37 1f       	adc	r19, r23
    1f24:	36 95       	lsr	r19
    1f26:	27 95       	ror	r18
    1f28:	17 95       	ror	r17
    1f2a:	07 95       	ror	r16
    1f2c:	3f 70       	andi	r19, 0x0F	; 15
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	ba 01       	movw	r22, r20
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <pulseIn+0x66>
		if (numloops++ == maxloops) { return 0; }
    1f36:	6a 01       	movw	r12, r20
    1f38:	7b 01       	movw	r14, r22
    1f3a:	9f ef       	ldi	r25, 0xFF	; 255
    1f3c:	c9 1a       	sub	r12, r25
    1f3e:	d9 0a       	sbc	r13, r25
    1f40:	e9 0a       	sbc	r14, r25
    1f42:	f9 0a       	sbc	r15, r25
    1f44:	40 17       	cp	r20, r16
    1f46:	51 07       	cpc	r21, r17
    1f48:	62 07       	cpc	r22, r18
    1f4a:	73 07       	cpc	r23, r19
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <pulseIn+0x62>
    1f4e:	6c c0       	rjmp	.+216    	; 0x2028 <pulseIn+0x13a>
    1f50:	b7 01       	movw	r22, r14
    1f52:	a6 01       	movw	r20, r12
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
    1f54:	90 85       	ldd	r25, Z+8	; 0x08
    1f56:	98 23       	and	r25, r24
    1f58:	a9 17       	cp	r26, r25
    1f5a:	69 f3       	breq	.-38     	; 0x1f36 <pulseIn+0x48>
    1f5c:	0f c0       	rjmp	.+30     	; 0x1f7c <pulseIn+0x8e>
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1f5e:	6a 01       	movw	r12, r20
    1f60:	7b 01       	movw	r14, r22
    1f62:	9f ef       	ldi	r25, 0xFF	; 255
    1f64:	c9 1a       	sub	r12, r25
    1f66:	d9 0a       	sbc	r13, r25
    1f68:	e9 0a       	sbc	r14, r25
    1f6a:	f9 0a       	sbc	r15, r25
    1f6c:	40 17       	cp	r20, r16
    1f6e:	51 07       	cpc	r21, r17
    1f70:	62 07       	cpc	r22, r18
    1f72:	73 07       	cpc	r23, r19
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <pulseIn+0x8a>
    1f76:	5c c0       	rjmp	.+184    	; 0x2030 <pulseIn+0x142>
    1f78:	b7 01       	movw	r22, r14
    1f7a:	a6 01       	movw	r20, r12
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
    1f7c:	90 85       	ldd	r25, Z+8	; 0x08
    1f7e:	98 23       	and	r25, r24
    1f80:	a9 13       	cpse	r26, r25
    1f82:	ed cf       	rjmp	.-38     	; 0x1f5e <pulseIn+0x70>
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
    1f84:	90 85       	ldd	r25, Z+8	; 0x08
    1f86:	98 23       	and	r25, r24
    1f88:	a9 13       	cpse	r26, r25
    1f8a:	20 c0       	rjmp	.+64     	; 0x1fcc <pulseIn+0xde>
		if (numloops++ == maxloops) { return 0; }
    1f8c:	04 17       	cp	r16, r20
    1f8e:	15 07       	cpc	r17, r21
    1f90:	26 07       	cpc	r18, r22
    1f92:	37 07       	cpc	r19, r23
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <pulseIn+0xaa>
    1f96:	50 c0       	rjmp	.+160    	; 0x2038 <pulseIn+0x14a>
    1f98:	c1 2c       	mov	r12, r1
    1f9a:	d1 2c       	mov	r13, r1
    1f9c:	76 01       	movw	r14, r12
    1f9e:	0c c0       	rjmp	.+24     	; 0x1fb8 <pulseIn+0xca>
    1fa0:	4a 01       	movw	r8, r20
    1fa2:	5b 01       	movw	r10, r22
    1fa4:	8c 0c       	add	r8, r12
    1fa6:	9d 1c       	adc	r9, r13
    1fa8:	ae 1c       	adc	r10, r14
    1faa:	bf 1c       	adc	r11, r15
    1fac:	08 15       	cp	r16, r8
    1fae:	19 05       	cpc	r17, r9
    1fb0:	2a 05       	cpc	r18, r10
    1fb2:	3b 05       	cpc	r19, r11
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <pulseIn+0xca>
    1fb6:	44 c0       	rjmp	.+136    	; 0x2040 <pulseIn+0x152>
		width++;
    1fb8:	9f ef       	ldi	r25, 0xFF	; 255
    1fba:	c9 1a       	sub	r12, r25
    1fbc:	d9 0a       	sbc	r13, r25
    1fbe:	e9 0a       	sbc	r14, r25
    1fc0:	f9 0a       	sbc	r15, r25
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
    1fc2:	90 85       	ldd	r25, Z+8	; 0x08
    1fc4:	98 23       	and	r25, r24
    1fc6:	a9 17       	cp	r26, r25
    1fc8:	59 f3       	breq	.-42     	; 0x1fa0 <pulseIn+0xb2>
    1fca:	03 c0       	rjmp	.+6      	; 0x1fd2 <pulseIn+0xe4>
    1fcc:	c1 2c       	mov	r12, r1
    1fce:	d1 2c       	mov	r13, r1
    1fd0:	76 01       	movw	r14, r12

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
    1fd2:	b7 01       	movw	r22, r14
    1fd4:	a6 01       	movw	r20, r12
    1fd6:	44 0f       	add	r20, r20
    1fd8:	55 1f       	adc	r21, r21
    1fda:	66 1f       	adc	r22, r22
    1fdc:	77 1f       	adc	r23, r23
    1fde:	44 0f       	add	r20, r20
    1fe0:	55 1f       	adc	r21, r21
    1fe2:	66 1f       	adc	r22, r22
    1fe4:	77 1f       	adc	r23, r23
    1fe6:	db 01       	movw	r26, r22
    1fe8:	ca 01       	movw	r24, r20
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	aa 1f       	adc	r26, r26
    1ff0:	bb 1f       	adc	r27, r27
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	bb 1f       	adc	r27, r27
    1ffa:	84 0f       	add	r24, r20
    1ffc:	95 1f       	adc	r25, r21
    1ffe:	a6 1f       	adc	r26, r22
    2000:	b7 1f       	adc	r27, r23
    2002:	8c 0d       	add	r24, r12
    2004:	9d 1d       	adc	r25, r13
    2006:	ae 1d       	adc	r26, r14
    2008:	bf 1d       	adc	r27, r15
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	60 5f       	subi	r22, 0xF0	; 240
    2010:	7f 4f       	sbci	r23, 0xFF	; 255
    2012:	8f 4f       	sbci	r24, 0xFF	; 255
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	28 e1       	ldi	r18, 0x18	; 24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>
    2022:	ca 01       	movw	r24, r20
    2024:	b9 01       	movw	r22, r18
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <pulseIn+0x158>
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	70 e0       	ldi	r23, 0x00	; 0
    202c:	cb 01       	movw	r24, r22
    202e:	0b c0       	rjmp	.+22     	; 0x2046 <pulseIn+0x158>
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	cb 01       	movw	r24, r22
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <pulseIn+0x158>
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	cb 01       	movw	r24, r22
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <pulseIn+0x158>
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	cb 01       	movw	r24, r22
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	cf 90       	pop	r12
    2052:	bf 90       	pop	r11
    2054:	af 90       	pop	r10
    2056:	9f 90       	pop	r9
    2058:	8f 90       	pop	r8
    205a:	08 95       	ret

0000205c <SorterarmIsFinnished>:
	}
}

bool SorterarmIsFinnished(){
	return 0;
}
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	08 95       	ret

00002060 <StopSorterArm>:
	}
}

/* stop stepper */
void StopSorterArm()
{
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	cf 93       	push	r28
    2066:	df 93       	push	r29
    2068:	1f 92       	push	r1
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	char data[] = { MOTOR_OFF };
    206e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t motor_id = 0x0A;
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2070:	00 eb       	ldi	r16, 0xB0	; 176
    2072:	1a e0       	ldi	r17, 0x0A	; 10
    2074:	2a e0       	ldi	r18, 0x0A	; 10
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	be 01       	movw	r22, r28
    207a:	6f 5f       	subi	r22, 0xFF	; 255
    207c:	7f 4f       	sbci	r23, 0xFF	; 255
    207e:	8c e4       	ldi	r24, 0x4C	; 76
    2080:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2084:	0f 90       	pop	r0
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <SorterArmISR>:
volatile bool saIsLeft, saIsRight; // Sorterarm is links of rechts van zijn uiterste rijkweidte


// Interrupt ISR
void SorterArmISR(){
	if (!(PORTK_IN & sa1.switch_pin_left)){
    2090:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2094:	86 fd       	sbrc	r24, 6
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <SorterArmISR+0x18>
		StopSorterArm();
    2098:	0e 94 30 10 	call	0x2060	; 0x2060 <StopSorterArm>
		saIsLeft = true;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <saIsLeft>
		saIsRight = false;
    20a2:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
    20a6:	08 95       	ret
	}
	else if (!(PORTK_IN & sa1.switch_pin_right)){
    20a8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    20ac:	88 23       	and	r24, r24
    20ae:	44 f0       	brlt	.+16     	; 0x20c0 <SorterArmISR+0x30>
		StopSorterArm();
    20b0:	0e 94 30 10 	call	0x2060	; 0x2060 <StopSorterArm>
		saIsLeft = false;
    20b4:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
		saIsRight = true;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <saIsRight>
    20be:	08 95       	ret
	}
	else {
		saIsLeft = false;
    20c0:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
		saIsRight = false;
    20c4:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
    20c8:	08 95       	ret

000020ca <_Z17SorterarmLinksISRv>:


}

void SorterarmLinksISR() {
	saIsLeft = true;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <saIsLeft>
	saIsRight = false;
    20d0:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
	StopSorterArm();
    20d4:	0e 94 30 10 	call	0x2060	; 0x2060 <StopSorterArm>
    20d8:	08 95       	ret

000020da <_Z18SorterArmRechtsISRv>:
}

void SorterArmRechtsISR() {
	saIsLeft = false;
    20da:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
	saIsRight = true;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <saIsRight>
	StopSorterArm();
    20e4:	0e 94 30 10 	call	0x2060	; 0x2060 <StopSorterArm>
    20e8:	08 95       	ret

000020ea <SaSetInput>:


// Zet pinnen van de sorterarm als input-pullup
void SaSetInput(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_DIR &= ~(switch_pin_left);		//pin set left as input
    20ea:	e0 e2       	ldi	r30, 0x20	; 32
    20ec:	f7 e0       	ldi	r31, 0x07	; 7
    20ee:	90 81       	ld	r25, Z
    20f0:	28 2f       	mov	r18, r24
    20f2:	20 95       	com	r18
    20f4:	92 23       	and	r25, r18
    20f6:	90 83       	st	Z, r25
	PORTK_DIR &= ~(switch_pin_right);		//pin set right as input
    20f8:	90 81       	ld	r25, Z
    20fa:	26 2f       	mov	r18, r22
    20fc:	20 95       	com	r18
    20fe:	92 23       	and	r25, r18
    2100:	90 83       	st	Z, r25
	
	//Set the PINnCTRL of the left switch to PULLUP
	switch (switch_pin_left)				//pull-up
    2102:	88 30       	cpi	r24, 0x08	; 8
    2104:	29 f1       	breq	.+74     	; 0x2150 <SaSetInput+0x66>
    2106:	38 f4       	brcc	.+14     	; 0x2116 <SaSetInput+0x2c>
    2108:	82 30       	cpi	r24, 0x02	; 2
    210a:	b1 f0       	breq	.+44     	; 0x2138 <SaSetInput+0x4e>
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	d1 f0       	breq	.+52     	; 0x2144 <SaSetInput+0x5a>
    2110:	81 30       	cpi	r24, 0x01	; 1
    2112:	d9 f5       	brne	.+118    	; 0x218a <SaSetInput+0xa0>
    2114:	0b c0       	rjmp	.+22     	; 0x212c <SaSetInput+0x42>
    2116:	80 32       	cpi	r24, 0x20	; 32
    2118:	39 f1       	breq	.+78     	; 0x2168 <SaSetInput+0x7e>
    211a:	18 f4       	brcc	.+6      	; 0x2122 <SaSetInput+0x38>
    211c:	80 31       	cpi	r24, 0x10	; 16
    211e:	f1 f0       	breq	.+60     	; 0x215c <SaSetInput+0x72>
    2120:	34 c0       	rjmp	.+104    	; 0x218a <SaSetInput+0xa0>
    2122:	80 34       	cpi	r24, 0x40	; 64
    2124:	39 f1       	breq	.+78     	; 0x2174 <SaSetInput+0x8a>
    2126:	80 38       	cpi	r24, 0x80	; 128
    2128:	59 f1       	breq	.+86     	; 0x2180 <SaSetInput+0x96>
    212a:	2f c0       	rjmp	.+94     	; 0x218a <SaSetInput+0xa0>
	{
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    212c:	e0 e3       	ldi	r30, 0x30	; 48
    212e:	f7 e0       	ldi	r31, 0x07	; 7
    2130:	80 81       	ld	r24, Z
    2132:	88 61       	ori	r24, 0x18	; 24
    2134:	80 83       	st	Z, r24
    2136:	29 c0       	rjmp	.+82     	; 0x218a <SaSetInput+0xa0>
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    2138:	e1 e3       	ldi	r30, 0x31	; 49
    213a:	f7 e0       	ldi	r31, 0x07	; 7
    213c:	80 81       	ld	r24, Z
    213e:	88 61       	ori	r24, 0x18	; 24
    2140:	80 83       	st	Z, r24
    2142:	23 c0       	rjmp	.+70     	; 0x218a <SaSetInput+0xa0>
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    2144:	e2 e3       	ldi	r30, 0x32	; 50
    2146:	f7 e0       	ldi	r31, 0x07	; 7
    2148:	80 81       	ld	r24, Z
    214a:	88 61       	ori	r24, 0x18	; 24
    214c:	80 83       	st	Z, r24
    214e:	1d c0       	rjmp	.+58     	; 0x218a <SaSetInput+0xa0>
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    2150:	e3 e3       	ldi	r30, 0x33	; 51
    2152:	f7 e0       	ldi	r31, 0x07	; 7
    2154:	80 81       	ld	r24, Z
    2156:	88 61       	ori	r24, 0x18	; 24
    2158:	80 83       	st	Z, r24
    215a:	17 c0       	rjmp	.+46     	; 0x218a <SaSetInput+0xa0>
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    215c:	e4 e3       	ldi	r30, 0x34	; 52
    215e:	f7 e0       	ldi	r31, 0x07	; 7
    2160:	80 81       	ld	r24, Z
    2162:	88 61       	ori	r24, 0x18	; 24
    2164:	80 83       	st	Z, r24
    2166:	11 c0       	rjmp	.+34     	; 0x218a <SaSetInput+0xa0>
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    2168:	e5 e3       	ldi	r30, 0x35	; 53
    216a:	f7 e0       	ldi	r31, 0x07	; 7
    216c:	80 81       	ld	r24, Z
    216e:	88 61       	ori	r24, 0x18	; 24
    2170:	80 83       	st	Z, r24
    2172:	0b c0       	rjmp	.+22     	; 0x218a <SaSetInput+0xa0>
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    2174:	e6 e3       	ldi	r30, 0x36	; 54
    2176:	f7 e0       	ldi	r31, 0x07	; 7
    2178:	80 81       	ld	r24, Z
    217a:	88 61       	ori	r24, 0x18	; 24
    217c:	80 83       	st	Z, r24
    217e:	05 c0       	rjmp	.+10     	; 0x218a <SaSetInput+0xa0>
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    2180:	e7 e3       	ldi	r30, 0x37	; 55
    2182:	f7 e0       	ldi	r31, 0x07	; 7
    2184:	80 81       	ld	r24, Z
    2186:	88 61       	ori	r24, 0x18	; 24
    2188:	80 83       	st	Z, r24
		default: break;
	}

	//Set the PINnCTRL of the right switch to PULLUP
	switch(switch_pin_right){
    218a:	68 30       	cpi	r22, 0x08	; 8
    218c:	29 f1       	breq	.+74     	; 0x21d8 <SaSetInput+0xee>
    218e:	38 f4       	brcc	.+14     	; 0x219e <SaSetInput+0xb4>
    2190:	62 30       	cpi	r22, 0x02	; 2
    2192:	b1 f0       	breq	.+44     	; 0x21c0 <SaSetInput+0xd6>
    2194:	64 30       	cpi	r22, 0x04	; 4
    2196:	d1 f0       	breq	.+52     	; 0x21cc <SaSetInput+0xe2>
    2198:	61 30       	cpi	r22, 0x01	; 1
    219a:	d9 f5       	brne	.+118    	; 0x2212 <SaSetInput+0x128>
    219c:	0b c0       	rjmp	.+22     	; 0x21b4 <SaSetInput+0xca>
    219e:	60 32       	cpi	r22, 0x20	; 32
    21a0:	39 f1       	breq	.+78     	; 0x21f0 <SaSetInput+0x106>
    21a2:	18 f4       	brcc	.+6      	; 0x21aa <SaSetInput+0xc0>
    21a4:	60 31       	cpi	r22, 0x10	; 16
    21a6:	f1 f0       	breq	.+60     	; 0x21e4 <SaSetInput+0xfa>
    21a8:	08 95       	ret
    21aa:	60 34       	cpi	r22, 0x40	; 64
    21ac:	39 f1       	breq	.+78     	; 0x21fc <SaSetInput+0x112>
    21ae:	60 38       	cpi	r22, 0x80	; 128
    21b0:	59 f1       	breq	.+86     	; 0x2208 <SaSetInput+0x11e>
    21b2:	08 95       	ret
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    21b4:	e0 e3       	ldi	r30, 0x30	; 48
    21b6:	f7 e0       	ldi	r31, 0x07	; 7
    21b8:	80 81       	ld	r24, Z
    21ba:	88 61       	ori	r24, 0x18	; 24
    21bc:	80 83       	st	Z, r24
    21be:	08 95       	ret
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    21c0:	e1 e3       	ldi	r30, 0x31	; 49
    21c2:	f7 e0       	ldi	r31, 0x07	; 7
    21c4:	80 81       	ld	r24, Z
    21c6:	88 61       	ori	r24, 0x18	; 24
    21c8:	80 83       	st	Z, r24
    21ca:	08 95       	ret
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    21cc:	e2 e3       	ldi	r30, 0x32	; 50
    21ce:	f7 e0       	ldi	r31, 0x07	; 7
    21d0:	80 81       	ld	r24, Z
    21d2:	88 61       	ori	r24, 0x18	; 24
    21d4:	80 83       	st	Z, r24
    21d6:	08 95       	ret
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    21d8:	e3 e3       	ldi	r30, 0x33	; 51
    21da:	f7 e0       	ldi	r31, 0x07	; 7
    21dc:	80 81       	ld	r24, Z
    21de:	88 61       	ori	r24, 0x18	; 24
    21e0:	80 83       	st	Z, r24
    21e2:	08 95       	ret
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    21e4:	e4 e3       	ldi	r30, 0x34	; 52
    21e6:	f7 e0       	ldi	r31, 0x07	; 7
    21e8:	80 81       	ld	r24, Z
    21ea:	88 61       	ori	r24, 0x18	; 24
    21ec:	80 83       	st	Z, r24
    21ee:	08 95       	ret
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    21f0:	e5 e3       	ldi	r30, 0x35	; 53
    21f2:	f7 e0       	ldi	r31, 0x07	; 7
    21f4:	80 81       	ld	r24, Z
    21f6:	88 61       	ori	r24, 0x18	; 24
    21f8:	80 83       	st	Z, r24
    21fa:	08 95       	ret
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    21fc:	e6 e3       	ldi	r30, 0x36	; 54
    21fe:	f7 e0       	ldi	r31, 0x07	; 7
    2200:	80 81       	ld	r24, Z
    2202:	88 61       	ori	r24, 0x18	; 24
    2204:	80 83       	st	Z, r24
    2206:	08 95       	ret
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    2208:	e7 e3       	ldi	r30, 0x37	; 55
    220a:	f7 e0       	ldi	r31, 0x07	; 7
    220c:	80 81       	ld	r24, Z
    220e:	88 61       	ori	r24, 0x18	; 24
    2210:	80 83       	st	Z, r24
    2212:	08 95       	ret

00002214 <SaSetInterrupt>:


// Zet interrupts aan op de sorterarm pinnen
void SaSetInterrupt(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_INT1MASK |= switch_pin_left;		//pin listen interrupt left
    2214:	eb e2       	ldi	r30, 0x2B	; 43
    2216:	f7 e0       	ldi	r31, 0x07	; 7
    2218:	90 81       	ld	r25, Z
    221a:	98 2b       	or	r25, r24
    221c:	90 83       	st	Z, r25
	PORTK_INT1MASK |= switch_pin_right;		//pin listen interrupt right
    221e:	90 81       	ld	r25, Z
    2220:	69 2b       	or	r22, r25
    2222:	60 83       	st	Z, r22

	switch (switch_pin_left)					//sense both edges
    2224:	84 30       	cpi	r24, 0x04	; 4
    2226:	09 f1       	breq	.+66     	; 0x226a <SaSetInterrupt+0x56>
    2228:	28 f4       	brcc	.+10     	; 0x2234 <SaSetInterrupt+0x20>
    222a:	81 30       	cpi	r24, 0x01	; 1
    222c:	41 f0       	breq	.+16     	; 0x223e <SaSetInterrupt+0x2a>
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	89 f0       	breq	.+34     	; 0x2254 <SaSetInterrupt+0x40>
    2232:	3b c0       	rjmp	.+118    	; 0x22aa <SaSetInterrupt+0x96>
    2234:	88 30       	cpi	r24, 0x08	; 8
    2236:	21 f1       	breq	.+72     	; 0x2280 <SaSetInterrupt+0x6c>
    2238:	80 31       	cpi	r24, 0x10	; 16
    223a:	69 f1       	breq	.+90     	; 0x2296 <SaSetInterrupt+0x82>
    223c:	36 c0       	rjmp	.+108    	; 0x22aa <SaSetInterrupt+0x96>
	{
	case PIN0_bm: PORTK_PIN0CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc; break;
    223e:	e0 e3       	ldi	r30, 0x30	; 48
    2240:	f7 e0       	ldi	r31, 0x07	; 7
    2242:	80 81       	ld	r24, Z
    2244:	82 60       	ori	r24, 0x02	; 2
    2246:	80 83       	st	Z, r24
    2248:	e1 e3       	ldi	r30, 0x31	; 49
    224a:	f7 e0       	ldi	r31, 0x07	; 7
    224c:	80 81       	ld	r24, Z
    224e:	82 60       	ori	r24, 0x02	; 2
    2250:	80 83       	st	Z, r24
    2252:	2b c0       	rjmp	.+86     	; 0x22aa <SaSetInterrupt+0x96>
	case PIN1_bm: PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc; break;
    2254:	e1 e3       	ldi	r30, 0x31	; 49
    2256:	f7 e0       	ldi	r31, 0x07	; 7
    2258:	80 81       	ld	r24, Z
    225a:	82 60       	ori	r24, 0x02	; 2
    225c:	80 83       	st	Z, r24
    225e:	e2 e3       	ldi	r30, 0x32	; 50
    2260:	f7 e0       	ldi	r31, 0x07	; 7
    2262:	80 81       	ld	r24, Z
    2264:	82 60       	ori	r24, 0x02	; 2
    2266:	80 83       	st	Z, r24
    2268:	20 c0       	rjmp	.+64     	; 0x22aa <SaSetInterrupt+0x96>
	case PIN2_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN3CTRL |= PORT_ISC_FALLING_gc; break;
    226a:	e2 e3       	ldi	r30, 0x32	; 50
    226c:	f7 e0       	ldi	r31, 0x07	; 7
    226e:	80 81       	ld	r24, Z
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	80 83       	st	Z, r24
    2274:	e3 e3       	ldi	r30, 0x33	; 51
    2276:	f7 e0       	ldi	r31, 0x07	; 7
    2278:	80 81       	ld	r24, Z
    227a:	82 60       	ori	r24, 0x02	; 2
    227c:	80 83       	st	Z, r24
    227e:	15 c0       	rjmp	.+42     	; 0x22aa <SaSetInterrupt+0x96>
	case PIN3_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; break;
    2280:	e2 e3       	ldi	r30, 0x32	; 50
    2282:	f7 e0       	ldi	r31, 0x07	; 7
    2284:	80 81       	ld	r24, Z
    2286:	82 60       	ori	r24, 0x02	; 2
    2288:	80 83       	st	Z, r24
    228a:	e4 e3       	ldi	r30, 0x34	; 52
    228c:	f7 e0       	ldi	r31, 0x07	; 7
    228e:	80 81       	ld	r24, Z
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	80 83       	st	Z, r24
    2294:	0a c0       	rjmp	.+20     	; 0x22aa <SaSetInterrupt+0x96>
	case PIN4_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc; break;
    2296:	e2 e3       	ldi	r30, 0x32	; 50
    2298:	f7 e0       	ldi	r31, 0x07	; 7
    229a:	80 81       	ld	r24, Z
    229c:	82 60       	ori	r24, 0x02	; 2
    229e:	80 83       	st	Z, r24
    22a0:	e5 e3       	ldi	r30, 0x35	; 53
    22a2:	f7 e0       	ldi	r31, 0x07	; 7
    22a4:	80 81       	ld	r24, Z
    22a6:	82 60       	ori	r24, 0x02	; 2
    22a8:	80 83       	st	Z, r24
	}

	PORTK_INTCTRL |= PORT_INT1LVL0_bm;	//enable interrupt on PORTK
    22aa:	e9 e2       	ldi	r30, 0x29	; 41
    22ac:	f7 e0       	ldi	r31, 0x07	; 7
    22ae:	80 81       	ld	r24, Z
    22b0:	84 60       	ori	r24, 0x04	; 4
    22b2:	80 83       	st	Z, r24
    22b4:	08 95       	ret

000022b6 <ConfigSorterArm>:
bool SorterarmIsFinnished(){
	return 0;
}

bool ConfigSorterArm(){
	SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
    22b6:	60 e8       	ldi	r22, 0x80	; 128
    22b8:	80 e4       	ldi	r24, 0x40	; 64
    22ba:	0e 94 75 10 	call	0x20ea	; 0x20ea <SaSetInput>
    22be:	2f e7       	ldi	r18, 0x7F	; 127
    22c0:	82 e3       	ldi	r24, 0x32	; 50
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	21 50       	subi	r18, 0x01	; 1
    22c6:	80 40       	sbci	r24, 0x00	; 0
    22c8:	90 40       	sbci	r25, 0x00	; 0
    22ca:	e1 f7       	brne	.-8      	; 0x22c4 <ConfigSorterArm+0xe>
    22cc:	00 c0       	rjmp	.+0      	; 0x22ce <ConfigSorterArm+0x18>
    22ce:	00 00       	nop
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
    22d0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    22d4:	86 fd       	sbrc	r24, 6
    22d6:	27 c0       	rjmp	.+78     	; 0x2326 <ConfigSorterArm+0x70>
    22d8:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22dc:	81 11       	cpse	r24, r1
    22de:	28 c0       	rjmp	.+80     	; 0x2330 <ConfigSorterArm+0x7a>
    22e0:	22 c0       	rjmp	.+68     	; 0x2326 <ConfigSorterArm+0x70>
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
    22e2:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22e6:	81 11       	cpse	r24, r1
    22e8:	27 c0       	rjmp	.+78     	; 0x2338 <ConfigSorterArm+0x82>
    22ea:	15 c0       	rjmp	.+42     	; 0x2316 <ConfigSorterArm+0x60>
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    22ec:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <saIsRight>
    22f0:	81 11       	cpse	r24, r1
    22f2:	17 c0       	rjmp	.+46     	; 0x2322 <ConfigSorterArm+0x6c>
    22f4:	25 c0       	rjmp	.+74     	; 0x2340 <ConfigSorterArm+0x8a>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    22f6:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22fa:	81 11       	cpse	r24, r1
    22fc:	0c c0       	rjmp	.+24     	; 0x2316 <ConfigSorterArm+0x60>
    22fe:	3a c0       	rjmp	.+116    	; 0x2374 <ConfigSorterArm+0xbe>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2300:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    2304:	81 11       	cpse	r24, r1
    2306:	29 c0       	rjmp	.+82     	; 0x235a <ConfigSorterArm+0xa4>
    2308:	24 c0       	rjmp	.+72     	; 0x2352 <ConfigSorterArm+0x9c>
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    230a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    230e:	88 23       	and	r24, r24
    2310:	54 f1       	brlt	.+84     	; 0x2366 <ConfigSorterArm+0xb0>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	08 95       	ret
		saIsRight = false;
		Start = 1;
	}
		
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
    2316:	60 e8       	ldi	r22, 0x80	; 128
    2318:	80 e4       	ldi	r24, 0x40	; 64
    231a:	0e 94 0a 11 	call	0x2214	; 0x2214 <SaSetInterrupt>
		return 1; // Sorteram mag starten
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	08 95       	ret
	}
	else {
		return 0; // Sorterarm mag niet starten
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	08 95       	ret
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
    2326:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    232a:	86 ff       	sbrs	r24, 6
    232c:	da cf       	rjmp	.-76     	; 0x22e2 <ConfigSorterArm+0x2c>
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <ConfigSorterArm+0x82>
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <saIsLeft>
    2336:	1c c0       	rjmp	.+56     	; 0x2370 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    2338:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <saIsLeft>
    233c:	81 11       	cpse	r24, r1
    233e:	d6 cf       	rjmp	.-84     	; 0x22ec <ConfigSorterArm+0x36>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    2340:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2344:	88 23       	and	r24, r24
    2346:	bc f6       	brge	.-82     	; 0x22f6 <ConfigSorterArm+0x40>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2348:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    234c:	88 23       	and	r24, r24
    234e:	c4 f6       	brge	.-80     	; 0x2300 <ConfigSorterArm+0x4a>
    2350:	04 c0       	rjmp	.+8      	; 0x235a <ConfigSorterArm+0xa4>
		saIsRight = true;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <saIsRight>
    2358:	0b c0       	rjmp	.+22     	; 0x2370 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    235a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    235e:	86 fd       	sbrc	r24, 6
    2360:	d4 cf       	rjmp	.-88     	; 0x230a <ConfigSorterArm+0x54>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	08 95       	ret
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
		saIsLeft = false;
    2366:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
		saIsRight = false;
    236a:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
    236e:	d3 cf       	rjmp	.-90     	; 0x2316 <ConfigSorterArm+0x60>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	08 95       	ret
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2374:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2378:	88 23       	and	r24, r24
    237a:	5c f7       	brge	.-42     	; 0x2352 <ConfigSorterArm+0x9c>
    237c:	ee cf       	rjmp	.-36     	; 0x235a <ConfigSorterArm+0xa4>

0000237e <MoveSorterArm>:
}


/* beweeg stepper oneindig */
void MoveSorterArm(bool direction)
{
    237e:	ff 92       	push	r15
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	28 97       	sbiw	r28, 0x08	; 8
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	f8 2e       	mov	r15, r24
	if (ConfigSorterArm() == 1){
    2394:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <ConfigSorterArm>
    2398:	88 23       	and	r24, r24
    239a:	21 f1       	breq	.+72     	; 0x23e4 <MoveSorterArm+0x66>
		saDirection = direction;
    239c:	f0 92 54 23 	sts	0x2354, r15	; 0x802354 <saDirection>
		uint16_t motor_id = SORTER_MOTOR_ID;
		uint16_t motor_speed = 300;
		uint16_t steps = 5000;

		char directiondata[] = { direction };
    23a0:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    23a2:	00 eb       	ldi	r16, 0xB0	; 176
    23a4:	1a e0       	ldi	r17, 0x0A	; 10
    23a6:	27 e0       	ldi	r18, 0x07	; 7
    23a8:	41 e0       	ldi	r20, 0x01	; 1
    23aa:	be 01       	movw	r22, r28
    23ac:	68 5f       	subi	r22, 0xF8	; 248
    23ae:	7f 4f       	sbci	r23, 0xFF	; 255
    23b0:	8a e4       	ldi	r24, 0x4A	; 74
    23b2:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    23b6:	be 01       	movw	r22, r28
    23b8:	6f 5f       	subi	r22, 0xFF	; 255
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	87 e0       	ldi	r24, 0x07	; 7
    23be:	fb 01       	movw	r30, r22
    23c0:	11 92       	st	Z+, r1
    23c2:	8a 95       	dec	r24
    23c4:	e9 f7       	brne	.-6      	; 0x23c0 <MoveSorterArm+0x42>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	8f 83       	std	Y+7, r24	; 0x07
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	8c e2       	ldi	r24, 0x2C	; 44
    23ce:	8a 83       	std	Y+2, r24	; 0x02
    23d0:	83 e1       	ldi	r24, 0x13	; 19
    23d2:	8b 83       	std	Y+3, r24	; 0x03
    23d4:	88 e8       	ldi	r24, 0x88	; 136
    23d6:	8c 83       	std	Y+4, r24	; 0x04
    23d8:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    23da:	27 e0       	ldi	r18, 0x07	; 7
    23dc:	47 e0       	ldi	r20, 0x07	; 7
    23de:	86 e4       	ldi	r24, 0x46	; 70
    23e0:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		}

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}
    23e4:	28 96       	adiw	r28, 0x08	; 8
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	ff 90       	pop	r15
    23f4:	08 95       	ret

000023f6 <HomeSorterArm>:
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
    23f6:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <saIsLeft>
    23fa:	81 11       	cpse	r24, r1
    23fc:	07 c0       	rjmp	.+14     	; 0x240c <HomeSorterArm+0x16>
		MoveSorterArm(0);
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	0e 94 bf 11 	call	0x237e	; 0x237e <MoveSorterArm>
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
    2404:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <saIsLeft>
    2408:	88 23       	and	r24, r24
    240a:	c9 f3       	breq	.-14     	; 0x23fe <HomeSorterArm+0x8>
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
    240c:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <saIsRight>
    2410:	81 11       	cpse	r24, r1
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <HomeSorterArm+0x2c>
		MoveSorterArm(1);
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	0e 94 bf 11 	call	0x237e	; 0x237e <MoveSorterArm>
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
    241a:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <saIsRight>
    241e:	88 23       	and	r24, r24
    2420:	c9 f3       	breq	.-14     	; 0x2414 <HomeSorterArm+0x1e>
    2422:	08 95       	ret

00002424 <MoveSorterArmTo>:

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}

void MoveSorterArmTo(uint16_t toPosition){
    2424:	df 92       	push	r13
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	28 97       	sbiw	r28, 0x08	; 8
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	8c 01       	movw	r16, r24
	bool direction;
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
    243e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <ConfigSorterArm>
    2442:	88 23       	and	r24, r24
    2444:	69 f1       	breq	.+90     	; 0x24a0 <MoveSorterArmTo+0x7c>
	
	if (toPosition <= sa1.position){
    2446:	01 15       	cp	r16, r1
    2448:	11 05       	cpc	r17, r1
    244a:	31 f0       	breq	.+12     	; 0x2458 <MoveSorterArmTo+0x34>
		direction = 1;
		steps = toPosition - sa1.position;
	}
	else if (toPosition >= sa1.position){
		direction = 0;
		steps = sa1.position - toPosition;
    244c:	ee 24       	eor	r14, r14
    244e:	ff 24       	eor	r15, r15
    2450:	e0 1a       	sub	r14, r16
    2452:	f1 0a       	sbc	r15, r17
	if (toPosition <= sa1.position){
		direction = 1;
		steps = toPosition - sa1.position;
	}
	else if (toPosition >= sa1.position){
		direction = 0;
    2454:	d1 2c       	mov	r13, r1
    2456:	04 c0       	rjmp	.+8      	; 0x2460 <MoveSorterArmTo+0x3c>
	
	if (ConfigSorterArm() == 1){
	
	if (toPosition <= sa1.position){
		direction = 1;
		steps = toPosition - sa1.position;
    2458:	e1 2c       	mov	r14, r1
    245a:	f1 2c       	mov	r15, r1
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
	
	if (toPosition <= sa1.position){
		direction = 1;
    245c:	dd 24       	eor	r13, r13
    245e:	d3 94       	inc	r13
	}
	
	uint16_t motor_id = SORTER_MOTOR_ID;
	uint16_t motor_speed = 400;
	
	char directiondata[] = { direction };
    2460:	d8 86       	std	Y+8, r13	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2462:	00 eb       	ldi	r16, 0xB0	; 176
    2464:	1a e0       	ldi	r17, 0x0A	; 10
    2466:	27 e0       	ldi	r18, 0x07	; 7
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	be 01       	movw	r22, r28
    246c:	68 5f       	subi	r22, 0xF8	; 248
    246e:	7f 4f       	sbci	r23, 0xFF	; 255
    2470:	8a e4       	ldi	r24, 0x4A	; 74
    2472:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    2476:	be 01       	movw	r22, r28
    2478:	6f 5f       	subi	r22, 0xFF	; 255
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	87 e0       	ldi	r24, 0x07	; 7
    247e:	fb 01       	movw	r30, r22
    2480:	11 92       	st	Z+, r1
    2482:	8a 95       	dec	r24
    2484:	e9 f7       	brne	.-6      	; 0x2480 <MoveSorterArmTo+0x5c>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	8f 83       	std	Y+7, r24	; 0x07
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	80 e9       	ldi	r24, 0x90	; 144
    248e:	8a 83       	std	Y+2, r24	; 0x02
    2490:	fb 82       	std	Y+3, r15	; 0x03
    2492:	ec 82       	std	Y+4, r14	; 0x04
    2494:	dd 82       	std	Y+5, r13	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2496:	27 e0       	ldi	r18, 0x07	; 7
    2498:	47 e0       	ldi	r20, 0x07	; 7
    249a:	86 e4       	ldi	r24, 0x46	; 70
    249c:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    24a0:	28 96       	adiw	r28, 0x08	; 8
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	df 90       	pop	r13
    24b4:	08 95       	ret

000024b6 <MoveSorterArmDistance>:

void MoveSorterArmDistance(bool direction, uint16_t steps){
    24b6:	df 92       	push	r13
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	28 97       	sbiw	r28, 0x08	; 8
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	de bf       	out	0x3e, r29	; 62
    24ce:	f8 2e       	mov	r15, r24
    24d0:	e6 2e       	mov	r14, r22
    24d2:	d7 2e       	mov	r13, r23
	
	if (ConfigSorterArm() == 1){
    24d4:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <ConfigSorterArm>
    24d8:	88 23       	and	r24, r24
    24da:	01 f1       	breq	.+64     	; 0x251c <MoveSorterArmDistance+0x66>
	uint16_t motor_id = SORTER_MOTOR_ID;
	uint16_t motor_speed = 300;

	char directiondata[] = { direction };
    24dc:	f8 86       	std	Y+8, r15	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    24de:	00 eb       	ldi	r16, 0xB0	; 176
    24e0:	1a e0       	ldi	r17, 0x0A	; 10
    24e2:	27 e0       	ldi	r18, 0x07	; 7
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	be 01       	movw	r22, r28
    24e8:	68 5f       	subi	r22, 0xF8	; 248
    24ea:	7f 4f       	sbci	r23, 0xFF	; 255
    24ec:	8a e4       	ldi	r24, 0x4A	; 74
    24ee:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    24f2:	be 01       	movw	r22, r28
    24f4:	6f 5f       	subi	r22, 0xFF	; 255
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	87 e0       	ldi	r24, 0x07	; 7
    24fa:	fb 01       	movw	r30, r22
    24fc:	11 92       	st	Z+, r1
    24fe:	8a 95       	dec	r24
    2500:	e9 f7       	brne	.-6      	; 0x24fc <MoveSorterArmDistance+0x46>
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	8f 83       	std	Y+7, r24	; 0x07
    2506:	89 83       	std	Y+1, r24	; 0x01
    2508:	8c e2       	ldi	r24, 0x2C	; 44
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	db 82       	std	Y+3, r13	; 0x03
    250e:	ec 82       	std	Y+4, r14	; 0x04
    2510:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2512:	27 e0       	ldi	r18, 0x07	; 7
    2514:	47 e0       	ldi	r20, 0x07	; 7
    2516:	86 e4       	ldi	r24, 0x46	; 70
    2518:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    251c:	28 96       	adiw	r28, 0x08	; 8
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	df 90       	pop	r13
    2530:	08 95       	ret

00002532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>:
#include "Stepperdriver.h"



void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
    2532:	cf 92       	push	r12
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	d8 2e       	mov	r13, r24
    2544:	7b 01       	movw	r14, r22
    2546:	d4 2f       	mov	r29, r20
    2548:	c2 2e       	mov	r12, r18
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
    254a:	f8 94       	cli
    254c:	cc ef       	ldi	r28, 0xFC	; 252
    254e:	c8 1b       	sub	r28, r24
    2550:	c4 1b       	sub	r28, r20
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
    2552:	c2 1b       	sub	r28, r18
	for(uint8_t i = 0; i < length; i++)
    2554:	44 23       	and	r20, r20
    2556:	61 f0       	breq	.+24     	; 0x2570 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x3e>
    2558:	fb 01       	movw	r30, r22
    255a:	af ef       	ldi	r26, 0xFF	; 255
    255c:	a4 0f       	add	r26, r20
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	11 96       	adiw	r26, 0x01	; 1
    2562:	a6 0f       	add	r26, r22
    2564:	b7 1f       	adc	r27, r23
	{
		checksum = checksum - data[i];
    2566:	91 91       	ld	r25, Z+
    2568:	c9 1b       	sub	r28, r25

void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
	for(uint8_t i = 0; i < length; i++)
    256a:	ea 17       	cp	r30, r26
    256c:	fb 07       	cpc	r31, r27
    256e:	d9 f7       	brne	.-10     	; 0x2566 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x34>
	{
		checksum = checksum - data[i];
	}
	
	USART_Transmit(USART, 0xFF); //send 0xFFFF
    2570:	6f ef       	ldi	r22, 0xFF	; 255
    2572:	c8 01       	movw	r24, r16
    2574:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0xFF);
    2578:	6f ef       	ldi	r22, 0xFF	; 255
    257a:	c8 01       	movw	r24, r16
    257c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, motorID); //send motorID
    2580:	6c 2d       	mov	r22, r12
    2582:	c8 01       	movw	r24, r16
    2584:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, length+3); //transmit message length (register instruction+address+data+checksum)
    2588:	63 e0       	ldi	r22, 0x03	; 3
    258a:	6d 0f       	add	r22, r29
    258c:	c8 01       	movw	r24, r16
    258e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0x00); // instruction (not yet implemented)
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	c8 01       	movw	r24, r16
    2596:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, address); // send address to start writing
    259a:	6d 2d       	mov	r22, r13
    259c:	c8 01       	movw	r24, r16
    259e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, data, length); //send data to write to registers
    25a2:	4d 2f       	mov	r20, r29
    25a4:	b7 01       	movw	r22, r14
    25a6:	c8 01       	movw	r24, r16
    25a8:	0e 94 b3 09 	call	0x1366	; 0x1366 <_Z14USART_TransmitR12USART_structPKch>
	USART_Transmit(USART, checksum);
    25ac:	6c 2f       	mov	r22, r28
    25ae:	c8 01       	movw	r24, r16
    25b0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z14USART_TransmitR12USART_structc>
    25b4:	2f e7       	ldi	r18, 0x7F	; 127
    25b6:	82 e3       	ldi	r24, 0x32	; 50
    25b8:	92 e0       	ldi	r25, 0x02	; 2
    25ba:	21 50       	subi	r18, 0x01	; 1
    25bc:	80 40       	sbci	r24, 0x00	; 0
    25be:	90 40       	sbci	r25, 0x00	; 0
    25c0:	e1 f7       	brne	.-8      	; 0x25ba <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x88>
    25c2:	00 c0       	rjmp	.+0      	; 0x25c4 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x92>
    25c4:	00 00       	nop

	_delay_ms(30);
	sei(); //global interrupt enable
    25c6:	78 94       	sei
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	cf 90       	pop	r12
    25d8:	08 95       	ret

000025da <_Z22ChangeDirectionStepperbh>:


void ChangeDirectionStepper(bool direction, uint8_t motor_id)
{
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	1f 92       	push	r1
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	26 2f       	mov	r18, r22
	char directiondata[]={direction};
    25ea:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    25ec:	00 eb       	ldi	r16, 0xB0	; 176
    25ee:	1a e0       	ldi	r17, 0x0A	; 10
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	be 01       	movw	r22, r28
    25f4:	6f 5f       	subi	r22, 0xFF	; 255
    25f6:	7f 4f       	sbci	r23, 0xFF	; 255
    25f8:	8a e4       	ldi	r24, 0x4A	; 74
    25fa:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    25fe:	0f 90       	pop	r0
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	08 95       	ret

0000260a <_Z8MoveBeltbji>:


void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
    260a:	cf 92       	push	r12
    260c:	df 92       	push	r13
    260e:	ef 92       	push	r14
    2610:	ff 92       	push	r15
    2612:	0f 93       	push	r16
    2614:	1f 93       	push	r17
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	28 97       	sbiw	r28, 0x08	; 8
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
    2624:	62 30       	cpi	r22, 0x02	; 2
    2626:	71 05       	cpc	r23, r1
    2628:	61 f0       	breq	.+24     	; 0x2642 <_Z8MoveBeltbji+0x38>
    262a:	20 f4       	brcc	.+8      	; 0x2634 <_Z8MoveBeltbji+0x2a>
    262c:	61 30       	cpi	r22, 0x01	; 1
    262e:	71 05       	cpc	r23, r1
    2630:	a9 f0       	breq	.+42     	; 0x265c <_Z8MoveBeltbji+0x52>
    2632:	39 c0       	rjmp	.+114    	; 0x26a6 <_Z8MoveBeltbji+0x9c>
    2634:	63 30       	cpi	r22, 0x03	; 3
    2636:	71 05       	cpc	r23, r1
    2638:	41 f0       	breq	.+16     	; 0x264a <_Z8MoveBeltbji+0x40>
    263a:	64 30       	cpi	r22, 0x04	; 4
    263c:	71 05       	cpc	r23, r1
    263e:	51 f0       	breq	.+20     	; 0x2654 <_Z8MoveBeltbji+0x4a>
    2640:	32 c0       	rjmp	.+100    	; 0x26a6 <_Z8MoveBeltbji+0x9c>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    2642:	68 94       	set
    2644:	cc 24       	eor	r12, r12
    2646:	c1 f8       	bld	r12, 1
    2648:	0b c0       	rjmp	.+22     	; 0x2660 <_Z8MoveBeltbji+0x56>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    264a:	0f 2e       	mov	r0, r31
    264c:	f3 e0       	ldi	r31, 0x03	; 3
    264e:	cf 2e       	mov	r12, r31
    2650:	f0 2d       	mov	r31, r0
    2652:	06 c0       	rjmp	.+12     	; 0x2660 <_Z8MoveBeltbji+0x56>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    2654:	68 94       	set
    2656:	cc 24       	eor	r12, r12
    2658:	c2 f8       	bld	r12, 2
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <_Z8MoveBeltbji+0x56>
void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
    265c:	cc 24       	eor	r12, r12
    265e:	c3 94       	inc	r12
    2660:	d5 2e       	mov	r13, r21
    2662:	e4 2e       	mov	r14, r20
    2664:	f8 2e       	mov	r15, r24
		default: return;
	}
	//Convert speed from uint16_t to byte array:
	char speedData[2]={(char)((speed>>8)&0xff), (char)(speed&0xff)};
	//Convert bool to byte array, could this be a typecast instead (and would that make a difference)
	char directiondata[]={direction};
    2666:	88 87       	std	Y+8, r24	; 0x08
	//Write direction data to the direction register
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    2668:	00 eb       	ldi	r16, 0xB0	; 176
    266a:	1a e0       	ldi	r17, 0x0A	; 10
    266c:	2c 2d       	mov	r18, r12
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	be 01       	movw	r22, r28
    2672:	68 5f       	subi	r22, 0xF8	; 248
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	8a e4       	ldi	r24, 0x4A	; 74
    2678:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	//Write the remaining data:
	char data[]={speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON};
    267c:	be 01       	movw	r22, r28
    267e:	6f 5f       	subi	r22, 0xFF	; 255
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	87 e0       	ldi	r24, 0x07	; 7
    2684:	fb 01       	movw	r30, r22
    2686:	11 92       	st	Z+, r1
    2688:	8a 95       	dec	r24
    268a:	e9 f7       	brne	.-6      	; 0x2686 <_Z8MoveBeltbji+0x7c>
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	8b 83       	std	Y+3, r24	; 0x03
    2690:	8c 83       	std	Y+4, r24	; 0x04
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	8f 83       	std	Y+7, r24	; 0x07
		case 3: motor_id = BELT_3_MOTOR_ID; break;
		case 4: motor_id = BELT_4_MOTOR_ID; break;
		default: return;
	}
	//Convert speed from uint16_t to byte array:
	char speedData[2]={(char)((speed>>8)&0xff), (char)(speed&0xff)};
    2696:	d9 82       	std	Y+1, r13	; 0x01
    2698:	ea 82       	std	Y+2, r14	; 0x02
	//Convert bool to byte array, could this be a typecast instead (and would that make a difference)
	char directiondata[]={direction};
	//Write direction data to the direction register
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
	//Write the remaining data:
	char data[]={speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON};
    269a:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),motor_id,USARTE1); //This write operation also contains direction data? Why is the other one still needed?
    269c:	2c 2d       	mov	r18, r12
    269e:	47 e0       	ldi	r20, 0x07	; 7
    26a0:	86 e4       	ldi	r24, 0x46	; 70
    26a2:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    26a6:	28 96       	adiw	r28, 0x08	; 8
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	cf 90       	pop	r12
    26bc:	08 95       	ret

000026be <_Z8StopBeltj>:


void StopBelt(uint16_t i)
{
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	1f 92       	push	r1
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    26cc:	82 30       	cpi	r24, 0x02	; 2
    26ce:	91 05       	cpc	r25, r1
    26d0:	51 f0       	breq	.+20     	; 0x26e6 <_Z8StopBeltj+0x28>
    26d2:	18 f4       	brcc	.+6      	; 0x26da <_Z8StopBeltj+0x1c>
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	69 f0       	breq	.+26     	; 0x26f2 <_Z8StopBeltj+0x34>
    26d8:	17 c0       	rjmp	.+46     	; 0x2708 <_Z8StopBeltj+0x4a>
    26da:	83 30       	cpi	r24, 0x03	; 3
    26dc:	91 05       	cpc	r25, r1
    26de:	29 f0       	breq	.+10     	; 0x26ea <_Z8StopBeltj+0x2c>
    26e0:	04 97       	sbiw	r24, 0x04	; 4
    26e2:	29 f0       	breq	.+10     	; 0x26ee <_Z8StopBeltj+0x30>
    26e4:	11 c0       	rjmp	.+34     	; 0x2708 <_Z8StopBeltj+0x4a>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    26e6:	22 e0       	ldi	r18, 0x02	; 2
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <_Z8StopBeltj+0x36>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    26ea:	23 e0       	ldi	r18, 0x03	; 3
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <_Z8StopBeltj+0x36>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    26ee:	24 e0       	ldi	r18, 0x04	; 4
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <_Z8StopBeltj+0x36>

void StopBelt(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
    26f2:	21 e0       	ldi	r18, 0x01	; 1
		case 2: motor_id = BELT_2_MOTOR_ID; break;
		case 3: motor_id = BELT_3_MOTOR_ID; break;
		case 4: motor_id = BELT_4_MOTOR_ID; break;
		default: return;
	}
	char data[]={MOTOR_OFF};
    26f4:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data)/sizeof(*data),motor_id,USARTE1);
    26f6:	00 eb       	ldi	r16, 0xB0	; 176
    26f8:	1a e0       	ldi	r17, 0x0A	; 10
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	be 01       	movw	r22, r28
    26fe:	6f 5f       	subi	r22, 0xFF	; 255
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	8c e4       	ldi	r24, 0x4C	; 76
    2704:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2708:	0f 90       	pop	r0
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	08 95       	ret

00002714 <_Z13MoveTurntablebji>:


void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
    2714:	cf 92       	push	r12
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	28 97       	sbiw	r28, 0x08	; 8
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	switch(i) {
    272e:	61 30       	cpi	r22, 0x01	; 1
    2730:	71 05       	cpc	r23, r1
    2732:	41 f0       	breq	.+16     	; 0x2744 <_Z13MoveTurntablebji+0x30>
    2734:	62 30       	cpi	r22, 0x02	; 2
    2736:	71 05       	cpc	r23, r1
    2738:	71 f5       	brne	.+92     	; 0x2796 <_Z13MoveTurntablebji+0x82>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    273a:	0f 2e       	mov	r0, r31
    273c:	f6 e0       	ldi	r31, 0x06	; 6
    273e:	cf 2e       	mov	r12, r31
    2740:	f0 2d       	mov	r31, r0
    2742:	04 c0       	rjmp	.+8      	; 0x274c <_Z13MoveTurntablebji+0x38>

void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
    2744:	0f 2e       	mov	r0, r31
    2746:	f5 e0       	ldi	r31, 0x05	; 5
    2748:	cf 2e       	mov	r12, r31
    274a:	f0 2d       	mov	r31, r0
    274c:	d5 2e       	mov	r13, r21
    274e:	e4 2e       	mov	r14, r20
    2750:	f8 2e       	mov	r15, r24
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
    2752:	88 87       	std	Y+8, r24	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2754:	00 eb       	ldi	r16, 0xB0	; 176
    2756:	1a e0       	ldi	r17, 0x0A	; 10
    2758:	2c 2d       	mov	r18, r12
    275a:	41 e0       	ldi	r20, 0x01	; 1
    275c:	be 01       	movw	r22, r28
    275e:	68 5f       	subi	r22, 0xF8	; 248
    2760:	7f 4f       	sbci	r23, 0xFF	; 255
    2762:	8a e4       	ldi	r24, 0x4A	; 74
    2764:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_QUARTER,MOTOR_ON }; // Turntable's draaien op 1/4 step mode, hierdoor kunnen de motoreren soepeler draaien
    2768:	be 01       	movw	r22, r28
    276a:	6f 5f       	subi	r22, 0xFF	; 255
    276c:	7f 4f       	sbci	r23, 0xFF	; 255
    276e:	87 e0       	ldi	r24, 0x07	; 7
    2770:	fb 01       	movw	r30, r22
    2772:	11 92       	st	Z+, r1
    2774:	8a 95       	dec	r24
    2776:	e9 f7       	brne	.-6      	; 0x2772 <_Z13MoveTurntablebji+0x5e>
    2778:	8f ef       	ldi	r24, 0xFF	; 255
    277a:	8b 83       	std	Y+3, r24	; 0x03
    277c:	8c 83       	std	Y+4, r24	; 0x04
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	8e 83       	std	Y+6, r24	; 0x06
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	8f 83       	std	Y+7, r24	; 0x07
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
    2786:	d9 82       	std	Y+1, r13	; 0x01
    2788:	ea 82       	std	Y+2, r14	; 0x02
	char directiondata[] = { direction };
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_QUARTER,MOTOR_ON }; // Turntable's draaien op 1/4 step mode, hierdoor kunnen de motoreren soepeler draaien
    278a:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    278c:	2c 2d       	mov	r18, r12
    278e:	47 e0       	ldi	r20, 0x07	; 7
    2790:	86 e4       	ldi	r24, 0x46	; 70
    2792:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2796:	28 96       	adiw	r28, 0x08	; 8
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	08 95       	ret

000027ae <_Z13StopTurntablej>:


void StopTurntable(uint16_t i)
{
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	1f 92       	push	r1
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	21 f0       	breq	.+8      	; 0x27ca <_Z13StopTurntablej+0x1c>
    27c2:	02 97       	sbiw	r24, 0x02	; 2
    27c4:	69 f4       	brne	.+26     	; 0x27e0 <_Z13StopTurntablej+0x32>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    27c6:	26 e0       	ldi	r18, 0x06	; 6
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <_Z13StopTurntablej+0x1e>

void StopTurntable(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
    27ca:	25 e0       	ldi	r18, 0x05	; 5
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char data[] = { MOTOR_OFF };
    27cc:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    27ce:	00 eb       	ldi	r16, 0xB0	; 176
    27d0:	1a e0       	ldi	r17, 0x0A	; 10
    27d2:	41 e0       	ldi	r20, 0x01	; 1
    27d4:	be 01       	movw	r22, r28
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	8c e4       	ldi	r24, 0x4C	; 76
    27dc:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    27e0:	0f 90       	pop	r0
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	08 95       	ret

000027ec <_Z13DemoTestBlockv>:


// Test Code om uit te zoeken hoe een motor gestart moet worden op adres 0x0A
void DemoTestBlock() {
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	28 97       	sbiw	r28, 0x08	; 8
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID; // Dit zou 0x0A moeten zijn
	int16_t speed = 1000;
	bool direction = 0;
	
	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
    27fe:	18 86       	std	Y+8, r1	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2800:	00 eb       	ldi	r16, 0xB0	; 176
    2802:	1a e0       	ldi	r17, 0x0A	; 10
    2804:	2a e0       	ldi	r18, 0x0A	; 10
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	be 01       	movw	r22, r28
    280a:	68 5f       	subi	r22, 0xF8	; 248
    280c:	7f 4f       	sbci	r23, 0xFF	; 255
    280e:	8a e4       	ldi	r24, 0x4A	; 74
    2810:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON };
    2814:	be 01       	movw	r22, r28
    2816:	6f 5f       	subi	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	87 e0       	ldi	r24, 0x07	; 7
    281c:	fb 01       	movw	r30, r22
    281e:	11 92       	st	Z+, r1
    2820:	8a 95       	dec	r24
    2822:	e9 f7       	brne	.-6      	; 0x281e <_Z13DemoTestBlockv+0x32>
    2824:	8f ef       	ldi	r24, 0xFF	; 255
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	8c 83       	std	Y+4, r24	; 0x04
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	8f 83       	std	Y+7, r24	; 0x07
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	88 ee       	ldi	r24, 0xE8	; 232
    2834:	8a 83       	std	Y+2, r24	; 0x02
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2836:	2a e0       	ldi	r18, 0x0A	; 10
    2838:	47 e0       	ldi	r20, 0x07	; 7
    283a:	86 e4       	ldi	r24, 0x46	; 70
    283c:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2840:	28 96       	adiw	r28, 0x08	; 8
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <_Z17StopDemoTestBlockv>:


// Test code om de motor op TEST_DEMO_MOTOR_ID weer te stoppen
void StopDemoTestBlock() {
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
    2854:	cf 93       	push	r28
    2856:	df 93       	push	r29
    2858:	1f 92       	push	r1
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    285e:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2860:	00 eb       	ldi	r16, 0xB0	; 176
    2862:	1a e0       	ldi	r17, 0x0A	; 10
    2864:	2a e0       	ldi	r18, 0x0A	; 10
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	be 01       	movw	r22, r28
    286a:	6f 5f       	subi	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	8c e4       	ldi	r24, 0x4C	; 76
    2870:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2874:	0f 90       	pop	r0
    2876:	df 91       	pop	r29
    2878:	cf 91       	pop	r28
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	08 95       	ret

00002880 <_Z10SetAddresshh>:


// Change the address of a motor
void SetAddress(uint8_t from, uint8_t to) {
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	1f 92       	push	r1
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
	uint16_t motor_id = from; // Old address
	char regdata = to; // New address
    288e:	69 83       	std	Y+1, r22	; 0x01
	stepperWriteRegister(BUS_ADDRESS_REG, 
						 &regdata, 
						 1, // Size of message
						 motor_id, 
						 USARTE1
						 ); //Write new address to motor
    2890:	00 eb       	ldi	r16, 0xB0	; 176
    2892:	1a e0       	ldi	r17, 0x0A	; 10
    2894:	28 2f       	mov	r18, r24
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	be 01       	movw	r22, r28
    289a:	6f 5f       	subi	r22, 0xFF	; 255
    289c:	7f 4f       	sbci	r23, 0xFF	; 255
    289e:	85 e0       	ldi	r24, 0x05	; 5
    28a0:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    28a4:	0f 90       	pop	r0
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	08 95       	ret

000028b0 <_Z9ToggleLEDv>:
	JMP(SelectColour),
	JMP(set_relay),
};


void ToggleLED() { PORTH_OUTTGL |= (1<<4)|(1<<5); }
    28b0:	e7 ee       	ldi	r30, 0xE7	; 231
    28b2:	f6 e0       	ldi	r31, 0x06	; 6
    28b4:	80 81       	ld	r24, Z
    28b6:	80 63       	ori	r24, 0x30	; 48
    28b8:	80 83       	st	Z, r24
    28ba:	08 95       	ret

000028bc <_Z3LEDb>:
void LED(bool i) {
	if (i) {
    28bc:	88 23       	and	r24, r24
    28be:	31 f0       	breq	.+12     	; 0x28cc <_Z3LEDb+0x10>
		PORTH_OUTCLR |= (1<<4)|(1<<5);
    28c0:	e6 ee       	ldi	r30, 0xE6	; 230
    28c2:	f6 e0       	ldi	r31, 0x06	; 6
    28c4:	80 81       	ld	r24, Z
    28c6:	80 63       	ori	r24, 0x30	; 48
    28c8:	80 83       	st	Z, r24
    28ca:	08 95       	ret
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
    28cc:	e5 ee       	ldi	r30, 0xE5	; 229
    28ce:	f6 e0       	ldi	r31, 0x06	; 6
    28d0:	80 81       	ld	r24, Z
    28d2:	80 63       	ori	r24, 0x30	; 48
    28d4:	80 83       	st	Z, r24
    28d6:	08 95       	ret

000028d8 <_Z9set_relaybh>:
#define RELAY4_OUTCLR	PORTQ_OUTCLR
#define RELAY5_OUTCLR	PORTQ_OUTCLR


void set_relay(bool value, uint8_t relay)
{
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	d8 2f       	mov	r29, r24
    28de:	c6 2f       	mov	r28, r22
	DEBUG_OUT("Setting a relay!");
    28e0:	6a ec       	ldi	r22, 0xCA	; 202
    28e2:	71 e2       	ldi	r23, 0x21	; 33
    28e4:	80 ea       	ldi	r24, 0xA0	; 160
    28e6:	99 e0       	ldi	r25, 0x09	; 9
    28e8:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	switch (relay)
    28ec:	c3 30       	cpi	r28, 0x03	; 3
    28ee:	49 f1       	breq	.+82     	; 0x2942 <_Z9set_relaybh+0x6a>
    28f0:	28 f4       	brcc	.+10     	; 0x28fc <_Z9set_relaybh+0x24>
    28f2:	c1 30       	cpi	r28, 0x01	; 1
    28f4:	d1 f1       	breq	.+116    	; 0x296a <_Z9set_relaybh+0x92>
    28f6:	c2 30       	cpi	r28, 0x02	; 2
    28f8:	71 f1       	breq	.+92     	; 0x2956 <_Z9set_relaybh+0x7e>
    28fa:	40 c0       	rjmp	.+128    	; 0x297c <_Z9set_relaybh+0xa4>
    28fc:	c5 30       	cpi	r28, 0x05	; 5
    28fe:	69 f0       	breq	.+26     	; 0x291a <_Z9set_relaybh+0x42>
    2900:	b0 f0       	brcs	.+44     	; 0x292e <_Z9set_relaybh+0x56>
    2902:	c6 30       	cpi	r28, 0x06	; 6
    2904:	d9 f5       	brne	.+118    	; 0x297c <_Z9set_relaybh+0xa4>
	{	
		//Use conditional operator to check for SET or CLR for relay:
		//IMPORTANT: In the ULN2803, signal traces get inverted (Relay0 on Atmega pin label is Relay output marked K6, see schematic sheet 5: "Relays_Optocoupers")
		case 6: value ? RELAY0_OUTSET = RELAY0_bm : RELAY0_OUTCLR = RELAY0_bm; break;
    2906:	dd 23       	and	r29, r29
    2908:	21 f0       	breq	.+8      	; 0x2912 <_Z9set_relaybh+0x3a>
    290a:	82 e0       	ldi	r24, 0x02	; 2
    290c:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2910:	35 c0       	rjmp	.+106    	; 0x297c <_Z9set_relaybh+0xa4>
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    2918:	31 c0       	rjmp	.+98     	; 0x297c <_Z9set_relaybh+0xa4>
		case 5: value ? RELAY1_OUTSET = RELAY1_bm : RELAY1_OUTCLR = RELAY1_bm; break;
    291a:	dd 23       	and	r29, r29
    291c:	21 f0       	breq	.+8      	; 0x2926 <_Z9set_relaybh+0x4e>
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2924:	2b c0       	rjmp	.+86     	; 0x297c <_Z9set_relaybh+0xa4>
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    292c:	27 c0       	rjmp	.+78     	; 0x297c <_Z9set_relaybh+0xa4>
		case 4: value ? RELAY2_OUTSET = RELAY2_bm : RELAY2_OUTCLR = RELAY2_bm; break;
    292e:	dd 23       	and	r29, r29
    2930:	21 f0       	breq	.+8      	; 0x293a <_Z9set_relaybh+0x62>
    2932:	88 e0       	ldi	r24, 0x08	; 8
    2934:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2938:	21 c0       	rjmp	.+66     	; 0x297c <_Z9set_relaybh+0xa4>
    293a:	88 e0       	ldi	r24, 0x08	; 8
    293c:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    2940:	1d c0       	rjmp	.+58     	; 0x297c <_Z9set_relaybh+0xa4>
		case 3: value ? RELAY3_OUTSET = RELAY3_bm : RELAY3_OUTCLR = RELAY3_bm; break;
    2942:	dd 23       	and	r29, r29
    2944:	21 f0       	breq	.+8      	; 0x294e <_Z9set_relaybh+0x76>
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    294c:	17 c0       	rjmp	.+46     	; 0x297c <_Z9set_relaybh+0xa4>
    294e:	84 e0       	ldi	r24, 0x04	; 4
    2950:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    2954:	13 c0       	rjmp	.+38     	; 0x297c <_Z9set_relaybh+0xa4>
		case 2: value ? RELAY4_OUTSET = RELAY4_bm : RELAY4_OUTCLR = RELAY4_bm; break;
    2956:	dd 23       	and	r29, r29
    2958:	21 f0       	breq	.+8      	; 0x2962 <_Z9set_relaybh+0x8a>
    295a:	82 e0       	ldi	r24, 0x02	; 2
    295c:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2960:	0d c0       	rjmp	.+26     	; 0x297c <_Z9set_relaybh+0xa4>
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    2968:	09 c0       	rjmp	.+18     	; 0x297c <_Z9set_relaybh+0xa4>
		case 1: value ? RELAY5_OUTSET = RELAY5_bm : RELAY5_OUTCLR = RELAY5_bm; break;
    296a:	dd 23       	and	r29, r29
    296c:	21 f0       	breq	.+8      	; 0x2976 <_Z9set_relaybh+0x9e>
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2974:	03 c0       	rjmp	.+6      	; 0x297c <_Z9set_relaybh+0xa4>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
		default: break;
	}
}
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	08 95       	ret

00002982 <_Z8Solenoidhb>:
#define SOLENOID_H_

#include "relays.h"

void Solenoid(uint8_t solenoid, bool InOut)
{
    2982:	98 2f       	mov	r25, r24
    2984:	86 2f       	mov	r24, r22
	set_relay(InOut,solenoid);
    2986:	69 2f       	mov	r22, r25
    2988:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_Z9set_relaybh>
    298c:	08 95       	ret

0000298e <_Z13PulseSolenoidh>:
}

void PulseSolenoid(uint8_t solenoid)
{
    298e:	cf 93       	push	r28
    2990:	c8 2f       	mov	r28, r24
	set_relay(1,solenoid);
    2992:	68 2f       	mov	r22, r24
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_Z9set_relaybh>
    299a:	2f ef       	ldi	r18, 0xFF	; 255
    299c:	85 ea       	ldi	r24, 0xA5	; 165
    299e:	9e e0       	ldi	r25, 0x0E	; 14
    29a0:	21 50       	subi	r18, 0x01	; 1
    29a2:	80 40       	sbci	r24, 0x00	; 0
    29a4:	90 40       	sbci	r25, 0x00	; 0
    29a6:	e1 f7       	brne	.-8      	; 0x29a0 <_Z13PulseSolenoidh+0x12>
    29a8:	00 c0       	rjmp	.+0      	; 0x29aa <_Z13PulseSolenoidh+0x1c>
    29aa:	00 00       	nop
	_delay_ms(200);
	set_relay(0,solenoid);
    29ac:	6c 2f       	mov	r22, r28
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <_Z9set_relaybh>
}
    29b4:	cf 91       	pop	r28
    29b6:	08 95       	ret

000029b8 <_Z14requestStartedv>:
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
void requestStarted() { TWI_Write(TWIC, Started); }
    29b8:	60 91 56 23 	lds	r22, 0x2356	; 0x802356 <Started>
    29bc:	80 e8       	ldi	r24, 0x80	; 128
    29be:	94 e0       	ldi	r25, 0x04	; 4
    29c0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_Z9TWI_WriteR10TWI_structh>
    29c4:	08 95       	ret

000029c6 <_Z13requestResultv>:
void requestResult() { TWI_Write(TWIC, Result); }
    29c6:	60 91 55 23 	lds	r22, 0x2355	; 0x802355 <Result>
    29ca:	80 e8       	ldi	r24, 0x80	; 128
    29cc:	94 e0       	ldi	r25, 0x04	; 4
    29ce:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_Z9TWI_WriteR10TWI_structh>
    29d2:	08 95       	ret

000029d4 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	09 f4       	brne	.+2      	; 0x29da <sysclk_enable_peripheral_clock+0x6>
    29d8:	5c c1       	rjmp	.+696    	; 0x2c92 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    29da:	80 3c       	cpi	r24, 0xC0	; 192
    29dc:	91 05       	cpc	r25, r1
    29de:	29 f4       	brne	.+10     	; 0x29ea <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    29e0:	60 e1       	ldi	r22, 0x10	; 16
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    29e8:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    29ea:	80 34       	cpi	r24, 0x40	; 64
    29ec:	24 e0       	ldi	r18, 0x04	; 4
    29ee:	92 07       	cpc	r25, r18
    29f0:	29 f4       	brne	.+10     	; 0x29fc <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    29f2:	68 e0       	ldi	r22, 0x08	; 8
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    29fa:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    29fc:	81 15       	cp	r24, r1
    29fe:	24 e0       	ldi	r18, 0x04	; 4
    2a00:	92 07       	cpc	r25, r18
    2a02:	29 f4       	brne	.+10     	; 0x2a0e <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2a04:	64 e0       	ldi	r22, 0x04	; 4
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a0c:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2a0e:	80 38       	cpi	r24, 0x80	; 128
    2a10:	21 e0       	ldi	r18, 0x01	; 1
    2a12:	92 07       	cpc	r25, r18
    2a14:	29 f4       	brne	.+10     	; 0x2a20 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a1e:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2a20:	81 15       	cp	r24, r1
    2a22:	21 e0       	ldi	r18, 0x01	; 1
    2a24:	92 07       	cpc	r25, r18
    2a26:	29 f4       	brne	.+10     	; 0x2a32 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2a28:	61 e0       	ldi	r22, 0x01	; 1
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a30:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2a32:	80 38       	cpi	r24, 0x80	; 128
    2a34:	23 e0       	ldi	r18, 0x03	; 3
    2a36:	92 07       	cpc	r25, r18
    2a38:	29 f4       	brne	.+10     	; 0x2a44 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a42:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2a44:	80 39       	cpi	r24, 0x90	; 144
    2a46:	23 e0       	ldi	r18, 0x03	; 3
    2a48:	92 07       	cpc	r25, r18
    2a4a:	29 f4       	brne	.+10     	; 0x2a56 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a54:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2a56:	81 15       	cp	r24, r1
    2a58:	22 e0       	ldi	r18, 0x02	; 2
    2a5a:	92 07       	cpc	r25, r18
    2a5c:	29 f4       	brne	.+10     	; 0x2a68 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2a5e:	62 e0       	ldi	r22, 0x02	; 2
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a66:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2a68:	80 34       	cpi	r24, 0x40	; 64
    2a6a:	22 e0       	ldi	r18, 0x02	; 2
    2a6c:	92 07       	cpc	r25, r18
    2a6e:	29 f4       	brne	.+10     	; 0x2a7a <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2a70:	62 e0       	ldi	r22, 0x02	; 2
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a78:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2a7a:	81 15       	cp	r24, r1
    2a7c:	23 e0       	ldi	r18, 0x03	; 3
    2a7e:	92 07       	cpc	r25, r18
    2a80:	29 f4       	brne	.+10     	; 0x2a8c <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2a82:	64 e0       	ldi	r22, 0x04	; 4
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a8a:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2a8c:	80 32       	cpi	r24, 0x20	; 32
    2a8e:	23 e0       	ldi	r18, 0x03	; 3
    2a90:	92 07       	cpc	r25, r18
    2a92:	29 f4       	brne	.+10     	; 0x2a9e <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2a94:	64 e0       	ldi	r22, 0x04	; 4
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2a9c:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2a9e:	81 15       	cp	r24, r1
    2aa0:	28 e0       	ldi	r18, 0x08	; 8
    2aa2:	92 07       	cpc	r25, r18
    2aa4:	29 f4       	brne	.+10     	; 0x2ab0 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	83 e0       	ldi	r24, 0x03	; 3
    2aaa:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2aae:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2ab0:	81 15       	cp	r24, r1
    2ab2:	29 e0       	ldi	r18, 0x09	; 9
    2ab4:	92 07       	cpc	r25, r18
    2ab6:	29 f4       	brne	.+10     	; 0x2ac2 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	84 e0       	ldi	r24, 0x04	; 4
    2abc:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2ac0:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2ac2:	81 15       	cp	r24, r1
    2ac4:	2a e0       	ldi	r18, 0x0A	; 10
    2ac6:	92 07       	cpc	r25, r18
    2ac8:	29 f4       	brne	.+10     	; 0x2ad4 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	85 e0       	ldi	r24, 0x05	; 5
    2ace:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2ad2:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2ad4:	81 15       	cp	r24, r1
    2ad6:	2b e0       	ldi	r18, 0x0B	; 11
    2ad8:	92 07       	cpc	r25, r18
    2ada:	29 f4       	brne	.+10     	; 0x2ae6 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	86 e0       	ldi	r24, 0x06	; 6
    2ae0:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2ae4:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2ae6:	80 34       	cpi	r24, 0x40	; 64
    2ae8:	28 e0       	ldi	r18, 0x08	; 8
    2aea:	92 07       	cpc	r25, r18
    2aec:	29 f4       	brne	.+10     	; 0x2af8 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2aee:	62 e0       	ldi	r22, 0x02	; 2
    2af0:	83 e0       	ldi	r24, 0x03	; 3
    2af2:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2af6:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2af8:	80 34       	cpi	r24, 0x40	; 64
    2afa:	29 e0       	ldi	r18, 0x09	; 9
    2afc:	92 07       	cpc	r25, r18
    2afe:	29 f4       	brne	.+10     	; 0x2b0a <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	84 e0       	ldi	r24, 0x04	; 4
    2b04:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b08:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2b0a:	80 34       	cpi	r24, 0x40	; 64
    2b0c:	2a e0       	ldi	r18, 0x0A	; 10
    2b0e:	92 07       	cpc	r25, r18
    2b10:	29 f4       	brne	.+10     	; 0x2b1c <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2b12:	62 e0       	ldi	r22, 0x02	; 2
    2b14:	85 e0       	ldi	r24, 0x05	; 5
    2b16:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b1a:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2b1c:	80 34       	cpi	r24, 0x40	; 64
    2b1e:	2b e0       	ldi	r18, 0x0B	; 11
    2b20:	92 07       	cpc	r25, r18
    2b22:	29 f4       	brne	.+10     	; 0x2b2e <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	86 e0       	ldi	r24, 0x06	; 6
    2b28:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b2c:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2b2e:	80 39       	cpi	r24, 0x90	; 144
    2b30:	28 e0       	ldi	r18, 0x08	; 8
    2b32:	92 07       	cpc	r25, r18
    2b34:	29 f4       	brne	.+10     	; 0x2b40 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2b36:	64 e0       	ldi	r22, 0x04	; 4
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b3e:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2b40:	80 39       	cpi	r24, 0x90	; 144
    2b42:	29 e0       	ldi	r18, 0x09	; 9
    2b44:	92 07       	cpc	r25, r18
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2b48:	64 e0       	ldi	r22, 0x04	; 4
    2b4a:	84 e0       	ldi	r24, 0x04	; 4
    2b4c:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b50:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2b52:	80 39       	cpi	r24, 0x90	; 144
    2b54:	2a e0       	ldi	r18, 0x0A	; 10
    2b56:	92 07       	cpc	r25, r18
    2b58:	29 f4       	brne	.+10     	; 0x2b64 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2b5a:	64 e0       	ldi	r22, 0x04	; 4
    2b5c:	85 e0       	ldi	r24, 0x05	; 5
    2b5e:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b62:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2b64:	80 39       	cpi	r24, 0x90	; 144
    2b66:	2b e0       	ldi	r18, 0x0B	; 11
    2b68:	92 07       	cpc	r25, r18
    2b6a:	29 f4       	brne	.+10     	; 0x2b76 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2b6c:	64 e0       	ldi	r22, 0x04	; 4
    2b6e:	86 e0       	ldi	r24, 0x06	; 6
    2b70:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b74:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2b76:	80 3c       	cpi	r24, 0xC0	; 192
    2b78:	28 e0       	ldi	r18, 0x08	; 8
    2b7a:	92 07       	cpc	r25, r18
    2b7c:	29 f4       	brne	.+10     	; 0x2b88 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2b7e:	68 e0       	ldi	r22, 0x08	; 8
    2b80:	83 e0       	ldi	r24, 0x03	; 3
    2b82:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b86:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2b88:	80 3c       	cpi	r24, 0xC0	; 192
    2b8a:	29 e0       	ldi	r18, 0x09	; 9
    2b8c:	92 07       	cpc	r25, r18
    2b8e:	29 f4       	brne	.+10     	; 0x2b9a <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2b90:	68 e0       	ldi	r22, 0x08	; 8
    2b92:	84 e0       	ldi	r24, 0x04	; 4
    2b94:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2b98:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2b9a:	80 3c       	cpi	r24, 0xC0	; 192
    2b9c:	2a e0       	ldi	r18, 0x0A	; 10
    2b9e:	92 07       	cpc	r25, r18
    2ba0:	29 f4       	brne	.+10     	; 0x2bac <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2ba2:	68 e0       	ldi	r22, 0x08	; 8
    2ba4:	85 e0       	ldi	r24, 0x05	; 5
    2ba6:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2baa:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2bac:	80 3c       	cpi	r24, 0xC0	; 192
    2bae:	2b e0       	ldi	r18, 0x0B	; 11
    2bb0:	92 07       	cpc	r25, r18
    2bb2:	29 f4       	brne	.+10     	; 0x2bbe <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2bb4:	68 e0       	ldi	r22, 0x08	; 8
    2bb6:	86 e0       	ldi	r24, 0x06	; 6
    2bb8:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2bbc:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2bbe:	80 3a       	cpi	r24, 0xA0	; 160
    2bc0:	28 e0       	ldi	r18, 0x08	; 8
    2bc2:	92 07       	cpc	r25, r18
    2bc4:	29 f4       	brne	.+10     	; 0x2bd0 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2bc6:	60 e1       	ldi	r22, 0x10	; 16
    2bc8:	83 e0       	ldi	r24, 0x03	; 3
    2bca:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2bce:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2bd0:	80 3a       	cpi	r24, 0xA0	; 160
    2bd2:	29 e0       	ldi	r18, 0x09	; 9
    2bd4:	92 07       	cpc	r25, r18
    2bd6:	29 f4       	brne	.+10     	; 0x2be2 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2bd8:	60 e1       	ldi	r22, 0x10	; 16
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2be0:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2be2:	80 3a       	cpi	r24, 0xA0	; 160
    2be4:	2a e0       	ldi	r18, 0x0A	; 10
    2be6:	92 07       	cpc	r25, r18
    2be8:	29 f4       	brne	.+10     	; 0x2bf4 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2bea:	60 e1       	ldi	r22, 0x10	; 16
    2bec:	85 e0       	ldi	r24, 0x05	; 5
    2bee:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2bf2:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2bf4:	80 3a       	cpi	r24, 0xA0	; 160
    2bf6:	2b e0       	ldi	r18, 0x0B	; 11
    2bf8:	92 07       	cpc	r25, r18
    2bfa:	29 f4       	brne	.+10     	; 0x2c06 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2bfc:	60 e1       	ldi	r22, 0x10	; 16
    2bfe:	86 e0       	ldi	r24, 0x06	; 6
    2c00:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c04:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2c06:	80 3b       	cpi	r24, 0xB0	; 176
    2c08:	28 e0       	ldi	r18, 0x08	; 8
    2c0a:	92 07       	cpc	r25, r18
    2c0c:	29 f4       	brne	.+10     	; 0x2c18 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2c0e:	60 e2       	ldi	r22, 0x20	; 32
    2c10:	83 e0       	ldi	r24, 0x03	; 3
    2c12:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c16:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2c18:	80 3b       	cpi	r24, 0xB0	; 176
    2c1a:	29 e0       	ldi	r18, 0x09	; 9
    2c1c:	92 07       	cpc	r25, r18
    2c1e:	29 f4       	brne	.+10     	; 0x2c2a <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2c20:	60 e2       	ldi	r22, 0x20	; 32
    2c22:	84 e0       	ldi	r24, 0x04	; 4
    2c24:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c28:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2c2a:	80 3b       	cpi	r24, 0xB0	; 176
    2c2c:	2a e0       	ldi	r18, 0x0A	; 10
    2c2e:	92 07       	cpc	r25, r18
    2c30:	29 f4       	brne	.+10     	; 0x2c3c <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2c32:	60 e2       	ldi	r22, 0x20	; 32
    2c34:	85 e0       	ldi	r24, 0x05	; 5
    2c36:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c3a:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2c3c:	80 3b       	cpi	r24, 0xB0	; 176
    2c3e:	2b e0       	ldi	r18, 0x0B	; 11
    2c40:	92 07       	cpc	r25, r18
    2c42:	29 f4       	brne	.+10     	; 0x2c4e <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2c44:	60 e2       	ldi	r22, 0x20	; 32
    2c46:	86 e0       	ldi	r24, 0x06	; 6
    2c48:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c4c:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2c4e:	80 38       	cpi	r24, 0x80	; 128
    2c50:	24 e0       	ldi	r18, 0x04	; 4
    2c52:	92 07       	cpc	r25, r18
    2c54:	29 f4       	brne	.+10     	; 0x2c60 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2c56:	60 e4       	ldi	r22, 0x40	; 64
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c5e:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2c60:	80 39       	cpi	r24, 0x90	; 144
    2c62:	24 e0       	ldi	r18, 0x04	; 4
    2c64:	92 07       	cpc	r25, r18
    2c66:	29 f4       	brne	.+10     	; 0x2c72 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2c68:	60 e4       	ldi	r22, 0x40	; 64
    2c6a:	84 e0       	ldi	r24, 0x04	; 4
    2c6c:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c70:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2c72:	80 3a       	cpi	r24, 0xA0	; 160
    2c74:	24 e0       	ldi	r18, 0x04	; 4
    2c76:	92 07       	cpc	r25, r18
    2c78:	29 f4       	brne	.+10     	; 0x2c84 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2c7a:	60 e4       	ldi	r22, 0x40	; 64
    2c7c:	85 e0       	ldi	r24, 0x05	; 5
    2c7e:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c82:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2c84:	80 3b       	cpi	r24, 0xB0	; 176
    2c86:	94 40       	sbci	r25, 0x04	; 4
    2c88:	21 f4       	brne	.+8      	; 0x2c92 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2c8a:	60 e4       	ldi	r22, 0x40	; 64
    2c8c:	86 e0       	ldi	r24, 0x06	; 6
    2c8e:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
    2c92:	08 95       	ret

00002c94 <_Z12IO_ReadWritebh>:

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
    2c94:	98 2f       	mov	r25, r24
	switch(io_port)
    2c96:	46 2f       	mov	r20, r22
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	fa 01       	movw	r30, r20
    2c9c:	31 97       	sbiw	r30, 0x01	; 1
    2c9e:	ec 30       	cpi	r30, 0x0C	; 12
    2ca0:	f1 05       	cpc	r31, r1
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <_Z12IO_ReadWritebh+0x12>
    2ca4:	b6 c0       	rjmp	.+364    	; 0x2e12 <_Z12IO_ReadWritebh+0x17e>
    2ca6:	88 27       	eor	r24, r24
    2ca8:	e6 5f       	subi	r30, 0xF6	; 246
    2caa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cac:	8f 4f       	sbci	r24, 0xFF	; 255
    2cae:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <__tablejump2__>
	{
		case 1:
		if (value == true)
    2cb2:	99 23       	and	r25, r25
    2cb4:	21 f0       	breq	.+8      	; 0x2cbe <_Z12IO_ReadWritebh+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    2cb6:	80 e8       	ldi	r24, 0x80	; 128
    2cb8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <_Z12IO_ReadWritebh+0x30>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
    2cbe:	80 e8       	ldi	r24, 0x80	; 128
    2cc0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    2cc4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2cc8:	88 1f       	adc	r24, r24
    2cca:	88 27       	eor	r24, r24
    2ccc:	88 1f       	adc	r24, r24
    2cce:	08 95       	ret
		break;
		
		case 2:
		if (value == true)
    2cd0:	99 23       	and	r25, r25
    2cd2:	21 f0       	breq	.+8      	; 0x2cdc <_Z12IO_ReadWritebh+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    2cd4:	80 e4       	ldi	r24, 0x40	; 64
    2cd6:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cda:	03 c0       	rjmp	.+6      	; 0x2ce2 <_Z12IO_ReadWritebh+0x4e>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
    2cdc:	80 e4       	ldi	r24, 0x40	; 64
    2cde:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    2ce2:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2ce6:	86 fb       	bst	r24, 6
    2ce8:	88 27       	eor	r24, r24
    2cea:	80 f9       	bld	r24, 0
    2cec:	08 95       	ret
		break;
		
		case 3:
		if (value == true)
    2cee:	99 23       	and	r25, r25
    2cf0:	21 f0       	breq	.+8      	; 0x2cfa <_Z12IO_ReadWritebh+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    2cf2:	80 e2       	ldi	r24, 0x20	; 32
    2cf4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <_Z12IO_ReadWritebh+0x6c>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
    2cfa:	80 e2       	ldi	r24, 0x20	; 32
    2cfc:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    2d00:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d04:	85 fb       	bst	r24, 5
    2d06:	88 27       	eor	r24, r24
    2d08:	80 f9       	bld	r24, 0
    2d0a:	08 95       	ret
		break;
		
		case 4: //Lift limit switches
		if (value == true)
    2d0c:	99 23       	and	r25, r25
    2d0e:	21 f0       	breq	.+8      	; 0x2d18 <_Z12IO_ReadWritebh+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    2d10:	80 e1       	ldi	r24, 0x10	; 16
    2d12:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d16:	03 c0       	rjmp	.+6      	; 0x2d1e <_Z12IO_ReadWritebh+0x8a>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
    2d18:	80 e1       	ldi	r24, 0x10	; 16
    2d1a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    2d1e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d22:	82 95       	swap	r24
    2d24:	81 70       	andi	r24, 0x01	; 1
    2d26:	08 95       	ret
		break;
		
		case 5:
		if (value == true)
    2d28:	99 23       	and	r25, r25
    2d2a:	21 f0       	breq	.+8      	; 0x2d34 <_Z12IO_ReadWritebh+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    2d2c:	88 e0       	ldi	r24, 0x08	; 8
    2d2e:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <_Z12IO_ReadWritebh+0xa6>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
    2d34:	88 e0       	ldi	r24, 0x08	; 8
    2d36:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    2d3a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d3e:	83 fb       	bst	r24, 3
    2d40:	88 27       	eor	r24, r24
    2d42:	80 f9       	bld	r24, 0
    2d44:	08 95       	ret
		break;
		
		case 6:
		if (value == true)
    2d46:	99 23       	and	r25, r25
    2d48:	21 f0       	breq	.+8      	; 0x2d52 <_Z12IO_ReadWritebh+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    2d4a:	84 e0       	ldi	r24, 0x04	; 4
    2d4c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d50:	03 c0       	rjmp	.+6      	; 0x2d58 <_Z12IO_ReadWritebh+0xc4>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
    2d52:	84 e0       	ldi	r24, 0x04	; 4
    2d54:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    2d58:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d5c:	82 fb       	bst	r24, 2
    2d5e:	88 27       	eor	r24, r24
    2d60:	80 f9       	bld	r24, 0
    2d62:	08 95       	ret
		break;
		
		case 7:
		if (value == true)
    2d64:	99 23       	and	r25, r25
    2d66:	21 f0       	breq	.+8      	; 0x2d70 <_Z12IO_ReadWritebh+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d6e:	03 c0       	rjmp	.+6      	; 0x2d76 <_Z12IO_ReadWritebh+0xe2>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    2d76:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d7a:	86 95       	lsr	r24
    2d7c:	81 70       	andi	r24, 0x01	; 1
    2d7e:	08 95       	ret
		break;
		
		case 8:
		if (value == true)
    2d80:	99 23       	and	r25, r25
    2d82:	21 f0       	breq	.+8      	; 0x2d8c <_Z12IO_ReadWritebh+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d8a:	03 c0       	rjmp	.+6      	; 0x2d92 <_Z12IO_ReadWritebh+0xfe>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    2d92:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d96:	81 70       	andi	r24, 0x01	; 1
    2d98:	08 95       	ret
		break;
		
		case 9:
		if (value == true)
    2d9a:	99 23       	and	r25, r25
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <_Z12IO_ReadWritebh+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    2d9e:	80 e8       	ldi	r24, 0x80	; 128
    2da0:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2da4:	03 c0       	rjmp	.+6      	; 0x2dac <_Z12IO_ReadWritebh+0x118>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
    2da6:	80 e8       	ldi	r24, 0x80	; 128
    2da8:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    2dac:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2db0:	88 1f       	adc	r24, r24
    2db2:	88 27       	eor	r24, r24
    2db4:	88 1f       	adc	r24, r24
    2db6:	08 95       	ret
		break;
		
		case 10:
		if (value == true)
    2db8:	99 23       	and	r25, r25
    2dba:	21 f0       	breq	.+8      	; 0x2dc4 <_Z12IO_ReadWritebh+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    2dbc:	80 e4       	ldi	r24, 0x40	; 64
    2dbe:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <_Z12IO_ReadWritebh+0x136>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
    2dc4:	80 e4       	ldi	r24, 0x40	; 64
    2dc6:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    2dca:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2dce:	86 fb       	bst	r24, 6
    2dd0:	88 27       	eor	r24, r24
    2dd2:	80 f9       	bld	r24, 0
    2dd4:	08 95       	ret
		break;
		
		case 11:
		if (value == true)
    2dd6:	99 23       	and	r25, r25
    2dd8:	21 f0       	breq	.+8      	; 0x2de2 <_Z12IO_ReadWritebh+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    2dda:	80 e8       	ldi	r24, 0x80	; 128
    2ddc:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2de0:	03 c0       	rjmp	.+6      	; 0x2de8 <_Z12IO_ReadWritebh+0x154>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
    2de2:	80 e8       	ldi	r24, 0x80	; 128
    2de4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    2de8:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2dec:	88 1f       	adc	r24, r24
    2dee:	88 27       	eor	r24, r24
    2df0:	88 1f       	adc	r24, r24
    2df2:	08 95       	ret
		break;
		
		case 12:
		if (value == true)
    2df4:	99 23       	and	r25, r25
    2df6:	21 f0       	breq	.+8      	; 0x2e00 <_Z12IO_ReadWritebh+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    2df8:	80 e4       	ldi	r24, 0x40	; 64
    2dfa:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <_Z12IO_ReadWritebh+0x172>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
    2e00:	80 e4       	ldi	r24, 0x40	; 64
    2e02:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    2e06:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2e0a:	86 fb       	bst	r24, 6
    2e0c:	88 27       	eor	r24, r24
    2e0e:	80 f9       	bld	r24, 0
    2e10:	08 95       	ret
		break;
		
	}
	return 0;
    2e12:	80 e0       	ldi	r24, 0x00	; 0
}
    2e14:	08 95       	ret

00002e16 <_Z11DigitalReadi>:
void ToggleLED();
void LED(bool i);
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
    2e16:	68 2f       	mov	r22, r24
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <_Z12IO_ReadWritebh>
    2e1e:	08 95       	ret

00002e20 <_Z17ReadSignatureBytej>:

uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin);

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    2e20:	aa ec       	ldi	r26, 0xCA	; 202
    2e22:	b1 e0       	ldi	r27, 0x01	; 1
    2e24:	22 e0       	ldi	r18, 0x02	; 2
    2e26:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    2e28:	fc 01       	movw	r30, r24
    2e2a:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2e2c:	1c 92       	st	X, r1
	return Result;
}
    2e2e:	08 95       	ret

00002e30 <_Z12I_AnalogReadR13ADC_CH_structh>:
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
	}
}

uint8_t I_AnalogRead(ADC_CH_struct &CH, uint8_t pin) {
    2e30:	fc 01       	movw	r30, r24
	switch(pin)
    2e32:	63 30       	cpi	r22, 0x03	; 3
    2e34:	89 f0       	breq	.+34     	; 0x2e58 <_Z12I_AnalogReadR13ADC_CH_structh+0x28>
    2e36:	28 f4       	brcc	.+10     	; 0x2e42 <_Z12I_AnalogReadR13ADC_CH_structh+0x12>
    2e38:	61 30       	cpi	r22, 0x01	; 1
    2e3a:	41 f0       	breq	.+16     	; 0x2e4c <_Z12I_AnalogReadR13ADC_CH_structh+0x1c>
    2e3c:	62 30       	cpi	r22, 0x02	; 2
    2e3e:	49 f0       	breq	.+18     	; 0x2e52 <_Z12I_AnalogReadR13ADC_CH_structh+0x22>
    2e40:	1d c0       	rjmp	.+58     	; 0x2e7c <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
    2e42:	64 30       	cpi	r22, 0x04	; 4
    2e44:	61 f0       	breq	.+24     	; 0x2e5e <_Z12I_AnalogReadR13ADC_CH_structh+0x2e>
    2e46:	65 30       	cpi	r22, 0x05	; 5
    2e48:	69 f0       	breq	.+26     	; 0x2e64 <_Z12I_AnalogReadR13ADC_CH_structh+0x34>
    2e4a:	18 c0       	rjmp	.+48     	; 0x2e7c <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
	{
		//ADC_CH_MUXPOS_PIN0_gc is AREF pin (op 5v), pin lezen returned altijd >252
		case 1:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc; //select pin
    2e4c:	88 e0       	ldi	r24, 0x08	; 8
    2e4e:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e50:	0b c0       	rjmp	.+22     	; 0x2e68 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 2:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc; //select pin
    2e52:	80 e1       	ldi	r24, 0x10	; 16
    2e54:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e56:	08 c0       	rjmp	.+16     	; 0x2e68 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 3:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc; //select pin
    2e58:	88 e1       	ldi	r24, 0x18	; 24
    2e5a:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e5c:	05 c0       	rjmp	.+10     	; 0x2e68 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 4:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc; //select pin
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
    2e64:	88 e2       	ldi	r24, 0x28	; 40
    2e66:	81 83       	std	Z+1, r24	; 0x01
		default:
		return 0;
		break;
	}
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
    2e68:	80 81       	ld	r24, Z
    2e6a:	80 68       	ori	r24, 0x80	; 128
    2e6c:	80 83       	st	Z, r24
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	90 ff       	sbrs	r25, 0
    2e72:	fd cf       	rjmp	.-6      	; 0x2e6e <_Z12I_AnalogReadR13ADC_CH_structh+0x3e>
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	83 83       	std	Z+3, r24	; 0x03
	return CH.RESL; //return lower byte result from channel (8 bit result)
    2e78:	84 81       	ldd	r24, Z+4	; 0x04
    2e7a:	08 95       	ret
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
		break;
		
		default:
		return 0;
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
	return CH.RESL; //return lower byte result from channel (8 bit result)
}
    2e7e:	08 95       	ret

00002e80 <_Z12I_AnalogReadR10ADC_structh>:

//defaults to ch0
uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin) {
	return I_AnalogRead(ADC.CH0, pin);
    2e80:	80 96       	adiw	r24, 0x20	; 32
    2e82:	0e 94 18 17 	call	0x2e30	; 0x2e30 <_Z12I_AnalogReadR13ADC_CH_structh>
}
    2e86:	08 95       	ret

00002e88 <_Z8ADC_InitR10ADC_struct>:
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
	return Result;
}

void ADC_Init(ADC_struct &ADC) {
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	ec 01       	movw	r28, r24
	/* http://ww1.microchip.com/downloads/en/DeviceDoc/doc8077.pdf page 296 */

	//calibration data from signature row
	if (&ADC == &ADCA) {
    2e92:	c1 15       	cp	r28, r1
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	d8 07       	cpc	r29, r24
    2e98:	79 f4       	brne	.+30     	; 0x2eb8 <_Z8ADC_InitR10ADC_struct+0x30>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCACAL0); //effect onbekend maar staat in datasheet
    2e9a:	80 b5       	in	r24, 0x20	; 32
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z17ReadSignatureBytej>
    2ea2:	00 e0       	ldi	r16, 0x00	; 0
    2ea4:	12 e0       	ldi	r17, 0x02	; 2
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCACAL1);
    2eaa:	81 b5       	in	r24, 0x21	; 33
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z17ReadSignatureBytej>
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	85 87       	std	Z+13, r24	; 0x0d
    2eb6:	14 c0       	rjmp	.+40     	; 0x2ee0 <_Z8ADC_InitR10ADC_struct+0x58>
	} else if (&ADC == &ADCB) {
    2eb8:	c0 34       	cpi	r28, 0x40	; 64
    2eba:	f2 e0       	ldi	r31, 0x02	; 2
    2ebc:	df 07       	cpc	r29, r31
    2ebe:	79 f4       	brne	.+30     	; 0x2ede <_Z8ADC_InitR10ADC_struct+0x56>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCBCAL0);
    2ec0:	84 b5       	in	r24, 0x24	; 36
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z17ReadSignatureBytej>
    2ec8:	00 e4       	ldi	r16, 0x40	; 64
    2eca:	12 e0       	ldi	r17, 0x02	; 2
    2ecc:	f8 01       	movw	r30, r16
    2ece:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCBCAL1);
    2ed0:	85 b5       	in	r24, 0x25	; 37
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	0e 94 10 17 	call	0x2e20	; 0x2e20 <_Z17ReadSignatureBytej>
    2ed8:	f8 01       	movw	r30, r16
    2eda:	85 87       	std	Z+13, r24	; 0x0d
    2edc:	01 c0       	rjmp	.+2      	; 0x2ee0 <_Z8ADC_InitR10ADC_struct+0x58>

	//calibration data from signature row
	if (&ADC == &ADCA) {
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCACAL0); //effect onbekend maar staat in datasheet
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCACAL1);
	} else if (&ADC == &ADCB) {
    2ede:	ff cf       	rjmp	.-2      	; 0x2ede <_Z8ADC_InitR10ADC_struct+0x56>
		//geef error ofzo
		while(true){}
	}
	
	//cancel any pending conversions, disable ADC
	ADC.CTRLA = ADC_FLUSH_bm;
    2ee0:	82 e0       	ldi	r24, 0x02	; 2
    2ee2:	88 83       	st	Y, r24
	
	//external reference on PORT A (voltage dat op AREF pin wordt gezet, het te meten voltage mag hier niet boven komen)
	ADC.REFCTRL = ADC_REFSEL_AREFA_gc;
    2ee4:	80 e2       	ldi	r24, 0x20	; 32
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
	
	//8-bit right-adjusted result
	ADC.CTRLB = (ADC_RESOLUTION_8BIT_gc | (1<<ADC_CONMODE_bm));
    2ee8:	84 e0       	ldi	r24, 0x04	; 4
    2eea:	89 83       	std	Y+1, r24	; 0x01
	
	//prescaler 128						// !willekeurig gekozen
	ADC.PRESCALER = ADC_PRESCALER_DIV64_gc;
    2eec:	8c 83       	std	Y+4, r24	; 0x04

	//enable ADC
	ADC.CTRLA |= ADC_ENABLE_bm;
    2eee:	88 81       	ld	r24, Y
    2ef0:	81 60       	ori	r24, 0x01	; 1
    2ef2:	88 83       	st	Y, r24
	
	//result at ch0
//	ADC.CTRLA |= (0x0<<2);

	//single ended input no gain
	ADC.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	88 a3       	std	Y+32, r24	; 0x20

	//disable interrupts
	ADCA.CH0.INTCTRL = 0;
    2ef8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
	
	//2 dummy reads
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
    2efc:	61 e0       	ldi	r22, 0x01	; 1
    2efe:	ce 01       	movw	r24, r28
    2f00:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_Z12I_AnalogReadR10ADC_structh>
    2f04:	61 e0       	ldi	r22, 0x01	; 1
    2f06:	ce 01       	movw	r24, r28
    2f08:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_Z12I_AnalogReadR10ADC_structh>
	}
}
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	08 95       	ret

00002f16 <_Z15ReadSharpSensorh>:
#ifndef SHARPSENSOR_H_
#define SHARPSENSOR_H_

uint8_t ReadSharpSensor(uint8_t sensor)
{
	uint8_t val = I_AnalogRead(ADCA, sensor);
    2f16:	68 2f       	mov	r22, r24
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	92 e0       	ldi	r25, 0x02	; 2
    2f1c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_Z12I_AnalogReadR10ADC_structh>
	
	switch(val)
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	fc 01       	movw	r30, r24
    2f24:	fc 97       	sbiw	r30, 0x3c	; 60
    2f26:	e4 3c       	cpi	r30, 0xC4	; 196
    2f28:	f1 05       	cpc	r31, r1
    2f2a:	f0 f4       	brcc	.+60     	; 0x2f68 <_Z15ReadSharpSensorh+0x52>
    2f2c:	88 27       	eor	r24, r24
    2f2e:	ea 5e       	subi	r30, 0xEA	; 234
    2f30:	fe 4f       	sbci	r31, 0xFE	; 254
    2f32:	8f 4f       	sbci	r24, 0xFF	; 255
    2f34:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <__tablejump2__>
		case 250 ... 255:
		return 4; //centimeter
		break;
		
		case 245 ... 249:
		return 5; //centimeter
    2f38:	85 e0       	ldi	r24, 0x05	; 5
    2f3a:	08 95       	ret
		break;
		
		case 240 ... 244:
		return 7; //centimeter
    2f3c:	87 e0       	ldi	r24, 0x07	; 7
    2f3e:	08 95       	ret
		break;
		
		case 235 ... 239:
		return 8; //centimeter
    2f40:	88 e0       	ldi	r24, 0x08	; 8
    2f42:	08 95       	ret
		break;
		
		case 230 ... 234:
		return 9; //centimeter
    2f44:	89 e0       	ldi	r24, 0x09	; 9
    2f46:	08 95       	ret
		break;
		
		case 200 ... 229:
		return 10; //centimeter
    2f48:	8a e0       	ldi	r24, 0x0A	; 10
    2f4a:	08 95       	ret
		break;
		
		case 190 ... 199:
		return 11; //centimeter
    2f4c:	8b e0       	ldi	r24, 0x0B	; 11
    2f4e:	08 95       	ret
		break;
		
		case 170 ... 189:
		return 12; //centimeter
    2f50:	8c e0       	ldi	r24, 0x0C	; 12
    2f52:	08 95       	ret
		break;
		
		case 155 ... 169:
		return 13; //centimeter
    2f54:	8d e0       	ldi	r24, 0x0D	; 13
    2f56:	08 95       	ret
		break;
		
		case 140 ... 154:
		return 14; //centimeter
    2f58:	8e e0       	ldi	r24, 0x0E	; 14
    2f5a:	08 95       	ret
		break;
		
		case 110 ... 119:
		return 16; //centimeter
    2f5c:	80 e1       	ldi	r24, 0x10	; 16
    2f5e:	08 95       	ret
		break;
		
		case 80 ... 99:
		return 20; //centimeter
    2f60:	84 e1       	ldi	r24, 0x14	; 20
    2f62:	08 95       	ret
		break;
		
		case 60 ... 79:
		return 25; //centimeter
    2f64:	89 e1       	ldi	r24, 0x19	; 25
    2f66:	08 95       	ret
		break;
		
		default:
		return 30;
    2f68:	8e e1       	ldi	r24, 0x1E	; 30
    2f6a:	08 95       	ret
	uint8_t val = I_AnalogRead(ADCA, sensor);
	
	switch(val)
	{
		case 250 ... 255:
		return 4; //centimeter
    2f6c:	84 e0       	ldi	r24, 0x04	; 4
		
		default:
		return 30;
		break;
	}
}
    2f6e:	08 95       	ret

00002f70 <_Z10AnalogReadi>:
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
    2f70:	68 2f       	mov	r22, r24
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_Z12I_AnalogReadR10ADC_structh>
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	08 95       	ret

00002f7e <_Z15passthrough_TWIv>:
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit


/* Enter stepper-testing mode. Will exit on Reset */
void passthrough_TWI() {
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	2b 97       	sbiw	r28, 0x0b	; 11
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	de bf       	out	0x3e, r29	; 62
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
    2f8c:	60 e8       	ldi	r22, 0x80	; 128
    2f8e:	74 e0       	ldi	r23, 0x04	; 4
    2f90:	83 ee       	ldi	r24, 0xE3	; 227
    2f92:	94 e1       	ldi	r25, 0x14	; 20
    2f94:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_Z13TWI_onRequestPFvvER10TWI_struct>
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
    2f98:	0f 2e       	mov	r0, r31
    2f9a:	f6 ee       	ldi	r31, 0xE6	; 230
    2f9c:	cf 2e       	mov	r12, r31
    2f9e:	f6 e0       	ldi	r31, 0x06	; 6
    2fa0:	df 2e       	mov	r13, r31
    2fa2:	f0 2d       	mov	r31, r0
			
			if (buff[0] == 0) { //test steppers
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    2fa4:	0f 2e       	mov	r0, r31
    2fa6:	f7 e0       	ldi	r31, 0x07	; 7
    2fa8:	9f 2e       	mov	r9, r31
    2faa:	f0 2d       	mov	r31, r0
    2fac:	ce 01       	movw	r24, r28
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	5c 01       	movw	r10, r24
    2fb2:	0f 2e       	mov	r0, r31
    2fb4:	fc e4       	ldi	r31, 0x4C	; 76
    2fb6:	7f 2e       	mov	r7, r31
    2fb8:	f0 2d       	mov	r31, r0
    2fba:	0f 2e       	mov	r0, r31
    2fbc:	f2 e3       	ldi	r31, 0x32	; 50
    2fbe:	8f 2e       	mov	r8, r31
    2fc0:	f0 2d       	mov	r31, r0
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
				} else if (buff[0] == 1) { //lees analog
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
    2fc2:	0f 2e       	mov	r0, r31
    2fc4:	f5 ee       	ldi	r31, 0xE5	; 229
    2fc6:	ef 2e       	mov	r14, r31
    2fc8:	f6 e0       	ldi	r31, 0x06	; 6
    2fca:	ff 2e       	mov	r15, r31
    2fcc:	f0 2d       	mov	r31, r0
void passthrough_TWI() {
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
    2fce:	80 e8       	ldi	r24, 0x80	; 128
    2fd0:	94 e0       	ldi	r25, 0x04	; 4
    2fd2:	0e 94 78 07 	call	0xef0	; 0xef0 <_Z19TWI_RecievedAddressR10TWI_struct>
    2fd6:	88 23       	and	r24, r24
    2fd8:	d1 f3       	breq	.-12     	; 0x2fce <_Z15passthrough_TWIv+0x50>
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
    2fda:	f6 01       	movw	r30, r12
    2fdc:	80 81       	ld	r24, Z
    2fde:	80 63       	ori	r24, 0x30	; 48
    2fe0:	80 83       	st	Z, r24
			
			TWI_ReceivePacket(TWIC,(uint8_t*)buff, 3);
    2fe2:	43 e0       	ldi	r20, 0x03	; 3
    2fe4:	be 01       	movw	r22, r28
    2fe6:	68 5f       	subi	r22, 0xF8	; 248
    2fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    2fea:	80 e8       	ldi	r24, 0x80	; 128
    2fec:	94 e0       	ldi	r25, 0x04	; 4
    2fee:	0e 94 85 07 	call	0xf0a	; 0xf0a <_Z17TWI_ReceivePacketR10TWI_structPhh>
    2ff2:	8f e6       	ldi	r24, 0x6F	; 111
    2ff4:	97 e1       	ldi	r25, 0x17	; 23
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <_Z15passthrough_TWIv+0x78>
    2ffa:	00 c0       	rjmp	.+0      	; 0x2ffc <_Z15passthrough_TWIv+0x7e>
    2ffc:	00 00       	nop
			_delay_ms(1);
			TWIC.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
    2ffe:	e0 e8       	ldi	r30, 0x80	; 128
    3000:	f4 e0       	ldi	r31, 0x04	; 4
    3002:	82 85       	ldd	r24, Z+10	; 0x0a
    3004:	80 6c       	ori	r24, 0xC0	; 192
    3006:	82 87       	std	Z+10, r24	; 0x0a
			
			if (buff[0] == 0) { //test steppers
    3008:	88 85       	ldd	r24, Y+8	; 0x08
    300a:	81 11       	cpse	r24, r1
    300c:	20 c0       	rjmp	.+64     	; 0x304e <_Z15passthrough_TWIv+0xd0>
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
    300e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3010:	8b 87       	std	Y+11, r24	; 0x0b
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
    3012:	00 eb       	ldi	r16, 0xB0	; 176
    3014:	1a e0       	ldi	r17, 0x0A	; 10
    3016:	29 85       	ldd	r18, Y+9	; 0x09
    3018:	41 e0       	ldi	r20, 0x01	; 1
    301a:	be 01       	movw	r22, r28
    301c:	65 5f       	subi	r22, 0xF5	; 245
    301e:	7f 4f       	sbci	r23, 0xFF	; 255
    3020:	8a e4       	ldi	r24, 0x4A	; 74
    3022:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    3026:	f5 01       	movw	r30, r10
    3028:	89 2d       	mov	r24, r9
    302a:	11 92       	st	Z+, r1
    302c:	8a 95       	dec	r24
    302e:	e9 f7       	brne	.-6      	; 0x302a <_Z15passthrough_TWIv+0xac>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	7a 82       	std	Y+2, r7	; 0x02
    3036:	8c 82       	std	Y+4, r8	; 0x04
    3038:	8e 83       	std	Y+6, r24	; 0x06
    303a:	8f 83       	std	Y+7, r24	; 0x07
    303c:	8a 85       	ldd	r24, Y+10	; 0x0a
    303e:	8d 83       	std	Y+5, r24	; 0x05
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
    3040:	29 85       	ldd	r18, Y+9	; 0x09
    3042:	49 2d       	mov	r20, r9
    3044:	b5 01       	movw	r22, r10
    3046:	86 e4       	ldi	r24, 0x46	; 70
    3048:	0e 94 99 12 	call	0x2532	; 0x2532 <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    304c:	08 c0       	rjmp	.+16     	; 0x305e <_Z15passthrough_TWIv+0xe0>
				} else if (buff[0] == 1) { //lees analog
    304e:	81 30       	cpi	r24, 0x01	; 1
    3050:	31 f4       	brne	.+12     	; 0x305e <_Z15passthrough_TWIv+0xe0>
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
    3052:	89 85       	ldd	r24, Y+9	; 0x09
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <_Z10AnalogReadi>
    305a:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <Result>
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
    305e:	f7 01       	movw	r30, r14
    3060:	80 81       	ld	r24, Z
    3062:	80 63       	ori	r24, 0x30	; 48
    3064:	80 83       	st	Z, r24
    3066:	b3 cf       	rjmp	.-154    	; 0x2fce <_Z15passthrough_TWIv+0x50>

00003068 <_Z16initOptocouplersv>:

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
    3068:	8f e3       	ldi	r24, 0x3F	; 63
    306a:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
    306e:	08 95       	ret

00003070 <_Z17I_OptocouplerReadh>:
/**
 * \brief - Read the level of an optocoupler
 */
bool I_OptocouplerRead(uint8_t io_port)
{
	switch(io_port)
    3070:	82 30       	cpi	r24, 0x02	; 2
    3072:	a9 f0       	breq	.+42     	; 0x309e <_Z17I_OptocouplerReadh+0x2e>
    3074:	28 f4       	brcc	.+10     	; 0x3080 <_Z17I_OptocouplerReadh+0x10>
    3076:	88 23       	and	r24, r24
    3078:	49 f0       	breq	.+18     	; 0x308c <_Z17I_OptocouplerReadh+0x1c>
    307a:	81 30       	cpi	r24, 0x01	; 1
    307c:	59 f0       	breq	.+22     	; 0x3094 <_Z17I_OptocouplerReadh+0x24>
    307e:	26 c0       	rjmp	.+76     	; 0x30cc <_Z17I_OptocouplerReadh+0x5c>
    3080:	84 30       	cpi	r24, 0x04	; 4
    3082:	c9 f0       	breq	.+50     	; 0x30b6 <_Z17I_OptocouplerReadh+0x46>
    3084:	90 f0       	brcs	.+36     	; 0x30aa <_Z17I_OptocouplerReadh+0x3a>
    3086:	85 30       	cpi	r24, 0x05	; 5
    3088:	d9 f0       	breq	.+54     	; 0x30c0 <_Z17I_OptocouplerReadh+0x50>
    308a:	20 c0       	rjmp	.+64     	; 0x30cc <_Z17I_OptocouplerReadh+0x5c>
	{
		case 0: return OPTO_IN & OPTO0;
    308c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    3090:	81 70       	andi	r24, 0x01	; 1
    3092:	08 95       	ret
		case 1: return OPTO_IN & OPTO1;
    3094:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    3098:	86 95       	lsr	r24
    309a:	81 70       	andi	r24, 0x01	; 1
    309c:	08 95       	ret
		case 2: return OPTO_IN & OPTO2;
    309e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30a2:	82 fb       	bst	r24, 2
    30a4:	88 27       	eor	r24, r24
    30a6:	80 f9       	bld	r24, 0
    30a8:	08 95       	ret
		case 3: return OPTO_IN & OPTO3;
    30aa:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30ae:	83 fb       	bst	r24, 3
    30b0:	88 27       	eor	r24, r24
    30b2:	80 f9       	bld	r24, 0
    30b4:	08 95       	ret
		case 4: return OPTO_IN & OPTO4;
    30b6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30ba:	82 95       	swap	r24
    30bc:	81 70       	andi	r24, 0x01	; 1
    30be:	08 95       	ret
		case 5: return OPTO_IN & OPTO5;
    30c0:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30c4:	85 fb       	bst	r24, 5
    30c6:	88 27       	eor	r24, r24
    30c8:	80 f9       	bld	r24, 0
    30ca:	08 95       	ret
		default: return 0;
    30cc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    30ce:	08 95       	ret

000030d0 <_Z15OptocouplerReadi>:
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
    30d0:	0e 94 38 18 	call	0x3070	; 0x3070 <_Z17I_OptocouplerReadh>
    30d4:	08 95       	ret

000030d6 <__vector_100>:
void requestStarted() { TWI_Write(TWIC, Started); }
void requestResult() { TWI_Write(TWIC, Result); }


/* ISR INT0, gebruikt voor lift interrupts */
ISR(PORTK_INT0_vect) {
    30d6:	1f 92       	push	r1
    30d8:	0f 92       	push	r0
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	0f 92       	push	r0
    30de:	11 24       	eor	r1, r1
    30e0:	08 b6       	in	r0, 0x38	; 56
    30e2:	0f 92       	push	r0
    30e4:	18 be       	out	0x38, r1	; 56
    30e6:	09 b6       	in	r0, 0x39	; 57
    30e8:	0f 92       	push	r0
    30ea:	19 be       	out	0x39, r1	; 57
    30ec:	0a b6       	in	r0, 0x3a	; 58
    30ee:	0f 92       	push	r0
    30f0:	1a be       	out	0x3a, r1	; 58
    30f2:	0b b6       	in	r0, 0x3b	; 59
    30f4:	0f 92       	push	r0
    30f6:	1b be       	out	0x3b, r1	; 59
    30f8:	2f 93       	push	r18
    30fa:	3f 93       	push	r19
    30fc:	4f 93       	push	r20
    30fe:	5f 93       	push	r21
    3100:	6f 93       	push	r22
    3102:	7f 93       	push	r23
    3104:	8f 93       	push	r24
    3106:	9f 93       	push	r25
    3108:	af 93       	push	r26
    310a:	bf 93       	push	r27
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	ef 93       	push	r30
    3112:	ff 93       	push	r31
	//Optional debounce delay, uncomment if ISR is unstable	(delay in ISR not recommended!)
	//_delay_ms(10);	//Switch debounce time
	bool elevatorUpPressed = !(PORTK_IN & EV_SWITCH_PIN_UP); //Pin use pull-ups, invert to give true on pressed
    3114:	e8 e2       	ldi	r30, 0x28	; 40
    3116:	f7 e0       	ldi	r31, 0x07	; 7
    3118:	c0 81       	ld	r28, Z
    311a:	c0 71       	andi	r28, 0x10	; 16
	bool elevatorDownPressed = !(PORTK_IN & EV_SWITCH_PIN_DOWN);
    311c:	d0 81       	ld	r29, Z

	DEBUG_OUT("Entered INT0 ISR\r\n");
    311e:	6b ed       	ldi	r22, 0xDB	; 219
    3120:	71 e2       	ldi	r23, 0x21	; 33
    3122:	80 ea       	ldi	r24, 0xA0	; 160
    3124:	99 e0       	ldi	r25, 0x09	; 9
    3126:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>


	if(elevatorDownPressed){
    312a:	d5 fd       	sbrc	r29, 5
    312c:	09 c0       	rjmp	.+18     	; 0x3140 <__vector_100+0x6a>
		DEBUG_OUT("Elevator Switch DOWN was pressed\n\r");
    312e:	6e ee       	ldi	r22, 0xEE	; 238
    3130:	71 e2       	ldi	r23, 0x21	; 33
    3132:	80 ea       	ldi	r24, 0xA0	; 160
    3134:	99 e0       	ldi	r25, 0x09	; 9
    3136:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(false); //Run with parameter false to indicate DOWN
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	0e 94 8d 0b 	call	0x171a	; 0x171a <ElevatorButtonInISR>

	}
	if(elevatorUpPressed){
    3140:	c1 11       	cpse	r28, r1
    3142:	09 c0       	rjmp	.+18     	; 0x3156 <__vector_100+0x80>
		DEBUG_OUT("Elevator Switch UP was pressed\n\r");
    3144:	61 e1       	ldi	r22, 0x11	; 17
    3146:	72 e2       	ldi	r23, 0x22	; 34
    3148:	80 ea       	ldi	r24, 0xA0	; 160
    314a:	99 e0       	ldi	r25, 0x09	; 9
    314c:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(true); //Run with parameter true to indicate UP
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	0e 94 8d 0b 	call	0x171a	; 0x171a <ElevatorButtonInISR>
	/**
	*	ISR - PORTK INT0 checks the Lift Interrupt switches. It gets triggered when either the top or bottom switch is pressed.
	*	The ISR will not detect which of the switches has changed, but can read what switches are pressed by reading PORTK_IN.
	*	Since only one switch should be pressed at a single time, it is not an issue that it does not detect which one has changed.
	*/
}
    3156:	ff 91       	pop	r31
    3158:	ef 91       	pop	r30
    315a:	df 91       	pop	r29
    315c:	cf 91       	pop	r28
    315e:	bf 91       	pop	r27
    3160:	af 91       	pop	r26
    3162:	9f 91       	pop	r25
    3164:	8f 91       	pop	r24
    3166:	7f 91       	pop	r23
    3168:	6f 91       	pop	r22
    316a:	5f 91       	pop	r21
    316c:	4f 91       	pop	r20
    316e:	3f 91       	pop	r19
    3170:	2f 91       	pop	r18
    3172:	0f 90       	pop	r0
    3174:	0b be       	out	0x3b, r0	; 59
    3176:	0f 90       	pop	r0
    3178:	0a be       	out	0x3a, r0	; 58
    317a:	0f 90       	pop	r0
    317c:	09 be       	out	0x39, r0	; 57
    317e:	0f 90       	pop	r0
    3180:	08 be       	out	0x38, r0	; 56
    3182:	0f 90       	pop	r0
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	0f 90       	pop	r0
    3188:	1f 90       	pop	r1
    318a:	18 95       	reti

0000318c <__vector_101>:


///* ISR INT1, gebruikt voor sorterarm interrupts */
ISR(PORTK_INT1_vect) {
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	11 24       	eor	r1, r1
    3196:	08 b6       	in	r0, 0x38	; 56
    3198:	0f 92       	push	r0
    319a:	18 be       	out	0x38, r1	; 56
    319c:	09 b6       	in	r0, 0x39	; 57
    319e:	0f 92       	push	r0
    31a0:	19 be       	out	0x39, r1	; 57
    31a2:	0a b6       	in	r0, 0x3a	; 58
    31a4:	0f 92       	push	r0
    31a6:	1a be       	out	0x3a, r1	; 58
    31a8:	0b b6       	in	r0, 0x3b	; 59
    31aa:	0f 92       	push	r0
    31ac:	1b be       	out	0x3b, r1	; 59
    31ae:	2f 93       	push	r18
    31b0:	3f 93       	push	r19
    31b2:	4f 93       	push	r20
    31b4:	5f 93       	push	r21
    31b6:	6f 93       	push	r22
    31b8:	7f 93       	push	r23
    31ba:	8f 93       	push	r24
    31bc:	9f 93       	push	r25
    31be:	af 93       	push	r26
    31c0:	bf 93       	push	r27
    31c2:	cf 93       	push	r28
    31c4:	df 93       	push	r29
    31c6:	ef 93       	push	r30
    31c8:	ff 93       	push	r31
	//If instability occurs, uncomment debounce delay (delay in ISR is not recommended)
	//_delay_ms(10); //Debounce delay

	//Read the PORTK register on the SorterArm pins:
	bool leftIsPressed = !(PORTK_IN & sa1.switch_pin_left); //Pin use pull-ups, invert to give true on pressed
    31ca:	e8 e2       	ldi	r30, 0x28	; 40
    31cc:	f7 e0       	ldi	r31, 0x07	; 7
    31ce:	d0 81       	ld	r29, Z
	bool rightIsPressed = !(PORTK_IN & sa1.switch_pin_right);
    31d0:	c0 81       	ld	r28, Z
    31d2:	c0 78       	andi	r28, 0x80	; 128

	DEBUG_OUT("Entered INT1 ISR\r\n");
    31d4:	62 e3       	ldi	r22, 0x32	; 50
    31d6:	72 e2       	ldi	r23, 0x22	; 34
    31d8:	80 ea       	ldi	r24, 0xA0	; 160
    31da:	99 e0       	ldi	r25, 0x09	; 9
    31dc:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	if(leftIsPressed){
    31e0:	d6 fd       	sbrc	r29, 6
    31e2:	06 c0       	rjmp	.+12     	; 0x31f0 <__vector_101+0x64>
	 DEBUG_OUT("SorterArm switch LEFT was pressed\n\r");
    31e4:	65 e4       	ldi	r22, 0x45	; 69
    31e6:	72 e2       	ldi	r23, 0x22	; 34
    31e8:	80 ea       	ldi	r24, 0xA0	; 160
    31ea:	99 e0       	ldi	r25, 0x09	; 9
    31ec:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	 //TODO sorterarm ISR implementation
	}
	if(rightIsPressed){
    31f0:	c1 11       	cpse	r28, r1
    31f2:	06 c0       	rjmp	.+12     	; 0x3200 <__vector_101+0x74>
	 DEBUG_OUT("SorterArm switch RIGHT was pressed\n\r");
    31f4:	69 e6       	ldi	r22, 0x69	; 105
    31f6:	72 e2       	ldi	r23, 0x22	; 34
    31f8:	80 ea       	ldi	r24, 0xA0	; 160
    31fa:	99 e0       	ldi	r25, 0x09	; 9
    31fc:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>

	//Currently checks the PORTK register for which pin is pressed down
	//The sorterArm should theoretically only be able to press one switch at a time
	//If necessary, code could be added for checking which switch changed state.
	
}
    3200:	ff 91       	pop	r31
    3202:	ef 91       	pop	r30
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	bf 91       	pop	r27
    320a:	af 91       	pop	r26
    320c:	9f 91       	pop	r25
    320e:	8f 91       	pop	r24
    3210:	7f 91       	pop	r23
    3212:	6f 91       	pop	r22
    3214:	5f 91       	pop	r21
    3216:	4f 91       	pop	r20
    3218:	3f 91       	pop	r19
    321a:	2f 91       	pop	r18
    321c:	0f 90       	pop	r0
    321e:	0b be       	out	0x3b, r0	; 59
    3220:	0f 90       	pop	r0
    3222:	0a be       	out	0x3a, r0	; 58
    3224:	0f 90       	pop	r0
    3226:	09 be       	out	0x39, r0	; 57
    3228:	0f 90       	pop	r0
    322a:	08 be       	out	0x38, r0	; 56
    322c:	0f 90       	pop	r0
    322e:	0f be       	out	0x3f, r0	; 63
    3230:	0f 90       	pop	r0
    3232:	1f 90       	pop	r1
    3234:	18 95       	reti

00003236 <_Z8initLEDsv>:
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
	}
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
    3236:	80 e3       	ldi	r24, 0x30	; 48
    3238:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
    323c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    3240:	08 95       	ret

00003242 <main>:
	
}


int main(void)
{
    3242:	cf 92       	push	r12
    3244:	df 92       	push	r13
    3246:	ef 92       	push	r14
    3248:	ff 92       	push	r15
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
	// Setup/init
	irq_initialize_vectors();
    3252:	87 e0       	ldi	r24, 0x07	; 7
    3254:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    3258:	78 94       	sei
	sysclk_init();
    325a:	0e 94 87 2b 	call	0x570e	; 0x570e <sysclk_init>
	udc_start();
    325e:	0e 94 1d 20 	call	0x403a	; 0x403a <udc_start>
	
	//Set up peripherals
	sysclk_enable_peripheral_clock(&TWIC);		//TWI/I2C line for interfacing with ESP32
    3262:	80 e8       	ldi	r24, 0x80	; 128
    3264:	94 e0       	ldi	r25, 0x04	; 4
    3266:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD0);	//USB line for debugging
    326a:	80 ea       	ldi	r24, 0xA0	; 160
    326c:	99 e0       	ldi	r25, 0x09	; 9
    326e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTE1);	//RS485
    3272:	80 eb       	ldi	r24, 0xB0	; 176
    3274:	9a e0       	ldi	r25, 0x0A	; 10
    3276:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA);		//ADC for reading sensors
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	92 e0       	ldi	r25, 0x02	; 2
    327e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <sysclk_enable_peripheral_clock>
	
	TWI_init(TWIC);
    3282:	80 e8       	ldi	r24, 0x80	; 128
    3284:	94 e0       	ldi	r25, 0x04	; 4
    3286:	0e 94 6e 07 	call	0xedc	; 0xedc <_Z8TWI_initR10TWI_struct>
	TWI_onRequest(requestStarted, TWIC);
    328a:	60 e8       	ldi	r22, 0x80	; 128
    328c:	74 e0       	ldi	r23, 0x04	; 4
    328e:	8c ed       	ldi	r24, 0xDC	; 220
    3290:	94 e1       	ldi	r25, 0x14	; 20
    3292:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_Z13TWI_onRequestPFvvER10TWI_struct>

	// Init board
	board_init();
    3296:	0e 94 51 30 	call	0x60a2	; 0x60a2 <board_init>
	initLEDs();
    329a:	0e 94 1b 19 	call	0x3236	; 0x3236 <_Z8initLEDsv>

	//Init UART for Debug interface and RS485 drivers
	USART_Init(USARTD0, 115200, 24000000, false);	// RX/TX out
    329e:	e1 2c       	mov	r14, r1
    32a0:	00 e0       	ldi	r16, 0x00	; 0
    32a2:	16 e3       	ldi	r17, 0x36	; 54
    32a4:	2e e6       	ldi	r18, 0x6E	; 110
    32a6:	31 e0       	ldi	r19, 0x01	; 1
    32a8:	40 e0       	ldi	r20, 0x00	; 0
    32aa:	52 ec       	ldi	r21, 0xC2	; 194
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	80 ea       	ldi	r24, 0xA0	; 160
    32b2:	99 e0       	ldi	r25, 0x09	; 9
    32b4:	0e 94 55 09 	call	0x12aa	; 0x12aa <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTE1,37100,24000000,false);	// RS485 1
    32b8:	00 e0       	ldi	r16, 0x00	; 0
    32ba:	16 e3       	ldi	r17, 0x36	; 54
    32bc:	2e e6       	ldi	r18, 0x6E	; 110
    32be:	31 e0       	ldi	r19, 0x01	; 1
    32c0:	4c ee       	ldi	r20, 0xEC	; 236
    32c2:	50 e9       	ldi	r21, 0x90	; 144
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	80 eb       	ldi	r24, 0xB0	; 176
    32ca:	9a e0       	ldi	r25, 0x0A	; 10
    32cc:	0e 94 55 09 	call	0x12aa	; 0x12aa <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTF0,37100,24000000,false);	// RS485 2
    32d0:	00 e0       	ldi	r16, 0x00	; 0
    32d2:	16 e3       	ldi	r17, 0x36	; 54
    32d4:	2e e6       	ldi	r18, 0x6E	; 110
    32d6:	31 e0       	ldi	r19, 0x01	; 1
    32d8:	4c ee       	ldi	r20, 0xEC	; 236
    32da:	50 e9       	ldi	r21, 0x90	; 144
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	80 ea       	ldi	r24, 0xA0	; 160
    32e2:	9b e0       	ldi	r25, 0x0B	; 11
    32e4:	0e 94 55 09 	call	0x12aa	; 0x12aa <_Z10USART_InitR12USART_structmmb>
	
	PORTE_OUTSET = 0b00110000;
    32e8:	80 e3       	ldi	r24, 0x30	; 48
    32ea:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	
	ADC_Init(ADCA);
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	92 e0       	ldi	r25, 0x02	; 2
    32f2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <_Z8ADC_InitR10ADC_struct>
    32f6:	c1 e0       	ldi	r28, 0x01	; 1
    32f8:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
    32fa:	ce 01       	movw	r24, r28
    32fc:	0e 94 5f 13 	call	0x26be	; 0x26be <_Z8StopBeltj>
    3300:	21 96       	adiw	r28, 0x01	; 1
	PORTE_OUTSET = 0b00110000;
	
	ADC_Init(ADCA);
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
    3302:	cc 30       	cpi	r28, 0x0C	; 12
    3304:	d1 05       	cpc	r29, r1
    3306:	c9 f7       	brne	.-14     	; 0x32fa <main+0xb8>
    3308:	c1 e0       	ldi	r28, 0x01	; 1
    330a:	d0 e0       	ldi	r29, 0x00	; 0
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
		StopTurntable(i);
    330c:	ce 01       	movw	r24, r28
    330e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_Z13StopTurntablej>
    3312:	21 96       	adiw	r28, 0x01	; 1
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
    3314:	cc 30       	cpi	r28, 0x0C	; 12
    3316:	d1 05       	cpc	r29, r1
    3318:	c9 f7       	brne	.-14     	; 0x330c <main+0xca>
		StopTurntable(i);
	}
	StopSorterArm();
    331a:	0e 94 30 10 	call	0x2060	; 0x2060 <StopSorterArm>
	StopElevator();
    331e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <StopElevator>
	
	// sysclk_enable_peripheral_clock(&TCC1); //zie SorterArm.cpp, TODO weghalen als stepperdrivers uitgelezen kunnen worden
	
	sei(); //global interrupt enable
    3322:	78 94       	sei
	ElevatorInit();
    3324:	0e 94 a8 0b 	call	0x1750	; 0x1750 <ElevatorInit>

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
    3328:	8f e3       	ldi	r24, 0x3F	; 63
    332a:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
	//ElevatorInterruptSetup();
	//SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
	//SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right);


	USB_TransmitString("TEST\n"); // Test serial working
    332e:	8e e8       	ldi	r24, 0x8E	; 142
    3330:	92 e2       	ldi	r25, 0x22	; 34
    3332:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z18USB_TransmitStringPKc>

	
	/* Insert application code here, after the board has been initialized. */
	
	
	USART_TransmitString(USARTD0, "\n\r------------------------------------------------------------\n\rReset\n\n\r");
    3336:	64 e9       	ldi	r22, 0x94	; 148
    3338:	72 e2       	ldi	r23, 0x22	; 34
    333a:	80 ea       	ldi	r24, 0xA0	; 160
    333c:	99 e0       	ldi	r25, 0x09	; 9
    333e:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
    3342:	84 e9       	ldi	r24, 0x94	; 148
    3344:	92 e2       	ldi	r25, 0x22	; 34
    3346:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z18USB_TransmitStringPKc>
	
	
	getUsbBoot();
    334a:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z10getUsbBootv>
    334e:	0f 2e       	mov	r0, r31
    3350:	f0 e2       	ldi	r31, 0x20	; 32
    3352:	cf 2e       	mov	r12, r31
    3354:	f1 ea       	ldi	r31, 0xA1	; 161
    3356:	df 2e       	mov	r13, r31
    3358:	f7 e0       	ldi	r31, 0x07	; 7
    335a:	ef 2e       	mov	r14, r31
    335c:	f1 2c       	mov	r15, r1
    335e:	f0 2d       	mov	r31, r0
	
	for (long i=0;i<500000;i++)
	{
		if(TWI_RecievedAddress(TWIC))
    3360:	80 e8       	ldi	r24, 0x80	; 128
    3362:	94 e0       	ldi	r25, 0x04	; 4
    3364:	0e 94 78 07 	call	0xef0	; 0xef0 <_Z19TWI_RecievedAddressR10TWI_struct>
    3368:	88 23       	and	r24, r24
    336a:	21 f0       	breq	.+8      	; 0x3374 <main+0x132>
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
    336c:	8f eb       	ldi	r24, 0xBF	; 191
    336e:	97 e1       	ldi	r25, 0x17	; 23
    3370:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z17receiveHexFileI2CPFvvE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3374:	88 e0       	ldi	r24, 0x08	; 8
    3376:	8a 95       	dec	r24
    3378:	f1 f7       	brne	.-4      	; 0x3376 <main+0x134>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	c8 1a       	sub	r12, r24
    337e:	d1 08       	sbc	r13, r1
    3380:	e1 08       	sbc	r14, r1
    3382:	f1 08       	sbc	r15, r1
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
	
	
	getUsbBoot();
	
	for (long i=0;i<500000;i++)
    3384:	69 f7       	brne	.-38     	; 0x3360 <main+0x11e>
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
		_delay_us(1);
	}
	
	#ifdef DEBUG
	USART_TransmitString(USARTD0, "\r\nRunning in DEBUG mode\r\n");
    3386:	6d ed       	ldi	r22, 0xDD	; 221
    3388:	72 e2       	ldi	r23, 0x22	; 34
    338a:	80 ea       	ldi	r24, 0xA0	; 160
    338c:	99 e0       	ldi	r25, 0x09	; 9
    338e:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	#endif
	
	// check if the blockly code area is empty
	USART_TransmitString(USARTD0, "Checking for program\n\r");
    3392:	67 ef       	ldi	r22, 0xF7	; 247
    3394:	72 e2       	ldi	r23, 0x22	; 34
    3396:	80 ea       	ldi	r24, 0xA0	; 160
    3398:	99 e0       	ldi	r25, 0x09	; 9
    339a:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Checking for program\n\r");
    339e:	87 ef       	ldi	r24, 0xF7	; 247
    33a0:	92 e2       	ldi	r25, 0x22	; 34
    33a2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z18USB_TransmitStringPKc>
	
	if(pgm_read_byte(0x8000) == 0xFF)
    33a6:	e0 e0       	ldi	r30, 0x00	; 0
    33a8:	f0 e8       	ldi	r31, 0x80	; 128
    33aa:	e4 91       	lpm	r30, Z
    33ac:	ef 3f       	cpi	r30, 0xFF	; 255
    33ae:	91 f4       	brne	.+36     	; 0x33d4 <main+0x192>
	{
		USART_TransmitString(USARTD0, "No program found\n\r");
    33b0:	6e e0       	ldi	r22, 0x0E	; 14
    33b2:	73 e2       	ldi	r23, 0x23	; 35
    33b4:	80 ea       	ldi	r24, 0xA0	; 160
    33b6:	99 e0       	ldi	r25, 0x09	; 9
    33b8:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
		USB_TransmitString("No program found\n\r");
    33bc:	8e e0       	ldi	r24, 0x0E	; 14
    33be:	93 e2       	ldi	r25, 0x23	; 35
    33c0:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z18USB_TransmitStringPKc>
		
		while(true)
		{
			//USART0_TransmitString("test");
			if (!PORTA_IN &(1<<0))
    33c4:	c8 e0       	ldi	r28, 0x08	; 8
    33c6:	d6 e0       	ldi	r29, 0x06	; 6
    33c8:	88 81       	ld	r24, Y
    33ca:	81 11       	cpse	r24, r1
    33cc:	fd cf       	rjmp	.-6      	; 0x33c8 <main+0x186>
			{
				resetDevice();
    33ce:	0e 94 39 04 	call	0x872	; 0x872 <_Z11resetDevicev>
    33d2:	fa cf       	rjmp	.-12     	; 0x33c8 <main+0x186>
			}
		}
	}

	// run the blockly
	Started = 1;
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	80 93 56 23 	sts	0x2356, r24	; 0x802356 <Started>
	USART_TransmitString(USARTD0, "Starting your program\n\r");
    33da:	61 e2       	ldi	r22, 0x21	; 33
    33dc:	73 e2       	ldi	r23, 0x23	; 35
    33de:	80 ea       	ldi	r24, 0xA0	; 160
    33e0:	99 e0       	ldi	r25, 0x09	; 9
    33e2:	0e 94 97 09 	call	0x132e	; 0x132e <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Starting your program\n\r");
    33e6:	81 e2       	ldi	r24, 0x21	; 33
    33e8:	93 e2       	ldi	r25, 0x23	; 35
    33ea:	0e 94 a1 0a 	call	0x1542	; 0x1542 <_Z18USB_TransmitStringPKc>
	asm("jmp 0x8000");
    33ee:	0c 94 00 40 	jmp	0x8000	; 0x8000 <jump_table+0x200>

}
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	1f 91       	pop	r17
    33fc:	0f 91       	pop	r16
    33fe:	ff 90       	pop	r15
    3400:	ef 90       	pop	r14
    3402:	df 90       	pop	r13
    3404:	cf 90       	pop	r12
    3406:	08 95       	ret

00003408 <_Z10ToggleLED1v>:
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
	} //Set the LED pins to output
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
    3408:	e7 ee       	ldi	r30, 0xE7	; 231
    340a:	f6 e0       	ldi	r31, 0x06	; 6
    340c:	80 81       	ld	r24, Z
    340e:	80 61       	ori	r24, 0x10	; 16
    3410:	80 83       	st	Z, r24
    3412:	08 95       	ret

00003414 <_Z10ToggleLED2v>:
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit
    3414:	e7 ee       	ldi	r30, 0xE7	; 231
    3416:	f6 e0       	ldi	r31, 0x06	; 6
    3418:	80 81       	ld	r24, Z
    341a:	80 62       	ori	r24, 0x20	; 32
    341c:	80 83       	st	Z, r24
    341e:	08 95       	ret

00003420 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    3420:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udi_cdc_nb_comm_enabled>
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    3424:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <udi_cdc_state>
    3428:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <udi_cdc_state+0x1>

	uid_cdc_state_msg[port].header.bmRequestType =
    342c:	ee e6       	ldi	r30, 0x6E	; 110
    342e:	f4 e2       	ldi	r31, 0x24	; 36
    3430:	81 ea       	ldi	r24, 0xA1	; 161
    3432:	80 83       	st	Z, r24
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    3434:	80 e2       	ldi	r24, 0x20	; 32
    3436:	81 83       	std	Z+1, r24	; 0x01
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    3438:	12 82       	std	Z+2, r1	; 0x02
    343a:	13 82       	std	Z+3, r1	; 0x03
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    343c:	14 82       	std	Z+4, r1	; 0x04
    343e:	15 82       	std	Z+5, r1	; 0x05
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    3440:	82 e0       	ldi	r24, 0x02	; 2
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	86 83       	std	Z+6, r24	; 0x06
    3446:	97 83       	std	Z+7, r25	; 0x07
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    3448:	10 86       	std	Z+8, r1	; 0x08
    344a:	11 86       	std	Z+9, r1	; 0x09

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    344c:	ec e7       	ldi	r30, 0x7C	; 124
    344e:	f4 e2       	ldi	r31, 0x24	; 36
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	92 ec       	ldi	r25, 0xC2	; 194
    3454:	a1 e0       	ldi	r26, 0x01	; 1
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	80 83       	st	Z, r24
    345a:	91 83       	std	Z+1, r25	; 0x01
    345c:	a2 83       	std	Z+2, r26	; 0x02
    345e:	b3 83       	std	Z+3, r27	; 0x03
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    3460:	14 82       	std	Z+4, r1	; 0x04
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    3462:	15 82       	std	Z+5, r1	; 0x05
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    3464:	88 e0       	ldi	r24, 0x08	; 8
    3466:	86 83       	std	Z+6, r24	; 0x06
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    3468:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udi_cdc_nb_comm_enabled>
    346c:	8f 5f       	subi	r24, 0xFF	; 255
    346e:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udi_cdc_nb_comm_enabled>
	return true;
}
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	08 95       	ret

00003476 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    3476:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udi_cdc_nb_comm_enabled>
    347a:	81 50       	subi	r24, 0x01	; 1
    347c:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udi_cdc_nb_comm_enabled>
    3480:	08 95       	ret

00003482 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    3482:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
    3486:	81 50       	subi	r24, 0x01	; 1
    3488:	80 93 6b 24 	sts	0x246B, r24	; 0x80246b <udi_cdc_nb_data_enabled>
	port = udi_cdc_nb_data_enabled;
    348c:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    3490:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udi_cdc_data_running>
    3494:	08 95       	ret

00003496 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	08 95       	ret

0000349a <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	08 95       	ret

0000349e <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
    349e:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    34a2:	88 23       	and	r24, r24
    34a4:	cc f4       	brge	.+50     	; 0x34d8 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    34a6:	80 76       	andi	r24, 0x60	; 96
    34a8:	80 32       	cpi	r24, 0x20	; 32
    34aa:	b9 f5       	brne	.+110    	; 0x351a <udi_cdc_comm_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    34ac:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    34b0:	81 32       	cpi	r24, 0x21	; 33
    34b2:	a9 f5       	brne	.+106    	; 0x351e <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    34b4:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    34b8:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    34bc:	07 97       	sbiw	r24, 0x07	; 7
    34be:	89 f5       	brne	.+98     	; 0x3522 <udi_cdc_comm_setup+0x84>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    34c0:	e1 ed       	ldi	r30, 0xD1	; 209
    34c2:	f5 e2       	ldi	r31, 0x25	; 37
    34c4:	8c e7       	ldi	r24, 0x7C	; 124
    34c6:	94 e2       	ldi	r25, 0x24	; 36
    34c8:	80 87       	std	Z+8, r24	; 0x08
    34ca:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    34cc:	87 e0       	ldi	r24, 0x07	; 7
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	82 87       	std	Z+10, r24	; 0x0a
    34d2:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	08 95       	ret
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    34d8:	80 76       	andi	r24, 0x60	; 96
    34da:	80 32       	cpi	r24, 0x20	; 32
    34dc:	21 f5       	brne	.+72     	; 0x3526 <udi_cdc_comm_setup+0x88>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    34de:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    34e2:	80 32       	cpi	r24, 0x20	; 32
    34e4:	21 f0       	breq	.+8      	; 0x34ee <udi_cdc_comm_setup+0x50>
    34e6:	82 32       	cpi	r24, 0x22	; 34
    34e8:	01 f1       	breq	.+64     	; 0x352a <udi_cdc_comm_setup+0x8c>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	08 95       	ret
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    34ee:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    34f2:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    34f6:	07 97       	sbiw	r24, 0x07	; 7
    34f8:	d1 f4       	brne	.+52     	; 0x352e <udi_cdc_comm_setup+0x90>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
    34fa:	e1 ed       	ldi	r30, 0xD1	; 209
    34fc:	f5 e2       	ldi	r31, 0x25	; 37
    34fe:	89 e9       	ldi	r24, 0x99	; 153
    3500:	9a e1       	ldi	r25, 0x1A	; 26
    3502:	84 87       	std	Z+12, r24	; 0x0c
    3504:	95 87       	std	Z+13, r25	; 0x0d
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    3506:	8c e7       	ldi	r24, 0x7C	; 124
    3508:	94 e2       	ldi	r25, 0x24	; 36
    350a:	80 87       	std	Z+8, r24	; 0x08
    350c:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    350e:	87 e0       	ldi	r24, 0x07	; 7
    3510:	90 e0       	ldi	r25, 0x00	; 0
    3512:	82 87       	std	Z+10, r24	; 0x0a
    3514:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	08 95       	ret
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	08 95       	ret
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    3522:	80 e0       	ldi	r24, 0x00	; 0
    3524:	08 95       	ret
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	08 95       	ret
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    352e:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
    3530:	08 95       	ret

00003532 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
    3532:	08 95       	ret

00003534 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	1f 92       	push	r1
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    3544:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udi_cdc_tx_trans_ongoing>
    3548:	81 11       	cpse	r24, r1
    354a:	9e c0       	rjmp	.+316    	; 0x3688 <udi_cdc_tx_send+0x154>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    354c:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <udd_is_high_speed>
    3550:	88 23       	and	r24, r24
    3552:	51 f0       	breq	.+20     	; 0x3568 <udi_cdc_tx_send+0x34>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    3554:	00 91 5b 23 	lds	r16, 0x235B	; 0x80235b <udi_cdc_tx_sof_num>
    3558:	10 91 5c 23 	lds	r17, 0x235C	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    355c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <udd_get_micro_frame_number>
    3560:	08 17       	cp	r16, r24
    3562:	19 07       	cpc	r17, r25
    3564:	59 f4       	brne	.+22     	; 0x357c <udi_cdc_tx_send+0x48>
    3566:	90 c0       	rjmp	.+288    	; 0x3688 <udi_cdc_tx_send+0x154>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    3568:	00 91 5b 23 	lds	r16, 0x235B	; 0x80235b <udi_cdc_tx_sof_num>
    356c:	10 91 5c 23 	lds	r17, 0x235C	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    3570:	0e 94 13 27 	call	0x4e26	; 0x4e26 <udd_get_frame_number>
    3574:	08 17       	cp	r16, r24
    3576:	19 07       	cpc	r17, r25
    3578:	09 f4       	brne	.+2      	; 0x357c <udi_cdc_tx_send+0x48>
    357a:	86 c0       	rjmp	.+268    	; 0x3688 <udi_cdc_tx_send+0x154>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    357c:	8f b7       	in	r24, 0x3f	; 63
    357e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3580:	f8 94       	cli
	return flags;
    3582:	19 81       	ldd	r17, Y+1	; 0x01
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    3584:	00 91 5d 23 	lds	r16, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    3588:	e0 2f       	mov	r30, r16
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	ee 0f       	add	r30, r30
    358e:	ff 1f       	adc	r31, r31
    3590:	e2 5a       	subi	r30, 0xA2	; 162
    3592:	fc 4d       	sbci	r31, 0xDC	; 220
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	89 2b       	or	r24, r25
    359a:	09 f5       	brne	.+66     	; 0x35de <udi_cdc_tx_send+0xaa>
		sof_zlp_counter++;
    359c:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <sof_zlp_counter.5018>
    35a0:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <sof_zlp_counter.5018+0x1>
    35a4:	01 96       	adiw	r24, 0x01	; 1
    35a6:	80 93 57 23 	sts	0x2357, r24	; 0x802357 <sof_zlp_counter.5018>
    35aa:	90 93 58 23 	sts	0x2358, r25	; 0x802358 <sof_zlp_counter.5018+0x1>
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    35ae:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <udd_is_high_speed>
    35b2:	81 11       	cpse	r24, r1
    35b4:	07 c0       	rjmp	.+14     	; 0x35c4 <udi_cdc_tx_send+0x90>
    35b6:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <sof_zlp_counter.5018>
    35ba:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <sof_zlp_counter.5018+0x1>
    35be:	84 36       	cpi	r24, 0x64	; 100
    35c0:	91 05       	cpc	r25, r1
    35c2:	58 f0       	brcs	.+22     	; 0x35da <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    35c4:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <udd_is_high_speed>
    35c8:	88 23       	and	r24, r24
    35ca:	49 f0       	breq	.+18     	; 0x35de <udi_cdc_tx_send+0xaa>
    35cc:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <sof_zlp_counter.5018>
    35d0:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <sof_zlp_counter.5018+0x1>
    35d4:	80 32       	cpi	r24, 0x20	; 32
    35d6:	93 40       	sbci	r25, 0x03	; 3
    35d8:	10 f4       	brcc	.+4      	; 0x35de <udi_cdc_tx_send+0xaa>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35da:	1f bf       	out	0x3f, r17	; 63
    35dc:	55 c0       	rjmp	.+170    	; 0x3688 <udi_cdc_tx_send+0x154>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
    35de:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <sof_zlp_counter.5018>
    35e2:	10 92 58 23 	sts	0x2358, r1	; 0x802358 <sof_zlp_counter.5018+0x1>

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    35e6:	80 91 59 23 	lds	r24, 0x2359	; 0x802359 <udi_cdc_tx_both_buf_to_send>
    35ea:	81 11       	cpse	r24, r1
    35ec:	06 c0       	rjmp	.+12     	; 0x35fa <udi_cdc_tx_send+0xc6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	01 11       	cpse	r16, r1
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	80 93 5d 23 	sts	0x235D, r24	; 0x80235d <udi_cdc_tx_buf_sel>
    35f8:	04 c0       	rjmp	.+8      	; 0x3602 <udi_cdc_tx_send+0xce>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	01 11       	cpse	r16, r1
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	08 2f       	mov	r16, r24
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	80 93 5a 23 	sts	0x235A, r24	; 0x80235a <udi_cdc_tx_trans_ongoing>
    3608:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    360a:	10 e0       	ldi	r17, 0x00	; 0
    360c:	f8 01       	movw	r30, r16
    360e:	ee 0f       	add	r30, r30
    3610:	ff 1f       	adc	r31, r31
    3612:	e2 5a       	subi	r30, 0xA2	; 162
    3614:	fc 4d       	sbci	r31, 0xDC	; 220
    3616:	ff 24       	eor	r15, r15
    3618:	f3 94       	inc	r15
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	80 34       	cpi	r24, 0x40	; 64
    3620:	91 05       	cpc	r25, r1
    3622:	09 f4       	brne	.+2      	; 0x3626 <udi_cdc_tx_send+0xf2>
    3624:	f1 2c       	mov	r15, r1
	if (b_short_packet) {
    3626:	ff 20       	and	r15, r15
    3628:	91 f0       	breq	.+36     	; 0x364e <udi_cdc_tx_send+0x11a>
		if (udd_is_high_speed()) {
    362a:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <udd_is_high_speed>
    362e:	88 23       	and	r24, r24
    3630:	39 f0       	breq	.+14     	; 0x3640 <udi_cdc_tx_send+0x10c>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    3632:	0e 94 18 27 	call	0x4e30	; 0x4e30 <udd_get_micro_frame_number>
    3636:	80 93 5b 23 	sts	0x235B, r24	; 0x80235b <udi_cdc_tx_sof_num>
    363a:	90 93 5c 23 	sts	0x235C, r25	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    363e:	0b c0       	rjmp	.+22     	; 0x3656 <udi_cdc_tx_send+0x122>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    3640:	0e 94 13 27 	call	0x4e26	; 0x4e26 <udd_get_frame_number>
    3644:	80 93 5b 23 	sts	0x235B, r24	; 0x80235b <udi_cdc_tx_sof_num>
    3648:	90 93 5c 23 	sts	0x235C, r25	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    364c:	04 c0       	rjmp	.+8      	; 0x3656 <udi_cdc_tx_send+0x122>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    364e:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udi_cdc_tx_sof_num>
    3652:	10 92 5c 23 	sts	0x235C, r1	; 0x80235c <udi_cdc_tx_sof_num+0x1>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    3656:	f8 01       	movw	r30, r16
    3658:	ee 0f       	add	r30, r30
    365a:	ff 1f       	adc	r31, r31
    365c:	e2 5a       	subi	r30, 0xA2	; 162
    365e:	fc 4d       	sbci	r31, 0xDC	; 220
    3660:	20 81       	ld	r18, Z
    3662:	31 81       	ldd	r19, Z+1	; 0x01
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    3664:	a8 01       	movw	r20, r16
    3666:	00 24       	eor	r0, r0
    3668:	56 95       	lsr	r21
    366a:	47 95       	ror	r20
    366c:	07 94       	ror	r0
    366e:	56 95       	lsr	r21
    3670:	47 95       	ror	r20
    3672:	07 94       	ror	r0
    3674:	54 2f       	mov	r21, r20
    3676:	40 2d       	mov	r20, r0
    3678:	4e 59       	subi	r20, 0x9E	; 158
    367a:	5c 4d       	sbci	r21, 0xDC	; 220
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    367c:	0b e4       	ldi	r16, 0x4B	; 75
    367e:	1b e1       	ldi	r17, 0x1B	; 27
    3680:	6f 2d       	mov	r22, r15
    3682:	81 e8       	ldi	r24, 0x81	; 129
    3684:	0e 94 21 28 	call	0x5042	; 0x5042 <udd_ep_run>
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    3688:	0f 90       	pop	r0
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	08 95       	ret

00003696 <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    3696:	81 11       	cpse	r24, r1
    3698:	16 c0       	rjmp	.+44     	; 0x36c6 <udi_cdc_data_sent+0x30>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    369a:	20 91 5d 23 	lds	r18, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	22 23       	and	r18, r18
    36a4:	11 f0       	breq	.+4      	; 0x36aa <udi_cdc_data_sent+0x14>
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	88 0f       	add	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	fc 01       	movw	r30, r24
    36b0:	e2 5a       	subi	r30, 0xA2	; 162
    36b2:	fc 4d       	sbci	r31, 0xDC	; 220
    36b4:	10 82       	st	Z, r1
    36b6:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_both_buf_to_send[port] = false;
    36b8:	10 92 59 23 	sts	0x2359, r1	; 0x802359 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_trans_ongoing[port] = false;
    36bc:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udi_cdc_tx_trans_ongoing>

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	0e 94 9a 1a 	call	0x3534	; 0x3534 <udi_cdc_tx_send>
    36c6:	08 95       	ret

000036c8 <udi_cdc_data_sof_notify>:
void udi_cdc_data_sof_notify(void)
{
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	0e 94 9a 1a 	call	0x3534	; 0x3534 <udi_cdc_tx_send>
    36ce:	08 95       	ret

000036d0 <udi_cdc_ctrl_state_notify>:
	udi_cdc_ctrl_state_notify(port, ep_comm);
}


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    36d0:	0f 93       	push	r16
    36d2:	1f 93       	push	r17
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    36d4:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udi_cdc_serial_state_msg_ongoing>
    36d8:	81 11       	cpse	r24, r1
    36da:	1f c0       	rjmp	.+62     	; 0x371a <udi_cdc_ctrl_state_notify+0x4a>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    36dc:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udi_cdc_state>
    36e0:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    36e4:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <uid_cdc_state_msg+0x8>
    36e8:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <uid_cdc_state_msg+0x9>
    36ec:	28 17       	cp	r18, r24
    36ee:	39 07       	cpc	r19, r25
    36f0:	a1 f0       	breq	.+40     	; 0x371a <udi_cdc_ctrl_state_notify+0x4a>
    36f2:	86 2f       	mov	r24, r22
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    36f4:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udi_cdc_state>
    36f8:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    36fc:	20 93 76 24 	sts	0x2476, r18	; 0x802476 <uid_cdc_state_msg+0x8>
    3700:	30 93 77 24 	sts	0x2477, r19	; 0x802477 <uid_cdc_state_msg+0x9>
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    3704:	0b eb       	ldi	r16, 0xBB	; 187
    3706:	1b e1       	ldi	r17, 0x1B	; 27
    3708:	2a e0       	ldi	r18, 0x0A	; 10
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4e e6       	ldi	r20, 0x6E	; 110
    370e:	54 e2       	ldi	r21, 0x24	; 36
    3710:	60 e0       	ldi	r22, 0x00	; 0
    3712:	0e 94 21 28 	call	0x5042	; 0x5042 <udd_ep_run>
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    3716:	80 93 7a 24 	sts	0x247A, r24	; 0x80247a <udi_cdc_serial_state_msg_ongoing>
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	08 95       	ret

00003720 <udi_cdc_ctrl_state_change>:

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    3720:	cf 93       	push	r28
    3722:	df 93       	push	r29
    3724:	1f 92       	push	r1
    3726:	cd b7       	in	r28, 0x3d	; 61
    3728:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    372a:	8f b7       	in	r24, 0x3f	; 63
    372c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    372e:	f8 94       	cli
	return flags;
    3730:	29 81       	ldd	r18, Y+1	; 0x01
	port = 0;
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
    3732:	66 23       	and	r22, r22
    3734:	59 f0       	breq	.+22     	; 0x374c <udi_cdc_ctrl_state_change+0x2c>
		udi_cdc_state[port] |= bit_mask;
    3736:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udi_cdc_state>
    373a:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    373e:	48 2b       	or	r20, r24
    3740:	59 2b       	or	r21, r25
    3742:	40 93 78 24 	sts	0x2478, r20	; 0x802478 <udi_cdc_state>
    3746:	50 93 79 24 	sts	0x2479, r21	; 0x802479 <udi_cdc_state+0x1>
    374a:	0c c0       	rjmp	.+24     	; 0x3764 <udi_cdc_ctrl_state_change+0x44>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    374c:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udi_cdc_state>
    3750:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    3754:	40 95       	com	r20
    3756:	50 95       	com	r21
    3758:	48 23       	and	r20, r24
    375a:	59 23       	and	r21, r25
    375c:	40 93 78 24 	sts	0x2478, r20	; 0x802478 <udi_cdc_state>
    3760:	50 93 79 24 	sts	0x2479, r21	; 0x802479 <udi_cdc_state+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3764:	2f bf       	out	0x3f, r18	; 63
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
		break;
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    3766:	62 e8       	ldi	r22, 0x82	; 130
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <udi_cdc_ctrl_state_notify>
}
    376e:	0f 90       	pop	r0
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	08 95       	ret

00003776 <udi_cdc_serial_state_msg_sent>:
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    3776:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <udi_cdc_serial_state_msg_ongoing>

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    377a:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udi_cdc_state>
    377e:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    3782:	83 78       	andi	r24, 0x83	; 131
    3784:	80 93 78 24 	sts	0x2478, r24	; 0x802478 <udi_cdc_state>
    3788:	90 93 79 24 	sts	0x2479, r25	; 0x802479 <udi_cdc_state+0x1>
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    378c:	ee e6       	ldi	r30, 0x6E	; 110
    378e:	f4 e2       	ldi	r31, 0x24	; 36
    3790:	80 85       	ldd	r24, Z+8	; 0x08
    3792:	91 85       	ldd	r25, Z+9	; 0x09
    3794:	83 78       	andi	r24, 0x83	; 131
    3796:	80 87       	std	Z+8, r24	; 0x08
    3798:	91 87       	std	Z+9, r25	; 0x09
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    379a:	64 2f       	mov	r22, r20
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <udi_cdc_ctrl_state_notify>
    37a2:	08 95       	ret

000037a4 <udi_cdc_ctrl_signal_dcd>:

//------- Application interface

void udi_cdc_ctrl_signal_dcd(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DCD);
    37a4:	41 e0       	ldi	r20, 0x01	; 1
    37a6:	50 e0       	ldi	r21, 0x00	; 0
    37a8:	68 2f       	mov	r22, r24
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37b0:	08 95       	ret

000037b2 <udi_cdc_ctrl_signal_dsr>:
}

void udi_cdc_ctrl_signal_dsr(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
    37b2:	42 e0       	ldi	r20, 0x02	; 2
    37b4:	50 e0       	ldi	r21, 0x00	; 0
    37b6:	68 2f       	mov	r22, r24
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37be:	08 95       	ret

000037c0 <udi_cdc_signal_framing_error>:
}

void udi_cdc_signal_framing_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
    37c0:	40 e1       	ldi	r20, 0x10	; 16
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37cc:	08 95       	ret

000037ce <udi_cdc_signal_parity_error>:
}

void udi_cdc_signal_parity_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
    37ce:	40 e2       	ldi	r20, 0x20	; 32
    37d0:	50 e0       	ldi	r21, 0x00	; 0
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37da:	08 95       	ret

000037dc <udi_cdc_signal_overrun>:
}

void udi_cdc_signal_overrun(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    37dc:	40 e4       	ldi	r20, 0x40	; 64
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37e8:	08 95       	ret

000037ea <udi_cdc_multi_ctrl_signal_dcd>:
}

void udi_cdc_multi_ctrl_signal_dcd(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DCD);
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37f2:	08 95       	ret

000037f4 <udi_cdc_multi_ctrl_signal_dsr>:
}

void udi_cdc_multi_ctrl_signal_dsr(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DSR);
    37f4:	42 e0       	ldi	r20, 0x02	; 2
    37f6:	50 e0       	ldi	r21, 0x00	; 0
    37f8:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    37fc:	08 95       	ret

000037fe <udi_cdc_multi_signal_framing_error>:
}

void udi_cdc_multi_signal_framing_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_FRAMING);
    37fe:	40 e1       	ldi	r20, 0x10	; 16
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	61 e0       	ldi	r22, 0x01	; 1
    3804:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    3808:	08 95       	ret

0000380a <udi_cdc_multi_signal_parity_error>:
}

void udi_cdc_multi_signal_parity_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_PARITY);
    380a:	40 e2       	ldi	r20, 0x20	; 32
    380c:	50 e0       	ldi	r21, 0x00	; 0
    380e:	61 e0       	ldi	r22, 0x01	; 1
    3810:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    3814:	08 95       	ret

00003816 <udi_cdc_multi_signal_overrun>:
}

void udi_cdc_multi_signal_overrun(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
    3816:	40 e4       	ldi	r20, 0x40	; 64
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	61 e0       	ldi	r22, 0x01	; 1
    381c:	0e 94 90 1b 	call	0x3720	; 0x3720 <udi_cdc_ctrl_state_change>
    3820:	08 95       	ret

00003822 <udi_cdc_multi_get_nb_received_data>:
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    3822:	cf 93       	push	r28
    3824:	df 93       	push	r29
    3826:	1f 92       	push	r1
    3828:	cd b7       	in	r28, 0x3d	; 61
    382a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    382c:	8f b7       	in	r24, 0x3f	; 63
    382e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3830:	f8 94       	cli
	return flags;
    3832:	49 81       	ldd	r20, Y+1	; 0x01

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    3834:	20 91 e3 23 	lds	r18, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3838:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    383c:	e0 91 e5 23 	lds	r30, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	ee 0f       	add	r30, r30
    3844:	ff 1f       	adc	r31, r31
    3846:	ea 51       	subi	r30, 0x1A	; 26
    3848:	fc 4d       	sbci	r31, 0xDC	; 220
    384a:	80 81       	ld	r24, Z
    384c:	91 81       	ldd	r25, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    384e:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	return nb_received;
}
    3850:	82 1b       	sub	r24, r18
    3852:	93 0b       	sbc	r25, r19
    3854:	0f 90       	pop	r0
    3856:	df 91       	pop	r29
    3858:	cf 91       	pop	r28
    385a:	08 95       	ret

0000385c <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	0e 94 11 1c 	call	0x3822	; 0x3822 <udi_cdc_multi_get_nb_received_data>
}
    3862:	08 95       	ret

00003864 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    3864:	0e 94 11 1c 	call	0x3822	; 0x3822 <udi_cdc_multi_get_nb_received_data>
    3868:	21 e0       	ldi	r18, 0x01	; 1
    386a:	89 2b       	or	r24, r25
    386c:	09 f4       	brne	.+2      	; 0x3870 <udi_cdc_multi_is_rx_ready+0xc>
    386e:	20 e0       	ldi	r18, 0x00	; 0
}
    3870:	82 2f       	mov	r24, r18
    3872:	08 95       	ret

00003874 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	1f 92       	push	r1
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3882:	8f b7       	in	r24, 0x3f	; 63
    3884:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3886:	f8 94       	cli
	return flags;
    3888:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    388a:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    388e:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
    3892:	81 11       	cpse	r24, r1
    3894:	10 c0       	rjmp	.+32     	; 0x38b6 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    3896:	60 91 e3 23 	lds	r22, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    389a:	70 91 e4 23 	lds	r23, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
    389e:	02 2f       	mov	r16, r18
    38a0:	10 e0       	ldi	r17, 0x00	; 0
    38a2:	f8 01       	movw	r30, r16
    38a4:	ee 0f       	add	r30, r30
    38a6:	ff 1f       	adc	r31, r31
    38a8:	ea 51       	subi	r30, 0x1A	; 26
    38aa:	fc 4d       	sbci	r31, 0xDC	; 220
    38ac:	40 81       	ld	r20, Z
    38ae:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    38b0:	64 17       	cp	r22, r20
    38b2:	75 07       	cpc	r23, r21
    38b4:	18 f4       	brcc	.+6      	; 0x38bc <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38b6:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	24 c0       	rjmp	.+72     	; 0x3904 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    38bc:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <udi_cdc_rx_pos>
    38c0:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	21 11       	cpse	r18, r1
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 93 e2 23 	sts	0x23E2, r24	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
    38d4:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	0e 94 32 1c 	call	0x3864	; 0x3864 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    38dc:	a8 01       	movw	r20, r16
    38de:	00 24       	eor	r0, r0
    38e0:	56 95       	lsr	r21
    38e2:	47 95       	ror	r20
    38e4:	07 94       	ror	r0
    38e6:	56 95       	lsr	r21
    38e8:	47 95       	ror	r20
    38ea:	07 94       	ror	r0
    38ec:	54 2f       	mov	r21, r20
    38ee:	40 2d       	mov	r20, r0
    38f0:	46 51       	subi	r20, 0x16	; 22
    38f2:	5c 4d       	sbci	r21, 0xDC	; 220
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    38f4:	0c eb       	ldi	r16, 0xBC	; 188
    38f6:	1c e1       	ldi	r17, 0x1C	; 28
    38f8:	20 e4       	ldi	r18, 0x40	; 64
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	0e 94 21 28 	call	0x5042	; 0x5042 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    3904:	0f 90       	pop	r0
    3906:	df 91       	pop	r29
    3908:	cf 91       	pop	r28
    390a:	1f 91       	pop	r17
    390c:	0f 91       	pop	r16
    390e:	08 95       	ret

00003910 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    3910:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    3914:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    3918:	10 92 59 23 	sts	0x2359, r1	; 0x802359 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    391c:	10 92 5d 23 	sts	0x235D, r1	; 0x80235d <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    3920:	ee e5       	ldi	r30, 0x5E	; 94
    3922:	f3 e2       	ldi	r31, 0x23	; 35
    3924:	10 82       	st	Z, r1
    3926:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    3928:	12 82       	std	Z+2, r1	; 0x02
    392a:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    392c:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udi_cdc_tx_sof_num>
    3930:	10 92 5c 23 	sts	0x235C, r1	; 0x80235c <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0e 94 9a 1a 	call	0x3534	; 0x3534 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    393a:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    393e:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    3942:	e6 ee       	ldi	r30, 0xE6	; 230
    3944:	f3 e2       	ldi	r31, 0x23	; 35
    3946:	10 82       	st	Z, r1
    3948:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    394a:	12 82       	std	Z+2, r1	; 0x02
    394c:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    394e:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <udi_cdc_rx_pos>
    3952:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	0e 94 3a 1c 	call	0x3874	; 0x3874 <udi_cdc_rx_start>
    395c:	88 23       	and	r24, r24
    395e:	59 f0       	breq	.+22     	; 0x3976 <udi_cdc_data_enable+0x66>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    3960:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
    3964:	9f 5f       	subi	r25, 0xFF	; 255
    3966:	90 93 6b 24 	sts	0x246B, r25	; 0x80246b <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    396a:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
    396e:	91 30       	cpi	r25, 0x01	; 1
    3970:	11 f4       	brne	.+4      	; 0x3976 <udi_cdc_data_enable+0x66>
		udi_cdc_data_running = true;
    3972:	90 93 6a 24 	sts	0x246A, r25	; 0x80246a <udi_cdc_data_running>
	}
	return true;
}
    3976:	08 95       	ret

00003978 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    397c:	81 11       	cpse	r24, r1
    397e:	2a c0       	rjmp	.+84     	; 0x39d4 <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    3980:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
    3984:	e1 e0       	ldi	r30, 0x01	; 1
    3986:	81 11       	cpse	r24, r1
    3988:	e0 e0       	ldi	r30, 0x00	; 0
    398a:	84 2f       	mov	r24, r20
	if (!n) {
    398c:	61 15       	cp	r22, r1
    398e:	71 05       	cpc	r23, r1
    3990:	a9 f4       	brne	.+42     	; 0x39bc <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	00 24       	eor	r0, r0
    3996:	f6 95       	lsr	r31
    3998:	e7 95       	ror	r30
    399a:	07 94       	ror	r0
    399c:	f6 95       	lsr	r31
    399e:	e7 95       	ror	r30
    39a0:	07 94       	ror	r0
    39a2:	fe 2f       	mov	r31, r30
    39a4:	e0 2d       	mov	r30, r0
    39a6:	af 01       	movw	r20, r30
    39a8:	46 51       	subi	r20, 0x16	; 22
    39aa:	5c 4d       	sbci	r21, 0xDC	; 220
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    39ac:	0c eb       	ldi	r16, 0xBC	; 188
    39ae:	1c e1       	ldi	r17, 0x1C	; 28
    39b0:	20 e4       	ldi	r18, 0x40	; 64
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	61 e0       	ldi	r22, 0x01	; 1
    39b6:	0e 94 21 28 	call	0x5042	; 0x5042 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    39ba:	0c c0       	rjmp	.+24     	; 0x39d4 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	ee 0f       	add	r30, r30
    39c0:	ff 1f       	adc	r31, r31
    39c2:	ea 51       	subi	r30, 0x1A	; 26
    39c4:	fc 4d       	sbci	r31, 0xDC	; 220
    39c6:	60 83       	st	Z, r22
    39c8:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    39ca:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	0e 94 3a 1c 	call	0x3874	; 0x3874 <udi_cdc_rx_start>
}
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	08 95       	ret

000039da <udi_cdc_is_rx_ready>:
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
	return udi_cdc_multi_is_rx_ready(0);
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	0e 94 32 1c 	call	0x3864	; 0x3864 <udi_cdc_multi_is_rx_ready>
}
    39e0:	08 95       	ret

000039e2 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	1f 92       	push	r1
    39ee:	cd b7       	in	r28, 0x3d	; 61
    39f0:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    39f2:	11 e0       	ldi	r17, 0x01	; 1
    39f4:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_line_coding+0x6>
    39f8:	89 30       	cpi	r24, 0x09	; 9
    39fa:	09 f0       	breq	.+2      	; 0x39fe <udi_cdc_multi_getc+0x1c>
    39fc:	10 e0       	ldi	r17, 0x00	; 0
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
    39fe:	40 e0       	ldi	r20, 0x00	; 0
    3a00:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a02:	8f b7       	in	r24, 0x3f	; 63
    3a04:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3a06:	f8 94       	cli
	return flags;
    3a08:	a9 81       	ldd	r26, Y+1	; 0x01
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    3a0a:	20 91 e3 23 	lds	r18, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3a0e:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3a12:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	fc 01       	movw	r30, r24
    3a1a:	ee 0f       	add	r30, r30
    3a1c:	ff 1f       	adc	r31, r31
    3a1e:	ea 51       	subi	r30, 0x1A	; 26
    3a20:	fc 4d       	sbci	r31, 0xDC	; 220
    3a22:	60 81       	ld	r22, Z
    3a24:	71 81       	ldd	r23, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a26:	af bf       	out	0x3f, r26	; 63
	cpu_irq_restore(flags);
	while (again) {
    3a28:	26 17       	cp	r18, r22
    3a2a:	37 07       	cpc	r19, r23
    3a2c:	30 f0       	brcs	.+12     	; 0x3a3a <udi_cdc_multi_getc+0x58>
		if (!udi_cdc_data_running) {
    3a2e:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3a32:	81 11       	cpse	r24, r1
    3a34:	e6 cf       	rjmp	.-52     	; 0x3a02 <udi_cdc_multi_getc+0x20>
			return 0;
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	22 c0       	rjmp	.+68     	; 0x3a7e <udi_cdc_multi_getc+0x9c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	00 24       	eor	r0, r0
    3a3e:	f6 95       	lsr	r31
    3a40:	e7 95       	ror	r30
    3a42:	07 94       	ror	r0
    3a44:	f6 95       	lsr	r31
    3a46:	e7 95       	ror	r30
    3a48:	07 94       	ror	r0
    3a4a:	fe 2f       	mov	r31, r30
    3a4c:	e0 2d       	mov	r30, r0
    3a4e:	e2 0f       	add	r30, r18
    3a50:	f3 1f       	adc	r31, r19
    3a52:	e6 51       	subi	r30, 0x16	; 22
    3a54:	fc 4d       	sbci	r31, 0xDC	; 220
    3a56:	80 81       	ld	r24, Z
    3a58:	7a 01       	movw	r14, r20
    3a5a:	e8 2a       	or	r14, r24
	udi_cdc_rx_pos[port] = pos+1;
    3a5c:	2f 5f       	subi	r18, 0xFF	; 255
    3a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a60:	20 93 e3 23 	sts	0x23E3, r18	; 0x8023e3 <udi_cdc_rx_pos>
    3a64:	30 93 e4 23 	sts	0x23E4, r19	; 0x8023e4 <udi_cdc_rx_pos+0x1>

	udi_cdc_rx_start(port);
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	0e 94 3a 1c 	call	0x3874	; 0x3874 <udi_cdc_rx_start>

	if (b_databit_9) {
    3a6e:	11 23       	and	r17, r17
    3a70:	21 f0       	breq	.+8      	; 0x3a7a <udi_cdc_multi_getc+0x98>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
    3a72:	5e 2d       	mov	r21, r14
    3a74:	44 27       	eor	r20, r20

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
    3a76:	10 e0       	ldi	r17, 0x00	; 0
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
    3a78:	c4 cf       	rjmp	.-120    	; 0x3a02 <udi_cdc_multi_getc+0x20>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    3a7a:	8e 2d       	mov	r24, r14
    3a7c:	9f 2d       	mov	r25, r15
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    3a7e:	0f 90       	pop	r0
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	ff 90       	pop	r15
    3a88:	ef 90       	pop	r14
    3a8a:	08 95       	ret

00003a8c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
	return udi_cdc_multi_getc(0);
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <udi_cdc_multi_getc>
}
    3a92:	08 95       	ret

00003a94 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    3a94:	cf 92       	push	r12
    3a96:	df 92       	push	r13
    3a98:	ef 92       	push	r14
    3a9a:	ff 92       	push	r15
    3a9c:	0f 93       	push	r16
    3a9e:	1f 93       	push	r17
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
    3aa4:	1f 92       	push	r1
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	6b 01       	movw	r12, r22
    3aac:	7a 01       	movw	r14, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3aae:	8f b7       	in	r24, 0x3f	; 63
    3ab0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3ab2:	f8 94       	cli
	return flags;
    3ab4:	49 81       	ldd	r20, Y+1	; 0x01
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    3ab6:	60 91 e3 23 	lds	r22, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3aba:	70 91 e4 23 	lds	r23, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3abe:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	f9 01       	movw	r30, r18
    3ac6:	ee 0f       	add	r30, r30
    3ac8:	ff 1f       	adc	r31, r31
    3aca:	ea 51       	subi	r30, 0x1A	; 26
    3acc:	fc 4d       	sbci	r31, 0xDC	; 220
    3ace:	80 81       	ld	r24, Z
    3ad0:	91 81       	ldd	r25, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ad2:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	while (again) {
    3ad4:	68 17       	cp	r22, r24
    3ad6:	79 07       	cpc	r23, r25
    3ad8:	38 f0       	brcs	.+14     	; 0x3ae8 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
    3ada:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3ade:	81 11       	cpse	r24, r1
    3ae0:	e6 cf       	rjmp	.-52     	; 0x3aae <udi_cdc_multi_read_buf+0x1a>
    3ae2:	8e 2d       	mov	r24, r14
    3ae4:	9f 2d       	mov	r25, r15
    3ae6:	36 c0       	rjmp	.+108    	; 0x3b54 <udi_cdc_multi_read_buf+0xc0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    3ae8:	f9 01       	movw	r30, r18
    3aea:	ee 0f       	add	r30, r30
    3aec:	ff 1f       	adc	r31, r31
    3aee:	ea 51       	subi	r30, 0x1A	; 26
    3af0:	fc 4d       	sbci	r31, 0xDC	; 220
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	86 1b       	sub	r24, r22
    3af8:	97 0b       	sbc	r25, r23
    3afa:	87 01       	movw	r16, r14
    3afc:	8e 15       	cp	r24, r14
    3afe:	9f 05       	cpc	r25, r15
    3b00:	08 f4       	brcc	.+2      	; 0x3b04 <udi_cdc_multi_read_buf+0x70>
    3b02:	8c 01       	movw	r16, r24
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
    3b04:	00 24       	eor	r0, r0
    3b06:	36 95       	lsr	r19
    3b08:	27 95       	ror	r18
    3b0a:	07 94       	ror	r0
    3b0c:	36 95       	lsr	r19
    3b0e:	27 95       	ror	r18
    3b10:	07 94       	ror	r0
    3b12:	32 2f       	mov	r19, r18
    3b14:	20 2d       	mov	r18, r0
    3b16:	62 0f       	add	r22, r18
    3b18:	73 1f       	adc	r23, r19
    3b1a:	66 51       	subi	r22, 0x16	; 22
    3b1c:	7c 4d       	sbci	r23, 0xDC	; 220
    3b1e:	a8 01       	movw	r20, r16
    3b20:	c6 01       	movw	r24, r12
    3b22:	0e 94 1c 31 	call	0x6238	; 0x6238 <memcpy>
	udi_cdc_rx_pos[port] += copy_nb;
    3b26:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3b2a:	90 91 e4 23 	lds	r25, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
    3b2e:	80 0f       	add	r24, r16
    3b30:	91 1f       	adc	r25, r17
    3b32:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <udi_cdc_rx_pos>
    3b36:	90 93 e4 23 	sts	0x23E4, r25	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	ptr_buf += copy_nb;
    3b3a:	c0 0e       	add	r12, r16
    3b3c:	d1 1e       	adc	r13, r17
	size -= copy_nb;
    3b3e:	e0 1a       	sub	r14, r16
    3b40:	f1 0a       	sbc	r15, r17
	udi_cdc_rx_start(port);
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	0e 94 3a 1c 	call	0x3874	; 0x3874 <udi_cdc_rx_start>

	if (size) {
    3b48:	e1 14       	cp	r14, r1
    3b4a:	f1 04       	cpc	r15, r1
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <udi_cdc_multi_read_buf+0xbc>
    3b4e:	af cf       	rjmp	.-162    	; 0x3aae <udi_cdc_multi_read_buf+0x1a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
}
    3b54:	0f 90       	pop	r0
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	df 90       	pop	r13
    3b64:	cf 90       	pop	r12
    3b66:	08 95       	ret

00003b68 <udi_cdc_read_no_polling>:
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
    3b68:	ef 92       	push	r14
    3b6a:	ff 92       	push	r15
    3b6c:	0f 93       	push	r16
    3b6e:	1f 93       	push	r17
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	1f 92       	push	r1
    3b76:	1f 92       	push	r1
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	dc 01       	movw	r26, r24
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
    3b7e:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udi_cdc_data_running>
    3b82:	99 23       	and	r25, r25
    3b84:	09 f4       	brne	.+2      	; 0x3b88 <udi_cdc_read_no_polling+0x20>
    3b86:	44 c0       	rjmp	.+136    	; 0x3c10 <udi_cdc_read_no_polling+0xa8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b88:	8f b7       	in	r24, 0x3f	; 63
    3b8a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3b8c:	f8 94       	cli
	return flags;
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
	}
	
	//Get number of available data
	// Check available data
	flags = cpu_irq_save(); // to protect udi_cdc_rx_pos & udi_cdc_rx_buf_sel
	pos = udi_cdc_rx_pos[port];
    3b90:	40 91 e3 23 	lds	r20, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3b94:	50 91 e4 23 	lds	r21, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3b98:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	f9 01       	movw	r30, r18
    3ba0:	ee 0f       	add	r30, r30
    3ba2:	ff 1f       	adc	r31, r31
    3ba4:	ea 51       	subi	r30, 0x1A	; 26
    3ba6:	fc 4d       	sbci	r31, 0xDC	; 220
    3ba8:	00 81       	ld	r16, Z
    3baa:	11 81       	ldd	r17, Z+1	; 0x01
    3bac:	04 1b       	sub	r16, r20
    3bae:	15 0b       	sbc	r17, r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3bb0:	8f bf       	out	0x3f, r24	; 63
    3bb2:	78 01       	movw	r14, r16
    3bb4:	60 17       	cp	r22, r16
    3bb6:	71 07       	cpc	r23, r17
    3bb8:	08 f4       	brcc	.+2      	; 0x3bbc <udi_cdc_read_no_polling+0x54>
    3bba:	7b 01       	movw	r14, r22
	//If the buffer contains less than the requested number of data,
	//adjust read size
	if(nb_avail_data<size) {
		size = nb_avail_data;
	}
	if(size>0) {
    3bbc:	e1 14       	cp	r14, r1
    3bbe:	f1 04       	cpc	r15, r1
    3bc0:	51 f1       	breq	.+84     	; 0x3c16 <udi_cdc_read_no_polling+0xae>
    3bc2:	cd 01       	movw	r24, r26
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
    3bc4:	00 24       	eor	r0, r0
    3bc6:	36 95       	lsr	r19
    3bc8:	27 95       	ror	r18
    3bca:	07 94       	ror	r0
    3bcc:	36 95       	lsr	r19
    3bce:	27 95       	ror	r18
    3bd0:	07 94       	ror	r0
    3bd2:	32 2f       	mov	r19, r18
    3bd4:	20 2d       	mov	r18, r0
    3bd6:	b9 01       	movw	r22, r18
    3bd8:	64 0f       	add	r22, r20
    3bda:	75 1f       	adc	r23, r21
    3bdc:	66 51       	subi	r22, 0x16	; 22
    3bde:	7c 4d       	sbci	r23, 0xDC	; 220
    3be0:	a7 01       	movw	r20, r14
    3be2:	0e 94 1c 31 	call	0x6238	; 0x6238 <memcpy>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3be6:	8f b7       	in	r24, 0x3f	; 63
    3be8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3bea:	f8 94       	cli
	return flags;
    3bec:	2a 81       	ldd	r18, Y+2	; 0x02
		flags = cpu_irq_save(); // to protect udi_cdc_rx_pos
		udi_cdc_rx_pos[port] += size;
    3bee:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3bf2:	90 91 e4 23 	lds	r25, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
    3bf6:	e8 0e       	add	r14, r24
    3bf8:	f9 1e       	adc	r15, r25
    3bfa:	e0 92 e3 23 	sts	0x23E3, r14	; 0x8023e3 <udi_cdc_rx_pos>
    3bfe:	f0 92 e4 23 	sts	0x23E4, r15	; 0x8023e4 <udi_cdc_rx_pos+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c02:	2f bf       	out	0x3f, r18	; 63
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	0e 94 3a 1c 	call	0x3874	; 0x3874 <udi_cdc_rx_start>
	}
	return(nb_avail_data);
    3c0a:	80 2f       	mov	r24, r16
    3c0c:	91 2f       	mov	r25, r17
    3c0e:	05 c0       	rjmp	.+10     	; 0x3c1a <udi_cdc_read_no_polling+0xb2>
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
		return 0;
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <udi_cdc_read_no_polling+0xb2>
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
	}
	return(nb_avail_data);
    3c16:	80 2f       	mov	r24, r16
    3c18:	91 2f       	mov	r25, r17
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
    3c1a:	0f 90       	pop	r0
    3c1c:	0f 90       	pop	r0
    3c1e:	df 91       	pop	r29
    3c20:	cf 91       	pop	r28
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	ff 90       	pop	r15
    3c28:	ef 90       	pop	r14
    3c2a:	08 95       	ret

00003c2c <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    3c2c:	ab 01       	movw	r20, r22
	return udi_cdc_multi_read_buf(0, buf, size);
    3c2e:	bc 01       	movw	r22, r24
    3c30:	80 e0       	ldi	r24, 0x00	; 0
    3c32:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <udi_cdc_multi_read_buf>
}
    3c36:	08 95       	ret

00003c38 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    3c38:	cf 93       	push	r28
    3c3a:	df 93       	push	r29
    3c3c:	1f 92       	push	r1
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c42:	8f b7       	in	r24, 0x3f	; 63
    3c44:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3c46:	f8 94       	cli
	return flags;
    3c48:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3c4a:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3c4e:	e8 2f       	mov	r30, r24
    3c50:	f0 e0       	ldi	r31, 0x00	; 0
    3c52:	ee 0f       	add	r30, r30
    3c54:	ff 1f       	adc	r31, r31
    3c56:	e2 5a       	subi	r30, 0xA2	; 162
    3c58:	fc 4d       	sbci	r31, 0xDC	; 220
    3c5a:	20 81       	ld	r18, Z
    3c5c:	31 81       	ldd	r19, Z+1	; 0x01
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    3c5e:	20 34       	cpi	r18, 0x40	; 64
    3c60:	31 05       	cpc	r19, r1
    3c62:	89 f4       	brne	.+34     	; 0x3c86 <udi_cdc_multi_get_free_tx_buffer+0x4e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    3c64:	40 91 5a 23 	lds	r20, 0x235A	; 0x80235a <udi_cdc_tx_trans_ongoing>
    3c68:	41 11       	cpse	r20, r1
    3c6a:	0d c0       	rjmp	.+26     	; 0x3c86 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    3c6c:	40 91 59 23 	lds	r20, 0x2359	; 0x802359 <udi_cdc_tx_both_buf_to_send>
    3c70:	41 11       	cpse	r20, r1
    3c72:	09 c0       	rjmp	.+18     	; 0x3c86 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    3c74:	21 e0       	ldi	r18, 0x01	; 1
    3c76:	20 93 59 23 	sts	0x2359, r18	; 0x802359 <udi_cdc_tx_both_buf_to_send>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    3c7a:	81 11       	cpse	r24, r1
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	20 93 5d 23 	sts	0x235D, r18	; 0x80235d <udi_cdc_tx_buf_sel>
			buf_sel_nb = 0;
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c86:	9f bf       	out	0x3f, r25	; 63
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
    3c88:	80 e4       	ldi	r24, 0x40	; 64
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	82 1b       	sub	r24, r18
    3c8e:	93 0b       	sbc	r25, r19
    3c90:	0f 90       	pop	r0
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	08 95       	ret

00003c98 <udi_cdc_get_free_tx_buffer>:

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <udi_cdc_multi_get_free_tx_buffer>
}
    3c9e:	08 95       	ret

00003ca0 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    3ca0:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <udi_cdc_multi_get_free_tx_buffer>
    3ca4:	21 e0       	ldi	r18, 0x01	; 1
    3ca6:	89 2b       	or	r24, r25
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <udi_cdc_multi_is_tx_ready+0xc>
    3caa:	20 e0       	ldi	r18, 0x00	; 0
}
    3cac:	82 2f       	mov	r24, r18
    3cae:	08 95       	ret

00003cb0 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <udi_cdc_multi_is_tx_ready>
}
    3cb6:	08 95       	ret

00003cb8 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    3cb8:	ff 92       	push	r15
    3cba:	0f 93       	push	r16
    3cbc:	1f 93       	push	r17
    3cbe:	cf 93       	push	r28
    3cc0:	df 93       	push	r29
    3cc2:	1f 92       	push	r1
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	f6 2e       	mov	r15, r22
    3cca:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    3ccc:	01 e0       	ldi	r16, 0x01	; 1
    3cce:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_line_coding+0x6>
    3cd2:	89 30       	cpi	r24, 0x09	; 9
    3cd4:	09 f0       	breq	.+2      	; 0x3cd8 <udi_cdc_multi_putc+0x20>
    3cd6:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3cd8:	80 e0       	ldi	r24, 0x00	; 0
    3cda:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <udi_cdc_multi_is_tx_ready>
    3cde:	81 11       	cpse	r24, r1
    3ce0:	07 c0       	rjmp	.+14     	; 0x3cf0 <udi_cdc_multi_putc+0x38>
		if (!udi_cdc_data_running) {
    3ce2:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3ce6:	81 11       	cpse	r24, r1
    3ce8:	f7 cf       	rjmp	.-18     	; 0x3cd8 <udi_cdc_multi_putc+0x20>
			return false;
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	2d c0       	rjmp	.+90     	; 0x3d4a <udi_cdc_multi_putc+0x92>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3cf0:	8f b7       	in	r24, 0x3f	; 63
    3cf2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3cf4:	f8 94       	cli
	return flags;
    3cf6:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3cf8:	e0 91 5d 23 	lds	r30, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	df 01       	movw	r26, r30
    3d00:	aa 0f       	add	r26, r26
    3d02:	bb 1f       	adc	r27, r27
    3d04:	a2 5a       	subi	r26, 0xA2	; 162
    3d06:	bc 4d       	sbci	r27, 0xDC	; 220
    3d08:	8d 91       	ld	r24, X+
    3d0a:	9c 91       	ld	r25, X
    3d0c:	11 97       	sbiw	r26, 0x01	; 1
    3d0e:	ac 01       	movw	r20, r24
    3d10:	4f 5f       	subi	r20, 0xFF	; 255
    3d12:	5f 4f       	sbci	r21, 0xFF	; 255
    3d14:	4d 93       	st	X+, r20
    3d16:	5c 93       	st	X, r21
    3d18:	00 24       	eor	r0, r0
    3d1a:	f6 95       	lsr	r31
    3d1c:	e7 95       	ror	r30
    3d1e:	07 94       	ror	r0
    3d20:	f6 95       	lsr	r31
    3d22:	e7 95       	ror	r30
    3d24:	07 94       	ror	r0
    3d26:	fe 2f       	mov	r31, r30
    3d28:	e0 2d       	mov	r30, r0
    3d2a:	8e 0f       	add	r24, r30
    3d2c:	9f 1f       	adc	r25, r31
    3d2e:	fc 01       	movw	r30, r24
    3d30:	ee 59       	subi	r30, 0x9E	; 158
    3d32:	fc 4d       	sbci	r31, 0xDC	; 220
    3d34:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d36:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    3d38:	00 23       	and	r16, r16
    3d3a:	29 f0       	breq	.+10     	; 0x3d46 <udi_cdc_multi_putc+0x8e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    3d3c:	f1 2e       	mov	r15, r17
    3d3e:	11 0f       	add	r17, r17
    3d40:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    3d42:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    3d44:	c9 cf       	rjmp	.-110    	; 0x3cd8 <udi_cdc_multi_putc+0x20>
	}
	return true;
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	90 e0       	ldi	r25, 0x00	; 0
}
    3d4a:	0f 90       	pop	r0
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	ff 90       	pop	r15
    3d56:	08 95       	ret

00003d58 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    3d58:	bc 01       	movw	r22, r24
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <udi_cdc_multi_putc>
}
    3d60:	08 95       	ret

00003d62 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    3d62:	5f 92       	push	r5
    3d64:	6f 92       	push	r6
    3d66:	7f 92       	push	r7
    3d68:	8f 92       	push	r8
    3d6a:	9f 92       	push	r9
    3d6c:	af 92       	push	r10
    3d6e:	bf 92       	push	r11
    3d70:	cf 92       	push	r12
    3d72:	df 92       	push	r13
    3d74:	ef 92       	push	r14
    3d76:	ff 92       	push	r15
    3d78:	0f 93       	push	r16
    3d7a:	1f 93       	push	r17
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	1f 92       	push	r1
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62
    3d86:	4b 01       	movw	r8, r22
    3d88:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    3d8a:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_line_coding+0x6>
    3d8e:	89 30       	cpi	r24, 0x09	; 9
    3d90:	11 f4       	brne	.+4      	; 0x3d96 <udi_cdc_multi_write_buf+0x34>
		size *=2;
    3d92:	aa 0c       	add	r10, r10
    3d94:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3d96:	68 94       	set
    3d98:	66 24       	eor	r6, r6
    3d9a:	66 f8       	bld	r6, 6
    3d9c:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <udi_cdc_multi_is_tx_ready>
    3da4:	81 11       	cpse	r24, r1
    3da6:	07 c0       	rjmp	.+14     	; 0x3db6 <udi_cdc_multi_write_buf+0x54>
		if (!udi_cdc_data_running) {
    3da8:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3dac:	81 11       	cpse	r24, r1
    3dae:	f7 cf       	rjmp	.-18     	; 0x3d9e <udi_cdc_multi_write_buf+0x3c>
    3db0:	8a 2d       	mov	r24, r10
    3db2:	9b 2d       	mov	r25, r11
    3db4:	3a c0       	rjmp	.+116    	; 0x3e2a <udi_cdc_multi_write_buf+0xc8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3db6:	8f b7       	in	r24, 0x3f	; 63
    3db8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3dba:	f8 94       	cli
	return flags;
    3dbc:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3dbe:	00 91 5d 23 	lds	r16, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3dc2:	10 e0       	ldi	r17, 0x00	; 0
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	ee 0f       	add	r30, r30
    3dc8:	ff 1f       	adc	r31, r31
    3dca:	e2 5a       	subi	r30, 0xA2	; 162
    3dcc:	fc 4d       	sbci	r31, 0xDC	; 220
    3dce:	e0 80       	ld	r14, Z
    3dd0:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3dd2:	c3 01       	movw	r24, r6
    3dd4:	8e 19       	sub	r24, r14
    3dd6:	9f 09       	sbc	r25, r15
    3dd8:	65 01       	movw	r12, r10
    3dda:	8a 15       	cp	r24, r10
    3ddc:	9b 05       	cpc	r25, r11
    3dde:	08 f4       	brcc	.+2      	; 0x3de2 <udi_cdc_multi_write_buf+0x80>
    3de0:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    3de2:	c8 01       	movw	r24, r16
    3de4:	00 24       	eor	r0, r0
    3de6:	96 95       	lsr	r25
    3de8:	87 95       	ror	r24
    3dea:	07 94       	ror	r0
    3dec:	96 95       	lsr	r25
    3dee:	87 95       	ror	r24
    3df0:	07 94       	ror	r0
    3df2:	98 2f       	mov	r25, r24
    3df4:	80 2d       	mov	r24, r0
    3df6:	8e 0d       	add	r24, r14
    3df8:	9f 1d       	adc	r25, r15
    3dfa:	a6 01       	movw	r20, r12
    3dfc:	b4 01       	movw	r22, r8
    3dfe:	8e 59       	subi	r24, 0x9E	; 158
    3e00:	9c 4d       	sbci	r25, 0xDC	; 220
    3e02:	0e 94 1c 31 	call	0x6238	; 0x6238 <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    3e06:	00 0f       	add	r16, r16
    3e08:	11 1f       	adc	r17, r17
    3e0a:	f8 01       	movw	r30, r16
    3e0c:	e2 5a       	subi	r30, 0xA2	; 162
    3e0e:	fc 4d       	sbci	r31, 0xDC	; 220
    3e10:	ec 0c       	add	r14, r12
    3e12:	fd 1c       	adc	r15, r13
    3e14:	e0 82       	st	Z, r14
    3e16:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3e18:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
    3e1a:	8c 0c       	add	r8, r12
    3e1c:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    3e1e:	ac 18       	sub	r10, r12
    3e20:	bd 08       	sbc	r11, r13

	if (size) {
    3e22:	09 f0       	breq	.+2      	; 0x3e26 <udi_cdc_multi_write_buf+0xc4>
    3e24:	bc cf       	rjmp	.-136    	; 0x3d9e <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
}
    3e2a:	0f 90       	pop	r0
    3e2c:	df 91       	pop	r29
    3e2e:	cf 91       	pop	r28
    3e30:	1f 91       	pop	r17
    3e32:	0f 91       	pop	r16
    3e34:	ff 90       	pop	r15
    3e36:	ef 90       	pop	r14
    3e38:	df 90       	pop	r13
    3e3a:	cf 90       	pop	r12
    3e3c:	bf 90       	pop	r11
    3e3e:	af 90       	pop	r10
    3e40:	9f 90       	pop	r9
    3e42:	8f 90       	pop	r8
    3e44:	7f 90       	pop	r7
    3e46:	6f 90       	pop	r6
    3e48:	5f 90       	pop	r5
    3e4a:	08 95       	ret

00003e4c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    3e4c:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
    3e4e:	bc 01       	movw	r22, r24
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <udi_cdc_multi_write_buf>
}
    3e56:	08 95       	ret

00003e58 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3e58:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    3e5c:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3e60:	01 90       	ld	r0, Z+
    3e62:	f0 81       	ld	r31, Z
    3e64:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3e66:	22 81       	ldd	r18, Z+2	; 0x02
    3e68:	33 81       	ldd	r19, Z+3	; 0x03
    3e6a:	2e 0f       	add	r18, r30
    3e6c:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3e6e:	fc 01       	movw	r30, r24
    3e70:	40 81       	ld	r20, Z
    3e72:	e4 0f       	add	r30, r20
    3e74:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3e76:	e2 17       	cp	r30, r18
    3e78:	f3 07       	cpc	r31, r19
    3e7a:	b8 f4       	brcc	.+46     	; 0x3eaa <udc_next_desc_in_iface+0x52>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3e7c:	81 81       	ldd	r24, Z+1	; 0x01
    3e7e:	84 30       	cpi	r24, 0x04	; 4
    3e80:	b9 f0       	breq	.+46     	; 0x3eb0 <udc_next_desc_in_iface+0x58>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3e82:	86 13       	cpse	r24, r22
    3e84:	09 c0       	rjmp	.+18     	; 0x3e98 <udc_next_desc_in_iface+0x40>
    3e86:	05 c0       	rjmp	.+10     	; 0x3e92 <udc_next_desc_in_iface+0x3a>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3e88:	81 81       	ldd	r24, Z+1	; 0x01
    3e8a:	84 30       	cpi	r24, 0x04	; 4
    3e8c:	a1 f0       	breq	.+40     	; 0x3eb6 <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3e8e:	86 13       	cpse	r24, r22
    3e90:	03 c0       	rjmp	.+6      	; 0x3e98 <udc_next_desc_in_iface+0x40>
			return desc; // Specific descriptor found
    3e92:	8e 2f       	mov	r24, r30
    3e94:	9f 2f       	mov	r25, r31
    3e96:	08 95       	ret
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3e98:	80 81       	ld	r24, Z
    3e9a:	e8 0f       	add	r30, r24
    3e9c:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3e9e:	e2 17       	cp	r30, r18
    3ea0:	f3 07       	cpc	r31, r19
    3ea2:	90 f3       	brcs	.-28     	; 0x3e88 <udc_next_desc_in_iface+0x30>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	08 95       	ret
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	08 95       	ret
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	08 95       	ret
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
}
    3eba:	08 95       	ret

00003ebc <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3ebc:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    3ec0:	8f 77       	andi	r24, 0x7F	; 127
    3ec2:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <udd_set_address>
    3ec6:	08 95       	ret

00003ec8 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3ec8:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <udc_num_configuration>
    3ecc:	99 23       	and	r25, r25
    3ece:	81 f1       	breq	.+96     	; 0x3f30 <udc_update_iface_desc+0x68>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3ed0:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    3ed4:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3ed8:	01 90       	ld	r0, Z+
    3eda:	f0 81       	ld	r31, Z
    3edc:	e0 2d       	mov	r30, r0
    3ede:	94 81       	ldd	r25, Z+4	; 0x04
    3ee0:	89 17       	cp	r24, r25
    3ee2:	40 f5       	brcc	.+80     	; 0x3f34 <udc_update_iface_desc+0x6c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3ee4:	e0 93 86 24 	sts	0x2486, r30	; 0x802486 <udc_ptr_iface>
    3ee8:	f0 93 87 24 	sts	0x2487, r31	; 0x802487 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3eec:	22 81       	ldd	r18, Z+2	; 0x02
    3eee:	33 81       	ldd	r19, Z+3	; 0x03
    3ef0:	2e 0f       	add	r18, r30
    3ef2:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3ef4:	e2 17       	cp	r30, r18
    3ef6:	f3 07       	cpc	r31, r19
    3ef8:	f8 f4       	brcc	.+62     	; 0x3f38 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	94 30       	cpi	r25, 0x04	; 4
    3efe:	61 f4       	brne	.+24     	; 0x3f18 <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3f00:	92 81       	ldd	r25, Z+2	; 0x02
    3f02:	98 13       	cpse	r25, r24
    3f04:	09 c0       	rjmp	.+18     	; 0x3f18 <udc_update_iface_desc+0x50>
    3f06:	93 81       	ldd	r25, Z+3	; 0x03
    3f08:	96 13       	cpse	r25, r22
    3f0a:	06 c0       	rjmp	.+12     	; 0x3f18 <udc_update_iface_desc+0x50>
    3f0c:	e0 93 86 24 	sts	0x2486, r30	; 0x802486 <udc_ptr_iface>
    3f10:	f0 93 87 24 	sts	0x2487, r31	; 0x802487 <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3f18:	90 81       	ld	r25, Z
    3f1a:	e9 0f       	add	r30, r25
    3f1c:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3f1e:	e2 17       	cp	r30, r18
    3f20:	f3 07       	cpc	r31, r19
    3f22:	58 f3       	brcs	.-42     	; 0x3efa <udc_update_iface_desc+0x32>
    3f24:	e0 93 86 24 	sts	0x2486, r30	; 0x802486 <udc_ptr_iface>
    3f28:	f0 93 87 24 	sts	0x2487, r31	; 0x802487 <udc_ptr_iface+0x1>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	08 95       	ret
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    3f34:	80 e0       	ldi	r24, 0x00	; 0
    3f36:	08 95       	ret
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3f38:	80 e0       	ldi	r24, 0x00	; 0
}
    3f3a:	08 95       	ret

00003f3c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    3f4e:	18 2f       	mov	r17, r24
    3f50:	88 23       	and	r24, r24
    3f52:	91 f1       	breq	.+100    	; 0x3fb8 <udc_iface_disable+0x7c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3f54:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    3f58:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3f5c:	ec 2f       	mov	r30, r28
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	ee 0f       	add	r30, r30
    3f62:	ff 1f       	adc	r31, r31
    3f64:	12 96       	adiw	r26, 0x02	; 2
    3f66:	8d 91       	ld	r24, X+
    3f68:	9c 91       	ld	r25, X
    3f6a:	13 97       	sbiw	r26, 0x03	; 3
    3f6c:	e8 0f       	add	r30, r24
    3f6e:	f9 1f       	adc	r31, r25
    3f70:	e0 80       	ld	r14, Z
    3f72:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3f74:	d7 01       	movw	r26, r14
    3f76:	16 96       	adiw	r26, 0x06	; 6
    3f78:	ed 91       	ld	r30, X+
    3f7a:	fc 91       	ld	r31, X
    3f7c:	17 97       	sbiw	r26, 0x07	; 7
    3f7e:	19 95       	eicall
    3f80:	68 2f       	mov	r22, r24
    3f82:	8c 2f       	mov	r24, r28
    3f84:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    3f88:	18 2f       	mov	r17, r24
    3f8a:	88 23       	and	r24, r24
    3f8c:	a9 f0       	breq	.+42     	; 0x3fb8 <udc_iface_disable+0x7c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3f8e:	c0 91 86 24 	lds	r28, 0x2486	; 0x802486 <udc_ptr_iface>
    3f92:	d0 91 87 24 	lds	r29, 0x2487	; 0x802487 <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3f96:	65 e0       	ldi	r22, 0x05	; 5
    3f98:	ce 01       	movw	r24, r28
    3f9a:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <udc_next_desc_in_iface>
    3f9e:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3fa0:	89 2b       	or	r24, r25
    3fa2:	21 f0       	breq	.+8      	; 0x3fac <udc_iface_disable+0x70>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa6:	0e 94 36 29 	call	0x526c	; 0x526c <udd_ep_free>
		}
    3faa:	f5 cf       	rjmp	.-22     	; 0x3f96 <udc_iface_disable+0x5a>
	}
#endif

	// Disable interface
	udi_api->disable();
    3fac:	d7 01       	movw	r26, r14
    3fae:	12 96       	adiw	r26, 0x02	; 2
    3fb0:	ed 91       	ld	r30, X+
    3fb2:	fc 91       	ld	r31, X
    3fb4:	13 97       	sbiw	r26, 0x03	; 3
    3fb6:	19 95       	eicall
	return true;
}
    3fb8:	81 2f       	mov	r24, r17
    3fba:	df 91       	pop	r29
    3fbc:	cf 91       	pop	r28
    3fbe:	1f 91       	pop	r17
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	08 95       	ret

00003fc6 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3fc6:	1f 93       	push	r17
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3fce:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    3fd2:	88 23       	and	r24, r24
    3fd4:	49 f1       	breq	.+82     	; 0x4028 <__stack+0x29>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3fd6:	c0 91 86 24 	lds	r28, 0x2486	; 0x802486 <udc_ptr_iface>
    3fda:	d0 91 87 24 	lds	r29, 0x2487	; 0x802487 <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3fde:	65 e0       	ldi	r22, 0x05	; 5
    3fe0:	ce 01       	movw	r24, r28
    3fe2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <udc_next_desc_in_iface>
    3fe6:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3fe8:	89 2b       	or	r24, r25
    3fea:	49 f0       	breq	.+18     	; 0x3ffe <udc_iface_enable+0x38>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3fec:	4c 81       	ldd	r20, Y+4	; 0x04
    3fee:	5d 81       	ldd	r21, Y+5	; 0x05
    3ff0:	6b 81       	ldd	r22, Y+3	; 0x03
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	0e 94 32 27 	call	0x4e64	; 0x4e64 <udd_ep_alloc>
    3ff8:	81 11       	cpse	r24, r1
    3ffa:	f1 cf       	rjmp	.-30     	; 0x3fde <udc_iface_enable+0x18>
    3ffc:	15 c0       	rjmp	.+42     	; 0x4028 <__stack+0x29>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3ffe:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    4002:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4006:	e1 2f       	mov	r30, r17
    4008:	f0 e0       	ldi	r31, 0x00	; 0
    400a:	ee 0f       	add	r30, r30
    400c:	ff 1f       	adc	r31, r31
    400e:	12 96       	adiw	r26, 0x02	; 2
    4010:	8d 91       	ld	r24, X+
    4012:	9c 91       	ld	r25, X
    4014:	13 97       	sbiw	r26, 0x03	; 3
    4016:	e8 0f       	add	r30, r24
    4018:	f9 1f       	adc	r31, r25
    401a:	01 90       	ld	r0, Z+
    401c:	f0 81       	ld	r31, Z
    401e:	e0 2d       	mov	r30, r0
    4020:	01 90       	ld	r0, Z+
    4022:	f0 81       	ld	r31, Z
    4024:	e0 2d       	mov	r30, r0
    4026:	19 95       	eicall
}
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	1f 91       	pop	r17
    402e:	08 95       	ret

00004030 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    4030:	80 91 86 24 	lds	r24, 0x2486	; 0x802486 <udc_ptr_iface>
    4034:	90 91 87 24 	lds	r25, 0x2487	; 0x802487 <udc_ptr_iface+0x1>
    4038:	08 95       	ret

0000403a <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    403a:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <udd_enable>
    403e:	08 95       	ret

00004040 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    4040:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4042:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4046:	88 23       	and	r24, r24
    4048:	c9 f0       	breq	.+50     	; 0x407c <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    404a:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    404e:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4052:	01 90       	ld	r0, Z+
    4054:	f0 81       	ld	r31, Z
    4056:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4058:	84 81       	ldd	r24, Z+4	; 0x04
    405a:	88 23       	and	r24, r24
    405c:	79 f0       	breq	.+30     	; 0x407c <udc_reset+0x3c>
    405e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    4060:	8c 2f       	mov	r24, r28
    4062:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    4066:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4068:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    406c:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4070:	01 90       	ld	r0, Z+
    4072:	f0 81       	ld	r31, Z
    4074:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4076:	84 81       	ldd	r24, Z+4	; 0x04
    4078:	c8 17       	cp	r28, r24
    407a:	90 f3       	brcs	.-28     	; 0x4060 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    407c:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udc_device_status>
    4088:	90 93 8f 24 	sts	0x248F, r25	; 0x80248f <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    408c:	cf 91       	pop	r28
    408e:	08 95       	ret

00004090 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    4090:	0e 94 21 26 	call	0x4c42	; 0x4c42 <udd_disable>
	udc_reset();
    4094:	0e 94 20 20 	call	0x4040	; 0x4040 <udc_reset>
    4098:	08 95       	ret

0000409a <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    409a:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    409c:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    40a0:	88 23       	and	r24, r24
    40a2:	49 f1       	breq	.+82     	; 0x40f6 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    40a4:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    40a8:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    40ac:	ed 91       	ld	r30, X+
    40ae:	fc 91       	ld	r31, X
    40b0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    40b2:	84 81       	ldd	r24, Z+4	; 0x04
    40b4:	88 23       	and	r24, r24
    40b6:	f9 f0       	breq	.+62     	; 0x40f6 <udc_sof_notify+0x5c>
    40b8:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    40ba:	ec 2f       	mov	r30, r28
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	ee 0f       	add	r30, r30
    40c0:	ff 1f       	adc	r31, r31
    40c2:	12 96       	adiw	r26, 0x02	; 2
    40c4:	8d 91       	ld	r24, X+
    40c6:	9c 91       	ld	r25, X
    40c8:	13 97       	sbiw	r26, 0x03	; 3
    40ca:	e8 0f       	add	r30, r24
    40cc:	f9 1f       	adc	r31, r25
    40ce:	01 90       	ld	r0, Z+
    40d0:	f0 81       	ld	r31, Z
    40d2:	e0 2d       	mov	r30, r0
    40d4:	00 84       	ldd	r0, Z+8	; 0x08
    40d6:	f1 85       	ldd	r31, Z+9	; 0x09
    40d8:	e0 2d       	mov	r30, r0
    40da:	30 97       	sbiw	r30, 0x00	; 0
    40dc:	09 f0       	breq	.+2      	; 0x40e0 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    40de:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    40e0:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    40e2:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    40e6:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    40ea:	ed 91       	ld	r30, X+
    40ec:	fc 91       	ld	r31, X
    40ee:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    40f0:	84 81       	ldd	r24, Z+4	; 0x04
    40f2:	c8 17       	cp	r28, r24
    40f4:	10 f3       	brcs	.-60     	; 0x40ba <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    40f6:	cf 91       	pop	r28
    40f8:	08 95       	ret

000040fa <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    40fa:	0f 93       	push	r16
    40fc:	1f 93       	push	r17
    40fe:	cf 93       	push	r28
    4100:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4102:	e1 ed       	ldi	r30, 0xD1	; 209
    4104:	f5 e2       	ldi	r31, 0x25	; 37
    4106:	12 86       	std	Z+10, r1	; 0x0a
    4108:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    410a:	14 86       	std	Z+12, r1	; 0x0c
    410c:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    410e:	16 86       	std	Z+14, r1	; 0x0e
    4110:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    4112:	80 81       	ld	r24, Z
    4114:	88 23       	and	r24, r24
    4116:	0c f0       	brlt	.+2      	; 0x411a <udc_process_setup+0x20>
    4118:	79 c2       	rjmp	.+1266   	; 0x460c <udc_process_setup+0x512>
		if (udd_g_ctrlreq.req.wLength == 0) {
    411a:	20 91 d7 25 	lds	r18, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    411e:	30 91 d8 25 	lds	r19, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4122:	21 15       	cp	r18, r1
    4124:	31 05       	cpc	r19, r1
    4126:	09 f0       	breq	.+2      	; 0x412a <udc_process_setup+0x30>
    4128:	6c c2       	rjmp	.+1240   	; 0x4602 <udc_process_setup+0x508>
    412a:	67 c2       	rjmp	.+1230   	; 0x45fa <udc_process_setup+0x500>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    412c:	8f 71       	andi	r24, 0x1F	; 31
    412e:	09 f0       	breq	.+2      	; 0x4132 <udc_process_setup+0x38>
    4130:	ae c0       	rjmp	.+348    	; 0x428e <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4132:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    4136:	96 30       	cpi	r25, 0x06	; 6
    4138:	81 f0       	breq	.+32     	; 0x415a <udc_process_setup+0x60>
    413a:	98 30       	cpi	r25, 0x08	; 8
    413c:	09 f4       	brne	.+2      	; 0x4140 <udc_process_setup+0x46>
    413e:	9c c0       	rjmp	.+312    	; 0x4278 <udc_process_setup+0x17e>
    4140:	91 11       	cpse	r25, r1
    4142:	a5 c0       	rjmp	.+330    	; 0x428e <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    4144:	22 30       	cpi	r18, 0x02	; 2
    4146:	31 05       	cpc	r19, r1
    4148:	09 f0       	breq	.+2      	; 0x414c <udc_process_setup+0x52>
    414a:	dd c1       	rjmp	.+954    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    414c:	62 e0       	ldi	r22, 0x02	; 2
    414e:	70 e0       	ldi	r23, 0x00	; 0
    4150:	8e e8       	ldi	r24, 0x8E	; 142
    4152:	94 e2       	ldi	r25, 0x24	; 36
    4154:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    4158:	62 c2       	rjmp	.+1220   	; 0x461e <udc_process_setup+0x524>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    415a:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    415e:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4162:	29 2f       	mov	r18, r25
    4164:	33 27       	eor	r19, r19
    4166:	22 30       	cpi	r18, 0x02	; 2
    4168:	31 05       	cpc	r19, r1
    416a:	b1 f0       	breq	.+44     	; 0x4198 <udc_process_setup+0x9e>
    416c:	24 f4       	brge	.+8      	; 0x4176 <udc_process_setup+0x7c>
    416e:	21 30       	cpi	r18, 0x01	; 1
    4170:	31 05       	cpc	r19, r1
    4172:	41 f0       	breq	.+16     	; 0x4184 <udc_process_setup+0x8a>
    4174:	bf c1       	rjmp	.+894    	; 0x44f4 <udc_process_setup+0x3fa>
    4176:	23 30       	cpi	r18, 0x03	; 3
    4178:	31 05       	cpc	r19, r1
    417a:	f1 f1       	breq	.+124    	; 0x41f8 <udc_process_setup+0xfe>
    417c:	2f 30       	cpi	r18, 0x0F	; 15
    417e:	31 05       	cpc	r19, r1
    4180:	61 f1       	breq	.+88     	; 0x41da <udc_process_setup+0xe0>
    4182:	b8 c1       	rjmp	.+880    	; 0x44f4 <udc_process_setup+0x3fa>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4184:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <udc_config>
    4188:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    418c:	dc 01       	movw	r26, r24
    418e:	6c 91       	ld	r22, X
    4190:	70 e0       	ldi	r23, 0x00	; 0
    4192:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    4196:	61 c0       	rjmp	.+194    	; 0x425a <udc_process_setup+0x160>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    4198:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <udc_config>
    419c:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <udc_config+0x1>
    41a0:	21 89       	ldd	r18, Z+17	; 0x11
    41a2:	82 17       	cp	r24, r18
    41a4:	08 f0       	brcs	.+2      	; 0x41a8 <udc_process_setup+0xae>
    41a6:	af c1       	rjmp	.+862    	; 0x4506 <udc_process_setup+0x40c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    41a8:	99 27       	eor	r25, r25
    41aa:	88 0f       	add	r24, r24
    41ac:	99 1f       	adc	r25, r25
    41ae:	88 0f       	add	r24, r24
    41b0:	99 1f       	adc	r25, r25
    41b2:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <udc_config+0x2>
    41b6:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <udc_config+0x3>
    41ba:	e8 0f       	add	r30, r24
    41bc:	f9 1f       	adc	r31, r25
    41be:	80 81       	ld	r24, Z
    41c0:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    41c2:	fc 01       	movw	r30, r24
    41c4:	62 81       	ldd	r22, Z+2	; 0x02
    41c6:	73 81       	ldd	r23, Z+3	; 0x03
    41c8:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    41cc:	e0 91 d9 25 	lds	r30, 0x25D9	; 0x8025d9 <udd_g_ctrlreq+0x8>
    41d0:	f0 91 da 25 	lds	r31, 0x25DA	; 0x8025da <udd_g_ctrlreq+0x9>
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	81 83       	std	Z+1, r24	; 0x01
    41d8:	40 c0       	rjmp	.+128    	; 0x425a <udc_process_setup+0x160>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    41da:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <udc_config+0x4>
    41de:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <udc_config+0x5>
    41e2:	00 97       	sbiw	r24, 0x00	; 0
    41e4:	09 f4       	brne	.+2      	; 0x41e8 <udc_process_setup+0xee>
    41e6:	8f c1       	rjmp	.+798    	; 0x4506 <udc_process_setup+0x40c>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    41e8:	dc 01       	movw	r26, r24
    41ea:	12 96       	adiw	r26, 0x02	; 2
    41ec:	6d 91       	ld	r22, X+
    41ee:	7c 91       	ld	r23, X
    41f0:	13 97       	sbiw	r26, 0x03	; 3
    41f2:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    41f6:	31 c0       	rjmp	.+98     	; 0x425a <udc_process_setup+0x160>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    41f8:	99 27       	eor	r25, r25
    41fa:	81 30       	cpi	r24, 0x01	; 1
    41fc:	91 05       	cpc	r25, r1
    41fe:	99 f0       	breq	.+38     	; 0x4226 <udc_process_setup+0x12c>
    4200:	58 f0       	brcs	.+22     	; 0x4218 <udc_process_setup+0x11e>
    4202:	82 30       	cpi	r24, 0x02	; 2
    4204:	91 05       	cpc	r25, r1
    4206:	09 f4       	brne	.+2      	; 0x420a <udc_process_setup+0x110>
    4208:	06 c2       	rjmp	.+1036   	; 0x4616 <udc_process_setup+0x51c>
    420a:	03 97       	sbiw	r24, 0x03	; 3
    420c:	09 f0       	breq	.+2      	; 0x4210 <udc_process_setup+0x116>
    420e:	7b c1       	rjmp	.+758    	; 0x4506 <udc_process_setup+0x40c>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    4210:	21 e0       	ldi	r18, 0x01	; 1
		str = udc_get_string_serial_name();
    4212:	89 e3       	ldi	r24, 0x39	; 57
    4214:	93 e2       	ldi	r25, 0x23	; 35
    4216:	0a c0       	rjmp	.+20     	; 0x422c <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    4218:	64 e0       	ldi	r22, 0x04	; 4
    421a:	70 e0       	ldi	r23, 0x00	; 0
    421c:	8e e4       	ldi	r24, 0x4E	; 78
    421e:	90 e2       	ldi	r25, 0x20	; 32
    4220:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    4224:	1a c0       	rjmp	.+52     	; 0x425a <udc_process_setup+0x160>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    4226:	88 e4       	ldi	r24, 0x48	; 72
    4228:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    422a:	25 e0       	ldi	r18, 0x05	; 5
    422c:	38 2f       	mov	r19, r24
    422e:	a0 e2       	ldi	r26, 0x20	; 32
    4230:	b0 e2       	ldi	r27, 0x20	; 32
    4232:	e8 2f       	mov	r30, r24
    4234:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    4236:	81 91       	ld	r24, Z+
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	8d 93       	st	X+, r24
    423c:	9d 93       	st	X+, r25
    423e:	8e 2f       	mov	r24, r30
    4240:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    4242:	82 17       	cp	r24, r18
    4244:	c0 f3       	brcs	.-16     	; 0x4236 <udc_process_setup+0x13c>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4246:	62 2f       	mov	r22, r18
    4248:	66 0f       	add	r22, r22
    424a:	6e 5f       	subi	r22, 0xFE	; 254
    424c:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <udc_string_desc>
		udd_set_setup_payload(
    4250:	70 e0       	ldi	r23, 0x00	; 0
    4252:	8e e1       	ldi	r24, 0x1E	; 30
    4254:	90 e2       	ldi	r25, 0x20	; 32
    4256:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    425a:	e1 ed       	ldi	r30, 0xD1	; 209
    425c:	f5 e2       	ldi	r31, 0x25	; 37
    425e:	86 81       	ldd	r24, Z+6	; 0x06
    4260:	97 81       	ldd	r25, Z+7	; 0x07
    4262:	22 85       	ldd	r18, Z+10	; 0x0a
    4264:	33 85       	ldd	r19, Z+11	; 0x0b
    4266:	82 17       	cp	r24, r18
    4268:	93 07       	cpc	r25, r19
    426a:	08 f0       	brcs	.+2      	; 0x426e <udc_process_setup+0x174>
    426c:	d8 c1       	rjmp	.+944    	; 0x461e <udc_process_setup+0x524>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    426e:	80 93 db 25 	sts	0x25DB, r24	; 0x8025db <udd_g_ctrlreq+0xa>
    4272:	90 93 dc 25 	sts	0x25DC, r25	; 0x8025dc <udd_g_ctrlreq+0xb>
    4276:	d3 c1       	rjmp	.+934    	; 0x461e <udc_process_setup+0x524>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4278:	21 30       	cpi	r18, 0x01	; 1
    427a:	31 05       	cpc	r19, r1
    427c:	09 f0       	breq	.+2      	; 0x4280 <udc_process_setup+0x186>
    427e:	43 c1       	rjmp	.+646    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    4280:	61 e0       	ldi	r22, 0x01	; 1
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	8a e8       	ldi	r24, 0x8A	; 138
    4286:	94 e2       	ldi	r25, 0x24	; 36
    4288:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    428c:	c8 c1       	rjmp	.+912    	; 0x461e <udc_process_setup+0x524>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    428e:	81 30       	cpi	r24, 0x01	; 1
    4290:	f1 f5       	brne	.+124    	; 0x430e <udc_process_setup+0x214>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4292:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    4296:	9a 30       	cpi	r25, 0x0A	; 10
    4298:	d1 f5       	brne	.+116    	; 0x430e <udc_process_setup+0x214>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    429a:	21 30       	cpi	r18, 0x01	; 1
    429c:	31 05       	cpc	r19, r1
    429e:	09 f0       	breq	.+2      	; 0x42a2 <udc_process_setup+0x1a8>
    42a0:	32 c1       	rjmp	.+612    	; 0x4506 <udc_process_setup+0x40c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    42a2:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    42a6:	88 23       	and	r24, r24
    42a8:	09 f4       	brne	.+2      	; 0x42ac <udc_process_setup+0x1b2>
    42aa:	2d c1       	rjmp	.+602    	; 0x4506 <udc_process_setup+0x40c>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    42ac:	c0 91 d5 25 	lds	r28, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    42b0:	d0 91 d6 25 	lds	r29, 0x25D6	; 0x8025d6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    42b4:	00 91 88 24 	lds	r16, 0x2488	; 0x802488 <udc_ptr_conf>
    42b8:	10 91 89 24 	lds	r17, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    42bc:	d8 01       	movw	r26, r16
    42be:	ed 91       	ld	r30, X+
    42c0:	fc 91       	ld	r31, X
    42c2:	84 81       	ldd	r24, Z+4	; 0x04
    42c4:	c8 17       	cp	r28, r24
    42c6:	08 f0       	brcs	.+2      	; 0x42ca <udc_process_setup+0x1d0>
    42c8:	1e c1       	rjmp	.+572    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	8c 2f       	mov	r24, r28
    42ce:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    42d2:	88 23       	and	r24, r24
    42d4:	09 f4       	brne	.+2      	; 0x42d8 <udc_process_setup+0x1de>
    42d6:	17 c1       	rjmp	.+558    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    42d8:	ce 01       	movw	r24, r28
    42da:	99 27       	eor	r25, r25
    42dc:	88 0f       	add	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	d8 01       	movw	r26, r16
    42e2:	12 96       	adiw	r26, 0x02	; 2
    42e4:	ed 91       	ld	r30, X+
    42e6:	fc 91       	ld	r31, X
    42e8:	13 97       	sbiw	r26, 0x03	; 3
    42ea:	e8 0f       	add	r30, r24
    42ec:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    42ee:	01 90       	ld	r0, Z+
    42f0:	f0 81       	ld	r31, Z
    42f2:	e0 2d       	mov	r30, r0
    42f4:	86 81       	ldd	r24, Z+6	; 0x06
    42f6:	97 81       	ldd	r25, Z+7	; 0x07
    42f8:	fc 01       	movw	r30, r24
    42fa:	19 95       	eicall
    42fc:	80 93 8c 24 	sts	0x248C, r24	; 0x80248c <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4300:	61 e0       	ldi	r22, 0x01	; 1
    4302:	70 e0       	ldi	r23, 0x00	; 0
    4304:	8c e8       	ldi	r24, 0x8C	; 140
    4306:	94 e2       	ldi	r25, 0x24	; 36
    4308:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    430c:	88 c1       	rjmp	.+784    	; 0x461e <udc_process_setup+0x524>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    430e:	82 30       	cpi	r24, 0x02	; 2
    4310:	09 f0       	breq	.+2      	; 0x4314 <udc_process_setup+0x21a>
    4312:	f9 c0       	rjmp	.+498    	; 0x4506 <udc_process_setup+0x40c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4314:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    4318:	81 11       	cpse	r24, r1
    431a:	ee c0       	rjmp	.+476    	; 0x44f8 <udc_process_setup+0x3fe>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    431c:	22 30       	cpi	r18, 0x02	; 2
    431e:	31 05       	cpc	r19, r1
    4320:	09 f0       	breq	.+2      	; 0x4324 <udc_process_setup+0x22a>
    4322:	f1 c0       	rjmp	.+482    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4324:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    4328:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <udd_ep_is_halted>
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	80 93 84 24 	sts	0x2484, r24	; 0x802484 <udc_ep_status.4716>
    4332:	90 93 85 24 	sts	0x2485, r25	; 0x802485 <udc_ep_status.4716+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4336:	62 e0       	ldi	r22, 0x02	; 2
    4338:	70 e0       	ldi	r23, 0x00	; 0
    433a:	84 e8       	ldi	r24, 0x84	; 132
    433c:	94 e2       	ldi	r25, 0x24	; 36
    433e:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <udd_set_setup_payload>
    4342:	6d c1       	rjmp	.+730    	; 0x461e <udc_process_setup+0x524>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4344:	8f 71       	andi	r24, 0x1F	; 31
    4346:	09 f0       	breq	.+2      	; 0x434a <udc_process_setup+0x250>
    4348:	86 c0       	rjmp	.+268    	; 0x4456 <udc_process_setup+0x35c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    434a:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    434e:	93 30       	cpi	r25, 0x03	; 3
    4350:	09 f4       	brne	.+2      	; 0x4354 <udc_process_setup+0x25a>
    4352:	d4 c0       	rjmp	.+424    	; 0x44fc <udc_process_setup+0x402>
    4354:	18 f4       	brcc	.+6      	; 0x435c <udc_process_setup+0x262>
    4356:	91 30       	cpi	r25, 0x01	; 1
    4358:	a1 f0       	breq	.+40     	; 0x4382 <udc_process_setup+0x288>
    435a:	7d c0       	rjmp	.+250    	; 0x4456 <udc_process_setup+0x35c>
    435c:	95 30       	cpi	r25, 0x05	; 5
    435e:	19 f0       	breq	.+6      	; 0x4366 <udc_process_setup+0x26c>
    4360:	99 30       	cpi	r25, 0x09	; 9
    4362:	39 f1       	breq	.+78     	; 0x43b2 <udc_process_setup+0x2b8>
    4364:	78 c0       	rjmp	.+240    	; 0x4456 <udc_process_setup+0x35c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4366:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    436a:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    436e:	89 2b       	or	r24, r25
    4370:	09 f0       	breq	.+2      	; 0x4374 <udc_process_setup+0x27a>
    4372:	c9 c0       	rjmp	.+402    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4374:	8e e5       	ldi	r24, 0x5E	; 94
    4376:	9f e1       	ldi	r25, 0x1F	; 31
    4378:	80 93 dd 25 	sts	0x25DD, r24	; 0x8025dd <udd_g_ctrlreq+0xc>
    437c:	90 93 de 25 	sts	0x25DE, r25	; 0x8025de <udd_g_ctrlreq+0xd>
    4380:	4e c1       	rjmp	.+668    	; 0x461e <udc_process_setup+0x524>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4382:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4386:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    438a:	89 2b       	or	r24, r25
    438c:	09 f0       	breq	.+2      	; 0x4390 <udc_process_setup+0x296>
    438e:	bb c0       	rjmp	.+374    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    4390:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    4394:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	09 f0       	breq	.+2      	; 0x439e <udc_process_setup+0x2a4>
    439c:	b4 c0       	rjmp	.+360    	; 0x4506 <udc_process_setup+0x40c>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    439e:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udc_device_status>
    43a2:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <udc_device_status+0x1>
    43a6:	8d 7f       	andi	r24, 0xFD	; 253
    43a8:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udc_device_status>
    43ac:	90 93 8f 24 	sts	0x248F, r25	; 0x80248f <udc_device_status+0x1>
    43b0:	36 c1       	rjmp	.+620    	; 0x461e <udc_process_setup+0x524>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    43b2:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    43b6:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    43ba:	89 2b       	or	r24, r25
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <udc_process_setup+0x2c6>
    43be:	a3 c0       	rjmp	.+326    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    43c0:	0e 94 10 27 	call	0x4e20	; 0x4e20 <udd_getaddress>
    43c4:	88 23       	and	r24, r24
    43c6:	09 f4       	brne	.+2      	; 0x43ca <udc_process_setup+0x2d0>
    43c8:	9e c0       	rjmp	.+316    	; 0x4506 <udc_process_setup+0x40c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43ca:	20 91 d3 25 	lds	r18, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    43ce:	30 91 d4 25 	lds	r19, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    43d2:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    43d4:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <udc_config>
    43d8:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43dc:	81 89       	ldd	r24, Z+17	; 0x11
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	82 17       	cp	r24, r18
    43e2:	93 07       	cpc	r25, r19
    43e4:	08 f4       	brcc	.+2      	; 0x43e8 <udc_process_setup+0x2ee>
    43e6:	8f c0       	rjmp	.+286    	; 0x4506 <udc_process_setup+0x40c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    43e8:	0e 94 20 20 	call	0x4040	; 0x4040 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    43ec:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    43f0:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    43f4:	80 93 8a 24 	sts	0x248A, r24	; 0x80248a <udc_num_configuration>
	if (udc_num_configuration == 0) {
    43f8:	88 23       	and	r24, r24
    43fa:	09 f4       	brne	.+2      	; 0x43fe <udc_process_setup+0x304>
    43fc:	10 c1       	rjmp	.+544    	; 0x461e <udc_process_setup+0x524>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    43fe:	99 27       	eor	r25, r25
    4400:	81 50       	subi	r24, 0x01	; 1
    4402:	90 4c       	sbci	r25, 0xC0	; 192
    4404:	88 0f       	add	r24, r24
    4406:	99 1f       	adc	r25, r25
    4408:	88 0f       	add	r24, r24
    440a:	99 1f       	adc	r25, r25
    440c:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <udc_config+0x2>
    4410:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <udc_config+0x3>
    4414:	e8 0f       	add	r30, r24
    4416:	f9 1f       	adc	r31, r25
    4418:	e0 93 88 24 	sts	0x2488, r30	; 0x802488 <udc_ptr_conf>
    441c:	f0 93 89 24 	sts	0x2489, r31	; 0x802489 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4420:	01 90       	ld	r0, Z+
    4422:	f0 81       	ld	r31, Z
    4424:	e0 2d       	mov	r30, r0
    4426:	84 81       	ldd	r24, Z+4	; 0x04
    4428:	88 23       	and	r24, r24
    442a:	09 f4       	brne	.+2      	; 0x442e <udc_process_setup+0x334>
    442c:	f8 c0       	rjmp	.+496    	; 0x461e <udc_process_setup+0x524>
    442e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4430:	60 e0       	ldi	r22, 0x00	; 0
    4432:	8c 2f       	mov	r24, r28
    4434:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <udc_iface_enable>
    4438:	88 23       	and	r24, r24
    443a:	09 f4       	brne	.+2      	; 0x443e <udc_process_setup+0x344>
    443c:	64 c0       	rjmp	.+200    	; 0x4506 <udc_process_setup+0x40c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    443e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4440:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    4444:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4448:	01 90       	ld	r0, Z+
    444a:	f0 81       	ld	r31, Z
    444c:	e0 2d       	mov	r30, r0
    444e:	84 81       	ldd	r24, Z+4	; 0x04
    4450:	c8 17       	cp	r28, r24
    4452:	70 f3       	brcs	.-36     	; 0x4430 <udc_process_setup+0x336>
    4454:	e4 c0       	rjmp	.+456    	; 0x461e <udc_process_setup+0x524>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4456:	81 30       	cpi	r24, 0x01	; 1
    4458:	f1 f4       	brne	.+60     	; 0x4496 <udc_process_setup+0x39c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    445a:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    445e:	9b 30       	cpi	r25, 0x0B	; 11
    4460:	d1 f4       	brne	.+52     	; 0x4496 <udc_process_setup+0x39c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4462:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4466:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    446a:	89 2b       	or	r24, r25
    446c:	09 f0       	breq	.+2      	; 0x4470 <udc_process_setup+0x376>
    446e:	4b c0       	rjmp	.+150    	; 0x4506 <udc_process_setup+0x40c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4470:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4474:	88 23       	and	r24, r24
    4476:	09 f4       	brne	.+2      	; 0x447a <udc_process_setup+0x380>
    4478:	46 c0       	rjmp	.+140    	; 0x4506 <udc_process_setup+0x40c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    447a:	e1 ed       	ldi	r30, 0xD1	; 209
    447c:	f5 e2       	ldi	r31, 0x25	; 37
    447e:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    4480:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4482:	8c 2f       	mov	r24, r28
    4484:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <udc_iface_disable>
    4488:	88 23       	and	r24, r24
    448a:	e9 f1       	breq	.+122    	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    448c:	6d 2f       	mov	r22, r29
    448e:	8c 2f       	mov	r24, r28
    4490:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <udc_iface_enable>
    4494:	36 c0       	rjmp	.+108    	; 0x4502 <udc_process_setup+0x408>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4496:	82 30       	cpi	r24, 0x02	; 2
    4498:	b1 f5       	brne	.+108    	; 0x4506 <udc_process_setup+0x40c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    449a:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    449e:	81 30       	cpi	r24, 0x01	; 1
    44a0:	19 f0       	breq	.+6      	; 0x44a8 <udc_process_setup+0x3ae>
    44a2:	83 30       	cpi	r24, 0x03	; 3
    44a4:	91 f0       	breq	.+36     	; 0x44ca <udc_process_setup+0x3d0>
    44a6:	2c c0       	rjmp	.+88     	; 0x4500 <udc_process_setup+0x406>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    44a8:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    44ac:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    44b0:	89 2b       	or	r24, r25
    44b2:	49 f5       	brne	.+82     	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44b4:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    44b8:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    44bc:	89 2b       	or	r24, r25
    44be:	19 f5       	brne	.+70     	; 0x4506 <udc_process_setup+0x40c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44c0:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    44c4:	0e 94 de 27 	call	0x4fbc	; 0x4fbc <udd_ep_clear_halt>
    44c8:	1c c0       	rjmp	.+56     	; 0x4502 <udc_process_setup+0x408>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    44ca:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    44ce:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    44d2:	89 2b       	or	r24, r25
    44d4:	c1 f4       	brne	.+48     	; 0x4506 <udc_process_setup+0x40c>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44d6:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    44da:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    44de:	89 2b       	or	r24, r25
    44e0:	91 f4       	brne	.+36     	; 0x4506 <udc_process_setup+0x40c>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    44e2:	c1 ed       	ldi	r28, 0xD1	; 209
    44e4:	d5 e2       	ldi	r29, 0x25	; 37
    44e6:	8c 81       	ldd	r24, Y+4	; 0x04
    44e8:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44ec:	8c 81       	ldd	r24, Y+4	; 0x04
    44ee:	0e 94 53 29 	call	0x52a6	; 0x52a6 <udd_ep_set_halt>
    44f2:	07 c0       	rjmp	.+14     	; 0x4502 <udc_process_setup+0x408>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	05 c0       	rjmp	.+10     	; 0x4502 <udc_process_setup+0x408>
				break;
			}
		}
#endif
	}
	return false;
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	03 c0       	rjmp	.+6      	; 0x4502 <udc_process_setup+0x408>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    44fc:	80 e0       	ldi	r24, 0x00	; 0
    44fe:	01 c0       	rjmp	.+2      	; 0x4502 <udc_process_setup+0x408>
				break;
			}
		}
#endif
	}
	return false;
    4500:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    4502:	81 11       	cpse	r24, r1
    4504:	8d c0       	rjmp	.+282    	; 0x4620 <udc_process_setup+0x526>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4506:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    450a:	8f 71       	andi	r24, 0x1F	; 31
    450c:	81 30       	cpi	r24, 0x01	; 1
    450e:	81 f5       	brne	.+96     	; 0x4570 <udc_process_setup+0x476>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4510:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4514:	88 23       	and	r24, r24
    4516:	61 f1       	breq	.+88     	; 0x4570 <udc_process_setup+0x476>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4518:	00 91 d5 25 	lds	r16, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    451c:	10 91 d6 25 	lds	r17, 0x25D6	; 0x8025d6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4520:	c0 91 88 24 	lds	r28, 0x2488	; 0x802488 <udc_ptr_conf>
    4524:	d0 91 89 24 	lds	r29, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4528:	e8 81       	ld	r30, Y
    452a:	f9 81       	ldd	r31, Y+1	; 0x01
    452c:	84 81       	ldd	r24, Z+4	; 0x04
    452e:	08 17       	cp	r16, r24
    4530:	f8 f4       	brcc	.+62     	; 0x4570 <udc_process_setup+0x476>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4532:	60 e0       	ldi	r22, 0x00	; 0
    4534:	80 2f       	mov	r24, r16
    4536:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    453a:	88 23       	and	r24, r24
    453c:	c9 f0       	breq	.+50     	; 0x4570 <udc_process_setup+0x476>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    453e:	f8 01       	movw	r30, r16
    4540:	ff 27       	eor	r31, r31
    4542:	cf 01       	movw	r24, r30
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	ea 81       	ldd	r30, Y+2	; 0x02
    454a:	fb 81       	ldd	r31, Y+3	; 0x03
    454c:	e8 0f       	add	r30, r24
    454e:	f9 1f       	adc	r31, r25
    4550:	c0 81       	ld	r28, Z
    4552:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4554:	ee 81       	ldd	r30, Y+6	; 0x06
    4556:	ff 81       	ldd	r31, Y+7	; 0x07
    4558:	19 95       	eicall
    455a:	68 2f       	mov	r22, r24
    455c:	80 2f       	mov	r24, r16
    455e:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    4562:	88 23       	and	r24, r24
    4564:	29 f0       	breq	.+10     	; 0x4570 <udc_process_setup+0x476>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4566:	ec 81       	ldd	r30, Y+4	; 0x04
    4568:	fd 81       	ldd	r31, Y+5	; 0x05
    456a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    456c:	81 11       	cpse	r24, r1
    456e:	58 c0       	rjmp	.+176    	; 0x4620 <udc_process_setup+0x526>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4570:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    4574:	8f 71       	andi	r24, 0x1F	; 31
    4576:	82 30       	cpi	r24, 0x02	; 2
    4578:	09 f0       	breq	.+2      	; 0x457c <udc_process_setup+0x482>
    457a:	41 c0       	rjmp	.+130    	; 0x45fe <udc_process_setup+0x504>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    457c:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4580:	88 23       	and	r24, r24
    4582:	b9 f1       	breq	.+110    	; 0x45f2 <udc_process_setup+0x4f8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4584:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    4588:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    458c:	ed 91       	ld	r30, X+
    458e:	fc 91       	ld	r31, X
    4590:	11 97       	sbiw	r26, 0x01	; 1
    4592:	84 81       	ldd	r24, Z+4	; 0x04
    4594:	88 23       	and	r24, r24
    4596:	79 f1       	breq	.+94     	; 0x45f6 <udc_process_setup+0x4fc>
    4598:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    459a:	ec 2f       	mov	r30, r28
    459c:	f0 e0       	ldi	r31, 0x00	; 0
    459e:	ee 0f       	add	r30, r30
    45a0:	ff 1f       	adc	r31, r31
    45a2:	12 96       	adiw	r26, 0x02	; 2
    45a4:	8d 91       	ld	r24, X+
    45a6:	9c 91       	ld	r25, X
    45a8:	13 97       	sbiw	r26, 0x03	; 3
    45aa:	e8 0f       	add	r30, r24
    45ac:	f9 1f       	adc	r31, r25
    45ae:	00 81       	ld	r16, Z
    45b0:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    45b2:	d8 01       	movw	r26, r16
    45b4:	16 96       	adiw	r26, 0x06	; 6
    45b6:	ed 91       	ld	r30, X+
    45b8:	fc 91       	ld	r31, X
    45ba:	17 97       	sbiw	r26, 0x07	; 7
    45bc:	19 95       	eicall
    45be:	68 2f       	mov	r22, r24
    45c0:	8c 2f       	mov	r24, r28
    45c2:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <udc_update_iface_desc>
    45c6:	88 23       	and	r24, r24
    45c8:	59 f1       	breq	.+86     	; 0x4620 <udc_process_setup+0x526>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    45ca:	d8 01       	movw	r26, r16
    45cc:	14 96       	adiw	r26, 0x04	; 4
    45ce:	ed 91       	ld	r30, X+
    45d0:	fc 91       	ld	r31, X
    45d2:	15 97       	sbiw	r26, 0x05	; 5
    45d4:	19 95       	eicall
    45d6:	81 11       	cpse	r24, r1
    45d8:	23 c0       	rjmp	.+70     	; 0x4620 <udc_process_setup+0x526>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    45da:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    45dc:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    45e0:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    45e4:	ed 91       	ld	r30, X+
    45e6:	fc 91       	ld	r31, X
    45e8:	11 97       	sbiw	r26, 0x01	; 1
    45ea:	94 81       	ldd	r25, Z+4	; 0x04
    45ec:	c9 17       	cp	r28, r25
    45ee:	a8 f2       	brcs	.-86     	; 0x459a <udc_process_setup+0x4a0>
    45f0:	17 c0       	rjmp	.+46     	; 0x4620 <udc_process_setup+0x526>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	15 c0       	rjmp	.+42     	; 0x4620 <udc_process_setup+0x526>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	13 c0       	rjmp	.+38     	; 0x4620 <udc_process_setup+0x526>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	11 c0       	rjmp	.+34     	; 0x4620 <udc_process_setup+0x526>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	0f c0       	rjmp	.+30     	; 0x4620 <udc_process_setup+0x526>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4602:	98 2f       	mov	r25, r24
    4604:	90 76       	andi	r25, 0x60	; 96
    4606:	09 f0       	breq	.+2      	; 0x460a <udc_process_setup+0x510>
    4608:	7e cf       	rjmp	.-260    	; 0x4506 <udc_process_setup+0x40c>
    460a:	90 cd       	rjmp	.-1248   	; 0x412c <udc_process_setup+0x32>
    460c:	98 2f       	mov	r25, r24
    460e:	90 76       	andi	r25, 0x60	; 96
    4610:	09 f0       	breq	.+2      	; 0x4614 <udc_process_setup+0x51a>
    4612:	79 cf       	rjmp	.-270    	; 0x4506 <udc_process_setup+0x40c>
    4614:	97 ce       	rjmp	.-722    	; 0x4344 <udc_process_setup+0x24a>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    4616:	2d e0       	ldi	r18, 0x0D	; 13
		str = udc_string_product_name;
    4618:	8a e3       	ldi	r24, 0x3A	; 58
    461a:	90 e2       	ldi	r25, 0x20	; 32
    461c:	07 ce       	rjmp	.-1010   	; 0x422c <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    461e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    4620:	df 91       	pop	r29
    4622:	cf 91       	pop	r28
    4624:	1f 91       	pop	r17
    4626:	0f 91       	pop	r16
    4628:	08 95       	ret

0000462a <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	1f 92       	push	r1
    4630:	1f 92       	push	r1
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
	if (!b_idle && udd_b_idle) {
    4636:	81 11       	cpse	r24, r1
    4638:	26 c0       	rjmp	.+76     	; 0x4686 <udd_sleep_mode+0x5c>
    463a:	90 91 d0 25 	lds	r25, 0x25D0	; 0x8025d0 <udd_b_idle>
    463e:	99 23       	and	r25, r25
    4640:	f9 f0       	breq	.+62     	; 0x4680 <udd_sleep_mode+0x56>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4642:	90 91 e2 25 	lds	r25, 0x25E2	; 0x8025e2 <sleepmgr_locks+0x1>
    4646:	91 11       	cpse	r25, r1
    4648:	01 c0       	rjmp	.+2      	; 0x464c <udd_sleep_mode+0x22>
    464a:	ff cf       	rjmp	.-2      	; 0x464a <udd_sleep_mode+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    464c:	9f b7       	in	r25, 0x3f	; 63
    464e:	9a 83       	std	Y+2, r25	; 0x02
	cpu_irq_disable();
    4650:	f8 94       	cli
	return flags;
    4652:	2a 81       	ldd	r18, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4654:	e1 ee       	ldi	r30, 0xE1	; 225
    4656:	f5 e2       	ldi	r31, 0x25	; 37
    4658:	91 81       	ldd	r25, Z+1	; 0x01
    465a:	91 50       	subi	r25, 0x01	; 1
    465c:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    465e:	2f bf       	out	0x3f, r18	; 63
    4660:	0f c0       	rjmp	.+30     	; 0x4680 <udd_sleep_mode+0x56>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4662:	90 91 e2 25 	lds	r25, 0x25E2	; 0x8025e2 <sleepmgr_locks+0x1>
    4666:	9f 3f       	cpi	r25, 0xFF	; 255
    4668:	09 f4       	brne	.+2      	; 0x466c <udd_sleep_mode+0x42>
    466a:	ff cf       	rjmp	.-2      	; 0x466a <udd_sleep_mode+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    466c:	9f b7       	in	r25, 0x3f	; 63
    466e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    4670:	f8 94       	cli
	return flags;
    4672:	29 81       	ldd	r18, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4674:	e1 ee       	ldi	r30, 0xE1	; 225
    4676:	f5 e2       	ldi	r31, 0x25	; 37
    4678:	91 81       	ldd	r25, Z+1	; 0x01
    467a:	9f 5f       	subi	r25, 0xFF	; 255
    467c:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    467e:	2f bf       	out	0x3f, r18	; 63
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    4680:	80 93 d0 25 	sts	0x25D0, r24	; 0x8025d0 <udd_b_idle>
    4684:	05 c0       	rjmp	.+10     	; 0x4690 <udd_sleep_mode+0x66>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
    4686:	90 91 d0 25 	lds	r25, 0x25D0	; 0x8025d0 <udd_b_idle>
    468a:	99 23       	and	r25, r25
    468c:	51 f3       	breq	.-44     	; 0x4662 <udd_sleep_mode+0x38>
    468e:	f8 cf       	rjmp	.-16     	; 0x4680 <udd_sleep_mode+0x56>
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	df 91       	pop	r29
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

0000469a <udd_ctrl_init>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
    469a:	0f 93       	push	r16
	udd_disable_overflow_interrupt();
    469c:	e8 ec       	ldi	r30, 0xC8	; 200
    469e:	f4 e0       	ldi	r31, 0x04	; 4
    46a0:	80 81       	ld	r24, Z
    46a2:	8f 7d       	andi	r24, 0xDF	; 223
    46a4:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    46a6:	80 81       	ld	r24, Z
    46a8:	8f 7d       	andi	r24, 0xDF	; 223
    46aa:	80 83       	st	Z, r24

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    46ac:	e8 e9       	ldi	r30, 0x98	; 152
    46ae:	f5 e2       	ldi	r31, 0x25	; 37
    46b0:	02 e0       	ldi	r16, 0x02	; 2
    46b2:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    46b4:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <udd_sram+0x1a>
    46b8:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <udd_sram+0x1b>
	udd_control_in_ack_tc();
    46bc:	00 e2       	ldi	r16, 0x20	; 32
    46be:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    46c0:	00 e4       	ldi	r16, 0x40	; 64
    46c2:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    46c4:	e0 e9       	ldi	r30, 0x90	; 144
    46c6:	f5 e2       	ldi	r31, 0x25	; 37
    46c8:	00 e4       	ldi	r16, 0x40	; 64
    46ca:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    46cc:	e1 ed       	ldi	r30, 0xD1	; 209
    46ce:	f5 e2       	ldi	r31, 0x25	; 37
    46d0:	14 86       	std	Z+12, r1	; 0x0c
    46d2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    46d4:	16 86       	std	Z+14, r1	; 0x0e
    46d6:	17 86       	std	Z+15, r1	; 0x0f
	udd_g_ctrlreq.payload_size = 0;
    46d8:	12 86       	std	Z+10, r1	; 0x0a
    46da:	13 86       	std	Z+11, r1	; 0x0b
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    46dc:	10 92 79 25 	sts	0x2579, r1	; 0x802579 <udd_ep_control_state>
}
    46e0:	0f 91       	pop	r16
    46e2:	08 95       	ret

000046e4 <udd_ctrl_stall_data>:
		udd_control_out_enable_stall();
	}
}

static void udd_ctrl_stall_data(void)
{
    46e4:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    46e6:	85 e0       	ldi	r24, 0x05	; 5
    46e8:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	udd_control_in_enable_stall();
    46ec:	e9 e9       	ldi	r30, 0x99	; 153
    46ee:	f5 e2       	ldi	r31, 0x25	; 37
    46f0:	04 e0       	ldi	r16, 0x04	; 4
    46f2:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    46f4:	e1 e9       	ldi	r30, 0x91	; 145
    46f6:	f5 e2       	ldi	r31, 0x25	; 37
    46f8:	04 e0       	ldi	r16, 0x04	; 4
    46fa:	05 93       	las	Z, r16
}
    46fc:	0f 91       	pop	r16
    46fe:	08 95       	ret

00004700 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    4700:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    4708:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <udd_sram+0x1a>
    470c:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <udd_sram+0x1b>
	udd_control_in_clear_NACK0();
    4710:	e8 e9       	ldi	r30, 0x98	; 152
    4712:	f5 e2       	ldi	r31, 0x25	; 37
    4714:	02 e0       	ldi	r16, 0x02	; 2
    4716:	06 93       	lac	Z, r16
}
    4718:	0f 91       	pop	r16
    471a:	08 95       	ret

0000471c <udd_ctrl_endofrequest>:
}

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    471c:	e0 91 dd 25 	lds	r30, 0x25DD	; 0x8025dd <udd_g_ctrlreq+0xc>
    4720:	f0 91 de 25 	lds	r31, 0x25DE	; 0x8025de <udd_g_ctrlreq+0xd>
    4724:	30 97       	sbiw	r30, 0x00	; 0
    4726:	09 f0       	breq	.+2      	; 0x472a <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    4728:	19 95       	eicall
    472a:	08 95       	ret

0000472c <udd_ctrl_in_sent>:
		udd_control_out_ack_tc();
	}
}

static void udd_ctrl_in_sent(void)
{
    472c:	0f 93       	push	r16
    472e:	cf 93       	push	r28
    4730:	df 93       	push	r29
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4732:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    4736:	83 30       	cpi	r24, 0x03	; 3
    4738:	29 f4       	brne	.+10     	; 0x4744 <udd_ctrl_in_sent+0x18>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    473a:	0e 94 8e 23 	call	0x471c	; 0x471c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    473e:	0e 94 4d 23 	call	0x469a	; 0x469a <udd_ctrl_init>
		return;
    4742:	5e c0       	rjmp	.+188    	; 0x4800 <udd_ctrl_in_sent+0xd4>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4744:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    4748:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    474c:	c0 91 db 25 	lds	r28, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    4750:	d0 91 dc 25 	lds	r29, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
    4754:	c8 1b       	sub	r28, r24
    4756:	d9 0b       	sbc	r29, r25
	if (0 == nb_remain) {
    4758:	71 f5       	brne	.+92     	; 0x47b6 <udd_ctrl_in_sent+0x8a>
		// Update number of total data sending by previous playload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    475a:	20 91 77 25 	lds	r18, 0x2577	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    475e:	30 91 78 25 	lds	r19, 0x2578	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
    4762:	82 0f       	add	r24, r18
    4764:	93 1f       	adc	r25, r19
    4766:	80 93 77 25 	sts	0x2577, r24	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    476a:	90 93 78 25 	sts	0x2578, r25	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    476e:	20 91 d7 25 	lds	r18, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4772:	30 91 d8 25 	lds	r19, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4776:	82 17       	cp	r24, r18
    4778:	93 07       	cpc	r25, r19
    477a:	21 f0       	breq	.+8      	; 0x4784 <udd_ctrl_in_sent+0x58>
				|| b_shortpacket) {
    477c:	80 91 90 24 	lds	r24, 0x2490	; 0x802490 <b_shortpacket.5427>
    4780:	88 23       	and	r24, r24
    4782:	41 f0       	breq	.+16     	; 0x4794 <udd_ctrl_in_sent+0x68>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4784:	84 e0       	ldi	r24, 0x04	; 4
    4786:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    478a:	e0 e9       	ldi	r30, 0x90	; 144
    478c:	f5 e2       	ldi	r31, 0x25	; 37
    478e:	02 e0       	ldi	r16, 0x02	; 2
    4790:	06 93       	lac	Z, r16
    4792:	36 c0       	rjmp	.+108    	; 0x4800 <udd_ctrl_in_sent+0xd4>
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
    4794:	e0 91 df 25 	lds	r30, 0x25DF	; 0x8025df <udd_g_ctrlreq+0xe>
    4798:	f0 91 e0 25 	lds	r31, 0x25E0	; 0x8025e0 <udd_g_ctrlreq+0xf>
    479c:	30 97       	sbiw	r30, 0x00	; 0
    479e:	99 f0       	breq	.+38     	; 0x47c6 <udd_ctrl_in_sent+0x9a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    47a0:	19 95       	eicall
    47a2:	88 23       	and	r24, r24
    47a4:	81 f0       	breq	.+32     	; 0x47c6 <udd_ctrl_in_sent+0x9a>
			// Underrun then send zlp on IN
			// nb_remain == 0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
    47a6:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    47aa:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
			nb_remain = udd_g_ctrlreq.payload_size;
    47ae:	c0 91 db 25 	lds	r28, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    47b2:	d0 91 dc 25 	lds	r29, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    47b6:	c0 34       	cpi	r28, 0x40	; 64
    47b8:	d1 05       	cpc	r29, r1
    47ba:	28 f0       	brcs	.+10     	; 0x47c6 <udd_ctrl_in_sent+0x9a>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    47bc:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <b_shortpacket.5427>
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    47c0:	c0 e4       	ldi	r28, 0x40	; 64
    47c2:	d0 e0       	ldi	r29, 0x00	; 0
    47c4:	03 c0       	rjmp	.+6      	; 0x47cc <udd_ctrl_in_sent+0xa0>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	80 93 90 24 	sts	0x2490, r24	; 0x802490 <b_shortpacket.5427>
	}
	udd_control_in_set_bytecnt(nb_remain);
    47cc:	e0 e8       	ldi	r30, 0x80	; 128
    47ce:	f5 e2       	ldi	r31, 0x25	; 37
    47d0:	c2 8f       	std	Z+26, r28	; 0x1a
    47d2:	d3 8f       	std	Z+27, r29	; 0x1b

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    47d4:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    47d8:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    47dc:	20 91 d9 25 	lds	r18, 0x25D9	; 0x8025d9 <udd_g_ctrlreq+0x8>
    47e0:	30 91 da 25 	lds	r19, 0x25DA	; 0x8025da <udd_g_ctrlreq+0x9>
    47e4:	28 0f       	add	r18, r24
    47e6:	39 1f       	adc	r19, r25
    47e8:	24 8f       	std	Z+28, r18	; 0x1c
    47ea:	35 8f       	std	Z+29, r19	; 0x1d
	udd_ctrl_payload_nb_trans += nb_remain;
    47ec:	c8 0f       	add	r28, r24
    47ee:	d9 1f       	adc	r29, r25
    47f0:	c0 93 75 25 	sts	0x2575, r28	; 0x802575 <udd_ctrl_payload_nb_trans>
    47f4:	d0 93 76 25 	sts	0x2576, r29	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    47f8:	e8 e9       	ldi	r30, 0x98	; 152
    47fa:	f5 e2       	ldi	r31, 0x25	; 37
    47fc:	02 e0       	ldi	r16, 0x02	; 2
    47fe:	06 93       	lac	Z, r16
}
    4800:	df 91       	pop	r29
    4802:	cf 91       	pop	r28
    4804:	0f 91       	pop	r16
    4806:	08 95       	ret

00004808 <udd_ep_get_size>:
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
    4808:	fc 01       	movw	r30, r24
    480a:	81 81       	ldd	r24, Z+1	; 0x01
    480c:	e8 2f       	mov	r30, r24
    480e:	e7 70       	andi	r30, 0x07	; 7
    4810:	8e 2f       	mov	r24, r30
    4812:	90 e0       	ldi	r25, 0x00	; 0
    4814:	fc 01       	movw	r30, r24
    4816:	31 97       	sbiw	r30, 0x01	; 1
    4818:	e7 30       	cpi	r30, 0x07	; 7
    481a:	f1 05       	cpc	r31, r1
    481c:	d8 f4       	brcc	.+54     	; 0x4854 <udd_ep_get_size+0x4c>
    481e:	88 27       	eor	r24, r24
    4820:	e6 52       	subi	r30, 0x26	; 38
    4822:	fe 4f       	sbci	r31, 0xFE	; 254
    4824:	8f 4f       	sbci	r24, 0xFF	; 255
    4826:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <__tablejump2__>
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
	case USB_EP_BUFSIZE_16_gc:
		return 16;
    482a:	80 e1       	ldi	r24, 0x10	; 16
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	08 95       	ret
	case USB_EP_BUFSIZE_32_gc:
		return 32;
    4830:	80 e2       	ldi	r24, 0x20	; 32
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	08 95       	ret
	case USB_EP_BUFSIZE_64_gc:
		return 64;
    4836:	80 e4       	ldi	r24, 0x40	; 64
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	08 95       	ret
	case USB_EP_BUFSIZE_128_gc:
		return 128;
    483c:	80 e8       	ldi	r24, 0x80	; 128
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	08 95       	ret
	case USB_EP_BUFSIZE_256_gc:
		return 256;
    4842:	80 e0       	ldi	r24, 0x00	; 0
    4844:	91 e0       	ldi	r25, 0x01	; 1
    4846:	08 95       	ret
	case USB_EP_BUFSIZE_512_gc:
		return 512;
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	92 e0       	ldi	r25, 0x02	; 2
    484c:	08 95       	ret
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
    484e:	8f ef       	ldi	r24, 0xFF	; 255
    4850:	93 e0       	ldi	r25, 0x03	; 3
    4852:	08 95       	ret
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
    4854:	88 e0       	ldi	r24, 0x08	; 8
    4856:	90 e0       	ldi	r25, 0x00	; 0
	case USB_EP_BUFSIZE_512_gc:
		return 512;
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
	}
}
    4858:	08 95       	ret

0000485a <udd_ep_get_job>:

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    485a:	28 2f       	mov	r18, r24
    485c:	2f 70       	andi	r18, 0x0F	; 15
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	22 0f       	add	r18, r18
    4862:	33 1f       	adc	r19, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    4864:	08 2e       	mov	r0, r24
    4866:	00 0c       	add	r0, r0
    4868:	99 0b       	sbc	r25, r25
    486a:	88 27       	eor	r24, r24
    486c:	99 0f       	add	r25, r25
    486e:	88 1f       	adc	r24, r24
    4870:	99 27       	eor	r25, r25
	}
}

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    4872:	82 0f       	add	r24, r18
    4874:	93 1f       	adc	r25, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    4876:	02 97       	sbiw	r24, 0x02	; 2
	}
}

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    4878:	9c 01       	movw	r18, r24
    487a:	22 0f       	add	r18, r18
    487c:	33 1f       	adc	r19, r19
    487e:	22 0f       	add	r18, r18
    4880:	33 1f       	adc	r19, r19
    4882:	22 0f       	add	r18, r18
    4884:	33 1f       	adc	r19, r19
    4886:	82 0f       	add	r24, r18
    4888:	93 1f       	adc	r25, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    488a:	8f 5e       	subi	r24, 0xEF	; 239
    488c:	9a 4d       	sbci	r25, 0xDA	; 218
    488e:	08 95       	ret

00004890 <udd_ctrl_interrupt_tc_setup>:
	}
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
    4890:	0f 93       	push	r16
    4892:	cf 93       	push	r28
	if (!udd_is_setup_event()) {
    4894:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    4898:	80 ff       	sbrs	r24, 0
    489a:	6a c0       	rjmp	.+212    	; 0x4970 <udd_ctrl_interrupt_tc_setup+0xe0>
		return false;
	}
	udd_ack_setup_event();
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    48a2:	e0 e9       	ldi	r30, 0x90	; 144
    48a4:	f5 e2       	ldi	r31, 0x25	; 37
    48a6:	00 e8       	ldi	r16, 0x80	; 128
    48a8:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    48aa:	e8 e9       	ldi	r30, 0x98	; 152
    48ac:	f5 e2       	ldi	r31, 0x25	; 37
    48ae:	00 e8       	ldi	r16, 0x80	; 128
    48b0:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    48b2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>

	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
    48b6:	e0 e9       	ldi	r30, 0x90	; 144
    48b8:	f5 e2       	ldi	r31, 0x25	; 37
    48ba:	00 e1       	ldi	r16, 0x10	; 16
    48bc:	06 93       	lac	Z, r16
	udd_ep_control_state = UDD_EPCTRL_SETUP;
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    48be:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    48c2:	88 23       	and	r24, r24
    48c4:	39 f0       	breq	.+14     	; 0x48d4 <udd_ctrl_interrupt_tc_setup+0x44>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
    48c6:	83 50       	subi	r24, 0x03	; 3
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    48c8:	82 30       	cpi	r24, 0x02	; 2
    48ca:	10 f4       	brcc	.+4      	; 0x48d0 <udd_ctrl_interrupt_tc_setup+0x40>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// Accept that ZLP event can be hidden by setup packet event
			// in case of setup packet sending quickly after a ZLP
			udd_ctrl_endofrequest();
    48cc:	0e 94 8e 23 	call	0x471c	; 0x471c <udd_ctrl_endofrequest>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    48d0:	0e 94 4d 23 	call	0x469a	; 0x469a <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    48d4:	80 91 92 25 	lds	r24, 0x2592	; 0x802592 <udd_sram+0x12>
    48d8:	90 91 93 25 	lds	r25, 0x2593	; 0x802593 <udd_sram+0x13>
    48dc:	08 97       	sbiw	r24, 0x08	; 8
    48de:	09 f0       	breq	.+2      	; 0x48e2 <udd_ctrl_interrupt_tc_setup+0x52>
    48e0:	49 c0       	rjmp	.+146    	; 0x4974 <udd_ctrl_interrupt_tc_setup+0xe4>
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    48e2:	88 e0       	ldi	r24, 0x08	; 8
    48e4:	e5 e3       	ldi	r30, 0x35	; 53
    48e6:	f5 e2       	ldi	r31, 0x25	; 37
    48e8:	a1 ed       	ldi	r26, 0xD1	; 209
    48ea:	b5 e2       	ldi	r27, 0x25	; 37
    48ec:	01 90       	ld	r0, Z+
    48ee:	0d 92       	st	X+, r0
    48f0:	8a 95       	dec	r24
    48f2:	e1 f7       	brne	.-8      	; 0x48ec <udd_ctrl_interrupt_tc_setup+0x5c>

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    48f4:	e8 ec       	ldi	r30, 0xC8	; 200
    48f6:	f4 e0       	ldi	r31, 0x04	; 4
    48f8:	80 81       	ld	r24, Z
    48fa:	80 62       	ori	r24, 0x20	; 32
    48fc:	80 83       	st	Z, r24
	udd_enable_underflow_interrupt();
    48fe:	80 81       	ld	r24, Z
    4900:	80 62       	ori	r24, 0x20	; 32
    4902:	80 83       	st	Z, r24

	// Decode setup request
	if (udc_process_setup() == false) {
    4904:	0e 94 7d 20 	call	0x40fa	; 0x40fa <udc_process_setup>
    4908:	c8 2f       	mov	r28, r24
    490a:	81 11       	cpse	r24, r1
    490c:	04 c0       	rjmp	.+8      	; 0x4916 <udd_ctrl_interrupt_tc_setup+0x86>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    490e:	0e 94 72 23 	call	0x46e4	; 0x46e4 <udd_ctrl_stall_data>
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    4912:	c1 e0       	ldi	r28, 0x01	; 1
    4914:	30 c0       	rjmp	.+96     	; 0x4976 <udd_ctrl_interrupt_tc_setup+0xe6>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
		return;
	}

	if (Udd_setup_is_in()) {
    4916:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    491a:	88 23       	and	r24, r24
    491c:	74 f4       	brge	.+28     	; 0x493a <udd_ctrl_interrupt_tc_setup+0xaa>
		udd_ctrl_prev_payload_nb_trans = 0;
    491e:	10 92 77 25 	sts	0x2577, r1	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    4922:	10 92 78 25 	sts	0x2578, r1	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    4926:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    492a:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
		udd_ctrl_in_sent(); // Send first data transfer
    4934:	0e 94 96 23 	call	0x472c	; 0x472c <udd_ctrl_in_sent>
    4938:	1e c0       	rjmp	.+60     	; 0x4976 <udd_ctrl_interrupt_tc_setup+0xe6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    493a:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    493e:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4942:	89 2b       	or	r24, r25
    4944:	19 f4       	brne	.+6      	; 0x494c <udd_ctrl_interrupt_tc_setup+0xbc>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    4946:	0e 94 80 23 	call	0x4700	; 0x4700 <udd_ctrl_send_zlp_in>
    494a:	15 c0       	rjmp	.+42     	; 0x4976 <udd_ctrl_interrupt_tc_setup+0xe6>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    494c:	10 92 77 25 	sts	0x2577, r1	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    4950:	10 92 78 25 	sts	0x2578, r1	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    4954:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    4958:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    495c:	81 e0       	ldi	r24, 0x01	; 1
    495e:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    4962:	e0 e9       	ldi	r30, 0x90	; 144
    4964:	f5 e2       	ldi	r31, 0x25	; 37
    4966:	02 e0       	ldi	r16, 0x02	; 2
    4968:	06 93       	lac	Z, r16
		udd_control_out_ack_tc();
    496a:	00 e2       	ldi	r16, 0x20	; 32
    496c:	06 93       	lac	Z, r16
    496e:	03 c0       	rjmp	.+6      	; 0x4976 <udd_ctrl_interrupt_tc_setup+0xe6>
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
		return false;
    4970:	c0 e0       	ldi	r28, 0x00	; 0
    4972:	01 c0       	rjmp	.+2      	; 0x4976 <udd_ctrl_interrupt_tc_setup+0xe6>
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    4974:	c1 e0       	ldi	r28, 0x01	; 1
}
    4976:	8c 2f       	mov	r24, r28
    4978:	cf 91       	pop	r28
    497a:	0f 91       	pop	r16
    497c:	08 95       	ret

0000497e <udd_ep_trans_complet>:
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
    497e:	8f 92       	push	r8
    4980:	9f 92       	push	r9
    4982:	af 92       	push	r10
    4984:	bf 92       	push	r11
    4986:	df 92       	push	r13
    4988:	ef 92       	push	r14
    498a:	ff 92       	push	r15
    498c:	0f 93       	push	r16
    498e:	1f 93       	push	r17
    4990:	cf 93       	push	r28
    4992:	df 93       	push	r29
    4994:	d8 2e       	mov	r13, r24
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
    4996:	0e 94 2d 24 	call	0x485a	; 0x485a <udd_ep_get_job>
    499a:	8c 01       	movw	r16, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    499c:	bd 2c       	mov	r11, r13
    499e:	bb 1c       	adc	r11, r11
    49a0:	bb 24       	eor	r11, r11
    49a2:	bb 1c       	adc	r11, r11
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    49a4:	cd 2d       	mov	r28, r13
    49a6:	cf 70       	andi	r28, 0x0F	; 15
    49a8:	d0 e0       	ldi	r29, 0x00	; 0
    49aa:	cc 0f       	add	r28, r28
    49ac:	dd 1f       	adc	r29, r29
    49ae:	cb 0d       	add	r28, r11
    49b0:	d1 1d       	adc	r29, r1
    49b2:	ce 01       	movw	r24, r28
    49b4:	88 0f       	add	r24, r24
    49b6:	99 1f       	adc	r25, r25
    49b8:	88 0f       	add	r24, r24
    49ba:	99 1f       	adc	r25, r25
    49bc:	88 0f       	add	r24, r24
    49be:	99 1f       	adc	r25, r25
    49c0:	9c 01       	movw	r18, r24
    49c2:	20 57       	subi	r18, 0x70	; 112
    49c4:	3a 4d       	sbci	r19, 0xDA	; 218
    49c6:	79 01       	movw	r14, r18
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	ep_size = udd_ep_get_size(ep_ctrl);
    49c8:	c9 01       	movw	r24, r18
    49ca:	0e 94 04 24 	call	0x4808	; 0x4808 <udd_ep_get_size>
    49ce:	4c 01       	movw	r8, r24

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    49d0:	bb 20       	and	r11, r11
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <udd_ep_trans_complet+0x58>
    49d4:	72 c0       	rjmp	.+228    	; 0x4aba <udd_ep_trans_complet+0x13c>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    49d6:	fe 01       	movw	r30, r28
    49d8:	ee 0f       	add	r30, r30
    49da:	ff 1f       	adc	r31, r31
    49dc:	ee 0f       	add	r30, r30
    49de:	ff 1f       	adc	r31, r31
    49e0:	ee 0f       	add	r30, r30
    49e2:	ff 1f       	adc	r31, r31
    49e4:	e0 58       	subi	r30, 0x80	; 128
    49e6:	fa 4d       	sbci	r31, 0xDA	; 218
    49e8:	26 89       	ldd	r18, Z+22	; 0x16
    49ea:	37 89       	ldd	r19, Z+23	; 0x17

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    49ec:	d8 01       	movw	r26, r16
    49ee:	15 96       	adiw	r26, 0x05	; 5
    49f0:	8d 91       	ld	r24, X+
    49f2:	9c 91       	ld	r25, X
    49f4:	16 97       	sbiw	r26, 0x06	; 6
    49f6:	82 0f       	add	r24, r18
    49f8:	93 1f       	adc	r25, r19
    49fa:	15 96       	adiw	r26, 0x05	; 5
    49fc:	8d 93       	st	X+, r24
    49fe:	9c 93       	st	X, r25
    4a00:	16 97       	sbiw	r26, 0x06	; 6

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    4a02:	13 96       	adiw	r26, 0x03	; 3
    4a04:	2d 91       	ld	r18, X+
    4a06:	3c 91       	ld	r19, X
    4a08:	14 97       	sbiw	r26, 0x04	; 4
    4a0a:	82 17       	cp	r24, r18
    4a0c:	93 07       	cpc	r25, r19
    4a0e:	09 f4       	brne	.+2      	; 0x4a12 <udd_ep_trans_complet+0x94>
    4a10:	3e c0       	rjmp	.+124    	; 0x4a8e <udd_ep_trans_complet+0x110>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4a12:	28 1b       	sub	r18, r24
    4a14:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4a16:	21 15       	cp	r18, r1
    4a18:	b4 e0       	ldi	r27, 0x04	; 4
    4a1a:	3b 07       	cpc	r19, r27
    4a1c:	40 f0       	brcs	.+16     	; 0x4a2e <udd_ep_trans_complet+0xb0>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
    4a1e:	2f ef       	ldi	r18, 0xFF	; 255
    4a20:	33 e0       	ldi	r19, 0x03	; 3
    4a22:	c9 01       	movw	r24, r18
    4a24:	b4 01       	movw	r22, r8
    4a26:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
		if (ptr_job->nb_trans != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4a2a:	28 1b       	sub	r18, r24
    4a2c:	39 0b       	sbc	r19, r25
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    4a2e:	f8 01       	movw	r30, r16
    4a30:	80 81       	ld	r24, Z
				&& (0==(next_trans % ep_size));
    4a32:	81 ff       	sbrs	r24, 1
    4a34:	0a c0       	rjmp	.+20     	; 0x4a4a <udd_ep_trans_complet+0xcc>
    4a36:	c9 01       	movw	r24, r18
    4a38:	b4 01       	movw	r22, r8
    4a3a:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	89 2b       	or	r24, r25
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <udd_ep_trans_complet+0xc8>
    4a44:	40 e0       	ldi	r20, 0x00	; 0
    4a46:	84 2f       	mov	r24, r20
    4a48:	01 c0       	rjmp	.+2      	; 0x4a4c <udd_ep_trans_complet+0xce>
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    4a4c:	d8 01       	movw	r26, r16
    4a4e:	9c 91       	ld	r25, X
    4a50:	80 fb       	bst	r24, 0
    4a52:	91 f9       	bld	r25, 1
    4a54:	9c 93       	st	X, r25
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4a56:	cc 0f       	add	r28, r28
    4a58:	dd 1f       	adc	r29, r29
    4a5a:	cc 0f       	add	r28, r28
    4a5c:	dd 1f       	adc	r29, r29
    4a5e:	cc 0f       	add	r28, r28
    4a60:	dd 1f       	adc	r29, r29
    4a62:	c0 58       	subi	r28, 0x80	; 128
    4a64:	da 4d       	sbci	r29, 0xDA	; 218
    4a66:	1e 8a       	std	Y+22, r1	; 0x16
    4a68:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    4a6a:	2a 8b       	std	Y+18, r18	; 0x12
    4a6c:	3b 8b       	std	Y+19, r19	; 0x13
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    4a6e:	11 96       	adiw	r26, 0x01	; 1
    4a70:	2d 91       	ld	r18, X+
    4a72:	3c 91       	ld	r19, X
    4a74:	12 97       	sbiw	r26, 0x02	; 2
    4a76:	15 96       	adiw	r26, 0x05	; 5
    4a78:	8d 91       	ld	r24, X+
    4a7a:	9c 91       	ld	r25, X
    4a7c:	16 97       	sbiw	r26, 0x06	; 6
    4a7e:	82 0f       	add	r24, r18
    4a80:	93 1f       	adc	r25, r19
    4a82:	8c 8b       	std	Y+20, r24	; 0x14
    4a84:	9d 8b       	std	Y+21, r25	; 0x15
			udd_endpoint_clear_NACK0(ep_ctrl);
    4a86:	f7 01       	movw	r30, r14
    4a88:	02 e0       	ldi	r16, 0x02	; 2
    4a8a:	06 93       	lac	Z, r16
			return;
    4a8c:	ce c0       	rjmp	.+412    	; 0x4c2a <udd_ep_trans_complet+0x2ac>
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
    4a8e:	d8 01       	movw	r26, r16
    4a90:	8c 91       	ld	r24, X
    4a92:	81 ff       	sbrs	r24, 1
    4a94:	b7 c0       	rjmp	.+366    	; 0x4c04 <udd_ep_trans_complet+0x286>
			ptr_job->b_shortpacket = false;
    4a96:	8d 7f       	andi	r24, 0xFD	; 253
    4a98:	8c 93       	st	X, r24
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4a9a:	cc 0f       	add	r28, r28
    4a9c:	dd 1f       	adc	r29, r29
    4a9e:	cc 0f       	add	r28, r28
    4aa0:	dd 1f       	adc	r29, r29
    4aa2:	cc 0f       	add	r28, r28
    4aa4:	dd 1f       	adc	r29, r29
    4aa6:	c0 58       	subi	r28, 0x80	; 128
    4aa8:	da 4d       	sbci	r29, 0xDA	; 218
    4aaa:	1e 8a       	std	Y+22, r1	; 0x16
    4aac:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    4aae:	1a 8a       	std	Y+18, r1	; 0x12
    4ab0:	1b 8a       	std	Y+19, r1	; 0x13
			udd_endpoint_clear_NACK0(ep_ctrl);
    4ab2:	f7 01       	movw	r30, r14
    4ab4:	02 e0       	ldi	r16, 0x02	; 2
    4ab6:	06 93       	lac	Z, r16
			return;
    4ab8:	b8 c0       	rjmp	.+368    	; 0x4c2a <udd_ep_trans_complet+0x2ac>
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
    4aba:	fe 01       	movw	r30, r28
    4abc:	ee 0f       	add	r30, r30
    4abe:	ff 1f       	adc	r31, r31
    4ac0:	ee 0f       	add	r30, r30
    4ac2:	ff 1f       	adc	r31, r31
    4ac4:	ee 0f       	add	r30, r30
    4ac6:	ff 1f       	adc	r31, r31
    4ac8:	e0 58       	subi	r30, 0x80	; 128
    4aca:	fa 4d       	sbci	r31, 0xDA	; 218
    4acc:	a2 88       	ldd	r10, Z+18	; 0x12
    4ace:	b3 88       	ldd	r11, Z+19	; 0x13

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    4ad0:	d8 01       	movw	r26, r16
    4ad2:	8c 91       	ld	r24, X
    4ad4:	82 ff       	sbrs	r24, 2
    4ad6:	1b c0       	rjmp	.+54     	; 0x4b0e <udd_ep_trans_complet+0x190>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    4ad8:	11 96       	adiw	r26, 0x01	; 1
    4ada:	ed 91       	ld	r30, X+
    4adc:	fc 91       	ld	r31, X
    4ade:	12 97       	sbiw	r26, 0x02	; 2
    4ae0:	15 96       	adiw	r26, 0x05	; 5
    4ae2:	2d 91       	ld	r18, X+
    4ae4:	3c 91       	ld	r19, X
    4ae6:	16 97       	sbiw	r26, 0x06	; 6
    4ae8:	13 96       	adiw	r26, 0x03	; 3
    4aea:	8d 91       	ld	r24, X+
    4aec:	9c 91       	ld	r25, X
    4aee:	14 97       	sbiw	r26, 0x04	; 4
    4af0:	b4 01       	movw	r22, r8
    4af2:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
    4af6:	b0 e4       	ldi	r27, 0x40	; 64
    4af8:	db 9e       	mul	r13, r27
    4afa:	b0 01       	movw	r22, r0
    4afc:	11 24       	eor	r1, r1
    4afe:	6f 5a       	subi	r22, 0xAF	; 175
    4b00:	7b 4d       	sbci	r23, 0xDB	; 219
    4b02:	ac 01       	movw	r20, r24
    4b04:	cf 01       	movw	r24, r30
    4b06:	82 0f       	add	r24, r18
    4b08:	93 1f       	adc	r25, r19
    4b0a:	0e 94 1c 31 	call	0x6238	; 0x6238 <memcpy>
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    4b0e:	f8 01       	movw	r30, r16
    4b10:	25 81       	ldd	r18, Z+5	; 0x05
    4b12:	36 81       	ldd	r19, Z+6	; 0x06
    4b14:	2a 0d       	add	r18, r10
    4b16:	3b 1d       	adc	r19, r11
    4b18:	25 83       	std	Z+5, r18	; 0x05
    4b1a:	36 83       	std	Z+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    4b1c:	83 81       	ldd	r24, Z+3	; 0x03
    4b1e:	94 81       	ldd	r25, Z+4	; 0x04
    4b20:	82 17       	cp	r24, r18
    4b22:	93 07       	cpc	r25, r19
    4b24:	68 f4       	brcc	.+26     	; 0x4b40 <udd_ep_trans_complet+0x1c2>
			ptr_job->nb_trans = ptr_job->buf_size;
    4b26:	85 83       	std	Z+5, r24	; 0x05
    4b28:	96 83       	std	Z+6, r25	; 0x06
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
    4b2a:	cc 0f       	add	r28, r28
    4b2c:	dd 1f       	adc	r29, r29
    4b2e:	cc 0f       	add	r28, r28
    4b30:	dd 1f       	adc	r29, r29
    4b32:	cc 0f       	add	r28, r28
    4b34:	dd 1f       	adc	r29, r29
    4b36:	c0 58       	subi	r28, 0x80	; 128
    4b38:	da 4d       	sbci	r29, 0xDA	; 218
    4b3a:	8e 89       	ldd	r24, Y+22	; 0x16
    4b3c:	9f 89       	ldd	r25, Y+23	; 0x17
    4b3e:	62 c0       	rjmp	.+196    	; 0x4c04 <udd_ep_trans_complet+0x286>
    4b40:	fe 01       	movw	r30, r28
    4b42:	ee 0f       	add	r30, r30
    4b44:	ff 1f       	adc	r31, r31
    4b46:	ee 0f       	add	r30, r30
    4b48:	ff 1f       	adc	r31, r31
    4b4a:	ee 0f       	add	r30, r30
    4b4c:	ff 1f       	adc	r31, r31
    4b4e:	e0 58       	subi	r30, 0x80	; 128
    4b50:	fa 4d       	sbci	r31, 0xDA	; 218
    4b52:	46 89       	ldd	r20, Z+22	; 0x16
    4b54:	57 89       	ldd	r21, Z+23	; 0x17
    4b56:	4a 15       	cp	r20, r10
    4b58:	5b 05       	cpc	r21, r11
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <udd_ep_trans_complet+0x1e0>
    4b5c:	53 c0       	rjmp	.+166    	; 0x4c04 <udd_ep_trans_complet+0x286>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    4b5e:	28 17       	cp	r18, r24
    4b60:	39 07       	cpc	r19, r25
    4b62:	09 f4       	brne	.+2      	; 0x4b66 <udd_ep_trans_complet+0x1e8>
    4b64:	4f c0       	rjmp	.+158    	; 0x4c04 <udd_ep_trans_complet+0x286>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4b66:	ac 01       	movw	r20, r24
    4b68:	42 1b       	sub	r20, r18
    4b6a:	53 0b       	sbc	r21, r19
    4b6c:	9a 01       	movw	r18, r20
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4b6e:	21 15       	cp	r18, r1
    4b70:	54 e0       	ldi	r21, 0x04	; 4
    4b72:	35 07       	cpc	r19, r21
    4b74:	58 f0       	brcs	.+22     	; 0x4b8c <udd_ep_trans_complet+0x20e>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
    4b76:	2f ef       	ldi	r18, 0xFF	; 255
    4b78:	33 e0       	ldi	r19, 0x03	; 3
    4b7a:	c9 01       	movw	r24, r18
    4b7c:	b4 01       	movw	r22, r8
    4b7e:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    4b82:	d9 01       	movw	r26, r18
    4b84:	a8 1b       	sub	r26, r24
    4b86:	b9 0b       	sbc	r27, r25
    4b88:	cd 01       	movw	r24, r26
    4b8a:	08 c0       	rjmp	.+16     	; 0x4b9c <udd_ep_trans_complet+0x21e>
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    4b8c:	c9 01       	movw	r24, r18
    4b8e:	b4 01       	movw	r22, r8
    4b90:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
    4b94:	f9 01       	movw	r30, r18
    4b96:	e8 1b       	sub	r30, r24
    4b98:	f9 0b       	sbc	r31, r25
    4b9a:	cf 01       	movw	r24, r30
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    4b9c:	fe 01       	movw	r30, r28
    4b9e:	ee 0f       	add	r30, r30
    4ba0:	ff 1f       	adc	r31, r31
    4ba2:	ee 0f       	add	r30, r30
    4ba4:	ff 1f       	adc	r31, r31
    4ba6:	ee 0f       	add	r30, r30
    4ba8:	ff 1f       	adc	r31, r31
    4baa:	e0 58       	subi	r30, 0x80	; 128
    4bac:	fa 4d       	sbci	r31, 0xDA	; 218
    4bae:	12 8a       	std	Z+18, r1	; 0x12
    4bb0:	13 8a       	std	Z+19, r1	; 0x13
			if (next_trans < ep_size) {
    4bb2:	88 15       	cp	r24, r8
    4bb4:	99 05       	cpc	r25, r9
    4bb6:	78 f4       	brcc	.+30     	; 0x4bd6 <udd_ep_trans_complet+0x258>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    4bb8:	d8 01       	movw	r26, r16
    4bba:	8c 91       	ld	r24, X
    4bbc:	84 60       	ori	r24, 0x04	; 4
    4bbe:	8c 93       	st	X, r24
				udd_endpoint_set_buf( ep_ctrl,
    4bc0:	b0 e4       	ldi	r27, 0x40	; 64
    4bc2:	db 9e       	mul	r13, r27
    4bc4:	c0 01       	movw	r24, r0
    4bc6:	11 24       	eor	r1, r1
    4bc8:	8f 5a       	subi	r24, 0xAF	; 175
    4bca:	9b 4d       	sbci	r25, 0xDB	; 219
    4bcc:	84 8b       	std	Z+20, r24	; 0x14
    4bce:	95 8b       	std	Z+21, r25	; 0x15
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    4bd0:	86 8a       	std	Z+22, r8	; 0x16
    4bd2:	97 8a       	std	Z+23, r9	; 0x17
    4bd4:	13 c0       	rjmp	.+38     	; 0x4bfc <udd_ep_trans_complet+0x27e>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    4bd6:	f8 01       	movw	r30, r16
    4bd8:	41 81       	ldd	r20, Z+1	; 0x01
    4bda:	52 81       	ldd	r21, Z+2	; 0x02
    4bdc:	25 81       	ldd	r18, Z+5	; 0x05
    4bde:	36 81       	ldd	r19, Z+6	; 0x06
    4be0:	24 0f       	add	r18, r20
    4be2:	35 1f       	adc	r19, r21
    4be4:	cc 0f       	add	r28, r28
    4be6:	dd 1f       	adc	r29, r29
    4be8:	cc 0f       	add	r28, r28
    4bea:	dd 1f       	adc	r29, r29
    4bec:	cc 0f       	add	r28, r28
    4bee:	dd 1f       	adc	r29, r29
    4bf0:	c0 58       	subi	r28, 0x80	; 128
    4bf2:	da 4d       	sbci	r29, 0xDA	; 218
    4bf4:	2c 8b       	std	Y+20, r18	; 0x14
    4bf6:	3d 8b       	std	Y+21, r19	; 0x15
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    4bf8:	8e 8b       	std	Y+22, r24	; 0x16
    4bfa:	9f 8b       	std	Y+23, r25	; 0x17
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    4bfc:	f7 01       	movw	r30, r14
    4bfe:	02 e0       	ldi	r16, 0x02	; 2
    4c00:	06 93       	lac	Z, r16
			return;
    4c02:	13 c0       	rjmp	.+38     	; 0x4c2a <udd_ep_trans_complet+0x2ac>
		}
	}

	// Job complete then call callback
	if (ptr_job->busy) {
    4c04:	d8 01       	movw	r26, r16
    4c06:	8c 91       	ld	r24, X
    4c08:	80 ff       	sbrs	r24, 0
    4c0a:	0f c0       	rjmp	.+30     	; 0x4c2a <udd_ep_trans_complet+0x2ac>
		ptr_job->busy = false;
    4c0c:	8e 7f       	andi	r24, 0xFE	; 254
    4c0e:	8c 93       	st	X, r24
		if (NULL != ptr_job->call_trans) {
    4c10:	17 96       	adiw	r26, 0x07	; 7
    4c12:	ed 91       	ld	r30, X+
    4c14:	fc 91       	ld	r31, X
    4c16:	18 97       	sbiw	r26, 0x08	; 8
    4c18:	30 97       	sbiw	r30, 0x00	; 0
    4c1a:	39 f0       	breq	.+14     	; 0x4c2a <udd_ep_trans_complet+0x2ac>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    4c1c:	15 96       	adiw	r26, 0x05	; 5
    4c1e:	6d 91       	ld	r22, X+
    4c20:	7c 91       	ld	r23, X
    4c22:	16 97       	sbiw	r26, 0x06	; 6
    4c24:	4d 2d       	mov	r20, r13
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	19 95       	eicall
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
}
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	1f 91       	pop	r17
    4c30:	0f 91       	pop	r16
    4c32:	ff 90       	pop	r15
    4c34:	ef 90       	pop	r14
    4c36:	df 90       	pop	r13
    4c38:	bf 90       	pop	r11
    4c3a:	af 90       	pop	r10
    4c3c:	9f 90       	pop	r9
    4c3e:	8f 90       	pop	r8
    4c40:	08 95       	ret

00004c42 <udd_disable>:
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
    4c42:	1f 93       	push	r17
    4c44:	cf 93       	push	r28
    4c46:	df 93       	push	r29
    4c48:	1f 92       	push	r1
    4c4a:	1f 92       	push	r1
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c50:	8f b7       	in	r24, 0x3f	; 63
    4c52:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4c54:	f8 94       	cli
	return flags;
    4c56:	1a 81       	ldd	r17, Y+2	; 0x02
	irqflags_t flags;
	flags = cpu_irq_save();
	udd_detach_device();
    4c58:	e1 ec       	ldi	r30, 0xC1	; 193
    4c5a:	f4 e0       	ldi	r31, 0x04	; 4
    4c5c:	80 81       	ld	r24, Z
    4c5e:	8e 7f       	andi	r24, 0xFE	; 254
    4c60:	80 83       	st	Z, r24
	// Disable interface
	USB_CTRLA = 0;
    4c62:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	USB_CTRLB = 0;
    4c66:	10 82       	st	Z, r1
	sysclk_disable_usb();
    4c68:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <sysclk_disable_usb>
	udd_sleep_mode(false);
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	0e 94 15 23 	call	0x462a	; 0x462a <udd_sleep_mode>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4c72:	80 91 e6 25 	lds	r24, 0x25E6	; 0x8025e6 <sleepmgr_locks+0x5>
    4c76:	81 11       	cpse	r24, r1
    4c78:	01 c0       	rjmp	.+2      	; 0x4c7c <udd_disable+0x3a>
    4c7a:	ff cf       	rjmp	.-2      	; 0x4c7a <udd_disable+0x38>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c7c:	8f b7       	in	r24, 0x3f	; 63
    4c7e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c80:	f8 94       	cli
	return flags;
    4c82:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4c84:	e1 ee       	ldi	r30, 0xE1	; 225
    4c86:	f5 e2       	ldi	r31, 0x25	; 37
    4c88:	85 81       	ldd	r24, Z+5	; 0x05
    4c8a:	81 50       	subi	r24, 0x01	; 1
    4c8c:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4c8e:	9f bf       	out	0x3f, r25	; 63
    4c90:	1f bf       	out	0x3f, r17	; 63
#ifndef UDD_NO_SLEEP_MGR
	sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif
	cpu_irq_restore(flags);
}
    4c92:	0f 90       	pop	r0
    4c94:	0f 90       	pop	r0
    4c96:	df 91       	pop	r29
    4c98:	cf 91       	pop	r28
    4c9a:	1f 91       	pop	r17
    4c9c:	08 95       	ret

00004c9e <udd_include_vbus_monitoring>:

bool udd_include_vbus_monitoring(void)
{
	return false; // No Vbus monitoring
}
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	08 95       	ret

00004ca2 <udd_attach>:

void udd_attach(void)
{
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	1f 92       	push	r1
    4caa:	cd b7       	in	r28, 0x3d	; 61
    4cac:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4cae:	8f b7       	in	r24, 0x3f	; 63
    4cb0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4cb2:	f8 94       	cli
	return flags;
    4cb4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	0e 94 15 23 	call	0x462a	; 0x462a <udd_sleep_mode>

	udd_ack_suspend_event();
    4cbc:	ea ec       	ldi	r30, 0xCA	; 202
    4cbe:	f4 e0       	ldi	r31, 0x04	; 4
    4cc0:	80 e4       	ldi	r24, 0x40	; 64
    4cc2:	80 83       	st	Z, r24
	udd_ack_resume_event();
    4cc4:	80 e2       	ldi	r24, 0x20	; 32
    4cc6:	80 83       	st	Z, r24
	udd_attach_device();
    4cc8:	e1 ec       	ldi	r30, 0xC1	; 193
    4cca:	f4 e0       	ldi	r31, 0x04	; 4
    4ccc:	80 81       	ld	r24, Z
    4cce:	81 60       	ori	r24, 0x01	; 1
    4cd0:	80 83       	st	Z, r24
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    4cd2:	a9 ec       	ldi	r26, 0xC9	; 201
    4cd4:	b4 e0       	ldi	r27, 0x04	; 4
    4cd6:	8c 91       	ld	r24, X
    4cd8:	82 60       	ori	r24, 0x02	; 2
    4cda:	8c 93       	st	X, r24
	udd_enable_busevt_interrupt();
    4cdc:	e8 ec       	ldi	r30, 0xC8	; 200
    4cde:	f4 e0       	ldi	r31, 0x04	; 4
    4ce0:	80 81       	ld	r24, Z
    4ce2:	80 64       	ori	r24, 0x40	; 64
    4ce4:	80 83       	st	Z, r24
	udd_enable_setup_interrupt();
    4ce6:	8c 91       	ld	r24, X
    4ce8:	81 60       	ori	r24, 0x01	; 1
    4cea:	8c 93       	st	X, r24
	udd_enable_start_of_frame_interrupt();
    4cec:	80 81       	ld	r24, Z
    4cee:	80 68       	ori	r24, 0x80	; 128
    4cf0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4cf2:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
}
    4cf4:	0f 90       	pop	r0
    4cf6:	df 91       	pop	r29
    4cf8:	cf 91       	pop	r28
    4cfa:	1f 91       	pop	r17
    4cfc:	08 95       	ret

00004cfe <udd_enable>:
#endif // (0!=USB_DEVICE_MAX_EP)
//@}


void udd_enable(void)
{
    4cfe:	0f 93       	push	r16
    4d00:	1f 93       	push	r17
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	1f 92       	push	r1
    4d08:	1f 92       	push	r1
    4d0a:	cd b7       	in	r28, 0x3d	; 61
    4d0c:	de b7       	in	r29, 0x3e	; 62
# if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// RC oscillator calibration via USB Start Of Frame is not available
	// in low speed mode.
	// Thus, the calibration is disabled
	// when USB interface start in low speed mode
	DFLLRC32M.CTRL = 0;
    4d0e:	00 e6       	ldi	r16, 0x60	; 96
    4d10:	10 e0       	ldi	r17, 0x00	; 0
    4d12:	f8 01       	movw	r30, r16
    4d14:	10 82       	st	Z, r1
	// The USB hardware need of 6MHz in low speed mode
	sysclk_enable_usb(6);
	udd_set_low_speed();
#else
	// The USB hardware need of 48MHz in full speed mode
	sysclk_enable_usb(48);
    4d16:	80 e3       	ldi	r24, 0x30	; 48
    4d18:	0e 94 2d 2c 	call	0x585a	; 0x585a <sysclk_enable_usb>
	udd_set_full_speed();
    4d1c:	e0 ec       	ldi	r30, 0xC0	; 192
    4d1e:	f4 e0       	ldi	r31, 0x04	; 4
    4d20:	80 81       	ld	r24, Z
    4d22:	80 64       	ori	r24, 0x40	; 64
    4d24:	80 83       	st	Z, r24
// The XMEGA_A1U does not support the RC calibration through Keepalive (Low speed).
#if (!defined USB_DEVICE_LOW_SPEED) || (!XMEGA_A1U)
# ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
#   if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// The SOF calibration can be enabled
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	f8 01       	movw	r30, r16
    4d2a:	80 83       	st	Z, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4d2c:	8f b7       	in	r24, 0x3f	; 63
    4d2e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4d30:	f8 94       	cli
	return flags;
    4d32:	1a 81       	ldd	r17, Y+2	; 0x02

	flags = cpu_irq_save();

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
    4d34:	e0 e8       	ldi	r30, 0x80	; 128
    4d36:	f5 e2       	ldi	r31, 0x25	; 37
    4d38:	11 8a       	std	Z+17, r1	; 0x11
    4d3a:	11 8e       	std	Z+25, r1	; 0x19
    4d3c:	11 a2       	std	Z+33, r1	; 0x21
    4d3e:	11 a6       	std	Z+41, r1	; 0x29
    4d40:	11 aa       	std	Z+49, r1	; 0x31
    4d42:	11 ae       	std	Z+57, r1	; 0x39
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
		udd_ep_job[i].busy = false;
    4d44:	e1 e1       	ldi	r30, 0x11	; 17
    4d46:	f5 e2       	ldi	r31, 0x25	; 37
    4d48:	80 81       	ld	r24, Z
    4d4a:	8e 7f       	andi	r24, 0xFE	; 254
    4d4c:	80 83       	st	Z, r24
    4d4e:	ea e1       	ldi	r30, 0x1A	; 26
    4d50:	f5 e2       	ldi	r31, 0x25	; 37
    4d52:	80 81       	ld	r24, Z
    4d54:	8e 7f       	andi	r24, 0xFE	; 254
    4d56:	80 83       	st	Z, r24
    4d58:	e3 e2       	ldi	r30, 0x23	; 35
    4d5a:	f5 e2       	ldi	r31, 0x25	; 37
    4d5c:	80 81       	ld	r24, Z
    4d5e:	8e 7f       	andi	r24, 0xFE	; 254
    4d60:	80 83       	st	Z, r24
    4d62:	ec e2       	ldi	r30, 0x2C	; 44
    4d64:	f5 e2       	ldi	r31, 0x25	; 37
    4d66:	80 81       	ld	r24, Z
    4d68:	8e 7f       	andi	r24, 0xFE	; 254
    4d6a:	80 83       	st	Z, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4d6c:	6a e1       	ldi	r22, 0x1A	; 26
    4d6e:	70 e0       	ldi	r23, 0x00	; 0
    4d70:	82 e0       	ldi	r24, 0x02	; 2
    4d72:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
#ifdef USB_PAD_USER_CAL0
	USB_CAL0 = USB_PAD_USER_CAL0;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL0));
	if (cal != 0xFF) {
    4d76:	8f 3f       	cpi	r24, 0xFF	; 255
    4d78:	19 f0       	breq	.+6      	; 0x4d80 <udd_enable+0x82>
		USB_CAL0 = cal;
    4d7a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4d7e:	03 c0       	rjmp	.+6      	; 0x4d86 <udd_enable+0x88>
	} else {
		USB_CAL0 = 0x1F;
    4d80:	8f e1       	ldi	r24, 0x1F	; 31
    4d82:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4d86:	6b e1       	ldi	r22, 0x1B	; 27
    4d88:	70 e0       	ldi	r23, 0x00	; 0
    4d8a:	82 e0       	ldi	r24, 0x02	; 2
    4d8c:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
#ifdef USB_PAD_USER_CAL1
	USB_CAL1 = USB_PAD_USER_CAL1;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL1));
	if (cal != 0xFF) {
    4d90:	8f 3f       	cpi	r24, 0xFF	; 255
    4d92:	19 f0       	breq	.+6      	; 0x4d9a <udd_enable+0x9c>
		USB_CAL1 = cal;
    4d94:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4d98:	03 c0       	rjmp	.+6      	; 0x4da0 <udd_enable+0xa2>
	} else {
		USB_CAL1 = 0x1F;
    4d9a:	8f e1       	ldi	r24, 0x1F	; 31
    4d9c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
	}
#endif

	//** Enable USB hardware
	usb_pad_init();
	udd_set_nb_max_ep(USB_DEVICE_MAX_EP);
    4da0:	e0 ec       	ldi	r30, 0xC0	; 192
    4da2:	f4 e0       	ldi	r31, 0x04	; 4
    4da4:	80 81       	ld	r24, Z
    4da6:	82 60       	ori	r24, 0x02	; 2
    4da8:	80 83       	st	Z, r24
	udd_enable_interface();
    4daa:	80 81       	ld	r24, Z
    4dac:	80 68       	ori	r24, 0x80	; 128
    4dae:	80 83       	st	Z, r24
	udd_enable_store_frame_number();
    4db0:	80 81       	ld	r24, Z
    4db2:	80 61       	ori	r24, 0x10	; 16
    4db4:	80 83       	st	Z, r24
#if XMEGA_A1U
	Assert(((uint16_t)(&udd_sram) & 0x0F) == 0); /* check align on 16bit */
#else
	Assert(((uint16_t)(&udd_sram) & 0x01) == 0); /* check align on WORD */
#endif
	udd_set_ep_table_addr(udd_sram.ep_ctrl);
    4db6:	80 e9       	ldi	r24, 0x90	; 144
    4db8:	95 e2       	ldi	r25, 0x25	; 37
    4dba:	86 83       	std	Z+6, r24	; 0x06
    4dbc:	97 83       	std	Z+7, r25	; 0x07
	// Enable TC fifo management
	udd_enable_fifo();
    4dbe:	80 81       	ld	r24, Z
    4dc0:	80 62       	ori	r24, 0x20	; 32
    4dc2:	80 83       	st	Z, r24
	udd_reset_fifo();
    4dc4:	8f ef       	ldi	r24, 0xFF	; 255
    4dc6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    4dca:	e8 ec       	ldi	r30, 0xC8	; 200
    4dcc:	f4 e0       	ldi	r31, 0x04	; 4
    4dce:	80 81       	ld	r24, Z
    4dd0:	81 60       	ori	r24, 0x01	; 1
    4dd2:	80 83       	st	Z, r24

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
    4dd4:	10 92 d0 25 	sts	0x25D0, r1	; 0x8025d0 <udd_b_idle>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4dd8:	80 91 e6 25 	lds	r24, 0x25E6	; 0x8025e6 <sleepmgr_locks+0x5>
    4ddc:	8f 3f       	cpi	r24, 0xFF	; 255
    4dde:	09 f4       	brne	.+2      	; 0x4de2 <udd_enable+0xe4>
    4de0:	ff cf       	rjmp	.-2      	; 0x4de0 <udd_enable+0xe2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4de2:	8f b7       	in	r24, 0x3f	; 63
    4de4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4de6:	f8 94       	cli
	return flags;
    4de8:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4dea:	e1 ee       	ldi	r30, 0xE1	; 225
    4dec:	f5 e2       	ldi	r31, 0x25	; 37
    4dee:	85 81       	ldd	r24, Z+5	; 0x05
    4df0:	8f 5f       	subi	r24, 0xFF	; 255
    4df2:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4df4:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif

#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    4df6:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <udd_attach>
    4dfa:	1f bf       	out	0x3f, r17	; 63
#endif
	cpu_irq_restore(flags);
}
    4dfc:	0f 90       	pop	r0
    4dfe:	0f 90       	pop	r0
    4e00:	df 91       	pop	r29
    4e02:	cf 91       	pop	r28
    4e04:	1f 91       	pop	r17
    4e06:	0f 91       	pop	r16
    4e08:	08 95       	ret

00004e0a <udd_detach>:
}

void udd_detach(void)
{
	// Detach device from the bus
	udd_detach_device();
    4e0a:	e1 ec       	ldi	r30, 0xC1	; 193
    4e0c:	f4 e0       	ldi	r31, 0x04	; 4
    4e0e:	80 81       	ld	r24, Z
    4e10:	8e 7f       	andi	r24, 0xFE	; 254
    4e12:	80 83       	st	Z, r24
    4e14:	08 95       	ret

00004e16 <udd_is_high_speed>:
}

bool udd_is_high_speed(void)
{
	return false;
}
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	08 95       	ret

00004e1a <udd_set_address>:

void udd_set_address(uint8_t address)
{
	udd_set_device_address(address);
    4e1a:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4e1e:	08 95       	ret

00004e20 <udd_getaddress>:
}

uint8_t udd_getaddress(void)
{
	return udd_get_device_address();
    4e20:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
}
    4e24:	08 95       	ret

00004e26 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
	return udd_sram.frame_number;
    4e26:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_sram+0x40>
    4e2a:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_sram+0x41>
}
    4e2e:	08 95       	ret

00004e30 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	08 95       	ret

00004e36 <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
    4e36:	80 91 d0 25 	lds	r24, 0x25D0	; 0x8025d0 <udd_b_idle>
    4e3a:	81 11       	cpse	r24, r1
    4e3c:	0b c0       	rjmp	.+22     	; 0x4e54 <udd_send_remotewakeup+0x1e>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	0e 94 15 23 	call	0x462a	; 0x462a <udd_sleep_mode>
		udd_send_remote_wake_up();
    4e44:	e1 ec       	ldi	r30, 0xC1	; 193
    4e46:	f4 e0       	ldi	r31, 0x04	; 4
    4e48:	80 81       	ld	r24, Z
    4e4a:	8b 7f       	andi	r24, 0xFB	; 251
    4e4c:	80 83       	st	Z, r24
    4e4e:	80 81       	ld	r24, Z
    4e50:	84 60       	ori	r24, 0x04	; 4
    4e52:	80 83       	st	Z, r24
    4e54:	08 95       	ret

00004e56 <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    4e56:	e1 ed       	ldi	r30, 0xD1	; 209
    4e58:	f5 e2       	ldi	r31, 0x25	; 37
    4e5a:	80 87       	std	Z+8, r24	; 0x08
    4e5c:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    4e5e:	62 87       	std	Z+10, r22	; 0x0a
    4e60:	73 87       	std	Z+11, r23	; 0x0b
    4e62:	08 95       	ret

00004e64 <udd_ep_alloc>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4e64:	28 2f       	mov	r18, r24
    4e66:	2f 70       	andi	r18, 0x0F	; 15
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	22 0f       	add	r18, r18
    4e6c:	33 1f       	adc	r19, r19
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    4e6e:	08 2e       	mov	r0, r24
    4e70:	00 0c       	add	r0, r0
    4e72:	99 0b       	sbc	r25, r25
    4e74:	88 27       	eor	r24, r24
    4e76:	99 0f       	add	r25, r25
    4e78:	88 1f       	adc	r24, r24
    4e7a:	99 27       	eor	r25, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4e7c:	82 0f       	add	r24, r18
    4e7e:	93 1f       	adc	r25, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
    4e80:	fc 01       	movw	r30, r24
    4e82:	ee 0f       	add	r30, r30
    4e84:	ff 1f       	adc	r31, r31
    4e86:	ee 0f       	add	r30, r30
    4e88:	ff 1f       	adc	r31, r31
    4e8a:	ee 0f       	add	r30, r30
    4e8c:	ff 1f       	adc	r31, r31
    4e8e:	e0 58       	subi	r30, 0x80	; 128
    4e90:	fa 4d       	sbci	r31, 0xDA	; 218
    4e92:	21 89       	ldd	r18, Z+17	; 0x11
    4e94:	20 7c       	andi	r18, 0xC0	; 192
    4e96:	09 f0       	breq	.+2      	; 0x4e9a <udd_ep_alloc+0x36>
    4e98:	72 c0       	rjmp	.+228    	; 0x4f7e <udd_ep_alloc+0x11a>
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
    4e9a:	63 70       	andi	r22, 0x03	; 3
    4e9c:	61 30       	cpi	r22, 0x01	; 1
    4e9e:	11 f0       	breq	.+4      	; 0x4ea4 <udd_ep_alloc+0x40>
    4ea0:	18 f4       	brcc	.+6      	; 0x4ea8 <udd_ep_alloc+0x44>
    4ea2:	04 c0       	rjmp	.+8      	; 0x4eac <udd_ep_alloc+0x48>
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
    4ea4:	20 ec       	ldi	r18, 0xC0	; 192
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <udd_ep_alloc+0x4a>
		break;
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
    4ea8:	20 e8       	ldi	r18, 0x80	; 128
    4eaa:	01 c0       	rjmp	.+2      	; 0x4eae <udd_ep_alloc+0x4a>

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
    4eac:	20 e4       	ldi	r18, 0x40	; 64
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    4eae:	40 38       	cpi	r20, 0x80	; 128
    4eb0:	51 05       	cpc	r21, r1
    4eb2:	e9 f0       	breq	.+58     	; 0x4eee <udd_ep_alloc+0x8a>
    4eb4:	50 f4       	brcc	.+20     	; 0x4eca <udd_ep_alloc+0x66>
    4eb6:	40 32       	cpi	r20, 0x20	; 32
    4eb8:	51 05       	cpc	r21, r1
    4eba:	a9 f0       	breq	.+42     	; 0x4ee6 <udd_ep_alloc+0x82>
    4ebc:	40 34       	cpi	r20, 0x40	; 64
    4ebe:	51 05       	cpc	r21, r1
    4ec0:	a1 f0       	breq	.+40     	; 0x4eea <udd_ep_alloc+0x86>
    4ec2:	40 31       	cpi	r20, 0x10	; 16
    4ec4:	51 05       	cpc	r21, r1
    4ec6:	d9 f4       	brne	.+54     	; 0x4efe <udd_ep_alloc+0x9a>
    4ec8:	0c c0       	rjmp	.+24     	; 0x4ee2 <udd_ep_alloc+0x7e>
    4eca:	41 15       	cp	r20, r1
    4ecc:	32 e0       	ldi	r19, 0x02	; 2
    4ece:	53 07       	cpc	r21, r19
    4ed0:	91 f0       	breq	.+36     	; 0x4ef6 <udd_ep_alloc+0x92>
    4ed2:	4f 3f       	cpi	r20, 0xFF	; 255
    4ed4:	33 e0       	ldi	r19, 0x03	; 3
    4ed6:	53 07       	cpc	r21, r19
    4ed8:	81 f0       	breq	.+32     	; 0x4efa <udd_ep_alloc+0x96>
    4eda:	41 15       	cp	r20, r1
    4edc:	51 40       	sbci	r21, 0x01	; 1
    4ede:	79 f4       	brne	.+30     	; 0x4efe <udd_ep_alloc+0x9a>
    4ee0:	08 c0       	rjmp	.+16     	; 0x4ef2 <udd_ep_alloc+0x8e>
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
    4ee2:	41 e0       	ldi	r20, 0x01	; 1
    4ee4:	0d c0       	rjmp	.+26     	; 0x4f00 <udd_ep_alloc+0x9c>
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    4ee6:	42 e0       	ldi	r20, 0x02	; 2
    4ee8:	0b c0       	rjmp	.+22     	; 0x4f00 <udd_ep_alloc+0x9c>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    4eea:	43 e0       	ldi	r20, 0x03	; 3
    4eec:	09 c0       	rjmp	.+18     	; 0x4f00 <udd_ep_alloc+0x9c>
		break;
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
    4eee:	44 e0       	ldi	r20, 0x04	; 4
    4ef0:	07 c0       	rjmp	.+14     	; 0x4f00 <udd_ep_alloc+0x9c>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    4ef2:	45 e0       	ldi	r20, 0x05	; 5
    4ef4:	05 c0       	rjmp	.+10     	; 0x4f00 <udd_ep_alloc+0x9c>
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    4ef6:	46 e0       	ldi	r20, 0x06	; 6
    4ef8:	03 c0       	rjmp	.+6      	; 0x4f00 <udd_ep_alloc+0x9c>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    4efa:	47 e0       	ldi	r20, 0x07	; 7
    4efc:	01 c0       	rjmp	.+2      	; 0x4f00 <udd_ep_alloc+0x9c>
	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
    4efe:	40 e0       	ldi	r20, 0x00	; 0
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4f00:	fc 01       	movw	r30, r24
    4f02:	ee 0f       	add	r30, r30
    4f04:	ff 1f       	adc	r31, r31
    4f06:	ee 0f       	add	r30, r30
    4f08:	ff 1f       	adc	r31, r31
    4f0a:	ee 0f       	add	r30, r30
    4f0c:	ff 1f       	adc	r31, r31
    4f0e:	e0 58       	subi	r30, 0x80	; 128
    4f10:	fa 4d       	sbci	r31, 0xDA	; 218
    4f12:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    4f14:	dc 01       	movw	r26, r24
    4f16:	aa 0f       	add	r26, r26
    4f18:	bb 1f       	adc	r27, r27
    4f1a:	aa 0f       	add	r26, r26
    4f1c:	bb 1f       	adc	r27, r27
    4f1e:	aa 0f       	add	r26, r26
    4f20:	bb 1f       	adc	r27, r27
    4f22:	a0 57       	subi	r26, 0x70	; 112
    4f24:	ba 4d       	sbci	r27, 0xDA	; 218
    4f26:	36 e0       	ldi	r19, 0x06	; 6
    4f28:	3c 93       	st	X, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4f2a:	24 2b       	or	r18, r20
    4f2c:	21 8b       	std	Z+17, r18	; 0x11
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
    4f2e:	fc 01       	movw	r30, r24
    4f30:	ee 0f       	add	r30, r30
    4f32:	ff 1f       	adc	r31, r31
    4f34:	ee 0f       	add	r30, r30
    4f36:	ff 1f       	adc	r31, r31
    4f38:	ee 0f       	add	r30, r30
    4f3a:	ff 1f       	adc	r31, r31
    4f3c:	e0 58       	subi	r30, 0x80	; 128
    4f3e:	fa 4d       	sbci	r31, 0xDA	; 218
    4f40:	21 89       	ldd	r18, Z+17	; 0x11
    4f42:	20 7c       	andi	r18, 0xC0	; 192
    4f44:	20 3c       	cpi	r18, 0xC0	; 192
    4f46:	69 f4       	brne	.+26     	; 0x4f62 <udd_ep_alloc+0xfe>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    4f48:	fc 01       	movw	r30, r24
    4f4a:	ee 0f       	add	r30, r30
    4f4c:	ff 1f       	adc	r31, r31
    4f4e:	ee 0f       	add	r30, r30
    4f50:	ff 1f       	adc	r31, r31
    4f52:	ee 0f       	add	r30, r30
    4f54:	ff 1f       	adc	r31, r31
    4f56:	e0 58       	subi	r30, 0x80	; 128
    4f58:	fa 4d       	sbci	r31, 0xDA	; 218
    4f5a:	21 89       	ldd	r18, Z+17	; 0x11
    4f5c:	27 70       	andi	r18, 0x07	; 7
    4f5e:	27 30       	cpi	r18, 0x07	; 7
    4f60:	81 f0       	breq	.+32     	; 0x4f82 <udd_ep_alloc+0x11e>
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
    4f62:	88 0f       	add	r24, r24
    4f64:	99 1f       	adc	r25, r25
    4f66:	88 0f       	add	r24, r24
    4f68:	99 1f       	adc	r25, r25
    4f6a:	88 0f       	add	r24, r24
    4f6c:	99 1f       	adc	r25, r25
    4f6e:	fc 01       	movw	r30, r24
    4f70:	e0 58       	subi	r30, 0x80	; 128
    4f72:	fa 4d       	sbci	r31, 0xDA	; 218
    4f74:	81 89       	ldd	r24, Z+17	; 0x11
    4f76:	80 62       	ori	r24, 0x20	; 32
    4f78:	81 8b       	std	Z+17, r24	; 0x11
	return true;
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	08 95       	ret
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
    4f7e:	80 e0       	ldi	r24, 0x00	; 0
    4f80:	08 95       	ret

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
    4f82:	81 e0       	ldi	r24, 0x01	; 1
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
    4f84:	08 95       	ret

00004f86 <udd_ep_is_halted>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4f86:	e8 2f       	mov	r30, r24
    4f88:	ef 70       	andi	r30, 0x0F	; 15
    4f8a:	f0 e0       	ldi	r31, 0x00	; 0
    4f8c:	ee 0f       	add	r30, r30
    4f8e:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    4f90:	08 2e       	mov	r0, r24
    4f92:	00 0c       	add	r0, r0
    4f94:	99 0b       	sbc	r25, r25
    4f96:	88 27       	eor	r24, r24
    4f98:	99 0f       	add	r25, r25
    4f9a:	88 1f       	adc	r24, r24
    4f9c:	99 27       	eor	r25, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4f9e:	e8 0f       	add	r30, r24
    4fa0:	f9 1f       	adc	r31, r25
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
    4fa2:	ee 0f       	add	r30, r30
    4fa4:	ff 1f       	adc	r31, r31
    4fa6:	ee 0f       	add	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	ee 0f       	add	r30, r30
    4fac:	ff 1f       	adc	r31, r31
    4fae:	e0 58       	subi	r30, 0x80	; 128
    4fb0:	fa 4d       	sbci	r31, 0xDA	; 218
    4fb2:	81 89       	ldd	r24, Z+17	; 0x11
}
    4fb4:	82 fb       	bst	r24, 2
    4fb6:	88 27       	eor	r24, r24
    4fb8:	80 f9       	bld	r24, 0
    4fba:	08 95       	ret

00004fbc <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    4fbc:	0f 93       	push	r16
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4fbe:	28 2f       	mov	r18, r24
    4fc0:	2f 70       	andi	r18, 0x0F	; 15
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	a9 01       	movw	r20, r18
    4fc6:	44 0f       	add	r20, r20
    4fc8:	55 1f       	adc	r21, r21
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    4fca:	28 2f       	mov	r18, r24
    4fcc:	08 2e       	mov	r0, r24
    4fce:	00 0c       	add	r0, r0
    4fd0:	33 0b       	sbc	r19, r19
    4fd2:	22 27       	eor	r18, r18
    4fd4:	33 0f       	add	r19, r19
    4fd6:	22 1f       	adc	r18, r18
    4fd8:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4fda:	24 0f       	add	r18, r20
    4fdc:	35 1f       	adc	r19, r21
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_clear_dtgl(ep_ctrl);
    4fde:	f9 01       	movw	r30, r18
    4fe0:	ee 0f       	add	r30, r30
    4fe2:	ff 1f       	adc	r31, r31
    4fe4:	ee 0f       	add	r30, r30
    4fe6:	ff 1f       	adc	r31, r31
    4fe8:	ee 0f       	add	r30, r30
    4fea:	ff 1f       	adc	r31, r31
    4fec:	e0 57       	subi	r30, 0x70	; 112
    4fee:	fa 4d       	sbci	r31, 0xDA	; 218
    4ff0:	01 e0       	ldi	r16, 0x01	; 1
    4ff2:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    4ff4:	f9 01       	movw	r30, r18
    4ff6:	ee 0f       	add	r30, r30
    4ff8:	ff 1f       	adc	r31, r31
    4ffa:	ee 0f       	add	r30, r30
    4ffc:	ff 1f       	adc	r31, r31
    4ffe:	ee 0f       	add	r30, r30
    5000:	ff 1f       	adc	r31, r31
    5002:	e0 58       	subi	r30, 0x80	; 128
    5004:	fa 4d       	sbci	r31, 0xDA	; 218
    5006:	91 89       	ldd	r25, Z+17	; 0x11
    5008:	92 ff       	sbrs	r25, 2
    500a:	18 c0       	rjmp	.+48     	; 0x503c <udd_ep_clear_halt+0x80>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    500c:	22 0f       	add	r18, r18
    500e:	33 1f       	adc	r19, r19
    5010:	22 0f       	add	r18, r18
    5012:	33 1f       	adc	r19, r19
    5014:	22 0f       	add	r18, r18
    5016:	33 1f       	adc	r19, r19
    5018:	f9 01       	movw	r30, r18
    501a:	e0 58       	subi	r30, 0x80	; 128
    501c:	fa 4d       	sbci	r31, 0xDA	; 218
    501e:	91 89       	ldd	r25, Z+17	; 0x11
    5020:	9b 7f       	andi	r25, 0xFB	; 251
    5022:	91 8b       	std	Z+17, r25	; 0x11

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
    5024:	0e 94 2d 24 	call	0x485a	; 0x485a <udd_ep_get_job>
    5028:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    502a:	80 81       	ld	r24, Z
    502c:	80 ff       	sbrs	r24, 0
    502e:	06 c0       	rjmp	.+12     	; 0x503c <udd_ep_clear_halt+0x80>
		ptr_job->busy = false;
    5030:	8e 7f       	andi	r24, 0xFE	; 254
    5032:	80 83       	st	Z, r24
		ptr_job->call_nohalt();
    5034:	07 80       	ldd	r0, Z+7	; 0x07
    5036:	f0 85       	ldd	r31, Z+8	; 0x08
    5038:	e0 2d       	mov	r30, r0
    503a:	19 95       	eicall
	}
	return true;
}
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	0f 91       	pop	r16
    5040:	08 95       	ret

00005042 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
    5042:	5f 92       	push	r5
    5044:	6f 92       	push	r6
    5046:	7f 92       	push	r7
    5048:	8f 92       	push	r8
    504a:	9f 92       	push	r9
    504c:	af 92       	push	r10
    504e:	bf 92       	push	r11
    5050:	cf 92       	push	r12
    5052:	df 92       	push	r13
    5054:	ef 92       	push	r14
    5056:	ff 92       	push	r15
    5058:	0f 93       	push	r16
    505a:	1f 93       	push	r17
    505c:	cf 93       	push	r28
    505e:	df 93       	push	r29
    5060:	1f 92       	push	r1
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62
    5066:	78 2e       	mov	r7, r24
    5068:	66 2e       	mov	r6, r22
    506a:	4a 01       	movw	r8, r20
    506c:	59 01       	movw	r10, r18
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
    506e:	0e 94 2d 24 	call	0x485a	; 0x485a <udd_ep_get_job>
    5072:	6c 01       	movw	r12, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    5074:	57 2c       	mov	r5, r7
    5076:	55 1c       	adc	r5, r5
    5078:	55 24       	eor	r5, r5
    507a:	55 1c       	adc	r5, r5
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    507c:	87 2d       	mov	r24, r7
    507e:	8f 70       	andi	r24, 0x0F	; 15
    5080:	e8 2e       	mov	r14, r24
    5082:	f1 2c       	mov	r15, r1
    5084:	ee 0c       	add	r14, r14
    5086:	ff 1c       	adc	r15, r15
    5088:	e5 0c       	add	r14, r5
    508a:	f1 1c       	adc	r15, r1

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
    508c:	f7 01       	movw	r30, r14
    508e:	ee 0f       	add	r30, r30
    5090:	ff 1f       	adc	r31, r31
    5092:	ee 0f       	add	r30, r30
    5094:	ff 1f       	adc	r31, r31
    5096:	ee 0f       	add	r30, r30
    5098:	ff 1f       	adc	r31, r31
    509a:	e0 58       	subi	r30, 0x80	; 128
    509c:	fa 4d       	sbci	r31, 0xDA	; 218
    509e:	81 89       	ldd	r24, Z+17	; 0x11
    50a0:	80 7c       	andi	r24, 0xC0	; 192
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <udd_ep_run+0x64>
    50a4:	84 c0       	rjmp	.+264    	; 0x51ae <udd_ep_run+0x16c>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    50a6:	f7 01       	movw	r30, r14
    50a8:	ee 0f       	add	r30, r30
    50aa:	ff 1f       	adc	r31, r31
    50ac:	ee 0f       	add	r30, r30
    50ae:	ff 1f       	adc	r31, r31
    50b0:	ee 0f       	add	r30, r30
    50b2:	ff 1f       	adc	r31, r31
    50b4:	e0 58       	subi	r30, 0x80	; 128
    50b6:	fa 4d       	sbci	r31, 0xDA	; 218
    50b8:	81 89       	ldd	r24, Z+17	; 0x11
    50ba:	80 7c       	andi	r24, 0xC0	; 192
    50bc:	80 3c       	cpi	r24, 0xC0	; 192
    50be:	61 f0       	breq	.+24     	; 0x50d8 <udd_ep_run+0x96>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    50c0:	f7 01       	movw	r30, r14
    50c2:	ee 0f       	add	r30, r30
    50c4:	ff 1f       	adc	r31, r31
    50c6:	ee 0f       	add	r30, r30
    50c8:	ff 1f       	adc	r31, r31
    50ca:	ee 0f       	add	r30, r30
    50cc:	ff 1f       	adc	r31, r31
    50ce:	e0 58       	subi	r30, 0x80	; 128
    50d0:	fa 4d       	sbci	r31, 0xDA	; 218
    50d2:	81 89       	ldd	r24, Z+17	; 0x11
    50d4:	82 fd       	sbrc	r24, 2
    50d6:	6d c0       	rjmp	.+218    	; 0x51b2 <udd_ep_run+0x170>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    50d8:	8f b7       	in	r24, 0x3f	; 63
    50da:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    50dc:	f8 94       	cli
	return flags;
    50de:	89 81       	ldd	r24, Y+1	; 0x01
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    50e0:	f6 01       	movw	r30, r12
    50e2:	90 81       	ld	r25, Z
    50e4:	90 ff       	sbrs	r25, 0
    50e6:	03 c0       	rjmp	.+6      	; 0x50ee <udd_ep_run+0xac>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    50e8:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		return false; // Job already on going
    50ea:	51 2c       	mov	r5, r1
    50ec:	63 c0       	rjmp	.+198    	; 0x51b4 <udd_ep_run+0x172>
	}
	ptr_job->busy = true;
    50ee:	f6 01       	movw	r30, r12
    50f0:	90 81       	ld	r25, Z
    50f2:	91 60       	ori	r25, 0x01	; 1
    50f4:	90 83       	st	Z, r25
    50f6:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
    50f8:	81 82       	std	Z+1, r8	; 0x01
    50fa:	92 82       	std	Z+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    50fc:	a3 82       	std	Z+3, r10	; 0x03
    50fe:	b4 82       	std	Z+4, r11	; 0x04
	ptr_job->nb_trans = 0;
    5100:	15 82       	std	Z+5, r1	; 0x05
    5102:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->call_trans = callback;
    5104:	07 83       	std	Z+7, r16	; 0x07
    5106:	10 87       	std	Z+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    5108:	61 10       	cpse	r6, r1
    510a:	06 c0       	rjmp	.+12     	; 0x5118 <udd_ep_run+0xd6>
    510c:	91 e0       	ldi	r25, 0x01	; 1
    510e:	a1 14       	cp	r10, r1
    5110:	b1 04       	cpc	r11, r1
    5112:	19 f0       	breq	.+6      	; 0x511a <udd_ep_run+0xd8>
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	01 c0       	rjmp	.+2      	; 0x511a <udd_ep_run+0xd8>
    5118:	91 e0       	ldi	r25, 0x01	; 1
    511a:	f6 01       	movw	r30, r12
    511c:	80 81       	ld	r24, Z
    511e:	90 fb       	bst	r25, 0
    5120:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    5122:	8b 7f       	andi	r24, 0xFB	; 251
    5124:	80 83       	st	Z, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    5126:	55 20       	and	r5, r5
    5128:	61 f0       	breq	.+24     	; 0x5142 <udd_ep_run+0x100>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    512a:	f7 01       	movw	r30, r14
    512c:	ee 0f       	add	r30, r30
    512e:	ff 1f       	adc	r31, r31
    5130:	ee 0f       	add	r30, r30
    5132:	ff 1f       	adc	r31, r31
    5134:	ee 0f       	add	r30, r30
    5136:	ff 1f       	adc	r31, r31
    5138:	e0 58       	subi	r30, 0x80	; 128
    513a:	fa 4d       	sbci	r31, 0xDA	; 218
    513c:	16 8a       	std	Z+22, r1	; 0x16
    513e:	17 8a       	std	Z+23, r1	; 0x17
    5140:	30 c0       	rjmp	.+96     	; 0x51a2 <udd_ep_run+0x160>
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
    5142:	f7 01       	movw	r30, r14
    5144:	ee 0f       	add	r30, r30
    5146:	ff 1f       	adc	r31, r31
    5148:	ee 0f       	add	r30, r30
    514a:	ff 1f       	adc	r31, r31
    514c:	ee 0f       	add	r30, r30
    514e:	ff 1f       	adc	r31, r31
    5150:	e0 58       	subi	r30, 0x80	; 128
    5152:	fa 4d       	sbci	r31, 0xDA	; 218
    5154:	81 89       	ldd	r24, Z+17	; 0x11
    5156:	80 7c       	andi	r24, 0xC0	; 192
    5158:	80 3c       	cpi	r24, 0xC0	; 192
    515a:	b1 f4       	brne	.+44     	; 0x5188 <udd_ep_run+0x146>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    515c:	c7 01       	movw	r24, r14
    515e:	88 0f       	add	r24, r24
    5160:	99 1f       	adc	r25, r25
    5162:	88 0f       	add	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	88 0f       	add	r24, r24
    5168:	99 1f       	adc	r25, r25
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
    516a:	80 57       	subi	r24, 0x70	; 112
    516c:	9a 4d       	sbci	r25, 0xDA	; 218
    516e:	0e 94 04 24 	call	0x4808	; 0x4808 <udd_ep_get_size>
    5172:	bc 01       	movw	r22, r24
    5174:	c5 01       	movw	r24, r10
    5176:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
    517a:	89 2b       	or	r24, r25
    517c:	29 f0       	breq	.+10     	; 0x5188 <udd_ep_run+0x146>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    517e:	f6 01       	movw	r30, r12
    5180:	80 81       	ld	r24, Z
    5182:	8e 7f       	andi	r24, 0xFE	; 254
    5184:	80 83       	st	Z, r24
			return false;
    5186:	16 c0       	rjmp	.+44     	; 0x51b4 <udd_ep_run+0x172>
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    5188:	f7 01       	movw	r30, r14
    518a:	ee 0f       	add	r30, r30
    518c:	ff 1f       	adc	r31, r31
    518e:	ee 0f       	add	r30, r30
    5190:	ff 1f       	adc	r31, r31
    5192:	ee 0f       	add	r30, r30
    5194:	ff 1f       	adc	r31, r31
    5196:	e0 58       	subi	r30, 0x80	; 128
    5198:	fa 4d       	sbci	r31, 0xDA	; 218
    519a:	12 8a       	std	Z+18, r1	; 0x12
    519c:	13 8a       	std	Z+19, r1	; 0x13
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    519e:	16 8a       	std	Z+22, r1	; 0x16
    51a0:	17 8a       	std	Z+23, r1	; 0x17
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    51a2:	87 2d       	mov	r24, r7
    51a4:	0e 94 bf 24 	call	0x497e	; 0x497e <udd_ep_trans_complet>
	return true;
    51a8:	55 24       	eor	r5, r5
    51aa:	53 94       	inc	r5
    51ac:	03 c0       	rjmp	.+6      	; 0x51b4 <udd_ep_run+0x172>
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
    51ae:	51 2c       	mov	r5, r1
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <udd_ep_run+0x172>
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
		&& udd_endpoint_is_stall(ep_ctrl)) {
		return false; // Endpoint is halted
    51b2:	51 2c       	mov	r5, r1
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
    51b4:	85 2d       	mov	r24, r5
    51b6:	0f 90       	pop	r0
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	1f 91       	pop	r17
    51be:	0f 91       	pop	r16
    51c0:	ff 90       	pop	r15
    51c2:	ef 90       	pop	r14
    51c4:	df 90       	pop	r13
    51c6:	cf 90       	pop	r12
    51c8:	bf 90       	pop	r11
    51ca:	af 90       	pop	r10
    51cc:	9f 90       	pop	r9
    51ce:	8f 90       	pop	r8
    51d0:	7f 90       	pop	r7
    51d2:	6f 90       	pop	r6
    51d4:	5f 90       	pop	r5
    51d6:	08 95       	ret

000051d8 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    51d8:	ff 92       	push	r15
    51da:	0f 93       	push	r16
    51dc:	1f 93       	push	r17
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
    51e2:	18 2f       	mov	r17, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    51e4:	f8 2e       	mov	r15, r24
    51e6:	ff 1c       	adc	r15, r15
    51e8:	ff 24       	eor	r15, r15
    51ea:	ff 1c       	adc	r15, r15
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    51ec:	c8 2f       	mov	r28, r24
    51ee:	cf 70       	andi	r28, 0x0F	; 15
    51f0:	d0 e0       	ldi	r29, 0x00	; 0
    51f2:	cc 0f       	add	r28, r28
    51f4:	dd 1f       	adc	r29, r29
    51f6:	cf 0d       	add	r28, r15
    51f8:	d1 1d       	adc	r29, r1
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    51fa:	0e 94 2d 24 	call	0x485a	; 0x485a <udd_ep_get_job>
    51fe:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    5200:	fe 01       	movw	r30, r28
    5202:	ee 0f       	add	r30, r30
    5204:	ff 1f       	adc	r31, r31
    5206:	ee 0f       	add	r30, r30
    5208:	ff 1f       	adc	r31, r31
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	e0 57       	subi	r30, 0x70	; 112
    5210:	fa 4d       	sbci	r31, 0xDA	; 218
    5212:	02 e0       	ldi	r16, 0x02	; 2
    5214:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    5216:	8c 91       	ld	r24, X
    5218:	80 ff       	sbrs	r24, 0
    521a:	22 c0       	rjmp	.+68     	; 0x5260 <udd_ep_abort+0x88>
		return; // No job on going
	}
	ptr_job->busy = false;
    521c:	8e 7f       	andi	r24, 0xFE	; 254
    521e:	8c 93       	st	X, r24
	if (NULL != ptr_job->call_trans) {
    5220:	17 96       	adiw	r26, 0x07	; 7
    5222:	ed 91       	ld	r30, X+
    5224:	fc 91       	ld	r31, X
    5226:	18 97       	sbiw	r26, 0x08	; 8
    5228:	30 97       	sbiw	r30, 0x00	; 0
    522a:	d1 f0       	breq	.+52     	; 0x5260 <udd_ep_abort+0x88>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    522c:	ff 20       	and	r15, r15
    522e:	59 f0       	breq	.+22     	; 0x5246 <udd_ep_abort+0x6e>
    5230:	cc 0f       	add	r28, r28
    5232:	dd 1f       	adc	r29, r29
    5234:	cc 0f       	add	r28, r28
    5236:	dd 1f       	adc	r29, r29
    5238:	cc 0f       	add	r28, r28
    523a:	dd 1f       	adc	r29, r29
    523c:	c0 58       	subi	r28, 0x80	; 128
    523e:	da 4d       	sbci	r29, 0xDA	; 218
    5240:	6e 89       	ldd	r22, Y+22	; 0x16
    5242:	7f 89       	ldd	r23, Y+23	; 0x17
    5244:	0a c0       	rjmp	.+20     	; 0x525a <udd_ep_abort+0x82>
    5246:	cc 0f       	add	r28, r28
    5248:	dd 1f       	adc	r29, r29
    524a:	cc 0f       	add	r28, r28
    524c:	dd 1f       	adc	r29, r29
    524e:	cc 0f       	add	r28, r28
    5250:	dd 1f       	adc	r29, r29
    5252:	c0 58       	subi	r28, 0x80	; 128
    5254:	da 4d       	sbci	r29, 0xDA	; 218
    5256:	6a 89       	ldd	r22, Y+18	; 0x12
    5258:	7b 89       	ldd	r23, Y+19	; 0x13
    525a:	41 2f       	mov	r20, r17
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	19 95       	eicall
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	ff 90       	pop	r15
    526a:	08 95       	ret

0000526c <udd_ep_free>:
	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}

void udd_ep_free(udd_ep_id_t ep)
{
    526c:	cf 93       	push	r28
    526e:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
    5270:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5274:	ec 2f       	mov	r30, r28
    5276:	ef 70       	andi	r30, 0x0F	; 15
    5278:	f0 e0       	ldi	r31, 0x00	; 0
    527a:	ee 0f       	add	r30, r30
    527c:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    527e:	8c 2f       	mov	r24, r28
    5280:	cc 0f       	add	r28, r28
    5282:	99 0b       	sbc	r25, r25
    5284:	88 27       	eor	r24, r24
    5286:	99 0f       	add	r25, r25
    5288:	88 1f       	adc	r24, r24
    528a:	99 27       	eor	r25, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    528c:	e8 0f       	add	r30, r24
    528e:	f9 1f       	adc	r31, r25
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5290:	ee 0f       	add	r30, r30
    5292:	ff 1f       	adc	r31, r31
    5294:	ee 0f       	add	r30, r30
    5296:	ff 1f       	adc	r31, r31
    5298:	ee 0f       	add	r30, r30
    529a:	ff 1f       	adc	r31, r31
    529c:	e0 58       	subi	r30, 0x80	; 128
    529e:	fa 4d       	sbci	r31, 0xDA	; 218
    52a0:	11 8a       	std	Z+17, r1	; 0x11
}
    52a2:	cf 91       	pop	r28
    52a4:	08 95       	ret

000052a6 <udd_ep_set_halt>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    52a6:	e8 2f       	mov	r30, r24
    52a8:	ef 70       	andi	r30, 0x0F	; 15
    52aa:	f0 e0       	ldi	r31, 0x00	; 0
    52ac:	ee 0f       	add	r30, r30
    52ae:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    52b0:	28 2f       	mov	r18, r24
    52b2:	08 2e       	mov	r0, r24
    52b4:	00 0c       	add	r0, r0
    52b6:	33 0b       	sbc	r19, r19
    52b8:	22 27       	eor	r18, r18
    52ba:	33 0f       	add	r19, r19
    52bc:	22 1f       	adc	r18, r18
    52be:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    52c0:	e2 0f       	add	r30, r18
    52c2:	f3 1f       	adc	r31, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_enable_stall(ep_ctrl);
    52c4:	ee 0f       	add	r30, r30
    52c6:	ff 1f       	adc	r31, r31
    52c8:	ee 0f       	add	r30, r30
    52ca:	ff 1f       	adc	r31, r31
    52cc:	ee 0f       	add	r30, r30
    52ce:	ff 1f       	adc	r31, r31
    52d0:	e0 58       	subi	r30, 0x80	; 128
    52d2:	fa 4d       	sbci	r31, 0xDA	; 218
    52d4:	91 89       	ldd	r25, Z+17	; 0x11
    52d6:	94 60       	ori	r25, 0x04	; 4
    52d8:	91 8b       	std	Z+17, r25	; 0x11

	udd_ep_abort(ep);
    52da:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
	return true;
}
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	08 95       	ret

000052e2 <udd_ep_wait_stall_clear>:
	}
}

bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
    52e2:	0f 93       	push	r16
    52e4:	1f 93       	push	r17
    52e6:	cf 93       	push	r28
    52e8:	df 93       	push	r29
    52ea:	8b 01       	movw	r16, r22
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    52ec:	c8 2f       	mov	r28, r24
    52ee:	cf 70       	andi	r28, 0x0F	; 15
    52f0:	d0 e0       	ldi	r29, 0x00	; 0
    52f2:	cc 0f       	add	r28, r28
    52f4:	dd 1f       	adc	r29, r29
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    52f6:	28 2f       	mov	r18, r24
    52f8:	08 2e       	mov	r0, r24
    52fa:	00 0c       	add	r0, r0
    52fc:	33 0b       	sbc	r19, r19
    52fe:	22 27       	eor	r18, r18
    5300:	33 0f       	add	r19, r19
    5302:	22 1f       	adc	r18, r18
    5304:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5306:	c2 0f       	add	r28, r18
    5308:	d3 1f       	adc	r29, r19
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    530a:	0e 94 2d 24 	call	0x485a	; 0x485a <udd_ep_get_job>

	if (udd_endpoint_is_stall(ep_ctrl)) {
    530e:	cc 0f       	add	r28, r28
    5310:	dd 1f       	adc	r29, r29
    5312:	cc 0f       	add	r28, r28
    5314:	dd 1f       	adc	r29, r29
    5316:	cc 0f       	add	r28, r28
    5318:	dd 1f       	adc	r29, r29
    531a:	c0 58       	subi	r28, 0x80	; 128
    531c:	da 4d       	sbci	r29, 0xDA	; 218
    531e:	29 89       	ldd	r18, Y+17	; 0x11
    5320:	22 ff       	sbrs	r18, 2
    5322:	0a c0       	rjmp	.+20     	; 0x5338 <udd_ep_wait_stall_clear+0x56>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    5324:	fc 01       	movw	r30, r24
    5326:	20 81       	ld	r18, Z
    5328:	20 fd       	sbrc	r18, 0
    532a:	0a c0       	rjmp	.+20     	; 0x5340 <udd_ep_wait_stall_clear+0x5e>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    532c:	21 60       	ori	r18, 0x01	; 1
    532e:	20 83       	st	Z, r18
		ptr_job->call_nohalt = callback;
    5330:	07 83       	std	Z+7, r16	; 0x07
    5332:	10 87       	std	Z+8, r17	; 0x08
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
    5334:	81 e0       	ldi	r24, 0x01	; 1
    5336:	05 c0       	rjmp	.+10     	; 0x5342 <udd_ep_wait_stall_clear+0x60>
		}
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
    5338:	f8 01       	movw	r30, r16
    533a:	19 95       	eicall
	}
	return true;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	01 c0       	rjmp	.+2      	; 0x5342 <udd_ep_wait_stall_clear+0x60>
	ptr_job = udd_ep_get_job(ep);

	if (udd_endpoint_is_stall(ep_ctrl)) {
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
			return false; // Job already on going
    5340:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    5342:	df 91       	pop	r29
    5344:	cf 91       	pop	r28
    5346:	1f 91       	pop	r17
    5348:	0f 91       	pop	r16
    534a:	08 95       	ret

0000534c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    534c:	1f 92       	push	r1
    534e:	0f 92       	push	r0
    5350:	0f b6       	in	r0, 0x3f	; 63
    5352:	0f 92       	push	r0
    5354:	11 24       	eor	r1, r1
    5356:	08 b6       	in	r0, 0x38	; 56
    5358:	0f 92       	push	r0
    535a:	18 be       	out	0x38, r1	; 56
    535c:	09 b6       	in	r0, 0x39	; 57
    535e:	0f 92       	push	r0
    5360:	19 be       	out	0x39, r1	; 57
    5362:	0b b6       	in	r0, 0x3b	; 59
    5364:	0f 92       	push	r0
    5366:	1b be       	out	0x3b, r1	; 59
    5368:	0f 93       	push	r16
    536a:	2f 93       	push	r18
    536c:	3f 93       	push	r19
    536e:	4f 93       	push	r20
    5370:	5f 93       	push	r21
    5372:	6f 93       	push	r22
    5374:	7f 93       	push	r23
    5376:	8f 93       	push	r24
    5378:	9f 93       	push	r25
    537a:	af 93       	push	r26
    537c:	bf 93       	push	r27
    537e:	ef 93       	push	r30
    5380:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    5382:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5386:	88 23       	and	r24, r24
    5388:	34 f4       	brge	.+12     	; 0x5396 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    538a:	80 e8       	ldi	r24, 0x80	; 128
    538c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    5390:	0e 94 4d 20 	call	0x409a	; 0x409a <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5394:	90 c0       	rjmp	.+288    	; 0x54b6 <__vector_125+0x16a>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    5396:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    539a:	82 ff       	sbrs	r24, 2
    539c:	22 c0       	rjmp	.+68     	; 0x53e2 <__vector_125+0x96>
		udd_ack_underflow_event();
    539e:	84 e0       	ldi	r24, 0x04	; 4
    53a0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    53a4:	80 91 98 25 	lds	r24, 0x2598	; 0x802598 <udd_sram+0x18>
    53a8:	86 ff       	sbrs	r24, 6
    53aa:	85 c0       	rjmp	.+266    	; 0x54b6 <__vector_125+0x16a>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    53ac:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    53b0:	81 fd       	sbrc	r24, 1
    53b2:	81 c0       	rjmp	.+258    	; 0x54b6 <__vector_125+0x16a>
    53b4:	0e 94 48 24 	call	0x4890	; 0x4890 <udd_ctrl_interrupt_tc_setup>
    53b8:	81 11       	cpse	r24, r1
    53ba:	7d c0       	rjmp	.+250    	; 0x54b6 <__vector_125+0x16a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    53bc:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    53c0:	81 30       	cpi	r24, 0x01	; 1
    53c2:	19 f4       	brne	.+6      	; 0x53ca <__vector_125+0x7e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    53c4:	0e 94 80 23 	call	0x4700	; 0x4700 <udd_ctrl_send_zlp_in>
    53c8:	76 c0       	rjmp	.+236    	; 0x54b6 <__vector_125+0x16a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    53ca:	84 30       	cpi	r24, 0x04	; 4
    53cc:	09 f0       	breq	.+2      	; 0x53d0 <__vector_125+0x84>
    53ce:	73 c0       	rjmp	.+230    	; 0x54b6 <__vector_125+0x16a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    53d0:	e9 e9       	ldi	r30, 0x99	; 153
    53d2:	f5 e2       	ldi	r31, 0x25	; 37
    53d4:	04 e0       	ldi	r16, 0x04	; 4
    53d6:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    53d8:	e1 e9       	ldi	r30, 0x91	; 145
    53da:	f5 e2       	ldi	r31, 0x25	; 37
    53dc:	04 e0       	ldi	r16, 0x04	; 4
    53de:	05 93       	las	Z, r16
    53e0:	6a c0       	rjmp	.+212    	; 0x54b6 <__vector_125+0x16a>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    53e2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    53e6:	81 ff       	sbrs	r24, 1
    53e8:	61 c0       	rjmp	.+194    	; 0x54ac <__vector_125+0x160>
		udd_ack_overflow_event();
    53ea:	82 e0       	ldi	r24, 0x02	; 2
    53ec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    53f0:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <udd_sram+0x10>
    53f4:	86 ff       	sbrs	r24, 6
    53f6:	5f c0       	rjmp	.+190    	; 0x54b6 <__vector_125+0x16a>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    53f8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    53fc:	81 fd       	sbrc	r24, 1
    53fe:	5b c0       	rjmp	.+182    	; 0x54b6 <__vector_125+0x16a>
    5400:	0e 94 48 24 	call	0x4890	; 0x4890 <udd_ctrl_interrupt_tc_setup>
    5404:	81 11       	cpse	r24, r1
    5406:	57 c0       	rjmp	.+174    	; 0x54b6 <__vector_125+0x16a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5408:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    540c:	82 30       	cpi	r24, 0x02	; 2
    540e:	41 f4       	brne	.+16     	; 0x5420 <__vector_125+0xd4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5410:	84 e0       	ldi	r24, 0x04	; 4
    5412:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5416:	e0 e9       	ldi	r30, 0x90	; 144
    5418:	f5 e2       	ldi	r31, 0x25	; 37
    541a:	02 e0       	ldi	r16, 0x02	; 2
    541c:	06 93       	lac	Z, r16
    541e:	4b c0       	rjmp	.+150    	; 0x54b6 <__vector_125+0x16a>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5420:	83 30       	cpi	r24, 0x03	; 3
    5422:	09 f0       	breq	.+2      	; 0x5426 <__vector_125+0xda>
    5424:	48 c0       	rjmp	.+144    	; 0x54b6 <__vector_125+0x16a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5426:	e9 e9       	ldi	r30, 0x99	; 153
    5428:	f5 e2       	ldi	r31, 0x25	; 37
    542a:	04 e0       	ldi	r16, 0x04	; 4
    542c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    542e:	e1 e9       	ldi	r30, 0x91	; 145
    5430:	f5 e2       	ldi	r31, 0x25	; 37
    5432:	04 e0       	ldi	r16, 0x04	; 4
    5434:	05 93       	las	Z, r16
    5436:	3f c0       	rjmp	.+126    	; 0x54b6 <__vector_125+0x16a>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5438:	80 e1       	ldi	r24, 0x10	; 16
    543a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    543e:	81 e0       	ldi	r24, 0x01	; 1
    5440:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5444:	81 e8       	ldi	r24, 0x81	; 129
    5446:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    544a:	82 e0       	ldi	r24, 0x02	; 2
    544c:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5450:	82 e8       	ldi	r24, 0x82	; 130
    5452:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <udd_ep_abort>
		}
#endif
		udc_reset();
    5456:	0e 94 20 20 	call	0x4040	; 0x4040 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    545a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    545e:	e0 e8       	ldi	r30, 0x80	; 128
    5460:	f5 e2       	ldi	r31, 0x25	; 37
    5462:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    5464:	96 e0       	ldi	r25, 0x06	; 6
    5466:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5468:	83 e4       	ldi	r24, 0x43	; 67
    546a:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    546c:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    546e:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5470:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    5472:	85 e3       	ldi	r24, 0x35	; 53
    5474:	95 e2       	ldi	r25, 0x25	; 37
    5476:	84 8b       	std	Z+20, r24	; 0x14
    5478:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    547a:	0e 94 4d 23 	call	0x469a	; 0x469a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    547e:	1b c0       	rjmp	.+54     	; 0x54b6 <__vector_125+0x16a>
	}

	if (udd_is_suspend_event()) {
    5480:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5484:	86 ff       	sbrs	r24, 6
    5486:	07 c0       	rjmp	.+14     	; 0x5496 <__vector_125+0x14a>
		udd_ack_suspend_event();
    5488:	80 e4       	ldi	r24, 0x40	; 64
    548a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    548e:	80 e0       	ldi	r24, 0x00	; 0
    5490:	0e 94 15 23 	call	0x462a	; 0x462a <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    5494:	10 c0       	rjmp	.+32     	; 0x54b6 <__vector_125+0x16a>
	}

	if (udd_is_resume_event()) {
    5496:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    549a:	85 ff       	sbrs	r24, 5
    549c:	0c c0       	rjmp	.+24     	; 0x54b6 <__vector_125+0x16a>
		udd_ack_resume_event();
    549e:	80 e2       	ldi	r24, 0x20	; 32
    54a0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	0e 94 15 23 	call	0x462a	; 0x462a <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    54aa:	05 c0       	rjmp	.+10     	; 0x54b6 <__vector_125+0x16a>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    54ac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    54b0:	84 fd       	sbrc	r24, 4
    54b2:	c2 cf       	rjmp	.-124    	; 0x5438 <__vector_125+0xec>
    54b4:	e5 cf       	rjmp	.-54     	; 0x5480 <__vector_125+0x134>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    54b6:	ff 91       	pop	r31
    54b8:	ef 91       	pop	r30
    54ba:	bf 91       	pop	r27
    54bc:	af 91       	pop	r26
    54be:	9f 91       	pop	r25
    54c0:	8f 91       	pop	r24
    54c2:	7f 91       	pop	r23
    54c4:	6f 91       	pop	r22
    54c6:	5f 91       	pop	r21
    54c8:	4f 91       	pop	r20
    54ca:	3f 91       	pop	r19
    54cc:	2f 91       	pop	r18
    54ce:	0f 91       	pop	r16
    54d0:	0f 90       	pop	r0
    54d2:	0b be       	out	0x3b, r0	; 59
    54d4:	0f 90       	pop	r0
    54d6:	09 be       	out	0x39, r0	; 57
    54d8:	0f 90       	pop	r0
    54da:	08 be       	out	0x38, r0	; 56
    54dc:	0f 90       	pop	r0
    54de:	0f be       	out	0x3f, r0	; 63
    54e0:	0f 90       	pop	r0
    54e2:	1f 90       	pop	r1
    54e4:	18 95       	reti

000054e6 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    54e6:	1f 92       	push	r1
    54e8:	0f 92       	push	r0
    54ea:	0f b6       	in	r0, 0x3f	; 63
    54ec:	0f 92       	push	r0
    54ee:	11 24       	eor	r1, r1
    54f0:	08 b6       	in	r0, 0x38	; 56
    54f2:	0f 92       	push	r0
    54f4:	18 be       	out	0x38, r1	; 56
    54f6:	09 b6       	in	r0, 0x39	; 57
    54f8:	0f 92       	push	r0
    54fa:	19 be       	out	0x39, r1	; 57
    54fc:	0a b6       	in	r0, 0x3a	; 58
    54fe:	0f 92       	push	r0
    5500:	1a be       	out	0x3a, r1	; 58
    5502:	0b b6       	in	r0, 0x3b	; 59
    5504:	0f 92       	push	r0
    5506:	1b be       	out	0x3b, r1	; 59
    5508:	0f 93       	push	r16
    550a:	1f 93       	push	r17
    550c:	2f 93       	push	r18
    550e:	3f 93       	push	r19
    5510:	4f 93       	push	r20
    5512:	5f 93       	push	r21
    5514:	6f 93       	push	r22
    5516:	7f 93       	push	r23
    5518:	8f 93       	push	r24
    551a:	9f 93       	push	r25
    551c:	af 93       	push	r26
    551e:	bf 93       	push	r27
    5520:	cf 93       	push	r28
    5522:	df 93       	push	r29
    5524:	ef 93       	push	r30
    5526:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5528:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    552c:	81 fd       	sbrc	r24, 1
    552e:	04 c0       	rjmp	.+8      	; 0x5538 <__vector_126+0x52>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5530:	0e 94 48 24 	call	0x4890	; 0x4890 <udd_ctrl_interrupt_tc_setup>
    5534:	81 11       	cpse	r24, r1
    5536:	c4 c0       	rjmp	.+392    	; 0x56c0 <__vector_126+0x1da>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5538:	82 e0       	ldi	r24, 0x02	; 2
    553a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    553e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    5542:	81 95       	neg	r24
    5544:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    5546:	e0 e9       	ldi	r30, 0x90	; 144
    5548:	f5 e2       	ldi	r31, 0x25	; 37
    554a:	e8 1b       	sub	r30, r24
    554c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    554e:	20 81       	ld	r18, Z
    5550:	31 81       	ldd	r19, Z+1	; 0x01
    5552:	20 59       	subi	r18, 0x90	; 144
    5554:	35 42       	sbci	r19, 0x25	; 37
    5556:	36 95       	lsr	r19
    5558:	27 95       	ror	r18
    555a:	36 95       	lsr	r19
    555c:	27 95       	ror	r18
    555e:	36 95       	lsr	r19
    5560:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    5562:	82 2f       	mov	r24, r18
    5564:	86 95       	lsr	r24
    5566:	20 fd       	sbrc	r18, 0
    5568:	02 c0       	rjmp	.+4      	; 0x556e <__vector_126+0x88>
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	01 c0       	rjmp	.+2      	; 0x5570 <__vector_126+0x8a>
    556e:	90 e8       	ldi	r25, 0x80	; 128
    5570:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5572:	e8 2f       	mov	r30, r24
    5574:	ef 70       	andi	r30, 0x0F	; 15
    5576:	f0 e0       	ldi	r31, 0x00	; 0
    5578:	ee 0f       	add	r30, r30
    557a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    557c:	28 2f       	mov	r18, r24
    557e:	08 2e       	mov	r0, r24
    5580:	00 0c       	add	r0, r0
    5582:	33 0b       	sbc	r19, r19
    5584:	22 27       	eor	r18, r18
    5586:	33 0f       	add	r19, r19
    5588:	22 1f       	adc	r18, r18
    558a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    558c:	e2 0f       	add	r30, r18
    558e:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    5590:	df 01       	movw	r26, r30
    5592:	aa 0f       	add	r26, r26
    5594:	bb 1f       	adc	r27, r27
    5596:	aa 0f       	add	r26, r26
    5598:	bb 1f       	adc	r27, r27
    559a:	aa 0f       	add	r26, r26
    559c:	bb 1f       	adc	r27, r27
    559e:	a0 57       	subi	r26, 0x70	; 112
    55a0:	ba 4d       	sbci	r27, 0xDA	; 218
    55a2:	9c 91       	ld	r25, X
    55a4:	95 ff       	sbrs	r25, 5
    55a6:	8c c0       	rjmp	.+280    	; 0x56c0 <__vector_126+0x1da>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    55a8:	fd 01       	movw	r30, r26
    55aa:	00 e2       	ldi	r16, 0x20	; 32
    55ac:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    55ae:	81 11       	cpse	r24, r1
    55b0:	80 c0       	rjmp	.+256    	; 0x56b2 <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    55b2:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    55b6:	84 30       	cpi	r24, 0x04	; 4
    55b8:	29 f4       	brne	.+10     	; 0x55c4 <__vector_126+0xde>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    55ba:	0e 94 8e 23 	call	0x471c	; 0x471c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    55be:	0e 94 4d 23 	call	0x469a	; 0x469a <udd_ctrl_init>
    55c2:	7e c0       	rjmp	.+252    	; 0x56c0 <__vector_126+0x1da>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    55c4:	00 91 92 25 	lds	r16, 0x2592	; 0x802592 <udd_sram+0x12>
    55c8:	10 91 93 25 	lds	r17, 0x2593	; 0x802593 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    55cc:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    55d0:	90 91 dc 25 	lds	r25, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
    55d4:	c0 91 75 25 	lds	r28, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    55d8:	d0 91 76 25 	lds	r29, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    55dc:	9e 01       	movw	r18, r28
    55de:	20 0f       	add	r18, r16
    55e0:	31 1f       	adc	r19, r17
    55e2:	82 17       	cp	r24, r18
    55e4:	93 07       	cpc	r25, r19
    55e6:	18 f4       	brcc	.+6      	; 0x55ee <__vector_126+0x108>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    55e8:	8c 01       	movw	r16, r24
    55ea:	0c 1b       	sub	r16, r28
    55ec:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    55ee:	80 91 d9 25 	lds	r24, 0x25D9	; 0x8025d9 <udd_g_ctrlreq+0x8>
    55f2:	90 91 da 25 	lds	r25, 0x25DA	; 0x8025da <udd_g_ctrlreq+0x9>
    55f6:	a8 01       	movw	r20, r16
    55f8:	65 e3       	ldi	r22, 0x35	; 53
    55fa:	75 e2       	ldi	r23, 0x25	; 37
    55fc:	8c 0f       	add	r24, r28
    55fe:	9d 1f       	adc	r25, r29
    5600:	0e 94 1c 31 	call	0x6238	; 0x6238 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    5604:	c0 0f       	add	r28, r16
    5606:	d1 1f       	adc	r29, r17
    5608:	c0 93 75 25 	sts	0x2575, r28	; 0x802575 <udd_ctrl_payload_nb_trans>
    560c:	d0 93 76 25 	sts	0x2576, r29	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5610:	00 34       	cpi	r16, 0x40	; 64
    5612:	11 05       	cpc	r17, r1
    5614:	69 f4       	brne	.+26     	; 0x5630 <__vector_126+0x14a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    5616:	80 91 77 25 	lds	r24, 0x2577	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    561a:	90 91 78 25 	lds	r25, 0x2578	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
    561e:	8c 0f       	add	r24, r28
    5620:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5622:	20 91 d7 25 	lds	r18, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    5626:	30 91 d8 25 	lds	r19, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    562a:	82 17       	cp	r24, r18
    562c:	93 07       	cpc	r25, r19
    562e:	90 f0       	brcs	.+36     	; 0x5654 <__vector_126+0x16e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5630:	e1 ed       	ldi	r30, 0xD1	; 209
    5632:	f5 e2       	ldi	r31, 0x25	; 37
    5634:	c2 87       	std	Z+10, r28	; 0x0a
    5636:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5638:	06 84       	ldd	r0, Z+14	; 0x0e
    563a:	f7 85       	ldd	r31, Z+15	; 0x0f
    563c:	e0 2d       	mov	r30, r0
    563e:	30 97       	sbiw	r30, 0x00	; 0
    5640:	31 f0       	breq	.+12     	; 0x564e <__vector_126+0x168>
			if (!udd_g_ctrlreq.over_under_run()) {
    5642:	19 95       	eicall
    5644:	81 11       	cpse	r24, r1
    5646:	03 c0       	rjmp	.+6      	; 0x564e <__vector_126+0x168>
				// Stall ZLP
				udd_ctrl_stall_data();
    5648:	0e 94 72 23 	call	0x46e4	; 0x46e4 <udd_ctrl_stall_data>
    564c:	39 c0       	rjmp	.+114    	; 0x56c0 <__vector_126+0x1da>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    564e:	0e 94 80 23 	call	0x4700	; 0x4700 <udd_ctrl_send_zlp_in>
    5652:	36 c0       	rjmp	.+108    	; 0x56c0 <__vector_126+0x1da>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    5654:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    5658:	90 91 dc 25 	lds	r25, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
    565c:	c8 17       	cp	r28, r24
    565e:	d9 07       	cpc	r29, r25
    5660:	09 f5       	brne	.+66     	; 0x56a4 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    5662:	e0 91 df 25 	lds	r30, 0x25DF	; 0x8025df <udd_g_ctrlreq+0xe>
    5666:	f0 91 e0 25 	lds	r31, 0x25E0	; 0x8025e0 <udd_g_ctrlreq+0xf>
    566a:	30 97       	sbiw	r30, 0x00	; 0
    566c:	19 f4       	brne	.+6      	; 0x5674 <__vector_126+0x18e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    566e:	0e 94 72 23 	call	0x46e4	; 0x46e4 <udd_ctrl_stall_data>
    5672:	26 c0       	rjmp	.+76     	; 0x56c0 <__vector_126+0x1da>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    5674:	19 95       	eicall
    5676:	81 11       	cpse	r24, r1
    5678:	03 c0       	rjmp	.+6      	; 0x5680 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    567a:	0e 94 72 23 	call	0x46e4	; 0x46e4 <udd_ctrl_stall_data>
    567e:	20 c0       	rjmp	.+64     	; 0x56c0 <__vector_126+0x1da>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5680:	20 91 77 25 	lds	r18, 0x2577	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    5684:	30 91 78 25 	lds	r19, 0x2578	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
    5688:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    568c:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    5690:	82 0f       	add	r24, r18
    5692:	93 1f       	adc	r25, r19
    5694:	80 93 77 25 	sts	0x2577, r24	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    5698:	90 93 78 25 	sts	0x2578, r25	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    569c:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    56a0:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    56a4:	e0 e9       	ldi	r30, 0x90	; 144
    56a6:	f5 e2       	ldi	r31, 0x25	; 37
    56a8:	02 e0       	ldi	r16, 0x02	; 2
    56aa:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    56ac:	00 e2       	ldi	r16, 0x20	; 32
    56ae:	06 93       	lac	Z, r16
    56b0:	07 c0       	rjmp	.+14     	; 0x56c0 <__vector_126+0x1da>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    56b2:	80 38       	cpi	r24, 0x80	; 128
    56b4:	19 f4       	brne	.+6      	; 0x56bc <__vector_126+0x1d6>
		udd_ctrl_in_sent();
    56b6:	0e 94 96 23 	call	0x472c	; 0x472c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    56ba:	02 c0       	rjmp	.+4      	; 0x56c0 <__vector_126+0x1da>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    56bc:	0e 94 bf 24 	call	0x497e	; 0x497e <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    56c0:	ff 91       	pop	r31
    56c2:	ef 91       	pop	r30
    56c4:	df 91       	pop	r29
    56c6:	cf 91       	pop	r28
    56c8:	bf 91       	pop	r27
    56ca:	af 91       	pop	r26
    56cc:	9f 91       	pop	r25
    56ce:	8f 91       	pop	r24
    56d0:	7f 91       	pop	r23
    56d2:	6f 91       	pop	r22
    56d4:	5f 91       	pop	r21
    56d6:	4f 91       	pop	r20
    56d8:	3f 91       	pop	r19
    56da:	2f 91       	pop	r18
    56dc:	1f 91       	pop	r17
    56de:	0f 91       	pop	r16
    56e0:	0f 90       	pop	r0
    56e2:	0b be       	out	0x3b, r0	; 59
    56e4:	0f 90       	pop	r0
    56e6:	0a be       	out	0x3a, r0	; 58
    56e8:	0f 90       	pop	r0
    56ea:	09 be       	out	0x39, r0	; 57
    56ec:	0f 90       	pop	r0
    56ee:	08 be       	out	0x38, r0	; 56
    56f0:	0f 90       	pop	r0
    56f2:	0f be       	out	0x3f, r0	; 63
    56f4:	0f 90       	pop	r0
    56f6:	1f 90       	pop	r1
    56f8:	18 95       	reti

000056fa <udd_ep_is_valid>:
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
    56fa:	98 2f       	mov	r25, r24
    56fc:	9f 70       	andi	r25, 0x0F	; 15
	if (ep == 0) {
    56fe:	29 f0       	breq	.+10     	; 0x570a <udd_ep_is_valid+0x10>
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	93 30       	cpi	r25, 0x03	; 3
    5704:	18 f0       	brcs	.+6      	; 0x570c <udd_ep_is_valid+0x12>
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	08 95       	ret

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	if (ep == 0) {
		return false;
    570a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    570c:	08 95       	ret

0000570e <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    570e:	0f 93       	push	r16
    5710:	1f 93       	push	r17
    5712:	cf 93       	push	r28
    5714:	df 93       	push	r29
    5716:	cd b7       	in	r28, 0x3d	; 61
    5718:	de b7       	in	r29, 0x3e	; 62
    571a:	27 97       	sbiw	r28, 0x07	; 7
    571c:	cd bf       	out	0x3d, r28	; 61
    571e:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    5720:	8f ef       	ldi	r24, 0xFF	; 255
    5722:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    5726:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    572a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    572e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    5732:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    5736:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    573a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    573e:	64 e0       	ldi	r22, 0x04	; 4
    5740:	81 e4       	ldi	r24, 0x41	; 65
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
    5748:	6c e1       	ldi	r22, 0x1C	; 28
    574a:	70 e0       	ldi	r23, 0x00	; 0
    574c:	82 e0       	ldi	r24, 0x02	; 2
    574e:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    5752:	8a 83       	std	Y+2, r24	; 0x02
    5754:	6d e1       	ldi	r22, 0x1D	; 29
    5756:	70 e0       	ldi	r23, 0x00	; 0
    5758:	82 e0       	ldi	r24, 0x02	; 2
    575a:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    575e:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    5760:	89 81       	ldd	r24, Y+1	; 0x01
    5762:	9a 81       	ldd	r25, Y+2	; 0x02
    5764:	01 96       	adiw	r24, 0x01	; 1
    5766:	21 f4       	brne	.+8      	; 0x5770 <sysclk_init+0x62>
		cal = 0x2340;
    5768:	80 e4       	ldi	r24, 0x40	; 64
    576a:	93 e2       	ldi	r25, 0x23	; 35
    576c:	89 83       	std	Y+1, r24	; 0x01
    576e:	9a 83       	std	Y+2, r25	; 0x02
    5770:	89 81       	ldd	r24, Y+1	; 0x01
    5772:	9a 81       	ldd	r25, Y+2	; 0x02
    5774:	8b 83       	std	Y+3, r24	; 0x03
    5776:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    5778:	e0 e6       	ldi	r30, 0x60	; 96
    577a:	f0 e0       	ldi	r31, 0x00	; 0
    577c:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    577e:	8c 81       	ldd	r24, Y+4	; 0x04
    5780:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5782:	8f b7       	in	r24, 0x3f	; 63
    5784:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    5786:	f8 94       	cli
	return flags;
    5788:	9f 81       	ldd	r25, Y+7	; 0x07
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    578a:	e0 e5       	ldi	r30, 0x50	; 80
    578c:	f0 e0       	ldi	r31, 0x00	; 0
    578e:	80 81       	ld	r24, Z
    5790:	82 60       	ori	r24, 0x02	; 2
    5792:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5794:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5796:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    5798:	81 ff       	sbrs	r24, 1
    579a:	fd cf       	rjmp	.-6      	; 0x5796 <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    579c:	8f b7       	in	r24, 0x3f	; 63
    579e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    57a0:	f8 94       	cli
	return flags;
    57a2:	9d 81       	ldd	r25, Y+5	; 0x05
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    57a4:	00 e5       	ldi	r16, 0x50	; 80
    57a6:	10 e0       	ldi	r17, 0x00	; 0
    57a8:	d8 01       	movw	r26, r16
    57aa:	16 96       	adiw	r26, 0x06	; 6
    57ac:	8c 91       	ld	r24, X
    57ae:	16 97       	sbiw	r26, 0x06	; 6
    57b0:	89 7f       	andi	r24, 0xF9	; 249
    57b2:	16 96       	adiw	r26, 0x06	; 6
    57b4:	8c 93       	st	X, r24
    57b6:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    57b8:	e0 e6       	ldi	r30, 0x60	; 96
    57ba:	f0 e0       	ldi	r31, 0x00	; 0
    57bc:	80 e8       	ldi	r24, 0x80	; 128
    57be:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    57c0:	8b eb       	ldi	r24, 0xBB	; 187
    57c2:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    57c4:	16 96       	adiw	r26, 0x06	; 6
    57c6:	8c 91       	ld	r24, X
    57c8:	16 97       	sbiw	r26, 0x06	; 6
    57ca:	84 60       	ori	r24, 0x04	; 4
    57cc:	16 96       	adiw	r26, 0x06	; 6
    57ce:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    57d0:	80 81       	ld	r24, Z
    57d2:	81 60       	ori	r24, 0x01	; 1
    57d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    57d6:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    57d8:	61 e0       	ldi	r22, 0x01	; 1
    57da:	80 e4       	ldi	r24, 0x40	; 64
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    57e2:	8f b7       	in	r24, 0x3f	; 63
    57e4:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    57e6:	f8 94       	cli
	return flags;
    57e8:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    57ea:	f8 01       	movw	r30, r16
    57ec:	80 81       	ld	r24, Z
    57ee:	8e 7f       	andi	r24, 0xFE	; 254
    57f0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    57f2:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    57f4:	27 96       	adiw	r28, 0x07	; 7
    57f6:	cd bf       	out	0x3d, r28	; 61
    57f8:	de bf       	out	0x3e, r29	; 62
    57fa:	df 91       	pop	r29
    57fc:	cf 91       	pop	r28
    57fe:	1f 91       	pop	r17
    5800:	0f 91       	pop	r16
    5802:	08 95       	ret

00005804 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    5804:	cf 93       	push	r28
    5806:	df 93       	push	r29
    5808:	1f 92       	push	r1
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    580e:	9f b7       	in	r25, 0x3f	; 63
    5810:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    5812:	f8 94       	cli
	return flags;
    5814:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5816:	e8 2f       	mov	r30, r24
    5818:	f0 e0       	ldi	r31, 0x00	; 0
    581a:	e0 59       	subi	r30, 0x90	; 144
    581c:	ff 4f       	sbci	r31, 0xFF	; 255
    581e:	60 95       	com	r22
    5820:	80 81       	ld	r24, Z
    5822:	68 23       	and	r22, r24
    5824:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5826:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    5828:	0f 90       	pop	r0
    582a:	df 91       	pop	r29
    582c:	cf 91       	pop	r28
    582e:	08 95       	ret

00005830 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    5830:	cf 93       	push	r28
    5832:	df 93       	push	r29
    5834:	1f 92       	push	r1
    5836:	cd b7       	in	r28, 0x3d	; 61
    5838:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    583a:	9f b7       	in	r25, 0x3f	; 63
    583c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    583e:	f8 94       	cli
	return flags;
    5840:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    5842:	e8 2f       	mov	r30, r24
    5844:	f0 e0       	ldi	r31, 0x00	; 0
    5846:	e0 59       	subi	r30, 0x90	; 144
    5848:	ff 4f       	sbci	r31, 0xFF	; 255
    584a:	80 81       	ld	r24, Z
    584c:	68 2b       	or	r22, r24
    584e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5850:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    5852:	0f 90       	pop	r0
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    585a:	cf 93       	push	r28
    585c:	df 93       	push	r29
    585e:	1f 92       	push	r1
    5860:	1f 92       	push	r1
    5862:	cd b7       	in	r28, 0x3d	; 61
    5864:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    5866:	86 30       	cpi	r24, 0x06	; 6
    5868:	11 f0       	breq	.+4      	; 0x586e <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	01 c0       	rjmp	.+2      	; 0x5870 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    586e:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5870:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    5874:	81 fd       	sbrc	r24, 1
    5876:	2a c0       	rjmp	.+84     	; 0x58cc <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5878:	8f b7       	in	r24, 0x3f	; 63
    587a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    587c:	f8 94       	cli
	return flags;
    587e:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    5880:	e0 e5       	ldi	r30, 0x50	; 80
    5882:	f0 e0       	ldi	r31, 0x00	; 0
    5884:	80 81       	ld	r24, Z
    5886:	82 60       	ori	r24, 0x02	; 2
    5888:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    588a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    588c:	81 81       	ldd	r24, Z+1	; 0x01
    588e:	81 ff       	sbrs	r24, 1
    5890:	fd cf       	rjmp	.-6      	; 0x588c <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5892:	8f b7       	in	r24, 0x3f	; 63
    5894:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5896:	f8 94       	cli
	return flags;
    5898:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    589a:	a0 e5       	ldi	r26, 0x50	; 80
    589c:	b0 e0       	ldi	r27, 0x00	; 0
    589e:	16 96       	adiw	r26, 0x06	; 6
    58a0:	8c 91       	ld	r24, X
    58a2:	16 97       	sbiw	r26, 0x06	; 6
    58a4:	89 7f       	andi	r24, 0xF9	; 249
    58a6:	16 96       	adiw	r26, 0x06	; 6
    58a8:	8c 93       	st	X, r24
    58aa:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    58ac:	e0 e6       	ldi	r30, 0x60	; 96
    58ae:	f0 e0       	ldi	r31, 0x00	; 0
    58b0:	80 e8       	ldi	r24, 0x80	; 128
    58b2:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    58b4:	8b eb       	ldi	r24, 0xBB	; 187
    58b6:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    58b8:	16 96       	adiw	r26, 0x06	; 6
    58ba:	8c 91       	ld	r24, X
    58bc:	16 97       	sbiw	r26, 0x06	; 6
    58be:	84 60       	ori	r24, 0x04	; 4
    58c0:	16 96       	adiw	r26, 0x06	; 6
    58c2:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    58c4:	80 81       	ld	r24, Z
    58c6:	81 60       	ori	r24, 0x01	; 1
    58c8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    58ca:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    58cc:	63 60       	ori	r22, 0x03	; 3
    58ce:	84 e4       	ldi	r24, 0x44	; 68
    58d0:	90 e0       	ldi	r25, 0x00	; 0
    58d2:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    58d6:	60 e4       	ldi	r22, 0x40	; 64
    58d8:	80 e0       	ldi	r24, 0x00	; 0
    58da:	0e 94 02 2c 	call	0x5804	; 0x5804 <sysclk_enable_module>
}
    58de:	0f 90       	pop	r0
    58e0:	0f 90       	pop	r0
    58e2:	df 91       	pop	r29
    58e4:	cf 91       	pop	r28
    58e6:	08 95       	ret

000058e8 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    58e8:	60 e4       	ldi	r22, 0x40	; 64
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	0e 94 18 2c 	call	0x5830	; 0x5830 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    58f0:	60 e0       	ldi	r22, 0x00	; 0
    58f2:	84 e4       	ldi	r24, 0x44	; 68
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
    58fa:	08 95       	ret

000058fc <nvm_read_device_serial>:
 *       the program space reads will be corrupted.
 *
 * \retval storage Pointer to the structure where to store the device serial
 */
void nvm_read_device_serial(struct nvm_device_serial *storage)
{
    58fc:	cf 93       	push	r28
    58fe:	df 93       	push	r29
    5900:	ec 01       	movw	r28, r24
    5902:	68 e0       	ldi	r22, 0x08	; 8
    5904:	70 e0       	ldi	r23, 0x00	; 0
    5906:	82 e0       	ldi	r24, 0x02	; 2
    5908:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
	storage->lotnum0 = nvm_read_production_signature_row(
    590c:	88 83       	st	Y, r24
    590e:	69 e0       	ldi	r22, 0x09	; 9
    5910:	70 e0       	ldi	r23, 0x00	; 0
    5912:	82 e0       	ldi	r24, 0x02	; 2
    5914:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    5918:	89 83       	std	Y+1, r24	; 0x01
    591a:	6a e0       	ldi	r22, 0x0A	; 10
    591c:	70 e0       	ldi	r23, 0x00	; 0
    591e:	82 e0       	ldi	r24, 0x02	; 2
    5920:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    5924:	8a 83       	std	Y+2, r24	; 0x02
    5926:	6b e0       	ldi	r22, 0x0B	; 11
    5928:	70 e0       	ldi	r23, 0x00	; 0
    592a:	82 e0       	ldi	r24, 0x02	; 2
    592c:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    5930:	8b 83       	std	Y+3, r24	; 0x03
    5932:	6c e0       	ldi	r22, 0x0C	; 12
    5934:	70 e0       	ldi	r23, 0x00	; 0
    5936:	82 e0       	ldi	r24, 0x02	; 2
    5938:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    593c:	8c 83       	std	Y+4, r24	; 0x04
    593e:	6d e0       	ldi	r22, 0x0D	; 13
    5940:	70 e0       	ldi	r23, 0x00	; 0
    5942:	82 e0       	ldi	r24, 0x02	; 2
    5944:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    5948:	8d 83       	std	Y+5, r24	; 0x05
    594a:	60 e1       	ldi	r22, 0x10	; 16
    594c:	70 e0       	ldi	r23, 0x00	; 0
    594e:	82 e0       	ldi	r24, 0x02	; 2
    5950:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    5954:	8e 83       	std	Y+6, r24	; 0x06
    5956:	62 e1       	ldi	r22, 0x12	; 18
    5958:	70 e0       	ldi	r23, 0x00	; 0
    595a:	82 e0       	ldi	r24, 0x02	; 2
    595c:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    5960:	8f 83       	std	Y+7, r24	; 0x07
    5962:	63 e1       	ldi	r22, 0x13	; 19
    5964:	70 e0       	ldi	r23, 0x00	; 0
    5966:	82 e0       	ldi	r24, 0x02	; 2
    5968:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    596c:	88 87       	std	Y+8, r24	; 0x08
    596e:	64 e1       	ldi	r22, 0x14	; 20
    5970:	70 e0       	ldi	r23, 0x00	; 0
    5972:	82 e0       	ldi	r24, 0x02	; 2
    5974:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    5978:	89 87       	std	Y+9, r24	; 0x09
    597a:	65 e1       	ldi	r22, 0x15	; 21
    597c:	70 e0       	ldi	r23, 0x00	; 0
    597e:	82 e0       	ldi	r24, 0x02	; 2
    5980:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    5984:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    5986:	df 91       	pop	r29
    5988:	cf 91       	pop	r28
    598a:	08 95       	ret

0000598c <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    598c:	dc 01       	movw	r26, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    598e:	e0 ec       	ldi	r30, 0xC0	; 192
    5990:	f1 e0       	ldi	r31, 0x01	; 1
    5992:	97 85       	ldd	r25, Z+15	; 0x0f
    5994:	99 23       	and	r25, r25
    5996:	ec f3       	brlt	.-6      	; 0x5992 <nvm_eeprom_read_byte+0x6>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    5998:	ec ec       	ldi	r30, 0xCC	; 204
    599a:	f1 e0       	ldi	r31, 0x01	; 1
    599c:	80 81       	ld	r24, Z
    599e:	88 60       	ori	r24, 0x08	; 8
    59a0:	80 83       	st	Z, r24
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
    59a2:	b0 5f       	subi	r27, 0xF0	; 240
    59a4:	8c 91       	ld	r24, X
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    59a6:	90 81       	ld	r25, Z
    59a8:	97 7f       	andi	r25, 0xF7	; 247
    59aa:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    59ac:	08 95       	ret

000059ae <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    59ae:	cf 93       	push	r28
    59b0:	df 93       	push	r29
    59b2:	9c 01       	movw	r18, r24
    59b4:	db 01       	movw	r26, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59b6:	e0 ec       	ldi	r30, 0xC0	; 192
    59b8:	f1 e0       	ldi	r31, 0x01	; 1
    59ba:	97 85       	ldd	r25, Z+15	; 0x0f
    59bc:	99 23       	and	r25, r25
    59be:	ec f3       	brlt	.-6      	; 0x59ba <nvm_eeprom_read_buffer+0xc>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    59c0:	cc ec       	ldi	r28, 0xCC	; 204
    59c2:	d1 e0       	ldi	r29, 0x01	; 1
    59c4:	98 81       	ld	r25, Y
    59c6:	98 60       	ori	r25, 0x08	; 8
    59c8:	98 83       	st	Y, r25
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    59ca:	b9 01       	movw	r22, r18
    59cc:	70 5f       	subi	r23, 0xF0	; 240
    59ce:	cd 01       	movw	r24, r26
    59d0:	0e 94 1c 31 	call	0x6238	; 0x6238 <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    59d4:	88 81       	ld	r24, Y
    59d6:	87 7f       	andi	r24, 0xF7	; 247
    59d8:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	08 95       	ret

000059e0 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59e0:	e0 ec       	ldi	r30, 0xC0	; 192
    59e2:	f1 e0       	ldi	r31, 0x01	; 1
    59e4:	87 85       	ldd	r24, Z+15	; 0x0f
    59e6:	88 23       	and	r24, r24
    59e8:	ec f3       	brlt	.-6      	; 0x59e4 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    59ea:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    59ee:	81 ff       	sbrs	r24, 1
    59f0:	08 c0       	rjmp	.+16     	; 0x5a02 <nvm_eeprom_flush_buffer+0x22>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    59f2:	86 e3       	ldi	r24, 0x36	; 54
    59f4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    59f8:	61 e0       	ldi	r22, 0x01	; 1
    59fa:	8b ec       	ldi	r24, 0xCB	; 203
    59fc:	91 e0       	ldi	r25, 0x01	; 1
    59fe:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
    5a02:	08 95       	ret

00005a04 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a04:	e0 ec       	ldi	r30, 0xC0	; 192
    5a06:	f1 e0       	ldi	r31, 0x01	; 1
    5a08:	97 85       	ldd	r25, Z+15	; 0x0f
    5a0a:	99 23       	and	r25, r25
    5a0c:	ec f3       	brlt	.-6      	; 0x5a08 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    5a0e:	ac ec       	ldi	r26, 0xCC	; 204
    5a10:	b1 e0       	ldi	r27, 0x01	; 1
    5a12:	9c 91       	ld	r25, X
    5a14:	98 60       	ori	r25, 0x08	; 8
    5a16:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    5a18:	e8 2f       	mov	r30, r24
    5a1a:	f0 e0       	ldi	r31, 0x00	; 0
    5a1c:	f0 5f       	subi	r31, 0xF0	; 240
    5a1e:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    5a20:	8c 91       	ld	r24, X
    5a22:	87 7f       	andi	r24, 0xF7	; 247
    5a24:	8c 93       	st	X, r24
    5a26:	08 95       	ret

00005a28 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    5a28:	ff 92       	push	r15
    5a2a:	0f 93       	push	r16
    5a2c:	1f 93       	push	r17
    5a2e:	cf 93       	push	r28
    5a30:	df 93       	push	r29
    5a32:	18 2f       	mov	r17, r24
    5a34:	f9 2e       	mov	r15, r25
    5a36:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    5a38:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    5a3c:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a40:	e0 ec       	ldi	r30, 0xC0	; 192
    5a42:	f1 e0       	ldi	r31, 0x01	; 1
    5a44:	27 85       	ldd	r18, Z+15	; 0x0f
    5a46:	22 23       	and	r18, r18
    5a48:	ec f3       	brlt	.-6      	; 0x5a44 <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    5a4a:	6c 2f       	mov	r22, r28
    5a4c:	81 2f       	mov	r24, r17
    5a4e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    5a52:	c0 ec       	ldi	r28, 0xC0	; 192
    5a54:	d1 e0       	ldi	r29, 0x01	; 1
    5a56:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5a58:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5a5a:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5a5c:	85 e3       	ldi	r24, 0x35	; 53
    5a5e:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5a60:	61 e0       	ldi	r22, 0x01	; 1
    5a62:	8b ec       	ldi	r24, 0xCB	; 203
    5a64:	91 e0       	ldi	r25, 0x01	; 1
    5a66:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    5a6a:	0a 87       	std	Y+10, r16	; 0x0a
}
    5a6c:	df 91       	pop	r29
    5a6e:	cf 91       	pop	r28
    5a70:	1f 91       	pop	r17
    5a72:	0f 91       	pop	r16
    5a74:	ff 90       	pop	r15
    5a76:	08 95       	ret

00005a78 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    5a78:	ef 92       	push	r14
    5a7a:	ff 92       	push	r15
    5a7c:	0f 93       	push	r16
    5a7e:	1f 93       	push	r17
    5a80:	cf 93       	push	r28
    5a82:	df 93       	push	r29
    5a84:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a86:	e0 ec       	ldi	r30, 0xC0	; 192
    5a88:	f1 e0       	ldi	r31, 0x01	; 1
    5a8a:	87 85       	ldd	r24, Z+15	; 0x0f
    5a8c:	88 23       	and	r24, r24
    5a8e:	ec f3       	brlt	.-6      	; 0x5a8a <nvm_eeprom_load_page_to_buffer+0x12>
    5a90:	78 01       	movw	r14, r16
    5a92:	80 e2       	ldi	r24, 0x20	; 32
    5a94:	e8 0e       	add	r14, r24
    5a96:	f1 1c       	adc	r15, r1
    5a98:	e8 01       	movw	r28, r16
    5a9a:	8c 2f       	mov	r24, r28
    5a9c:	80 1b       	sub	r24, r16
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    5a9e:	69 91       	ld	r22, Y+
    5aa0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5aa4:	ce 15       	cp	r28, r14
    5aa6:	df 05       	cpc	r29, r15
    5aa8:	c1 f7       	brne	.-16     	; 0x5a9a <nvm_eeprom_load_page_to_buffer+0x22>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	0f 91       	pop	r16
    5ab2:	ff 90       	pop	r15
    5ab4:	ef 90       	pop	r14
    5ab6:	08 95       	ret

00005ab8 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    5ab8:	1f 93       	push	r17
    5aba:	cf 93       	push	r28
    5abc:	df 93       	push	r29
    5abe:	e0 ec       	ldi	r30, 0xC0	; 192
    5ac0:	f1 e0       	ldi	r31, 0x01	; 1
    5ac2:	97 85       	ldd	r25, Z+15	; 0x0f
    5ac4:	99 23       	and	r25, r25
    5ac6:	ec f3       	brlt	.-6      	; 0x5ac2 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5ac8:	20 e2       	ldi	r18, 0x20	; 32
    5aca:	82 9f       	mul	r24, r18
    5acc:	c0 01       	movw	r24, r0
    5ace:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5ad0:	c0 ec       	ldi	r28, 0xC0	; 192
    5ad2:	d1 e0       	ldi	r29, 0x01	; 1
    5ad4:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5ad6:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5ad8:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5ada:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5adc:	85 e3       	ldi	r24, 0x35	; 53
    5ade:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5ae0:	61 e0       	ldi	r22, 0x01	; 1
    5ae2:	8b ec       	ldi	r24, 0xCB	; 203
    5ae4:	91 e0       	ldi	r25, 0x01	; 1
    5ae6:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	NVM.CMD = old_cmd;
    5aea:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    5aec:	df 91       	pop	r29
    5aee:	cf 91       	pop	r28
    5af0:	1f 91       	pop	r17
    5af2:	08 95       	ret

00005af4 <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    5af4:	cf 92       	push	r12
    5af6:	df 92       	push	r13
    5af8:	ef 92       	push	r14
    5afa:	ff 92       	push	r15
    5afc:	0f 93       	push	r16
    5afe:	1f 93       	push	r17
    5b00:	cf 93       	push	r28
    5b02:	df 93       	push	r29
    5b04:	ec 01       	movw	r28, r24
    5b06:	7b 01       	movw	r14, r22
    5b08:	8a 01       	movw	r16, r20
	while (len) {
    5b0a:	45 2b       	or	r20, r21
    5b0c:	69 f1       	breq	.+90     	; 0x5b68 <nvm_eeprom_erase_and_write_buffer+0x74>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    5b0e:	ce 01       	movw	r24, r28
    5b10:	8f 71       	andi	r24, 0x1F	; 31
    5b12:	99 27       	eor	r25, r25
    5b14:	89 2b       	or	r24, r25
    5b16:	c1 f4       	brne	.+48     	; 0x5b48 <nvm_eeprom_erase_and_write_buffer+0x54>
    5b18:	00 32       	cpi	r16, 0x20	; 32
    5b1a:	11 05       	cpc	r17, r1
    5b1c:	a8 f0       	brcs	.+42     	; 0x5b48 <nvm_eeprom_erase_and_write_buffer+0x54>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    5b1e:	c7 01       	movw	r24, r14
    5b20:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    5b24:	ce 01       	movw	r24, r28
    5b26:	96 95       	lsr	r25
    5b28:	87 95       	ror	r24
    5b2a:	92 95       	swap	r25
    5b2c:	82 95       	swap	r24
    5b2e:	8f 70       	andi	r24, 0x0F	; 15
    5b30:	89 27       	eor	r24, r25
    5b32:	9f 70       	andi	r25, 0x0F	; 15
    5b34:	89 27       	eor	r24, r25
    5b36:	0e 94 5c 2d 	call	0x5ab8	; 0x5ab8 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    5b3a:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    5b3c:	80 e2       	ldi	r24, 0x20	; 32
    5b3e:	e8 0e       	add	r14, r24
    5b40:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    5b42:	00 52       	subi	r16, 0x20	; 32
    5b44:	11 09       	sbc	r17, r1
    5b46:	0d c0       	rjmp	.+26     	; 0x5b62 <nvm_eeprom_erase_and_write_buffer+0x6e>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    5b48:	6e 01       	movw	r12, r28
    5b4a:	ef ef       	ldi	r30, 0xFF	; 255
    5b4c:	ce 1a       	sub	r12, r30
    5b4e:	de 0a       	sbc	r13, r30
    5b50:	f7 01       	movw	r30, r14
    5b52:	61 91       	ld	r22, Z+
    5b54:	7f 01       	movw	r14, r30
    5b56:	ce 01       	movw	r24, r28
    5b58:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    5b5c:	01 50       	subi	r16, 0x01	; 1
    5b5e:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    5b60:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    5b62:	01 15       	cp	r16, r1
    5b64:	11 05       	cpc	r17, r1
    5b66:	99 f6       	brne	.-90     	; 0x5b0e <nvm_eeprom_erase_and_write_buffer+0x1a>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    5b68:	df 91       	pop	r29
    5b6a:	cf 91       	pop	r28
    5b6c:	1f 91       	pop	r17
    5b6e:	0f 91       	pop	r16
    5b70:	ff 90       	pop	r15
    5b72:	ef 90       	pop	r14
    5b74:	df 90       	pop	r13
    5b76:	cf 90       	pop	r12
    5b78:	08 95       	ret

00005b7a <nvm_eeprom_split_write_page>:
 * before writing.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_split_write_page(uint8_t page_addr)
{
    5b7a:	1f 93       	push	r17
    5b7c:	cf 93       	push	r28
    5b7e:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b80:	e0 ec       	ldi	r30, 0xC0	; 192
    5b82:	f1 e0       	ldi	r31, 0x01	; 1
    5b84:	97 85       	ldd	r25, Z+15	; 0x0f
    5b86:	99 23       	and	r25, r25
    5b88:	ec f3       	brlt	.-6      	; 0x5b84 <nvm_eeprom_split_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5b8a:	20 e2       	ldi	r18, 0x20	; 32
    5b8c:	82 9f       	mul	r24, r18
    5b8e:	c0 01       	movw	r24, r0
    5b90:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5b92:	c0 ec       	ldi	r28, 0xC0	; 192
    5b94:	d1 e0       	ldi	r29, 0x01	; 1
    5b96:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5b98:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5b9a:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5b9c:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5b9e:	84 e3       	ldi	r24, 0x34	; 52
    5ba0:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5ba2:	61 e0       	ldi	r22, 0x01	; 1
    5ba4:	8b ec       	ldi	r24, 0xCB	; 203
    5ba6:	91 e0       	ldi	r25, 0x01	; 1
    5ba8:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	NVM.CMD = old_cmd;
    5bac:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
}
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	1f 91       	pop	r17
    5bb4:	08 95       	ret

00005bb6 <nvm_eeprom_fill_buffer_with_value>:
 *       EEPROM write page operation.
 *
 * \param  value Value to copy to the page buffer.
 */
void nvm_eeprom_fill_buffer_with_value(uint8_t value)
{
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
    5bba:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    5bbc:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bc0:	e0 ec       	ldi	r30, 0xC0	; 192
    5bc2:	f1 e0       	ldi	r31, 0x01	; 1
    5bc4:	87 85       	ldd	r24, Z+15	; 0x0f
    5bc6:	88 23       	and	r24, r24
    5bc8:	ec f3       	brlt	.-6      	; 0x5bc4 <nvm_eeprom_fill_buffer_with_value+0xe>
    5bca:	c0 e0       	ldi	r28, 0x00	; 0
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, value);
    5bcc:	6d 2f       	mov	r22, r29
    5bce:	8c 2f       	mov	r24, r28
    5bd0:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <nvm_eeprom_load_byte_to_buffer>
	nvm_eeprom_flush_buffer();
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5bd4:	cf 5f       	subi	r28, 0xFF	; 255
    5bd6:	c0 32       	cpi	r28, 0x20	; 32
    5bd8:	c9 f7       	brne	.-14     	; 0x5bcc <nvm_eeprom_fill_buffer_with_value+0x16>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	08 95       	ret

00005be0 <nvm_eeprom_erase_bytes_in_page>:
 * written to in the page buffer reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_bytes_in_page(uint8_t page_addr)
{
    5be0:	1f 93       	push	r17
    5be2:	cf 93       	push	r28
    5be4:	df 93       	push	r29
    5be6:	e0 ec       	ldi	r30, 0xC0	; 192
    5be8:	f1 e0       	ldi	r31, 0x01	; 1
    5bea:	97 85       	ldd	r25, Z+15	; 0x0f
    5bec:	99 23       	and	r25, r25
    5bee:	ec f3       	brlt	.-6      	; 0x5bea <nvm_eeprom_erase_bytes_in_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5bf0:	20 e2       	ldi	r18, 0x20	; 32
    5bf2:	82 9f       	mul	r24, r18
    5bf4:	c0 01       	movw	r24, r0
    5bf6:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5bf8:	c0 ec       	ldi	r28, 0xC0	; 192
    5bfa:	d1 e0       	ldi	r29, 0x01	; 1
    5bfc:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5bfe:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5c00:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5c02:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5c04:	82 e3       	ldi	r24, 0x32	; 50
    5c06:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5c08:	61 e0       	ldi	r22, 0x01	; 1
    5c0a:	8b ec       	ldi	r24, 0xCB	; 203
    5c0c:	91 e0       	ldi	r25, 0x01	; 1
    5c0e:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	NVM.CMD = old_cmd;
    5c12:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
}
    5c14:	df 91       	pop	r29
    5c16:	cf 91       	pop	r28
    5c18:	1f 91       	pop	r17
    5c1a:	08 95       	ret

00005c1c <nvm_eeprom_erase_page>:
 * This function erases one EEPROM page, so that every location reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_page(uint8_t page_addr)
{
    5c1c:	cf 93       	push	r28
    5c1e:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    5c20:	8f ef       	ldi	r24, 0xFF	; 255
    5c22:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    5c26:	8c 2f       	mov	r24, r28
    5c28:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <nvm_eeprom_erase_bytes_in_page>
}
    5c2c:	cf 91       	pop	r28
    5c2e:	08 95       	ret

00005c30 <nvm_eeprom_erase_bytes_in_all_pages>:
 *
 * This function erases bytes from all EEPROM pages, so that every location
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
    5c30:	1f 93       	push	r17
    5c32:	cf 93       	push	r28
    5c34:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c36:	e0 ec       	ldi	r30, 0xC0	; 192
    5c38:	f1 e0       	ldi	r31, 0x01	; 1
    5c3a:	87 85       	ldd	r24, Z+15	; 0x0f
    5c3c:	88 23       	and	r24, r24
    5c3e:	ec f3       	brlt	.-6      	; 0x5c3a <nvm_eeprom_erase_bytes_in_all_pages+0xa>
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5c40:	c0 ec       	ldi	r28, 0xC0	; 192
    5c42:	d1 e0       	ldi	r29, 0x01	; 1
    5c44:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5c46:	80 e3       	ldi	r24, 0x30	; 48
    5c48:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5c4a:	61 e0       	ldi	r22, 0x01	; 1
    5c4c:	8b ec       	ldi	r24, 0xCB	; 203
    5c4e:	91 e0       	ldi	r25, 0x01	; 1
    5c50:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	NVM.CMD = old_cmd;
    5c54:	1a 87       	std	Y+10, r17	; 0x0a
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
}
    5c56:	df 91       	pop	r29
    5c58:	cf 91       	pop	r28
    5c5a:	1f 91       	pop	r17
    5c5c:	08 95       	ret

00005c5e <nvm_eeprom_erase_all>:
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    5c5e:	8f ef       	ldi	r24, 0xFF	; 255
    5c60:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    5c64:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <nvm_eeprom_erase_bytes_in_all_pages>
    5c68:	08 95       	ret

00005c6a <nvm_issue_flash_range_crc>:
 *
 * \param start_addr  end byte address
 * \param end_addr    start byte address
 */
void nvm_issue_flash_range_crc(flash_addr_t start_addr, flash_addr_t end_addr)
{
    5c6a:	cf 92       	push	r12
    5c6c:	df 92       	push	r13
    5c6e:	ef 92       	push	r14
    5c70:	ff 92       	push	r15
    5c72:	1f 93       	push	r17
    5c74:	cf 93       	push	r28
    5c76:	df 93       	push	r29
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    5c78:	c0 ec       	ldi	r28, 0xC0	; 192
    5c7a:	d1 e0       	ldi	r29, 0x01	; 1
    5c7c:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    5c7e:	ea e3       	ldi	r30, 0x3A	; 58
    5c80:	ea 87       	std	Y+10, r30	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    5c82:	68 83       	st	Y, r22
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    5c84:	c7 2e       	mov	r12, r23
    5c86:	d8 2e       	mov	r13, r24
    5c88:	e9 2e       	mov	r14, r25
    5c8a:	ff 24       	eor	r15, r15
    5c8c:	c9 82       	std	Y+1, r12	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    5c8e:	aa 27       	eor	r26, r26
    5c90:	bb 27       	eor	r27, r27
    5c92:	8a 83       	std	Y+2, r24	; 0x02
#endif

	// Load the end byte address in NVM Data Register
	NVM.DATA0 = end_addr & 0xFF;
    5c94:	2c 83       	std	Y+4, r18	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    5c96:	bb 27       	eor	r27, r27
    5c98:	a5 2f       	mov	r26, r21
    5c9a:	94 2f       	mov	r25, r20
    5c9c:	83 2f       	mov	r24, r19
    5c9e:	8d 83       	std	Y+5, r24	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    5ca0:	ca 01       	movw	r24, r20
    5ca2:	aa 27       	eor	r26, r26
    5ca4:	bb 27       	eor	r27, r27
    5ca6:	8e 83       	std	Y+6, r24	; 0x06
#endif

	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5ca8:	61 e0       	ldi	r22, 0x01	; 1
    5caa:	8b ec       	ldi	r24, 0xCB	; 203
    5cac:	91 e0       	ldi	r25, 0x01	; 1
    5cae:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    5cb2:	1a 87       	std	Y+10, r17	; 0x0a
}
    5cb4:	df 91       	pop	r29
    5cb6:	cf 91       	pop	r28
    5cb8:	1f 91       	pop	r17
    5cba:	ff 90       	pop	r15
    5cbc:	ef 90       	pop	r14
    5cbe:	df 90       	pop	r13
    5cc0:	cf 90       	pop	r12
    5cc2:	08 95       	ret

00005cc4 <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    5cc4:	da 01       	movw	r26, r20
    5cc6:	a9 01       	movw	r20, r18
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5cc8:	e0 ec       	ldi	r30, 0xC0	; 192
    5cca:	f1 e0       	ldi	r31, 0x01	; 1
    5ccc:	37 85       	ldd	r19, Z+15	; 0x0f
    5cce:	33 23       	and	r19, r19
    5cd0:	ec f3       	brlt	.-6      	; 0x5ccc <nvm_flash_read_buffer+0x8>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    5cd2:	41 15       	cp	r20, r1
    5cd4:	51 05       	cpc	r21, r1
    5cd6:	79 f0       	breq	.+30     	; 0x5cf6 <nvm_flash_read_buffer+0x32>
    5cd8:	4a 0f       	add	r20, r26
    5cda:	5b 1f       	adc	r21, r27
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    5cdc:	0b b6       	in	r0, 0x3b	; 59
    5cde:	8b bf       	out	0x3b, r24	; 59
    5ce0:	fb 01       	movw	r30, r22
    5ce2:	37 91       	elpm	r19, Z+
    5ce4:	0b be       	out	0x3b, r0	; 59
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    5ce6:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    5ce8:	6f 5f       	subi	r22, 0xFF	; 255
    5cea:	7f 4f       	sbci	r23, 0xFF	; 255
    5cec:	8f 4f       	sbci	r24, 0xFF	; 255
    5cee:	9f 4f       	sbci	r25, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    5cf0:	a4 17       	cp	r26, r20
    5cf2:	b5 07       	cpc	r27, r21
    5cf4:	99 f7       	brne	.-26     	; 0x5cdc <nvm_flash_read_buffer+0x18>
    5cf6:	08 95       	ret

00005cf8 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    5cf8:	ef 92       	push	r14
    5cfa:	ff 92       	push	r15
    5cfc:	0f 93       	push	r16
    5cfe:	1f 93       	push	r17
    5d00:	cf 93       	push	r28
    5d02:	df 93       	push	r29
    5d04:	7a 01       	movw	r14, r20
    5d06:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    5d08:	eb 01       	movw	r28, r22
    5d0a:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    5d0c:	23 2b       	or	r18, r19
    5d0e:	59 f0       	breq	.+22     	; 0x5d26 <nvm_user_sig_read_buffer+0x2e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    5d10:	be 01       	movw	r22, r28
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    5d18:	f7 01       	movw	r30, r14
    5d1a:	81 93       	st	Z+, r24
    5d1c:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    5d1e:	21 96       	adiw	r28, 0x01	; 1
		len--;
    5d20:	01 50       	subi	r16, 0x01	; 1
    5d22:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    5d24:	a9 f7       	brne	.-22     	; 0x5d10 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    5d26:	df 91       	pop	r29
    5d28:	cf 91       	pop	r28
    5d2a:	1f 91       	pop	r17
    5d2c:	0f 91       	pop	r16
    5d2e:	ff 90       	pop	r15
    5d30:	ef 90       	pop	r14
    5d32:	08 95       	ret

00005d34 <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5d34:	2f 92       	push	r2
    5d36:	3f 92       	push	r3
    5d38:	4f 92       	push	r4
    5d3a:	5f 92       	push	r5
    5d3c:	6f 92       	push	r6
    5d3e:	7f 92       	push	r7
    5d40:	8f 92       	push	r8
    5d42:	9f 92       	push	r9
    5d44:	af 92       	push	r10
    5d46:	bf 92       	push	r11
    5d48:	cf 92       	push	r12
    5d4a:	df 92       	push	r13
    5d4c:	ef 92       	push	r14
    5d4e:	ff 92       	push	r15
    5d50:	0f 93       	push	r16
    5d52:	1f 93       	push	r17
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	00 d0       	rcall	.+0      	; 0x5d5a <nvm_user_sig_write_buffer+0x26>
    5d5a:	1f 92       	push	r1
    5d5c:	cd b7       	in	r28, 0x3d	; 61
    5d5e:	de b7       	in	r29, 0x3e	; 62
    5d60:	4b 83       	std	Y+3, r20	; 0x03
    5d62:	5c 83       	std	Y+4, r21	; 0x04
    5d64:	79 01       	movw	r14, r18
    5d66:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    5d68:	5b 01       	movw	r10, r22
	bool b_flag_erase = false;

	while ( len ) {
    5d6a:	23 2b       	or	r18, r19
    5d6c:	09 f0       	breq	.+2      	; 0x5d70 <nvm_user_sig_write_buffer+0x3c>
    5d6e:	51 c0       	rjmp	.+162    	; 0x5e12 <nvm_user_sig_write_buffer+0xde>
    5d70:	67 c0       	rjmp	.+206    	; 0x5e40 <nvm_user_sig_write_buffer+0x10c>
    5d72:	62 01       	movw	r12, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5d74:	33 20       	and	r3, r3
    5d76:	89 f0       	breq	.+34     	; 0x5d9a <nvm_user_sig_write_buffer+0x66>
    5d78:	b2 01       	movw	r22, r4
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    5d80:	89 83       	std	Y+1, r24	; 0x01
    5d82:	b8 01       	movw	r22, r16
    5d84:	81 e0       	ldi	r24, 0x01	; 1
    5d86:	0e 94 41 30 	call	0x6082	; 0x6082 <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    5d8a:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    5d8c:	89 81       	ldd	r24, Y+1	; 0x01
    5d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d90:	01 96       	adiw	r24, 0x01	; 1
    5d92:	29 f0       	breq	.+10     	; 0x5d9e <nvm_user_sig_write_buffer+0x6a>
					b_flag_erase = true; // The page is not empty
    5d94:	22 24       	eor	r2, r2
    5d96:	23 94       	inc	r2
    5d98:	02 c0       	rjmp	.+4      	; 0x5d9e <nvm_user_sig_write_buffer+0x6a>
				}
			}else{
				w_value = 0xFFFF;
    5d9a:	89 82       	std	Y+1, r8	; 0x01
    5d9c:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    5d9e:	e1 14       	cp	r14, r1
    5da0:	f1 04       	cpc	r15, r1
    5da2:	09 f1       	breq	.+66     	; 0x5de6 <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == page_pos) {
    5da4:	ac 14       	cp	r10, r12
    5da6:	bd 04       	cpc	r11, r13
    5da8:	09 f0       	breq	.+2      	; 0x5dac <nvm_user_sig_write_buffer+0x78>
    5daa:	56 c0       	rjmp	.+172    	; 0x5e58 <nvm_user_sig_write_buffer+0x124>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5dac:	81 e0       	ldi	r24, 0x01	; 1
    5dae:	e8 1a       	sub	r14, r24
    5db0:	f1 08       	sbc	r15, r1
					opt_address++;
					LSB(w_value)=*(uint8_t*)buf;
    5db2:	eb 81       	ldd	r30, Y+3	; 0x03
    5db4:	fc 81       	ldd	r31, Y+4	; 0x04
    5db6:	81 91       	ld	r24, Z+
    5db8:	eb 83       	std	Y+3, r30	; 0x03
    5dba:	fc 83       	std	Y+4, r31	; 0x04
    5dbc:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    5dbe:	e1 14       	cp	r14, r1
    5dc0:	f1 04       	cpc	r15, r1
    5dc2:	21 f4       	brne	.+8      	; 0x5dcc <nvm_user_sig_write_buffer+0x98>
			if (len) {
				if (opt_address == page_pos) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
					opt_address++;
    5dc4:	ff ef       	ldi	r31, 0xFF	; 255
    5dc6:	af 1a       	sub	r10, r31
    5dc8:	bf 0a       	sbc	r11, r31
    5dca:	0d c0       	rjmp	.+26     	; 0x5de6 <nvm_user_sig_write_buffer+0xb2>
			}
			if (len) {
				if (opt_address == (page_pos+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5dcc:	21 e0       	ldi	r18, 0x01	; 1
    5dce:	e2 1a       	sub	r14, r18
    5dd0:	f1 08       	sbc	r15, r1
    5dd2:	56 01       	movw	r10, r12
    5dd4:	82 e0       	ldi	r24, 0x02	; 2
    5dd6:	a8 0e       	add	r10, r24
    5dd8:	b1 1c       	adc	r11, r1
					opt_address++;
					MSB(w_value)=*(uint8_t*)buf;
    5dda:	eb 81       	ldd	r30, Y+3	; 0x03
    5ddc:	fc 81       	ldd	r31, Y+4	; 0x04
    5dde:	81 91       	ld	r24, Z+
    5de0:	eb 83       	std	Y+3, r30	; 0x03
    5de2:	fc 83       	std	Y+4, r31	; 0x04
    5de4:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    5de6:	49 81       	ldd	r20, Y+1	; 0x01
    5de8:	5a 81       	ldd	r21, Y+2	; 0x02
    5dea:	c3 01       	movw	r24, r6
    5dec:	b2 01       	movw	r22, r4
    5dee:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
    5df2:	f2 e0       	ldi	r31, 0x02	; 2
    5df4:	4f 0e       	add	r4, r31
    5df6:	51 1c       	adc	r5, r1
    5df8:	61 1c       	adc	r6, r1
    5dfa:	71 1c       	adc	r7, r1
    5dfc:	0e 5f       	subi	r16, 0xFE	; 254
    5dfe:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    5e00:	01 30       	cpi	r16, 0x01	; 1
    5e02:	22 e0       	ldi	r18, 0x02	; 2
    5e04:	12 07       	cpc	r17, r18
    5e06:	09 f0       	breq	.+2      	; 0x5e0a <nvm_user_sig_write_buffer+0xd6>
    5e08:	b4 cf       	rjmp	.-152    	; 0x5d72 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    5e0a:	e1 14       	cp	r14, r1
    5e0c:	f1 04       	cpc	r15, r1
    5e0e:	29 f4       	brne	.+10     	; 0x5e1a <nvm_user_sig_write_buffer+0xe6>
    5e10:	0a c0       	rjmp	.+20     	; 0x5e26 <nvm_user_sig_write_buffer+0xf2>
    5e12:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    5e14:	88 24       	eor	r8, r8
    5e16:	8a 94       	dec	r8
    5e18:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5e1a:	01 e0       	ldi	r16, 0x01	; 1
    5e1c:	10 e0       	ldi	r17, 0x00	; 0
    5e1e:	41 2c       	mov	r4, r1
    5e20:	51 2c       	mov	r5, r1
    5e22:	32 01       	movw	r6, r4
    5e24:	a6 cf       	rjmp	.-180    	; 0x5d72 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    5e26:	22 20       	and	r2, r2
    5e28:	59 f0       	breq	.+22     	; 0x5e40 <nvm_user_sig_write_buffer+0x10c>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5e2a:	e0 ec       	ldi	r30, 0xC0	; 192
    5e2c:	f1 e0       	ldi	r31, 0x01	; 1
    5e2e:	87 85       	ldd	r24, Z+15	; 0x0f
    5e30:	88 23       	and	r24, r24
    5e32:	ec f3       	brlt	.-6      	; 0x5e2e <nvm_user_sig_write_buffer+0xfa>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    5e34:	48 e1       	ldi	r20, 0x18	; 24
    5e36:	60 e0       	ldi	r22, 0x00	; 0
    5e38:	70 e0       	ldi	r23, 0x00	; 0
    5e3a:	cb 01       	movw	r24, r22
    5e3c:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5e40:	e0 ec       	ldi	r30, 0xC0	; 192
    5e42:	f1 e0       	ldi	r31, 0x01	; 1
    5e44:	87 85       	ldd	r24, Z+15	; 0x0f
    5e46:	88 23       	and	r24, r24
    5e48:	ec f3       	brlt	.-6      	; 0x5e44 <nvm_user_sig_write_buffer+0x110>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    5e4a:	4a e1       	ldi	r20, 0x1A	; 26
    5e4c:	60 e0       	ldi	r22, 0x00	; 0
    5e4e:	70 e0       	ldi	r23, 0x00	; 0
    5e50:	cb 01       	movw	r24, r22
    5e52:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5e56:	04 c0       	rjmp	.+8      	; 0x5e60 <nvm_user_sig_write_buffer+0x12c>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_pos+1)) {
    5e58:	a0 16       	cp	r10, r16
    5e5a:	b1 06       	cpc	r11, r17
    5e5c:	21 f6       	brne	.-120    	; 0x5de6 <nvm_user_sig_write_buffer+0xb2>
    5e5e:	b6 cf       	rjmp	.-148    	; 0x5dcc <nvm_user_sig_write_buffer+0x98>
	// Write flash buffer
	if (b_flag_erase) {
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    5e60:	24 96       	adiw	r28, 0x04	; 4
    5e62:	cd bf       	out	0x3d, r28	; 61
    5e64:	de bf       	out	0x3e, r29	; 62
    5e66:	df 91       	pop	r29
    5e68:	cf 91       	pop	r28
    5e6a:	1f 91       	pop	r17
    5e6c:	0f 91       	pop	r16
    5e6e:	ff 90       	pop	r15
    5e70:	ef 90       	pop	r14
    5e72:	df 90       	pop	r13
    5e74:	cf 90       	pop	r12
    5e76:	bf 90       	pop	r11
    5e78:	af 90       	pop	r10
    5e7a:	9f 90       	pop	r9
    5e7c:	8f 90       	pop	r8
    5e7e:	7f 90       	pop	r7
    5e80:	6f 90       	pop	r6
    5e82:	5f 90       	pop	r5
    5e84:	4f 90       	pop	r4
    5e86:	3f 90       	pop	r3
    5e88:	2f 90       	pop	r2
    5e8a:	08 95       	ret

00005e8c <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5e8c:	2f 92       	push	r2
    5e8e:	3f 92       	push	r3
    5e90:	4f 92       	push	r4
    5e92:	5f 92       	push	r5
    5e94:	6f 92       	push	r6
    5e96:	7f 92       	push	r7
    5e98:	8f 92       	push	r8
    5e9a:	9f 92       	push	r9
    5e9c:	af 92       	push	r10
    5e9e:	bf 92       	push	r11
    5ea0:	cf 92       	push	r12
    5ea2:	df 92       	push	r13
    5ea4:	ef 92       	push	r14
    5ea6:	ff 92       	push	r15
    5ea8:	0f 93       	push	r16
    5eaa:	1f 93       	push	r17
    5eac:	cf 93       	push	r28
    5eae:	df 93       	push	r29
    5eb0:	cd b7       	in	r28, 0x3d	; 61
    5eb2:	de b7       	in	r29, 0x3e	; 62
    5eb4:	2a 97       	sbiw	r28, 0x0a	; 10
    5eb6:	cd bf       	out	0x3d, r28	; 61
    5eb8:	de bf       	out	0x3e, r29	; 62
    5eba:	2b 01       	movw	r4, r22
    5ebc:	3c 01       	movw	r6, r24
    5ebe:	1a 01       	movw	r2, r20
    5ec0:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    5ec2:	dc 01       	movw	r26, r24
    5ec4:	cb 01       	movw	r24, r22
    5ec6:	88 27       	eor	r24, r24
    5ec8:	9e 7f       	andi	r25, 0xFE	; 254

	// For each page
	while ( len ) {
    5eca:	23 2b       	or	r18, r19
    5ecc:	09 f4       	brne	.+2      	; 0x5ed0 <nvm_flash_erase_and_write_buffer+0x44>
    5ece:	aa c0       	rjmp	.+340    	; 0x6024 <nvm_flash_erase_and_write_buffer+0x198>
    5ed0:	8f 83       	std	Y+7, r24	; 0x07
    5ed2:	98 87       	std	Y+8, r25	; 0x08
    5ed4:	a9 87       	std	Y+9, r26	; 0x09
    5ed6:	ba 87       	std	Y+10, r27	; 0x0a
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    5ed8:	88 24       	eor	r8, r8
    5eda:	8a 94       	dec	r8
    5edc:	98 2c       	mov	r9, r8
    5ede:	4b 82       	std	Y+3, r4	; 0x03
    5ee0:	5c 82       	std	Y+4, r5	; 0x04
    5ee2:	6d 82       	std	Y+5, r6	; 0x05
    5ee4:	7e 82       	std	Y+6, r7	; 0x06
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5ee6:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5eea:	88 23       	and	r24, r24
    5eec:	e4 f3       	brlt	.-8      	; 0x5ee6 <nvm_flash_erase_and_write_buffer+0x5a>
    5eee:	cf 80       	ldd	r12, Y+7	; 0x07
    5ef0:	d8 84       	ldd	r13, Y+8	; 0x08
    5ef2:	e9 84       	ldd	r14, Y+9	; 0x09
    5ef4:	fa 84       	ldd	r15, Y+10	; 0x0a
    5ef6:	21 e0       	ldi	r18, 0x01	; 1
    5ef8:	c2 0e       	add	r12, r18
    5efa:	22 e0       	ldi	r18, 0x02	; 2
    5efc:	d2 1e       	adc	r13, r18
    5efe:	e1 1c       	adc	r14, r1
    5f00:	f1 1c       	adc	r15, r1
    5f02:	4f 80       	ldd	r4, Y+7	; 0x07
    5f04:	58 84       	ldd	r5, Y+8	; 0x08
    5f06:	69 84       	ldd	r6, Y+9	; 0x09
    5f08:	7a 84       	ldd	r7, Y+10	; 0x0a
    5f0a:	3f ef       	ldi	r19, 0xFF	; 255
    5f0c:	43 1a       	sub	r4, r19
    5f0e:	53 0a       	sbc	r5, r19
    5f10:	63 0a       	sbc	r6, r19
    5f12:	73 0a       	sbc	r7, r19
    5f14:	10 e0       	ldi	r17, 0x00	; 0
    5f16:	c3 01       	movw	r24, r6
    5f18:	b2 01       	movw	r22, r4
    5f1a:	61 50       	subi	r22, 0x01	; 1
    5f1c:	71 09       	sbc	r23, r1
    5f1e:	81 09       	sbc	r24, r1
    5f20:	91 09       	sbc	r25, r1
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5f22:	00 23       	and	r16, r16
    5f24:	69 f0       	breq	.+26     	; 0x5f40 <nvm_flash_erase_and_write_buffer+0xb4>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    5f26:	0b b6       	in	r0, 0x3b	; 59
    5f28:	8b bf       	out	0x3b, r24	; 59
    5f2a:	fb 01       	movw	r30, r22
    5f2c:	27 91       	elpm	r18, Z+
    5f2e:	36 91       	elpm	r19, Z
    5f30:	0b be       	out	0x3b, r0	; 59
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    5f32:	29 83       	std	Y+1, r18	; 0x01
    5f34:	3a 83       	std	Y+2, r19	; 0x02
				if (w_value!=0xFFFF) {
    5f36:	2f 3f       	cpi	r18, 0xFF	; 255
    5f38:	3f 4f       	sbci	r19, 0xFF	; 255
    5f3a:	21 f0       	breq	.+8      	; 0x5f44 <nvm_flash_erase_and_write_buffer+0xb8>
					b_flag_erase = true; // The page is not empty
    5f3c:	11 e0       	ldi	r17, 0x01	; 1
    5f3e:	02 c0       	rjmp	.+4      	; 0x5f44 <nvm_flash_erase_and_write_buffer+0xb8>
				}
			}else{
				w_value = 0xFFFF;
    5f40:	89 82       	std	Y+1, r8	; 0x01
    5f42:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    5f44:	a1 14       	cp	r10, r1
    5f46:	b1 04       	cpc	r11, r1
    5f48:	51 f1       	breq	.+84     	; 0x5f9e <nvm_flash_erase_and_write_buffer+0x112>
				if (opt_address == page_address) {
    5f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    5f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    5f4e:	4d 81       	ldd	r20, Y+5	; 0x05
    5f50:	5e 81       	ldd	r21, Y+6	; 0x06
    5f52:	62 17       	cp	r22, r18
    5f54:	73 07       	cpc	r23, r19
    5f56:	84 07       	cpc	r24, r20
    5f58:	95 07       	cpc	r25, r21
    5f5a:	09 f0       	breq	.+2      	; 0x5f5e <nvm_flash_erase_and_write_buffer+0xd2>
    5f5c:	58 c0       	rjmp	.+176    	; 0x600e <nvm_flash_erase_and_write_buffer+0x182>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5f5e:	31 e0       	ldi	r19, 0x01	; 1
    5f60:	a3 1a       	sub	r10, r19
    5f62:	b1 08       	sbc	r11, r1
					opt_address++;
					LSB(w_value)=*(uint8_t*)buf;
    5f64:	d1 01       	movw	r26, r2
    5f66:	2d 91       	ld	r18, X+
    5f68:	1d 01       	movw	r2, r26
    5f6a:	29 83       	std	Y+1, r18	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    5f6c:	a1 14       	cp	r10, r1
    5f6e:	b1 04       	cpc	r11, r1
    5f70:	29 f4       	brne	.+10     	; 0x5f7c <nvm_flash_erase_and_write_buffer+0xf0>
			if (len) {
				if (opt_address == page_address) {
					// The MSB of flash word must be changed
					// because the address is even
					len--;
					opt_address++;
    5f72:	4b 82       	std	Y+3, r4	; 0x03
    5f74:	5c 82       	std	Y+4, r5	; 0x04
    5f76:	6d 82       	std	Y+5, r6	; 0x05
    5f78:	7e 82       	std	Y+6, r7	; 0x06
    5f7a:	11 c0       	rjmp	.+34     	; 0x5f9e <nvm_flash_erase_and_write_buffer+0x112>
			}
			if (len) {
				if (opt_address == (page_address+1)) {
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5f7c:	b1 e0       	ldi	r27, 0x01	; 1
    5f7e:	ab 1a       	sub	r10, r27
    5f80:	b1 08       	sbc	r11, r1
					opt_address++;
    5f82:	a3 01       	movw	r20, r6
    5f84:	92 01       	movw	r18, r4
    5f86:	2f 5f       	subi	r18, 0xFF	; 255
    5f88:	3f 4f       	sbci	r19, 0xFF	; 255
    5f8a:	4f 4f       	sbci	r20, 0xFF	; 255
    5f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f8e:	2b 83       	std	Y+3, r18	; 0x03
    5f90:	3c 83       	std	Y+4, r19	; 0x04
    5f92:	4d 83       	std	Y+5, r20	; 0x05
    5f94:	5e 83       	std	Y+6, r21	; 0x06
					MSB(w_value)=*(uint8_t*)buf;
    5f96:	d1 01       	movw	r26, r2
    5f98:	2d 91       	ld	r18, X+
    5f9a:	1d 01       	movw	r2, r26
    5f9c:	2a 83       	std	Y+2, r18	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    5f9e:	49 81       	ldd	r20, Y+1	; 0x01
    5fa0:	5a 81       	ldd	r21, Y+2	; 0x02
    5fa2:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
    5fa6:	b2 e0       	ldi	r27, 0x02	; 2
    5fa8:	4b 0e       	add	r4, r27
    5faa:	51 1c       	adc	r5, r1
    5fac:	61 1c       	adc	r6, r1
    5fae:	71 1c       	adc	r7, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    5fb0:	4c 14       	cp	r4, r12
    5fb2:	5d 04       	cpc	r5, r13
    5fb4:	6e 04       	cpc	r6, r14
    5fb6:	7f 04       	cpc	r7, r15
    5fb8:	09 f0       	breq	.+2      	; 0x5fbc <nvm_flash_erase_and_write_buffer+0x130>
    5fba:	ad cf       	rjmp	.-166    	; 0x5f16 <nvm_flash_erase_and_write_buffer+0x8a>
    5fbc:	75 01       	movw	r14, r10
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    5fbe:	11 23       	and	r17, r17
    5fc0:	61 f0       	breq	.+24     	; 0x5fda <nvm_flash_erase_and_write_buffer+0x14e>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5fc2:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5fc6:	88 23       	and	r24, r24
    5fc8:	e4 f3       	brlt	.-8      	; 0x5fc2 <nvm_flash_erase_and_write_buffer+0x136>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    5fca:	45 e2       	ldi	r20, 0x25	; 37
    5fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    5fce:	78 85       	ldd	r23, Y+8	; 0x08
    5fd0:	89 85       	ldd	r24, Y+9	; 0x09
    5fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fd4:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5fd8:	0b c0       	rjmp	.+22     	; 0x5ff0 <nvm_flash_erase_and_write_buffer+0x164>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5fda:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5fde:	88 23       	and	r24, r24
    5fe0:	e4 f3       	brlt	.-8      	; 0x5fda <nvm_flash_erase_and_write_buffer+0x14e>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    5fe2:	44 e2       	ldi	r20, 0x24	; 36
    5fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    5fe6:	78 85       	ldd	r23, Y+8	; 0x08
    5fe8:	89 85       	ldd	r24, Y+9	; 0x09
    5fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fec:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5ff0:	2f 81       	ldd	r18, Y+7	; 0x07
    5ff2:	38 85       	ldd	r19, Y+8	; 0x08
    5ff4:	49 85       	ldd	r20, Y+9	; 0x09
    5ff6:	5a 85       	ldd	r21, Y+10	; 0x0a
    5ff8:	3e 5f       	subi	r19, 0xFE	; 254
    5ffa:	4f 4f       	sbci	r20, 0xFF	; 255
    5ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    5ffe:	2f 83       	std	Y+7, r18	; 0x07
    6000:	38 87       	std	Y+8, r19	; 0x08
    6002:	49 87       	std	Y+9, r20	; 0x09
    6004:	5a 87       	std	Y+10, r21	; 0x0a

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    6006:	ef 28       	or	r14, r15
    6008:	09 f0       	breq	.+2      	; 0x600c <nvm_flash_erase_and_write_buffer+0x180>
    600a:	6d cf       	rjmp	.-294    	; 0x5ee6 <nvm_flash_erase_and_write_buffer+0x5a>
    600c:	0b c0       	rjmp	.+22     	; 0x6024 <nvm_flash_erase_and_write_buffer+0x198>
					LSB(w_value)=*(uint8_t*)buf;
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
				if (opt_address == (page_address+1)) {
    600e:	2b 81       	ldd	r18, Y+3	; 0x03
    6010:	3c 81       	ldd	r19, Y+4	; 0x04
    6012:	4d 81       	ldd	r20, Y+5	; 0x05
    6014:	5e 81       	ldd	r21, Y+6	; 0x06
    6016:	42 16       	cp	r4, r18
    6018:	53 06       	cpc	r5, r19
    601a:	64 06       	cpc	r6, r20
    601c:	75 06       	cpc	r7, r21
    601e:	09 f0       	breq	.+2      	; 0x6022 <nvm_flash_erase_and_write_buffer+0x196>
    6020:	be cf       	rjmp	.-132    	; 0x5f9e <nvm_flash_erase_and_write_buffer+0x112>
    6022:	ac cf       	rjmp	.-168    	; 0x5f7c <nvm_flash_erase_and_write_buffer+0xf0>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    6024:	2a 96       	adiw	r28, 0x0a	; 10
    6026:	cd bf       	out	0x3d, r28	; 61
    6028:	de bf       	out	0x3e, r29	; 62
    602a:	df 91       	pop	r29
    602c:	cf 91       	pop	r28
    602e:	1f 91       	pop	r17
    6030:	0f 91       	pop	r16
    6032:	ff 90       	pop	r15
    6034:	ef 90       	pop	r14
    6036:	df 90       	pop	r13
    6038:	cf 90       	pop	r12
    603a:	bf 90       	pop	r11
    603c:	af 90       	pop	r10
    603e:	9f 90       	pop	r9
    6040:	8f 90       	pop	r8
    6042:	7f 90       	pop	r7
    6044:	6f 90       	pop	r6
    6046:	5f 90       	pop	r5
    6048:	4f 90       	pop	r4
    604a:	3f 90       	pop	r3
    604c:	2f 90       	pop	r2
    604e:	08 95       	ret

00006050 <nvm_fuses_read>:
 * \param fuse Fuse byte to read.
 *
 * \return  Byte value of fuse.
 */
uint8_t nvm_fuses_read(enum fuse_byte_t fuse)
{
    6050:	1f 93       	push	r17
    6052:	cf 93       	push	r28
    6054:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    6056:	e0 ec       	ldi	r30, 0xC0	; 192
    6058:	f1 e0       	ldi	r31, 0x01	; 1
    605a:	97 85       	ldd	r25, Z+15	; 0x0f
    605c:	99 23       	and	r25, r25
    605e:	ec f3       	brlt	.-6      	; 0x605a <nvm_fuses_read+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Set address
	NVM.ADDR0 = fuse;
    6060:	c0 ec       	ldi	r28, 0xC0	; 192
    6062:	d1 e0       	ldi	r29, 0x01	; 1
    6064:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    6066:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    6068:	87 e0       	ldi	r24, 0x07	; 7
    606a:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    606c:	61 e0       	ldi	r22, 0x01	; 1
    606e:	8b ec       	ldi	r24, 0xCB	; 203
    6070:	91 e0       	ldi	r25, 0x01	; 1
    6072:	0e 94 4b 30 	call	0x6096	; 0x6096 <ccp_write_io>
	NVM.CMD = old_cmd;
    6076:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);

	return NVM.DATA0;
    6078:	8c 81       	ldd	r24, Y+4	; 0x04
}
    607a:	df 91       	pop	r29
    607c:	cf 91       	pop	r28
    607e:	1f 91       	pop	r17
    6080:	08 95       	ret

00006082 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    6082:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    6086:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    6088:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    608a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    608e:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    6090:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    6094:	08 95       	ret

00006096 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    6096:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    6098:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    609a:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    609c:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    609e:	60 83       	st	Z, r22
	ret                             // Return to caller
    60a0:	08 95       	ret

000060a2 <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	PORTA_DIR = 0;//set all IO's to input
    60a2:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTB_DIR = 0;//set all IO's to input
    60a6:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	PORTC_DIR = (1<<4)|(1<<5)|(1<<7); //set SS, MOSI and SPCK as output
    60aa:	80 eb       	ldi	r24, 0xB0	; 176
    60ac:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = (1<<0)|(1<<1)|(1<<3)|(1<<4); //set CAN and Ethernet SS and TXD2 as output
    60b0:	9b e1       	ldi	r25, 0x1B	; 27
    60b2:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE_DIR = (1<<4)|(1<<5)|(1<<7); //set DE, RE and TXD1 as output
    60b6:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTF_DIR = (1<<3)|(1<<4)|(1<<5); //set DE, RE and TXD1 as output
    60ba:	88 e3       	ldi	r24, 0x38	; 56
    60bc:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTH_DIR = (1<<4)|(1<<5); //set LED1 and LED2 as output
    60c0:	80 e3       	ldi	r24, 0x30	; 48
    60c2:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
	PORTJ_DIR = 0;//set all IO's to input
    60c6:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
	PORTK_DIR = 0;//set all IO's to input
    60ca:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	PORTQ_DIR = (1<<0)|(1<<1)|(1<<2)|(1<<3); //set relays to output
    60ce:	8f e0       	ldi	r24, 0x0F	; 15
    60d0:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
	PORTR_DIR = (1<<0)|(1<<1); //set relays to output
    60d4:	83 e0       	ldi	r24, 0x03	; 3
    60d6:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
	

	PORTA_PIN0CTRL = (1<<PORT_OPC0_bp )|(1<<PORT_OPC1_bp);
    60da:	88 e1       	ldi	r24, 0x18	; 24
    60dc:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    60e0:	08 95       	ret

000060e2 <__mulsi3>:
    60e2:	db 01       	movw	r26, r22
    60e4:	8f 93       	push	r24
    60e6:	9f 93       	push	r25
    60e8:	0e 94 11 31 	call	0x6222	; 0x6222 <__muluhisi3>
    60ec:	bf 91       	pop	r27
    60ee:	af 91       	pop	r26
    60f0:	a2 9f       	mul	r26, r18
    60f2:	80 0d       	add	r24, r0
    60f4:	91 1d       	adc	r25, r1
    60f6:	a3 9f       	mul	r26, r19
    60f8:	90 0d       	add	r25, r0
    60fa:	b2 9f       	mul	r27, r18
    60fc:	90 0d       	add	r25, r0
    60fe:	11 24       	eor	r1, r1
    6100:	08 95       	ret

00006102 <__udivmodhi4>:
    6102:	aa 1b       	sub	r26, r26
    6104:	bb 1b       	sub	r27, r27
    6106:	51 e1       	ldi	r21, 0x11	; 17
    6108:	07 c0       	rjmp	.+14     	; 0x6118 <__udivmodhi4_ep>

0000610a <__udivmodhi4_loop>:
    610a:	aa 1f       	adc	r26, r26
    610c:	bb 1f       	adc	r27, r27
    610e:	a6 17       	cp	r26, r22
    6110:	b7 07       	cpc	r27, r23
    6112:	10 f0       	brcs	.+4      	; 0x6118 <__udivmodhi4_ep>
    6114:	a6 1b       	sub	r26, r22
    6116:	b7 0b       	sbc	r27, r23

00006118 <__udivmodhi4_ep>:
    6118:	88 1f       	adc	r24, r24
    611a:	99 1f       	adc	r25, r25
    611c:	5a 95       	dec	r21
    611e:	a9 f7       	brne	.-22     	; 0x610a <__udivmodhi4_loop>
    6120:	80 95       	com	r24
    6122:	90 95       	com	r25
    6124:	bc 01       	movw	r22, r24
    6126:	cd 01       	movw	r24, r26
    6128:	08 95       	ret

0000612a <__divmodhi4>:
    612a:	97 fb       	bst	r25, 7
    612c:	07 2e       	mov	r0, r23
    612e:	16 f4       	brtc	.+4      	; 0x6134 <__divmodhi4+0xa>
    6130:	00 94       	com	r0
    6132:	07 d0       	rcall	.+14     	; 0x6142 <__divmodhi4_neg1>
    6134:	77 fd       	sbrc	r23, 7
    6136:	09 d0       	rcall	.+18     	; 0x614a <__divmodhi4_neg2>
    6138:	0e 94 81 30 	call	0x6102	; 0x6102 <__udivmodhi4>
    613c:	07 fc       	sbrc	r0, 7
    613e:	05 d0       	rcall	.+10     	; 0x614a <__divmodhi4_neg2>
    6140:	3e f4       	brtc	.+14     	; 0x6150 <__divmodhi4_exit>

00006142 <__divmodhi4_neg1>:
    6142:	90 95       	com	r25
    6144:	81 95       	neg	r24
    6146:	9f 4f       	sbci	r25, 0xFF	; 255
    6148:	08 95       	ret

0000614a <__divmodhi4_neg2>:
    614a:	70 95       	com	r23
    614c:	61 95       	neg	r22
    614e:	7f 4f       	sbci	r23, 0xFF	; 255

00006150 <__divmodhi4_exit>:
    6150:	08 95       	ret

00006152 <__udivmodsi4>:
    6152:	a1 e2       	ldi	r26, 0x21	; 33
    6154:	1a 2e       	mov	r1, r26
    6156:	aa 1b       	sub	r26, r26
    6158:	bb 1b       	sub	r27, r27
    615a:	fd 01       	movw	r30, r26
    615c:	0d c0       	rjmp	.+26     	; 0x6178 <__udivmodsi4_ep>

0000615e <__udivmodsi4_loop>:
    615e:	aa 1f       	adc	r26, r26
    6160:	bb 1f       	adc	r27, r27
    6162:	ee 1f       	adc	r30, r30
    6164:	ff 1f       	adc	r31, r31
    6166:	a2 17       	cp	r26, r18
    6168:	b3 07       	cpc	r27, r19
    616a:	e4 07       	cpc	r30, r20
    616c:	f5 07       	cpc	r31, r21
    616e:	20 f0       	brcs	.+8      	; 0x6178 <__udivmodsi4_ep>
    6170:	a2 1b       	sub	r26, r18
    6172:	b3 0b       	sbc	r27, r19
    6174:	e4 0b       	sbc	r30, r20
    6176:	f5 0b       	sbc	r31, r21

00006178 <__udivmodsi4_ep>:
    6178:	66 1f       	adc	r22, r22
    617a:	77 1f       	adc	r23, r23
    617c:	88 1f       	adc	r24, r24
    617e:	99 1f       	adc	r25, r25
    6180:	1a 94       	dec	r1
    6182:	69 f7       	brne	.-38     	; 0x615e <__udivmodsi4_loop>
    6184:	60 95       	com	r22
    6186:	70 95       	com	r23
    6188:	80 95       	com	r24
    618a:	90 95       	com	r25
    618c:	9b 01       	movw	r18, r22
    618e:	ac 01       	movw	r20, r24
    6190:	bd 01       	movw	r22, r26
    6192:	cf 01       	movw	r24, r30
    6194:	08 95       	ret

00006196 <__divmodsi4>:
    6196:	05 2e       	mov	r0, r21
    6198:	97 fb       	bst	r25, 7
    619a:	1e f4       	brtc	.+6      	; 0x61a2 <__divmodsi4+0xc>
    619c:	00 94       	com	r0
    619e:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <__negsi2>
    61a2:	57 fd       	sbrc	r21, 7
    61a4:	07 d0       	rcall	.+14     	; 0x61b4 <__divmodsi4_neg2>
    61a6:	0e 94 a9 30 	call	0x6152	; 0x6152 <__udivmodsi4>
    61aa:	07 fc       	sbrc	r0, 7
    61ac:	03 d0       	rcall	.+6      	; 0x61b4 <__divmodsi4_neg2>
    61ae:	4e f4       	brtc	.+18     	; 0x61c2 <__divmodsi4_exit>
    61b0:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <__negsi2>

000061b4 <__divmodsi4_neg2>:
    61b4:	50 95       	com	r21
    61b6:	40 95       	com	r20
    61b8:	30 95       	com	r19
    61ba:	21 95       	neg	r18
    61bc:	3f 4f       	sbci	r19, 0xFF	; 255
    61be:	4f 4f       	sbci	r20, 0xFF	; 255
    61c0:	5f 4f       	sbci	r21, 0xFF	; 255

000061c2 <__divmodsi4_exit>:
    61c2:	08 95       	ret

000061c4 <__negsi2>:
    61c4:	90 95       	com	r25
    61c6:	80 95       	com	r24
    61c8:	70 95       	com	r23
    61ca:	61 95       	neg	r22
    61cc:	7f 4f       	sbci	r23, 0xFF	; 255
    61ce:	8f 4f       	sbci	r24, 0xFF	; 255
    61d0:	9f 4f       	sbci	r25, 0xFF	; 255
    61d2:	08 95       	ret

000061d4 <__tablejump2__>:
    61d4:	ee 0f       	add	r30, r30
    61d6:	ff 1f       	adc	r31, r31
    61d8:	88 1f       	adc	r24, r24
    61da:	8b bf       	out	0x3b, r24	; 59
    61dc:	07 90       	elpm	r0, Z+
    61de:	f6 91       	elpm	r31, Z
    61e0:	e0 2d       	mov	r30, r0
    61e2:	1b be       	out	0x3b, r1	; 59
    61e4:	19 94       	eijmp

000061e6 <__mulhisi3>:
    61e6:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <__umulhisi3>
    61ea:	33 23       	and	r19, r19
    61ec:	12 f4       	brpl	.+4      	; 0x61f2 <__mulhisi3+0xc>
    61ee:	8a 1b       	sub	r24, r26
    61f0:	9b 0b       	sbc	r25, r27
    61f2:	0c 94 0c 31 	jmp	0x6218	; 0x6218 <__usmulhisi3_tail>

000061f6 <__umulhisi3>:
    61f6:	a2 9f       	mul	r26, r18
    61f8:	b0 01       	movw	r22, r0
    61fa:	b3 9f       	mul	r27, r19
    61fc:	c0 01       	movw	r24, r0
    61fe:	a3 9f       	mul	r26, r19
    6200:	70 0d       	add	r23, r0
    6202:	81 1d       	adc	r24, r1
    6204:	11 24       	eor	r1, r1
    6206:	91 1d       	adc	r25, r1
    6208:	b2 9f       	mul	r27, r18
    620a:	70 0d       	add	r23, r0
    620c:	81 1d       	adc	r24, r1
    620e:	11 24       	eor	r1, r1
    6210:	91 1d       	adc	r25, r1
    6212:	08 95       	ret

00006214 <__usmulhisi3>:
    6214:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <__umulhisi3>

00006218 <__usmulhisi3_tail>:
    6218:	b7 ff       	sbrs	r27, 7
    621a:	08 95       	ret
    621c:	82 1b       	sub	r24, r18
    621e:	93 0b       	sbc	r25, r19
    6220:	08 95       	ret

00006222 <__muluhisi3>:
    6222:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <__umulhisi3>
    6226:	a5 9f       	mul	r26, r21
    6228:	90 0d       	add	r25, r0
    622a:	b4 9f       	mul	r27, r20
    622c:	90 0d       	add	r25, r0
    622e:	a4 9f       	mul	r26, r20
    6230:	80 0d       	add	r24, r0
    6232:	91 1d       	adc	r25, r1
    6234:	11 24       	eor	r1, r1
    6236:	08 95       	ret

00006238 <memcpy>:
    6238:	fb 01       	movw	r30, r22
    623a:	dc 01       	movw	r26, r24
    623c:	02 c0       	rjmp	.+4      	; 0x6242 <memcpy+0xa>
    623e:	01 90       	ld	r0, Z+
    6240:	0d 92       	st	X+, r0
    6242:	41 50       	subi	r20, 0x01	; 1
    6244:	50 40       	sbci	r21, 0x00	; 0
    6246:	d8 f7       	brcc	.-10     	; 0x623e <memcpy+0x6>
    6248:	08 95       	ret

0000624a <_exit>:
    624a:	f8 94       	cli

0000624c <__stop_program>:
    624c:	ff cf       	rjmp	.-2      	; 0x624c <__stop_program>
