
SmartFactory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000058  00020000  00020000  000066c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .jmp_table    000000a8  00007e00  00007e00  00006618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00006208  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         0000033c  00802000  00006208  000062dc  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002ab  0080233c  0080233c  0000671c  2**4
                  ALLOC
  5 .comment      00000060  00000000  00000000  00006718  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006778  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000a68  00000000  00000000  000067b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00013700  00000000  00000000  00007220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006b66  00000000  00000000  0001a920  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000091d0  00000000  00000000  00021486  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001e94  00000000  00000000  0002a658  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0003af63  00000000  00000000  0002c4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008c48  00000000  00000000  0006744f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000968  00000000  00000000  00070098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000c60c  00000000  00000000  00070a00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_CommonSPM>:
   20000:	fc 01       	movw	r30, r24
   20002:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20006:	2d e9       	ldi	r18, 0x9D	; 157
   20008:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
   2000c:	e8 95       	spm
   2000e:	11 24       	eor	r1, r1
   20010:	3b bf       	out	0x3b, r19	; 59
   20012:	08 95       	ret

00020014 <nvm_common_spm>:
   20014:	9b b7       	in	r25, 0x3b	; 59
   20016:	8b bf       	out	0x3b, r24	; 59
   20018:	fb 01       	movw	r30, r22
   2001a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2001e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20022:	7d e9       	ldi	r23, 0x9D	; 157
   20024:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
   20028:	e8 95       	spm
   2002a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2002e:	9b bf       	out	0x3b, r25	; 59
   20030:	08 95       	ret

00020032 <nvm_flash_load_word_to_buffer>:
   20032:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
   20036:	27 fd       	sbrc	r18, 7
   20038:	fc cf       	rjmp	.-8      	; 0x20032 <nvm_flash_load_word_to_buffer>
   2003a:	9b b7       	in	r25, 0x3b	; 59
   2003c:	8b bf       	out	0x3b, r24	; 59
   2003e:	fb 01       	movw	r30, r22
   20040:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20044:	23 e2       	ldi	r18, 0x23	; 35
   20046:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2004a:	0a 01       	movw	r0, r20
   2004c:	e8 95       	spm
   2004e:	11 24       	eor	r1, r1
   20050:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20054:	9b bf       	out	0x3b, r25	; 59
   20056:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 02 	jmp	0x55e	; 0x55e <__ctors_end>
       4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
       8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
       c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      10:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      14:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      18:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      1c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      20:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      24:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      28:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      2c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      30:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__vector_12>
      34:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      38:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      3c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      40:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      44:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      48:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      4c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      50:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      54:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      58:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      5c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      60:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      64:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      68:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      6c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      70:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      74:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      78:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      7c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      80:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      84:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      88:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      8c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      90:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      94:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      98:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      9c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      a8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      b4:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_45>
      b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      e8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      f8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
      fc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     100:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     104:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     108:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     10c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     110:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     114:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     118:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     11c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     120:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     124:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     128:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     12c:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__vector_75>
     130:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     134:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     138:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     13c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     140:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     144:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     148:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     14c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     150:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     154:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     158:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     15c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     160:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     164:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     168:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     16c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     170:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     174:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     178:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     17c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     180:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     184:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     188:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     18c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     190:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__vector_100>
     194:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__vector_101>
     198:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     19c:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1a8:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_106>
     1ac:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1b8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1bc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1c8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1cc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1d8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1dc:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1e8:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1ec:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1f0:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__bad_interrupt>
     1f4:	0c 94 aa 29 	jmp	0x5354	; 0x5354 <__vector_125>
     1f8:	0c 94 77 2a 	jmp	0x54ee	; 0x54ee <__vector_126>
     1fc:	bc 0c       	add	r11, r12
     1fe:	cb 0c       	add	r12, r11
     200:	da 0c       	add	r13, r10
     202:	e9 0c       	add	r14, r9
     204:	f7 0c       	add	r15, r7
     206:	06 0d       	add	r16, r6
     208:	15 0d       	add	r17, r5
     20a:	23 0d       	add	r18, r3
     20c:	30 0d       	add	r19, r0
     20e:	3f 0d       	add	r19, r15
     210:	4e 0d       	add	r20, r14
     212:	5d 0d       	add	r21, r13
     214:	46 16       	cp	r4, r22
     216:	55 16       	cp	r5, r21
     218:	64 16       	cp	r6, r20
     21a:	73 16       	cp	r7, r19
     21c:	81 16       	cp	r8, r17
     21e:	90 16       	cp	r9, r16
     220:	9f 16       	cp	r9, r31
     222:	ad 16       	cp	r10, r29
     224:	ba 16       	cp	r11, r26
     226:	c9 16       	cp	r12, r25
     228:	d8 16       	cp	r13, r24
     22a:	e7 16       	cp	r14, r23
     22c:	9f 17       	cp	r25, r31
     22e:	9f 17       	cp	r25, r31
     230:	9f 17       	cp	r25, r31
     232:	9f 17       	cp	r25, r31
     234:	9f 17       	cp	r25, r31
     236:	9f 17       	cp	r25, r31
     238:	9f 17       	cp	r25, r31
     23a:	9f 17       	cp	r25, r31
     23c:	9f 17       	cp	r25, r31
     23e:	9f 17       	cp	r25, r31
     240:	9f 17       	cp	r25, r31
     242:	9f 17       	cp	r25, r31
     244:	9f 17       	cp	r25, r31
     246:	9f 17       	cp	r25, r31
     248:	9f 17       	cp	r25, r31
     24a:	9f 17       	cp	r25, r31
     24c:	9f 17       	cp	r25, r31
     24e:	9f 17       	cp	r25, r31
     250:	9f 17       	cp	r25, r31
     252:	9f 17       	cp	r25, r31
     254:	9d 17       	cp	r25, r29
     256:	9d 17       	cp	r25, r29
     258:	9d 17       	cp	r25, r29
     25a:	9d 17       	cp	r25, r29
     25c:	9d 17       	cp	r25, r29
     25e:	9d 17       	cp	r25, r29
     260:	9d 17       	cp	r25, r29
     262:	9d 17       	cp	r25, r29
     264:	9d 17       	cp	r25, r29
     266:	9d 17       	cp	r25, r29
     268:	9d 17       	cp	r25, r29
     26a:	9d 17       	cp	r25, r29
     26c:	9d 17       	cp	r25, r29
     26e:	9d 17       	cp	r25, r29
     270:	9d 17       	cp	r25, r29
     272:	9d 17       	cp	r25, r29
     274:	9d 17       	cp	r25, r29
     276:	9d 17       	cp	r25, r29
     278:	9d 17       	cp	r25, r29
     27a:	9d 17       	cp	r25, r29
     27c:	a1 17       	cp	r26, r17
     27e:	a1 17       	cp	r26, r17
     280:	a1 17       	cp	r26, r17
     282:	a1 17       	cp	r26, r17
     284:	a1 17       	cp	r26, r17
     286:	a1 17       	cp	r26, r17
     288:	a1 17       	cp	r26, r17
     28a:	a1 17       	cp	r26, r17
     28c:	a1 17       	cp	r26, r17
     28e:	a1 17       	cp	r26, r17
     290:	9b 17       	cp	r25, r27
     292:	9b 17       	cp	r25, r27
     294:	9b 17       	cp	r25, r27
     296:	9b 17       	cp	r25, r27
     298:	9b 17       	cp	r25, r27
     29a:	9b 17       	cp	r25, r27
     29c:	9b 17       	cp	r25, r27
     29e:	9b 17       	cp	r25, r27
     2a0:	9b 17       	cp	r25, r27
     2a2:	9b 17       	cp	r25, r27
     2a4:	a1 17       	cp	r26, r17
     2a6:	a1 17       	cp	r26, r17
     2a8:	a1 17       	cp	r26, r17
     2aa:	a1 17       	cp	r26, r17
     2ac:	a1 17       	cp	r26, r17
     2ae:	a1 17       	cp	r26, r17
     2b0:	a1 17       	cp	r26, r17
     2b2:	a1 17       	cp	r26, r17
     2b4:	a1 17       	cp	r26, r17
     2b6:	a1 17       	cp	r26, r17
     2b8:	a1 17       	cp	r26, r17
     2ba:	a1 17       	cp	r26, r17
     2bc:	a1 17       	cp	r26, r17
     2be:	a1 17       	cp	r26, r17
     2c0:	a1 17       	cp	r26, r17
     2c2:	a1 17       	cp	r26, r17
     2c4:	a1 17       	cp	r26, r17
     2c6:	a1 17       	cp	r26, r17
     2c8:	a1 17       	cp	r26, r17
     2ca:	a1 17       	cp	r26, r17
     2cc:	99 17       	cp	r25, r25
     2ce:	99 17       	cp	r25, r25
     2d0:	99 17       	cp	r25, r25
     2d2:	99 17       	cp	r25, r25
     2d4:	99 17       	cp	r25, r25
     2d6:	99 17       	cp	r25, r25
     2d8:	99 17       	cp	r25, r25
     2da:	99 17       	cp	r25, r25
     2dc:	99 17       	cp	r25, r25
     2de:	99 17       	cp	r25, r25
     2e0:	99 17       	cp	r25, r25
     2e2:	99 17       	cp	r25, r25
     2e4:	99 17       	cp	r25, r25
     2e6:	99 17       	cp	r25, r25
     2e8:	99 17       	cp	r25, r25
     2ea:	97 17       	cp	r25, r23
     2ec:	97 17       	cp	r25, r23
     2ee:	97 17       	cp	r25, r23
     2f0:	97 17       	cp	r25, r23
     2f2:	97 17       	cp	r25, r23
     2f4:	97 17       	cp	r25, r23
     2f6:	97 17       	cp	r25, r23
     2f8:	97 17       	cp	r25, r23
     2fa:	97 17       	cp	r25, r23
     2fc:	97 17       	cp	r25, r23
     2fe:	97 17       	cp	r25, r23
     300:	97 17       	cp	r25, r23
     302:	97 17       	cp	r25, r23
     304:	97 17       	cp	r25, r23
     306:	97 17       	cp	r25, r23
     308:	95 17       	cp	r25, r21
     30a:	95 17       	cp	r25, r21
     30c:	95 17       	cp	r25, r21
     30e:	95 17       	cp	r25, r21
     310:	95 17       	cp	r25, r21
     312:	95 17       	cp	r25, r21
     314:	95 17       	cp	r25, r21
     316:	95 17       	cp	r25, r21
     318:	95 17       	cp	r25, r21
     31a:	95 17       	cp	r25, r21
     31c:	95 17       	cp	r25, r21
     31e:	95 17       	cp	r25, r21
     320:	95 17       	cp	r25, r21
     322:	95 17       	cp	r25, r21
     324:	95 17       	cp	r25, r21
     326:	95 17       	cp	r25, r21
     328:	95 17       	cp	r25, r21
     32a:	95 17       	cp	r25, r21
     32c:	95 17       	cp	r25, r21
     32e:	95 17       	cp	r25, r21
     330:	93 17       	cp	r25, r19
     332:	93 17       	cp	r25, r19
     334:	93 17       	cp	r25, r19
     336:	93 17       	cp	r25, r19
     338:	93 17       	cp	r25, r19
     33a:	93 17       	cp	r25, r19
     33c:	93 17       	cp	r25, r19
     33e:	93 17       	cp	r25, r19
     340:	93 17       	cp	r25, r19
     342:	93 17       	cp	r25, r19
     344:	91 17       	cp	r25, r17
     346:	91 17       	cp	r25, r17
     348:	91 17       	cp	r25, r17
     34a:	91 17       	cp	r25, r17
     34c:	91 17       	cp	r25, r17
     34e:	91 17       	cp	r25, r17
     350:	91 17       	cp	r25, r17
     352:	91 17       	cp	r25, r17
     354:	91 17       	cp	r25, r17
     356:	91 17       	cp	r25, r17
     358:	91 17       	cp	r25, r17
     35a:	91 17       	cp	r25, r17
     35c:	91 17       	cp	r25, r17
     35e:	91 17       	cp	r25, r17
     360:	91 17       	cp	r25, r17
     362:	91 17       	cp	r25, r17
     364:	91 17       	cp	r25, r17
     366:	91 17       	cp	r25, r17
     368:	91 17       	cp	r25, r17
     36a:	91 17       	cp	r25, r17
     36c:	91 17       	cp	r25, r17
     36e:	91 17       	cp	r25, r17
     370:	91 17       	cp	r25, r17
     372:	91 17       	cp	r25, r17
     374:	91 17       	cp	r25, r17
     376:	91 17       	cp	r25, r17
     378:	91 17       	cp	r25, r17
     37a:	91 17       	cp	r25, r17
     37c:	91 17       	cp	r25, r17
     37e:	91 17       	cp	r25, r17
     380:	8f 17       	cp	r24, r31
     382:	8f 17       	cp	r24, r31
     384:	8f 17       	cp	r24, r31
     386:	8f 17       	cp	r24, r31
     388:	8f 17       	cp	r24, r31
     38a:	8d 17       	cp	r24, r29
     38c:	8d 17       	cp	r24, r29
     38e:	8d 17       	cp	r24, r29
     390:	8d 17       	cp	r24, r29
     392:	8d 17       	cp	r24, r29
     394:	8b 17       	cp	r24, r27
     396:	8b 17       	cp	r24, r27
     398:	8b 17       	cp	r24, r27
     39a:	8b 17       	cp	r24, r27
     39c:	8b 17       	cp	r24, r27
     39e:	89 17       	cp	r24, r25
     3a0:	89 17       	cp	r24, r25
     3a2:	89 17       	cp	r24, r25
     3a4:	89 17       	cp	r24, r25
     3a6:	89 17       	cp	r24, r25
     3a8:	a3 17       	cp	r26, r19
     3aa:	a3 17       	cp	r26, r19
     3ac:	a3 17       	cp	r26, r19
     3ae:	a3 17       	cp	r26, r19
     3b0:	a3 17       	cp	r26, r19
     3b2:	a3 17       	cp	r26, r19
     3b4:	0f 24       	eor	r0, r15
     3b6:	12 24       	eor	r1, r2
     3b8:	15 24       	eor	r1, r5
     3ba:	18 24       	eor	r1, r8
     3bc:	1b 24       	eor	r1, r11
     3be:	1e 24       	eor	r1, r14
     3c0:	21 24       	eor	r2, r1

000003c2 <__trampolines_start>:
     3c2:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <_Z15ReadSharpSensorh>
     3c6:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <IO_ReadWrite+0xd0>
     3ca:	0c 94 3b 1a 	jmp	0x3476	; 0x3476 <udi_cdc_getsetting>
     3ce:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <_Z13MoveTurntablebji>
     3d2:	0c 94 45 14 	jmp	0x288a	; 0x288a <_Z9ToggleLEDv>
     3d6:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <IO_ReadWrite+0x5a>
     3da:	0c 94 46 16 	jmp	0x2c8c	; 0x2c8c <_Z12IO_ReadWritebh+0x1e>
     3de:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <HomeSorterArm>
     3e2:	0c 94 05 04 	jmp	0x80a	; 0x80a <_Z9isSmallerii>
     3e6:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <_Z13requestResultv>
     3ea:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <_Z12IO_ReadWritebh+0x78>
     3ee:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <udi_cdc_data_sent>
     3f2:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <_Z15ReadSharpSensorh+0x46>
     3f6:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <MoveSorterArmTo>
     3fa:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <_Z15ReadSharpSensorh+0x22>
     3fe:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <udi_cdc_data_received>
     402:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <_Z12IO_ReadWritebh+0xec>
     406:	0c 94 d8 16 	jmp	0x2db0	; 0x2db0 <_Z12IO_ReadWritebh+0x142>
     40a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <_Z15ReadSharpSensorh+0x3e>
     40e:	0c 94 12 24 	jmp	0x4824	; 0x4824 <udd_ep_get_size+0x28>
     412:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <_Z7isEqualii>
     416:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <_Z9set_relaybh>
     41a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <_Z12IO_ReadWritebh+0x124>
     41e:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <_Z13StopTurntablej>
     422:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <_Z15ReadSharpSensorh+0x4a>
     426:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <_Z15ReadSharpSensorh+0x2a>
     42a:	0c 94 50 1f 	jmp	0x3ea0	; 0x3ea0 <udc_valid_address>
     42e:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <_Z15ReadSharpSensorh+0x52>
     432:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <_Z12IO_ReadWritebh+0xd0>
     436:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_Z8multiplyii>
     43a:	0c 94 85 03 	jmp	0x70a	; 0x70a <_Z3addii>
     43e:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <udi_cdc_data_sof_notify>
     442:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <_Z13PulseSolenoidh>
     446:	0c 94 47 12 	jmp	0x248e	; 0x248e <MoveSorterArmDistance>
     44a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <_Z3LEDb>
     44e:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <_Z11printNumberj>
     452:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <_Z15ReadSharpSensorh+0x26>
     456:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_Z15ReadSharpSensorh+0x2e>
     45a:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <_Z11DigitalReadi>
     45e:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <_Z15ReadSharpSensorh+0x4e>
     462:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <IO_ReadWrite+0xec>
     466:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <udi_cdc_comm_disable>
     46a:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <IO_ReadWrite+0x1e>
     46e:	0c 94 2d 14 	jmp	0x285a	; 0x285a <_Z10SetAddresshh>
     472:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <IO_ReadWrite+0x124>
     476:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <_Z8MoveBeltbji>
     47a:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <udi_cdc_data_setup>
     47e:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <ElevatorIsReady>
     482:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <_Z12IO_ReadWritebh+0x106>
     486:	0c 94 1b 24 	jmp	0x4836	; 0x4836 <udd_ep_get_size+0x3a>
     48a:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <_Z12IO_ReadWritebh+0x160>
     48e:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <IO_ReadWrite+0x3c>
     492:	0c 94 81 03 	jmp	0x702	; 0x702 <_Z6invertj>
     496:	0c 94 1e 24 	jmp	0x483c	; 0x483c <udd_ep_get_size+0x40>
     49a:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <IO_ReadWrite+0x78>
     49e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <_Z15passthrough_TWIv>
     4a2:	0c 94 90 16 	jmp	0x2d20	; 0x2d20 <_Z12IO_ReadWritebh+0xb2>
     4a6:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <_Z14requestStartedv>
     4aa:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <_Z15ReadSharpSensorh+0x36>
     4ae:	0c 94 18 10 	jmp	0x2030	; 0x2030 <SorterarmIsFinnished>
     4b2:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <_Z8isBiggerii>
     4b6:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <IO_ReadWrite+0x106>
     4ba:	0c 94 64 16 	jmp	0x2cc8	; 0x2cc8 <_Z12IO_ReadWritebh+0x5a>
     4be:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <_Z15ReadSharpSensorh+0x42>
     4c2:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_Z9delay1secv>
     4c6:	0c 94 87 1a 	jmp	0x350e	; 0x350e <udi_cdc_line_coding_received>
     4ca:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <_Z12IO_ReadWritebh+0x94>
     4ce:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <IO_ReadWrite+0x160>
     4d2:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <udi_cdc_comm_setup>
     4d6:	0c 94 20 04 	jmp	0x840	; 0x840 <_Z9logic_andbb>
     4da:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <IO_ReadWrite+0x142>
     4de:	0c 94 4c 13 	jmp	0x2698	; 0x2698 <_Z8StopBeltj>
     4e2:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <_Z15OptocouplerReadi>
     4e6:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <_Z13DemoTestBlockv>
     4ea:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <_Z10AnalogReadi>
     4ee:	0c 94 23 04 	jmp	0x846	; 0x846 <_Z9logic_xorbb>
     4f2:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <udi_cdc_data_disable>
     4f6:	0c 94 18 24 	jmp	0x4830	; 0x4830 <udd_ep_get_size+0x34>
     4fa:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <_Z15ReadSharpSensorh+0x3a>
     4fe:	0c 94 15 14 	jmp	0x282a	; 0x282a <_Z17StopDemoTestBlockv>
     502:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <udi_cdc_serial_state_msg_sent>
     506:	0c 94 af 03 	jmp	0x75e	; 0x75e <_Z8subtractii>
     50a:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_Z8delay_msj>
     50e:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <StopSorterArm>
     512:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <MoveElevator>
     516:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <IO_ReadWrite+0x94>
     51a:	0c 94 15 24 	jmp	0x482a	; 0x482a <udd_ep_get_size+0x2e>
     51e:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <IO_ReadWrite+0xb2>
     522:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <ReadColourSensor>
     526:	0c 94 0c 04 	jmp	0x818	; 0x818 <_Z15isBiggerOrEqualii>
     52a:	0c 94 91 17 	jmp	0x2f22	; 0x2f22 <_Z15ReadSharpSensorh+0x32>
     52e:	0c 94 ae 14 	jmp	0x295c	; 0x295c <_Z8Solenoidhb>
     532:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <SelectColour>
     536:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <_Z12IO_ReadWritebh+0x3c>
     53a:	0c 94 1a 04 	jmp	0x834	; 0x834 <_Z8logic_orbb>
     53e:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <_Z15ReadSharpSensorh+0x56>
     542:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <udi_cdc_data_enable>
     546:	0c 94 0f 24 	jmp	0x481e	; 0x481e <udd_ep_get_size+0x22>
     54a:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <_Z6divideii>
     54e:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <StopElevator>
     552:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <udi_cdc_comm_enable>
     556:	0c 94 21 24 	jmp	0x4842	; 0x4842 <udd_ep_get_size+0x46>
     55a:	0c 94 13 04 	jmp	0x826	; 0x826 <_Z16isSmallerOrEqualii>

0000055e <__ctors_end>:
     55e:	11 24       	eor	r1, r1
     560:	1f be       	out	0x3f, r1	; 63
     562:	cf ef       	ldi	r28, 0xFF	; 255
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df e3       	ldi	r29, 0x3F	; 63
     568:	de bf       	out	0x3e, r29	; 62
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	0c bf       	out	0x3c, r16	; 60
     56e:	18 be       	out	0x38, r1	; 56
     570:	19 be       	out	0x39, r1	; 57
     572:	1a be       	out	0x3a, r1	; 58
     574:	1b be       	out	0x3b, r1	; 59

00000576 <__do_copy_data>:
     576:	13 e2       	ldi	r17, 0x23	; 35
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e2       	ldi	r27, 0x20	; 32
     57c:	e8 e0       	ldi	r30, 0x08	; 8
     57e:	f2 e6       	ldi	r31, 0x62	; 98
     580:	00 e0       	ldi	r16, 0x00	; 0
     582:	0b bf       	out	0x3b, r16	; 59
     584:	02 c0       	rjmp	.+4      	; 0x58a <__do_copy_data+0x14>
     586:	07 90       	elpm	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	ac 33       	cpi	r26, 0x3C	; 60
     58c:	b1 07       	cpc	r27, r17
     58e:	d9 f7       	brne	.-10     	; 0x586 <__do_copy_data+0x10>
     590:	1b be       	out	0x3b, r1	; 59

00000592 <__do_clear_bss>:
     592:	25 e2       	ldi	r18, 0x25	; 37
     594:	ac e3       	ldi	r26, 0x3C	; 60
     596:	b3 e2       	ldi	r27, 0x23	; 35
     598:	01 c0       	rjmp	.+2      	; 0x59c <.do_clear_bss_start>

0000059a <.do_clear_bss_loop>:
     59a:	1d 92       	st	X+, r1

0000059c <.do_clear_bss_start>:
     59c:	a7 3e       	cpi	r26, 0xE7	; 231
     59e:	b2 07       	cpc	r27, r18
     5a0:	e1 f7       	brne	.-8      	; 0x59a <.do_clear_bss_loop>
     5a2:	0e 94 0f 19 	call	0x321e	; 0x321e <main>
     5a6:	0c 94 02 31 	jmp	0x6204	; 0x6204 <_exit>

000005aa <__bad_interrupt>:
     5aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005ae <SP_ReadByte>:
     5ae:	3b b7       	in	r19, 0x3b	; 59
     5b0:	8b bf       	out	0x3b, r24	; 59
     5b2:	fb 01       	movw	r30, r22
     5b4:	86 91       	elpm	r24, Z
     5b6:	3b bf       	out	0x3b, r19	; 59
     5b8:	08 95       	ret

000005ba <SP_ReadWord>:
     5ba:	3b b7       	in	r19, 0x3b	; 59
     5bc:	8b bf       	out	0x3b, r24	; 59
     5be:	fb 01       	movw	r30, r22
     5c0:	87 91       	elpm	r24, Z+
     5c2:	96 91       	elpm	r25, Z
     5c4:	3b bf       	out	0x3b, r19	; 59
     5c6:	08 95       	ret

000005c8 <SP_ReadCalibrationByte>:
     5c8:	42 e0       	ldi	r20, 0x02	; 2
     5ca:	70 c0       	rjmp	.+224    	; 0x6ac <SP_CommonLPM>

000005cc <SP_ReadUserSignatureByte>:
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	6e c0       	rjmp	.+220    	; 0x6ac <SP_CommonLPM>

000005d0 <SP_ReadFuseByte>:
     5d0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
     5d4:	88 27       	eor	r24, r24
     5d6:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
     5da:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
     5de:	47 e0       	ldi	r20, 0x07	; 7
     5e0:	55 d0       	rcall	.+170    	; 0x68c <SP_CommonCMD>
     5e2:	cb 01       	movw	r24, r22
     5e4:	08 95       	ret

000005e6 <SP_WriteLockBits>:
     5e6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     5ea:	48 e0       	ldi	r20, 0x08	; 8
     5ec:	4f c0       	rjmp	.+158    	; 0x68c <SP_CommonCMD>

000005ee <SP_ReadLockBits>:
     5ee:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
     5f2:	08 95       	ret

000005f4 <SP_EraseUserSignatureRow>:
     5f4:	3b b7       	in	r19, 0x3b	; 59
     5f6:	48 e1       	ldi	r20, 0x18	; 24
     5f8:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005fc <SP_WriteUserSignatureRow>:
     5fc:	3b b7       	in	r19, 0x3b	; 59
     5fe:	4a e1       	ldi	r20, 0x1A	; 26
     600:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000604 <SP_EraseApplicationSection>:
     604:	3b b7       	in	r19, 0x3b	; 59
     606:	40 e2       	ldi	r20, 0x20	; 32
     608:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000060c <SP_EraseApplicationPage>:
     60c:	3b b7       	in	r19, 0x3b	; 59
     60e:	8b bf       	out	0x3b, r24	; 59
     610:	cb 01       	movw	r24, r22
     612:	42 e2       	ldi	r20, 0x22	; 34
     614:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000618 <SP_LoadFlashWord>:
     618:	3b b7       	in	r19, 0x3b	; 59
     61a:	0b 01       	movw	r0, r22
     61c:	43 e2       	ldi	r20, 0x23	; 35
     61e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000622 <SP_WriteApplicationPage>:
     622:	3b b7       	in	r19, 0x3b	; 59
     624:	8b bf       	out	0x3b, r24	; 59
     626:	cb 01       	movw	r24, r22
     628:	44 e2       	ldi	r20, 0x24	; 36
     62a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000062e <SP_EraseWriteApplicationPage>:
     62e:	3b b7       	in	r19, 0x3b	; 59
     630:	8b bf       	out	0x3b, r24	; 59
     632:	cb 01       	movw	r24, r22
     634:	45 e2       	ldi	r20, 0x25	; 37
     636:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000063a <SP_EraseFlashBuffer>:
     63a:	3b b7       	in	r19, 0x3b	; 59
     63c:	46 e2       	ldi	r20, 0x26	; 38
     63e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000642 <SP_EraseBootPage>:
     642:	3b b7       	in	r19, 0x3b	; 59
     644:	8b bf       	out	0x3b, r24	; 59
     646:	cb 01       	movw	r24, r22
     648:	4a e2       	ldi	r20, 0x2A	; 42
     64a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000064e <SP_WriteBootPage>:
     64e:	3b b7       	in	r19, 0x3b	; 59
     650:	8b bf       	out	0x3b, r24	; 59
     652:	cb 01       	movw	r24, r22
     654:	4c e2       	ldi	r20, 0x2C	; 44
     656:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000065a <SP_EraseWriteBootPage>:
     65a:	3b b7       	in	r19, 0x3b	; 59
     65c:	8b bf       	out	0x3b, r24	; 59
     65e:	cb 01       	movw	r24, r22
     660:	4d e2       	ldi	r20, 0x2D	; 45
     662:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000666 <SP_ApplicationCRC>:
     666:	48 e3       	ldi	r20, 0x38	; 56
     668:	11 c0       	rjmp	.+34     	; 0x68c <SP_CommonCMD>

0000066a <SP_BootCRC>:
     66a:	49 e3       	ldi	r20, 0x39	; 57
     66c:	0f c0       	rjmp	.+30     	; 0x68c <SP_CommonCMD>

0000066e <SP_LockSPM>:
     66e:	28 ed       	ldi	r18, 0xD8	; 216
     670:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
     67a:	08 95       	ret

0000067c <SP_WaitForSPM>:
     67c:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
     680:	27 fd       	sbrc	r18, 7
     682:	fc cf       	rjmp	.-8      	; 0x67c <SP_WaitForSPM>
     684:	22 27       	eor	r18, r18
     686:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     68a:	08 95       	ret

0000068c <SP_CommonCMD>:
     68c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     690:	28 ed       	ldi	r18, 0xD8	; 216
     692:	31 e0       	ldi	r19, 0x01	; 1
     694:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     698:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
     69c:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     6a0:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
     6a4:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
     6a8:	99 27       	eor	r25, r25
     6aa:	08 95       	ret

000006ac <SP_CommonLPM>:
     6ac:	fc 01       	movw	r30, r24
     6ae:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     6b2:	84 91       	lpm	r24, Z
     6b4:	08 95       	ret

000006b6 <_Z9delay1secv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	8d e3       	ldi	r24, 0x3D	; 61
     6ba:	99 e4       	ldi	r25, 0x49	; 73
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	80 40       	sbci	r24, 0x00	; 0
     6c0:	90 40       	sbci	r25, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <_Z9delay1secv+0x6>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <_Z9delay1secv+0x10>
     6c6:	00 00       	nop
     6c8:	08 95       	ret

000006ca <_Z8delay_msj>:
}


void delay_ms(uint16_t ms)
{
	for(uint16_t i = 0; i < ms; i++)
     6ca:	00 97       	sbiw	r24, 0x00	; 0
     6cc:	69 f0       	breq	.+26     	; 0x6e8 <_Z8delay_msj+0x1e>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	ef e6       	ldi	r30, 0x6F	; 111
     6d4:	f7 e1       	ldi	r31, 0x17	; 23
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <_Z8delay_msj+0xc>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <_Z8delay_msj+0x12>
     6dc:	00 00       	nop
     6de:	2f 5f       	subi	r18, 0xFF	; 255
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	82 17       	cp	r24, r18
     6e4:	93 07       	cpc	r25, r19
     6e6:	a9 f7       	brne	.-22     	; 0x6d2 <_Z8delay_msj+0x8>
     6e8:	08 95       	ret

000006ea <_Z11printNumberj>:



void printNumber(uint16_t num)
{
	USART_Transmit_Number(USARTD0, num);
     6ea:	bc 01       	movw	r22, r24
     6ec:	80 ea       	ldi	r24, 0xA0	; 160
     6ee:	99 e0       	ldi	r25, 0x09	; 9
     6f0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_TransmitString(USARTD0, "\n\r");
     6f4:	6a ed       	ldi	r22, 0xDA	; 218
     6f6:	72 e2       	ldi	r23, 0x22	; 34
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
     6fc:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
     700:	08 95       	ret

00000702 <_Z6invertj>:


uint16_t invert(uint16_t num)
{
	return -num;
}
     702:	91 95       	neg	r25
     704:	81 95       	neg	r24
     706:	91 09       	sbc	r25, r1
     708:	08 95       	ret

0000070a <_Z3addii>:



int16_t add(int16_t A, int16_t B)
{
     70a:	cf 92       	push	r12
     70c:	df 92       	push	r13
     70e:	ef 92       	push	r14
     710:	ff 92       	push	r15
     712:	9b 01       	movw	r18, r22
	long res = (long)A + B;
     714:	6c 01       	movw	r12, r24
     716:	09 2e       	mov	r0, r25
     718:	00 0c       	add	r0, r0
     71a:	ee 08       	sbc	r14, r14
     71c:	ff 08       	sbc	r15, r15
     71e:	ab 01       	movw	r20, r22
     720:	77 0f       	add	r23, r23
     722:	66 0b       	sbc	r22, r22
     724:	77 0b       	sbc	r23, r23
     726:	4c 0d       	add	r20, r12
     728:	5d 1d       	adc	r21, r13
     72a:	6e 1d       	adc	r22, r14
     72c:	7f 1d       	adc	r23, r15

	if(res > 32767)
     72e:	41 15       	cp	r20, r1
     730:	e0 e8       	ldi	r30, 0x80	; 128
     732:	5e 07       	cpc	r21, r30
     734:	61 05       	cpc	r22, r1
     736:	71 05       	cpc	r23, r1
     738:	44 f4       	brge	.+16     	; 0x74a <_Z3addii+0x40>
	return 32767;
	if(res < -32768)
     73a:	41 15       	cp	r20, r1
     73c:	50 48       	sbci	r21, 0x80	; 128
     73e:	6f 4f       	sbci	r22, 0xFF	; 255
     740:	7f 4f       	sbci	r23, 0xFF	; 255
     742:	34 f0       	brlt	.+12     	; 0x750 <_Z3addii+0x46>
	return -32767;

	return (int16_t)res;
     744:	82 0f       	add	r24, r18
     746:	93 1f       	adc	r25, r19
     748:	05 c0       	rjmp	.+10     	; 0x754 <_Z3addii+0x4a>
int16_t add(int16_t A, int16_t B)
{
	long res = (long)A + B;

	if(res > 32767)
	return 32767;
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	9f e7       	ldi	r25, 0x7F	; 127
     74e:	02 c0       	rjmp	.+4      	; 0x754 <_Z3addii+0x4a>
	if(res < -32768)
	return -32767;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	08 95       	ret

0000075e <_Z8subtractii>:


int16_t subtract(int16_t A, int16_t B)
{
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	9b 01       	movw	r18, r22
	long res = (long)A - B;
     768:	ac 01       	movw	r20, r24
     76a:	09 2e       	mov	r0, r25
     76c:	00 0c       	add	r0, r0
     76e:	66 0b       	sbc	r22, r22
     770:	77 0b       	sbc	r23, r23
     772:	69 01       	movw	r12, r18
     774:	03 2e       	mov	r0, r19
     776:	00 0c       	add	r0, r0
     778:	ee 08       	sbc	r14, r14
     77a:	ff 08       	sbc	r15, r15
     77c:	4c 19       	sub	r20, r12
     77e:	5d 09       	sbc	r21, r13
     780:	6e 09       	sbc	r22, r14
     782:	7f 09       	sbc	r23, r15

	if(res > 32767)
     784:	41 15       	cp	r20, r1
     786:	e0 e8       	ldi	r30, 0x80	; 128
     788:	5e 07       	cpc	r21, r30
     78a:	61 05       	cpc	r22, r1
     78c:	71 05       	cpc	r23, r1
     78e:	44 f4       	brge	.+16     	; 0x7a0 <_Z8subtractii+0x42>
	return 32767;
	if(res < -32768)
     790:	41 15       	cp	r20, r1
     792:	50 48       	sbci	r21, 0x80	; 128
     794:	6f 4f       	sbci	r22, 0xFF	; 255
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	34 f0       	brlt	.+12     	; 0x7a6 <_Z8subtractii+0x48>
	return -32767;

	return (int16_t)res;
     79a:	82 1b       	sub	r24, r18
     79c:	93 0b       	sbc	r25, r19
     79e:	05 c0       	rjmp	.+10     	; 0x7aa <_Z8subtractii+0x4c>
int16_t subtract(int16_t A, int16_t B)
{
	long res = (long)A - B;

	if(res > 32767)
	return 32767;
     7a0:	8f ef       	ldi	r24, 0xFF	; 255
     7a2:	9f e7       	ldi	r25, 0x7F	; 127
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <_Z8subtractii+0x4c>
	if(res < -32768)
	return -32767;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	08 95       	ret

000007b4 <_Z8multiplyii>:


int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;
     7b4:	9c 01       	movw	r18, r24
     7b6:	db 01       	movw	r26, r22
     7b8:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <__mulhisi3>

	if(res > 32767)
     7bc:	61 15       	cp	r22, r1
     7be:	20 e8       	ldi	r18, 0x80	; 128
     7c0:	72 07       	cpc	r23, r18
     7c2:	81 05       	cpc	r24, r1
     7c4:	91 05       	cpc	r25, r1
     7c6:	4c f4       	brge	.+18     	; 0x7da <_Z8multiplyii+0x26>
	return 32767;
	if(res < -32768)
     7c8:	61 15       	cp	r22, r1
     7ca:	20 e8       	ldi	r18, 0x80	; 128
     7cc:	72 07       	cpc	r23, r18
     7ce:	2f ef       	ldi	r18, 0xFF	; 255
     7d0:	82 07       	cpc	r24, r18
     7d2:	92 07       	cpc	r25, r18
     7d4:	2c f0       	brlt	.+10     	; 0x7e0 <_Z8multiplyii+0x2c>
	return -32767;

	return (int16_t)res;
     7d6:	cb 01       	movw	r24, r22
     7d8:	08 95       	ret
int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;

	if(res > 32767)
	return 32767;
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	9f e7       	ldi	r25, 0x7F	; 127
     7de:	08 95       	ret
	if(res < -32768)
	return -32767;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     7e4:	08 95       	ret

000007e6 <_Z6divideii>:


int16_t divide(int16_t A, int16_t B)
{
	return A / B;
     7e6:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
     7ea:	cb 01       	movw	r24, r22
}
     7ec:	08 95       	ret

000007ee <_Z7isEqualii>:


bool isEqual(int16_t A, int16_t B)			{return A == B; }
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	86 17       	cp	r24, r22
     7f2:	97 07       	cpc	r25, r23
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <_Z7isEqualii+0xa>
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	82 2f       	mov	r24, r18
     7fa:	08 95       	ret

000007fc <_Z8isBiggerii>:
bool isBigger(int16_t A, int16_t B)			{return A > B;	}
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	68 17       	cp	r22, r24
     800:	79 07       	cpc	r23, r25
     802:	0c f0       	brlt	.+2      	; 0x806 <_Z8isBiggerii+0xa>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	82 2f       	mov	r24, r18
     808:	08 95       	ret

0000080a <_Z9isSmallerii>:
bool isSmaller(int16_t A, int16_t B)		{return A < B;	}
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	86 17       	cp	r24, r22
     80e:	97 07       	cpc	r25, r23
     810:	0c f0       	brlt	.+2      	; 0x814 <_Z9isSmallerii+0xa>
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	82 2f       	mov	r24, r18
     816:	08 95       	ret

00000818 <_Z15isBiggerOrEqualii>:
bool isBiggerOrEqual(int16_t A, int16_t B)	{return A >= B;	}
     818:	21 e0       	ldi	r18, 0x01	; 1
     81a:	86 17       	cp	r24, r22
     81c:	97 07       	cpc	r25, r23
     81e:	0c f4       	brge	.+2      	; 0x822 <_Z15isBiggerOrEqualii+0xa>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	82 2f       	mov	r24, r18
     824:	08 95       	ret

00000826 <_Z16isSmallerOrEqualii>:
bool isSmallerOrEqual(int16_t A, int16_t B)	{return A <= B; }
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	68 17       	cp	r22, r24
     82a:	79 07       	cpc	r23, r25
     82c:	0c f4       	brge	.+2      	; 0x830 <_Z16isSmallerOrEqualii+0xa>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	82 2f       	mov	r24, r18
     832:	08 95       	ret

00000834 <_Z8logic_orbb>:

bool logic_or(bool A, bool B)	{return A || B; }
     834:	81 11       	cpse	r24, r1
     836:	02 c0       	rjmp	.+4      	; 0x83c <_Z8logic_orbb+0x8>
     838:	86 2f       	mov	r24, r22
     83a:	08 95       	ret
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret

00000840 <_Z9logic_andbb>:
bool logic_and(bool A, bool B)	{return A && B; }
     840:	81 11       	cpse	r24, r1
     842:	86 2f       	mov	r24, r22
     844:	08 95       	ret

00000846 <_Z9logic_xorbb>:
     846:	86 27       	eor	r24, r22
     848:	08 95       	ret

0000084a <_Z11hexToNibblec>:
	return (hexToNibble(h) << 4) | hexToNibble(l);
}

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
     84a:	90 ed       	ldi	r25, 0xD0	; 208
     84c:	98 0f       	add	r25, r24
     84e:	9a 30       	cpi	r25, 0x0A	; 10
     850:	60 f0       	brcs	.+24     	; 0x86a <_Z11hexToNibblec+0x20>
	{
		return hex-'0';
	}
	else if(hex >= 'A' && hex <= 'F')
     852:	9f eb       	ldi	r25, 0xBF	; 191
     854:	98 0f       	add	r25, r24
     856:	96 30       	cpi	r25, 0x06	; 6
     858:	10 f4       	brcc	.+4      	; 0x85e <_Z11hexToNibblec+0x14>
	{
		return hex-'A'+10;
     85a:	87 53       	subi	r24, 0x37	; 55
     85c:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
     85e:	9f e9       	ldi	r25, 0x9F	; 159
     860:	98 0f       	add	r25, r24
     862:	96 30       	cpi	r25, 0x06	; 6
     864:	20 f4       	brcc	.+8      	; 0x86e <_Z11hexToNibblec+0x24>
	{
		return hex-'a'+10;
     866:	87 55       	subi	r24, 0x57	; 87
     868:	08 95       	ret

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
	{
		return hex-'0';
     86a:	89 2f       	mov	r24, r25
     86c:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
	{
		return hex-'a'+10;
	}
	return 0xff;
     86e:	8f ef       	ldi	r24, 0xFF	; 255
}
     870:	08 95       	ret

00000872 <_Z9hexToBytecc>:
 */ 

#include "Convert.h"

uint8_t hexToByte(char h, char l)
{
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	d6 2f       	mov	r29, r22
	return (hexToNibble(h) << 4) | hexToNibble(l);
     878:	0e 94 25 04 	call	0x84a	; 0x84a <_Z11hexToNibblec>
     87c:	c8 2f       	mov	r28, r24
     87e:	8d 2f       	mov	r24, r29
     880:	0e 94 25 04 	call	0x84a	; 0x84a <_Z11hexToNibblec>
     884:	90 e1       	ldi	r25, 0x10	; 16
     886:	c9 9f       	mul	r28, r25
     888:	90 01       	movw	r18, r0
     88a:	11 24       	eor	r1, r1
}
     88c:	82 2b       	or	r24, r18
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <_Z11resetDevicev>:
 #include "Programming.h"

void resetDevice()
{
	//disable interrupts
	asm("cli");
     894:	f8 94       	cli
	// enable watchdog timer
	CCP = 0xD8;
     896:	88 ed       	ldi	r24, 0xD8	; 216
     898:	84 bf       	out	0x34, r24	; 52
	WDT.CTRL = (1<< WDT_ENABLE_bp)| (1<<WDT_CEN_bp);
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     8a0:	ff cf       	rjmp	.-2      	; 0x8a0 <_Z11resetDevicev+0xc>

000008a2 <_Z12programFlashhjhPh>:
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
}


void programFlash(uint8_t byteCount, uint16_t address, uint8_t recordType, uint8_t* data)
{
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	e8 2e       	mov	r14, r24
     8b0:	eb 01       	movw	r28, r22
     8b2:	89 01       	movw	r16, r18
	static uint16_t previousAddress = 0xFFFF;
	static bool firstByte = true;

	if(recordType == EOF_RECORD)
     8b4:	41 30       	cpi	r20, 0x01	; 1
     8b6:	71 f5       	brne	.+92     	; 0x914 <_Z12programFlashhjhPh+0x72>
	{
		// if the first byte has already been sent
		if(!firstByte)
     8b8:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     8bc:	81 11       	cpse	r24, r1
     8be:	28 c0       	rjmp	.+80     	; 0x910 <_Z12programFlashhjhPh+0x6e>
		{
			// check if the address is within the blockly range
			if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     8c0:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     8c4:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     8c8:	90 58       	subi	r25, 0x80	; 128
     8ca:	8f 3f       	cpi	r24, 0xFF	; 255
     8cc:	9f 47       	sbci	r25, 0x7F	; 127
     8ce:	b0 f0       	brcs	.+44     	; 0x8fc <_Z12programFlashhjhPh+0x5a>
			{
				USART_TransmitString(USARTD0, "\n\rFlash address:");
     8d0:	6c eb       	ldi	r22, 0xBC	; 188
     8d2:	70 e2       	ldi	r23, 0x20	; 32
     8d4:	80 ea       	ldi	r24, 0xA0	; 160
     8d6:	99 e0       	ldi	r25, 0x09	; 9
     8d8:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
				USART_Transmit_Number(USARTD0, previousAddress);
     8dc:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     8e0:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     8e4:	80 ea       	ldi	r24, 0xA0	; 160
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_Z21USART_Transmit_NumberR12USART_structi>
				USART_TransmitString(USARTD0, " out of range\n\rResetting");
     8ec:	6d ec       	ldi	r22, 0xCD	; 205
     8ee:	70 e2       	ldi	r23, 0x20	; 32
     8f0:	80 ea       	ldi	r24, 0xA0	; 160
     8f2:	99 e0       	ldi	r25, 0x09	; 9
     8f4:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
				
				//USB_TransmitString("\n\rFlash address:");
				//USB_Transmit_Number(previousAddress);
				//USB_TransmitString(" out of range\n\rResetting");
				resetDevice();
     8f8:	0e 94 4a 04 	call	0x894	; 0x894 <_Z11resetDevicev>
			}
			
			SP_WaitForSPM();	//wait for nvm module if busy
     8fc:	0e 94 3e 03 	call	0x67c	; 0x67c <SP_WaitForSPM>
			SP_EraseWriteApplicationPage(previousAddress); //program page to flash
     900:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     904:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 17 03 	call	0x62e	; 0x62e <SP_EraseWriteApplicationPage>
		}
		// reset device
		resetDevice();
     910:	0e 94 4a 04 	call	0x894	; 0x894 <_Z11resetDevicev>
	}
	else if(recordType == DATA_RECORD)
     914:	41 11       	cpse	r20, r1
     916:	56 c0       	rjmp	.+172    	; 0x9c4 <_Z12programFlashhjhPh+0x122>
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     918:	88 23       	and	r24, r24
     91a:	09 f4       	brne	.+2      	; 0x91e <_Z12programFlashhjhPh+0x7c>
     91c:	53 c0       	rjmp	.+166    	; 0x9c4 <_Z12programFlashhjhPh+0x122>
     91e:	f1 2c       	mov	r15, r1
		{
			// if address is in the another page than the last
			if(previousAddress/SPM_PAGESIZE != address/SPM_PAGESIZE)
     920:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     924:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     928:	ac 01       	movw	r20, r24
     92a:	45 2f       	mov	r20, r21
     92c:	55 27       	eor	r21, r21
     92e:	46 95       	lsr	r20
     930:	9e 01       	movw	r18, r28
     932:	23 2f       	mov	r18, r19
     934:	33 27       	eor	r19, r19
     936:	26 95       	lsr	r18
     938:	42 17       	cp	r20, r18
     93a:	53 07       	cpc	r21, r19
     93c:	41 f1       	breq	.+80     	; 0x98e <_Z12programFlashhjhPh+0xec>
			{
				// if this isn't the first byte
				if(!firstByte)
     93e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     942:	21 11       	cpse	r18, r1
     944:	24 c0       	rjmp	.+72     	; 0x98e <_Z12programFlashhjhPh+0xec>
				{
					if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     946:	90 58       	subi	r25, 0x80	; 128
     948:	8f 3f       	cpi	r24, 0xFF	; 255
     94a:	9f 47       	sbci	r25, 0x7F	; 127
     94c:	b0 f0       	brcs	.+44     	; 0x97a <_Z12programFlashhjhPh+0xd8>
					{
						USART_TransmitString(USARTD0, "\n\rFlash address:");
     94e:	6c eb       	ldi	r22, 0xBC	; 188
     950:	70 e2       	ldi	r23, 0x20	; 32
     952:	80 ea       	ldi	r24, 0xA0	; 160
     954:	99 e0       	ldi	r25, 0x09	; 9
     956:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
						USART_Transmit_Number(USARTD0, previousAddress);
     95a:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     95e:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	99 e0       	ldi	r25, 0x09	; 9
     966:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_Z21USART_Transmit_NumberR12USART_structi>
						USART_TransmitString(USARTD0, " out of range\n\rResetting");
     96a:	6d ec       	ldi	r22, 0xCD	; 205
     96c:	70 e2       	ldi	r23, 0x20	; 32
     96e:	80 ea       	ldi	r24, 0xA0	; 160
     970:	99 e0       	ldi	r25, 0x09	; 9
     972:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
						
						//USB_TransmitString("\n\rFlash address:");
						//USB_Transmit_Number(previousAddress);
						//USB_TransmitString(" out of range\n\rResetting");
						
						resetDevice();
     976:	0e 94 4a 04 	call	0x894	; 0x894 <_Z11resetDevicev>
					}
					
					SP_WaitForSPM();
     97a:	0e 94 3e 03 	call	0x67c	; 0x67c <SP_WaitForSPM>
					SP_EraseWriteApplicationPage(previousAddress);
     97e:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     982:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 17 03 	call	0x62e	; 0x62e <SP_EraseWriteApplicationPage>
				}
			}
			
			//load byte into temporary page buffer
			SP_WaitForSPM();
     98e:	0e 94 3e 03 	call	0x67c	; 0x67c <SP_WaitForSPM>
			SP_LoadFlashWord(address%SPM_PAGESIZE, ((uint16_t)data[i+1] << 8 | data[i]));
     992:	f8 01       	movw	r30, r16
     994:	ef 0d       	add	r30, r15
     996:	f1 1d       	adc	r31, r1
     998:	61 81       	ldd	r22, Z+1	; 0x01
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	76 2f       	mov	r23, r22
     99e:	66 27       	eor	r22, r22
     9a0:	80 81       	ld	r24, Z
     9a2:	68 2b       	or	r22, r24
     9a4:	ce 01       	movw	r24, r28
     9a6:	91 70       	andi	r25, 0x01	; 1
     9a8:	0e 94 0c 03 	call	0x618	; 0x618 <SP_LoadFlashWord>
				
			// track the programming state
			firstByte = false;
     9ac:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
			previousAddress = address;
     9b0:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__DATA_REGION_ORIGIN__>
     9b4:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
			address+=2;
     9b8:	22 96       	adiw	r28, 0x02	; 2
		resetDevice();
	}
	else if(recordType == DATA_RECORD)
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     9ba:	f3 94       	inc	r15
     9bc:	f3 94       	inc	r15
     9be:	fe 14       	cp	r15, r14
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <_Z12programFlashhjhPh+0x122>
     9c2:	ae cf       	rjmp	.-164    	; 0x920 <_Z12programFlashhjhPh+0x7e>
			previousAddress = address;
			address+=2;
		}
	}

     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	08 95       	ret

000009d2 <_Z14programHexLinePc>:
		programHexLine(buff);
	}
}

void programHexLine(char* line)
{
     9d2:	5f 92       	push	r5
     9d4:	6f 92       	push	r6
     9d6:	7f 92       	push	r7
     9d8:	8f 92       	push	r8
     9da:	9f 92       	push	r9
     9dc:	af 92       	push	r10
     9de:	bf 92       	push	r11
     9e0:	cf 92       	push	r12
     9e2:	df 92       	push	r13
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	60 97       	sbiw	r28, 0x10	; 16
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	5c 01       	movw	r10, r24
	cli();
     9fc:	f8 94       	cli
	// parse the line
	uint8_t byteCount	= hexToByte(line[1], line[2]);
     9fe:	fc 01       	movw	r30, r24
     a00:	62 81       	ldd	r22, Z+2	; 0x02
     a02:	81 81       	ldd	r24, Z+1	; 0x01
     a04:	0e 94 39 04 	call	0x872	; 0x872 <_Z9hexToBytecc>
     a08:	78 2e       	mov	r7, r24
	uint8_t address_H	= hexToByte(line[3], line[4]);
     a0a:	f5 01       	movw	r30, r10
     a0c:	64 81       	ldd	r22, Z+4	; 0x04
     a0e:	83 81       	ldd	r24, Z+3	; 0x03
     a10:	0e 94 39 04 	call	0x872	; 0x872 <_Z9hexToBytecc>
     a14:	58 2e       	mov	r5, r24
	uint8_t address_L	= hexToByte(line[5], line[6]);
     a16:	f5 01       	movw	r30, r10
     a18:	66 81       	ldd	r22, Z+6	; 0x06
     a1a:	85 81       	ldd	r24, Z+5	; 0x05
     a1c:	0e 94 39 04 	call	0x872	; 0x872 <_Z9hexToBytecc>
     a20:	e8 2e       	mov	r14, r24
	uint8_t recordType	= hexToByte(line[7], line[8]);
     a22:	f5 01       	movw	r30, r10
     a24:	60 85       	ldd	r22, Z+8	; 0x08
     a26:	87 81       	ldd	r24, Z+7	; 0x07
     a28:	0e 94 39 04 	call	0x872	; 0x872 <_Z9hexToBytecc>
     a2c:	68 2e       	mov	r6, r24

	uint8_t checksum = byteCount + address_H + address_L + recordType;
     a2e:	f7 2c       	mov	r15, r7
     a30:	f5 0c       	add	r15, r5
     a32:	fe 0c       	add	r15, r14
     a34:	f8 0e       	add	r15, r24
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     a36:	77 20       	and	r7, r7
     a38:	f9 f0       	breq	.+62     	; 0xa78 <_Z14programHexLinePc+0xa6>
     a3a:	85 01       	movw	r16, r10
     a3c:	07 5f       	subi	r16, 0xF7	; 247
     a3e:	1f 4f       	sbci	r17, 0xFF	; 255
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	6c 01       	movw	r12, r24
     a46:	88 24       	eor	r8, r8
     a48:	8a 94       	dec	r8
     a4a:	87 0c       	add	r8, r7
     a4c:	91 2c       	mov	r9, r1
     a4e:	88 0c       	add	r8, r8
     a50:	99 1c       	adc	r9, r9
     a52:	9b e0       	ldi	r25, 0x0B	; 11
     a54:	89 0e       	add	r8, r25
     a56:	91 1c       	adc	r9, r1
     a58:	8a 0c       	add	r8, r10
     a5a:	9b 1c       	adc	r9, r11
	{
		uint8_t charOffset = 9+2*i;
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
     a5c:	f8 01       	movw	r30, r16
     a5e:	61 81       	ldd	r22, Z+1	; 0x01
     a60:	80 81       	ld	r24, Z
     a62:	0e 94 39 04 	call	0x872	; 0x872 <_Z9hexToBytecc>
		checksum += byte;
     a66:	f8 0e       	add	r15, r24
		data[i] = byte;
     a68:	f6 01       	movw	r30, r12
     a6a:	81 93       	st	Z+, r24
     a6c:	6f 01       	movw	r12, r30
     a6e:	0e 5f       	subi	r16, 0xFE	; 254
     a70:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t checksum = byteCount + address_H + address_L + recordType;
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     a72:	08 15       	cp	r16, r8
     a74:	19 05       	cpc	r17, r9
     a76:	91 f7       	brne	.-28     	; 0xa5c <_Z14programHexLinePc+0x8a>
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
		checksum += byte;
		data[i] = byte;
	}

	checksum += hexToByte(line[9+2*byteCount],line[10+2*byteCount]);
     a78:	e7 2d       	mov	r30, r7
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	35 96       	adiw	r30, 0x05	; 5
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	ea 0d       	add	r30, r10
     a84:	fb 1d       	adc	r31, r11
     a86:	df 01       	movw	r26, r30
     a88:	11 97       	sbiw	r26, 0x01	; 1
     a8a:	60 81       	ld	r22, Z
     a8c:	8c 91       	ld	r24, X
     a8e:	0e 94 39 04 	call	0x872	; 0x872 <_Z9hexToBytecc>
	
	if(checksum != 0)
     a92:	8f 0d       	add	r24, r15
     a94:	41 f0       	breq	.+16     	; 0xaa6 <_Z14programHexLinePc+0xd4>
	{
		USART_TransmitString(USARTD0, "\n\rChecksum error while receiving program\n\rResetting");
     a96:	66 ee       	ldi	r22, 0xE6	; 230
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	80 ea       	ldi	r24, 0xA0	; 160
     a9c:	99 e0       	ldi	r25, 0x09	; 9
     a9e:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("\n\rChecksum error while receiving program\n\rResetting");
		resetDevice();
     aa2:	0e 94 4a 04 	call	0x894	; 0x894 <_Z11resetDevicev>
		return;
	}
	
	USART_TransmitString(USARTD0, "\r\nReceived: ");
     aa6:	6a e1       	ldi	r22, 0x1A	; 26
     aa8:	71 e2       	ldi	r23, 0x21	; 33
     aaa:	80 ea       	ldi	r24, 0xA0	; 160
     aac:	99 e0       	ldi	r25, 0x09	; 9
     aae:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit(USARTD0, line, 11+2*byteCount);
     ab2:	47 2d       	mov	r20, r7
     ab4:	44 0f       	add	r20, r20
     ab6:	45 5f       	subi	r20, 0xF5	; 245
     ab8:	b5 01       	movw	r22, r10
     aba:	80 ea       	ldi	r24, 0xA0	; 160
     abc:	99 e0       	ldi	r25, 0x09	; 9
     abe:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z14USART_TransmitR12USART_structPKch>
	
	//USB_TransmitString("\r\nReceived: ");
	//USB_Transmit(line, 11+2*byteCount);
		
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
     ac2:	6e 2d       	mov	r22, r14
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	75 29       	or	r23, r5
     ac8:	9e 01       	movw	r18, r28
     aca:	2f 5f       	subi	r18, 0xFF	; 255
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	46 2d       	mov	r20, r6
     ad0:	87 2d       	mov	r24, r7
     ad2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <_Z12programFlashhjhPh>
}
     ad6:	60 96       	adiw	r28, 0x10	; 16
     ad8:	cd bf       	out	0x3d, r28	; 61
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	5f 90       	pop	r5
     afa:	08 95       	ret

00000afc <_Z17receiveHexFileUSBv>:
		break;
	}
}

void receiveHexFileUSB()
{
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	e2 97       	sbiw	r28, 0x32	; 50
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	ce 01       	movw	r24, r28
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	6c 01       	movw	r12, r24
     b10:	7e 01       	movw	r14, r28
     b12:	93 e3       	ldi	r25, 0x33	; 51
     b14:	e9 0e       	add	r14, r25
     b16:	f1 1c       	adc	r15, r1
     b18:	86 01       	movw	r16, r12
	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
		{
			char c = USART_Receive(USARTD0);
     b1a:	80 ea       	ldi	r24, 0xA0	; 160
     b1c:	99 e0       	ldi	r25, 0x09	; 9
     b1e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z13USART_ReceiveR12USART_struct>
     b22:	98 01       	movw	r18, r16
     b24:	2c 19       	sub	r18, r12
     b26:	3d 09       	sbc	r19, r13
			buff[i] = c;
     b28:	f8 01       	movw	r30, r16
     b2a:	81 93       	st	Z+, r24
     b2c:	8f 01       	movw	r16, r30
			if(c == '\n')
     b2e:	8a 30       	cpi	r24, 0x0A	; 10
     b30:	41 f4       	brne	.+16     	; 0xb42 <_Z17receiveHexFileUSBv+0x46>
			{
				buff[i+1] = '\0';
     b32:	e2 e0       	ldi	r30, 0x02	; 2
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	ec 0f       	add	r30, r28
     b38:	fd 1f       	adc	r31, r29
     b3a:	e2 0f       	add	r30, r18
     b3c:	f3 1f       	adc	r31, r19
     b3e:	10 82       	st	Z, r1
				break;
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <_Z17receiveHexFileUSBv+0x4c>
	char buff[50];

	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
     b42:	ee 15       	cp	r30, r14
     b44:	ff 05       	cpc	r31, r15
     b46:	49 f7       	brne	.-46     	; 0xb1a <_Z17receiveHexFileUSBv+0x1e>
			{
				buff[i+1] = '\0';
				break;
			}
		}
		programHexLine(buff);
     b48:	c6 01       	movw	r24, r12
     b4a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_Z14programHexLinePc>

void receiveHexFileUSB()
{
	char buff[50];

	while(true)
     b4e:	e4 cf       	rjmp	.-56     	; 0xb18 <_Z17receiveHexFileUSBv+0x1c>

00000b50 <_Z10getUsbBootv>:
	// let the watchdog time out
	while(true);
}

void getUsbBoot()
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	c0 e1       	ldi	r28, 0x10	; 16
     b5a:	d7 e2       	ldi	r29, 0x27	; 39
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
	{
		if(USART_Available(USARTD0))
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	99 e0       	ldi	r25, 0x09	; 9
     b60:	0e 94 8e 09 	call	0x131c	; 0x131c <_Z15USART_AvailableR12USART_struct>
     b64:	81 11       	cpse	r24, r1
     b66:	0c c0       	rjmp	.+24     	; 0xb80 <_Z10getUsbBootv+0x30>
		{
			timeout = false;
			break;
		}
		if(TWI_RecievedAddress(TWIC))
     b68:	80 e8       	ldi	r24, 0x80	; 128
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	0e 94 7d 07 	call	0xefa	; 0xefa <_Z19TWI_RecievedAddressR10TWI_struct>
     b70:	81 11       	cpse	r24, r1
     b72:	22 c0       	rjmp	.+68     	; 0xbb8 <_Z10getUsbBootv+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b74:	86 ef       	ldi	r24, 0xF6	; 246
     b76:	8a 95       	dec	r24
     b78:	f1 f7       	brne	.-4      	; 0xb76 <_Z10getUsbBootv+0x26>
     b7a:	21 97       	sbiw	r28, 0x01	; 1
void getUsbBoot()
{
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
     b7c:	79 f7       	brne	.-34     	; 0xb5c <_Z10getUsbBootv+0xc>
     b7e:	1c c0       	rjmp	.+56     	; 0xbb8 <_Z10getUsbBootv+0x68>
     b80:	c7 e2       	ldi	r28, 0x27	; 39
     b82:	d1 e2       	ldi	r29, 0x21	; 33
     b84:	0b e2       	ldi	r16, 0x2B	; 43
     b86:	11 e2       	ldi	r17, 0x21	; 33
	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
	{
		char c = USART_Receive(USARTD0);
     b88:	80 ea       	ldi	r24, 0xA0	; 160
     b8a:	99 e0       	ldi	r25, 0x09	; 9
     b8c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z13USART_ReceiveR12USART_struct>
		//USART0_Transmit(c);
		if(c != check[i])
     b90:	99 91       	ld	r25, Y+
     b92:	89 13       	cpse	r24, r25
     b94:	11 c0       	rjmp	.+34     	; 0xbb8 <_Z10getUsbBootv+0x68>
	}

	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
     b96:	c0 17       	cp	r28, r16
     b98:	d1 07       	cpc	r29, r17
     b9a:	b1 f7       	brne	.-20     	; 0xb88 <_Z10getUsbBootv+0x38>
		if(c != check[i])
		return;
	}


	switch(USART_Receive(USARTD0))
     b9c:	80 ea       	ldi	r24, 0xA0	; 160
     b9e:	99 e0       	ldi	r25, 0x09	; 9
     ba0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z13USART_ReceiveR12USART_struct>
     ba4:	85 35       	cpi	r24, 0x55	; 85
     ba6:	41 f4       	brne	.+16     	; 0xbb8 <_Z10getUsbBootv+0x68>
	{
		case 'U':
		// upload hex file via usb
		USART_TransmitString(USARTD0,"Receiving program via UART\n\r");
     ba8:	6c e2       	ldi	r22, 0x2C	; 44
     baa:	71 e2       	ldi	r23, 0x21	; 33
     bac:	80 ea       	ldi	r24, 0xA0	; 160
     bae:	99 e0       	ldi	r25, 0x09	; 9
     bb0:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("Receiving program via UART\n\r");
		receiveHexFileUSB();
     bb4:	0e 94 7e 05 	call	0xafc	; 0xafc <_Z17receiveHexFileUSBv>
		break;
		default:
		break;
	}
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <_Z17receiveHexFileI2CPFvvE>:
		programHexLine(buff);
	}
}

void receiveHexFileI2C(void (*cb)())
{
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	e2 97       	sbiw	r28, 0x32	; 50
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	8c 01       	movw	r16, r24
	char buff[50];

	while(true)
	{
		USART_TransmitString(USARTD0, "\n\rtest4\n\r");
     bd6:	69 e4       	ldi	r22, 0x49	; 73
     bd8:	71 e2       	ldi	r23, 0x21	; 33
     bda:	80 ea       	ldi	r24, 0xA0	; 160
     bdc:	99 e0       	ldi	r25, 0x09	; 9
     bde:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		// receive a line of the hex file
		TWI_ReceivePacket(TWIC,(uint8_t*)buff, 50);
     be2:	42 e3       	ldi	r20, 0x32	; 50
     be4:	be 01       	movw	r22, r28
     be6:	6f 5f       	subi	r22, 0xFF	; 255
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	80 e8       	ldi	r24, 0x80	; 128
     bec:	94 e0       	ldi	r25, 0x04	; 4
     bee:	0e 94 89 07 	call	0xf12	; 0xf12 <_Z17TWI_ReceivePacketR10TWI_structPhh>
		
		if(buff[0] == 's') { cb(); } //voer callback uit: stepper-test modus
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	83 37       	cpi	r24, 0x73	; 115
     bf6:	11 f4       	brne	.+4      	; 0xbfc <_Z17receiveHexFileI2CPFvvE+0x3a>
     bf8:	f8 01       	movw	r30, r16
     bfa:	19 95       	eicall
			
		if(buff[0] != ':')
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	8a 33       	cpi	r24, 0x3A	; 58
     c00:	39 f0       	breq	.+14     	; 0xc10 <_Z17receiveHexFileI2CPFvvE+0x4e>
		{
			USART_TransmitString(USARTD0,"Error while receiving program");
     c02:	63 e5       	ldi	r22, 0x53	; 83
     c04:	71 e2       	ldi	r23, 0x21	; 33
     c06:	80 ea       	ldi	r24, 0xA0	; 160
     c08:	99 e0       	ldi	r25, 0x09	; 9
     c0a:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
			return;
     c0e:	0b c0       	rjmp	.+22     	; 0xc26 <_Z17receiveHexFileI2CPFvvE+0x64>
		}
		USART_TransmitString(USARTD0,"test");
     c10:	61 e7       	ldi	r22, 0x71	; 113
     c12:	71 e2       	ldi	r23, 0x21	; 33
     c14:	80 ea       	ldi	r24, 0xA0	; 160
     c16:	99 e0       	ldi	r25, 0x09	; 9
     c18:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		programHexLine(buff);
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <_Z14programHexLinePc>

void receiveHexFileI2C(void (*cb)())
{
	char buff[50];

	while(true)
     c24:	d8 cf       	rjmp	.-80     	; 0xbd6 <_Z17receiveHexFileI2CPFvvE+0x14>
			return;
		}
		USART_TransmitString(USARTD0,"test");
		programHexLine(buff);
	}
}
     c26:	e2 96       	adiw	r28, 0x32	; 50
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	08 95       	ret

00000c36 <_Z8SPI_InitR10SPI_struct>:
#include <util/delay.h>

void SPI_Init(SPI_struct &SPI)
{
	//enable SPI, Set master mode, 8MHz default Clock
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER0_bm;
     c36:	81 e5       	ldi	r24, 0x51	; 81
     c38:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     c3c:	08 95       	ret

00000c3e <_Z14SPI_TrancieverR10SPI_structh>:
}

uint8_t SPI_Tranciever(SPI_struct &SPI, uint8_t data)
{
     c3e:	fc 01       	movw	r30, r24
	//load data into data buffer
	SPI.DATA = data;
     c40:	63 83       	std	Z+3, r22	; 0x03
	//wait for transmit complete
	while (!(SPI.STATUS & (1<<SPI_IF_bp)));
     c42:	92 81       	ldd	r25, Z+2	; 0x02
     c44:	99 23       	and	r25, r25
     c46:	ec f7       	brge	.-6      	; 0xc42 <_Z14SPI_TrancieverR10SPI_structh+0x4>
	
	//return received data
	return(SPI.DATA);		
     c48:	83 81       	ldd	r24, Z+3	; 0x03
}
     c4a:	08 95       	ret

00000c4c <_Z11SS_set_highR11PORT_structh>:

void SS_set_high(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTSET = (1<<pin);
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <_Z11SS_set_highR11PORT_structh+0xa>
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	6a 95       	dec	r22
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <_Z11SS_set_highR11PORT_structh+0x6>
     c5a:	fc 01       	movw	r30, r24
     c5c:	25 83       	std	Z+5, r18	; 0x05
     c5e:	fa e0       	ldi	r31, 0x0A	; 10
     c60:	fa 95       	dec	r31
     c62:	f1 f7       	brne	.-4      	; 0xc60 <_Z11SS_set_highR11PORT_structh+0x14>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <_Z11SS_set_highR11PORT_structh+0x1a>
     c66:	08 95       	ret

00000c68 <_Z10SS_set_lowR11PORT_structh>:
	_delay_us(1);
}

void SS_set_low(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTCLR = (1<<pin);
     c68:	21 e0       	ldi	r18, 0x01	; 1
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <_Z10SS_set_lowR11PORT_structh+0xa>
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	6a 95       	dec	r22
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <_Z10SS_set_lowR11PORT_structh+0x6>
     c76:	fc 01       	movw	r30, r24
     c78:	26 83       	std	Z+6, r18	; 0x06
     c7a:	fa e0       	ldi	r31, 0x0A	; 10
     c7c:	fa 95       	dec	r31
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <_Z10SS_set_lowR11PORT_structh+0x14>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <_Z10SS_set_lowR11PORT_structh+0x1a>
     c82:	08 95       	ret

00000c84 <_Z12SPI_CAN_ReadR10SPI_structhh>:
	_delay_us(1);
}

uint8_t SPI_CAN_Read(SPI_struct &SPI, uint8_t address, uint8_t read_cmd)
{
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	16 2f       	mov	r17, r22
	SPI_Tranciever(SPI, read_cmd);
     c8e:	64 2f       	mov	r22, r20
     c90:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     c94:	61 2f       	mov	r22, r17
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z14SPI_TrancieverR10SPI_structh>
	uint8_t data = SPI_Tranciever(SPI, 0x00);
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	ce 01       	movw	r24, r28
     ca0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z14SPI_TrancieverR10SPI_structh>
	return data;
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	08 95       	ret

00000cac <_Z13SPI_CAN_writeR10SPI_structhhh>:

void SPI_CAN_write(SPI_struct &SPI, uint8_t address, uint8_t data, uint8_t write_cmd)
{
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	ec 01       	movw	r28, r24
     cb6:	06 2f       	mov	r16, r22
     cb8:	14 2f       	mov	r17, r20
	SPI_Tranciever(SPI, write_cmd);
     cba:	62 2f       	mov	r22, r18
     cbc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     cc0:	60 2f       	mov	r22, r16
     cc2:	ce 01       	movw	r24, r28
     cc4:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, data);
     cc8:	61 2f       	mov	r22, r17
     cca:	ce 01       	movw	r24, r28
     ccc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_Z14SPI_TrancieverR10SPI_structh>
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	08 95       	ret

00000cda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>:
ISR(TWIF_TWIS_vect) { //slave
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
}


void TWI_HandleISR(void (*TxCallback)(), void (*RxCallback)(uint8_t), TWI_struct &TWI) {
     cda:	fc 01       	movw	r30, r24
	if((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp))) { //read operation
     cdc:	da 01       	movw	r26, r20
     cde:	1a 96       	adiw	r26, 0x0a	; 10
     ce0:	9c 91       	ld	r25, X
     ce2:	91 ff       	sbrs	r25, 1
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x14>
		if (!TxCallback) { return; } //callback is niet ingesteld
     ce6:	30 97       	sbiw	r30, 0x00	; 0
     ce8:	49 f0       	breq	.+18     	; 0xcfc <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		TxCallback();
     cea:	19 95       	eicall
     cec:	08 95       	ret
	} else { //write operation
		if (!RxCallback) { return; } //callback is niet ingesteld
     cee:	61 15       	cp	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	21 f0       	breq	.+8      	; 0xcfc <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		RxCallback(TWI.SLAVE.DATA); //ongetest
     cf4:	fa 01       	movw	r30, r20
     cf6:	84 85       	ldd	r24, Z+12	; 0x0c
     cf8:	fb 01       	movw	r30, r22
     cfa:	19 95       	eicall
     cfc:	08 95       	ret

00000cfe <__vector_12>:
void (*TWIF_TxCallback)();
void (*TWIC_RxCallback)(uint8_t); //onReceive, data wordt/is ontvangen van master
void (*TWID_RxCallback)(uint8_t); //via callbacks ongetest
void (*TWIE_RxCallback)(uint8_t);
void (*TWIF_RxCallback)(uint8_t);
ISR(TWIC_TWIS_vect) { //slave
     cfe:	1f 92       	push	r1
     d00:	0f 92       	push	r0
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	08 b6       	in	r0, 0x38	; 56
     d0a:	0f 92       	push	r0
     d0c:	18 be       	out	0x38, r1	; 56
     d0e:	09 b6       	in	r0, 0x39	; 57
     d10:	0f 92       	push	r0
     d12:	19 be       	out	0x39, r1	; 57
     d14:	0b b6       	in	r0, 0x3b	; 59
     d16:	0f 92       	push	r0
     d18:	1b be       	out	0x3b, r1	; 59
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
	TWI_HandleISR(TWIC_TxCallback, TWIC_RxCallback, TWIC);
     d32:	60 91 45 23 	lds	r22, 0x2345	; 0x802345 <TWIC_RxCallback>
     d36:	70 91 46 23 	lds	r23, 0x2346	; 0x802346 <TWIC_RxCallback+0x1>
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	54 e0       	ldi	r21, 0x04	; 4
     d3e:	80 91 4d 23 	lds	r24, 0x234D	; 0x80234d <TWIC_TxCallback>
     d42:	90 91 4e 23 	lds	r25, 0x234E	; 0x80234e <TWIC_TxCallback+0x1>
     d46:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0b be       	out	0x3b, r0	; 59
     d66:	0f 90       	pop	r0
     d68:	09 be       	out	0x39, r0	; 57
     d6a:	0f 90       	pop	r0
     d6c:	08 be       	out	0x38, r0	; 56
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <__vector_75>:
ISR(TWID_TWIS_vect) { //slave
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	08 b6       	in	r0, 0x38	; 56
     d84:	0f 92       	push	r0
     d86:	18 be       	out	0x38, r1	; 56
     d88:	09 b6       	in	r0, 0x39	; 57
     d8a:	0f 92       	push	r0
     d8c:	19 be       	out	0x39, r1	; 57
     d8e:	0b b6       	in	r0, 0x3b	; 59
     d90:	0f 92       	push	r0
     d92:	1b be       	out	0x3b, r1	; 59
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	6f 93       	push	r22
     d9e:	7f 93       	push	r23
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31
	TWI_HandleISR(TWID_TxCallback, TWID_RxCallback, TWID);
     dac:	60 91 43 23 	lds	r22, 0x2343	; 0x802343 <TWID_RxCallback>
     db0:	70 91 44 23 	lds	r23, 0x2344	; 0x802344 <TWID_RxCallback+0x1>
     db4:	40 e9       	ldi	r20, 0x90	; 144
     db6:	54 e0       	ldi	r21, 0x04	; 4
     db8:	80 91 4b 23 	lds	r24, 0x234B	; 0x80234b <TWID_TxCallback>
     dbc:	90 91 4c 23 	lds	r25, 0x234C	; 0x80234c <TWID_TxCallback+0x1>
     dc0:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0b be       	out	0x3b, r0	; 59
     de0:	0f 90       	pop	r0
     de2:	09 be       	out	0x39, r0	; 57
     de4:	0f 90       	pop	r0
     de6:	08 be       	out	0x38, r0	; 56
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	0f 90       	pop	r0
     dee:	1f 90       	pop	r1
     df0:	18 95       	reti

00000df2 <__vector_45>:
ISR(TWIE_TWIS_vect) { //slave
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	08 b6       	in	r0, 0x38	; 56
     dfe:	0f 92       	push	r0
     e00:	18 be       	out	0x38, r1	; 56
     e02:	09 b6       	in	r0, 0x39	; 57
     e04:	0f 92       	push	r0
     e06:	19 be       	out	0x39, r1	; 57
     e08:	0b b6       	in	r0, 0x3b	; 59
     e0a:	0f 92       	push	r0
     e0c:	1b be       	out	0x3b, r1	; 59
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
	TWI_HandleISR(TWIE_TxCallback, TWIE_RxCallback, TWIE);
     e26:	60 91 41 23 	lds	r22, 0x2341	; 0x802341 <TWIE_RxCallback>
     e2a:	70 91 42 23 	lds	r23, 0x2342	; 0x802342 <TWIE_RxCallback+0x1>
     e2e:	40 ea       	ldi	r20, 0xA0	; 160
     e30:	54 e0       	ldi	r21, 0x04	; 4
     e32:	80 91 49 23 	lds	r24, 0x2349	; 0x802349 <TWIE_TxCallback>
     e36:	90 91 4a 23 	lds	r25, 0x234A	; 0x80234a <TWIE_TxCallback+0x1>
     e3a:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0b be       	out	0x3b, r0	; 59
     e5a:	0f 90       	pop	r0
     e5c:	09 be       	out	0x39, r0	; 57
     e5e:	0f 90       	pop	r0
     e60:	08 be       	out	0x38, r0	; 56
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_106>:
ISR(TWIF_TWIS_vect) { //slave
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	08 b6       	in	r0, 0x38	; 56
     e78:	0f 92       	push	r0
     e7a:	18 be       	out	0x38, r1	; 56
     e7c:	09 b6       	in	r0, 0x39	; 57
     e7e:	0f 92       	push	r0
     e80:	19 be       	out	0x39, r1	; 57
     e82:	0b b6       	in	r0, 0x3b	; 59
     e84:	0f 92       	push	r0
     e86:	1b be       	out	0x3b, r1	; 59
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
     ea0:	60 91 3f 23 	lds	r22, 0x233F	; 0x80233f <TWIF_RxCallback>
     ea4:	70 91 40 23 	lds	r23, 0x2340	; 0x802340 <TWIF_RxCallback+0x1>
     ea8:	40 eb       	ldi	r20, 0xB0	; 176
     eaa:	54 e0       	ldi	r21, 0x04	; 4
     eac:	80 91 47 23 	lds	r24, 0x2347	; 0x802347 <TWIF_TxCallback>
     eb0:	90 91 48 23 	lds	r25, 0x2348	; 0x802348 <TWIF_TxCallback+0x1>
     eb4:	0e 94 6d 06 	call	0xcda	; 0xcda <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0b be       	out	0x3b, r0	; 59
     ed4:	0f 90       	pop	r0
     ed6:	09 be       	out	0x39, r0	; 57
     ed8:	0f 90       	pop	r0
     eda:	08 be       	out	0x38, r0	; 56
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <_Z8TWI_initR10TWI_struct>:
	}
}


void TWI_init(TWI_struct &TWI) //als slave
{
     ee6:	fc 01       	movw	r30, r24
	TWI.SLAVE.CTRLA = (1<<TWI_SLAVE_APIEN_bp)|(1<<TWI_SLAVE_ENABLE_bp)|(1<<TWI_SLAVE_PIEN_bp)|(1<<TWI_SLAVE_PMEN_bp);
     ee8:	8e e1       	ldi	r24, 0x1E	; 30
     eea:	80 87       	std	Z+8, r24	; 0x08
	TWI.SLAVE.CTRLA |= (1<<TWI_SLAVE_DIEN_bp);
     eec:	80 85       	ldd	r24, Z+8	; 0x08
     eee:	80 62       	ori	r24, 0x20	; 32
     ef0:	80 87       	std	Z+8, r24	; 0x08

	//toegevoegd voor TWI_Write(), clear deze bits om het springen naar ISRs uit te schakelen
	TWI.SLAVE.CTRLA |= TWI_MASTER_INTLVL0_bm | TWI_MASTER_INTLVL1_bm; //enable port interrupt high level
     ef2:	80 85       	ldd	r24, Z+8	; 0x08
     ef4:	80 6c       	ori	r24, 0xC0	; 192
     ef6:	80 87       	std	Z+8, r24	; 0x08
     ef8:	08 95       	ret

00000efa <_Z19TWI_RecievedAddressR10TWI_struct>:


bool TWI_RecievedAddress(TWI_struct &TWI)
{
	//valid address received and write operation
	return ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)));
     efa:	fc 01       	movw	r30, r24
     efc:	22 85       	ldd	r18, Z+10	; 0x0a
     efe:	26 ff       	sbrs	r18, 6
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <_Z19TWI_RecievedAddressR10TWI_struct+0x14>
     f02:	82 85       	ldd	r24, Z+10	; 0x0a
     f04:	86 95       	lsr	r24
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	89 27       	eor	r24, r25
     f0c:	08 95       	ret
     f0e:	80 e0       	ldi	r24, 0x00	; 0
}
     f10:	08 95       	ret

00000f12 <_Z17TWI_ReceivePacketR10TWI_structPhh>:

//============================================================
//	RECEIVE PACKET : HVWI VERSIE
//============================================================
bool TWI_ReceivePacket(TWI_struct &TWI, uint8_t* buffer, uint8_t bufferLength) {
     f12:	fc 01       	movw	r30, r24
	//variabelen
	volatile static bool bResult;
	volatile static int i;
	//begin bij de eerste ontvangst databuffer index
	i=0;
     f14:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f18:	10 92 3e 23 	sts	0x233E, r1	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
	//uitgangspunt: het correct ontvangen van data door de slave vanaf de master is niet gelukt
	bResult = false;
     f1c:	10 92 3c 23 	sts	0x233C, r1	; 0x80233c <__data_end>
	//   TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm; //hier wordt een '1' weggeschreven in het APIF bit waardoor
	//                                       //dit bit wordt gewist(!), zie datasheet. Alle overige 0-bits
	//                                       //hebben geen invloed op de overige register bits inhoud(!)
	//----------------------------------------------------------------------------------------------------
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
     f20:	80 e4       	ldi	r24, 0x40	; 64
     f22:	82 87       	std	Z+10, r24	; 0x0a
			break;
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     f24:	50 e0       	ldi	r21, 0x00	; 0
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     f26:	20 e8       	ldi	r18, 0x80	; 128
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
	//voor altijd doe
	while ( true ) {
		//er is een door de master gegenereerde stop conditie gedetecteerd (want TWI_SLAVE_PIEN_bm in CTRLA is gezet)
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_APIF_bm ) {
     f28:	82 85       	ldd	r24, Z+10	; 0x0a
     f2a:	86 ff       	sbrs	r24, 6
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x24>
			//meld een pass
			bResult = true ;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 3c 23 	sts	0x233C, r24	; 0x80233c <__data_end>
			//verlaat de lus
			break;
     f34:	1b c0       	rjmp	.+54     	; 0xf6c <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
     f36:	82 85       	ldd	r24, Z+10	; 0x0a
     f38:	88 23       	and	r24, r24
     f3a:	b4 f7       	brge	.-20     	; 0xf28 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     f3c:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f40:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f44:	48 17       	cp	r20, r24
     f46:	59 07       	cpc	r21, r25
     f48:	8c f0       	brlt	.+34     	; 0xf6c <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
				//noteer het ontvangen databyte
				buffer[i++] = TWI.SLAVE.DATA;
     f4a:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f4e:	90 91 3e 23 	lds	r25, 0x233E	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f52:	dc 01       	movw	r26, r24
     f54:	11 96       	adiw	r26, 0x01	; 1
     f56:	a0 93 3d 23 	sts	0x233D, r26	; 0x80233d <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f5a:	b0 93 3e 23 	sts	0x233E, r27	; 0x80233e <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f5e:	34 85       	ldd	r19, Z+12	; 0x0c
     f60:	db 01       	movw	r26, r22
     f62:	a8 0f       	add	r26, r24
     f64:	b9 1f       	adc	r27, r25
     f66:	3c 93       	st	X, r19
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     f68:	22 87       	std	Z+10, r18	; 0x0a
     f6a:	de cf       	rjmp	.-68     	; 0xf28 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
		}//if
	}//while
	//rapporteer het resultaat
	return bResult ;
     f6c:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <__data_end>
} //TWI_ReceivePacket
     f70:	08 95       	ret

00000f72 <_Z9TWI_WriteR10TWI_structh>:


bool TWI_Write(TWI_struct &TWI, uint8_t byte) //als slave
{
     f72:	fc 01       	movw	r30, r24
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
     f74:	82 85       	ldd	r24, Z+10	; 0x0a
     f76:	86 ff       	sbrs	r24, 6
     f78:	fd cf       	rjmp	.-6      	; 0xf74 <_Z9TWI_WriteR10TWI_structh+0x2>

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
     f7a:	82 85       	ldd	r24, Z+10	; 0x0a
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	25 c0       	rjmp	.+74     	; 0xfca <_Z9TWI_WriteR10TWI_structh+0x58>
		return false; //master write operation
	}

	while(1) {
		TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f80:	82 85       	ldd	r24, Z+10	; 0x0a
     f82:	80 6c       	ori	r24, 0xC0	; 192
     f84:	82 87       	std	Z+10, r24	; 0x0a

		TWI.SLAVE.DATA = byte;
     f86:	64 87       	std	Z+12, r22	; 0x0c

		//acknowledge and send byte
		TWI.SLAVE.CTRLB &= ~(TWI_SLAVE_ACKACT_bm); //ACK
     f88:	81 85       	ldd	r24, Z+9	; 0x09
     f8a:	8b 7f       	andi	r24, 0xFB	; 251
     f8c:	81 87       	std	Z+9, r24	; 0x09
//		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp); //RESPONSE, er komen meer bytes	//<<< gebruik deze voor een toekomstige TWI_SendPacket functie
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD1_bp); //COMPLETE, enige byte wordt verzonden
     f8e:	81 85       	ldd	r24, Z+9	; 0x09
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	81 87       	std	Z+9, r24	; 0x09

		//wait for transmission completed
		while(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIF_bp)) {
     f94:	82 85       	ldd	r24, Z+10	; 0x0a
     f96:	88 23       	and	r24, r24
     f98:	74 f4       	brge	.+28     	; 0xfb6 <_Z9TWI_WriteR10TWI_structh+0x44>
			//check for collisions or bus errors
			if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_COLL_bp) || TWI.SLAVE.STATUS &(1<<TWI_SLAVE_BUSERR_bp)) {
     f9a:	82 85       	ldd	r24, Z+10	; 0x0a
     f9c:	83 fd       	sbrc	r24, 3
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <_Z9TWI_WriteR10TWI_structh+0x34>
     fa0:	82 85       	ldd	r24, Z+10	; 0x0a
     fa2:	82 ff       	sbrs	r24, 2
     fa4:	f7 cf       	rjmp	.-18     	; 0xf94 <_Z9TWI_WriteR10TWI_structh+0x22>
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_BUSERR_bp); //clear buserror, collision is cleared automatically
     fa6:	82 85       	ldd	r24, Z+10	; 0x0a
     fa8:	84 60       	ori	r24, 0x04	; 4
     faa:	82 87       	std	Z+10, r24	; 0x0a
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     fac:	82 85       	ldd	r24, Z+10	; 0x0a
     fae:	80 6c       	ori	r24, 0xC0	; 192
     fb0:	82 87       	std	Z+10, r24	; 0x0a
				return false;
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
     fb6:	80 e5       	ldi	r24, 0x50	; 80
     fb8:	8a 95       	dec	r24
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <_Z9TWI_WriteR10TWI_structh+0x46>

		_delay_us(10);

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
     fbc:	82 85       	ldd	r24, Z+10	; 0x0a
     fbe:	86 ff       	sbrs	r24, 6
     fc0:	df cf       	rjmp	.-66     	; 0xf80 <_Z9TWI_WriteR10TWI_structh+0xe>
     fc2:	82 85       	ldd	r24, Z+10	; 0x0a
     fc4:	80 fd       	sbrc	r24, 0
     fc6:	dc cf       	rjmp	.-72     	; 0xf80 <_Z9TWI_WriteR10TWI_structh+0xe>
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <_Z9TWI_WriteR10TWI_structh+0x5c>
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
		return false; //master write operation
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
				//received stop condition
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     fce:	82 85       	ldd	r24, Z+10	; 0x0a
     fd0:	80 6c       	ori	r24, 0xC0	; 192
     fd2:	82 87       	std	Z+10, r24	; 0x0a
				return true;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
			}
//		} //ACK, continue transmitting
	}
}
     fd6:	08 95       	ret

00000fd8 <_Z13TWI_onRequestPFvvER10TWI_struct>:


//tx callbacks, set function call at interrupt
void TWI_onRequest(void (*f)(), TWI_struct &twi) {
	switch ((int) (&twi)) {
     fd8:	60 39       	cpi	r22, 0x90	; 144
     fda:	24 e0       	ldi	r18, 0x04	; 4
     fdc:	72 07       	cpc	r23, r18
     fde:	91 f0       	breq	.+36     	; 0x1004 <_Z13TWI_onRequestPFvvER10TWI_struct+0x2c>
     fe0:	24 f4       	brge	.+8      	; 0xfea <_Z13TWI_onRequestPFvvER10TWI_struct+0x12>
     fe2:	60 38       	cpi	r22, 0x80	; 128
     fe4:	74 40       	sbci	r23, 0x04	; 4
     fe6:	49 f0       	breq	.+18     	; 0xffa <_Z13TWI_onRequestPFvvER10TWI_struct+0x22>
     fe8:	1c c0       	rjmp	.+56     	; 0x1022 <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
     fea:	60 3a       	cpi	r22, 0xA0	; 160
     fec:	24 e0       	ldi	r18, 0x04	; 4
     fee:	72 07       	cpc	r23, r18
     ff0:	71 f0       	breq	.+28     	; 0x100e <_Z13TWI_onRequestPFvvER10TWI_struct+0x36>
     ff2:	60 3b       	cpi	r22, 0xB0	; 176
     ff4:	74 40       	sbci	r23, 0x04	; 4
     ff6:	81 f0       	breq	.+32     	; 0x1018 <_Z13TWI_onRequestPFvvER10TWI_struct+0x40>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_TxCallback = f; break;
     ffa:	80 93 4d 23 	sts	0x234D, r24	; 0x80234d <TWIC_TxCallback>
     ffe:	90 93 4e 23 	sts	0x234E, r25	; 0x80234e <TWIC_TxCallback+0x1>
    1002:	08 95       	ret
		case TWID_ptr: TWID_TxCallback = f; break;
    1004:	80 93 4b 23 	sts	0x234B, r24	; 0x80234b <TWID_TxCallback>
    1008:	90 93 4c 23 	sts	0x234C, r25	; 0x80234c <TWID_TxCallback+0x1>
    100c:	08 95       	ret
		case TWIE_ptr: TWIE_TxCallback = f; break;
    100e:	80 93 49 23 	sts	0x2349, r24	; 0x802349 <TWIE_TxCallback>
    1012:	90 93 4a 23 	sts	0x234A, r25	; 0x80234a <TWIE_TxCallback+0x1>
    1016:	08 95       	ret
		case TWIF_ptr: TWIF_TxCallback = f; break;
    1018:	80 93 47 23 	sts	0x2347, r24	; 0x802347 <TWIF_TxCallback>
    101c:	90 93 48 23 	sts	0x2348, r25	; 0x802348 <TWIF_TxCallback+0x1>
    1020:	08 95       	ret
    1022:	ff cf       	rjmp	.-2      	; 0x1022 <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>

00001024 <_Z13TWI_onReceivePFvhER10TWI_struct>:
}


//rx callbacks, set function call at interrupt
void TWI_onReceive(void (*f)(uint8_t), TWI_struct &twi) {
	switch ((int) &twi) {
    1024:	60 39       	cpi	r22, 0x90	; 144
    1026:	24 e0       	ldi	r18, 0x04	; 4
    1028:	72 07       	cpc	r23, r18
    102a:	91 f0       	breq	.+36     	; 0x1050 <_Z13TWI_onReceivePFvhER10TWI_struct+0x2c>
    102c:	24 f4       	brge	.+8      	; 0x1036 <_Z13TWI_onReceivePFvhER10TWI_struct+0x12>
    102e:	60 38       	cpi	r22, 0x80	; 128
    1030:	74 40       	sbci	r23, 0x04	; 4
    1032:	49 f0       	breq	.+18     	; 0x1046 <_Z13TWI_onReceivePFvhER10TWI_struct+0x22>
    1034:	1c c0       	rjmp	.+56     	; 0x106e <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
    1036:	60 3a       	cpi	r22, 0xA0	; 160
    1038:	24 e0       	ldi	r18, 0x04	; 4
    103a:	72 07       	cpc	r23, r18
    103c:	71 f0       	breq	.+28     	; 0x105a <_Z13TWI_onReceivePFvhER10TWI_struct+0x36>
    103e:	60 3b       	cpi	r22, 0xB0	; 176
    1040:	74 40       	sbci	r23, 0x04	; 4
    1042:	81 f0       	breq	.+32     	; 0x1064 <_Z13TWI_onReceivePFvhER10TWI_struct+0x40>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_RxCallback = f; break;
    1046:	80 93 45 23 	sts	0x2345, r24	; 0x802345 <TWIC_RxCallback>
    104a:	90 93 46 23 	sts	0x2346, r25	; 0x802346 <TWIC_RxCallback+0x1>
    104e:	08 95       	ret
		case TWID_ptr: TWID_RxCallback = f; break;
    1050:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <TWID_RxCallback>
    1054:	90 93 44 23 	sts	0x2344, r25	; 0x802344 <TWID_RxCallback+0x1>
    1058:	08 95       	ret
		case TWIE_ptr: TWIE_RxCallback = f; break;
    105a:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <TWIE_RxCallback>
    105e:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <TWIE_RxCallback+0x1>
    1062:	08 95       	ret
		case TWIF_ptr: TWIF_RxCallback = f; break;
    1064:	80 93 3f 23 	sts	0x233F, r24	; 0x80233f <TWIF_RxCallback>
    1068:	90 93 40 23 	sts	0x2340, r25	; 0x802340 <TWIF_RxCallback+0x1>
    106c:	08 95       	ret
    106e:	ff cf       	rjmp	.-2      	; 0x106e <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>

00001070 <_Z10HexToASCIIh>:

#include "UART.h"

char HexToASCII(uint8_t i)
  {
	  i &= 0x0f;
    1070:	8f 70       	andi	r24, 0x0F	; 15
	  if(i > 9)
    1072:	8a 30       	cpi	r24, 0x0A	; 10
    1074:	10 f0       	brcs	.+4      	; 0x107a <_Z10HexToASCIIh+0xa>
	  return i+'A'-10;
    1076:	89 5c       	subi	r24, 0xC9	; 201
    1078:	08 95       	ret
	  else
	  return i+'0';
    107a:	80 5d       	subi	r24, 0xD0	; 208
  }
    107c:	08 95       	ret

0000107e <_Z18USART_Set_BaudrateR12USART_structmm>:
 
 bool USART_Set_Baudrate(USART_struct &USART, uint32_t baud, uint32_t cpu_hz)
{
    107e:	4f 92       	push	r4
    1080:	5f 92       	push	r5
    1082:	6f 92       	push	r6
    1084:	7f 92       	push	r7
    1086:	8f 92       	push	r8
    1088:	9f 92       	push	r9
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	7c 01       	movw	r14, r24
    109a:	4a 01       	movw	r8, r20
    109c:	5b 01       	movw	r10, r22
    109e:	28 01       	movw	r4, r16
    10a0:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    10a2:	fc 01       	movw	r30, r24
    10a4:	84 81       	ldd	r24, Z+4	; 0x04
    10a6:	82 ff       	sbrs	r24, 2
    10a8:	16 c0       	rjmp	.+44     	; 0x10d6 <_Z18USART_Set_BaudrateR12USART_structmm+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    10aa:	d9 01       	movw	r26, r18
    10ac:	c8 01       	movw	r24, r16
    10ae:	68 94       	set
    10b0:	12 f8       	bld	r1, 2
    10b2:	b6 95       	lsr	r27
    10b4:	a7 95       	ror	r26
    10b6:	97 95       	ror	r25
    10b8:	87 95       	ror	r24
    10ba:	16 94       	lsr	r1
    10bc:	d1 f7       	brne	.-12     	; 0x10b2 <_Z18USART_Set_BaudrateR12USART_structmm+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    10be:	b9 01       	movw	r22, r18
    10c0:	a8 01       	movw	r20, r16
    10c2:	03 2e       	mov	r0, r19
    10c4:	36 e1       	ldi	r19, 0x16	; 22
    10c6:	76 95       	lsr	r23
    10c8:	67 95       	ror	r22
    10ca:	57 95       	ror	r21
    10cc:	47 95       	ror	r20
    10ce:	3a 95       	dec	r19
    10d0:	d1 f7       	brne	.-12     	; 0x10c6 <_Z18USART_Set_BaudrateR12USART_structmm+0x48>
    10d2:	30 2d       	mov	r19, r0
    10d4:	15 c0       	rjmp	.+42     	; 0x1100 <_Z18USART_Set_BaudrateR12USART_structmm+0x82>

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    10d6:	d9 01       	movw	r26, r18
    10d8:	c8 01       	movw	r24, r16
    10da:	68 94       	set
    10dc:	13 f8       	bld	r1, 3
    10de:	b6 95       	lsr	r27
    10e0:	a7 95       	ror	r26
    10e2:	97 95       	ror	r25
    10e4:	87 95       	ror	r24
    10e6:	16 94       	lsr	r1
    10e8:	d1 f7       	brne	.-12     	; 0x10de <_Z18USART_Set_BaudrateR12USART_structmm+0x60>
		min_rate /= 2;
    10ea:	b9 01       	movw	r22, r18
    10ec:	a8 01       	movw	r20, r16
    10ee:	03 2e       	mov	r0, r19
    10f0:	37 e1       	ldi	r19, 0x17	; 23
    10f2:	76 95       	lsr	r23
    10f4:	67 95       	ror	r22
    10f6:	57 95       	ror	r21
    10f8:	47 95       	ror	r20
    10fa:	3a 95       	dec	r19
    10fc:	d1 f7       	brne	.-12     	; 0x10f2 <_Z18USART_Set_BaudrateR12USART_structmm+0x74>
    10fe:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1100:	88 15       	cp	r24, r8
    1102:	99 05       	cpc	r25, r9
    1104:	aa 05       	cpc	r26, r10
    1106:	bb 05       	cpc	r27, r11
    1108:	08 f4       	brcc	.+2      	; 0x110c <_Z18USART_Set_BaudrateR12USART_structmm+0x8e>
    110a:	a6 c0       	rjmp	.+332    	; 0x1258 <_Z18USART_Set_BaudrateR12USART_structmm+0x1da>
    110c:	84 16       	cp	r8, r20
    110e:	95 06       	cpc	r9, r21
    1110:	a6 06       	cpc	r10, r22
    1112:	b7 06       	cpc	r11, r23
    1114:	08 f4       	brcc	.+2      	; 0x1118 <_Z18USART_Set_BaudrateR12USART_structmm+0x9a>
    1116:	a2 c0       	rjmp	.+324    	; 0x125c <_Z18USART_Set_BaudrateR12USART_structmm+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    1118:	f7 01       	movw	r30, r14
    111a:	84 81       	ldd	r24, Z+4	; 0x04
    111c:	82 fd       	sbrc	r24, 2
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <_Z18USART_Set_BaudrateR12USART_structmm+0xaa>
		baud *= 2;
    1120:	88 0c       	add	r8, r8
    1122:	99 1c       	adc	r9, r9
    1124:	aa 1c       	adc	r10, r10
    1126:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1128:	c3 01       	movw	r24, r6
    112a:	b2 01       	movw	r22, r4
    112c:	a5 01       	movw	r20, r10
    112e:	94 01       	movw	r18, r8
    1130:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1134:	2f 3f       	cpi	r18, 0xFF	; 255
    1136:	31 05       	cpc	r19, r1
    1138:	41 05       	cpc	r20, r1
    113a:	51 05       	cpc	r21, r1
    113c:	08 f4       	brcc	.+2      	; 0x1140 <_Z18USART_Set_BaudrateR12USART_structmm+0xc2>
    113e:	90 c0       	rjmp	.+288    	; 0x1260 <_Z18USART_Set_BaudrateR12USART_structmm+0x1e2>
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	c9 ef       	ldi	r28, 0xF9	; 249
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <_Z18USART_Set_BaudrateR12USART_structmm+0xd8>
    114c:	28 17       	cp	r18, r24
    114e:	39 07       	cpc	r19, r25
    1150:	4a 07       	cpc	r20, r26
    1152:	5b 07       	cpc	r21, r27
    1154:	58 f0       	brcs	.+22     	; 0x116c <_Z18USART_Set_BaudrateR12USART_structmm+0xee>
			break;
		}

		limit <<= 1;
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	aa 1f       	adc	r26, r26
    115c:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    115e:	cd 3f       	cpi	r28, 0xFD	; 253
    1160:	0c f4       	brge	.+2      	; 0x1164 <_Z18USART_Set_BaudrateR12USART_structmm+0xe6>
			limit |= 1;
    1162:	81 60       	ori	r24, 0x01	; 1
    1164:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1166:	c7 30       	cpi	r28, 0x07	; 7
    1168:	89 f7       	brne	.-30     	; 0x114c <_Z18USART_Set_BaudrateR12USART_structmm+0xce>
    116a:	4f c0       	rjmp	.+158    	; 0x120a <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    116c:	cc 23       	and	r28, r28
    116e:	0c f0       	brlt	.+2      	; 0x1172 <_Z18USART_Set_BaudrateR12USART_structmm+0xf4>
    1170:	4c c0       	rjmp	.+152    	; 0x120a <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1172:	d5 01       	movw	r26, r10
    1174:	c4 01       	movw	r24, r8
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	aa 1f       	adc	r26, r26
    117c:	bb 1f       	adc	r27, r27
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	aa 1f       	adc	r26, r26
    1184:	bb 1f       	adc	r27, r27
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	aa 1f       	adc	r26, r26
    118c:	bb 1f       	adc	r27, r27
    118e:	48 1a       	sub	r4, r24
    1190:	59 0a       	sbc	r5, r25
    1192:	6a 0a       	sbc	r6, r26
    1194:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1196:	ce 3f       	cpi	r28, 0xFE	; 254
    1198:	f4 f4       	brge	.+60     	; 0x11d6 <_Z18USART_Set_BaudrateR12USART_structmm+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    119a:	8d ef       	ldi	r24, 0xFD	; 253
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	8c 1b       	sub	r24, r28
    11a0:	91 09       	sbc	r25, r1
    11a2:	c7 fd       	sbrc	r28, 7
    11a4:	93 95       	inc	r25
    11a6:	04 c0       	rjmp	.+8      	; 0x11b0 <_Z18USART_Set_BaudrateR12USART_structmm+0x132>
    11a8:	44 0c       	add	r4, r4
    11aa:	55 1c       	adc	r5, r5
    11ac:	66 1c       	adc	r6, r6
    11ae:	77 1c       	adc	r7, r7
    11b0:	8a 95       	dec	r24
    11b2:	d2 f7       	brpl	.-12     	; 0x11a8 <_Z18USART_Set_BaudrateR12USART_structmm+0x12a>
    11b4:	d5 01       	movw	r26, r10
    11b6:	c4 01       	movw	r24, r8
    11b8:	b6 95       	lsr	r27
    11ba:	a7 95       	ror	r26
    11bc:	97 95       	ror	r25
    11be:	87 95       	ror	r24
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	64 0d       	add	r22, r4
    11c6:	75 1d       	adc	r23, r5
    11c8:	86 1d       	adc	r24, r6
    11ca:	97 1d       	adc	r25, r7
    11cc:	a5 01       	movw	r20, r10
    11ce:	94 01       	movw	r18, r8
    11d0:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>
    11d4:	37 c0       	rjmp	.+110    	; 0x1244 <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
		} else {
			baud <<= exp + 3;
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	8c 0f       	add	r24, r28
    11da:	a5 01       	movw	r20, r10
    11dc:	94 01       	movw	r18, r8
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <_Z18USART_Set_BaudrateR12USART_structmm+0x16a>
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	44 1f       	adc	r20, r20
    11e6:	55 1f       	adc	r21, r21
    11e8:	8a 95       	dec	r24
    11ea:	d2 f7       	brpl	.-12     	; 0x11e0 <_Z18USART_Set_BaudrateR12USART_structmm+0x162>
			div = (cpu_hz + baud / 2) / baud;
    11ec:	da 01       	movw	r26, r20
    11ee:	c9 01       	movw	r24, r18
    11f0:	b6 95       	lsr	r27
    11f2:	a7 95       	ror	r26
    11f4:	97 95       	ror	r25
    11f6:	87 95       	ror	r24
    11f8:	bc 01       	movw	r22, r24
    11fa:	cd 01       	movw	r24, r26
    11fc:	64 0d       	add	r22, r4
    11fe:	75 1d       	adc	r23, r5
    1200:	86 1d       	adc	r24, r6
    1202:	97 1d       	adc	r25, r7
    1204:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>
    1208:	1d c0       	rjmp	.+58     	; 0x1244 <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    120a:	83 e0       	ldi	r24, 0x03	; 3
    120c:	8c 0f       	add	r24, r28
    120e:	a5 01       	movw	r20, r10
    1210:	94 01       	movw	r18, r8
    1212:	04 c0       	rjmp	.+8      	; 0x121c <_Z18USART_Set_BaudrateR12USART_structmm+0x19e>
    1214:	22 0f       	add	r18, r18
    1216:	33 1f       	adc	r19, r19
    1218:	44 1f       	adc	r20, r20
    121a:	55 1f       	adc	r21, r21
    121c:	8a 95       	dec	r24
    121e:	d2 f7       	brpl	.-12     	; 0x1214 <_Z18USART_Set_BaudrateR12USART_structmm+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1220:	da 01       	movw	r26, r20
    1222:	c9 01       	movw	r24, r18
    1224:	b6 95       	lsr	r27
    1226:	a7 95       	ror	r26
    1228:	97 95       	ror	r25
    122a:	87 95       	ror	r24
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	64 0d       	add	r22, r4
    1232:	75 1d       	adc	r23, r5
    1234:	86 1d       	adc	r24, r6
    1236:	97 1d       	adc	r25, r7
    1238:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>
    123c:	21 50       	subi	r18, 0x01	; 1
    123e:	31 09       	sbc	r19, r1
    1240:	41 09       	sbc	r20, r1
    1242:	51 09       	sbc	r21, r1
	}

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1244:	83 2f       	mov	r24, r19
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	c2 95       	swap	r28
    124a:	c0 7f       	andi	r28, 0xF0	; 240
    124c:	c8 2b       	or	r28, r24
    124e:	f7 01       	movw	r30, r14
    1250:	c7 83       	std	Z+7, r28	; 0x07
	USART.BAUDCTRLA = (uint8_t)div;
    1252:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	18 c0       	rjmp	.+48     	; 0x1288 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	16 c0       	rjmp	.+44     	; 0x1288 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1260:	d5 01       	movw	r26, r10
    1262:	c4 01       	movw	r24, r8
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	aa 1f       	adc	r26, r26
    126a:	bb 1f       	adc	r27, r27
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	aa 1f       	adc	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	aa 1f       	adc	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	48 1a       	sub	r4, r24
    127e:	59 0a       	sbc	r5, r25
    1280:	6a 0a       	sbc	r6, r26
    1282:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1284:	c9 ef       	ldi	r28, 0xF9	; 249
    1286:	89 cf       	rjmp	.-238    	; 0x119a <_Z18USART_Set_BaudrateR12USART_structmm+0x11c>

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	USART.BAUDCTRLA = (uint8_t)div;

	return true;
}
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	ff 90       	pop	r15
    1290:	ef 90       	pop	r14
    1292:	bf 90       	pop	r11
    1294:	af 90       	pop	r10
    1296:	9f 90       	pop	r9
    1298:	8f 90       	pop	r8
    129a:	7f 90       	pop	r7
    129c:	6f 90       	pop	r6
    129e:	5f 90       	pop	r5
    12a0:	4f 90       	pop	r4
    12a2:	08 95       	ret

000012a4 <_Z10USART_InitR12USART_structmmb>:
 
 
 void USART_Init(USART_struct &USART, uint32_t baud, uint32_t cpu_hz, bool doubleSpeed)
 {	
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	ec 01       	movw	r28, r24
	 /* Set baud rate */
	 USART_Set_Baudrate(USART, baud,cpu_hz);
    12ae:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z18USART_Set_BaudrateR12USART_structmm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b2:	8f e5       	ldi	r24, 0x5F	; 95
    12b4:	9a ee       	ldi	r25, 0xEA	; 234
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <_Z10USART_InitR12USART_structmmb+0x12>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <_Z10USART_InitR12USART_structmmb+0x18>
    12bc:	00 00       	nop
	 _delay_ms(10); // wait for stable clock
	 //USART.CTRLA = (1 << USART_RXCINTLVL0_bp)|(1 << USART_TXCINTLVL0_bp)|(1 << USART_DREINTLVL0_bp);
	 USART.CTRLB = (1 << USART_RXEN_bp)|(1 << USART_TXEN_bp); 
    12be:	88 e1       	ldi	r24, 0x18	; 24
    12c0:	8c 83       	std	Y+4, r24	; 0x04
 }
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <_Z14USART_TransmitR12USART_structc>:

void USART_Transmit(USART_struct &USART, const char data )
{
    12cc:	fc 01       	movw	r30, r24
	/* Wait for empty transmit buffer */
	while ( !( USART.STATUS & (1<<USART_DREIF_bp)) );
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	95 ff       	sbrs	r25, 5
    12d2:	fd cf       	rjmp	.-6      	; 0x12ce <_Z14USART_TransmitR12USART_structc+0x2>
	/* Put data into buffer, sends the data */
	USART.DATA = data;
    12d4:	60 83       	st	Z, r22
    12d6:	08 95       	ret

000012d8 <_Z13USART_ReceiveR12USART_struct>:
}

char USART_Receive(USART_struct &USART)
{
    12d8:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	while ( !(USART.STATUS & (1<<USART_RXCIF_bp)));
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	99 23       	and	r25, r25
    12de:	ec f7       	brge	.-6      	; 0x12da <_Z13USART_ReceiveR12USART_struct+0x2>
	/* Get and return received data from buffer */
	return USART.DATA;
    12e0:	80 81       	ld	r24, Z
}
    12e2:	08 95       	ret

000012e4 <_Z13USART_ReceiveR12USART_structjRb>:

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
    12e4:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    12e6:	61 15       	cp	r22, r1
    12e8:	71 05       	cpc	r23, r1
    12ea:	99 f0       	breq	.+38     	; 0x1312 <_Z13USART_ReceiveR12USART_structjRb+0x2e>
	{
		if(USART.STATUS & (1<<USART_RXCIF_bp))
    12ec:	81 81       	ldd	r24, Z+1	; 0x01
    12ee:	88 23       	and	r24, r24
    12f0:	34 f0       	brlt	.+12     	; 0x12fe <_Z13USART_ReceiveR12USART_structjRb+0x1a>
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <_Z13USART_ReceiveR12USART_structjRb+0x1e>
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	99 23       	and	r25, r25
    12fc:	14 f4       	brge	.+4      	; 0x1302 <_Z13USART_ReceiveR12USART_structjRb+0x1e>
		{
			/* Get and return received data from buffer */
			return USART.DATA;
    12fe:	80 81       	ld	r24, Z
    1300:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	8a 95       	dec	r24
    1306:	f1 f7       	brne	.-4      	; 0x1304 <_Z13USART_ReceiveR12USART_structjRb+0x20>
}

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	62 17       	cp	r22, r18
    130e:	73 07       	cpc	r23, r19
    1310:	99 f7       	brne	.-26     	; 0x12f8 <_Z13USART_ReceiveR12USART_structjRb+0x14>
		}

		_delay_us(1);
	}
	 
	isTimedOut = true;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	fa 01       	movw	r30, r20
    1316:	80 83       	st	Z, r24
	return 0;
    1318:	80 e0       	ldi	r24, 0x00	; 0
}
    131a:	08 95       	ret

0000131c <_Z15USART_AvailableR12USART_struct>:

 bool USART_Available(USART_struct &USART)
 {
	 return (USART.STATUS & (1<<USART_RXCIF_bp));
    131c:	fc 01       	movw	r30, r24
    131e:	81 81       	ldd	r24, Z+1	; 0x01
 }
    1320:	88 1f       	adc	r24, r24
    1322:	88 27       	eor	r24, r24
    1324:	88 1f       	adc	r24, r24
    1326:	08 95       	ret

00001328 <_Z20USART_TransmitStringR12USART_structPKc>:


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	fb 01       	movw	r30, r22
	 for(uint8_t i = 0; str[i]; i++)
    1334:	60 81       	ld	r22, Z
    1336:	66 23       	and	r22, r22
    1338:	69 f0       	breq	.+26     	; 0x1354 <_Z20USART_TransmitStringR12USART_structPKc+0x2c>
    133a:	8f 01       	movw	r16, r30
    133c:	7c 01       	movw	r14, r24
    133e:	c0 e0       	ldi	r28, 0x00	; 0
	 USART_Transmit(USART, str[i]);
    1340:	c7 01       	movw	r24, r14
    1342:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
 }


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
	 for(uint8_t i = 0; str[i]; i++)
    1346:	cf 5f       	subi	r28, 0xFF	; 255
    1348:	f8 01       	movw	r30, r16
    134a:	ec 0f       	add	r30, r28
    134c:	f1 1d       	adc	r31, r1
    134e:	60 81       	ld	r22, Z
    1350:	61 11       	cpse	r22, r1
    1352:	f6 cf       	rjmp	.-20     	; 0x1340 <_Z20USART_TransmitStringR12USART_structPKc+0x18>
	 USART_Transmit(USART, str[i]);
 }
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	ef 90       	pop	r14
    135e:	08 95       	ret

00001360 <_Z14USART_TransmitR12USART_structPKch>:


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
    1360:	ef 92       	push	r14
    1362:	ff 92       	push	r15
    1364:	0f 93       	push	r16
    1366:	1f 93       	push	r17
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
	 for(uint8_t i = 0; i < length; i++)
    136c:	44 23       	and	r20, r20
    136e:	81 f0       	breq	.+32     	; 0x1390 <_Z14USART_TransmitR12USART_structPKch+0x30>
    1370:	7c 01       	movw	r14, r24
    1372:	eb 01       	movw	r28, r22
    1374:	41 50       	subi	r20, 0x01	; 1
    1376:	04 2f       	mov	r16, r20
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	0f 5f       	subi	r16, 0xFF	; 255
    137c:	1f 4f       	sbci	r17, 0xFF	; 255
    137e:	06 0f       	add	r16, r22
    1380:	17 1f       	adc	r17, r23
	 USART_Transmit(USART, buff[i]);
    1382:	69 91       	ld	r22, Y+
    1384:	c7 01       	movw	r24, r14
    1386:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
 }


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
	 for(uint8_t i = 0; i < length; i++)
    138a:	c0 17       	cp	r28, r16
    138c:	d1 07       	cpc	r29, r17
    138e:	c9 f7       	brne	.-14     	; 0x1382 <_Z14USART_TransmitR12USART_structPKch+0x22>
	 USART_Transmit(USART, buff[i]);
 }
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	08 95       	ret

0000139e <_Z18USART_Transmit_HexR12USART_structc>:

 
 void USART_Transmit_Hex(USART_struct &USART, const char data )
 {
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	ec 01       	movw	r28, r24
    13a6:	16 2f       	mov	r17, r22
	 USART_TransmitString(USART, "0x");
    13a8:	66 e7       	ldi	r22, 0x76	; 118
    13aa:	71 e2       	ldi	r23, 0x21	; 33
    13ac:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	 USART_Transmit(USART, HexToASCII(data>>4));
    13b0:	81 2f       	mov	r24, r17
    13b2:	82 95       	swap	r24
    13b4:	8f 70       	andi	r24, 0x0F	; 15
    13b6:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    13ba:	68 2f       	mov	r22, r24
    13bc:	ce 01       	movw	r24, r28
    13be:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	 USART_Transmit(USART, HexToASCII(data));
    13c2:	81 2f       	mov	r24, r17
    13c4:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    13c8:	68 2f       	mov	r22, r24
    13ca:	ce 01       	movw	r24, r28
    13cc:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
 }
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	08 95       	ret

000013d8 <_Z21USART_Transmit_NumberR12USART_structi>:


 void USART_Transmit_Number(USART_struct &USART, int16_t num)
 {
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	8c 01       	movw	r16, r24
    13e2:	eb 01       	movw	r28, r22
	 if(num < 0)
    13e4:	dd 23       	and	r29, r29
    13e6:	34 f4       	brge	.+12     	; 0x13f4 <_Z21USART_Transmit_NumberR12USART_structi+0x1c>
	 {
		 num = -num;
    13e8:	d1 95       	neg	r29
    13ea:	c1 95       	neg	r28
    13ec:	d1 09       	sbc	r29, r1
		 USART_Transmit(USART, '-');
    13ee:	6d e2       	ldi	r22, 0x2D	; 45
    13f0:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	 }

	 bool started = false;
	 uint8_t ten_thousands	= (num/10000);
    13f4:	ce 01       	movw	r24, r28
    13f6:	60 e1       	ldi	r22, 0x10	; 16
    13f8:	77 e2       	ldi	r23, 0x27	; 39
    13fa:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	 if(ten_thousands > 0)
    13fe:	66 23       	and	r22, r22
    1400:	31 f0       	breq	.+12     	; 0x140e <_Z21USART_Transmit_NumberR12USART_structi+0x36>
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
    1402:	60 5d       	subi	r22, 0xD0	; 208
    1404:	c8 01       	movw	r24, r16
    1406:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
		 started = true;
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <_Z21USART_Transmit_NumberR12USART_structi+0x38>
	 {
		 num = -num;
		 USART_Transmit(USART, '-');
	 }

	 bool started = false;
    140e:	20 e0       	ldi	r18, 0x00	; 0
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
		 started = true;
	 }

	 uint8_t thousands	= (num/1000)%10;
    1410:	ce 01       	movw	r24, r28
    1412:	68 ee       	ldi	r22, 0xE8	; 232
    1414:	73 e0       	ldi	r23, 0x03	; 3
    1416:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    141a:	cb 01       	movw	r24, r22
    141c:	6a e0       	ldi	r22, 0x0A	; 10
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	 if(thousands > 0)
    1424:	88 23       	and	r24, r24
    1426:	81 f0       	breq	.+32     	; 0x1448 <_Z21USART_Transmit_NumberR12USART_structi+0x70>
	 {
		 USART_Transmit(USART, '0'+thousands);
    1428:	60 e3       	ldi	r22, 0x30	; 48
    142a:	68 0f       	add	r22, r24
    142c:	c8 01       	movw	r24, r16
    142e:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t hundreds	= (num/100)%10;
    1432:	ce 01       	movw	r24, r28
    1434:	64 e6       	ldi	r22, 0x64	; 100
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    143c:	cb 01       	movw	r24, r22
    143e:	6a e0       	ldi	r22, 0x0A	; 10
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1446:	0e c0       	rjmp	.+28     	; 0x1464 <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1448:	ce 01       	movw	r24, r28
    144a:	64 e6       	ldi	r22, 0x64	; 100
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1452:	cb 01       	movw	r24, r22
    1454:	6a e0       	ldi	r22, 0x0A	; 10
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	 if(hundreds > 0 || started)
    145c:	81 11       	cpse	r24, r1
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1460:	22 23       	and	r18, r18
    1462:	f9 f0       	breq	.+62     	; 0x14a2 <_Z21USART_Transmit_NumberR12USART_structi+0xca>
	 {
		 USART_Transmit(USART, '0'+hundreds);
    1464:	60 e3       	ldi	r22, 0x30	; 48
    1466:	68 0f       	add	r22, r24
    1468:	c8 01       	movw	r24, r16
    146a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
    146e:	2a e0       	ldi	r18, 0x0A	; 10
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	ce 01       	movw	r24, r28
    1474:	b9 01       	movw	r22, r18
    1476:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    147a:	cb 01       	movw	r24, r22
    147c:	b9 01       	movw	r22, r18
    147e:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	 if(tens > 0 || started)
	 {
		 USART_Transmit(USART, '0'+tens);
    1482:	60 e3       	ldi	r22, 0x30	; 48
    1484:	68 0f       	add	r22, r24
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
    148c:	ce 01       	movw	r24, r28
    148e:	6a e0       	ldi	r22, 0x0A	; 10
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1496:	60 e3       	ldi	r22, 0x30	; 48
    1498:	68 0f       	add	r22, r24
    149a:	c8 01       	movw	r24, r16
    149c:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
 }
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <_Z21USART_Transmit_NumberR12USART_structi+0xe4>
	 {
		 USART_Transmit(USART, '0'+hundreds);
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
    14a2:	2a e0       	ldi	r18, 0x0A	; 10
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	ce 01       	movw	r24, r28
    14a8:	b9 01       	movw	r22, r18
    14aa:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    14ae:	cb 01       	movw	r24, r22
    14b0:	b9 01       	movw	r22, r18
    14b2:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	 if(tens > 0 || started)
    14b6:	88 23       	and	r24, r24
    14b8:	49 f3       	breq	.-46     	; 0x148c <_Z21USART_Transmit_NumberR12USART_structi+0xb4>
    14ba:	e3 cf       	rjmp	.-58     	; 0x1482 <_Z21USART_Transmit_NumberR12USART_structi+0xaa>
		 USART_Transmit(USART, '0'+tens);
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
 }
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <_Z18USART_TransmitDoneR12USART_struct>:
 


bool USART_TransmitDone(USART_struct &USART)
{
	return USART.STATUS & (1<<USART_DREIF_bp);
    14c6:	fc 01       	movw	r30, r24
    14c8:	81 81       	ldd	r24, Z+1	; 0x01
}
    14ca:	85 fb       	bst	r24, 5
    14cc:	88 27       	eor	r24, r24
    14ce:	80 f9       	bld	r24, 0
    14d0:	08 95       	ret

000014d2 <_Z12USB_Transmitc>:

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
    14d8:	08 95       	ret

000014da <_Z11USB_Receivev>:
}

char USB_Receive()
{
	// 	/* Wait for data to be received */
	while (!udi_cdc_is_rx_ready());
    14da:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <udi_cdc_is_rx_ready>
    14de:	88 23       	and	r24, r24
    14e0:	e1 f3       	breq	.-8      	; 0x14da <_Z11USB_Receivev>
	// 	/* Get and return received data from buffer */
	return udi_cdc_getc();
    14e2:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <udi_cdc_getc>
}
    14e6:	08 95       	ret

000014e8 <_Z11USB_ReceivejRb>:

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	8c 01       	movw	r16, r24
    14f6:	7b 01       	movw	r14, r22
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    14f8:	89 2b       	or	r24, r25
    14fa:	81 f0       	breq	.+32     	; 0x151c <_Z11USB_ReceivejRb+0x34>
    14fc:	c0 e0       	ldi	r28, 0x00	; 0
    14fe:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(udi_cdc_is_rx_ready())
    1500:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <udi_cdc_is_rx_ready>
    1504:	88 23       	and	r24, r24
    1506:	19 f0       	breq	.+6      	; 0x150e <_Z11USB_ReceivejRb+0x26>
		{
			/* Get and return received data from buffer */
			return udi_cdc_getc();
    1508:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <udi_cdc_getc>
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <_Z11USB_ReceivejRb+0x3c>
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	8a 95       	dec	r24
    1512:	f1 f7       	brne	.-4      	; 0x1510 <_Z11USB_ReceivejRb+0x28>
}

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    1514:	21 96       	adiw	r28, 0x01	; 1
    1516:	0c 17       	cp	r16, r28
    1518:	1d 07       	cpc	r17, r29
    151a:	91 f7       	brne	.-28     	; 0x1500 <_Z11USB_ReceivejRb+0x18>
		}

		_delay_us(1);
	}
	
	isTimedOut = true;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	f7 01       	movw	r30, r14
    1520:	80 83       	st	Z, r24
	return 0;
    1522:	80 e0       	ldi	r24, 0x00	; 0
}
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	08 95       	ret

00001532 <_Z13USB_Availablev>:

bool USB_Available()
{
	return (udi_cdc_is_tx_ready());
    1532:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <udi_cdc_is_tx_ready>
}
    1536:	08 95       	ret

00001538 <_Z18USB_TransmitStringPKc>:


void USB_TransmitString(const char* str)
{
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	fc 01       	movw	r30, r24
	for(uint8_t i = 0; str[i]; i++)
    1540:	80 81       	ld	r24, Z
    1542:	88 23       	and	r24, r24
    1544:	61 f0       	breq	.+24     	; 0x155e <_Z18USB_TransmitStringPKc+0x26>
    1546:	8f 01       	movw	r16, r30
    1548:	c0 e0       	ldi	r28, 0x00	; 0

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
}


void USB_TransmitString(const char* str)
{
	for(uint8_t i = 0; str[i]; i++)
    1550:	cf 5f       	subi	r28, 0xFF	; 255
    1552:	f8 01       	movw	r30, r16
    1554:	ec 0f       	add	r30, r28
    1556:	f1 1d       	adc	r31, r1
    1558:	80 81       	ld	r24, Z
    155a:	81 11       	cpse	r24, r1
    155c:	f6 cf       	rjmp	.-20     	; 0x154a <_Z18USB_TransmitStringPKc+0x12>
	USB_Transmit(str[i]);
}
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <_Z12USB_TransmitPKch>:


void USB_Transmit(const char* buff, uint8_t length)
{
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
	for(uint8_t i = 0; i < length; i++)
    156e:	66 23       	and	r22, r22
    1570:	79 f0       	breq	.+30     	; 0x1590 <_Z12USB_TransmitPKch+0x2a>
    1572:	ec 01       	movw	r28, r24
    1574:	61 50       	subi	r22, 0x01	; 1
    1576:	06 2f       	mov	r16, r22
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	0f 5f       	subi	r16, 0xFF	; 255
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
    157e:	08 0f       	add	r16, r24
    1580:	19 1f       	adc	r17, r25
	USB_Transmit(buff[i]);
    1582:	89 91       	ld	r24, Y+

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
}


void USB_Transmit(const char* buff, uint8_t length)
{
	for(uint8_t i = 0; i < length; i++)
    158a:	c0 17       	cp	r28, r16
    158c:	d1 07       	cpc	r29, r17
    158e:	c9 f7       	brne	.-14     	; 0x1582 <_Z12USB_TransmitPKch+0x1c>
	USB_Transmit(buff[i]);
}
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	08 95       	ret

0000159a <_Z16USB_Transmit_Hexc>:


void USB_Transmit_Hex(const char data )
{
    159a:	cf 93       	push	r28
    159c:	c8 2f       	mov	r28, r24
	USB_TransmitString("0x");
    159e:	86 e7       	ldi	r24, 0x76	; 118
    15a0:	91 e2       	ldi	r25, 0x21	; 33
    15a2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	USB_Transmit(HexToASCII(data>>4));
    15a6:	8c 2f       	mov	r24, r28
    15a8:	82 95       	swap	r24
    15aa:	8f 70       	andi	r24, 0x0F	; 15
    15ac:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>

void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
    15b6:	8c 2f       	mov	r24, r28
    15b8:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
}
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <_Z19USB_Transmit_Numberi>:


void USB_Transmit_Number(int16_t num)
{
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
	if(num < 0)
    15cc:	99 23       	and	r25, r25
    15ce:	3c f4       	brge	.+14     	; 0x15de <_Z19USB_Transmit_Numberi+0x18>
	{
		num = -num;
    15d0:	d1 95       	neg	r29
    15d2:	c1 95       	neg	r28
    15d4:	d1 09       	sbc	r29, r1

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15d6:	8d e2       	ldi	r24, 0x2D	; 45
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
	uint8_t ten_thousands	= (num/10000);
    15de:	ce 01       	movw	r24, r28
    15e0:	60 e1       	ldi	r22, 0x10	; 16
    15e2:	77 e2       	ldi	r23, 0x27	; 39
    15e4:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	if(ten_thousands > 0)
    15e8:	66 23       	and	r22, r22
    15ea:	39 f0       	breq	.+14     	; 0x15fa <_Z19USB_Transmit_Numberi+0x34>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15ec:	80 e3       	ldi	r24, 0x30	; 48
    15ee:	86 0f       	add	r24, r22
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
	bool started = false;
	uint8_t ten_thousands	= (num/10000);
	if(ten_thousands > 0)
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <_Z19USB_Transmit_Numberi+0x36>
	{
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
    15fa:	20 e0       	ldi	r18, 0x00	; 0
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
	}

	uint8_t thousands	= (num/1000)%10;
    15fc:	ce 01       	movw	r24, r28
    15fe:	68 ee       	ldi	r22, 0xE8	; 232
    1600:	73 e0       	ldi	r23, 0x03	; 3
    1602:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1606:	cb 01       	movw	r24, r22
    1608:	6a e0       	ldi	r22, 0x0A	; 10
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	if(thousands > 0)
    1610:	88 23       	and	r24, r24
    1612:	79 f0       	breq	.+30     	; 0x1632 <_Z19USB_Transmit_Numberi+0x6c>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1614:	80 5d       	subi	r24, 0xD0	; 208
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
	{
		USB_Transmit('0'+thousands);
		started = true;
	}

	uint8_t hundreds	= (num/100)%10;
    161c:	ce 01       	movw	r24, r28
    161e:	64 e6       	ldi	r22, 0x64	; 100
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1626:	cb 01       	movw	r24, r22
    1628:	6a e0       	ldi	r22, 0x0A	; 10
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1630:	0e c0       	rjmp	.+28     	; 0x164e <_Z19USB_Transmit_Numberi+0x88>
    1632:	ce 01       	movw	r24, r28
    1634:	64 e6       	ldi	r22, 0x64	; 100
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    163c:	cb 01       	movw	r24, r22
    163e:	6a e0       	ldi	r22, 0x0A	; 10
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	if(hundreds > 0 || started)
    1646:	81 11       	cpse	r24, r1
    1648:	02 c0       	rjmp	.+4      	; 0x164e <_Z19USB_Transmit_Numberi+0x88>
    164a:	22 23       	and	r18, r18
    164c:	e1 f0       	breq	.+56     	; 0x1686 <_Z19USB_Transmit_Numberi+0xc0>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    164e:	80 5d       	subi	r24, 0xD0	; 208
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
    1656:	2a e0       	ldi	r18, 0x0A	; 10
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	ce 01       	movw	r24, r28
    165c:	b9 01       	movw	r22, r18
    165e:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1662:	cb 01       	movw	r24, r22
    1664:	b9 01       	movw	r22, r18
    1666:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    166a:	80 5d       	subi	r24, 0xD0	; 208
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
    1672:	ce 01       	movw	r24, r28
    1674:	6a e0       	ldi	r22, 0x0A	; 10
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    167c:	80 5d       	subi	r24, 0xD0	; 208
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <udi_cdc_putc>
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <_Z19USB_Transmit_Numberi+0xda>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
    1686:	2a e0       	ldi	r18, 0x0A	; 10
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	ce 01       	movw	r24, r28
    168c:	b9 01       	movw	r22, r18
    168e:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
    1692:	cb 01       	movw	r24, r22
    1694:	b9 01       	movw	r22, r18
    1696:	0e 94 72 30 	call	0x60e4	; 0x60e4 <__divmodhi4>
	if(tens > 0 || started)
    169a:	88 23       	and	r24, r24
    169c:	51 f3       	breq	.-44     	; 0x1672 <_Z19USB_Transmit_Numberi+0xac>
    169e:	e5 cf       	rjmp	.-54     	; 0x166a <_Z19USB_Transmit_Numberi+0xa4>
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <StopElevator>:
	}
}


/* blockly functie */
void StopElevator() {
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	1f 92       	push	r1
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
	USART_TransmitString(USARTD0, "\n\r -----STOPPING ELEVATOR------ \n\r");
    16b4:	69 e7       	ldi	r22, 0x79	; 121
    16b6:	71 e2       	ldi	r23, 0x21	; 33
    16b8:	80 ea       	ldi	r24, 0xA0	; 160
    16ba:	99 e0       	ldi	r25, 0x09	; 9
    16bc:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	uint16_t motor_id = ELEVATOR_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    16c0:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1); // Stopt lift motor
    16c2:	00 eb       	ldi	r16, 0xB0	; 176
    16c4:	1a e0       	ldi	r17, 0x0A	; 10
    16c6:	28 e0       	ldi	r18, 0x08	; 8
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	be 01       	movw	r22, r28
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	8c e4       	ldi	r24, 0x4C	; 76
    16d2:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <ElevatorIsReady>:


/* blockly functie */
bool ElevatorIsReady() {
    16e2:	cf 93       	push	r28
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
    16e4:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <elevatorDirection>
    16e8:	88 23       	and	r24, r24
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <ElevatorIsReady+0x14>
    16ec:	c0 91 50 23 	lds	r28, 0x2350	; 0x802350 <elevatorIsUp>
    16f0:	c1 11       	cpse	r28, r1
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <ElevatorIsReady+0x1e>
    16f4:	0a c0       	rjmp	.+20     	; 0x170a <ElevatorIsReady+0x28>
		StopElevator();
		return 1; // Lift is boven aangekomen
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
    16f6:	c0 91 4f 23 	lds	r28, 0x234F	; 0x80234f <elevatorIsDown>
    16fa:	c1 11       	cpse	r28, r1
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <ElevatorIsReady+0x24>
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <ElevatorIsReady+0x28>

/* blockly functie */
bool ElevatorIsReady() {
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
		StopElevator();
    1700:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <StopElevator>
		return 1; // Lift is boven aangekomen
    1704:	02 c0       	rjmp	.+4      	; 0x170a <ElevatorIsReady+0x28>
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
		StopElevator();
    1706:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <StopElevator>
		return 1; // Lift is beneden aangekomen
	}
	else {
		return 0; // Lift is nog bezig
	}
}
    170a:	8c 2f       	mov	r24, r28
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <ElevatorButtonInISR>:
	}
}


// ISR, switch is ingedrukt
void ElevatorButtonInISR(bool UPdown) {
    1710:	cf 93       	push	r28
	if (UPdown == elevatorDirection) { //Elevator stops moving if it reaches switch opposite to moving direction (ev_richting 1 = up, 0 = down)
    1712:	c0 91 51 23 	lds	r28, 0x2351	; 0x802351 <elevatorDirection>
    1716:	c8 13       	cpse	r28, r24
    1718:	12 c0       	rjmp	.+36     	; 0x173e <ElevatorButtonInISR+0x2e>
		elevatorIsUp = true;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <elevatorIsUp>
		elevatorIsDown = false;
    1720:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <elevatorIsDown>
		StopElevator(); 
    1724:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <StopElevator>
	}
	if (UPdown == elevatorDirection) { //Elevator stops moving if it reaches switch opposite to moving direction (ev_richting 1 = up, 0 = down)
    1728:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <elevatorDirection>
    172c:	c8 13       	cpse	r28, r24
    172e:	07 c0       	rjmp	.+14     	; 0x173e <ElevatorButtonInISR+0x2e>
		elevatorIsUp = false;
    1730:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <elevatorIsUp>
		elevatorIsDown = true;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <elevatorIsDown>
		StopElevator(); 
    173a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <StopElevator>
	}
}
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <resetElevator>:



// Reset de liftknoppen
void resetElevator() {
    1742:	08 95       	ret

00001744 <ElevatorInit>:
	// PORTK_INT0MASK &= ~(LF_SWITCH_PINN_DOWN);
}


// Inputs voor de lift worden op Input-Pullup gezet
void ElevatorInit() {
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
	PORTK_DIR &= ~(EV_SWITCH_PIN_UP); // Set pin as input
    1748:	e0 e2       	ldi	r30, 0x20	; 32
    174a:	f7 e0       	ldi	r31, 0x07	; 7
    174c:	80 81       	ld	r24, Z
    174e:	8f 7e       	andi	r24, 0xEF	; 239
    1750:	80 83       	st	Z, r24
	PORTK_DIR &= ~(EV_SWITCH_PIN_DOWN);
    1752:	80 81       	ld	r24, Z
    1754:	8f 7d       	andi	r24, 0xDF	; 223
    1756:	80 83       	st	Z, r24
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for DOWN\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for DOWN\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for DOWN\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for DOWN\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for DOWN\n\r"); break;
		case PIN5_bm: PORTK_PIN5CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN5CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN5CTRL for DOWN\n\r"); break;
    1758:	e5 e3       	ldi	r30, 0x35	; 53
    175a:	f7 e0       	ldi	r31, 0x07	; 7
    175c:	d8 e1       	ldi	r29, 0x18	; 24
    175e:	d0 83       	st	Z, r29
    1760:	c2 e0       	ldi	r28, 0x02	; 2
    1762:	c0 83       	st	Z, r28
    1764:	6c e9       	ldi	r22, 0x9C	; 156
    1766:	71 e2       	ldi	r23, 0x21	; 33
    1768:	80 ea       	ldi	r24, 0xA0	; 160
    176a:	99 e0       	ldi	r25, 0x09	; 9
    176c:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	switch(EV_SWITCH_PIN_UP){
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for UP\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for UP\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for UP\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for UP\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for UP\n\r"); break;
    1770:	e4 e3       	ldi	r30, 0x34	; 52
    1772:	f7 e0       	ldi	r31, 0x07	; 7
    1774:	d0 83       	st	Z, r29
    1776:	c0 83       	st	Z, r28
    1778:	64 eb       	ldi	r22, 0xB4	; 180
    177a:	71 e2       	ldi	r23, 0x21	; 33
    177c:	80 ea       	ldi	r24, 0xA0	; 160
    177e:	99 e0       	ldi	r25, 0x09	; 9
    1780:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		case PIN6_bm: PORTK_PIN6CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN6CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN6CTRL for UP\n\r"); break;
		case PIN7_bm: PORTK_PIN7CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN7CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN7CTRL for UP\n\r"); break;
		default: break;
	}

	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interrupt opwekkende pin, in het K register
    1784:	ea e2       	ldi	r30, 0x2A	; 42
    1786:	f7 e0       	ldi	r31, 0x07	; 7
    1788:	80 81       	ld	r24, Z
    178a:	80 61       	ori	r24, 0x10	; 16
    178c:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    178e:	80 81       	ld	r24, Z
    1790:	80 62       	ori	r24, 0x20	; 32
    1792:	80 83       	st	Z, r24


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    1794:	e9 e2       	ldi	r30, 0x29	; 41
    1796:	f7 e0       	ldi	r31, 0x07	; 7
    1798:	80 81       	ld	r24, Z
    179a:	81 60       	ori	r24, 0x01	; 1
    179c:	80 83       	st	Z, r24
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <ElevatorInterruptSetup>:


// Deprecated. Functionality moved to ElevatorInit()
void ElevatorInterruptSetup() {
	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interreupt opwekkende pin, in het K register
    17a4:	ea e2       	ldi	r30, 0x2A	; 42
    17a6:	f7 e0       	ldi	r31, 0x07	; 7
    17a8:	80 81       	ld	r24, Z
    17aa:	80 61       	ori	r24, 0x10	; 16
    17ac:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    17ae:	80 81       	ld	r24, Z
    17b0:	80 62       	ori	r24, 0x20	; 32
    17b2:	80 83       	st	Z, r24

	PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; // Interupts op beide flanken
    17b4:	e4 e3       	ldi	r30, 0x34	; 52
    17b6:	f7 e0       	ldi	r31, 0x07	; 7
    17b8:	80 81       	ld	r24, Z
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	80 83       	st	Z, r24
	PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc;
    17be:	e5 e3       	ldi	r30, 0x35	; 53
    17c0:	f7 e0       	ldi	r31, 0x07	; 7
    17c2:	80 81       	ld	r24, Z
    17c4:	82 60       	ori	r24, 0x02	; 2
    17c6:	80 83       	st	Z, r24
	// 31-03-2021, Falling edges om gedrag daarvan te bestuderen


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    17c8:	e9 e2       	ldi	r30, 0x29	; 41
    17ca:	f7 e0       	ldi	r31, 0x07	; 7
    17cc:	80 81       	ld	r24, Z
    17ce:	81 60       	ori	r24, 0x01	; 1
    17d0:	80 83       	st	Z, r24
    17d2:	08 95       	ret

000017d4 <ConfigElevator>:
	}
}



bool ConfigElevator(bool direction) {
    17d4:	cf 93       	push	r28
    17d6:	c8 2f       	mov	r28, r24
	ElevatorInit(); // Liftpinnen worden als input ingesteld
    17d8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ElevatorInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17dc:	2f e7       	ldi	r18, 0x7F	; 127
    17de:	82 e3       	ldi	r24, 0x32	; 50
    17e0:	92 e0       	ldi	r25, 0x02	; 2
    17e2:	21 50       	subi	r18, 0x01	; 1
    17e4:	80 40       	sbci	r24, 0x00	; 0
    17e6:	90 40       	sbci	r25, 0x00	; 0
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <ConfigElevator+0xe>
    17ea:	00 c0       	rjmp	.+0      	; 0x17ec <ConfigElevator+0x18>
    17ec:	00 00       	nop
	_delay_ms(30); // Debounce tijd

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
    17ee:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17f2:	84 fd       	sbrc	r24, 4
    17f4:	19 c0       	rjmp	.+50     	; 0x1828 <ConfigElevator+0x54>
    17f6:	c1 11       	cpse	r28, r1
    17f8:	1c c0       	rjmp	.+56     	; 0x1832 <ConfigElevator+0x5e>
    17fa:	48 c0       	rjmp	.+144    	; 0x188c <ConfigElevator+0xb8>
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    17fc:	c1 11       	cpse	r28, r1
    17fe:	21 c0       	rjmp	.+66     	; 0x1842 <ConfigElevator+0x6e>
    1800:	1c c0       	rjmp	.+56     	; 0x183a <ConfigElevator+0x66>
		elevatorIsDown = true;
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    1802:	80 91 4f 23 	lds	r24, 0x234F	; 0x80234f <elevatorIsDown>
    1806:	81 11       	cpse	r24, r1
    1808:	0d c0       	rjmp	.+26     	; 0x1824 <ConfigElevator+0x50>
    180a:	1f c0       	rjmp	.+62     	; 0x184a <ConfigElevator+0x76>
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    180c:	c1 11       	cpse	r28, r1
    180e:	43 c0       	rjmp	.+134    	; 0x1896 <ConfigElevator+0xc2>
    1810:	25 c0       	rjmp	.+74     	; 0x185c <ConfigElevator+0x88>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    1812:	cc 23       	and	r28, r28
    1814:	59 f1       	breq	.+86     	; 0x186c <ConfigElevator+0x98>
    1816:	26 c0       	rjmp	.+76     	; 0x1864 <ConfigElevator+0x90>
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    1818:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    181c:	85 fd       	sbrc	r24, 5
    181e:	2c c0       	rjmp	.+88     	; 0x1878 <ConfigElevator+0xa4>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	3e c0       	rjmp	.+124    	; 0x18a0 <ConfigElevator+0xcc>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	3c c0       	rjmp	.+120    	; 0x18a0 <ConfigElevator+0xcc>

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    1828:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    182c:	85 ff       	sbrs	r24, 5
    182e:	e6 cf       	rjmp	.-52     	; 0x17fc <ConfigElevator+0x28>
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <ConfigElevator+0x6e>
	_delay_ms(30); // Debounce tijd

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <elevatorIsUp>
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <ConfigElevator+0xb4>
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
		elevatorIsDown = true;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <elevatorIsDown>
    1840:	23 c0       	rjmp	.+70     	; 0x1888 <ConfigElevator+0xb4>
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    1842:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <elevatorIsUp>
    1846:	81 11       	cpse	r24, r1
    1848:	dc cf       	rjmp	.-72     	; 0x1802 <ConfigElevator+0x2e>
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    184a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    184e:	84 ff       	sbrs	r24, 4
    1850:	dd cf       	rjmp	.-70     	; 0x180c <ConfigElevator+0x38>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    1852:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1856:	85 ff       	sbrs	r24, 5
    1858:	dc cf       	rjmp	.-72     	; 0x1812 <ConfigElevator+0x3e>
    185a:	08 c0       	rjmp	.+16     	; 0x186c <ConfigElevator+0x98>
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 50 23 	sts	0x2350, r24	; 0x802350 <elevatorIsUp>
    1862:	0e c0       	rjmp	.+28     	; 0x1880 <ConfigElevator+0xac>
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 4f 23 	sts	0x234F, r24	; 0x80234f <elevatorIsDown>
    186a:	0a c0       	rjmp	.+20     	; 0x1880 <ConfigElevator+0xac>
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    186c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1870:	84 fd       	sbrc	r24, 4
    1872:	d2 cf       	rjmp	.-92     	; 0x1818 <ConfigElevator+0x44>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <ConfigElevator+0xcc>
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
		elevatorIsUp = false;
    1878:	10 92 50 23 	sts	0x2350, r1	; 0x802350 <elevatorIsUp>
		elevatorIsDown = false;
    187c:	10 92 4f 23 	sts	0x234F, r1	; 0x80234f <elevatorIsDown>
	}

	

	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
    1880:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ElevatorInterruptSetup>
		return 1; // Lift mag starten
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	0c c0       	rjmp	.+24     	; 0x18a0 <ConfigElevator+0xcc>
	}
	else {
		return 0; // Lift mag niet starten
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <ConfigElevator+0xcc>

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    188c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1890:	85 ff       	sbrs	r24, 5
    1892:	d3 cf       	rjmp	.-90     	; 0x183a <ConfigElevator+0x66>
    1894:	d6 cf       	rjmp	.-84     	; 0x1842 <ConfigElevator+0x6e>
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    1896:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    189a:	85 ff       	sbrs	r24, 5
    189c:	e3 cf       	rjmp	.-58     	; 0x1864 <ConfigElevator+0x90>
    189e:	e6 cf       	rjmp	.-52     	; 0x186c <ConfigElevator+0x98>
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
	}
}
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <MoveElevator>:

bool elevatorDirection;							// Richting van de lift
volatile bool elevatorIsUp, elevatorIsDown;	// Boleans om de stand van de lift bij te houden

/* blockly functie */
void MoveElevator(bool direction) {
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	28 97       	sbiw	r28, 0x08	; 8
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	18 2f       	mov	r17, r24
	elevatorDirection = direction;
    18bc:	80 93 51 23 	sts	0x2351, r24	; 0x802351 <elevatorDirection>
	if (ConfigElevator(direction) == true) {
    18c0:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <ConfigElevator>
    18c4:	88 23       	and	r24, r24
    18c6:	31 f1       	breq	.+76     	; 0x1914 <MoveElevator+0x70>
		
		uint16_t motor_id = ELEVATOR_MOTOR_ID; // Motor ID van lift
		bool Direction = !direction;

		char directiondata[] = { Direction };
    18c8:	ee 24       	eor	r14, r14
    18ca:	e3 94       	inc	r14
    18cc:	f1 2e       	mov	r15, r17
    18ce:	fe 24       	eor	r15, r14
    18d0:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    18d2:	00 eb       	ldi	r16, 0xB0	; 176
    18d4:	1a e0       	ldi	r17, 0x0A	; 10
    18d6:	28 e0       	ldi	r18, 0x08	; 8
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	be 01       	movw	r22, r28
    18dc:	68 5f       	subi	r22, 0xF8	; 248
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8a e4       	ldi	r24, 0x4A	; 74
    18e2:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { 0x03,0x66,0xFF,0xFF,Direction,MOTOR_STEP_HALF,MOTOR_ON };
    18e6:	be 01       	movw	r22, r28
    18e8:	6f 5f       	subi	r22, 0xFF	; 255
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	87 e0       	ldi	r24, 0x07	; 7
    18ee:	fb 01       	movw	r30, r22
    18f0:	11 92       	st	Z+, r1
    18f2:	8a 95       	dec	r24
    18f4:	e9 f7       	brne	.-6      	; 0x18f0 <MoveElevator+0x4c>
    18f6:	83 e0       	ldi	r24, 0x03	; 3
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	86 e6       	ldi	r24, 0x66	; 102
    18fc:	8a 83       	std	Y+2, r24	; 0x02
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	8b 83       	std	Y+3, r24	; 0x03
    1902:	8c 83       	std	Y+4, r24	; 0x04
    1904:	ee 82       	std	Y+6, r14	; 0x06
    1906:	ef 82       	std	Y+7, r14	; 0x07
    1908:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    190a:	28 e0       	ldi	r18, 0x08	; 8
    190c:	47 e0       	ldi	r20, 0x07	; 7
    190e:	86 e4       	ldi	r24, 0x46	; 70
    1910:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    1914:	28 96       	adiw	r28, 0x08	; 8
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	08 95       	ret

00001928 <_Z11gpioSetModeh9gpioModes>:


void gpioSetMode(uint8_t pin, gpioModes_t mode)
{
	//Set the PORTK Direction register using the DIRSET and DIRCLR register
	if(mode == GPIO_MODE_INPUT){
    1928:	61 11       	cpse	r22, r1
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <_Z11gpioSetModeh9gpioModes+0xa>
		//Write PORTK_DIR bit 'pin' to 0
		PORTK_DIRCLR = pin;
    192c:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <__TEXT_REGION_LENGTH__+0x700722>
    1930:	08 95       	ret
	}
	else if(mode == GPIO_MODE_OUTPUT){
    1932:	61 30       	cpi	r22, 0x01	; 1
    1934:	11 f4       	brne	.+4      	; 0x193a <_Z11gpioSetModeh9gpioModes+0x12>
		PORTK_DIRSET = pin;
    1936:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <__TEXT_REGION_LENGTH__+0x700721>
    193a:	08 95       	ret

0000193c <_Z12gpioSetLevelhb>:
}

void gpioSetLevel(uint8_t pin, bool level)
{
	//Set the output level of PORTK using the OUTSET and OUTCLR register
	if(level){
    193c:	66 23       	and	r22, r22
    193e:	19 f0       	breq	.+6      	; 0x1946 <_Z12gpioSetLevelhb+0xa>
		PORTK_OUTSET = pin;
    1940:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1944:	08 95       	ret
	}
	else{
		PORTK_OUTCLR = pin;
    1946:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    194a:	08 95       	ret

0000194c <_Z12gpioGetLevelh>:
}

bool gpioGetLevel(uint8_t pin)
{
	
	return ((PORTK_IN & pin) ? 1 : 0);
    194c:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1950:	98 23       	and	r25, r24
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	09 f4       	brne	.+2      	; 0x1958 <_Z12gpioGetLevelh+0xc>
    1956:	80 e0       	ldi	r24, 0x00	; 0
}
    1958:	08 95       	ret

0000195a <IO_ReadWrite>:

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
    195a:	28 2f       	mov	r18, r24
	switch(io_port)
    195c:	86 2f       	mov	r24, r22
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	ec 30       	cpi	r30, 0x0C	; 12
    1966:	f1 05       	cpc	r31, r1
    1968:	08 f0       	brcs	.+2      	; 0x196c <IO_ReadWrite+0x12>
    196a:	b6 c0       	rjmp	.+364    	; 0x1ad8 <IO_ReadWrite+0x17e>
    196c:	88 27       	eor	r24, r24
    196e:	e2 50       	subi	r30, 0x02	; 2
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	8f 4f       	sbci	r24, 0xFF	; 255
    1974:	0c 94 c7 30 	jmp	0x618e	; 0x618e <__tablejump2__>
	{
		case 1:
		if (value == true)
    1978:	22 23       	and	r18, r18
    197a:	21 f0       	breq	.+8      	; 0x1984 <IO_ReadWrite+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    197c:	80 e8       	ldi	r24, 0x80	; 128
    197e:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1982:	03 c0       	rjmp	.+6      	; 0x198a <IO_ReadWrite+0x30>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    198a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    198e:	88 1f       	adc	r24, r24
    1990:	88 27       	eor	r24, r24
    1992:	88 1f       	adc	r24, r24
    1994:	08 95       	ret
		break;
		
		case 2:
		if (value == true)
    1996:	22 23       	and	r18, r18
    1998:	21 f0       	breq	.+8      	; 0x19a2 <IO_ReadWrite+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    199a:	80 e4       	ldi	r24, 0x40	; 64
    199c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <IO_ReadWrite+0x4e>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
    19a2:	80 e4       	ldi	r24, 0x40	; 64
    19a4:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    19a8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19ac:	86 fb       	bst	r24, 6
    19ae:	88 27       	eor	r24, r24
    19b0:	80 f9       	bld	r24, 0
    19b2:	08 95       	ret
		break;
		
		case 3:
		if (value == true)
    19b4:	22 23       	and	r18, r18
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <IO_ReadWrite+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    19b8:	80 e2       	ldi	r24, 0x20	; 32
    19ba:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19be:	03 c0       	rjmp	.+6      	; 0x19c6 <IO_ReadWrite+0x6c>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    19c6:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19ca:	85 fb       	bst	r24, 5
    19cc:	88 27       	eor	r24, r24
    19ce:	80 f9       	bld	r24, 0
    19d0:	08 95       	ret
		break;
		
		case 4: //Lift limit switches
		if (value == true)
    19d2:	22 23       	and	r18, r18
    19d4:	21 f0       	breq	.+8      	; 0x19de <IO_ReadWrite+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    19d6:	80 e1       	ldi	r24, 0x10	; 16
    19d8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <IO_ReadWrite+0x8a>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
    19de:	80 e1       	ldi	r24, 0x10	; 16
    19e0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    19e4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    19e8:	82 95       	swap	r24
    19ea:	81 70       	andi	r24, 0x01	; 1
    19ec:	08 95       	ret
		break;
		
		case 5:
		if (value == true)
    19ee:	22 23       	and	r18, r18
    19f0:	21 f0       	breq	.+8      	; 0x19fa <IO_ReadWrite+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    19f2:	88 e0       	ldi	r24, 0x08	; 8
    19f4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <IO_ReadWrite+0xa6>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
    19fa:	88 e0       	ldi	r24, 0x08	; 8
    19fc:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    1a00:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a04:	83 fb       	bst	r24, 3
    1a06:	88 27       	eor	r24, r24
    1a08:	80 f9       	bld	r24, 0
    1a0a:	08 95       	ret
		break;
		
		case 6:
		if (value == true)
    1a0c:	22 23       	and	r18, r18
    1a0e:	21 f0       	breq	.+8      	; 0x1a18 <IO_ReadWrite+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <IO_ReadWrite+0xc4>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    1a1e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a22:	82 fb       	bst	r24, 2
    1a24:	88 27       	eor	r24, r24
    1a26:	80 f9       	bld	r24, 0
    1a28:	08 95       	ret
		break;
		
		case 7:
		if (value == true)
    1a2a:	22 23       	and	r18, r18
    1a2c:	21 f0       	breq	.+8      	; 0x1a36 <IO_ReadWrite+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a34:	03 c0       	rjmp	.+6      	; 0x1a3c <IO_ReadWrite+0xe2>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    1a3c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a40:	86 95       	lsr	r24
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	08 95       	ret
		break;
		
		case 8:
		if (value == true)
    1a46:	22 23       	and	r18, r18
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <IO_ReadWrite+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <IO_ReadWrite+0xfe>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    1a58:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	08 95       	ret
		break;
		
		case 9:
		if (value == true)
    1a60:	22 23       	and	r18, r18
    1a62:	21 f0       	breq	.+8      	; 0x1a6c <IO_ReadWrite+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    1a64:	80 e8       	ldi	r24, 0x80	; 128
    1a66:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <IO_ReadWrite+0x118>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
    1a6c:	80 e8       	ldi	r24, 0x80	; 128
    1a6e:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    1a72:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    1a76:	88 1f       	adc	r24, r24
    1a78:	88 27       	eor	r24, r24
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	08 95       	ret
		break;
		
		case 10:
		if (value == true)
    1a7e:	22 23       	and	r18, r18
    1a80:	21 f0       	breq	.+8      	; 0x1a8a <IO_ReadWrite+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    1a82:	80 e4       	ldi	r24, 0x40	; 64
    1a84:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <IO_ReadWrite+0x136>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
    1a8a:	80 e4       	ldi	r24, 0x40	; 64
    1a8c:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    1a90:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    1a94:	86 fb       	bst	r24, 6
    1a96:	88 27       	eor	r24, r24
    1a98:	80 f9       	bld	r24, 0
    1a9a:	08 95       	ret
		break;
		
		case 11:
		if (value == true)
    1a9c:	22 23       	and	r18, r18
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <IO_ReadWrite+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    1aa0:	80 e8       	ldi	r24, 0x80	; 128
    1aa2:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <IO_ReadWrite+0x154>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    1aae:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	88 27       	eor	r24, r24
    1ab6:	88 1f       	adc	r24, r24
    1ab8:	08 95       	ret
		break;
		
		case 12:
		if (value == true)
    1aba:	22 23       	and	r18, r18
    1abc:	21 f0       	breq	.+8      	; 0x1ac6 <IO_ReadWrite+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    1abe:	80 e4       	ldi	r24, 0x40	; 64
    1ac0:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <IO_ReadWrite+0x172>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
    1ac6:	80 e4       	ldi	r24, 0x40	; 64
    1ac8:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    1acc:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    1ad0:	86 fb       	bst	r24, 6
    1ad2:	88 27       	eor	r24, r24
    1ad4:	80 f9       	bld	r24, 0
    1ad6:	08 95       	ret
		break;
		
	}
	return 0;
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
}
    1ada:	08 95       	ret

00001adc <SelectColour>:

char colour[] = {'#','0','0','0','0','0','0'};


/* blockly functie - functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft */
uint16_t SelectColour(uint16_t i) { return i; }
    1adc:	08 95       	ret

00001ade <CompareColours>:


/* blockly functie */
#ifdef COLOUR_AS_INDEX
bool CompareColours(uint16_t c1, uint16_t c2) {
	return (c1 == c2);
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	86 17       	cp	r24, r22
    1ae2:	97 07       	cpc	r25, r23
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <CompareColours+0xa>
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
#else
bool CompareColours(char *c1, char *c2) {
	return CompareStrings(c1,c2,7); //"#rrggbb"
#endif
}
    1ae8:	82 2f       	mov	r24, r18
    1aea:	08 95       	ret

00001aec <ReadOneColour>:
	#endif
}


/* stel de kleursensor in en lees 1x een kleur */
uint16_t ReadOneColour(uint8_t colour) {
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
//	PORTJ_DIR &= ~(PIN6_bm);	//set pin as input
	PORTH_DIR |= PIN6_bm | PIN7_bm;	//set pins as output	
    1af0:	e0 ee       	ldi	r30, 0xE0	; 224
    1af2:	f6 e0       	ldi	r31, 0x06	; 6
    1af4:	90 81       	ld	r25, Z
    1af6:	90 6c       	ori	r25, 0xC0	; 192
    1af8:	90 83       	st	Z, r25
	switch (colour) {
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	59 f0       	breq	.+22     	; 0x1b14 <ReadOneColour+0x28>
    1afe:	18 f0       	brcs	.+6      	; 0x1b06 <ReadOneColour+0x1a>
    1b00:	82 30       	cpi	r24, 0x02	; 2
    1b02:	79 f0       	breq	.+30     	; 0x1b22 <ReadOneColour+0x36>
    1b04:	14 c0       	rjmp	.+40     	; 0x1b2e <ReadOneColour+0x42>
		case 0: //red
		PORTH_OUTCLR = (1<<PIN7_bp); //S2, pin 11, schrijf LOW
    1b06:	e6 ee       	ldi	r30, 0xE6	; 230
    1b08:	f6 e0       	ldi	r31, 0x06	; 6
    1b0a:	80 e8       	ldi	r24, 0x80	; 128
    1b0c:	80 83       	st	Z, r24
		PORTH_OUTCLR = (1<<PIN6_bp); //S3, pin 12, schrijf LOW
    1b0e:	80 e4       	ldi	r24, 0x40	; 64
    1b10:	80 83       	st	Z, r24
		break;
    1b12:	0d c0       	rjmp	.+26     	; 0x1b2e <ReadOneColour+0x42>
		
		case 1: //green
		PORTH_OUTSET = (1<<PIN7_bp); //S2, pin 11, schrijf HIGH
    1b14:	e5 ee       	ldi	r30, 0xE5	; 229
    1b16:	f6 e0       	ldi	r31, 0x06	; 6
    1b18:	80 e8       	ldi	r24, 0x80	; 128
    1b1a:	80 83       	st	Z, r24
		PORTH_OUTSET = (1<<PIN6_bp); //S3, pin 12, schrijf HIGH
    1b1c:	80 e4       	ldi	r24, 0x40	; 64
    1b1e:	80 83       	st	Z, r24
		break;
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <ReadOneColour+0x42>
		
		case 2: //blue
		PORTH_OUTCLR = (1<<PIN7_bp); //S2, pin 11, schrijf LOW
    1b22:	80 e8       	ldi	r24, 0x80	; 128
    1b24:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		PORTH_OUTSET = (1<<PIN6_bp); //S3, pin 12, schrijf HIGH
    1b28:	80 e4       	ldi	r24, 0x40	; 64
    1b2a:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
		break;
	}
	
	return (uint16_t) pulseIn(&PORTJ, PIN6_bm, 0, 10000); //pin 10
    1b2e:	00 e1       	ldi	r16, 0x10	; 16
    1b30:	17 e2       	ldi	r17, 0x27	; 39
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	60 e4       	ldi	r22, 0x40	; 64
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	97 e0       	ldi	r25, 0x07	; 7
    1b3e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <pulseIn>
}
    1b42:	cb 01       	movw	r24, r22
    1b44:	1f 91       	pop	r17
    1b46:	0f 91       	pop	r16
    1b48:	08 95       	ret

00001b4a <ValToColour>:
	return (uint8_t) hex2int(i);
}


/* van integers naar \#rrggbb string */
char* ValToColour(uint8_t r, uint8_t g, uint8_t b) {
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	f8 2e       	mov	r15, r24
    1b56:	06 2f       	mov	r16, r22
    1b58:	14 2f       	mov	r17, r20
	colour[1] = HexToASCII(r>>4);
    1b5a:	82 95       	swap	r24
    1b5c:	8f 70       	andi	r24, 0x0F	; 15
    1b5e:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b62:	c3 e0       	ldi	r28, 0x03	; 3
    1b64:	d0 e2       	ldi	r29, 0x20	; 32
    1b66:	89 83       	std	Y+1, r24	; 0x01
	colour[2] = HexToASCII(r);
    1b68:	8f 2d       	mov	r24, r15
    1b6a:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b6e:	8a 83       	std	Y+2, r24	; 0x02
	colour[3] = HexToASCII(g>>4);
    1b70:	80 2f       	mov	r24, r16
    1b72:	82 95       	swap	r24
    1b74:	8f 70       	andi	r24, 0x0F	; 15
    1b76:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b7a:	8b 83       	std	Y+3, r24	; 0x03
	colour[4] = HexToASCII(g);
    1b7c:	80 2f       	mov	r24, r16
    1b7e:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b82:	8c 83       	std	Y+4, r24	; 0x04
	colour[5] = HexToASCII(b>>4);
    1b84:	81 2f       	mov	r24, r17
    1b86:	82 95       	swap	r24
    1b88:	8f 70       	andi	r24, 0x0F	; 15
    1b8a:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
	colour[6] = HexToASCII(b);
    1b90:	81 2f       	mov	r24, r17
    1b92:	0e 94 38 08 	call	0x1070	; 0x1070 <_Z10HexToASCIIh>
    1b96:	8e 83       	std	Y+6, r24	; 0x06
    1b98:	8f e2       	ldi	r24, 0x2F	; 47
    1b9a:	95 e7       	ldi	r25, 0x75	; 117
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <ValToColour+0x52>
    1ba0:	00 c0       	rjmp	.+0      	; 0x1ba2 <ValToColour+0x58>
    1ba2:	00 00       	nop
	_delay_ms(5); //zodat i[6] goed wordt opgeslagen
	char *i_ptr = colour;
	return i_ptr; //var mag na het vergelijken meteen overschreven worden
}
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	ff 90       	pop	r15
    1bb0:	08 95       	ret

00001bb2 <RoundColourVal>:


/* convert RGB value 0...255 to 0, 128 or 255 (colours from blockly) */
uint8_t RoundColourVal(uint8_t val) {
	switch (val) {
    1bb2:	80 38       	cpi	r24, 0x80	; 128
    1bb4:	10 f0       	brcs	.+4      	; 0x1bba <RoundColourVal+0x8>
		case 0 ... 84:		return 0;
		case 85 ... 169:	return 128;
		case 170 ... 255:	return 255;
		#else
		case 0 ... 127:		return 0;
		case 128 ... 255:	return 255;
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
    1bb8:	08 95       	ret
		#if defined ALLOW_COLOURV_128 && !defined COLOUR_AS_INDEX
		case 0 ... 84:		return 0;
		case 85 ... 169:	return 128;
		case 170 ... 255:	return 255;
		#else
		case 0 ... 127:		return 0;
    1bba:	80 e0       	ldi	r24, 0x00	; 0
			return 255;
		} else {
			return 0;
		}
	}
}
    1bbc:	08 95       	ret

00001bbe <FrequencyToColourVal>:


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f1       	breq	.+90     	; 0x1c1c <FrequencyToColourVal+0x5e>
	long val = 0;
	switch (colour) {
    1bc2:	63 30       	cpi	r22, 0x03	; 3
    1bc4:	98 f4       	brcc	.+38     	; 0x1bec <FrequencyToColourVal+0x2e>

/*
 * https://www.arduino.cc/reference/en/language/functions/math/map/ 
 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1bc6:	a0 e0       	ldi	r26, 0x00	; 0
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	9c 01       	movw	r18, r24
    1bcc:	ad 01       	movw	r20, r26
    1bce:	2c 57       	subi	r18, 0x7C	; 124
    1bd0:	31 09       	sbc	r19, r1
    1bd2:	41 09       	sbc	r20, r1
    1bd4:	51 09       	sbc	r21, r1
    1bd6:	af ef       	ldi	r26, 0xFF	; 255
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	0e 94 ee 30 	call	0x61dc	; 0x61dc <__muluhisi3>
    1bde:	22 e9       	ldi	r18, 0x92	; 146
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f ef       	ldi	r20, 0xFF	; 255
    1be4:	5f ef       	ldi	r21, 0xFF	; 255
    1be6:	0e 94 a8 30 	call	0x6150	; 0x6150 <__divmodsi4>
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <FrequencyToColourVal+0x36>


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
	long val = 0;
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	82 2f       	mov	r24, r18
    1bf6:	93 2f       	mov	r25, r19
    1bf8:	a4 2f       	mov	r26, r20
    1bfa:	b5 2f       	mov	r27, r21
    1bfc:	bb 23       	and	r27, r27
    1bfe:	1c f4       	brge	.+6      	; 0x1c06 <FrequencyToColourVal+0x48>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	dc 01       	movw	r26, r24
		case 2: //blue
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
	}
	if (val<0) { val = 0; }
	if (val>255) { val = 255; }
	return (uint8_t) val;
    1c06:	8f 3f       	cpi	r24, 0xFF	; 255
    1c08:	91 05       	cpc	r25, r1
    1c0a:	a1 05       	cpc	r26, r1
    1c0c:	b1 05       	cpc	r27, r1
    1c0e:	39 f0       	breq	.+14     	; 0x1c1e <FrequencyToColourVal+0x60>
    1c10:	34 f0       	brlt	.+12     	; 0x1c1e <FrequencyToColourVal+0x60>
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	08 95       	ret
}


/* map the frequency from sensor to RGB value 0...255 */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t colour) {
	if (0 == freq) { return 0; } //slechte frequentie read niet als 255 returnen
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
		val = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 0, 255);
	}
	if (val<0) { val = 0; }
	if (val>255) { val = 255; }
	return (uint8_t) val;
}
    1c1e:	08 95       	ret

00001c20 <ArrAvg>:


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	06 2f       	mov	r16, r22
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1c26:	66 23       	and	r22, r22
    1c28:	81 f0       	breq	.+32     	; 0x1c4a <ArrAvg+0x2a>
    1c2a:	e8 2f       	mov	r30, r24
    1c2c:	f9 2f       	mov	r31, r25
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	ba 01       	movw	r22, r20
		sum += a[i];
    1c36:	a1 91       	ld	r26, Z+
    1c38:	b1 91       	ld	r27, Z+
    1c3a:	4a 0f       	add	r20, r26
    1c3c:	5b 1f       	adc	r21, r27
    1c3e:	61 1d       	adc	r22, r1
    1c40:	71 1d       	adc	r23, r1


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1c42:	8f 5f       	subi	r24, 0xFF	; 255
    1c44:	08 13       	cpse	r16, r24
    1c46:	f7 cf       	rjmp	.-18     	; 0x1c36 <ArrAvg+0x16>
    1c48:	03 c0       	rjmp	.+6      	; 0x1c50 <ArrAvg+0x30>
}


/* calculate average value in array */
uint16_t ArrAvg(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	ba 01       	movw	r22, r20
	for (uint8_t i=0; i<size; i++) {
		sum += a[i];
	}
	sum /= size;
	return sum;
    1c50:	10 e0       	ldi	r17, 0x00	; 0
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	cb 01       	movw	r24, r22
    1c58:	ba 01       	movw	r22, r20
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	98 01       	movw	r18, r16
    1c5e:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>
}
    1c62:	c9 01       	movw	r24, r18
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	08 95       	ret

00001c6a <CompareStrings>:


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
    1c6a:	44 23       	and	r20, r20
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <CompareStrings+0x16>
		if (c1+i != c2+i) {
    1c6e:	86 17       	cp	r24, r22
    1c70:	97 07       	cpc	r25, r23
    1c72:	41 f4       	brne	.+16     	; 0x1c84 <CompareStrings+0x1a>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
	return sum;
}


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	48 13       	cpse	r20, r24
    1c7a:	fd cf       	rjmp	.-6      	; 0x1c76 <CompareStrings+0xc>
		if (c1+i != c2+i) {
			return 0;
		}
	}
	return 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	08 95       	ret
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	08 95       	ret


bool CompareStrings(char *c1, char *c2, uint8_t length) {
	for (uint8_t i=0; i<length; i++) {
		if (c1+i != c2+i) {
			return 0;
    1c84:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
    1c86:	08 95       	ret

00001c88 <hex2int>:
/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    while (*hex) {
    1c88:	fc 01       	movw	r30, r24
    1c8a:	30 81       	ld	r19, Z
    1c8c:	33 23       	and	r19, r19
    1c8e:	89 f1       	breq	.+98     	; 0x1cf2 <hex2int+0x6a>
    1c90:	31 96       	adiw	r30, 0x01	; 1
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	cb 01       	movw	r24, r22
        // get current character then increment
        uint8_t byte = *hex++; 
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
    1c98:	20 ed       	ldi	r18, 0xD0	; 208
    1c9a:	23 0f       	add	r18, r19
    1c9c:	2a 30       	cpi	r18, 0x0A	; 10
    1c9e:	78 f0       	brcs	.+30     	; 0x1cbe <hex2int+0x36>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
    1ca0:	2f e9       	ldi	r18, 0x9F	; 159
    1ca2:	23 0f       	add	r18, r19
    1ca4:	26 30       	cpi	r18, 0x06	; 6
    1ca6:	18 f4       	brcc	.+6      	; 0x1cae <hex2int+0x26>
    1ca8:	29 ea       	ldi	r18, 0xA9	; 169
    1caa:	23 0f       	add	r18, r19
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <hex2int+0x36>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;    
    1cae:	2f eb       	ldi	r18, 0xBF	; 191
    1cb0:	23 0f       	add	r18, r19
    1cb2:	26 30       	cpi	r18, 0x06	; 6
    1cb4:	18 f4       	brcc	.+6      	; 0x1cbc <hex2int+0x34>
    1cb6:	29 ec       	ldi	r18, 0xC9	; 201
    1cb8:	23 0f       	add	r18, r19
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <hex2int+0x36>
    1cbc:	23 2f       	mov	r18, r19
        // shift 4 to make space for new digit, and add the 4 bits of the new digit 
        val = (val << 4) | (byte & 0xF);
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	aa 1f       	adc	r26, r26
    1cd0:	bb 1f       	adc	r27, r27
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	aa 1f       	adc	r26, r26
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	aa 1f       	adc	r26, r26
    1ce0:	bb 1f       	adc	r27, r27
    1ce2:	2f 70       	andi	r18, 0x0F	; 15
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	62 2b       	or	r22, r18
/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    while (*hex) {
    1cea:	31 91       	ld	r19, Z+
    1cec:	31 11       	cpse	r19, r1
    1cee:	d4 cf       	rjmp	.-88     	; 0x1c98 <hex2int+0x10>
    1cf0:	08 95       	ret

/*
 * https://stackoverflow.com/questions/10156409/convert-hex-string-char-to-int 
 */
uint32_t hex2int(char *hex) {
    uint32_t val = 0;
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
    1cf6:	cb 01       	movw	r24, r22
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;    
        // shift 4 to make space for new digit, and add the 4 bits of the new digit 
        val = (val << 4) | (byte & 0xF);
    }
    return val;
}
    1cf8:	08 95       	ret

00001cfa <ColourToRed>:
	return val;
}


/* van \#rrggbb string naar int */
uint8_t ColourToRed(char *colour) {
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <ColourToRed+0x6>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d04:	1b 82       	std	Y+3, r1	; 0x03
	memcpy(i, colour + 1, 2);
    1d06:	fc 01       	movw	r30, r24
    1d08:	81 81       	ldd	r24, Z+1	; 0x01
    1d0a:	92 81       	ldd	r25, Z+2	; 0x02
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <hex2int>
    1d18:	86 2f       	mov	r24, r22
}
    1d1a:	23 96       	adiw	r28, 0x03	; 3
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	de bf       	out	0x3e, r29	; 62
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <ColourToGreen>:


/* van \#rrggbb string naar int */
uint8_t ColourToGreen(char *colour) {
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <ColourToGreen+0x6>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d30:	1b 82       	std	Y+3, r1	; 0x03
	memcpy(i, colour + 3, 2);
    1d32:	fc 01       	movw	r30, r24
    1d34:	83 81       	ldd	r24, Z+3	; 0x03
    1d36:	94 81       	ldd	r25, Z+4	; 0x04
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <hex2int>
    1d44:	86 2f       	mov	r24, r22
}
    1d46:	23 96       	adiw	r28, 0x03	; 3
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	08 95       	ret

00001d52 <ColourToBlue>:


/* van \#rrggbb string naar int */
uint8_t ColourToBlue(char *colour) {
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <ColourToBlue+0x6>
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
	char i[] = "00";
    1d5c:	1b 82       	std	Y+3, r1	; 0x03
	memcpy(i, colour + 5, 2);
    1d5e:	fc 01       	movw	r30, r24
    1d60:	85 81       	ldd	r24, Z+5	; 0x05
    1d62:	96 81       	ldd	r25, Z+6	; 0x06
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	9a 83       	std	Y+2, r25	; 0x02
	return (uint8_t) hex2int(i);
    1d68:	ce 01       	movw	r24, r28
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <hex2int>
    1d70:	86 2f       	mov	r24, r22
}
    1d72:	23 96       	adiw	r28, 0x03	; 3
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <ColourToIndex>:

/*
 * functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft, 
 * uiteindelijk moet ReadColourSensor() een char* teruggeven die met CompareStrings wordt vergeleken. 
 */
uint8_t ColourToIndex(char *colour) {
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	8c 01       	movw	r16, r24
	//'#000000' = 0, '#0000ff' = 1, '#00ff00' = 2, '#00ffff' = 3, etc. 
	uint8_t val = 0;
	
	if (ColourToRed(colour) > 0) {
    1d86:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ColourToRed>
    1d8a:	88 23       	and	r24, r24
    1d8c:	11 f0       	breq	.+4      	; 0x1d92 <ColourToIndex+0x14>
		val |= (1<<2);
    1d8e:	c4 e0       	ldi	r28, 0x04	; 4
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <ColourToIndex+0x16>
 * functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft, 
 * uiteindelijk moet ReadColourSensor() een char* teruggeven die met CompareStrings wordt vergeleken. 
 */
uint8_t ColourToIndex(char *colour) {
	//'#000000' = 0, '#0000ff' = 1, '#00ff00' = 2, '#00ffff' = 3, etc. 
	uint8_t val = 0;
    1d92:	c0 e0       	ldi	r28, 0x00	; 0
	
	if (ColourToRed(colour) > 0) {
		val |= (1<<2);
	}
	if (ColourToGreen(colour) > 0) {
    1d94:	c8 01       	movw	r24, r16
    1d96:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <ColourToGreen>
    1d9a:	81 11       	cpse	r24, r1
		val |= (1<<1);
    1d9c:	c2 60       	ori	r28, 0x02	; 2
	}
	if (ColourToBlue(colour) > 0) {
    1d9e:	c8 01       	movw	r24, r16
    1da0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <ColourToBlue>
    1da4:	81 11       	cpse	r24, r1
		val |= (1<<0);
    1da6:	c1 60       	ori	r28, 0x01	; 1
	}
	return val;
}
    1da8:	8c 2f       	mov	r24, r28
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	08 95       	ret

00001db2 <ReadColourSensor>:


/* blockly functie - ga R G & B een aantal keer langs en lees kleur */
#define READVALTIMES 5
#ifdef COLOUR_AS_INDEX
uint16_t ReadColourSensor() {
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	cf 92       	push	r12
    1db8:	df 92       	push	r13
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	2d 97       	sbiw	r28, 0x0d	; 13
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	5e 01       	movw	r10, r28
    1dd0:	8b e0       	ldi	r24, 0x0B	; 11
    1dd2:	a8 0e       	add	r10, r24
    1dd4:	b1 1c       	adc	r11, r1
#endif
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
    1dd6:	f1 2c       	mov	r15, r1
    1dd8:	65 01       	movw	r12, r10
    1dda:	8e 01       	movw	r16, r28
    1ddc:	0f 5f       	subi	r16, 0xFF	; 255
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
		for (uint8_t i=0; i<READVALTIMES; i++) {
			buf[i] = ReadOneColour(j);
    1de0:	8f 2d       	mov	r24, r15
    1de2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <ReadOneColour>
    1de6:	f8 01       	movw	r30, r16
    1de8:	81 93       	st	Z+, r24
    1dea:	91 93       	st	Z+, r25
    1dec:	8f 01       	movw	r16, r30
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
		for (uint8_t i=0; i<READVALTIMES; i++) {
    1dee:	ec 15       	cp	r30, r12
    1df0:	fd 05       	cpc	r31, r13
    1df2:	b1 f7       	brne	.-20     	; 0x1de0 <ReadColourSensor+0x2e>
			buf[i] = ReadOneColour(j);
		}
		//frequency mappen naar RGB value defined in blockly
		colourVal[j] = RoundColourVal(FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j));
    1df4:	65 e0       	ldi	r22, 0x05	; 5
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <ArrAvg>
    1dfe:	6f 2d       	mov	r22, r15
    1e00:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <FrequencyToColourVal>
    1e04:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <RoundColourVal>
    1e08:	f5 01       	movw	r30, r10
    1e0a:	81 93       	st	Z+, r24
    1e0c:	5f 01       	movw	r10, r30
#endif
	uint16_t buf[READVALTIMES];
	uint8_t colourVal[3];
	
	//elke kleur READVALTIMES keer lezen en gemiddelde opslaan
	for (uint8_t j=0; j<3; j++) {
    1e0e:	f3 94       	inc	r15
    1e10:	f3 e0       	ldi	r31, 0x03	; 3
    1e12:	ff 12       	cpse	r15, r31
    1e14:	e2 cf       	rjmp	.-60     	; 0x1dda <ReadColourSensor+0x28>
		colourVal[j] = RoundColourVal(FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j));
//		colourVal[j] = FrequencyToColourVal(ArrAvg(buf, READVALTIMES), j);
	}
	
	#ifdef COLOUR_AS_INDEX
	return (uint16_t) ColourToIndex(ValToColour(colourVal[0], colourVal[1], colourVal[2]));
    1e16:	4d 85       	ldd	r20, Y+13	; 0x0d
    1e18:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e1c:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <ValToColour>
    1e20:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <ColourToIndex>
	#else
	return ValToColour(colourVal[0], colourVal[1], colourVal[2]);
	#endif
}
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	2d 96       	adiw	r28, 0x0d	; 13
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	df 91       	pop	r29
    1e2e:	cf 91       	pop	r28
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ff 90       	pop	r15
    1e36:	df 90       	pop	r13
    1e38:	cf 90       	pop	r12
    1e3a:	bf 90       	pop	r11
    1e3c:	af 90       	pop	r10
    1e3e:	08 95       	ret

00001e40 <map>:


/*
 * https://www.arduino.cc/reference/en/language/functions/math/map/ 
 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
    1e40:	4f 92       	push	r4
    1e42:	5f 92       	push	r5
    1e44:	6f 92       	push	r6
    1e46:	7f 92       	push	r7
    1e48:	af 92       	push	r10
    1e4a:	bf 92       	push	r11
    1e4c:	cf 92       	push	r12
    1e4e:	df 92       	push	r13
    1e50:	ef 92       	push	r14
    1e52:	ff 92       	push	r15
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	29 01       	movw	r4, r18
    1e62:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
    1e68:	24 19       	sub	r18, r4
    1e6a:	35 09       	sbc	r19, r5
    1e6c:	46 09       	sbc	r20, r6
    1e6e:	57 09       	sbc	r21, r7
    1e70:	8a 89       	ldd	r24, Y+18	; 0x12
    1e72:	9b 89       	ldd	r25, Y+19	; 0x13
    1e74:	ac 89       	ldd	r26, Y+20	; 0x14
    1e76:	bd 89       	ldd	r27, Y+21	; 0x15
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	6a 19       	sub	r22, r10
    1e7e:	7b 09       	sbc	r23, r11
    1e80:	8c 09       	sbc	r24, r12
    1e82:	9d 09       	sbc	r25, r13
    1e84:	0e 94 4e 30 	call	0x609c	; 0x609c <__mulsi3>
    1e88:	a8 01       	movw	r20, r16
    1e8a:	97 01       	movw	r18, r14
    1e8c:	24 19       	sub	r18, r4
    1e8e:	35 09       	sbc	r19, r5
    1e90:	46 09       	sbc	r20, r6
    1e92:	57 09       	sbc	r21, r7
    1e94:	0e 94 a8 30 	call	0x6150	; 0x6150 <__divmodsi4>
    1e98:	ca 01       	movw	r24, r20
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	6a 0d       	add	r22, r10
    1e9e:	7b 1d       	adc	r23, r11
    1ea0:	8c 1d       	adc	r24, r12
    1ea2:	9d 1d       	adc	r25, r13
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	bf 90       	pop	r11
    1eb6:	af 90       	pop	r10
    1eb8:	7f 90       	pop	r7
    1eba:	6f 90       	pop	r6
    1ebc:	5f 90       	pop	r5
    1ebe:	4f 90       	pop	r4
    1ec0:	08 95       	ret

00001ec2 <pulseIn>:

#include "pulseIn.h"


unsigned long pulseIn(PORT_struct *port, uint8_t pin_bm, uint8_t state, unsigned long timeout)
{
    1ec2:	8f 92       	push	r8
    1ec4:	9f 92       	push	r9
    1ec6:	af 92       	push	r10
    1ec8:	bf 92       	push	r11
    1eca:	cf 92       	push	r12
    1ecc:	df 92       	push	r13
    1ece:	ef 92       	push	r14
    1ed0:	ff 92       	push	r15
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	86 2f       	mov	r24, r22
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
    1eda:	44 23       	and	r20, r20
    1edc:	11 f0       	breq	.+4      	; 0x1ee2 <pulseIn+0x20>
    1ede:	a6 2f       	mov	r26, r22
    1ee0:	01 c0       	rjmp	.+2      	; 0x1ee4 <pulseIn+0x22>
    1ee2:	a0 e0       	ldi	r26, 0x00	; 0
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    1ee4:	b9 01       	movw	r22, r18
    1ee6:	a8 01       	movw	r20, r16
    1ee8:	44 0f       	add	r20, r20
    1eea:	55 1f       	adc	r21, r21
    1eec:	66 1f       	adc	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	04 0f       	add	r16, r20
    1ef2:	15 1f       	adc	r17, r21
    1ef4:	26 1f       	adc	r18, r22
    1ef6:	37 1f       	adc	r19, r23
    1ef8:	36 95       	lsr	r19
    1efa:	27 95       	ror	r18
    1efc:	17 95       	ror	r17
    1efe:	07 95       	ror	r16
    1f00:	3f 70       	andi	r19, 0x0F	; 15
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	ba 01       	movw	r22, r20
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
    1f08:	90 85       	ldd	r25, Z+8	; 0x08
    1f0a:	98 23       	and	r25, r24
    1f0c:	a9 13       	cpse	r26, r25
    1f0e:	10 c0       	rjmp	.+32     	; 0x1f30 <pulseIn+0x6e>
		if (numloops++ == maxloops) { return 0; }
    1f10:	6a 01       	movw	r12, r20
    1f12:	7b 01       	movw	r14, r22
    1f14:	9f ef       	ldi	r25, 0xFF	; 255
    1f16:	c9 1a       	sub	r12, r25
    1f18:	d9 0a       	sbc	r13, r25
    1f1a:	e9 0a       	sbc	r14, r25
    1f1c:	f9 0a       	sbc	r15, r25
    1f1e:	04 17       	cp	r16, r20
    1f20:	15 07       	cpc	r17, r21
    1f22:	26 07       	cpc	r18, r22
    1f24:	37 07       	cpc	r19, r23
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <pulseIn+0x68>
    1f28:	69 c0       	rjmp	.+210    	; 0x1ffc <pulseIn+0x13a>
    1f2a:	b7 01       	movw	r22, r14
    1f2c:	a6 01       	movw	r20, r12
    1f2e:	ec cf       	rjmp	.-40     	; 0x1f08 <pulseIn+0x46>
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
    1f30:	90 85       	ldd	r25, Z+8	; 0x08
    1f32:	98 23       	and	r25, r24
    1f34:	a9 13       	cpse	r26, r25
    1f36:	08 c0       	rjmp	.+16     	; 0x1f48 <pulseIn+0x86>
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
    1f38:	90 85       	ldd	r25, Z+8	; 0x08
    1f3a:	98 23       	and	r25, r24
    1f3c:	a9 17       	cp	r26, r25
    1f3e:	a1 f0       	breq	.+40     	; 0x1f68 <pulseIn+0xa6>
    1f40:	c1 2c       	mov	r12, r1
    1f42:	d1 2c       	mov	r13, r1
    1f44:	76 01       	movw	r14, r12
    1f46:	2f c0       	rjmp	.+94     	; 0x1fa6 <pulseIn+0xe4>
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1f48:	6a 01       	movw	r12, r20
    1f4a:	7b 01       	movw	r14, r22
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	c9 1a       	sub	r12, r25
    1f50:	d9 0a       	sbc	r13, r25
    1f52:	e9 0a       	sbc	r14, r25
    1f54:	f9 0a       	sbc	r15, r25
    1f56:	04 17       	cp	r16, r20
    1f58:	15 07       	cpc	r17, r21
    1f5a:	26 07       	cpc	r18, r22
    1f5c:	37 07       	cpc	r19, r23
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <pulseIn+0xa0>
    1f60:	51 c0       	rjmp	.+162    	; 0x2004 <pulseIn+0x142>
    1f62:	b7 01       	movw	r22, r14
    1f64:	a6 01       	movw	r20, r12
    1f66:	e4 cf       	rjmp	.-56     	; 0x1f30 <pulseIn+0x6e>
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1f68:	40 17       	cp	r20, r16
    1f6a:	51 07       	cpc	r21, r17
    1f6c:	62 07       	cpc	r22, r18
    1f6e:	73 07       	cpc	r23, r19
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <pulseIn+0xb2>
    1f72:	4c c0       	rjmp	.+152    	; 0x200c <pulseIn+0x14a>
    1f74:	c1 2c       	mov	r12, r1
    1f76:	d1 2c       	mov	r13, r1
    1f78:	76 01       	movw	r14, r12
    1f7a:	0c c0       	rjmp	.+24     	; 0x1f94 <pulseIn+0xd2>
    1f7c:	4a 01       	movw	r8, r20
    1f7e:	5b 01       	movw	r10, r22
    1f80:	8c 0c       	add	r8, r12
    1f82:	9d 1c       	adc	r9, r13
    1f84:	ae 1c       	adc	r10, r14
    1f86:	bf 1c       	adc	r11, r15
    1f88:	08 15       	cp	r16, r8
    1f8a:	19 05       	cpc	r17, r9
    1f8c:	2a 05       	cpc	r18, r10
    1f8e:	3b 05       	cpc	r19, r11
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <pulseIn+0xd2>
    1f92:	40 c0       	rjmp	.+128    	; 0x2014 <pulseIn+0x152>
		width++;
    1f94:	9f ef       	ldi	r25, 0xFF	; 255
    1f96:	c9 1a       	sub	r12, r25
    1f98:	d9 0a       	sbc	r13, r25
    1f9a:	e9 0a       	sbc	r14, r25
    1f9c:	f9 0a       	sbc	r15, r25
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
    1f9e:	90 85       	ldd	r25, Z+8	; 0x08
    1fa0:	98 23       	and	r25, r24
    1fa2:	a9 17       	cp	r26, r25
    1fa4:	59 f3       	breq	.-42     	; 0x1f7c <pulseIn+0xba>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
    1fa6:	b7 01       	movw	r22, r14
    1fa8:	a6 01       	movw	r20, r12
    1faa:	44 0f       	add	r20, r20
    1fac:	55 1f       	adc	r21, r21
    1fae:	66 1f       	adc	r22, r22
    1fb0:	77 1f       	adc	r23, r23
    1fb2:	44 0f       	add	r20, r20
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	66 1f       	adc	r22, r22
    1fb8:	77 1f       	adc	r23, r23
    1fba:	db 01       	movw	r26, r22
    1fbc:	ca 01       	movw	r24, r20
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	aa 1f       	adc	r26, r26
    1fc4:	bb 1f       	adc	r27, r27
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	aa 1f       	adc	r26, r26
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	84 0f       	add	r24, r20
    1fd0:	95 1f       	adc	r25, r21
    1fd2:	a6 1f       	adc	r26, r22
    1fd4:	b7 1f       	adc	r27, r23
    1fd6:	8c 0d       	add	r24, r12
    1fd8:	9d 1d       	adc	r25, r13
    1fda:	ae 1d       	adc	r26, r14
    1fdc:	bf 1d       	adc	r27, r15
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	60 5f       	subi	r22, 0xF0	; 240
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	28 e1       	ldi	r18, 0x18	; 24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>
    1ff6:	ca 01       	movw	r24, r20
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	0f c0       	rjmp	.+30     	; 0x201a <pulseIn+0x158>
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1ffc:	60 e0       	ldi	r22, 0x00	; 0
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	cb 01       	movw	r24, r22
    2002:	0b c0       	rjmp	.+22     	; 0x201a <pulseIn+0x158>
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	cb 01       	movw	r24, r22
    200a:	07 c0       	rjmp	.+14     	; 0x201a <pulseIn+0x158>
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	cb 01       	movw	r24, r22
    2012:	03 c0       	rjmp	.+6      	; 0x201a <pulseIn+0x158>
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	cb 01       	movw	r24, r22
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	bf 90       	pop	r11
    2028:	af 90       	pop	r10
    202a:	9f 90       	pop	r9
    202c:	8f 90       	pop	r8
    202e:	08 95       	ret

00002030 <SorterarmIsFinnished>:
	}
}

bool SorterarmIsFinnished(){
	return 0;
}
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	08 95       	ret

00002034 <StopSorterArm>:
	}
}

/* stop stepper */
void StopSorterArm()
{
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	1f 92       	push	r1
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
	char data[] = { MOTOR_OFF };
    2042:	19 82       	std	Y+1, r1	; 0x01
	uint16_t motor_id = 0x0A;
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2044:	00 eb       	ldi	r16, 0xB0	; 176
    2046:	1a e0       	ldi	r17, 0x0A	; 10
    2048:	2a e0       	ldi	r18, 0x0A	; 10
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	be 01       	movw	r22, r28
    204e:	6f 5f       	subi	r22, 0xFF	; 255
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	8c e4       	ldi	r24, 0x4C	; 76
    2054:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2058:	0f 90       	pop	r0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	08 95       	ret

00002064 <SorterArmISR>:
volatile bool saIsLeft, saIsRight; // Sorterarm is links of rechts van zijn uiterste rijkweidte


// Interrupt ISR
void SorterArmISR(){
	if (!(PORTK_IN & sa1.switch_pin_left)){
    2064:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2068:	86 fd       	sbrc	r24, 6
    206a:	08 c0       	rjmp	.+16     	; 0x207c <SorterArmISR+0x18>
		StopSorterArm();
    206c:	0e 94 1a 10 	call	0x2034	; 0x2034 <StopSorterArm>
		saIsLeft = true;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <saIsLeft>
		saIsRight = false;
    2076:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
    207a:	08 95       	ret
	}
	else if (!(PORTK_IN & sa1.switch_pin_right)){
    207c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2080:	88 23       	and	r24, r24
    2082:	44 f0       	brlt	.+16     	; 0x2094 <SorterArmISR+0x30>
		StopSorterArm();
    2084:	0e 94 1a 10 	call	0x2034	; 0x2034 <StopSorterArm>
		saIsLeft = false;
    2088:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
		saIsRight = true;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <saIsRight>
    2092:	08 95       	ret
	}
	else {
		saIsLeft = false;
    2094:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
		saIsRight = false;
    2098:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
    209c:	08 95       	ret

0000209e <_Z17SorterarmLinksISRv>:


}

void SorterarmLinksISR() {
	saIsLeft = true;
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <saIsLeft>
	saIsRight = false;
    20a4:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
	StopSorterArm();
    20a8:	0e 94 1a 10 	call	0x2034	; 0x2034 <StopSorterArm>
    20ac:	08 95       	ret

000020ae <_Z18SorterArmRechtsISRv>:
}

void SorterArmRechtsISR() {
	saIsLeft = false;
    20ae:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
	saIsRight = true;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <saIsRight>
	StopSorterArm();
    20b8:	0e 94 1a 10 	call	0x2034	; 0x2034 <StopSorterArm>
    20bc:	08 95       	ret

000020be <SaSetInput>:


// Zet pinnen van de sorterarm als input-pullup
void SaSetInput(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_DIR &= ~(switch_pin_left);		//pin set left as input
    20be:	e0 e2       	ldi	r30, 0x20	; 32
    20c0:	f7 e0       	ldi	r31, 0x07	; 7
    20c2:	90 81       	ld	r25, Z
    20c4:	28 2f       	mov	r18, r24
    20c6:	20 95       	com	r18
    20c8:	92 23       	and	r25, r18
    20ca:	90 83       	st	Z, r25
	PORTK_DIR &= ~(switch_pin_right);		//pin set right as input
    20cc:	90 81       	ld	r25, Z
    20ce:	26 2f       	mov	r18, r22
    20d0:	20 95       	com	r18
    20d2:	92 23       	and	r25, r18
    20d4:	90 83       	st	Z, r25
	
	//Set the PINnCTRL of the left switch to PULLUP
	switch (switch_pin_left)				//pull-up
    20d6:	88 30       	cpi	r24, 0x08	; 8
    20d8:	29 f1       	breq	.+74     	; 0x2124 <SaSetInput+0x66>
    20da:	38 f4       	brcc	.+14     	; 0x20ea <SaSetInput+0x2c>
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	b1 f0       	breq	.+44     	; 0x210c <SaSetInput+0x4e>
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	d1 f0       	breq	.+52     	; 0x2118 <SaSetInput+0x5a>
    20e4:	81 30       	cpi	r24, 0x01	; 1
    20e6:	d9 f5       	brne	.+118    	; 0x215e <SaSetInput+0xa0>
    20e8:	0b c0       	rjmp	.+22     	; 0x2100 <SaSetInput+0x42>
    20ea:	80 32       	cpi	r24, 0x20	; 32
    20ec:	39 f1       	breq	.+78     	; 0x213c <SaSetInput+0x7e>
    20ee:	18 f4       	brcc	.+6      	; 0x20f6 <SaSetInput+0x38>
    20f0:	80 31       	cpi	r24, 0x10	; 16
    20f2:	f1 f0       	breq	.+60     	; 0x2130 <SaSetInput+0x72>
    20f4:	34 c0       	rjmp	.+104    	; 0x215e <SaSetInput+0xa0>
    20f6:	80 34       	cpi	r24, 0x40	; 64
    20f8:	39 f1       	breq	.+78     	; 0x2148 <SaSetInput+0x8a>
    20fa:	80 38       	cpi	r24, 0x80	; 128
    20fc:	59 f1       	breq	.+86     	; 0x2154 <SaSetInput+0x96>
    20fe:	2f c0       	rjmp	.+94     	; 0x215e <SaSetInput+0xa0>
	{
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    2100:	e0 e3       	ldi	r30, 0x30	; 48
    2102:	f7 e0       	ldi	r31, 0x07	; 7
    2104:	80 81       	ld	r24, Z
    2106:	88 61       	ori	r24, 0x18	; 24
    2108:	80 83       	st	Z, r24
    210a:	29 c0       	rjmp	.+82     	; 0x215e <SaSetInput+0xa0>
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    210c:	e1 e3       	ldi	r30, 0x31	; 49
    210e:	f7 e0       	ldi	r31, 0x07	; 7
    2110:	80 81       	ld	r24, Z
    2112:	88 61       	ori	r24, 0x18	; 24
    2114:	80 83       	st	Z, r24
    2116:	23 c0       	rjmp	.+70     	; 0x215e <SaSetInput+0xa0>
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    2118:	e2 e3       	ldi	r30, 0x32	; 50
    211a:	f7 e0       	ldi	r31, 0x07	; 7
    211c:	80 81       	ld	r24, Z
    211e:	88 61       	ori	r24, 0x18	; 24
    2120:	80 83       	st	Z, r24
    2122:	1d c0       	rjmp	.+58     	; 0x215e <SaSetInput+0xa0>
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    2124:	e3 e3       	ldi	r30, 0x33	; 51
    2126:	f7 e0       	ldi	r31, 0x07	; 7
    2128:	80 81       	ld	r24, Z
    212a:	88 61       	ori	r24, 0x18	; 24
    212c:	80 83       	st	Z, r24
    212e:	17 c0       	rjmp	.+46     	; 0x215e <SaSetInput+0xa0>
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    2130:	e4 e3       	ldi	r30, 0x34	; 52
    2132:	f7 e0       	ldi	r31, 0x07	; 7
    2134:	80 81       	ld	r24, Z
    2136:	88 61       	ori	r24, 0x18	; 24
    2138:	80 83       	st	Z, r24
    213a:	11 c0       	rjmp	.+34     	; 0x215e <SaSetInput+0xa0>
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    213c:	e5 e3       	ldi	r30, 0x35	; 53
    213e:	f7 e0       	ldi	r31, 0x07	; 7
    2140:	80 81       	ld	r24, Z
    2142:	88 61       	ori	r24, 0x18	; 24
    2144:	80 83       	st	Z, r24
    2146:	0b c0       	rjmp	.+22     	; 0x215e <SaSetInput+0xa0>
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    2148:	e6 e3       	ldi	r30, 0x36	; 54
    214a:	f7 e0       	ldi	r31, 0x07	; 7
    214c:	80 81       	ld	r24, Z
    214e:	88 61       	ori	r24, 0x18	; 24
    2150:	80 83       	st	Z, r24
    2152:	05 c0       	rjmp	.+10     	; 0x215e <SaSetInput+0xa0>
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    2154:	e7 e3       	ldi	r30, 0x37	; 55
    2156:	f7 e0       	ldi	r31, 0x07	; 7
    2158:	80 81       	ld	r24, Z
    215a:	88 61       	ori	r24, 0x18	; 24
    215c:	80 83       	st	Z, r24
		default: break;
	}

	//Set the PINnCTRL of the right switch to PULLUP
	switch(switch_pin_right){
    215e:	68 30       	cpi	r22, 0x08	; 8
    2160:	29 f1       	breq	.+74     	; 0x21ac <SaSetInput+0xee>
    2162:	38 f4       	brcc	.+14     	; 0x2172 <SaSetInput+0xb4>
    2164:	62 30       	cpi	r22, 0x02	; 2
    2166:	b1 f0       	breq	.+44     	; 0x2194 <SaSetInput+0xd6>
    2168:	64 30       	cpi	r22, 0x04	; 4
    216a:	d1 f0       	breq	.+52     	; 0x21a0 <SaSetInput+0xe2>
    216c:	61 30       	cpi	r22, 0x01	; 1
    216e:	d9 f5       	brne	.+118    	; 0x21e6 <SaSetInput+0x128>
    2170:	0b c0       	rjmp	.+22     	; 0x2188 <SaSetInput+0xca>
    2172:	60 32       	cpi	r22, 0x20	; 32
    2174:	39 f1       	breq	.+78     	; 0x21c4 <SaSetInput+0x106>
    2176:	18 f4       	brcc	.+6      	; 0x217e <SaSetInput+0xc0>
    2178:	60 31       	cpi	r22, 0x10	; 16
    217a:	f1 f0       	breq	.+60     	; 0x21b8 <SaSetInput+0xfa>
    217c:	08 95       	ret
    217e:	60 34       	cpi	r22, 0x40	; 64
    2180:	39 f1       	breq	.+78     	; 0x21d0 <SaSetInput+0x112>
    2182:	60 38       	cpi	r22, 0x80	; 128
    2184:	59 f1       	breq	.+86     	; 0x21dc <SaSetInput+0x11e>
    2186:	08 95       	ret
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    2188:	e0 e3       	ldi	r30, 0x30	; 48
    218a:	f7 e0       	ldi	r31, 0x07	; 7
    218c:	80 81       	ld	r24, Z
    218e:	88 61       	ori	r24, 0x18	; 24
    2190:	80 83       	st	Z, r24
    2192:	08 95       	ret
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    2194:	e1 e3       	ldi	r30, 0x31	; 49
    2196:	f7 e0       	ldi	r31, 0x07	; 7
    2198:	80 81       	ld	r24, Z
    219a:	88 61       	ori	r24, 0x18	; 24
    219c:	80 83       	st	Z, r24
    219e:	08 95       	ret
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    21a0:	e2 e3       	ldi	r30, 0x32	; 50
    21a2:	f7 e0       	ldi	r31, 0x07	; 7
    21a4:	80 81       	ld	r24, Z
    21a6:	88 61       	ori	r24, 0x18	; 24
    21a8:	80 83       	st	Z, r24
    21aa:	08 95       	ret
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    21ac:	e3 e3       	ldi	r30, 0x33	; 51
    21ae:	f7 e0       	ldi	r31, 0x07	; 7
    21b0:	80 81       	ld	r24, Z
    21b2:	88 61       	ori	r24, 0x18	; 24
    21b4:	80 83       	st	Z, r24
    21b6:	08 95       	ret
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    21b8:	e4 e3       	ldi	r30, 0x34	; 52
    21ba:	f7 e0       	ldi	r31, 0x07	; 7
    21bc:	80 81       	ld	r24, Z
    21be:	88 61       	ori	r24, 0x18	; 24
    21c0:	80 83       	st	Z, r24
    21c2:	08 95       	ret
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    21c4:	e5 e3       	ldi	r30, 0x35	; 53
    21c6:	f7 e0       	ldi	r31, 0x07	; 7
    21c8:	80 81       	ld	r24, Z
    21ca:	88 61       	ori	r24, 0x18	; 24
    21cc:	80 83       	st	Z, r24
    21ce:	08 95       	ret
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    21d0:	e6 e3       	ldi	r30, 0x36	; 54
    21d2:	f7 e0       	ldi	r31, 0x07	; 7
    21d4:	80 81       	ld	r24, Z
    21d6:	88 61       	ori	r24, 0x18	; 24
    21d8:	80 83       	st	Z, r24
    21da:	08 95       	ret
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    21dc:	e7 e3       	ldi	r30, 0x37	; 55
    21de:	f7 e0       	ldi	r31, 0x07	; 7
    21e0:	80 81       	ld	r24, Z
    21e2:	88 61       	ori	r24, 0x18	; 24
    21e4:	80 83       	st	Z, r24
    21e6:	08 95       	ret

000021e8 <SaSetInterrupt>:


// Zet interrupts aan op de sorterarm pinnen
void SaSetInterrupt(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_INT1MASK |= switch_pin_left;		//pin listen interrupt left
    21e8:	eb e2       	ldi	r30, 0x2B	; 43
    21ea:	f7 e0       	ldi	r31, 0x07	; 7
    21ec:	90 81       	ld	r25, Z
    21ee:	98 2b       	or	r25, r24
    21f0:	90 83       	st	Z, r25
	PORTK_INT1MASK |= switch_pin_right;		//pin listen interrupt right
    21f2:	90 81       	ld	r25, Z
    21f4:	69 2b       	or	r22, r25
    21f6:	60 83       	st	Z, r22

	switch (switch_pin_left)					//sense both edges
    21f8:	84 30       	cpi	r24, 0x04	; 4
    21fa:	09 f1       	breq	.+66     	; 0x223e <SaSetInterrupt+0x56>
    21fc:	28 f4       	brcc	.+10     	; 0x2208 <SaSetInterrupt+0x20>
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	41 f0       	breq	.+16     	; 0x2212 <SaSetInterrupt+0x2a>
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	89 f0       	breq	.+34     	; 0x2228 <SaSetInterrupt+0x40>
    2206:	3b c0       	rjmp	.+118    	; 0x227e <SaSetInterrupt+0x96>
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	21 f1       	breq	.+72     	; 0x2254 <SaSetInterrupt+0x6c>
    220c:	80 31       	cpi	r24, 0x10	; 16
    220e:	69 f1       	breq	.+90     	; 0x226a <SaSetInterrupt+0x82>
    2210:	36 c0       	rjmp	.+108    	; 0x227e <SaSetInterrupt+0x96>
	{
	case PIN0_bm: PORTK_PIN0CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc; break;
    2212:	e0 e3       	ldi	r30, 0x30	; 48
    2214:	f7 e0       	ldi	r31, 0x07	; 7
    2216:	80 81       	ld	r24, Z
    2218:	82 60       	ori	r24, 0x02	; 2
    221a:	80 83       	st	Z, r24
    221c:	e1 e3       	ldi	r30, 0x31	; 49
    221e:	f7 e0       	ldi	r31, 0x07	; 7
    2220:	80 81       	ld	r24, Z
    2222:	82 60       	ori	r24, 0x02	; 2
    2224:	80 83       	st	Z, r24
    2226:	2b c0       	rjmp	.+86     	; 0x227e <SaSetInterrupt+0x96>
	case PIN1_bm: PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc; break;
    2228:	e1 e3       	ldi	r30, 0x31	; 49
    222a:	f7 e0       	ldi	r31, 0x07	; 7
    222c:	80 81       	ld	r24, Z
    222e:	82 60       	ori	r24, 0x02	; 2
    2230:	80 83       	st	Z, r24
    2232:	e2 e3       	ldi	r30, 0x32	; 50
    2234:	f7 e0       	ldi	r31, 0x07	; 7
    2236:	80 81       	ld	r24, Z
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	80 83       	st	Z, r24
    223c:	20 c0       	rjmp	.+64     	; 0x227e <SaSetInterrupt+0x96>
	case PIN2_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN3CTRL |= PORT_ISC_FALLING_gc; break;
    223e:	e2 e3       	ldi	r30, 0x32	; 50
    2240:	f7 e0       	ldi	r31, 0x07	; 7
    2242:	80 81       	ld	r24, Z
    2244:	82 60       	ori	r24, 0x02	; 2
    2246:	80 83       	st	Z, r24
    2248:	e3 e3       	ldi	r30, 0x33	; 51
    224a:	f7 e0       	ldi	r31, 0x07	; 7
    224c:	80 81       	ld	r24, Z
    224e:	82 60       	ori	r24, 0x02	; 2
    2250:	80 83       	st	Z, r24
    2252:	15 c0       	rjmp	.+42     	; 0x227e <SaSetInterrupt+0x96>
	case PIN3_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; break;
    2254:	e2 e3       	ldi	r30, 0x32	; 50
    2256:	f7 e0       	ldi	r31, 0x07	; 7
    2258:	80 81       	ld	r24, Z
    225a:	82 60       	ori	r24, 0x02	; 2
    225c:	80 83       	st	Z, r24
    225e:	e4 e3       	ldi	r30, 0x34	; 52
    2260:	f7 e0       	ldi	r31, 0x07	; 7
    2262:	80 81       	ld	r24, Z
    2264:	82 60       	ori	r24, 0x02	; 2
    2266:	80 83       	st	Z, r24
    2268:	0a c0       	rjmp	.+20     	; 0x227e <SaSetInterrupt+0x96>
	case PIN4_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc; break;
    226a:	e2 e3       	ldi	r30, 0x32	; 50
    226c:	f7 e0       	ldi	r31, 0x07	; 7
    226e:	80 81       	ld	r24, Z
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	80 83       	st	Z, r24
    2274:	e5 e3       	ldi	r30, 0x35	; 53
    2276:	f7 e0       	ldi	r31, 0x07	; 7
    2278:	80 81       	ld	r24, Z
    227a:	82 60       	ori	r24, 0x02	; 2
    227c:	80 83       	st	Z, r24
	}

	PORTK_INTCTRL |= PORT_INT1LVL0_bm;	//enable interrupt on PORTK
    227e:	e9 e2       	ldi	r30, 0x29	; 41
    2280:	f7 e0       	ldi	r31, 0x07	; 7
    2282:	80 81       	ld	r24, Z
    2284:	84 60       	ori	r24, 0x04	; 4
    2286:	80 83       	st	Z, r24
    2288:	08 95       	ret

0000228a <ConfigSorterArm>:
bool SorterarmIsFinnished(){
	return 0;
}

bool ConfigSorterArm(){
	SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
    228a:	60 e8       	ldi	r22, 0x80	; 128
    228c:	80 e4       	ldi	r24, 0x40	; 64
    228e:	0e 94 5f 10 	call	0x20be	; 0x20be <SaSetInput>
    2292:	2f e7       	ldi	r18, 0x7F	; 127
    2294:	82 e3       	ldi	r24, 0x32	; 50
    2296:	92 e0       	ldi	r25, 0x02	; 2
    2298:	21 50       	subi	r18, 0x01	; 1
    229a:	80 40       	sbci	r24, 0x00	; 0
    229c:	90 40       	sbci	r25, 0x00	; 0
    229e:	e1 f7       	brne	.-8      	; 0x2298 <ConfigSorterArm+0xe>
    22a0:	00 c0       	rjmp	.+0      	; 0x22a2 <ConfigSorterArm+0x18>
    22a2:	00 00       	nop
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
    22a4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    22a8:	86 fd       	sbrc	r24, 6
    22aa:	27 c0       	rjmp	.+78     	; 0x22fa <ConfigSorterArm+0x70>
    22ac:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22b0:	81 11       	cpse	r24, r1
    22b2:	28 c0       	rjmp	.+80     	; 0x2304 <ConfigSorterArm+0x7a>
    22b4:	22 c0       	rjmp	.+68     	; 0x22fa <ConfigSorterArm+0x70>
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
    22b6:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22ba:	81 11       	cpse	r24, r1
    22bc:	27 c0       	rjmp	.+78     	; 0x230c <ConfigSorterArm+0x82>
    22be:	15 c0       	rjmp	.+42     	; 0x22ea <ConfigSorterArm+0x60>
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    22c0:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <saIsRight>
    22c4:	81 11       	cpse	r24, r1
    22c6:	17 c0       	rjmp	.+46     	; 0x22f6 <ConfigSorterArm+0x6c>
    22c8:	25 c0       	rjmp	.+74     	; 0x2314 <ConfigSorterArm+0x8a>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    22ca:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22ce:	81 11       	cpse	r24, r1
    22d0:	0c c0       	rjmp	.+24     	; 0x22ea <ConfigSorterArm+0x60>
    22d2:	3a c0       	rjmp	.+116    	; 0x2348 <ConfigSorterArm+0xbe>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    22d4:	80 91 54 23 	lds	r24, 0x2354	; 0x802354 <saDirection>
    22d8:	81 11       	cpse	r24, r1
    22da:	29 c0       	rjmp	.+82     	; 0x232e <ConfigSorterArm+0xa4>
    22dc:	24 c0       	rjmp	.+72     	; 0x2326 <ConfigSorterArm+0x9c>
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    22de:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    22e2:	88 23       	and	r24, r24
    22e4:	54 f1       	brlt	.+84     	; 0x233a <ConfigSorterArm+0xb0>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	08 95       	ret
		saIsRight = false;
		Start = 1;
	}
		
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
    22ea:	60 e8       	ldi	r22, 0x80	; 128
    22ec:	80 e4       	ldi	r24, 0x40	; 64
    22ee:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <SaSetInterrupt>
		return 1; // Sorteram mag starten
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	08 95       	ret
	}
	else {
		return 0; // Sorterarm mag niet starten
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	08 95       	ret
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
    22fa:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    22fe:	86 ff       	sbrs	r24, 6
    2300:	da cf       	rjmp	.-76     	; 0x22b6 <ConfigSorterArm+0x2c>
    2302:	04 c0       	rjmp	.+8      	; 0x230c <ConfigSorterArm+0x82>
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <saIsLeft>
    230a:	1c c0       	rjmp	.+56     	; 0x2344 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    230c:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <saIsLeft>
    2310:	81 11       	cpse	r24, r1
    2312:	d6 cf       	rjmp	.-84     	; 0x22c0 <ConfigSorterArm+0x36>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    2314:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2318:	88 23       	and	r24, r24
    231a:	bc f6       	brge	.-82     	; 0x22ca <ConfigSorterArm+0x40>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    231c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2320:	88 23       	and	r24, r24
    2322:	c4 f6       	brge	.-80     	; 0x22d4 <ConfigSorterArm+0x4a>
    2324:	04 c0       	rjmp	.+8      	; 0x232e <ConfigSorterArm+0xa4>
		saIsRight = true;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	80 93 52 23 	sts	0x2352, r24	; 0x802352 <saIsRight>
    232c:	0b c0       	rjmp	.+22     	; 0x2344 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    232e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2332:	86 fd       	sbrc	r24, 6
    2334:	d4 cf       	rjmp	.-88     	; 0x22de <ConfigSorterArm+0x54>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	08 95       	ret
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
		saIsLeft = false;
    233a:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <saIsLeft>
		saIsRight = false;
    233e:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <saIsRight>
    2342:	d3 cf       	rjmp	.-90     	; 0x22ea <ConfigSorterArm+0x60>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	08 95       	ret
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2348:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    234c:	88 23       	and	r24, r24
    234e:	5c f7       	brge	.-42     	; 0x2326 <ConfigSorterArm+0x9c>
    2350:	ee cf       	rjmp	.-36     	; 0x232e <ConfigSorterArm+0xa4>

00002352 <MoveSorterArm>:
}


/* beweeg stepper oneindig */
void MoveSorterArm(bool direction)
{
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	28 97       	sbiw	r28, 0x08	; 8
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	f8 2e       	mov	r15, r24
	if (ConfigSorterArm() == 1){
    2368:	0e 94 45 11 	call	0x228a	; 0x228a <ConfigSorterArm>
    236c:	88 23       	and	r24, r24
    236e:	21 f1       	breq	.+72     	; 0x23b8 <MoveSorterArm+0x66>
		saDirection = direction;
    2370:	f0 92 54 23 	sts	0x2354, r15	; 0x802354 <saDirection>
		uint16_t motor_id = SORTER_MOTOR_ID;
		uint16_t motor_speed = 300;
		uint16_t steps = 5000;

		char directiondata[] = { direction };
    2374:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2376:	00 eb       	ldi	r16, 0xB0	; 176
    2378:	1a e0       	ldi	r17, 0x0A	; 10
    237a:	27 e0       	ldi	r18, 0x07	; 7
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	be 01       	movw	r22, r28
    2380:	68 5f       	subi	r22, 0xF8	; 248
    2382:	7f 4f       	sbci	r23, 0xFF	; 255
    2384:	8a e4       	ldi	r24, 0x4A	; 74
    2386:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    238a:	be 01       	movw	r22, r28
    238c:	6f 5f       	subi	r22, 0xFF	; 255
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	87 e0       	ldi	r24, 0x07	; 7
    2392:	fb 01       	movw	r30, r22
    2394:	11 92       	st	Z+, r1
    2396:	8a 95       	dec	r24
    2398:	e9 f7       	brne	.-6      	; 0x2394 <MoveSorterArm+0x42>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	8f 83       	std	Y+7, r24	; 0x07
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	8c e2       	ldi	r24, 0x2C	; 44
    23a2:	8a 83       	std	Y+2, r24	; 0x02
    23a4:	83 e1       	ldi	r24, 0x13	; 19
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    23a8:	88 e8       	ldi	r24, 0x88	; 136
    23aa:	8c 83       	std	Y+4, r24	; 0x04
    23ac:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    23ae:	27 e0       	ldi	r18, 0x07	; 7
    23b0:	47 e0       	ldi	r20, 0x07	; 7
    23b2:	86 e4       	ldi	r24, 0x46	; 70
    23b4:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		}

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}
    23b8:	28 96       	adiw	r28, 0x08	; 8
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	08 95       	ret

000023ca <HomeSorterArm>:
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
    23ca:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <saIsLeft>
    23ce:	88 23       	and	r24, r24
    23d0:	29 f0       	breq	.+10     	; 0x23dc <HomeSorterArm+0x12>
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
    23d2:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <saIsRight>
    23d6:	88 23       	and	r24, r24
    23d8:	49 f0       	breq	.+18     	; 0x23ec <HomeSorterArm+0x22>
    23da:	08 95       	ret


void HomeSorterArm()
{
	while (saIsLeft == false) {
		MoveSorterArm(0);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	0e 94 a9 11 	call	0x2352	; 0x2352 <MoveSorterArm>
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
    23e2:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <saIsLeft>
    23e6:	88 23       	and	r24, r24
    23e8:	c9 f3       	breq	.-14     	; 0x23dc <HomeSorterArm+0x12>
    23ea:	f3 cf       	rjmp	.-26     	; 0x23d2 <HomeSorterArm+0x8>
	}
	


	while (saIsRight == false) {
		MoveSorterArm(1);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	0e 94 a9 11 	call	0x2352	; 0x2352 <MoveSorterArm>
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
    23f2:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <saIsRight>
    23f6:	88 23       	and	r24, r24
    23f8:	c9 f3       	breq	.-14     	; 0x23ec <HomeSorterArm+0x22>
    23fa:	08 95       	ret

000023fc <MoveSorterArmTo>:

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}

void MoveSorterArmTo(uint16_t toPosition){
    23fc:	df 92       	push	r13
    23fe:	ef 92       	push	r14
    2400:	ff 92       	push	r15
    2402:	0f 93       	push	r16
    2404:	1f 93       	push	r17
    2406:	cf 93       	push	r28
    2408:	df 93       	push	r29
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	28 97       	sbiw	r28, 0x08	; 8
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	8c 01       	movw	r16, r24
	bool direction;
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
    2416:	0e 94 45 11 	call	0x228a	; 0x228a <ConfigSorterArm>
    241a:	88 23       	and	r24, r24
    241c:	69 f1       	breq	.+90     	; 0x2478 <MoveSorterArmTo+0x7c>
	
	if (toPosition <= sa1.position){
    241e:	01 15       	cp	r16, r1
    2420:	11 05       	cpc	r17, r1
    2422:	31 f0       	breq	.+12     	; 0x2430 <MoveSorterArmTo+0x34>
		direction = 1;
		steps = toPosition - sa1.position;
	}
	else if (toPosition >= sa1.position){
		direction = 0;
		steps = sa1.position - toPosition;
    2424:	ee 24       	eor	r14, r14
    2426:	ff 24       	eor	r15, r15
    2428:	e0 1a       	sub	r14, r16
    242a:	f1 0a       	sbc	r15, r17
	if (toPosition <= sa1.position){
		direction = 1;
		steps = toPosition - sa1.position;
	}
	else if (toPosition >= sa1.position){
		direction = 0;
    242c:	d1 2c       	mov	r13, r1
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <MoveSorterArmTo+0x3c>
	
	if (ConfigSorterArm() == 1){
	
	if (toPosition <= sa1.position){
		direction = 1;
		steps = toPosition - sa1.position;
    2430:	e1 2c       	mov	r14, r1
    2432:	f1 2c       	mov	r15, r1
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
	
	if (toPosition <= sa1.position){
		direction = 1;
    2434:	dd 24       	eor	r13, r13
    2436:	d3 94       	inc	r13
	}
	
	uint16_t motor_id = SORTER_MOTOR_ID;
	uint16_t motor_speed = 400;
	
	char directiondata[] = { direction };
    2438:	d8 86       	std	Y+8, r13	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    243a:	00 eb       	ldi	r16, 0xB0	; 176
    243c:	1a e0       	ldi	r17, 0x0A	; 10
    243e:	27 e0       	ldi	r18, 0x07	; 7
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	be 01       	movw	r22, r28
    2444:	68 5f       	subi	r22, 0xF8	; 248
    2446:	7f 4f       	sbci	r23, 0xFF	; 255
    2448:	8a e4       	ldi	r24, 0x4A	; 74
    244a:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    244e:	be 01       	movw	r22, r28
    2450:	6f 5f       	subi	r22, 0xFF	; 255
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	87 e0       	ldi	r24, 0x07	; 7
    2456:	fb 01       	movw	r30, r22
    2458:	11 92       	st	Z+, r1
    245a:	8a 95       	dec	r24
    245c:	e9 f7       	brne	.-6      	; 0x2458 <MoveSorterArmTo+0x5c>
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	8f 83       	std	Y+7, r24	; 0x07
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	80 e9       	ldi	r24, 0x90	; 144
    2466:	8a 83       	std	Y+2, r24	; 0x02
    2468:	fb 82       	std	Y+3, r15	; 0x03
    246a:	ec 82       	std	Y+4, r14	; 0x04
    246c:	dd 82       	std	Y+5, r13	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    246e:	27 e0       	ldi	r18, 0x07	; 7
    2470:	47 e0       	ldi	r20, 0x07	; 7
    2472:	86 e4       	ldi	r24, 0x46	; 70
    2474:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    2478:	28 96       	adiw	r28, 0x08	; 8
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	de bf       	out	0x3e, r29	; 62
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	08 95       	ret

0000248e <MoveSorterArmDistance>:

void MoveSorterArmDistance(bool direction, uint16_t steps){
    248e:	df 92       	push	r13
    2490:	ef 92       	push	r14
    2492:	ff 92       	push	r15
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	28 97       	sbiw	r28, 0x08	; 8
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	f8 2e       	mov	r15, r24
    24a8:	e6 2e       	mov	r14, r22
    24aa:	d7 2e       	mov	r13, r23
	
	if (ConfigSorterArm() == 1){
    24ac:	0e 94 45 11 	call	0x228a	; 0x228a <ConfigSorterArm>
    24b0:	88 23       	and	r24, r24
    24b2:	01 f1       	breq	.+64     	; 0x24f4 <MoveSorterArmDistance+0x66>
	uint16_t motor_id = SORTER_MOTOR_ID;
	uint16_t motor_speed = 300;

	char directiondata[] = { direction };
    24b4:	f8 86       	std	Y+8, r15	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    24b6:	00 eb       	ldi	r16, 0xB0	; 176
    24b8:	1a e0       	ldi	r17, 0x0A	; 10
    24ba:	27 e0       	ldi	r18, 0x07	; 7
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	be 01       	movw	r22, r28
    24c0:	68 5f       	subi	r22, 0xF8	; 248
    24c2:	7f 4f       	sbci	r23, 0xFF	; 255
    24c4:	8a e4       	ldi	r24, 0x4A	; 74
    24c6:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    24ca:	be 01       	movw	r22, r28
    24cc:	6f 5f       	subi	r22, 0xFF	; 255
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	87 e0       	ldi	r24, 0x07	; 7
    24d2:	fb 01       	movw	r30, r22
    24d4:	11 92       	st	Z+, r1
    24d6:	8a 95       	dec	r24
    24d8:	e9 f7       	brne	.-6      	; 0x24d4 <MoveSorterArmDistance+0x46>
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	8f 83       	std	Y+7, r24	; 0x07
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	8c e2       	ldi	r24, 0x2C	; 44
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	db 82       	std	Y+3, r13	; 0x03
    24e6:	ec 82       	std	Y+4, r14	; 0x04
    24e8:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    24ea:	27 e0       	ldi	r18, 0x07	; 7
    24ec:	47 e0       	ldi	r20, 0x07	; 7
    24ee:	86 e4       	ldi	r24, 0x46	; 70
    24f0:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    24f4:	28 96       	adiw	r28, 0x08	; 8
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	1f 91       	pop	r17
    2500:	0f 91       	pop	r16
    2502:	ff 90       	pop	r15
    2504:	ef 90       	pop	r14
    2506:	df 90       	pop	r13
    2508:	08 95       	ret

0000250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>:
#include "Stepperdriver.h"



void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	0f 93       	push	r16
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	d8 2e       	mov	r13, r24
    251c:	7b 01       	movw	r14, r22
    251e:	d4 2f       	mov	r29, r20
    2520:	c2 2e       	mov	r12, r18
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
    2522:	f8 94       	cli
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
    2524:	cc ef       	ldi	r28, 0xFC	; 252
    2526:	c8 1b       	sub	r28, r24
    2528:	c4 1b       	sub	r28, r20
    252a:	c2 1b       	sub	r28, r18
	for(uint8_t i = 0; i < length; i++)
    252c:	44 23       	and	r20, r20
    252e:	69 f0       	breq	.+26     	; 0x254a <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x40>
    2530:	fb 01       	movw	r30, r22
    2532:	2f ef       	ldi	r18, 0xFF	; 255
    2534:	24 0f       	add	r18, r20
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	2f 5f       	subi	r18, 0xFF	; 255
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	26 0f       	add	r18, r22
    253e:	37 1f       	adc	r19, r23
	{
		checksum = checksum - data[i];
    2540:	81 91       	ld	r24, Z+
    2542:	c8 1b       	sub	r28, r24

void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
	for(uint8_t i = 0; i < length; i++)
    2544:	e2 17       	cp	r30, r18
    2546:	f3 07       	cpc	r31, r19
    2548:	d9 f7       	brne	.-10     	; 0x2540 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x36>
	{
		checksum = checksum - data[i];
	}
	
	USART_Transmit(USART, 0xFF); //send 0xFFFF
    254a:	6f ef       	ldi	r22, 0xFF	; 255
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0xFF);
    2552:	6f ef       	ldi	r22, 0xFF	; 255
    2554:	c8 01       	movw	r24, r16
    2556:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, motorID); //send motorID
    255a:	6c 2d       	mov	r22, r12
    255c:	c8 01       	movw	r24, r16
    255e:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, length+3); //transmit message length (register instruction+address+data+checksum)
    2562:	63 e0       	ldi	r22, 0x03	; 3
    2564:	6d 0f       	add	r22, r29
    2566:	c8 01       	movw	r24, r16
    2568:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0x00); // instruction (not yet implemented)
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	c8 01       	movw	r24, r16
    2570:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, address); // send address to start writing
    2574:	6d 2d       	mov	r22, r13
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, data, length); //send data to write to registers
    257c:	4d 2f       	mov	r20, r29
    257e:	b7 01       	movw	r22, r14
    2580:	c8 01       	movw	r24, r16
    2582:	0e 94 b0 09 	call	0x1360	; 0x1360 <_Z14USART_TransmitR12USART_structPKch>
	USART_Transmit(USART, checksum);
    2586:	6c 2f       	mov	r22, r28
    2588:	c8 01       	movw	r24, r16
    258a:	0e 94 66 09 	call	0x12cc	; 0x12cc <_Z14USART_TransmitR12USART_structc>
    258e:	2f e7       	ldi	r18, 0x7F	; 127
    2590:	82 e3       	ldi	r24, 0x32	; 50
    2592:	92 e0       	ldi	r25, 0x02	; 2
    2594:	21 50       	subi	r18, 0x01	; 1
    2596:	80 40       	sbci	r24, 0x00	; 0
    2598:	90 40       	sbci	r25, 0x00	; 0
    259a:	e1 f7       	brne	.-8      	; 0x2594 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x8a>
    259c:	00 c0       	rjmp	.+0      	; 0x259e <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x94>
    259e:	00 00       	nop

	_delay_ms(30);
	sei(); //global interrupt enable
    25a0:	78 94       	sei
}
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	1f 91       	pop	r17
    25a8:	0f 91       	pop	r16
    25aa:	ff 90       	pop	r15
    25ac:	ef 90       	pop	r14
    25ae:	df 90       	pop	r13
    25b0:	cf 90       	pop	r12
    25b2:	08 95       	ret

000025b4 <_Z22ChangeDirectionStepperbh>:


void ChangeDirectionStepper(bool direction, uint8_t motor_id)
{
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	1f 92       	push	r1
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	26 2f       	mov	r18, r22
	char directiondata[]={direction};
    25c4:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    25c6:	00 eb       	ldi	r16, 0xB0	; 176
    25c8:	1a e0       	ldi	r17, 0x0A	; 10
    25ca:	41 e0       	ldi	r20, 0x01	; 1
    25cc:	be 01       	movw	r22, r28
    25ce:	6f 5f       	subi	r22, 0xFF	; 255
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	8a e4       	ldi	r24, 0x4A	; 74
    25d4:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    25d8:	0f 90       	pop	r0
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	1f 91       	pop	r17
    25e0:	0f 91       	pop	r16
    25e2:	08 95       	ret

000025e4 <_Z8MoveBeltbji>:


void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	28 97       	sbiw	r28, 0x08	; 8
    25fa:	cd bf       	out	0x3d, r28	; 61
    25fc:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
    25fe:	62 30       	cpi	r22, 0x02	; 2
    2600:	71 05       	cpc	r23, r1
    2602:	61 f0       	breq	.+24     	; 0x261c <_Z8MoveBeltbji+0x38>
    2604:	20 f4       	brcc	.+8      	; 0x260e <_Z8MoveBeltbji+0x2a>
    2606:	61 30       	cpi	r22, 0x01	; 1
    2608:	71 05       	cpc	r23, r1
    260a:	a9 f0       	breq	.+42     	; 0x2636 <_Z8MoveBeltbji+0x52>
    260c:	39 c0       	rjmp	.+114    	; 0x2680 <_Z8MoveBeltbji+0x9c>
    260e:	63 30       	cpi	r22, 0x03	; 3
    2610:	71 05       	cpc	r23, r1
    2612:	41 f0       	breq	.+16     	; 0x2624 <_Z8MoveBeltbji+0x40>
    2614:	64 30       	cpi	r22, 0x04	; 4
    2616:	71 05       	cpc	r23, r1
    2618:	51 f0       	breq	.+20     	; 0x262e <_Z8MoveBeltbji+0x4a>
    261a:	32 c0       	rjmp	.+100    	; 0x2680 <_Z8MoveBeltbji+0x9c>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    261c:	68 94       	set
    261e:	cc 24       	eor	r12, r12
    2620:	c1 f8       	bld	r12, 1
    2622:	0b c0       	rjmp	.+22     	; 0x263a <_Z8MoveBeltbji+0x56>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    2624:	0f 2e       	mov	r0, r31
    2626:	f3 e0       	ldi	r31, 0x03	; 3
    2628:	cf 2e       	mov	r12, r31
    262a:	f0 2d       	mov	r31, r0
    262c:	06 c0       	rjmp	.+12     	; 0x263a <_Z8MoveBeltbji+0x56>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    262e:	68 94       	set
    2630:	cc 24       	eor	r12, r12
    2632:	c2 f8       	bld	r12, 2
    2634:	02 c0       	rjmp	.+4      	; 0x263a <_Z8MoveBeltbji+0x56>
void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
    2636:	cc 24       	eor	r12, r12
    2638:	c3 94       	inc	r12
    263a:	d5 2e       	mov	r13, r21
    263c:	e4 2e       	mov	r14, r20
    263e:	f8 2e       	mov	r15, r24
		default: return;
	}
	//Convert speed from uint16_t to byte array:
	char speedData[2]={(char)((speed>>8)&0xff), (char)(speed&0xff)};
	//Convert bool to byte array, could this be a typecast instead (and would that make a difference)
	char directiondata[]={direction};
    2640:	89 83       	std	Y+1, r24	; 0x01
	//Write direction data to the direction register
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    2642:	00 eb       	ldi	r16, 0xB0	; 176
    2644:	1a e0       	ldi	r17, 0x0A	; 10
    2646:	2c 2d       	mov	r18, r12
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	be 01       	movw	r22, r28
    264c:	6f 5f       	subi	r22, 0xFF	; 255
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	8a e4       	ldi	r24, 0x4A	; 74
    2652:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	//Write the remaining data:
	char data[]={speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON};
    2656:	be 01       	movw	r22, r28
    2658:	6e 5f       	subi	r22, 0xFE	; 254
    265a:	7f 4f       	sbci	r23, 0xFF	; 255
    265c:	87 e0       	ldi	r24, 0x07	; 7
    265e:	fb 01       	movw	r30, r22
    2660:	11 92       	st	Z+, r1
    2662:	8a 95       	dec	r24
    2664:	e9 f7       	brne	.-6      	; 0x2660 <_Z8MoveBeltbji+0x7c>
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	8c 83       	std	Y+4, r24	; 0x04
    266a:	8d 83       	std	Y+5, r24	; 0x05
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	88 87       	std	Y+8, r24	; 0x08
    2670:	da 82       	std	Y+2, r13	; 0x02
    2672:	eb 82       	std	Y+3, r14	; 0x03
    2674:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),motor_id,USARTE1); //This write operation also contains direction data? Why is the other one still needed?
    2676:	2c 2d       	mov	r18, r12
    2678:	47 e0       	ldi	r20, 0x07	; 7
    267a:	86 e4       	ldi	r24, 0x46	; 70
    267c:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2680:	28 96       	adiw	r28, 0x08	; 8
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	08 95       	ret

00002698 <_Z8StopBeltj>:


void StopBelt(uint16_t i)
{
    2698:	0f 93       	push	r16
    269a:	1f 93       	push	r17
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	1f 92       	push	r1
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    26a6:	82 30       	cpi	r24, 0x02	; 2
    26a8:	91 05       	cpc	r25, r1
    26aa:	51 f0       	breq	.+20     	; 0x26c0 <_Z8StopBeltj+0x28>
    26ac:	18 f4       	brcc	.+6      	; 0x26b4 <_Z8StopBeltj+0x1c>
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	69 f0       	breq	.+26     	; 0x26cc <_Z8StopBeltj+0x34>
    26b2:	17 c0       	rjmp	.+46     	; 0x26e2 <_Z8StopBeltj+0x4a>
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	91 05       	cpc	r25, r1
    26b8:	29 f0       	breq	.+10     	; 0x26c4 <_Z8StopBeltj+0x2c>
    26ba:	04 97       	sbiw	r24, 0x04	; 4
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <_Z8StopBeltj+0x30>
    26be:	11 c0       	rjmp	.+34     	; 0x26e2 <_Z8StopBeltj+0x4a>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    26c0:	22 e0       	ldi	r18, 0x02	; 2
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <_Z8StopBeltj+0x36>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    26c4:	23 e0       	ldi	r18, 0x03	; 3
    26c6:	03 c0       	rjmp	.+6      	; 0x26ce <_Z8StopBeltj+0x36>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    26c8:	24 e0       	ldi	r18, 0x04	; 4
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <_Z8StopBeltj+0x36>

void StopBelt(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
    26cc:	21 e0       	ldi	r18, 0x01	; 1
		case 2: motor_id = BELT_2_MOTOR_ID; break;
		case 3: motor_id = BELT_3_MOTOR_ID; break;
		case 4: motor_id = BELT_4_MOTOR_ID; break;
		default: return;
	}
	char data[]={MOTOR_OFF};
    26ce:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data)/sizeof(*data),motor_id,USARTE1);
    26d0:	00 eb       	ldi	r16, 0xB0	; 176
    26d2:	1a e0       	ldi	r17, 0x0A	; 10
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	be 01       	movw	r22, r28
    26d8:	6f 5f       	subi	r22, 0xFF	; 255
    26da:	7f 4f       	sbci	r23, 0xFF	; 255
    26dc:	8c e4       	ldi	r24, 0x4C	; 76
    26de:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    26e2:	0f 90       	pop	r0
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	08 95       	ret

000026ee <_Z13MoveTurntablebji>:


void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	28 97       	sbiw	r28, 0x08	; 8
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	switch(i) {
    2708:	61 30       	cpi	r22, 0x01	; 1
    270a:	71 05       	cpc	r23, r1
    270c:	41 f0       	breq	.+16     	; 0x271e <_Z13MoveTurntablebji+0x30>
    270e:	62 30       	cpi	r22, 0x02	; 2
    2710:	71 05       	cpc	r23, r1
    2712:	71 f5       	brne	.+92     	; 0x2770 <_Z13MoveTurntablebji+0x82>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    2714:	0f 2e       	mov	r0, r31
    2716:	f6 e0       	ldi	r31, 0x06	; 6
    2718:	cf 2e       	mov	r12, r31
    271a:	f0 2d       	mov	r31, r0
    271c:	04 c0       	rjmp	.+8      	; 0x2726 <_Z13MoveTurntablebji+0x38>

void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
    271e:	0f 2e       	mov	r0, r31
    2720:	f5 e0       	ldi	r31, 0x05	; 5
    2722:	cf 2e       	mov	r12, r31
    2724:	f0 2d       	mov	r31, r0
    2726:	d5 2e       	mov	r13, r21
    2728:	e4 2e       	mov	r14, r20
    272a:	f8 2e       	mov	r15, r24
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
    272c:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    272e:	00 eb       	ldi	r16, 0xB0	; 176
    2730:	1a e0       	ldi	r17, 0x0A	; 10
    2732:	2c 2d       	mov	r18, r12
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	be 01       	movw	r22, r28
    2738:	6f 5f       	subi	r22, 0xFF	; 255
    273a:	7f 4f       	sbci	r23, 0xFF	; 255
    273c:	8a e4       	ldi	r24, 0x4A	; 74
    273e:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_QUARTER,MOTOR_ON }; // Turntable's draaien op 1/4 step mode, hierdoor kunnen de motoreren soepeler draaien
    2742:	be 01       	movw	r22, r28
    2744:	6e 5f       	subi	r22, 0xFE	; 254
    2746:	7f 4f       	sbci	r23, 0xFF	; 255
    2748:	87 e0       	ldi	r24, 0x07	; 7
    274a:	fb 01       	movw	r30, r22
    274c:	11 92       	st	Z+, r1
    274e:	8a 95       	dec	r24
    2750:	e9 f7       	brne	.-6      	; 0x274c <_Z13MoveTurntablebji+0x5e>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	8c 83       	std	Y+4, r24	; 0x04
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	8f 83       	std	Y+7, r24	; 0x07
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	88 87       	std	Y+8, r24	; 0x08
    2760:	da 82       	std	Y+2, r13	; 0x02
    2762:	eb 82       	std	Y+3, r14	; 0x03
    2764:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2766:	2c 2d       	mov	r18, r12
    2768:	47 e0       	ldi	r20, 0x07	; 7
    276a:	86 e4       	ldi	r24, 0x46	; 70
    276c:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2770:	28 96       	adiw	r28, 0x08	; 8
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ff 90       	pop	r15
    2780:	ef 90       	pop	r14
    2782:	df 90       	pop	r13
    2784:	cf 90       	pop	r12
    2786:	08 95       	ret

00002788 <_Z13StopTurntablej>:


void StopTurntable(uint16_t i)
{
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	1f 92       	push	r1
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	91 05       	cpc	r25, r1
    279a:	21 f0       	breq	.+8      	; 0x27a4 <_Z13StopTurntablej+0x1c>
    279c:	02 97       	sbiw	r24, 0x02	; 2
    279e:	69 f4       	brne	.+26     	; 0x27ba <_Z13StopTurntablej+0x32>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    27a0:	26 e0       	ldi	r18, 0x06	; 6
    27a2:	01 c0       	rjmp	.+2      	; 0x27a6 <_Z13StopTurntablej+0x1e>

void StopTurntable(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
    27a4:	25 e0       	ldi	r18, 0x05	; 5
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char data[] = { MOTOR_OFF };
    27a6:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    27a8:	00 eb       	ldi	r16, 0xB0	; 176
    27aa:	1a e0       	ldi	r17, 0x0A	; 10
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	be 01       	movw	r22, r28
    27b0:	6f 5f       	subi	r22, 0xFF	; 255
    27b2:	7f 4f       	sbci	r23, 0xFF	; 255
    27b4:	8c e4       	ldi	r24, 0x4C	; 76
    27b6:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    27ba:	0f 90       	pop	r0
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	08 95       	ret

000027c6 <_Z13DemoTestBlockv>:


// Test Code om uit te zoeken hoe een motor gestart moet worden op adres 0x0A
void DemoTestBlock() {
    27c6:	0f 93       	push	r16
    27c8:	1f 93       	push	r17
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	28 97       	sbiw	r28, 0x08	; 8
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID; // Dit zou 0x0A moeten zijn
	int16_t speed = 1000;
	bool direction = 0;
	
	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
    27d8:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    27da:	00 eb       	ldi	r16, 0xB0	; 176
    27dc:	1a e0       	ldi	r17, 0x0A	; 10
    27de:	2a e0       	ldi	r18, 0x0A	; 10
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	be 01       	movw	r22, r28
    27e4:	6f 5f       	subi	r22, 0xFF	; 255
    27e6:	7f 4f       	sbci	r23, 0xFF	; 255
    27e8:	8a e4       	ldi	r24, 0x4A	; 74
    27ea:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON };
    27ee:	be 01       	movw	r22, r28
    27f0:	6e 5f       	subi	r22, 0xFE	; 254
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	87 e0       	ldi	r24, 0x07	; 7
    27f6:	fb 01       	movw	r30, r22
    27f8:	11 92       	st	Z+, r1
    27fa:	8a 95       	dec	r24
    27fc:	e9 f7       	brne	.-6      	; 0x27f8 <_Z13DemoTestBlockv+0x32>
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	8c 83       	std	Y+4, r24	; 0x04
    2802:	8d 83       	std	Y+5, r24	; 0x05
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	88 87       	std	Y+8, r24	; 0x08
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	8a 83       	std	Y+2, r24	; 0x02
    280c:	88 ee       	ldi	r24, 0xE8	; 232
    280e:	8b 83       	std	Y+3, r24	; 0x03
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2810:	2a e0       	ldi	r18, 0x0A	; 10
    2812:	47 e0       	ldi	r20, 0x07	; 7
    2814:	86 e4       	ldi	r24, 0x46	; 70
    2816:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    281a:	28 96       	adiw	r28, 0x08	; 8
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	de bf       	out	0x3e, r29	; 62
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <_Z17StopDemoTestBlockv>:


// Test code om de motor op TEST_DEMO_MOTOR_ID weer te stoppen
void StopDemoTestBlock() {
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	1f 92       	push	r1
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    2838:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    283a:	00 eb       	ldi	r16, 0xB0	; 176
    283c:	1a e0       	ldi	r17, 0x0A	; 10
    283e:	2a e0       	ldi	r18, 0x0A	; 10
    2840:	41 e0       	ldi	r20, 0x01	; 1
    2842:	be 01       	movw	r22, r28
    2844:	6f 5f       	subi	r22, 0xFF	; 255
    2846:	7f 4f       	sbci	r23, 0xFF	; 255
    2848:	8c e4       	ldi	r24, 0x4C	; 76
    284a:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    284e:	0f 90       	pop	r0
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	08 95       	ret

0000285a <_Z10SetAddresshh>:


// Change the address of a motor
void SetAddress(uint8_t from, uint8_t to) {
    285a:	0f 93       	push	r16
    285c:	1f 93       	push	r17
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	1f 92       	push	r1
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	uint16_t motor_id = from; // Old address
	char regdata = to; // New address
    2868:	69 83       	std	Y+1, r22	; 0x01
	stepperWriteRegister(BUS_ADDRESS_REG, 
						 &regdata, 
						 1, // Size of message
						 motor_id, 
						 USARTE1
						 ); //Write new address to motor
    286a:	00 eb       	ldi	r16, 0xB0	; 176
    286c:	1a e0       	ldi	r17, 0x0A	; 10
    286e:	28 2f       	mov	r18, r24
    2870:	41 e0       	ldi	r20, 0x01	; 1
    2872:	be 01       	movw	r22, r28
    2874:	6f 5f       	subi	r22, 0xFF	; 255
    2876:	7f 4f       	sbci	r23, 0xFF	; 255
    2878:	85 e0       	ldi	r24, 0x05	; 5
    287a:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    287e:	0f 90       	pop	r0
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	08 95       	ret

0000288a <_Z9ToggleLEDv>:
	JMP(SelectColour),
	JMP(set_relay),
};


void ToggleLED() { PORTH_OUTTGL |= (1<<4)|(1<<5); }
    288a:	e7 ee       	ldi	r30, 0xE7	; 231
    288c:	f6 e0       	ldi	r31, 0x06	; 6
    288e:	80 81       	ld	r24, Z
    2890:	80 63       	ori	r24, 0x30	; 48
    2892:	80 83       	st	Z, r24
    2894:	08 95       	ret

00002896 <_Z3LEDb>:
void LED(bool i) {
	if (i) {
    2896:	88 23       	and	r24, r24
    2898:	31 f0       	breq	.+12     	; 0x28a6 <_Z3LEDb+0x10>
		PORTH_OUTCLR |= (1<<4)|(1<<5);
    289a:	e6 ee       	ldi	r30, 0xE6	; 230
    289c:	f6 e0       	ldi	r31, 0x06	; 6
    289e:	80 81       	ld	r24, Z
    28a0:	80 63       	ori	r24, 0x30	; 48
    28a2:	80 83       	st	Z, r24
    28a4:	08 95       	ret
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
    28a6:	e5 ee       	ldi	r30, 0xE5	; 229
    28a8:	f6 e0       	ldi	r31, 0x06	; 6
    28aa:	80 81       	ld	r24, Z
    28ac:	80 63       	ori	r24, 0x30	; 48
    28ae:	80 83       	st	Z, r24
    28b0:	08 95       	ret

000028b2 <_Z9set_relaybh>:
#define RELAY4_OUTCLR	PORTQ_OUTCLR
#define RELAY5_OUTCLR	PORTQ_OUTCLR


void set_relay(bool value, uint8_t relay)
{
    28b2:	cf 93       	push	r28
    28b4:	df 93       	push	r29
    28b6:	d8 2f       	mov	r29, r24
    28b8:	c6 2f       	mov	r28, r22
	DEBUG_OUT("Setting a relay!");
    28ba:	6a ec       	ldi	r22, 0xCA	; 202
    28bc:	71 e2       	ldi	r23, 0x21	; 33
    28be:	80 ea       	ldi	r24, 0xA0	; 160
    28c0:	99 e0       	ldi	r25, 0x09	; 9
    28c2:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	switch (relay)
    28c6:	c3 30       	cpi	r28, 0x03	; 3
    28c8:	49 f1       	breq	.+82     	; 0x291c <_Z9set_relaybh+0x6a>
    28ca:	28 f4       	brcc	.+10     	; 0x28d6 <_Z9set_relaybh+0x24>
    28cc:	c1 30       	cpi	r28, 0x01	; 1
    28ce:	d1 f1       	breq	.+116    	; 0x2944 <_Z9set_relaybh+0x92>
    28d0:	c2 30       	cpi	r28, 0x02	; 2
    28d2:	71 f1       	breq	.+92     	; 0x2930 <_Z9set_relaybh+0x7e>
    28d4:	40 c0       	rjmp	.+128    	; 0x2956 <_Z9set_relaybh+0xa4>
    28d6:	c5 30       	cpi	r28, 0x05	; 5
    28d8:	69 f0       	breq	.+26     	; 0x28f4 <_Z9set_relaybh+0x42>
    28da:	b0 f0       	brcs	.+44     	; 0x2908 <_Z9set_relaybh+0x56>
    28dc:	c6 30       	cpi	r28, 0x06	; 6
    28de:	d9 f5       	brne	.+118    	; 0x2956 <_Z9set_relaybh+0xa4>
	{	
		//Use conditional operator to check for SET or CLR for relay:
		//IMPORTANT: In the ULN2803, signal traces get inverted (Relay0 on Atmega pin label is Relay output marked K6, see schematic sheet 5: "Relays_Optocoupers")
		case 6: value ? RELAY0_OUTSET = RELAY0_bm : RELAY0_OUTCLR = RELAY0_bm; break;
    28e0:	dd 23       	and	r29, r29
    28e2:	21 f0       	breq	.+8      	; 0x28ec <_Z9set_relaybh+0x3a>
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    28ea:	35 c0       	rjmp	.+106    	; 0x2956 <_Z9set_relaybh+0xa4>
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    28f2:	31 c0       	rjmp	.+98     	; 0x2956 <_Z9set_relaybh+0xa4>
		case 5: value ? RELAY1_OUTSET = RELAY1_bm : RELAY1_OUTCLR = RELAY1_bm; break;
    28f4:	dd 23       	and	r29, r29
    28f6:	21 f0       	breq	.+8      	; 0x2900 <_Z9set_relaybh+0x4e>
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    28fe:	2b c0       	rjmp	.+86     	; 0x2956 <_Z9set_relaybh+0xa4>
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    2906:	27 c0       	rjmp	.+78     	; 0x2956 <_Z9set_relaybh+0xa4>
		case 4: value ? RELAY2_OUTSET = RELAY2_bm : RELAY2_OUTCLR = RELAY2_bm; break;
    2908:	dd 23       	and	r29, r29
    290a:	21 f0       	breq	.+8      	; 0x2914 <_Z9set_relaybh+0x62>
    290c:	88 e0       	ldi	r24, 0x08	; 8
    290e:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2912:	21 c0       	rjmp	.+66     	; 0x2956 <_Z9set_relaybh+0xa4>
    2914:	88 e0       	ldi	r24, 0x08	; 8
    2916:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    291a:	1d c0       	rjmp	.+58     	; 0x2956 <_Z9set_relaybh+0xa4>
		case 3: value ? RELAY3_OUTSET = RELAY3_bm : RELAY3_OUTCLR = RELAY3_bm; break;
    291c:	dd 23       	and	r29, r29
    291e:	21 f0       	breq	.+8      	; 0x2928 <_Z9set_relaybh+0x76>
    2920:	84 e0       	ldi	r24, 0x04	; 4
    2922:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2926:	17 c0       	rjmp	.+46     	; 0x2956 <_Z9set_relaybh+0xa4>
    2928:	84 e0       	ldi	r24, 0x04	; 4
    292a:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    292e:	13 c0       	rjmp	.+38     	; 0x2956 <_Z9set_relaybh+0xa4>
		case 2: value ? RELAY4_OUTSET = RELAY4_bm : RELAY4_OUTCLR = RELAY4_bm; break;
    2930:	dd 23       	and	r29, r29
    2932:	21 f0       	breq	.+8      	; 0x293c <_Z9set_relaybh+0x8a>
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    293a:	0d c0       	rjmp	.+26     	; 0x2956 <_Z9set_relaybh+0xa4>
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    2942:	09 c0       	rjmp	.+18     	; 0x2956 <_Z9set_relaybh+0xa4>
		case 1: value ? RELAY5_OUTSET = RELAY5_bm : RELAY5_OUTCLR = RELAY5_bm; break;
    2944:	dd 23       	and	r29, r29
    2946:	21 f0       	breq	.+8      	; 0x2950 <_Z9set_relaybh+0x9e>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    294e:	03 c0       	rjmp	.+6      	; 0x2956 <_Z9set_relaybh+0xa4>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
		default: break;
	}
}
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	08 95       	ret

0000295c <_Z8Solenoidhb>:
#define SOLENOID_H_

#include "relays.h"

void Solenoid(uint8_t solenoid, bool InOut)
{
    295c:	98 2f       	mov	r25, r24
    295e:	86 2f       	mov	r24, r22
	set_relay(InOut,solenoid);
    2960:	69 2f       	mov	r22, r25
    2962:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_Z9set_relaybh>
    2966:	08 95       	ret

00002968 <_Z13PulseSolenoidh>:
}

void PulseSolenoid(uint8_t solenoid)
{
    2968:	cf 93       	push	r28
    296a:	c8 2f       	mov	r28, r24
	set_relay(1,solenoid);
    296c:	68 2f       	mov	r22, r24
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_Z9set_relaybh>
    2974:	2f ef       	ldi	r18, 0xFF	; 255
    2976:	85 ea       	ldi	r24, 0xA5	; 165
    2978:	9e e0       	ldi	r25, 0x0E	; 14
    297a:	21 50       	subi	r18, 0x01	; 1
    297c:	80 40       	sbci	r24, 0x00	; 0
    297e:	90 40       	sbci	r25, 0x00	; 0
    2980:	e1 f7       	brne	.-8      	; 0x297a <_Z13PulseSolenoidh+0x12>
    2982:	00 c0       	rjmp	.+0      	; 0x2984 <_Z13PulseSolenoidh+0x1c>
    2984:	00 00       	nop
	_delay_ms(200);
	set_relay(0,solenoid);
    2986:	6c 2f       	mov	r22, r28
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <_Z9set_relaybh>
}
    298e:	cf 91       	pop	r28
    2990:	08 95       	ret

00002992 <_Z14requestStartedv>:
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
void requestStarted() { TWI_Write(TWIC, Started); }
    2992:	60 91 56 23 	lds	r22, 0x2356	; 0x802356 <Started>
    2996:	80 e8       	ldi	r24, 0x80	; 128
    2998:	94 e0       	ldi	r25, 0x04	; 4
    299a:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z9TWI_WriteR10TWI_structh>
    299e:	08 95       	ret

000029a0 <_Z13requestResultv>:
void requestResult() { TWI_Write(TWIC, Result); }
    29a0:	60 91 55 23 	lds	r22, 0x2355	; 0x802355 <Result>
    29a4:	80 e8       	ldi	r24, 0x80	; 128
    29a6:	94 e0       	ldi	r25, 0x04	; 4
    29a8:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z9TWI_WriteR10TWI_structh>
    29ac:	08 95       	ret

000029ae <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <sysclk_enable_peripheral_clock+0x6>
    29b2:	5c c1       	rjmp	.+696    	; 0x2c6c <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    29b4:	80 3c       	cpi	r24, 0xC0	; 192
    29b6:	91 05       	cpc	r25, r1
    29b8:	29 f4       	brne	.+10     	; 0x29c4 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    29ba:	60 e1       	ldi	r22, 0x10	; 16
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    29c2:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    29c4:	80 34       	cpi	r24, 0x40	; 64
    29c6:	24 e0       	ldi	r18, 0x04	; 4
    29c8:	92 07       	cpc	r25, r18
    29ca:	29 f4       	brne	.+10     	; 0x29d6 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    29cc:	68 e0       	ldi	r22, 0x08	; 8
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    29d4:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    29d6:	81 15       	cp	r24, r1
    29d8:	24 e0       	ldi	r18, 0x04	; 4
    29da:	92 07       	cpc	r25, r18
    29dc:	29 f4       	brne	.+10     	; 0x29e8 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    29de:	64 e0       	ldi	r22, 0x04	; 4
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    29e6:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    29e8:	80 38       	cpi	r24, 0x80	; 128
    29ea:	21 e0       	ldi	r18, 0x01	; 1
    29ec:	92 07       	cpc	r25, r18
    29ee:	29 f4       	brne	.+10     	; 0x29fa <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    29f0:	62 e0       	ldi	r22, 0x02	; 2
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    29f8:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    29fa:	81 15       	cp	r24, r1
    29fc:	21 e0       	ldi	r18, 0x01	; 1
    29fe:	92 07       	cpc	r25, r18
    2a00:	29 f4       	brne	.+10     	; 0x2a0c <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2a02:	61 e0       	ldi	r22, 0x01	; 1
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a0a:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2a0c:	80 38       	cpi	r24, 0x80	; 128
    2a0e:	23 e0       	ldi	r18, 0x03	; 3
    2a10:	92 07       	cpc	r25, r18
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a1c:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2a1e:	80 39       	cpi	r24, 0x90	; 144
    2a20:	23 e0       	ldi	r18, 0x03	; 3
    2a22:	92 07       	cpc	r25, r18
    2a24:	29 f4       	brne	.+10     	; 0x2a30 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	82 e0       	ldi	r24, 0x02	; 2
    2a2a:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a2e:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2a30:	81 15       	cp	r24, r1
    2a32:	22 e0       	ldi	r18, 0x02	; 2
    2a34:	92 07       	cpc	r25, r18
    2a36:	29 f4       	brne	.+10     	; 0x2a42 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2a38:	62 e0       	ldi	r22, 0x02	; 2
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a40:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2a42:	80 34       	cpi	r24, 0x40	; 64
    2a44:	22 e0       	ldi	r18, 0x02	; 2
    2a46:	92 07       	cpc	r25, r18
    2a48:	29 f4       	brne	.+10     	; 0x2a54 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2a4a:	62 e0       	ldi	r22, 0x02	; 2
    2a4c:	82 e0       	ldi	r24, 0x02	; 2
    2a4e:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a52:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2a54:	81 15       	cp	r24, r1
    2a56:	23 e0       	ldi	r18, 0x03	; 3
    2a58:	92 07       	cpc	r25, r18
    2a5a:	29 f4       	brne	.+10     	; 0x2a66 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2a5c:	64 e0       	ldi	r22, 0x04	; 4
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a64:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2a66:	80 32       	cpi	r24, 0x20	; 32
    2a68:	23 e0       	ldi	r18, 0x03	; 3
    2a6a:	92 07       	cpc	r25, r18
    2a6c:	29 f4       	brne	.+10     	; 0x2a78 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2a6e:	64 e0       	ldi	r22, 0x04	; 4
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a76:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2a78:	81 15       	cp	r24, r1
    2a7a:	28 e0       	ldi	r18, 0x08	; 8
    2a7c:	92 07       	cpc	r25, r18
    2a7e:	29 f4       	brne	.+10     	; 0x2a8a <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2a80:	61 e0       	ldi	r22, 0x01	; 1
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a88:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2a8a:	81 15       	cp	r24, r1
    2a8c:	29 e0       	ldi	r18, 0x09	; 9
    2a8e:	92 07       	cpc	r25, r18
    2a90:	29 f4       	brne	.+10     	; 0x2a9c <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	84 e0       	ldi	r24, 0x04	; 4
    2a96:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2a9a:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2a9c:	81 15       	cp	r24, r1
    2a9e:	2a e0       	ldi	r18, 0x0A	; 10
    2aa0:	92 07       	cpc	r25, r18
    2aa2:	29 f4       	brne	.+10     	; 0x2aae <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2aa4:	61 e0       	ldi	r22, 0x01	; 1
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2aac:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2aae:	81 15       	cp	r24, r1
    2ab0:	2b e0       	ldi	r18, 0x0B	; 11
    2ab2:	92 07       	cpc	r25, r18
    2ab4:	29 f4       	brne	.+10     	; 0x2ac0 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2ab6:	61 e0       	ldi	r22, 0x01	; 1
    2ab8:	86 e0       	ldi	r24, 0x06	; 6
    2aba:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2abe:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2ac0:	80 34       	cpi	r24, 0x40	; 64
    2ac2:	28 e0       	ldi	r18, 0x08	; 8
    2ac4:	92 07       	cpc	r25, r18
    2ac6:	29 f4       	brne	.+10     	; 0x2ad2 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2ac8:	62 e0       	ldi	r22, 0x02	; 2
    2aca:	83 e0       	ldi	r24, 0x03	; 3
    2acc:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2ad0:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2ad2:	80 34       	cpi	r24, 0x40	; 64
    2ad4:	29 e0       	ldi	r18, 0x09	; 9
    2ad6:	92 07       	cpc	r25, r18
    2ad8:	29 f4       	brne	.+10     	; 0x2ae4 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2ada:	62 e0       	ldi	r22, 0x02	; 2
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2ae2:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2ae4:	80 34       	cpi	r24, 0x40	; 64
    2ae6:	2a e0       	ldi	r18, 0x0A	; 10
    2ae8:	92 07       	cpc	r25, r18
    2aea:	29 f4       	brne	.+10     	; 0x2af6 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2aec:	62 e0       	ldi	r22, 0x02	; 2
    2aee:	85 e0       	ldi	r24, 0x05	; 5
    2af0:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2af4:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2af6:	80 34       	cpi	r24, 0x40	; 64
    2af8:	2b e0       	ldi	r18, 0x0B	; 11
    2afa:	92 07       	cpc	r25, r18
    2afc:	29 f4       	brne	.+10     	; 0x2b08 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2afe:	62 e0       	ldi	r22, 0x02	; 2
    2b00:	86 e0       	ldi	r24, 0x06	; 6
    2b02:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b06:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2b08:	80 39       	cpi	r24, 0x90	; 144
    2b0a:	28 e0       	ldi	r18, 0x08	; 8
    2b0c:	92 07       	cpc	r25, r18
    2b0e:	29 f4       	brne	.+10     	; 0x2b1a <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2b10:	64 e0       	ldi	r22, 0x04	; 4
    2b12:	83 e0       	ldi	r24, 0x03	; 3
    2b14:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b18:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2b1a:	80 39       	cpi	r24, 0x90	; 144
    2b1c:	29 e0       	ldi	r18, 0x09	; 9
    2b1e:	92 07       	cpc	r25, r18
    2b20:	29 f4       	brne	.+10     	; 0x2b2c <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2b22:	64 e0       	ldi	r22, 0x04	; 4
    2b24:	84 e0       	ldi	r24, 0x04	; 4
    2b26:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b2a:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2b2c:	80 39       	cpi	r24, 0x90	; 144
    2b2e:	2a e0       	ldi	r18, 0x0A	; 10
    2b30:	92 07       	cpc	r25, r18
    2b32:	29 f4       	brne	.+10     	; 0x2b3e <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2b34:	64 e0       	ldi	r22, 0x04	; 4
    2b36:	85 e0       	ldi	r24, 0x05	; 5
    2b38:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b3c:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2b3e:	80 39       	cpi	r24, 0x90	; 144
    2b40:	2b e0       	ldi	r18, 0x0B	; 11
    2b42:	92 07       	cpc	r25, r18
    2b44:	29 f4       	brne	.+10     	; 0x2b50 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2b46:	64 e0       	ldi	r22, 0x04	; 4
    2b48:	86 e0       	ldi	r24, 0x06	; 6
    2b4a:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b4e:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2b50:	80 3c       	cpi	r24, 0xC0	; 192
    2b52:	28 e0       	ldi	r18, 0x08	; 8
    2b54:	92 07       	cpc	r25, r18
    2b56:	29 f4       	brne	.+10     	; 0x2b62 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2b58:	68 e0       	ldi	r22, 0x08	; 8
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b60:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2b62:	80 3c       	cpi	r24, 0xC0	; 192
    2b64:	29 e0       	ldi	r18, 0x09	; 9
    2b66:	92 07       	cpc	r25, r18
    2b68:	29 f4       	brne	.+10     	; 0x2b74 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2b6a:	68 e0       	ldi	r22, 0x08	; 8
    2b6c:	84 e0       	ldi	r24, 0x04	; 4
    2b6e:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b72:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2b74:	80 3c       	cpi	r24, 0xC0	; 192
    2b76:	2a e0       	ldi	r18, 0x0A	; 10
    2b78:	92 07       	cpc	r25, r18
    2b7a:	29 f4       	brne	.+10     	; 0x2b86 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2b7c:	68 e0       	ldi	r22, 0x08	; 8
    2b7e:	85 e0       	ldi	r24, 0x05	; 5
    2b80:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b84:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2b86:	80 3c       	cpi	r24, 0xC0	; 192
    2b88:	2b e0       	ldi	r18, 0x0B	; 11
    2b8a:	92 07       	cpc	r25, r18
    2b8c:	29 f4       	brne	.+10     	; 0x2b98 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2b8e:	68 e0       	ldi	r22, 0x08	; 8
    2b90:	86 e0       	ldi	r24, 0x06	; 6
    2b92:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2b96:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2b98:	80 3a       	cpi	r24, 0xA0	; 160
    2b9a:	28 e0       	ldi	r18, 0x08	; 8
    2b9c:	92 07       	cpc	r25, r18
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2ba0:	60 e1       	ldi	r22, 0x10	; 16
    2ba2:	83 e0       	ldi	r24, 0x03	; 3
    2ba4:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2ba8:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2baa:	80 3a       	cpi	r24, 0xA0	; 160
    2bac:	29 e0       	ldi	r18, 0x09	; 9
    2bae:	92 07       	cpc	r25, r18
    2bb0:	29 f4       	brne	.+10     	; 0x2bbc <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2bb2:	60 e1       	ldi	r22, 0x10	; 16
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2bba:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2bbc:	80 3a       	cpi	r24, 0xA0	; 160
    2bbe:	2a e0       	ldi	r18, 0x0A	; 10
    2bc0:	92 07       	cpc	r25, r18
    2bc2:	29 f4       	brne	.+10     	; 0x2bce <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2bc4:	60 e1       	ldi	r22, 0x10	; 16
    2bc6:	85 e0       	ldi	r24, 0x05	; 5
    2bc8:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2bcc:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2bce:	80 3a       	cpi	r24, 0xA0	; 160
    2bd0:	2b e0       	ldi	r18, 0x0B	; 11
    2bd2:	92 07       	cpc	r25, r18
    2bd4:	29 f4       	brne	.+10     	; 0x2be0 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2bd6:	60 e1       	ldi	r22, 0x10	; 16
    2bd8:	86 e0       	ldi	r24, 0x06	; 6
    2bda:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2bde:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2be0:	80 3b       	cpi	r24, 0xB0	; 176
    2be2:	28 e0       	ldi	r18, 0x08	; 8
    2be4:	92 07       	cpc	r25, r18
    2be6:	29 f4       	brne	.+10     	; 0x2bf2 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2be8:	60 e2       	ldi	r22, 0x20	; 32
    2bea:	83 e0       	ldi	r24, 0x03	; 3
    2bec:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2bf0:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2bf2:	80 3b       	cpi	r24, 0xB0	; 176
    2bf4:	29 e0       	ldi	r18, 0x09	; 9
    2bf6:	92 07       	cpc	r25, r18
    2bf8:	29 f4       	brne	.+10     	; 0x2c04 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2bfa:	60 e2       	ldi	r22, 0x20	; 32
    2bfc:	84 e0       	ldi	r24, 0x04	; 4
    2bfe:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c02:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2c04:	80 3b       	cpi	r24, 0xB0	; 176
    2c06:	2a e0       	ldi	r18, 0x0A	; 10
    2c08:	92 07       	cpc	r25, r18
    2c0a:	29 f4       	brne	.+10     	; 0x2c16 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2c0c:	60 e2       	ldi	r22, 0x20	; 32
    2c0e:	85 e0       	ldi	r24, 0x05	; 5
    2c10:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c14:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2c16:	80 3b       	cpi	r24, 0xB0	; 176
    2c18:	2b e0       	ldi	r18, 0x0B	; 11
    2c1a:	92 07       	cpc	r25, r18
    2c1c:	29 f4       	brne	.+10     	; 0x2c28 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2c1e:	60 e2       	ldi	r22, 0x20	; 32
    2c20:	86 e0       	ldi	r24, 0x06	; 6
    2c22:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c26:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2c28:	80 38       	cpi	r24, 0x80	; 128
    2c2a:	24 e0       	ldi	r18, 0x04	; 4
    2c2c:	92 07       	cpc	r25, r18
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2c30:	60 e4       	ldi	r22, 0x40	; 64
    2c32:	83 e0       	ldi	r24, 0x03	; 3
    2c34:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c38:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2c3a:	80 39       	cpi	r24, 0x90	; 144
    2c3c:	24 e0       	ldi	r18, 0x04	; 4
    2c3e:	92 07       	cpc	r25, r18
    2c40:	29 f4       	brne	.+10     	; 0x2c4c <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2c42:	60 e4       	ldi	r22, 0x40	; 64
    2c44:	84 e0       	ldi	r24, 0x04	; 4
    2c46:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c4a:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2c4c:	80 3a       	cpi	r24, 0xA0	; 160
    2c4e:	24 e0       	ldi	r18, 0x04	; 4
    2c50:	92 07       	cpc	r25, r18
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2c54:	60 e4       	ldi	r22, 0x40	; 64
    2c56:	85 e0       	ldi	r24, 0x05	; 5
    2c58:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c5c:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2c5e:	80 3b       	cpi	r24, 0xB0	; 176
    2c60:	94 40       	sbci	r25, 0x04	; 4
    2c62:	21 f4       	brne	.+8      	; 0x2c6c <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2c64:	60 e4       	ldi	r22, 0x40	; 64
    2c66:	86 e0       	ldi	r24, 0x06	; 6
    2c68:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
    2c6c:	08 95       	ret

00002c6e <_Z12IO_ReadWritebh>:

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
    2c6e:	28 2f       	mov	r18, r24
	switch(io_port)
    2c70:	86 2f       	mov	r24, r22
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	fc 01       	movw	r30, r24
    2c76:	31 97       	sbiw	r30, 0x01	; 1
    2c78:	ec 30       	cpi	r30, 0x0C	; 12
    2c7a:	f1 05       	cpc	r31, r1
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <_Z12IO_ReadWritebh+0x12>
    2c7e:	b6 c0       	rjmp	.+364    	; 0x2dec <_Z12IO_ReadWritebh+0x17e>
    2c80:	88 27       	eor	r24, r24
    2c82:	e6 5f       	subi	r30, 0xF6	; 246
    2c84:	fe 4f       	sbci	r31, 0xFE	; 254
    2c86:	8f 4f       	sbci	r24, 0xFF	; 255
    2c88:	0c 94 c7 30 	jmp	0x618e	; 0x618e <__tablejump2__>
	{
		case 1:
		if (value == true)
    2c8c:	22 23       	and	r18, r18
    2c8e:	21 f0       	breq	.+8      	; 0x2c98 <_Z12IO_ReadWritebh+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    2c90:	80 e8       	ldi	r24, 0x80	; 128
    2c92:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2c96:	03 c0       	rjmp	.+6      	; 0x2c9e <_Z12IO_ReadWritebh+0x30>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
    2c98:	80 e8       	ldi	r24, 0x80	; 128
    2c9a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    2c9e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2ca2:	88 1f       	adc	r24, r24
    2ca4:	88 27       	eor	r24, r24
    2ca6:	88 1f       	adc	r24, r24
    2ca8:	08 95       	ret
		break;
		
		case 2:
		if (value == true)
    2caa:	22 23       	and	r18, r18
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <_Z12IO_ReadWritebh+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    2cae:	80 e4       	ldi	r24, 0x40	; 64
    2cb0:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <_Z12IO_ReadWritebh+0x4e>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
    2cb6:	80 e4       	ldi	r24, 0x40	; 64
    2cb8:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    2cbc:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2cc0:	86 fb       	bst	r24, 6
    2cc2:	88 27       	eor	r24, r24
    2cc4:	80 f9       	bld	r24, 0
    2cc6:	08 95       	ret
		break;
		
		case 3:
		if (value == true)
    2cc8:	22 23       	and	r18, r18
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <_Z12IO_ReadWritebh+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    2ccc:	80 e2       	ldi	r24, 0x20	; 32
    2cce:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <_Z12IO_ReadWritebh+0x6c>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
    2cd4:	80 e2       	ldi	r24, 0x20	; 32
    2cd6:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    2cda:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2cde:	85 fb       	bst	r24, 5
    2ce0:	88 27       	eor	r24, r24
    2ce2:	80 f9       	bld	r24, 0
    2ce4:	08 95       	ret
		break;
		
		case 4: //Lift limit switches
		if (value == true)
    2ce6:	22 23       	and	r18, r18
    2ce8:	21 f0       	breq	.+8      	; 0x2cf2 <_Z12IO_ReadWritebh+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    2cea:	80 e1       	ldi	r24, 0x10	; 16
    2cec:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <_Z12IO_ReadWritebh+0x8a>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
    2cf2:	80 e1       	ldi	r24, 0x10	; 16
    2cf4:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    2cf8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2cfc:	82 95       	swap	r24
    2cfe:	81 70       	andi	r24, 0x01	; 1
    2d00:	08 95       	ret
		break;
		
		case 5:
		if (value == true)
    2d02:	22 23       	and	r18, r18
    2d04:	21 f0       	breq	.+8      	; 0x2d0e <_Z12IO_ReadWritebh+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    2d06:	88 e0       	ldi	r24, 0x08	; 8
    2d08:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d0c:	03 c0       	rjmp	.+6      	; 0x2d14 <_Z12IO_ReadWritebh+0xa6>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
    2d0e:	88 e0       	ldi	r24, 0x08	; 8
    2d10:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    2d14:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d18:	83 fb       	bst	r24, 3
    2d1a:	88 27       	eor	r24, r24
    2d1c:	80 f9       	bld	r24, 0
    2d1e:	08 95       	ret
		break;
		
		case 6:
		if (value == true)
    2d20:	22 23       	and	r18, r18
    2d22:	21 f0       	breq	.+8      	; 0x2d2c <_Z12IO_ReadWritebh+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    2d24:	84 e0       	ldi	r24, 0x04	; 4
    2d26:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <_Z12IO_ReadWritebh+0xc4>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
    2d2c:	84 e0       	ldi	r24, 0x04	; 4
    2d2e:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    2d32:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d36:	82 fb       	bst	r24, 2
    2d38:	88 27       	eor	r24, r24
    2d3a:	80 f9       	bld	r24, 0
    2d3c:	08 95       	ret
		break;
		
		case 7:
		if (value == true)
    2d3e:	22 23       	and	r18, r18
    2d40:	21 f0       	breq	.+8      	; 0x2d4a <_Z12IO_ReadWritebh+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d48:	03 c0       	rjmp	.+6      	; 0x2d50 <_Z12IO_ReadWritebh+0xe2>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    2d50:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d54:	86 95       	lsr	r24
    2d56:	81 70       	andi	r24, 0x01	; 1
    2d58:	08 95       	ret
		break;
		
		case 8:
		if (value == true)
    2d5a:	22 23       	and	r18, r18
    2d5c:	21 f0       	breq	.+8      	; 0x2d66 <_Z12IO_ReadWritebh+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2d64:	03 c0       	rjmp	.+6      	; 0x2d6c <_Z12IO_ReadWritebh+0xfe>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    2d6c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2d70:	81 70       	andi	r24, 0x01	; 1
    2d72:	08 95       	ret
		break;
		
		case 9:
		if (value == true)
    2d74:	22 23       	and	r18, r18
    2d76:	21 f0       	breq	.+8      	; 0x2d80 <_Z12IO_ReadWritebh+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    2d78:	80 e8       	ldi	r24, 0x80	; 128
    2d7a:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2d7e:	03 c0       	rjmp	.+6      	; 0x2d86 <_Z12IO_ReadWritebh+0x118>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
    2d80:	80 e8       	ldi	r24, 0x80	; 128
    2d82:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    2d86:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2d8a:	88 1f       	adc	r24, r24
    2d8c:	88 27       	eor	r24, r24
    2d8e:	88 1f       	adc	r24, r24
    2d90:	08 95       	ret
		break;
		
		case 10:
		if (value == true)
    2d92:	22 23       	and	r18, r18
    2d94:	21 f0       	breq	.+8      	; 0x2d9e <_Z12IO_ReadWritebh+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    2d96:	80 e4       	ldi	r24, 0x40	; 64
    2d98:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2d9c:	03 c0       	rjmp	.+6      	; 0x2da4 <_Z12IO_ReadWritebh+0x136>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
    2d9e:	80 e4       	ldi	r24, 0x40	; 64
    2da0:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    2da4:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2da8:	86 fb       	bst	r24, 6
    2daa:	88 27       	eor	r24, r24
    2dac:	80 f9       	bld	r24, 0
    2dae:	08 95       	ret
		break;
		
		case 11:
		if (value == true)
    2db0:	22 23       	and	r18, r18
    2db2:	21 f0       	breq	.+8      	; 0x2dbc <_Z12IO_ReadWritebh+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    2db4:	80 e8       	ldi	r24, 0x80	; 128
    2db6:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2dba:	03 c0       	rjmp	.+6      	; 0x2dc2 <_Z12IO_ReadWritebh+0x154>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
    2dbc:	80 e8       	ldi	r24, 0x80	; 128
    2dbe:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    2dc2:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2dc6:	88 1f       	adc	r24, r24
    2dc8:	88 27       	eor	r24, r24
    2dca:	88 1f       	adc	r24, r24
    2dcc:	08 95       	ret
		break;
		
		case 12:
		if (value == true)
    2dce:	22 23       	and	r18, r18
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <_Z12IO_ReadWritebh+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    2dd2:	80 e4       	ldi	r24, 0x40	; 64
    2dd4:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <_Z12IO_ReadWritebh+0x172>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
    2dda:	80 e4       	ldi	r24, 0x40	; 64
    2ddc:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    2de0:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2de4:	86 fb       	bst	r24, 6
    2de6:	88 27       	eor	r24, r24
    2de8:	80 f9       	bld	r24, 0
    2dea:	08 95       	ret
		break;
		
	}
	return 0;
    2dec:	80 e0       	ldi	r24, 0x00	; 0
}
    2dee:	08 95       	ret

00002df0 <_Z11DigitalReadi>:
void ToggleLED();
void LED(bool i);
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
    2df0:	68 2f       	mov	r22, r24
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <_Z12IO_ReadWritebh>
    2df8:	08 95       	ret

00002dfa <_Z17ReadSignatureBytej>:

uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin);

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    2dfa:	aa ec       	ldi	r26, 0xCA	; 202
    2dfc:	b1 e0       	ldi	r27, 0x01	; 1
    2dfe:	22 e0       	ldi	r18, 0x02	; 2
    2e00:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    2e02:	fc 01       	movw	r30, r24
    2e04:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2e06:	1c 92       	st	X, r1
	return Result;
}
    2e08:	08 95       	ret

00002e0a <_Z12I_AnalogReadR13ADC_CH_structh>:
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
	}
}

uint8_t I_AnalogRead(ADC_CH_struct &CH, uint8_t pin) {
    2e0a:	fc 01       	movw	r30, r24
	switch(pin)
    2e0c:	63 30       	cpi	r22, 0x03	; 3
    2e0e:	89 f0       	breq	.+34     	; 0x2e32 <_Z12I_AnalogReadR13ADC_CH_structh+0x28>
    2e10:	28 f4       	brcc	.+10     	; 0x2e1c <_Z12I_AnalogReadR13ADC_CH_structh+0x12>
    2e12:	61 30       	cpi	r22, 0x01	; 1
    2e14:	41 f0       	breq	.+16     	; 0x2e26 <_Z12I_AnalogReadR13ADC_CH_structh+0x1c>
    2e16:	62 30       	cpi	r22, 0x02	; 2
    2e18:	49 f0       	breq	.+18     	; 0x2e2c <_Z12I_AnalogReadR13ADC_CH_structh+0x22>
    2e1a:	1d c0       	rjmp	.+58     	; 0x2e56 <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
    2e1c:	64 30       	cpi	r22, 0x04	; 4
    2e1e:	61 f0       	breq	.+24     	; 0x2e38 <_Z12I_AnalogReadR13ADC_CH_structh+0x2e>
    2e20:	65 30       	cpi	r22, 0x05	; 5
    2e22:	69 f0       	breq	.+26     	; 0x2e3e <_Z12I_AnalogReadR13ADC_CH_structh+0x34>
    2e24:	18 c0       	rjmp	.+48     	; 0x2e56 <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
	{
		//ADC_CH_MUXPOS_PIN0_gc is AREF pin (op 5v), pin lezen returned altijd >252
		case 1:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc; //select pin
    2e26:	88 e0       	ldi	r24, 0x08	; 8
    2e28:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e2a:	0b c0       	rjmp	.+22     	; 0x2e42 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 2:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc; //select pin
    2e2c:	80 e1       	ldi	r24, 0x10	; 16
    2e2e:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e30:	08 c0       	rjmp	.+16     	; 0x2e42 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 3:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc; //select pin
    2e32:	88 e1       	ldi	r24, 0x18	; 24
    2e34:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e36:	05 c0       	rjmp	.+10     	; 0x2e42 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 4:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc; //select pin
    2e38:	80 e2       	ldi	r24, 0x20	; 32
    2e3a:	81 83       	std	Z+1, r24	; 0x01
		break;
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
    2e3e:	88 e2       	ldi	r24, 0x28	; 40
    2e40:	81 83       	std	Z+1, r24	; 0x01
		default:
		return 0;
		break;
	}
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
    2e42:	80 81       	ld	r24, Z
    2e44:	80 68       	ori	r24, 0x80	; 128
    2e46:	80 83       	st	Z, r24
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	90 ff       	sbrs	r25, 0
    2e4c:	fd cf       	rjmp	.-6      	; 0x2e48 <_Z12I_AnalogReadR13ADC_CH_structh+0x3e>
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	83 83       	std	Z+3, r24	; 0x03
	return CH.RESL; //return lower byte result from channel (8 bit result)
    2e52:	84 81       	ldd	r24, Z+4	; 0x04
    2e54:	08 95       	ret
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
		break;
		
		default:
		return 0;
    2e56:	80 e0       	ldi	r24, 0x00	; 0
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
	return CH.RESL; //return lower byte result from channel (8 bit result)
}
    2e58:	08 95       	ret

00002e5a <_Z12I_AnalogReadR10ADC_structh>:

//defaults to ch0
uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin) {
	return I_AnalogRead(ADC.CH0, pin);
    2e5a:	80 96       	adiw	r24, 0x20	; 32
    2e5c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z12I_AnalogReadR13ADC_CH_structh>
}
    2e60:	08 95       	ret

00002e62 <_Z8ADC_InitR10ADC_struct>:
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
	return Result;
}

void ADC_Init(ADC_struct &ADC) {
    2e62:	0f 93       	push	r16
    2e64:	1f 93       	push	r17
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	ec 01       	movw	r28, r24
	/* http://ww1.microchip.com/downloads/en/DeviceDoc/doc8077.pdf page 296 */

	//calibration data from signature row
	if (&ADC == &ADCA) {
    2e6c:	c1 15       	cp	r28, r1
    2e6e:	82 e0       	ldi	r24, 0x02	; 2
    2e70:	d8 07       	cpc	r29, r24
    2e72:	79 f4       	brne	.+30     	; 0x2e92 <_Z8ADC_InitR10ADC_struct+0x30>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCACAL0); //effect onbekend maar staat in datasheet
    2e74:	80 b5       	in	r24, 0x20	; 32
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z17ReadSignatureBytej>
    2e7c:	00 e0       	ldi	r16, 0x00	; 0
    2e7e:	12 e0       	ldi	r17, 0x02	; 2
    2e80:	f8 01       	movw	r30, r16
    2e82:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCACAL1);
    2e84:	81 b5       	in	r24, 0x21	; 33
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z17ReadSignatureBytej>
    2e8c:	f8 01       	movw	r30, r16
    2e8e:	85 87       	std	Z+13, r24	; 0x0d
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <_Z8ADC_InitR10ADC_struct+0x58>
	} else if (&ADC == &ADCB) {
    2e92:	c0 34       	cpi	r28, 0x40	; 64
    2e94:	f2 e0       	ldi	r31, 0x02	; 2
    2e96:	df 07       	cpc	r29, r31
    2e98:	79 f4       	brne	.+30     	; 0x2eb8 <_Z8ADC_InitR10ADC_struct+0x56>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCBCAL0);
    2e9a:	84 b5       	in	r24, 0x24	; 36
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z17ReadSignatureBytej>
    2ea2:	00 e4       	ldi	r16, 0x40	; 64
    2ea4:	12 e0       	ldi	r17, 0x02	; 2
    2ea6:	f8 01       	movw	r30, r16
    2ea8:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCBCAL1);
    2eaa:	85 b5       	in	r24, 0x25	; 37
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_Z17ReadSignatureBytej>
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	85 87       	std	Z+13, r24	; 0x0d
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <_Z8ADC_InitR10ADC_struct+0x58>
    2eb8:	ff cf       	rjmp	.-2      	; 0x2eb8 <_Z8ADC_InitR10ADC_struct+0x56>
		//geef error ofzo
		while(true){}
	}
	
	//cancel any pending conversions, disable ADC
	ADC.CTRLA = ADC_FLUSH_bm;
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	88 83       	st	Y, r24
	
	//external reference on PORT A (voltage dat op AREF pin wordt gezet, het te meten voltage mag hier niet boven komen)
	ADC.REFCTRL = ADC_REFSEL_AREFA_gc;
    2ebe:	80 e2       	ldi	r24, 0x20	; 32
    2ec0:	8a 83       	std	Y+2, r24	; 0x02
	
	//8-bit right-adjusted result
	ADC.CTRLB = (ADC_RESOLUTION_8BIT_gc | (1<<ADC_CONMODE_bm));
    2ec2:	84 e0       	ldi	r24, 0x04	; 4
    2ec4:	89 83       	std	Y+1, r24	; 0x01
	
	//prescaler 128						// !willekeurig gekozen
	ADC.PRESCALER = ADC_PRESCALER_DIV64_gc;
    2ec6:	8c 83       	std	Y+4, r24	; 0x04

	//enable ADC
	ADC.CTRLA |= ADC_ENABLE_bm;
    2ec8:	88 81       	ld	r24, Y
    2eca:	81 60       	ori	r24, 0x01	; 1
    2ecc:	88 83       	st	Y, r24
	
	//result at ch0
//	ADC.CTRLA |= (0x0<<2);

	//single ended input no gain
	ADC.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	88 a3       	std	Y+32, r24	; 0x20

	//disable interrupts
	ADCA.CH0.INTCTRL = 0;
    2ed2:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
	
	//2 dummy reads
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
    2ed6:	61 e0       	ldi	r22, 0x01	; 1
    2ed8:	ce 01       	movw	r24, r28
    2eda:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_Z12I_AnalogReadR10ADC_structh>
    2ede:	61 e0       	ldi	r22, 0x01	; 1
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_Z12I_AnalogReadR10ADC_structh>
	}
}
    2ee6:	df 91       	pop	r29
    2ee8:	cf 91       	pop	r28
    2eea:	1f 91       	pop	r17
    2eec:	0f 91       	pop	r16
    2eee:	08 95       	ret

00002ef0 <_Z15ReadSharpSensorh>:
#ifndef SHARPSENSOR_H_
#define SHARPSENSOR_H_

uint8_t ReadSharpSensor(uint8_t sensor)
{
	uint8_t val = I_AnalogRead(ADCA, sensor);
    2ef0:	68 2f       	mov	r22, r24
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	92 e0       	ldi	r25, 0x02	; 2
    2ef6:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_Z12I_AnalogReadR10ADC_structh>
	
	switch(val)
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	fc 01       	movw	r30, r24
    2efe:	fc 97       	sbiw	r30, 0x3c	; 60
    2f00:	e4 3c       	cpi	r30, 0xC4	; 196
    2f02:	f1 05       	cpc	r31, r1
    2f04:	f0 f4       	brcc	.+60     	; 0x2f42 <_Z15ReadSharpSensorh+0x52>
    2f06:	88 27       	eor	r24, r24
    2f08:	ea 5e       	subi	r30, 0xEA	; 234
    2f0a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2f0e:	0c 94 c7 30 	jmp	0x618e	; 0x618e <__tablejump2__>
		case 250 ... 255:
		return 4; //centimeter
		break;
		
		case 245 ... 249:
		return 5; //centimeter
    2f12:	85 e0       	ldi	r24, 0x05	; 5
    2f14:	08 95       	ret
		break;
		
		case 240 ... 244:
		return 7; //centimeter
    2f16:	87 e0       	ldi	r24, 0x07	; 7
    2f18:	08 95       	ret
		break;
		
		case 235 ... 239:
		return 8; //centimeter
    2f1a:	88 e0       	ldi	r24, 0x08	; 8
    2f1c:	08 95       	ret
		break;
		
		case 230 ... 234:
		return 9; //centimeter
    2f1e:	89 e0       	ldi	r24, 0x09	; 9
    2f20:	08 95       	ret
		break;
		
		case 200 ... 229:
		return 10; //centimeter
    2f22:	8a e0       	ldi	r24, 0x0A	; 10
    2f24:	08 95       	ret
		break;
		
		case 190 ... 199:
		return 11; //centimeter
    2f26:	8b e0       	ldi	r24, 0x0B	; 11
    2f28:	08 95       	ret
		break;
		
		case 170 ... 189:
		return 12; //centimeter
    2f2a:	8c e0       	ldi	r24, 0x0C	; 12
    2f2c:	08 95       	ret
		break;
		
		case 155 ... 169:
		return 13; //centimeter
    2f2e:	8d e0       	ldi	r24, 0x0D	; 13
    2f30:	08 95       	ret
		break;
		
		case 140 ... 154:
		return 14; //centimeter
    2f32:	8e e0       	ldi	r24, 0x0E	; 14
    2f34:	08 95       	ret
		break;
		
		case 110 ... 119:
		return 16; //centimeter
    2f36:	80 e1       	ldi	r24, 0x10	; 16
    2f38:	08 95       	ret
		break;
		
		case 80 ... 99:
		return 20; //centimeter
    2f3a:	84 e1       	ldi	r24, 0x14	; 20
    2f3c:	08 95       	ret
		break;
		
		case 60 ... 79:
		return 25; //centimeter
    2f3e:	89 e1       	ldi	r24, 0x19	; 25
    2f40:	08 95       	ret
		break;
		
		default:
		return 30;
    2f42:	8e e1       	ldi	r24, 0x1E	; 30
    2f44:	08 95       	ret
	uint8_t val = I_AnalogRead(ADCA, sensor);
	
	switch(val)
	{
		case 250 ... 255:
		return 4; //centimeter
    2f46:	84 e0       	ldi	r24, 0x04	; 4
		
		default:
		return 30;
		break;
	}
}
    2f48:	08 95       	ret

00002f4a <_Z10AnalogReadi>:
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
    2f4a:	68 2f       	mov	r22, r24
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	92 e0       	ldi	r25, 0x02	; 2
    2f50:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <_Z12I_AnalogReadR10ADC_structh>
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	08 95       	ret

00002f58 <_Z15passthrough_TWIv>:
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit


/* Enter stepper-testing mode. Will exit on Reset */
void passthrough_TWI() {
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	2b 97       	sbiw	r28, 0x0b	; 11
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	de bf       	out	0x3e, r29	; 62
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
    2f66:	60 e8       	ldi	r22, 0x80	; 128
    2f68:	74 e0       	ldi	r23, 0x04	; 4
    2f6a:	80 ed       	ldi	r24, 0xD0	; 208
    2f6c:	94 e1       	ldi	r25, 0x14	; 20
    2f6e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z13TWI_onRequestPFvvER10TWI_struct>
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
    2f72:	0f 2e       	mov	r0, r31
    2f74:	f6 ee       	ldi	r31, 0xE6	; 230
    2f76:	cf 2e       	mov	r12, r31
    2f78:	f6 e0       	ldi	r31, 0x06	; 6
    2f7a:	df 2e       	mov	r13, r31
    2f7c:	f0 2d       	mov	r31, r0
			
			if (buff[0] == 0) { //test steppers
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    2f7e:	0f 2e       	mov	r0, r31
    2f80:	f7 e0       	ldi	r31, 0x07	; 7
    2f82:	9f 2e       	mov	r9, r31
    2f84:	f0 2d       	mov	r31, r0
    2f86:	5e 01       	movw	r10, r28
    2f88:	84 e0       	ldi	r24, 0x04	; 4
    2f8a:	a8 0e       	add	r10, r24
    2f8c:	b1 1c       	adc	r11, r1
    2f8e:	0f 2e       	mov	r0, r31
    2f90:	fc e4       	ldi	r31, 0x4C	; 76
    2f92:	7f 2e       	mov	r7, r31
    2f94:	f0 2d       	mov	r31, r0
    2f96:	0f 2e       	mov	r0, r31
    2f98:	f2 e3       	ldi	r31, 0x32	; 50
    2f9a:	8f 2e       	mov	r8, r31
    2f9c:	f0 2d       	mov	r31, r0
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
				} else if (buff[0] == 1) { //lees analog
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
    2f9e:	0f 2e       	mov	r0, r31
    2fa0:	f5 ee       	ldi	r31, 0xE5	; 229
    2fa2:	ef 2e       	mov	r14, r31
    2fa4:	f6 e0       	ldi	r31, 0x06	; 6
    2fa6:	ff 2e       	mov	r15, r31
    2fa8:	f0 2d       	mov	r31, r0
void passthrough_TWI() {
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
    2faa:	80 e8       	ldi	r24, 0x80	; 128
    2fac:	94 e0       	ldi	r25, 0x04	; 4
    2fae:	0e 94 7d 07 	call	0xefa	; 0xefa <_Z19TWI_RecievedAddressR10TWI_struct>
    2fb2:	88 23       	and	r24, r24
    2fb4:	d1 f3       	breq	.-12     	; 0x2faa <_Z15passthrough_TWIv+0x52>
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
    2fb6:	f6 01       	movw	r30, r12
    2fb8:	80 81       	ld	r24, Z
    2fba:	80 63       	ori	r24, 0x30	; 48
    2fbc:	80 83       	st	Z, r24
			
			TWI_ReceivePacket(TWIC,(uint8_t*)buff, 3);
    2fbe:	43 e0       	ldi	r20, 0x03	; 3
    2fc0:	be 01       	movw	r22, r28
    2fc2:	6f 5f       	subi	r22, 0xFF	; 255
    2fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc6:	80 e8       	ldi	r24, 0x80	; 128
    2fc8:	94 e0       	ldi	r25, 0x04	; 4
    2fca:	0e 94 89 07 	call	0xf12	; 0xf12 <_Z17TWI_ReceivePacketR10TWI_structPhh>
    2fce:	8f e6       	ldi	r24, 0x6F	; 111
    2fd0:	97 e1       	ldi	r25, 0x17	; 23
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <_Z15passthrough_TWIv+0x7a>
    2fd6:	00 c0       	rjmp	.+0      	; 0x2fd8 <_Z15passthrough_TWIv+0x80>
    2fd8:	00 00       	nop
			_delay_ms(1);
			TWIC.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
    2fda:	e0 e8       	ldi	r30, 0x80	; 128
    2fdc:	f4 e0       	ldi	r31, 0x04	; 4
    2fde:	82 85       	ldd	r24, Z+10	; 0x0a
    2fe0:	80 6c       	ori	r24, 0xC0	; 192
    2fe2:	82 87       	std	Z+10, r24	; 0x0a
			
			if (buff[0] == 0) { //test steppers
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	81 11       	cpse	r24, r1
    2fe8:	20 c0       	rjmp	.+64     	; 0x302a <_Z15passthrough_TWIv+0xd2>
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	8b 87       	std	Y+11, r24	; 0x0b
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
    2fee:	00 eb       	ldi	r16, 0xB0	; 176
    2ff0:	1a e0       	ldi	r17, 0x0A	; 10
    2ff2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	be 01       	movw	r22, r28
    2ff8:	65 5f       	subi	r22, 0xF5	; 245
    2ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffc:	8a e4       	ldi	r24, 0x4A	; 74
    2ffe:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    3002:	f5 01       	movw	r30, r10
    3004:	89 2d       	mov	r24, r9
    3006:	11 92       	st	Z+, r1
    3008:	8a 95       	dec	r24
    300a:	e9 f7       	brne	.-6      	; 0x3006 <_Z15passthrough_TWIv+0xae>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	8c 83       	std	Y+4, r24	; 0x04
    3010:	7d 82       	std	Y+5, r7	; 0x05
    3012:	8f 82       	std	Y+7, r8	; 0x07
    3014:	89 87       	std	Y+9, r24	; 0x09
    3016:	8a 87       	std	Y+10, r24	; 0x0a
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	88 87       	std	Y+8, r24	; 0x08
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
    301c:	2a 81       	ldd	r18, Y+2	; 0x02
    301e:	49 2d       	mov	r20, r9
    3020:	b5 01       	movw	r22, r10
    3022:	86 e4       	ldi	r24, 0x46	; 70
    3024:	0e 94 85 12 	call	0x250a	; 0x250a <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    3028:	08 c0       	rjmp	.+16     	; 0x303a <_Z15passthrough_TWIv+0xe2>
				} else if (buff[0] == 1) { //lees analog
    302a:	81 30       	cpi	r24, 0x01	; 1
    302c:	31 f4       	brne	.+12     	; 0x303a <_Z15passthrough_TWIv+0xe2>
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
    302e:	8a 81       	ldd	r24, Y+2	; 0x02
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <_Z10AnalogReadi>
    3036:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <Result>
			}
			
			PORTH_OUTSET |= (1<<4)|(1<<5); //LED off
    303a:	f7 01       	movw	r30, r14
    303c:	80 81       	ld	r24, Z
    303e:	80 63       	ori	r24, 0x30	; 48
    3040:	80 83       	st	Z, r24
    3042:	b3 cf       	rjmp	.-154    	; 0x2faa <_Z15passthrough_TWIv+0x52>

00003044 <_Z16initOptocouplersv>:

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
    3044:	8f e3       	ldi	r24, 0x3F	; 63
    3046:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
    304a:	08 95       	ret

0000304c <_Z17I_OptocouplerReadh>:
/**
 * \brief - Read the level of an optocoupler
 */
bool I_OptocouplerRead(uint8_t io_port)
{
	switch(io_port)
    304c:	82 30       	cpi	r24, 0x02	; 2
    304e:	a9 f0       	breq	.+42     	; 0x307a <_Z17I_OptocouplerReadh+0x2e>
    3050:	28 f4       	brcc	.+10     	; 0x305c <_Z17I_OptocouplerReadh+0x10>
    3052:	88 23       	and	r24, r24
    3054:	49 f0       	breq	.+18     	; 0x3068 <_Z17I_OptocouplerReadh+0x1c>
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	59 f0       	breq	.+22     	; 0x3070 <_Z17I_OptocouplerReadh+0x24>
    305a:	26 c0       	rjmp	.+76     	; 0x30a8 <_Z17I_OptocouplerReadh+0x5c>
    305c:	84 30       	cpi	r24, 0x04	; 4
    305e:	c9 f0       	breq	.+50     	; 0x3092 <_Z17I_OptocouplerReadh+0x46>
    3060:	90 f0       	brcs	.+36     	; 0x3086 <_Z17I_OptocouplerReadh+0x3a>
    3062:	85 30       	cpi	r24, 0x05	; 5
    3064:	d9 f0       	breq	.+54     	; 0x309c <_Z17I_OptocouplerReadh+0x50>
    3066:	20 c0       	rjmp	.+64     	; 0x30a8 <_Z17I_OptocouplerReadh+0x5c>
	{
		case 0: return OPTO_IN & OPTO0;
    3068:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    306c:	81 70       	andi	r24, 0x01	; 1
    306e:	08 95       	ret
		case 1: return OPTO_IN & OPTO1;
    3070:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    3074:	86 95       	lsr	r24
    3076:	81 70       	andi	r24, 0x01	; 1
    3078:	08 95       	ret
		case 2: return OPTO_IN & OPTO2;
    307a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    307e:	82 fb       	bst	r24, 2
    3080:	88 27       	eor	r24, r24
    3082:	80 f9       	bld	r24, 0
    3084:	08 95       	ret
		case 3: return OPTO_IN & OPTO3;
    3086:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    308a:	83 fb       	bst	r24, 3
    308c:	88 27       	eor	r24, r24
    308e:	80 f9       	bld	r24, 0
    3090:	08 95       	ret
		case 4: return OPTO_IN & OPTO4;
    3092:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    3096:	82 95       	swap	r24
    3098:	81 70       	andi	r24, 0x01	; 1
    309a:	08 95       	ret
		case 5: return OPTO_IN & OPTO5;
    309c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    30a0:	85 fb       	bst	r24, 5
    30a2:	88 27       	eor	r24, r24
    30a4:	80 f9       	bld	r24, 0
    30a6:	08 95       	ret
		default: return 0;
    30a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    30aa:	08 95       	ret

000030ac <_Z15OptocouplerReadi>:
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
    30ac:	0e 94 26 18 	call	0x304c	; 0x304c <_Z17I_OptocouplerReadh>
    30b0:	08 95       	ret

000030b2 <__vector_100>:
void requestStarted() { TWI_Write(TWIC, Started); }
void requestResult() { TWI_Write(TWIC, Result); }


/* ISR INT0, gebruikt voor lift interrupts */
ISR(PORTK_INT0_vect) {
    30b2:	1f 92       	push	r1
    30b4:	0f 92       	push	r0
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	0f 92       	push	r0
    30ba:	11 24       	eor	r1, r1
    30bc:	08 b6       	in	r0, 0x38	; 56
    30be:	0f 92       	push	r0
    30c0:	18 be       	out	0x38, r1	; 56
    30c2:	09 b6       	in	r0, 0x39	; 57
    30c4:	0f 92       	push	r0
    30c6:	19 be       	out	0x39, r1	; 57
    30c8:	0a b6       	in	r0, 0x3a	; 58
    30ca:	0f 92       	push	r0
    30cc:	1a be       	out	0x3a, r1	; 58
    30ce:	0b b6       	in	r0, 0x3b	; 59
    30d0:	0f 92       	push	r0
    30d2:	1b be       	out	0x3b, r1	; 59
    30d4:	2f 93       	push	r18
    30d6:	3f 93       	push	r19
    30d8:	4f 93       	push	r20
    30da:	5f 93       	push	r21
    30dc:	6f 93       	push	r22
    30de:	7f 93       	push	r23
    30e0:	8f 93       	push	r24
    30e2:	9f 93       	push	r25
    30e4:	af 93       	push	r26
    30e6:	bf 93       	push	r27
    30e8:	cf 93       	push	r28
    30ea:	df 93       	push	r29
    30ec:	ef 93       	push	r30
    30ee:	ff 93       	push	r31
	//Optional debounce delay, uncomment if ISR is unstable	(delay in ISR not recommended!)
	//_delay_ms(10);	//Switch debounce time
	bool elevatorUpPressed = !(PORTK_IN & EV_SWITCH_PIN_UP); //Pin use pull-ups, invert to give true on pressed
    30f0:	e8 e2       	ldi	r30, 0x28	; 40
    30f2:	f7 e0       	ldi	r31, 0x07	; 7
    30f4:	c0 81       	ld	r28, Z
    30f6:	c0 71       	andi	r28, 0x10	; 16
	bool elevatorDownPressed = !(PORTK_IN & EV_SWITCH_PIN_DOWN);
    30f8:	d0 81       	ld	r29, Z

	DEBUG_OUT("Entered INT0 ISR\r\n");
    30fa:	6b ed       	ldi	r22, 0xDB	; 219
    30fc:	71 e2       	ldi	r23, 0x21	; 33
    30fe:	80 ea       	ldi	r24, 0xA0	; 160
    3100:	99 e0       	ldi	r25, 0x09	; 9
    3102:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>


	if(elevatorDownPressed){
    3106:	d5 fd       	sbrc	r29, 5
    3108:	09 c0       	rjmp	.+18     	; 0x311c <__vector_100+0x6a>
		DEBUG_OUT("Elevator Switch DOWN was pressed\n\r");
    310a:	6e ee       	ldi	r22, 0xEE	; 238
    310c:	71 e2       	ldi	r23, 0x21	; 33
    310e:	80 ea       	ldi	r24, 0xA0	; 160
    3110:	99 e0       	ldi	r25, 0x09	; 9
    3112:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(false); //Run with parameter false to indicate DOWN
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	0e 94 88 0b 	call	0x1710	; 0x1710 <ElevatorButtonInISR>

	}
	if(elevatorUpPressed){
    311c:	c1 11       	cpse	r28, r1
    311e:	09 c0       	rjmp	.+18     	; 0x3132 <__vector_100+0x80>
		DEBUG_OUT("Elevator Switch UP was pressed\n\r");
    3120:	61 e1       	ldi	r22, 0x11	; 17
    3122:	72 e2       	ldi	r23, 0x22	; 34
    3124:	80 ea       	ldi	r24, 0xA0	; 160
    3126:	99 e0       	ldi	r25, 0x09	; 9
    3128:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(true); //Run with parameter true to indicate UP
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 88 0b 	call	0x1710	; 0x1710 <ElevatorButtonInISR>
	/**
	*	ISR - PORTK INT0 checks the Lift Interrupt switches. It gets triggered when either the top or bottom switch is pressed.
	*	The ISR will not detect which of the switches has changed, but can read what switches are pressed by reading PORTK_IN.
	*	Since only one switch should be pressed at a single time, it is not an issue that it does not detect which one has changed.
	*/
}
    3132:	ff 91       	pop	r31
    3134:	ef 91       	pop	r30
    3136:	df 91       	pop	r29
    3138:	cf 91       	pop	r28
    313a:	bf 91       	pop	r27
    313c:	af 91       	pop	r26
    313e:	9f 91       	pop	r25
    3140:	8f 91       	pop	r24
    3142:	7f 91       	pop	r23
    3144:	6f 91       	pop	r22
    3146:	5f 91       	pop	r21
    3148:	4f 91       	pop	r20
    314a:	3f 91       	pop	r19
    314c:	2f 91       	pop	r18
    314e:	0f 90       	pop	r0
    3150:	0b be       	out	0x3b, r0	; 59
    3152:	0f 90       	pop	r0
    3154:	0a be       	out	0x3a, r0	; 58
    3156:	0f 90       	pop	r0
    3158:	09 be       	out	0x39, r0	; 57
    315a:	0f 90       	pop	r0
    315c:	08 be       	out	0x38, r0	; 56
    315e:	0f 90       	pop	r0
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	0f 90       	pop	r0
    3164:	1f 90       	pop	r1
    3166:	18 95       	reti

00003168 <__vector_101>:


///* ISR INT1, gebruikt voor sorterarm interrupts */
ISR(PORTK_INT1_vect) {
    3168:	1f 92       	push	r1
    316a:	0f 92       	push	r0
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	0f 92       	push	r0
    3170:	11 24       	eor	r1, r1
    3172:	08 b6       	in	r0, 0x38	; 56
    3174:	0f 92       	push	r0
    3176:	18 be       	out	0x38, r1	; 56
    3178:	09 b6       	in	r0, 0x39	; 57
    317a:	0f 92       	push	r0
    317c:	19 be       	out	0x39, r1	; 57
    317e:	0a b6       	in	r0, 0x3a	; 58
    3180:	0f 92       	push	r0
    3182:	1a be       	out	0x3a, r1	; 58
    3184:	0b b6       	in	r0, 0x3b	; 59
    3186:	0f 92       	push	r0
    3188:	1b be       	out	0x3b, r1	; 59
    318a:	2f 93       	push	r18
    318c:	3f 93       	push	r19
    318e:	4f 93       	push	r20
    3190:	5f 93       	push	r21
    3192:	6f 93       	push	r22
    3194:	7f 93       	push	r23
    3196:	8f 93       	push	r24
    3198:	9f 93       	push	r25
    319a:	af 93       	push	r26
    319c:	bf 93       	push	r27
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	ef 93       	push	r30
    31a4:	ff 93       	push	r31
	//If instability occurs, uncomment debounce delay (delay in ISR is not recommended)
	//_delay_ms(10); //Debounce delay

	//Read the PORTK register on the SorterArm pins:
	bool leftIsPressed = !(PORTK_IN & sa1.switch_pin_left); //Pin use pull-ups, invert to give true on pressed
    31a6:	e8 e2       	ldi	r30, 0x28	; 40
    31a8:	f7 e0       	ldi	r31, 0x07	; 7
    31aa:	d0 81       	ld	r29, Z
	bool rightIsPressed = !(PORTK_IN & sa1.switch_pin_right);
    31ac:	c0 81       	ld	r28, Z
    31ae:	c0 78       	andi	r28, 0x80	; 128

	DEBUG_OUT("Entered INT1 ISR\r\n");
    31b0:	62 e3       	ldi	r22, 0x32	; 50
    31b2:	72 e2       	ldi	r23, 0x22	; 34
    31b4:	80 ea       	ldi	r24, 0xA0	; 160
    31b6:	99 e0       	ldi	r25, 0x09	; 9
    31b8:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	if(leftIsPressed){
    31bc:	d6 fd       	sbrc	r29, 6
    31be:	06 c0       	rjmp	.+12     	; 0x31cc <__vector_101+0x64>
	 DEBUG_OUT("SorterArm switch LEFT was pressed\n\r");
    31c0:	65 e4       	ldi	r22, 0x45	; 69
    31c2:	72 e2       	ldi	r23, 0x22	; 34
    31c4:	80 ea       	ldi	r24, 0xA0	; 160
    31c6:	99 e0       	ldi	r25, 0x09	; 9
    31c8:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	 //TODO sorterarm ISR implementation
	}
	if(rightIsPressed){
    31cc:	c1 11       	cpse	r28, r1
    31ce:	06 c0       	rjmp	.+12     	; 0x31dc <__vector_101+0x74>
	 DEBUG_OUT("SorterArm switch RIGHT was pressed\n\r");
    31d0:	69 e6       	ldi	r22, 0x69	; 105
    31d2:	72 e2       	ldi	r23, 0x22	; 34
    31d4:	80 ea       	ldi	r24, 0xA0	; 160
    31d6:	99 e0       	ldi	r25, 0x09	; 9
    31d8:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>

	//Currently checks the PORTK register for which pin is pressed down
	//The sorterArm should theoretically only be able to press one switch at a time
	//If necessary, code could be added for checking which switch changed state.
	
}
    31dc:	ff 91       	pop	r31
    31de:	ef 91       	pop	r30
    31e0:	df 91       	pop	r29
    31e2:	cf 91       	pop	r28
    31e4:	bf 91       	pop	r27
    31e6:	af 91       	pop	r26
    31e8:	9f 91       	pop	r25
    31ea:	8f 91       	pop	r24
    31ec:	7f 91       	pop	r23
    31ee:	6f 91       	pop	r22
    31f0:	5f 91       	pop	r21
    31f2:	4f 91       	pop	r20
    31f4:	3f 91       	pop	r19
    31f6:	2f 91       	pop	r18
    31f8:	0f 90       	pop	r0
    31fa:	0b be       	out	0x3b, r0	; 59
    31fc:	0f 90       	pop	r0
    31fe:	0a be       	out	0x3a, r0	; 58
    3200:	0f 90       	pop	r0
    3202:	09 be       	out	0x39, r0	; 57
    3204:	0f 90       	pop	r0
    3206:	08 be       	out	0x38, r0	; 56
    3208:	0f 90       	pop	r0
    320a:	0f be       	out	0x3f, r0	; 63
    320c:	0f 90       	pop	r0
    320e:	1f 90       	pop	r1
    3210:	18 95       	reti

00003212 <_Z8initLEDsv>:
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
	}
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
    3212:	80 e3       	ldi	r24, 0x30	; 48
    3214:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
    3218:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    321c:	08 95       	ret

0000321e <main>:
	
}


int main(void)
{
    321e:	cf 92       	push	r12
    3220:	df 92       	push	r13
    3222:	ef 92       	push	r14
    3224:	ff 92       	push	r15
    3226:	0f 93       	push	r16
    3228:	1f 93       	push	r17
    322a:	cf 93       	push	r28
    322c:	df 93       	push	r29
	// Setup/init
	irq_initialize_vectors();
    322e:	87 e0       	ldi	r24, 0x07	; 7
    3230:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    3234:	78 94       	sei
	sysclk_init();
    3236:	0e 94 8b 2b 	call	0x5716	; 0x5716 <sysclk_init>
	udc_start();
    323a:	0e 94 0f 20 	call	0x401e	; 0x401e <udc_start>
	
	//Set up peripherals
	sysclk_enable_peripheral_clock(&TWIC);		//TWI/I2C line for interfacing with ESP32
    323e:	80 e8       	ldi	r24, 0x80	; 128
    3240:	94 e0       	ldi	r25, 0x04	; 4
    3242:	0e 94 d7 14 	call	0x29ae	; 0x29ae <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD0);	//USB line for debugging
    3246:	80 ea       	ldi	r24, 0xA0	; 160
    3248:	99 e0       	ldi	r25, 0x09	; 9
    324a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTE1);	//RS485
    324e:	80 eb       	ldi	r24, 0xB0	; 176
    3250:	9a e0       	ldi	r25, 0x0A	; 10
    3252:	0e 94 d7 14 	call	0x29ae	; 0x29ae <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA);		//ADC for reading sensors
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	92 e0       	ldi	r25, 0x02	; 2
    325a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <sysclk_enable_peripheral_clock>
	
	TWI_init(TWIC);
    325e:	80 e8       	ldi	r24, 0x80	; 128
    3260:	94 e0       	ldi	r25, 0x04	; 4
    3262:	0e 94 73 07 	call	0xee6	; 0xee6 <_Z8TWI_initR10TWI_struct>
	TWI_onRequest(requestStarted, TWIC);
    3266:	60 e8       	ldi	r22, 0x80	; 128
    3268:	74 e0       	ldi	r23, 0x04	; 4
    326a:	89 ec       	ldi	r24, 0xC9	; 201
    326c:	94 e1       	ldi	r25, 0x14	; 20
    326e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_Z13TWI_onRequestPFvvER10TWI_struct>

	// Init board
	board_init();
    3272:	0e 94 2e 30 	call	0x605c	; 0x605c <board_init>
	initLEDs();
    3276:	0e 94 09 19 	call	0x3212	; 0x3212 <_Z8initLEDsv>

	//Init UART for Debug interface and RS485 drivers
	USART_Init(USARTD0, 115200, 24000000, false);	// RX/TX out
    327a:	e1 2c       	mov	r14, r1
    327c:	00 e0       	ldi	r16, 0x00	; 0
    327e:	16 e3       	ldi	r17, 0x36	; 54
    3280:	2e e6       	ldi	r18, 0x6E	; 110
    3282:	31 e0       	ldi	r19, 0x01	; 1
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	52 ec       	ldi	r21, 0xC2	; 194
    3288:	61 e0       	ldi	r22, 0x01	; 1
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	80 ea       	ldi	r24, 0xA0	; 160
    328e:	99 e0       	ldi	r25, 0x09	; 9
    3290:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTE1,37100,24000000,false);	// RS485 1
    3294:	00 e0       	ldi	r16, 0x00	; 0
    3296:	16 e3       	ldi	r17, 0x36	; 54
    3298:	2e e6       	ldi	r18, 0x6E	; 110
    329a:	31 e0       	ldi	r19, 0x01	; 1
    329c:	4c ee       	ldi	r20, 0xEC	; 236
    329e:	50 e9       	ldi	r21, 0x90	; 144
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	80 eb       	ldi	r24, 0xB0	; 176
    32a6:	9a e0       	ldi	r25, 0x0A	; 10
    32a8:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTF0,37100,24000000,false);	// RS485 2
    32ac:	00 e0       	ldi	r16, 0x00	; 0
    32ae:	16 e3       	ldi	r17, 0x36	; 54
    32b0:	2e e6       	ldi	r18, 0x6E	; 110
    32b2:	31 e0       	ldi	r19, 0x01	; 1
    32b4:	4c ee       	ldi	r20, 0xEC	; 236
    32b6:	50 e9       	ldi	r21, 0x90	; 144
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	80 ea       	ldi	r24, 0xA0	; 160
    32be:	9b e0       	ldi	r25, 0x0B	; 11
    32c0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_Z10USART_InitR12USART_structmmb>
	
	PORTE_OUTSET = 0b00110000;
    32c4:	80 e3       	ldi	r24, 0x30	; 48
    32c6:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	
	ADC_Init(ADCA);
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	92 e0       	ldi	r25, 0x02	; 2
    32ce:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_Z8ADC_InitR10ADC_struct>
    32d2:	c1 e0       	ldi	r28, 0x01	; 1
    32d4:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
    32d6:	ce 01       	movw	r24, r28
    32d8:	0e 94 4c 13 	call	0x2698	; 0x2698 <_Z8StopBeltj>
    32dc:	21 96       	adiw	r28, 0x01	; 1
	PORTE_OUTSET = 0b00110000;
	
	ADC_Init(ADCA);
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
    32de:	cc 30       	cpi	r28, 0x0C	; 12
    32e0:	d1 05       	cpc	r29, r1
    32e2:	c9 f7       	brne	.-14     	; 0x32d6 <main+0xb8>
    32e4:	c1 e0       	ldi	r28, 0x01	; 1
    32e6:	d0 e0       	ldi	r29, 0x00	; 0
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
		StopTurntable(i);
    32e8:	ce 01       	movw	r24, r28
    32ea:	0e 94 c4 13 	call	0x2788	; 0x2788 <_Z13StopTurntablej>
    32ee:	21 96       	adiw	r28, 0x01	; 1
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
    32f0:	cc 30       	cpi	r28, 0x0C	; 12
    32f2:	d1 05       	cpc	r29, r1
    32f4:	c9 f7       	brne	.-14     	; 0x32e8 <main+0xca>
		StopTurntable(i);
	}
	StopSorterArm();
    32f6:	0e 94 1a 10 	call	0x2034	; 0x2034 <StopSorterArm>
	StopElevator();
    32fa:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <StopElevator>
	
	// sysclk_enable_peripheral_clock(&TCC1); //zie SorterArm.cpp, TODO weghalen als stepperdrivers uitgelezen kunnen worden
	
	sei(); //global interrupt enable
    32fe:	78 94       	sei
	ElevatorInit();
    3300:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ElevatorInit>

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
    3304:	8f e3       	ldi	r24, 0x3F	; 63
    3306:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
	//ElevatorInterruptSetup();
	//SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
	//SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right);


	USB_TransmitString("TEST\n"); // Test serial working
    330a:	8e e8       	ldi	r24, 0x8E	; 142
    330c:	92 e2       	ldi	r25, 0x22	; 34
    330e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>

	
	/* Insert application code here, after the board has been initialized. */
	
	
	USART_TransmitString(USARTD0, "\n\r------------------------------------------------------------\n\rReset\n\n\r");
    3312:	64 e9       	ldi	r22, 0x94	; 148
    3314:	72 e2       	ldi	r23, 0x22	; 34
    3316:	80 ea       	ldi	r24, 0xA0	; 160
    3318:	99 e0       	ldi	r25, 0x09	; 9
    331a:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
    331e:	84 e9       	ldi	r24, 0x94	; 148
    3320:	92 e2       	ldi	r25, 0x22	; 34
    3322:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	
	
	getUsbBoot();
    3326:	0e 94 a8 05 	call	0xb50	; 0xb50 <_Z10getUsbBootv>
    332a:	0f 2e       	mov	r0, r31
    332c:	f0 e2       	ldi	r31, 0x20	; 32
    332e:	cf 2e       	mov	r12, r31
    3330:	f1 ea       	ldi	r31, 0xA1	; 161
    3332:	df 2e       	mov	r13, r31
    3334:	f7 e0       	ldi	r31, 0x07	; 7
    3336:	ef 2e       	mov	r14, r31
    3338:	f1 2c       	mov	r15, r1
    333a:	f0 2d       	mov	r31, r0
	
	for (long i=0;i<500000;i++)
	{
		if(TWI_RecievedAddress(TWIC))
    333c:	80 e8       	ldi	r24, 0x80	; 128
    333e:	94 e0       	ldi	r25, 0x04	; 4
    3340:	0e 94 7d 07 	call	0xefa	; 0xefa <_Z19TWI_RecievedAddressR10TWI_struct>
    3344:	88 23       	and	r24, r24
    3346:	21 f0       	breq	.+8      	; 0x3350 <main+0x132>
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
    3348:	8c ea       	ldi	r24, 0xAC	; 172
    334a:	97 e1       	ldi	r25, 0x17	; 23
    334c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <_Z17receiveHexFileI2CPFvvE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3350:	88 e0       	ldi	r24, 0x08	; 8
    3352:	8a 95       	dec	r24
    3354:	f1 f7       	brne	.-4      	; 0x3352 <main+0x134>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	c8 1a       	sub	r12, r24
    335a:	d1 08       	sbc	r13, r1
    335c:	e1 08       	sbc	r14, r1
    335e:	f1 08       	sbc	r15, r1
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
	
	
	getUsbBoot();
	
	for (long i=0;i<500000;i++)
    3360:	69 f7       	brne	.-38     	; 0x333c <main+0x11e>
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
		_delay_us(1);
	}
	
	#ifdef DEBUG
	USART_TransmitString(USARTD0, "\r\nRunning in DEBUG mode\r\n");
    3362:	6d ed       	ldi	r22, 0xDD	; 221
    3364:	72 e2       	ldi	r23, 0x22	; 34
    3366:	80 ea       	ldi	r24, 0xA0	; 160
    3368:	99 e0       	ldi	r25, 0x09	; 9
    336a:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	#endif
	
	// check if the blockly code area is empty
	USART_TransmitString(USARTD0, "Checking for program\n\r");
    336e:	67 ef       	ldi	r22, 0xF7	; 247
    3370:	72 e2       	ldi	r23, 0x22	; 34
    3372:	80 ea       	ldi	r24, 0xA0	; 160
    3374:	99 e0       	ldi	r25, 0x09	; 9
    3376:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Checking for program\n\r");
    337a:	87 ef       	ldi	r24, 0xF7	; 247
    337c:	92 e2       	ldi	r25, 0x22	; 34
    337e:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	
	if(pgm_read_byte(0x8000) == 0xFF)
    3382:	e0 e0       	ldi	r30, 0x00	; 0
    3384:	f0 e8       	ldi	r31, 0x80	; 128
    3386:	e4 91       	lpm	r30, Z
    3388:	ef 3f       	cpi	r30, 0xFF	; 255
    338a:	91 f4       	brne	.+36     	; 0x33b0 <main+0x192>
	{
		USART_TransmitString(USARTD0, "No program found\n\r");
    338c:	6e e0       	ldi	r22, 0x0E	; 14
    338e:	73 e2       	ldi	r23, 0x23	; 35
    3390:	80 ea       	ldi	r24, 0xA0	; 160
    3392:	99 e0       	ldi	r25, 0x09	; 9
    3394:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
		USB_TransmitString("No program found\n\r");
    3398:	8e e0       	ldi	r24, 0x0E	; 14
    339a:	93 e2       	ldi	r25, 0x23	; 35
    339c:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
		
		while(true)
		{
			//USART0_TransmitString("test");
			if (!PORTA_IN &(1<<0))
    33a0:	c8 e0       	ldi	r28, 0x08	; 8
    33a2:	d6 e0       	ldi	r29, 0x06	; 6
    33a4:	88 81       	ld	r24, Y
    33a6:	81 11       	cpse	r24, r1
    33a8:	fd cf       	rjmp	.-6      	; 0x33a4 <main+0x186>
			{
				resetDevice();
    33aa:	0e 94 4a 04 	call	0x894	; 0x894 <_Z11resetDevicev>
    33ae:	fa cf       	rjmp	.-12     	; 0x33a4 <main+0x186>
			}
		}
	}

	// run the blockly
	Started = 1;
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	80 93 56 23 	sts	0x2356, r24	; 0x802356 <Started>
	USART_TransmitString(USARTD0, "Starting your program\n\r");
    33b6:	61 e2       	ldi	r22, 0x21	; 33
    33b8:	73 e2       	ldi	r23, 0x23	; 35
    33ba:	80 ea       	ldi	r24, 0xA0	; 160
    33bc:	99 e0       	ldi	r25, 0x09	; 9
    33be:	0e 94 94 09 	call	0x1328	; 0x1328 <_Z20USART_TransmitStringR12USART_structPKc>
	USB_TransmitString("Starting your program\n\r");
    33c2:	81 e2       	ldi	r24, 0x21	; 33
    33c4:	93 e2       	ldi	r25, 0x23	; 35
    33c6:	0e 94 9c 0a 	call	0x1538	; 0x1538 <_Z18USB_TransmitStringPKc>
	asm("jmp 0x8000");
    33ca:	0c 94 00 40 	jmp	0x8000	; 0x8000 <jump_table+0x200>

}
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	df 90       	pop	r13
    33e0:	cf 90       	pop	r12
    33e2:	08 95       	ret

000033e4 <_Z10ToggleLED1v>:
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
	} //Set the LED pins to output
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
    33e4:	e7 ee       	ldi	r30, 0xE7	; 231
    33e6:	f6 e0       	ldi	r31, 0x06	; 6
    33e8:	80 81       	ld	r24, Z
    33ea:	80 61       	ori	r24, 0x10	; 16
    33ec:	80 83       	st	Z, r24
    33ee:	08 95       	ret

000033f0 <_Z10ToggleLED2v>:
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit
    33f0:	e7 ee       	ldi	r30, 0xE7	; 231
    33f2:	f6 e0       	ldi	r31, 0x06	; 6
    33f4:	80 81       	ld	r24, Z
    33f6:	80 62       	ori	r24, 0x20	; 32
    33f8:	80 83       	st	Z, r24
    33fa:	08 95       	ret

000033fc <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    33fc:	10 92 6c 24 	sts	0x246C, r1	; 0x80246c <udi_cdc_nb_comm_enabled>
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    3400:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <udi_cdc_state>
    3404:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <udi_cdc_state+0x1>

	uid_cdc_state_msg[port].header.bmRequestType =
    3408:	ee e6       	ldi	r30, 0x6E	; 110
    340a:	f4 e2       	ldi	r31, 0x24	; 36
    340c:	81 ea       	ldi	r24, 0xA1	; 161
    340e:	80 83       	st	Z, r24
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    3410:	80 e2       	ldi	r24, 0x20	; 32
    3412:	81 83       	std	Z+1, r24	; 0x01
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    3414:	12 82       	std	Z+2, r1	; 0x02
    3416:	13 82       	std	Z+3, r1	; 0x03
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    3418:	14 82       	std	Z+4, r1	; 0x04
    341a:	15 82       	std	Z+5, r1	; 0x05
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	86 83       	std	Z+6, r24	; 0x06
    3422:	97 83       	std	Z+7, r25	; 0x07
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    3424:	10 86       	std	Z+8, r1	; 0x08
    3426:	11 86       	std	Z+9, r1	; 0x09

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    3428:	ec e7       	ldi	r30, 0x7C	; 124
    342a:	f4 e2       	ldi	r31, 0x24	; 36
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	92 ec       	ldi	r25, 0xC2	; 194
    3430:	a1 e0       	ldi	r26, 0x01	; 1
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	80 83       	st	Z, r24
    3436:	91 83       	std	Z+1, r25	; 0x01
    3438:	a2 83       	std	Z+2, r26	; 0x02
    343a:	b3 83       	std	Z+3, r27	; 0x03
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    343c:	14 82       	std	Z+4, r1	; 0x04
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    343e:	15 82       	std	Z+5, r1	; 0x05
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    3440:	88 e0       	ldi	r24, 0x08	; 8
    3442:	86 83       	std	Z+6, r24	; 0x06
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    3444:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udi_cdc_nb_comm_enabled>
    3448:	8f 5f       	subi	r24, 0xFF	; 255
    344a:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udi_cdc_nb_comm_enabled>
	return true;
}
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	08 95       	ret

00003452 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    3452:	80 91 6c 24 	lds	r24, 0x246C	; 0x80246c <udi_cdc_nb_comm_enabled>
    3456:	81 50       	subi	r24, 0x01	; 1
    3458:	80 93 6c 24 	sts	0x246C, r24	; 0x80246c <udi_cdc_nb_comm_enabled>
    345c:	08 95       	ret

0000345e <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    345e:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
    3462:	81 50       	subi	r24, 0x01	; 1
    3464:	80 93 6b 24 	sts	0x246B, r24	; 0x80246b <udi_cdc_nb_data_enabled>
	port = udi_cdc_nb_data_enabled;
    3468:	80 91 6b 24 	lds	r24, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    346c:	10 92 6a 24 	sts	0x246A, r1	; 0x80246a <udi_cdc_data_running>
    3470:	08 95       	ret

00003472 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	08 95       	ret

00003476 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	08 95       	ret

0000347a <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
    347a:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    347e:	88 23       	and	r24, r24
    3480:	cc f4       	brge	.+50     	; 0x34b4 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3482:	80 76       	andi	r24, 0x60	; 96
    3484:	80 32       	cpi	r24, 0x20	; 32
    3486:	b9 f5       	brne	.+110    	; 0x34f6 <udi_cdc_comm_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    3488:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    348c:	81 32       	cpi	r24, 0x21	; 33
    348e:	a9 f5       	brne	.+106    	; 0x34fa <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    3490:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    3494:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    3498:	07 97       	sbiw	r24, 0x07	; 7
    349a:	89 f5       	brne	.+98     	; 0x34fe <udi_cdc_comm_setup+0x84>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    349c:	e1 ed       	ldi	r30, 0xD1	; 209
    349e:	f5 e2       	ldi	r31, 0x25	; 37
    34a0:	8c e7       	ldi	r24, 0x7C	; 124
    34a2:	94 e2       	ldi	r25, 0x24	; 36
    34a4:	80 87       	std	Z+8, r24	; 0x08
    34a6:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    34a8:	87 e0       	ldi	r24, 0x07	; 7
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	82 87       	std	Z+10, r24	; 0x0a
    34ae:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	08 95       	ret
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    34b4:	80 76       	andi	r24, 0x60	; 96
    34b6:	80 32       	cpi	r24, 0x20	; 32
    34b8:	21 f5       	brne	.+72     	; 0x3502 <udi_cdc_comm_setup+0x88>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    34ba:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    34be:	80 32       	cpi	r24, 0x20	; 32
    34c0:	21 f0       	breq	.+8      	; 0x34ca <udi_cdc_comm_setup+0x50>
    34c2:	82 32       	cpi	r24, 0x22	; 34
    34c4:	01 f1       	breq	.+64     	; 0x3506 <udi_cdc_comm_setup+0x8c>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	08 95       	ret
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    34ca:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    34ce:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    34d2:	07 97       	sbiw	r24, 0x07	; 7
    34d4:	d1 f4       	brne	.+52     	; 0x350a <udi_cdc_comm_setup+0x90>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
    34d6:	e1 ed       	ldi	r30, 0xD1	; 209
    34d8:	f5 e2       	ldi	r31, 0x25	; 37
    34da:	87 e8       	ldi	r24, 0x87	; 135
    34dc:	9a e1       	ldi	r25, 0x1A	; 26
    34de:	84 87       	std	Z+12, r24	; 0x0c
    34e0:	95 87       	std	Z+13, r25	; 0x0d
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    34e2:	8c e7       	ldi	r24, 0x7C	; 124
    34e4:	94 e2       	ldi	r25, 0x24	; 36
    34e6:	80 87       	std	Z+8, r24	; 0x08
    34e8:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    34ea:	87 e0       	ldi	r24, 0x07	; 7
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	82 87       	std	Z+10, r24	; 0x0a
    34f0:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	08 95       	ret
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	08 95       	ret
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	08 95       	ret
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	08 95       	ret
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    350a:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
    350c:	08 95       	ret

0000350e <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
    350e:	08 95       	ret

00003510 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	1f 92       	push	r1
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    3520:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udi_cdc_tx_trans_ongoing>
    3524:	81 11       	cpse	r24, r1
    3526:	9f c0       	rjmp	.+318    	; 0x3666 <udi_cdc_tx_send+0x156>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    3528:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <udd_is_high_speed>
    352c:	88 23       	and	r24, r24
    352e:	51 f0       	breq	.+20     	; 0x3544 <udi_cdc_tx_send+0x34>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    3530:	00 91 5b 23 	lds	r16, 0x235B	; 0x80235b <udi_cdc_tx_sof_num>
    3534:	10 91 5c 23 	lds	r17, 0x235C	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    3538:	0e 94 13 27 	call	0x4e26	; 0x4e26 <udd_get_micro_frame_number>
    353c:	08 17       	cp	r16, r24
    353e:	19 07       	cpc	r17, r25
    3540:	59 f4       	brne	.+22     	; 0x3558 <udi_cdc_tx_send+0x48>
    3542:	91 c0       	rjmp	.+290    	; 0x3666 <udi_cdc_tx_send+0x156>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    3544:	00 91 5b 23 	lds	r16, 0x235B	; 0x80235b <udi_cdc_tx_sof_num>
    3548:	10 91 5c 23 	lds	r17, 0x235C	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    354c:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <udd_get_frame_number>
    3550:	08 17       	cp	r16, r24
    3552:	19 07       	cpc	r17, r25
    3554:	09 f4       	brne	.+2      	; 0x3558 <udi_cdc_tx_send+0x48>
    3556:	87 c0       	rjmp	.+270    	; 0x3666 <udi_cdc_tx_send+0x156>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3558:	8f b7       	in	r24, 0x3f	; 63
    355a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    355c:	f8 94       	cli
	return flags;
    355e:	19 81       	ldd	r17, Y+1	; 0x01
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    3560:	00 91 5d 23 	lds	r16, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    3564:	e0 2f       	mov	r30, r16
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	ee 0f       	add	r30, r30
    356a:	ff 1f       	adc	r31, r31
    356c:	e2 5a       	subi	r30, 0xA2	; 162
    356e:	fc 4d       	sbci	r31, 0xDC	; 220
    3570:	80 81       	ld	r24, Z
    3572:	91 81       	ldd	r25, Z+1	; 0x01
    3574:	89 2b       	or	r24, r25
    3576:	09 f5       	brne	.+66     	; 0x35ba <udi_cdc_tx_send+0xaa>
		sof_zlp_counter++;
    3578:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <sof_zlp_counter.5229>
    357c:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <sof_zlp_counter.5229+0x1>
    3580:	01 96       	adiw	r24, 0x01	; 1
    3582:	80 93 57 23 	sts	0x2357, r24	; 0x802357 <sof_zlp_counter.5229>
    3586:	90 93 58 23 	sts	0x2358, r25	; 0x802358 <sof_zlp_counter.5229+0x1>
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    358a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <udd_is_high_speed>
    358e:	81 11       	cpse	r24, r1
    3590:	07 c0       	rjmp	.+14     	; 0x35a0 <udi_cdc_tx_send+0x90>
    3592:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <sof_zlp_counter.5229>
    3596:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <sof_zlp_counter.5229+0x1>
    359a:	84 36       	cpi	r24, 0x64	; 100
    359c:	91 05       	cpc	r25, r1
    359e:	58 f0       	brcs	.+22     	; 0x35b6 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    35a0:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <udd_is_high_speed>
    35a4:	88 23       	and	r24, r24
    35a6:	49 f0       	breq	.+18     	; 0x35ba <udi_cdc_tx_send+0xaa>
    35a8:	80 91 57 23 	lds	r24, 0x2357	; 0x802357 <sof_zlp_counter.5229>
    35ac:	90 91 58 23 	lds	r25, 0x2358	; 0x802358 <sof_zlp_counter.5229+0x1>
    35b0:	80 32       	cpi	r24, 0x20	; 32
    35b2:	93 40       	sbci	r25, 0x03	; 3
    35b4:	10 f4       	brcc	.+4      	; 0x35ba <udi_cdc_tx_send+0xaa>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35b6:	1f bf       	out	0x3f, r17	; 63
    35b8:	56 c0       	rjmp	.+172    	; 0x3666 <udi_cdc_tx_send+0x156>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
    35ba:	10 92 57 23 	sts	0x2357, r1	; 0x802357 <sof_zlp_counter.5229>
    35be:	10 92 58 23 	sts	0x2358, r1	; 0x802358 <sof_zlp_counter.5229+0x1>

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    35c2:	80 91 59 23 	lds	r24, 0x2359	; 0x802359 <udi_cdc_tx_both_buf_to_send>
    35c6:	81 11       	cpse	r24, r1
    35c8:	06 c0       	rjmp	.+12     	; 0x35d6 <udi_cdc_tx_send+0xc6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	01 11       	cpse	r16, r1
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	80 93 5d 23 	sts	0x235D, r24	; 0x80235d <udi_cdc_tx_buf_sel>
    35d4:	04 c0       	rjmp	.+8      	; 0x35de <udi_cdc_tx_send+0xce>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	01 11       	cpse	r16, r1
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	08 2f       	mov	r16, r24
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	80 93 5a 23 	sts	0x235A, r24	; 0x80235a <udi_cdc_tx_trans_ongoing>
    35e4:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    35e6:	10 e0       	ldi	r17, 0x00	; 0
    35e8:	f8 01       	movw	r30, r16
    35ea:	ee 0f       	add	r30, r30
    35ec:	ff 1f       	adc	r31, r31
    35ee:	e2 5a       	subi	r30, 0xA2	; 162
    35f0:	fc 4d       	sbci	r31, 0xDC	; 220
    35f2:	80 81       	ld	r24, Z
    35f4:	91 81       	ldd	r25, Z+1	; 0x01
    35f6:	ff 24       	eor	r15, r15
    35f8:	f3 94       	inc	r15
    35fa:	80 34       	cpi	r24, 0x40	; 64
    35fc:	91 05       	cpc	r25, r1
    35fe:	09 f4       	brne	.+2      	; 0x3602 <udi_cdc_tx_send+0xf2>
    3600:	f1 2c       	mov	r15, r1
	if (b_short_packet) {
    3602:	80 34       	cpi	r24, 0x40	; 64
    3604:	91 05       	cpc	r25, r1
    3606:	91 f0       	breq	.+36     	; 0x362c <udi_cdc_tx_send+0x11c>
		if (udd_is_high_speed()) {
    3608:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <udd_is_high_speed>
    360c:	88 23       	and	r24, r24
    360e:	39 f0       	breq	.+14     	; 0x361e <udi_cdc_tx_send+0x10e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    3610:	0e 94 13 27 	call	0x4e26	; 0x4e26 <udd_get_micro_frame_number>
    3614:	80 93 5b 23 	sts	0x235B, r24	; 0x80235b <udi_cdc_tx_sof_num>
    3618:	90 93 5c 23 	sts	0x235C, r25	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    361c:	0b c0       	rjmp	.+22     	; 0x3634 <udi_cdc_tx_send+0x124>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    361e:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <udd_get_frame_number>
    3622:	80 93 5b 23 	sts	0x235B, r24	; 0x80235b <udi_cdc_tx_sof_num>
    3626:	90 93 5c 23 	sts	0x235C, r25	; 0x80235c <udi_cdc_tx_sof_num+0x1>
    362a:	04 c0       	rjmp	.+8      	; 0x3634 <udi_cdc_tx_send+0x124>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    362c:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udi_cdc_tx_sof_num>
    3630:	10 92 5c 23 	sts	0x235C, r1	; 0x80235c <udi_cdc_tx_sof_num+0x1>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    3634:	f8 01       	movw	r30, r16
    3636:	ee 0f       	add	r30, r30
    3638:	ff 1f       	adc	r31, r31
    363a:	e2 5a       	subi	r30, 0xA2	; 162
    363c:	fc 4d       	sbci	r31, 0xDC	; 220
    363e:	20 81       	ld	r18, Z
    3640:	31 81       	ldd	r19, Z+1	; 0x01
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    3642:	a8 01       	movw	r20, r16
    3644:	00 24       	eor	r0, r0
    3646:	56 95       	lsr	r21
    3648:	47 95       	ror	r20
    364a:	07 94       	ror	r0
    364c:	56 95       	lsr	r21
    364e:	47 95       	ror	r20
    3650:	07 94       	ror	r0
    3652:	54 2f       	mov	r21, r20
    3654:	40 2d       	mov	r20, r0
    3656:	4e 59       	subi	r20, 0x9E	; 158
    3658:	5c 4d       	sbci	r21, 0xDC	; 220
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    365a:	0a e3       	ldi	r16, 0x3A	; 58
    365c:	1b e1       	ldi	r17, 0x1B	; 27
    365e:	6f 2d       	mov	r22, r15
    3660:	81 e8       	ldi	r24, 0x81	; 129
    3662:	0e 94 1c 28 	call	0x5038	; 0x5038 <udd_ep_run>
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    3666:	0f 90       	pop	r0
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	ff 90       	pop	r15
    3672:	08 95       	ret

00003674 <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    3674:	81 11       	cpse	r24, r1
    3676:	16 c0       	rjmp	.+44     	; 0x36a4 <udi_cdc_data_sent+0x30>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    3678:	20 91 5d 23 	lds	r18, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	22 23       	and	r18, r18
    3682:	11 f0       	breq	.+4      	; 0x3688 <udi_cdc_data_sent+0x14>
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	88 0f       	add	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	fc 01       	movw	r30, r24
    368e:	e2 5a       	subi	r30, 0xA2	; 162
    3690:	fc 4d       	sbci	r31, 0xDC	; 220
    3692:	10 82       	st	Z, r1
    3694:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_both_buf_to_send[port] = false;
    3696:	10 92 59 23 	sts	0x2359, r1	; 0x802359 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_trans_ongoing[port] = false;
    369a:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udi_cdc_tx_trans_ongoing>

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    369e:	80 e0       	ldi	r24, 0x00	; 0
    36a0:	0e 94 88 1a 	call	0x3510	; 0x3510 <udi_cdc_tx_send>
    36a4:	08 95       	ret

000036a6 <udi_cdc_data_sof_notify>:
void udi_cdc_data_sof_notify(void)
{
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	0e 94 88 1a 	call	0x3510	; 0x3510 <udi_cdc_tx_send>
    36ac:	08 95       	ret

000036ae <udi_cdc_ctrl_state_notify>:
	udi_cdc_ctrl_state_notify(port, ep_comm);
}


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    36ae:	0f 93       	push	r16
    36b0:	1f 93       	push	r17
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    36b2:	80 91 7a 24 	lds	r24, 0x247A	; 0x80247a <udi_cdc_serial_state_msg_ongoing>
    36b6:	81 11       	cpse	r24, r1
    36b8:	1f c0       	rjmp	.+62     	; 0x36f8 <udi_cdc_ctrl_state_notify+0x4a>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    36ba:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udi_cdc_state>
    36be:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    36c2:	80 91 76 24 	lds	r24, 0x2476	; 0x802476 <uid_cdc_state_msg+0x8>
    36c6:	90 91 77 24 	lds	r25, 0x2477	; 0x802477 <uid_cdc_state_msg+0x9>
    36ca:	28 17       	cp	r18, r24
    36cc:	39 07       	cpc	r19, r25
    36ce:	a1 f0       	breq	.+40     	; 0x36f8 <udi_cdc_ctrl_state_notify+0x4a>
    36d0:	86 2f       	mov	r24, r22
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    36d2:	20 91 78 24 	lds	r18, 0x2478	; 0x802478 <udi_cdc_state>
    36d6:	30 91 79 24 	lds	r19, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    36da:	20 93 76 24 	sts	0x2476, r18	; 0x802476 <uid_cdc_state_msg+0x8>
    36de:	30 93 77 24 	sts	0x2477, r19	; 0x802477 <uid_cdc_state_msg+0x9>
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    36e2:	0a ea       	ldi	r16, 0xAA	; 170
    36e4:	1b e1       	ldi	r17, 0x1B	; 27
    36e6:	2a e0       	ldi	r18, 0x0A	; 10
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	4e e6       	ldi	r20, 0x6E	; 110
    36ec:	54 e2       	ldi	r21, 0x24	; 36
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	0e 94 1c 28 	call	0x5038	; 0x5038 <udd_ep_run>
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    36f4:	80 93 7a 24 	sts	0x247A, r24	; 0x80247a <udi_cdc_serial_state_msg_ongoing>
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    36f8:	1f 91       	pop	r17
    36fa:	0f 91       	pop	r16
    36fc:	08 95       	ret

000036fe <udi_cdc_ctrl_state_change>:

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	1f 92       	push	r1
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3708:	8f b7       	in	r24, 0x3f	; 63
    370a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    370c:	f8 94       	cli
	return flags;
    370e:	29 81       	ldd	r18, Y+1	; 0x01
	port = 0;
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
    3710:	66 23       	and	r22, r22
    3712:	59 f0       	breq	.+22     	; 0x372a <udi_cdc_ctrl_state_change+0x2c>
		udi_cdc_state[port] |= bit_mask;
    3714:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udi_cdc_state>
    3718:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    371c:	48 2b       	or	r20, r24
    371e:	59 2b       	or	r21, r25
    3720:	40 93 78 24 	sts	0x2478, r20	; 0x802478 <udi_cdc_state>
    3724:	50 93 79 24 	sts	0x2479, r21	; 0x802479 <udi_cdc_state+0x1>
    3728:	0c c0       	rjmp	.+24     	; 0x3742 <udi_cdc_ctrl_state_change+0x44>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    372a:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udi_cdc_state>
    372e:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    3732:	40 95       	com	r20
    3734:	50 95       	com	r21
    3736:	48 23       	and	r20, r24
    3738:	59 23       	and	r21, r25
    373a:	40 93 78 24 	sts	0x2478, r20	; 0x802478 <udi_cdc_state>
    373e:	50 93 79 24 	sts	0x2479, r21	; 0x802479 <udi_cdc_state+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3742:	2f bf       	out	0x3f, r18	; 63
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
		break;
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    3744:	62 e8       	ldi	r22, 0x82	; 130
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	0e 94 57 1b 	call	0x36ae	; 0x36ae <udi_cdc_ctrl_state_notify>
}
    374c:	0f 90       	pop	r0
    374e:	df 91       	pop	r29
    3750:	cf 91       	pop	r28
    3752:	08 95       	ret

00003754 <udi_cdc_serial_state_msg_sent>:
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    3754:	10 92 7a 24 	sts	0x247A, r1	; 0x80247a <udi_cdc_serial_state_msg_ongoing>

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    3758:	80 91 78 24 	lds	r24, 0x2478	; 0x802478 <udi_cdc_state>
    375c:	90 91 79 24 	lds	r25, 0x2479	; 0x802479 <udi_cdc_state+0x1>
    3760:	83 78       	andi	r24, 0x83	; 131
    3762:	80 93 78 24 	sts	0x2478, r24	; 0x802478 <udi_cdc_state>
    3766:	90 93 79 24 	sts	0x2479, r25	; 0x802479 <udi_cdc_state+0x1>
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    376a:	ee e6       	ldi	r30, 0x6E	; 110
    376c:	f4 e2       	ldi	r31, 0x24	; 36
    376e:	80 85       	ldd	r24, Z+8	; 0x08
    3770:	91 85       	ldd	r25, Z+9	; 0x09
    3772:	83 78       	andi	r24, 0x83	; 131
    3774:	80 87       	std	Z+8, r24	; 0x08
    3776:	91 87       	std	Z+9, r25	; 0x09
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    3778:	64 2f       	mov	r22, r20
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <udi_cdc_ctrl_state_notify>
    3780:	08 95       	ret

00003782 <udi_cdc_ctrl_signal_dcd>:

//------- Application interface

void udi_cdc_ctrl_signal_dcd(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DCD);
    3782:	41 e0       	ldi	r20, 0x01	; 1
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	68 2f       	mov	r22, r24
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    378e:	08 95       	ret

00003790 <udi_cdc_ctrl_signal_dsr>:
}

void udi_cdc_ctrl_signal_dsr(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
    3790:	42 e0       	ldi	r20, 0x02	; 2
    3792:	50 e0       	ldi	r21, 0x00	; 0
    3794:	68 2f       	mov	r22, r24
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    379c:	08 95       	ret

0000379e <udi_cdc_signal_framing_error>:
}

void udi_cdc_signal_framing_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
    379e:	40 e1       	ldi	r20, 0x10	; 16
    37a0:	50 e0       	ldi	r21, 0x00	; 0
    37a2:	61 e0       	ldi	r22, 0x01	; 1
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37aa:	08 95       	ret

000037ac <udi_cdc_signal_parity_error>:
}

void udi_cdc_signal_parity_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
    37ac:	40 e2       	ldi	r20, 0x20	; 32
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37b8:	08 95       	ret

000037ba <udi_cdc_signal_overrun>:
}

void udi_cdc_signal_overrun(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    37ba:	40 e4       	ldi	r20, 0x40	; 64
    37bc:	50 e0       	ldi	r21, 0x00	; 0
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37c6:	08 95       	ret

000037c8 <udi_cdc_multi_ctrl_signal_dcd>:
}

void udi_cdc_multi_ctrl_signal_dcd(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DCD);
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	50 e0       	ldi	r21, 0x00	; 0
    37cc:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37d0:	08 95       	ret

000037d2 <udi_cdc_multi_ctrl_signal_dsr>:
}

void udi_cdc_multi_ctrl_signal_dsr(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DSR);
    37d2:	42 e0       	ldi	r20, 0x02	; 2
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37da:	08 95       	ret

000037dc <udi_cdc_multi_signal_framing_error>:
}

void udi_cdc_multi_signal_framing_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_FRAMING);
    37dc:	40 e1       	ldi	r20, 0x10	; 16
    37de:	50 e0       	ldi	r21, 0x00	; 0
    37e0:	61 e0       	ldi	r22, 0x01	; 1
    37e2:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37e6:	08 95       	ret

000037e8 <udi_cdc_multi_signal_parity_error>:
}

void udi_cdc_multi_signal_parity_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_PARITY);
    37e8:	40 e2       	ldi	r20, 0x20	; 32
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37f2:	08 95       	ret

000037f4 <udi_cdc_multi_signal_overrun>:
}

void udi_cdc_multi_signal_overrun(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
    37f4:	40 e4       	ldi	r20, 0x40	; 64
    37f6:	50 e0       	ldi	r21, 0x00	; 0
    37f8:	61 e0       	ldi	r22, 0x01	; 1
    37fa:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <udi_cdc_ctrl_state_change>
    37fe:	08 95       	ret

00003800 <udi_cdc_multi_get_nb_received_data>:
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	1f 92       	push	r1
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    380a:	8f b7       	in	r24, 0x3f	; 63
    380c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    380e:	f8 94       	cli
	return flags;
    3810:	49 81       	ldd	r20, Y+1	; 0x01

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    3812:	20 91 e3 23 	lds	r18, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3816:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    381a:	e0 91 e5 23 	lds	r30, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	ee 0f       	add	r30, r30
    3822:	ff 1f       	adc	r31, r31
    3824:	ea 51       	subi	r30, 0x1A	; 26
    3826:	fc 4d       	sbci	r31, 0xDC	; 220
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    382c:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	return nb_received;
}
    382e:	82 1b       	sub	r24, r18
    3830:	93 0b       	sbc	r25, r19
    3832:	0f 90       	pop	r0
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	08 95       	ret

0000383a <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	0e 94 00 1c 	call	0x3800	; 0x3800 <udi_cdc_multi_get_nb_received_data>
}
    3840:	08 95       	ret

00003842 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    3842:	0e 94 00 1c 	call	0x3800	; 0x3800 <udi_cdc_multi_get_nb_received_data>
    3846:	21 e0       	ldi	r18, 0x01	; 1
    3848:	89 2b       	or	r24, r25
    384a:	09 f4       	brne	.+2      	; 0x384e <udi_cdc_multi_is_rx_ready+0xc>
    384c:	20 e0       	ldi	r18, 0x00	; 0
}
    384e:	82 2f       	mov	r24, r18
    3850:	08 95       	ret

00003852 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    3852:	0f 93       	push	r16
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	1f 92       	push	r1
    385c:	cd b7       	in	r28, 0x3d	; 61
    385e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3860:	8f b7       	in	r24, 0x3f	; 63
    3862:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3864:	f8 94       	cli
	return flags;
    3866:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    3868:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    386c:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
    3870:	81 11       	cpse	r24, r1
    3872:	10 c0       	rjmp	.+32     	; 0x3894 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    3874:	60 91 e3 23 	lds	r22, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3878:	70 91 e4 23 	lds	r23, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
    387c:	02 2f       	mov	r16, r18
    387e:	10 e0       	ldi	r17, 0x00	; 0
    3880:	f8 01       	movw	r30, r16
    3882:	ee 0f       	add	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	ea 51       	subi	r30, 0x1A	; 26
    3888:	fc 4d       	sbci	r31, 0xDC	; 220
    388a:	40 81       	ld	r20, Z
    388c:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    388e:	64 17       	cp	r22, r20
    3890:	75 07       	cpc	r23, r21
    3892:	18 f4       	brcc	.+6      	; 0x389a <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3894:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	24 c0       	rjmp	.+72     	; 0x38e2 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    389a:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <udi_cdc_rx_pos>
    389e:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	21 11       	cpse	r18, r1
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	80 93 e2 23 	sts	0x23E2, r24	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
    38b2:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	0e 94 21 1c 	call	0x3842	; 0x3842 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    38ba:	a8 01       	movw	r20, r16
    38bc:	00 24       	eor	r0, r0
    38be:	56 95       	lsr	r21
    38c0:	47 95       	ror	r20
    38c2:	07 94       	ror	r0
    38c4:	56 95       	lsr	r21
    38c6:	47 95       	ror	r20
    38c8:	07 94       	ror	r0
    38ca:	54 2f       	mov	r21, r20
    38cc:	40 2d       	mov	r20, r0
    38ce:	46 51       	subi	r20, 0x16	; 22
    38d0:	5c 4d       	sbci	r21, 0xDC	; 220
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    38d2:	0b ea       	ldi	r16, 0xAB	; 171
    38d4:	1c e1       	ldi	r17, 0x1C	; 28
    38d6:	20 e4       	ldi	r18, 0x40	; 64
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	61 e0       	ldi	r22, 0x01	; 1
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	0e 94 1c 28 	call	0x5038	; 0x5038 <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    38e2:	0f 90       	pop	r0
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	08 95       	ret

000038ee <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    38ee:	10 92 6b 24 	sts	0x246B, r1	; 0x80246b <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    38f2:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    38f6:	10 92 59 23 	sts	0x2359, r1	; 0x802359 <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    38fa:	10 92 5d 23 	sts	0x235D, r1	; 0x80235d <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    38fe:	ee e5       	ldi	r30, 0x5E	; 94
    3900:	f3 e2       	ldi	r31, 0x23	; 35
    3902:	10 82       	st	Z, r1
    3904:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    3906:	12 82       	std	Z+2, r1	; 0x02
    3908:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    390a:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udi_cdc_tx_sof_num>
    390e:	10 92 5c 23 	sts	0x235C, r1	; 0x80235c <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	0e 94 88 1a 	call	0x3510	; 0x3510 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    3918:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    391c:	10 92 e5 23 	sts	0x23E5, r1	; 0x8023e5 <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    3920:	e6 ee       	ldi	r30, 0xE6	; 230
    3922:	f3 e2       	ldi	r31, 0x23	; 35
    3924:	10 82       	st	Z, r1
    3926:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    3928:	12 82       	std	Z+2, r1	; 0x02
    392a:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    392c:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <udi_cdc_rx_pos>
    3930:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0e 94 29 1c 	call	0x3852	; 0x3852 <udi_cdc_rx_start>
    393a:	88 23       	and	r24, r24
    393c:	59 f0       	breq	.+22     	; 0x3954 <udi_cdc_data_enable+0x66>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    393e:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
    3942:	9f 5f       	subi	r25, 0xFF	; 255
    3944:	90 93 6b 24 	sts	0x246B, r25	; 0x80246b <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    3948:	90 91 6b 24 	lds	r25, 0x246B	; 0x80246b <udi_cdc_nb_data_enabled>
    394c:	91 30       	cpi	r25, 0x01	; 1
    394e:	11 f4       	brne	.+4      	; 0x3954 <udi_cdc_data_enable+0x66>
		udi_cdc_data_running = true;
    3950:	90 93 6a 24 	sts	0x246A, r25	; 0x80246a <udi_cdc_data_running>
	}
	return true;
}
    3954:	08 95       	ret

00003956 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    395a:	81 11       	cpse	r24, r1
    395c:	2a c0       	rjmp	.+84     	; 0x39b2 <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    395e:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
    3962:	e1 e0       	ldi	r30, 0x01	; 1
    3964:	81 11       	cpse	r24, r1
    3966:	e0 e0       	ldi	r30, 0x00	; 0
    3968:	84 2f       	mov	r24, r20
	if (!n) {
    396a:	61 15       	cp	r22, r1
    396c:	71 05       	cpc	r23, r1
    396e:	a9 f4       	brne	.+42     	; 0x399a <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    3970:	4e 2f       	mov	r20, r30
    3972:	50 e0       	ldi	r21, 0x00	; 0
    3974:	00 24       	eor	r0, r0
    3976:	56 95       	lsr	r21
    3978:	47 95       	ror	r20
    397a:	07 94       	ror	r0
    397c:	56 95       	lsr	r21
    397e:	47 95       	ror	r20
    3980:	07 94       	ror	r0
    3982:	54 2f       	mov	r21, r20
    3984:	40 2d       	mov	r20, r0
    3986:	46 51       	subi	r20, 0x16	; 22
    3988:	5c 4d       	sbci	r21, 0xDC	; 220
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    398a:	0b ea       	ldi	r16, 0xAB	; 171
    398c:	1c e1       	ldi	r17, 0x1C	; 28
    398e:	20 e4       	ldi	r18, 0x40	; 64
    3990:	30 e0       	ldi	r19, 0x00	; 0
    3992:	61 e0       	ldi	r22, 0x01	; 1
    3994:	0e 94 1c 28 	call	0x5038	; 0x5038 <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    3998:	0c c0       	rjmp	.+24     	; 0x39b2 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	ee 0f       	add	r30, r30
    399e:	ff 1f       	adc	r31, r31
    39a0:	ea 51       	subi	r30, 0x1A	; 26
    39a2:	fc 4d       	sbci	r31, 0xDC	; 220
    39a4:	60 83       	st	Z, r22
    39a6:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    39a8:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	0e 94 29 1c 	call	0x3852	; 0x3852 <udi_cdc_rx_start>
}
    39b2:	1f 91       	pop	r17
    39b4:	0f 91       	pop	r16
    39b6:	08 95       	ret

000039b8 <udi_cdc_is_rx_ready>:
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
	return udi_cdc_multi_is_rx_ready(0);
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	0e 94 21 1c 	call	0x3842	; 0x3842 <udi_cdc_multi_is_rx_ready>
}
    39be:	08 95       	ret

000039c0 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	1f 93       	push	r17
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	1f 92       	push	r1
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    39d0:	11 e0       	ldi	r17, 0x01	; 1
    39d2:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_line_coding+0x6>
    39d6:	89 30       	cpi	r24, 0x09	; 9
    39d8:	09 f0       	breq	.+2      	; 0x39dc <udi_cdc_multi_getc+0x1c>
    39da:	10 e0       	ldi	r17, 0x00	; 0
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
    39dc:	40 e0       	ldi	r20, 0x00	; 0
    39de:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    39e0:	8f b7       	in	r24, 0x3f	; 63
    39e2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    39e4:	f8 94       	cli
	return flags;
    39e6:	a9 81       	ldd	r26, Y+1	; 0x01
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    39e8:	20 91 e3 23 	lds	r18, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    39ec:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    39f0:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	fc 01       	movw	r30, r24
    39f8:	ee 0f       	add	r30, r30
    39fa:	ff 1f       	adc	r31, r31
    39fc:	ea 51       	subi	r30, 0x1A	; 26
    39fe:	fc 4d       	sbci	r31, 0xDC	; 220
    3a00:	60 81       	ld	r22, Z
    3a02:	71 81       	ldd	r23, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a04:	af bf       	out	0x3f, r26	; 63
	cpu_irq_restore(flags);
	while (again) {
    3a06:	26 17       	cp	r18, r22
    3a08:	37 07       	cpc	r19, r23
    3a0a:	30 f0       	brcs	.+12     	; 0x3a18 <udi_cdc_multi_getc+0x58>
		if (!udi_cdc_data_running) {
    3a0c:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3a10:	81 11       	cpse	r24, r1
    3a12:	e6 cf       	rjmp	.-52     	; 0x39e0 <udi_cdc_multi_getc+0x20>
			return 0;
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	22 c0       	rjmp	.+68     	; 0x3a5c <udi_cdc_multi_getc+0x9c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    3a18:	fc 01       	movw	r30, r24
    3a1a:	00 24       	eor	r0, r0
    3a1c:	f6 95       	lsr	r31
    3a1e:	e7 95       	ror	r30
    3a20:	07 94       	ror	r0
    3a22:	f6 95       	lsr	r31
    3a24:	e7 95       	ror	r30
    3a26:	07 94       	ror	r0
    3a28:	fe 2f       	mov	r31, r30
    3a2a:	e0 2d       	mov	r30, r0
    3a2c:	e6 51       	subi	r30, 0x16	; 22
    3a2e:	fc 4d       	sbci	r31, 0xDC	; 220
    3a30:	e2 0f       	add	r30, r18
    3a32:	f3 1f       	adc	r31, r19
    3a34:	80 81       	ld	r24, Z
    3a36:	7a 01       	movw	r14, r20
    3a38:	e8 2a       	or	r14, r24
	udi_cdc_rx_pos[port] = pos+1;
    3a3a:	2f 5f       	subi	r18, 0xFF	; 255
    3a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3e:	20 93 e3 23 	sts	0x23E3, r18	; 0x8023e3 <udi_cdc_rx_pos>
    3a42:	30 93 e4 23 	sts	0x23E4, r19	; 0x8023e4 <udi_cdc_rx_pos+0x1>

	udi_cdc_rx_start(port);
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	0e 94 29 1c 	call	0x3852	; 0x3852 <udi_cdc_rx_start>

	if (b_databit_9) {
    3a4c:	11 23       	and	r17, r17
    3a4e:	21 f0       	breq	.+8      	; 0x3a58 <udi_cdc_multi_getc+0x98>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
    3a50:	5e 2d       	mov	r21, r14
    3a52:	44 27       	eor	r20, r20

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
    3a54:	10 e0       	ldi	r17, 0x00	; 0
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
    3a56:	c4 cf       	rjmp	.-120    	; 0x39e0 <udi_cdc_multi_getc+0x20>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    3a58:	8e 2d       	mov	r24, r14
    3a5a:	9f 2d       	mov	r25, r15
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    3a5c:	0f 90       	pop	r0
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	1f 91       	pop	r17
    3a64:	ff 90       	pop	r15
    3a66:	ef 90       	pop	r14
    3a68:	08 95       	ret

00003a6a <udi_cdc_getc>:

int udi_cdc_getc(void)
{
	return udi_cdc_multi_getc(0);
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <udi_cdc_multi_getc>
}
    3a70:	08 95       	ret

00003a72 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    3a72:	cf 92       	push	r12
    3a74:	df 92       	push	r13
    3a76:	ef 92       	push	r14
    3a78:	ff 92       	push	r15
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	1f 92       	push	r1
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	6b 01       	movw	r12, r22
    3a8a:	7a 01       	movw	r14, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a8c:	8f b7       	in	r24, 0x3f	; 63
    3a8e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3a90:	f8 94       	cli
	return flags;
    3a92:	49 81       	ldd	r20, Y+1	; 0x01
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    3a94:	60 91 e3 23 	lds	r22, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3a98:	70 91 e4 23 	lds	r23, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3a9c:	80 91 e5 23 	lds	r24, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	ee 0f       	add	r30, r30
    3aa6:	ff 1f       	adc	r31, r31
    3aa8:	ea 51       	subi	r30, 0x1A	; 26
    3aaa:	fc 4d       	sbci	r31, 0xDC	; 220
    3aac:	20 81       	ld	r18, Z
    3aae:	31 81       	ldd	r19, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ab0:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	while (again) {
    3ab2:	62 17       	cp	r22, r18
    3ab4:	73 07       	cpc	r23, r19
    3ab6:	38 f0       	brcs	.+14     	; 0x3ac6 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
    3ab8:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3abc:	81 11       	cpse	r24, r1
    3abe:	e6 cf       	rjmp	.-52     	; 0x3a8c <udi_cdc_multi_read_buf+0x1a>
    3ac0:	8e 2d       	mov	r24, r14
    3ac2:	9f 2d       	mov	r25, r15
    3ac4:	36 c0       	rjmp	.+108    	; 0x3b32 <udi_cdc_multi_read_buf+0xc0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	ee 0f       	add	r30, r30
    3aca:	ff 1f       	adc	r31, r31
    3acc:	ea 51       	subi	r30, 0x1A	; 26
    3ace:	fc 4d       	sbci	r31, 0xDC	; 220
    3ad0:	20 81       	ld	r18, Z
    3ad2:	31 81       	ldd	r19, Z+1	; 0x01
    3ad4:	26 1b       	sub	r18, r22
    3ad6:	37 0b       	sbc	r19, r23
    3ad8:	87 01       	movw	r16, r14
    3ada:	2e 15       	cp	r18, r14
    3adc:	3f 05       	cpc	r19, r15
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <udi_cdc_multi_read_buf+0x70>
    3ae0:	89 01       	movw	r16, r18
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
    3ae2:	00 24       	eor	r0, r0
    3ae4:	96 95       	lsr	r25
    3ae6:	87 95       	ror	r24
    3ae8:	07 94       	ror	r0
    3aea:	96 95       	lsr	r25
    3aec:	87 95       	ror	r24
    3aee:	07 94       	ror	r0
    3af0:	98 2f       	mov	r25, r24
    3af2:	80 2d       	mov	r24, r0
    3af4:	68 0f       	add	r22, r24
    3af6:	79 1f       	adc	r23, r25
    3af8:	66 51       	subi	r22, 0x16	; 22
    3afa:	7c 4d       	sbci	r23, 0xDC	; 220
    3afc:	a8 01       	movw	r20, r16
    3afe:	c6 01       	movw	r24, r12
    3b00:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <memcpy>
	udi_cdc_rx_pos[port] += copy_nb;
    3b04:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3b08:	90 91 e4 23 	lds	r25, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
    3b0c:	80 0f       	add	r24, r16
    3b0e:	91 1f       	adc	r25, r17
    3b10:	80 93 e3 23 	sts	0x23E3, r24	; 0x8023e3 <udi_cdc_rx_pos>
    3b14:	90 93 e4 23 	sts	0x23E4, r25	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	ptr_buf += copy_nb;
    3b18:	c0 0e       	add	r12, r16
    3b1a:	d1 1e       	adc	r13, r17
	size -= copy_nb;
    3b1c:	e0 1a       	sub	r14, r16
    3b1e:	f1 0a       	sbc	r15, r17
	udi_cdc_rx_start(port);
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	0e 94 29 1c 	call	0x3852	; 0x3852 <udi_cdc_rx_start>

	if (size) {
    3b26:	e1 14       	cp	r14, r1
    3b28:	f1 04       	cpc	r15, r1
    3b2a:	09 f0       	breq	.+2      	; 0x3b2e <udi_cdc_multi_read_buf+0xbc>
    3b2c:	af cf       	rjmp	.-162    	; 0x3a8c <udi_cdc_multi_read_buf+0x1a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
}
    3b32:	0f 90       	pop	r0
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	df 90       	pop	r13
    3b42:	cf 90       	pop	r12
    3b44:	08 95       	ret

00003b46 <udi_cdc_read_no_polling>:
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
    3b46:	ef 92       	push	r14
    3b48:	ff 92       	push	r15
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	1f 92       	push	r1
    3b54:	1f 92       	push	r1
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	dc 01       	movw	r26, r24
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
    3b5c:	90 91 6a 24 	lds	r25, 0x246A	; 0x80246a <udi_cdc_data_running>
    3b60:	99 23       	and	r25, r25
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <udi_cdc_read_no_polling+0x20>
    3b64:	45 c0       	rjmp	.+138    	; 0x3bf0 <udi_cdc_read_no_polling+0xaa>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3b66:	8f b7       	in	r24, 0x3f	; 63
    3b68:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3b6a:	f8 94       	cli
	return flags;
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
	}
	
	//Get number of available data
	// Check available data
	flags = cpu_irq_save(); // to protect udi_cdc_rx_pos & udi_cdc_rx_buf_sel
	pos = udi_cdc_rx_pos[port];
    3b6e:	40 91 e3 23 	lds	r20, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3b72:	50 91 e4 23 	lds	r21, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3b76:	20 91 e5 23 	lds	r18, 0x23E5	; 0x8023e5 <udi_cdc_rx_buf_sel>
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	f9 01       	movw	r30, r18
    3b7e:	ee 0f       	add	r30, r30
    3b80:	ff 1f       	adc	r31, r31
    3b82:	ea 51       	subi	r30, 0x1A	; 26
    3b84:	fc 4d       	sbci	r31, 0xDC	; 220
    3b86:	e0 80       	ld	r14, Z
    3b88:	f1 80       	ldd	r15, Z+1	; 0x01
    3b8a:	e4 1a       	sub	r14, r20
    3b8c:	f5 0a       	sbc	r15, r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b8e:	8f bf       	out	0x3f, r24	; 63
    3b90:	06 2f       	mov	r16, r22
    3b92:	17 2f       	mov	r17, r23
    3b94:	e0 16       	cp	r14, r16
    3b96:	f1 06       	cpc	r15, r17
    3b98:	08 f4       	brcc	.+2      	; 0x3b9c <udi_cdc_read_no_polling+0x56>
    3b9a:	87 01       	movw	r16, r14
	//If the buffer contains less than the requested number of data,
	//adjust read size
	if(nb_avail_data<size) {
		size = nb_avail_data;
	}
	if(size>0) {
    3b9c:	01 15       	cp	r16, r1
    3b9e:	11 05       	cpc	r17, r1
    3ba0:	51 f1       	breq	.+84     	; 0x3bf6 <udi_cdc_read_no_polling+0xb0>
    3ba2:	cd 01       	movw	r24, r26
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
    3ba4:	00 24       	eor	r0, r0
    3ba6:	36 95       	lsr	r19
    3ba8:	27 95       	ror	r18
    3baa:	07 94       	ror	r0
    3bac:	36 95       	lsr	r19
    3bae:	27 95       	ror	r18
    3bb0:	07 94       	ror	r0
    3bb2:	32 2f       	mov	r19, r18
    3bb4:	20 2d       	mov	r18, r0
    3bb6:	b9 01       	movw	r22, r18
    3bb8:	64 0f       	add	r22, r20
    3bba:	75 1f       	adc	r23, r21
    3bbc:	66 51       	subi	r22, 0x16	; 22
    3bbe:	7c 4d       	sbci	r23, 0xDC	; 220
    3bc0:	a8 01       	movw	r20, r16
    3bc2:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <memcpy>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3bc6:	8f b7       	in	r24, 0x3f	; 63
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    3bca:	f8 94       	cli
	return flags;
    3bcc:	8a 81       	ldd	r24, Y+2	; 0x02
		flags = cpu_irq_save(); // to protect udi_cdc_rx_pos
		udi_cdc_rx_pos[port] += size;
    3bce:	20 91 e3 23 	lds	r18, 0x23E3	; 0x8023e3 <udi_cdc_rx_pos>
    3bd2:	30 91 e4 23 	lds	r19, 0x23E4	; 0x8023e4 <udi_cdc_rx_pos+0x1>
    3bd6:	02 0f       	add	r16, r18
    3bd8:	13 1f       	adc	r17, r19
    3bda:	00 93 e3 23 	sts	0x23E3, r16	; 0x8023e3 <udi_cdc_rx_pos>
    3bde:	10 93 e4 23 	sts	0x23E4, r17	; 0x8023e4 <udi_cdc_rx_pos+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3be2:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	0e 94 29 1c 	call	0x3852	; 0x3852 <udi_cdc_rx_start>
	}
	return(nb_avail_data);
    3bea:	8e 2d       	mov	r24, r14
    3bec:	9f 2d       	mov	r25, r15
    3bee:	05 c0       	rjmp	.+10     	; 0x3bfa <udi_cdc_read_no_polling+0xb4>
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
		return 0;
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	02 c0       	rjmp	.+4      	; 0x3bfa <udi_cdc_read_no_polling+0xb4>
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
	}
	return(nb_avail_data);
    3bf6:	8e 2d       	mov	r24, r14
    3bf8:	9f 2d       	mov	r25, r15
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	1f 91       	pop	r17
    3c04:	0f 91       	pop	r16
    3c06:	ff 90       	pop	r15
    3c08:	ef 90       	pop	r14
    3c0a:	08 95       	ret

00003c0c <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    3c0c:	ab 01       	movw	r20, r22
	return udi_cdc_multi_read_buf(0, buf, size);
    3c0e:	bc 01       	movw	r22, r24
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <udi_cdc_multi_read_buf>
}
    3c16:	08 95       	ret

00003c18 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	1f 92       	push	r1
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3c22:	8f b7       	in	r24, 0x3f	; 63
    3c24:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3c26:	f8 94       	cli
	return flags;
    3c28:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3c2a:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3c2e:	e8 2f       	mov	r30, r24
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	ee 0f       	add	r30, r30
    3c34:	ff 1f       	adc	r31, r31
    3c36:	e2 5a       	subi	r30, 0xA2	; 162
    3c38:	fc 4d       	sbci	r31, 0xDC	; 220
    3c3a:	20 81       	ld	r18, Z
    3c3c:	31 81       	ldd	r19, Z+1	; 0x01
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    3c3e:	20 34       	cpi	r18, 0x40	; 64
    3c40:	31 05       	cpc	r19, r1
    3c42:	89 f4       	brne	.+34     	; 0x3c66 <udi_cdc_multi_get_free_tx_buffer+0x4e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    3c44:	40 91 5a 23 	lds	r20, 0x235A	; 0x80235a <udi_cdc_tx_trans_ongoing>
    3c48:	41 11       	cpse	r20, r1
    3c4a:	0d c0       	rjmp	.+26     	; 0x3c66 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    3c4c:	40 91 59 23 	lds	r20, 0x2359	; 0x802359 <udi_cdc_tx_both_buf_to_send>
    3c50:	41 11       	cpse	r20, r1
    3c52:	09 c0       	rjmp	.+18     	; 0x3c66 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    3c54:	21 e0       	ldi	r18, 0x01	; 1
    3c56:	20 93 59 23 	sts	0x2359, r18	; 0x802359 <udi_cdc_tx_both_buf_to_send>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	20 93 5d 23 	sts	0x235D, r18	; 0x80235d <udi_cdc_tx_buf_sel>
			buf_sel_nb = 0;
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c66:	9f bf       	out	0x3f, r25	; 63
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
    3c68:	80 e4       	ldi	r24, 0x40	; 64
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	82 1b       	sub	r24, r18
    3c6e:	93 0b       	sbc	r25, r19
    3c70:	0f 90       	pop	r0
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	08 95       	ret

00003c78 <udi_cdc_get_free_tx_buffer>:

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <udi_cdc_multi_get_free_tx_buffer>
}
    3c7e:	08 95       	ret

00003c80 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    3c80:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <udi_cdc_multi_get_free_tx_buffer>
    3c84:	21 e0       	ldi	r18, 0x01	; 1
    3c86:	89 2b       	or	r24, r25
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <udi_cdc_multi_is_tx_ready+0xc>
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
}
    3c8c:	82 2f       	mov	r24, r18
    3c8e:	08 95       	ret

00003c90 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <udi_cdc_multi_is_tx_ready>
}
    3c96:	08 95       	ret

00003c98 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    3c98:	ff 92       	push	r15
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	1f 92       	push	r1
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	f6 2e       	mov	r15, r22
    3caa:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    3cac:	01 e0       	ldi	r16, 0x01	; 1
    3cae:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_line_coding+0x6>
    3cb2:	89 30       	cpi	r24, 0x09	; 9
    3cb4:	09 f0       	breq	.+2      	; 0x3cb8 <udi_cdc_multi_putc+0x20>
    3cb6:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <udi_cdc_multi_is_tx_ready>
    3cbe:	81 11       	cpse	r24, r1
    3cc0:	07 c0       	rjmp	.+14     	; 0x3cd0 <udi_cdc_multi_putc+0x38>
		if (!udi_cdc_data_running) {
    3cc2:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3cc6:	81 11       	cpse	r24, r1
    3cc8:	f7 cf       	rjmp	.-18     	; 0x3cb8 <udi_cdc_multi_putc+0x20>
			return false;
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	2c c0       	rjmp	.+88     	; 0x3d28 <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3cd0:	8f b7       	in	r24, 0x3f	; 63
    3cd2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3cd4:	f8 94       	cli
	return flags;
    3cd6:	49 81       	ldd	r20, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3cd8:	80 91 5d 23 	lds	r24, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	fc 01       	movw	r30, r24
    3ce0:	ee 0f       	add	r30, r30
    3ce2:	ff 1f       	adc	r31, r31
    3ce4:	e2 5a       	subi	r30, 0xA2	; 162
    3ce6:	fc 4d       	sbci	r31, 0xDC	; 220
    3ce8:	20 81       	ld	r18, Z
    3cea:	31 81       	ldd	r19, Z+1	; 0x01
    3cec:	b9 01       	movw	r22, r18
    3cee:	6f 5f       	subi	r22, 0xFF	; 255
    3cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf2:	60 83       	st	Z, r22
    3cf4:	71 83       	std	Z+1, r23	; 0x01
    3cf6:	00 24       	eor	r0, r0
    3cf8:	96 95       	lsr	r25
    3cfa:	87 95       	ror	r24
    3cfc:	07 94       	ror	r0
    3cfe:	96 95       	lsr	r25
    3d00:	87 95       	ror	r24
    3d02:	07 94       	ror	r0
    3d04:	98 2f       	mov	r25, r24
    3d06:	80 2d       	mov	r24, r0
    3d08:	8e 59       	subi	r24, 0x9E	; 158
    3d0a:	9c 4d       	sbci	r25, 0xDC	; 220
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	e2 0f       	add	r30, r18
    3d10:	f3 1f       	adc	r31, r19
    3d12:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d14:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    3d16:	00 23       	and	r16, r16
    3d18:	29 f0       	breq	.+10     	; 0x3d24 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    3d1a:	f1 2e       	mov	r15, r17
    3d1c:	11 0f       	add	r17, r17
    3d1e:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    3d20:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    3d22:	ca cf       	rjmp	.-108    	; 0x3cb8 <udi_cdc_multi_putc+0x20>
	}
	return true;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
}
    3d28:	0f 90       	pop	r0
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	1f 91       	pop	r17
    3d30:	0f 91       	pop	r16
    3d32:	ff 90       	pop	r15
    3d34:	08 95       	ret

00003d36 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    3d36:	bc 01       	movw	r22, r24
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <udi_cdc_multi_putc>
}
    3d3e:	08 95       	ret

00003d40 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    3d40:	5f 92       	push	r5
    3d42:	6f 92       	push	r6
    3d44:	7f 92       	push	r7
    3d46:	8f 92       	push	r8
    3d48:	9f 92       	push	r9
    3d4a:	af 92       	push	r10
    3d4c:	bf 92       	push	r11
    3d4e:	cf 92       	push	r12
    3d50:	df 92       	push	r13
    3d52:	ef 92       	push	r14
    3d54:	ff 92       	push	r15
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
    3d5e:	1f 92       	push	r1
    3d60:	cd b7       	in	r28, 0x3d	; 61
    3d62:	de b7       	in	r29, 0x3e	; 62
    3d64:	4b 01       	movw	r8, r22
    3d66:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    3d68:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udi_cdc_line_coding+0x6>
    3d6c:	89 30       	cpi	r24, 0x09	; 9
    3d6e:	11 f4       	brne	.+4      	; 0x3d74 <udi_cdc_multi_write_buf+0x34>
		size *=2;
    3d70:	aa 0c       	add	r10, r10
    3d72:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3d74:	68 94       	set
    3d76:	66 24       	eor	r6, r6
    3d78:	66 f8       	bld	r6, 6
    3d7a:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <udi_cdc_multi_is_tx_ready>
    3d82:	81 11       	cpse	r24, r1
    3d84:	07 c0       	rjmp	.+14     	; 0x3d94 <udi_cdc_multi_write_buf+0x54>
		if (!udi_cdc_data_running) {
    3d86:	80 91 6a 24 	lds	r24, 0x246A	; 0x80246a <udi_cdc_data_running>
    3d8a:	81 11       	cpse	r24, r1
    3d8c:	f7 cf       	rjmp	.-18     	; 0x3d7c <udi_cdc_multi_write_buf+0x3c>
    3d8e:	8a 2d       	mov	r24, r10
    3d90:	9b 2d       	mov	r25, r11
    3d92:	3a c0       	rjmp	.+116    	; 0x3e08 <udi_cdc_multi_write_buf+0xc8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3d94:	8f b7       	in	r24, 0x3f	; 63
    3d96:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3d98:	f8 94       	cli
	return flags;
    3d9a:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3d9c:	00 91 5d 23 	lds	r16, 0x235D	; 0x80235d <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3da0:	10 e0       	ldi	r17, 0x00	; 0
    3da2:	f8 01       	movw	r30, r16
    3da4:	ee 0f       	add	r30, r30
    3da6:	ff 1f       	adc	r31, r31
    3da8:	e2 5a       	subi	r30, 0xA2	; 162
    3daa:	fc 4d       	sbci	r31, 0xDC	; 220
    3dac:	e0 80       	ld	r14, Z
    3dae:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3db0:	c3 01       	movw	r24, r6
    3db2:	8e 19       	sub	r24, r14
    3db4:	9f 09       	sbc	r25, r15
    3db6:	65 01       	movw	r12, r10
    3db8:	8a 15       	cp	r24, r10
    3dba:	9b 05       	cpc	r25, r11
    3dbc:	08 f4       	brcc	.+2      	; 0x3dc0 <udi_cdc_multi_write_buf+0x80>
    3dbe:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    3dc0:	c8 01       	movw	r24, r16
    3dc2:	00 24       	eor	r0, r0
    3dc4:	96 95       	lsr	r25
    3dc6:	87 95       	ror	r24
    3dc8:	07 94       	ror	r0
    3dca:	96 95       	lsr	r25
    3dcc:	87 95       	ror	r24
    3dce:	07 94       	ror	r0
    3dd0:	98 2f       	mov	r25, r24
    3dd2:	80 2d       	mov	r24, r0
    3dd4:	8e 0d       	add	r24, r14
    3dd6:	9f 1d       	adc	r25, r15
    3dd8:	a6 01       	movw	r20, r12
    3dda:	b4 01       	movw	r22, r8
    3ddc:	8e 59       	subi	r24, 0x9E	; 158
    3dde:	9c 4d       	sbci	r25, 0xDC	; 220
    3de0:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    3de4:	00 0f       	add	r16, r16
    3de6:	11 1f       	adc	r17, r17
    3de8:	f8 01       	movw	r30, r16
    3dea:	e2 5a       	subi	r30, 0xA2	; 162
    3dec:	fc 4d       	sbci	r31, 0xDC	; 220
    3dee:	ec 0c       	add	r14, r12
    3df0:	fd 1c       	adc	r15, r13
    3df2:	e0 82       	st	Z, r14
    3df4:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3df6:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
    3df8:	8c 0c       	add	r8, r12
    3dfa:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    3dfc:	ac 18       	sub	r10, r12
    3dfe:	bd 08       	sbc	r11, r13

	if (size) {
    3e00:	09 f0       	breq	.+2      	; 0x3e04 <udi_cdc_multi_write_buf+0xc4>
    3e02:	bc cf       	rjmp	.-136    	; 0x3d7c <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
}
    3e08:	0f 90       	pop	r0
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	1f 91       	pop	r17
    3e10:	0f 91       	pop	r16
    3e12:	ff 90       	pop	r15
    3e14:	ef 90       	pop	r14
    3e16:	df 90       	pop	r13
    3e18:	cf 90       	pop	r12
    3e1a:	bf 90       	pop	r11
    3e1c:	af 90       	pop	r10
    3e1e:	9f 90       	pop	r9
    3e20:	8f 90       	pop	r8
    3e22:	7f 90       	pop	r7
    3e24:	6f 90       	pop	r6
    3e26:	5f 90       	pop	r5
    3e28:	08 95       	ret

00003e2a <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    3e2a:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
    3e2c:	bc 01       	movw	r22, r24
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <udi_cdc_multi_write_buf>
}
    3e34:	08 95       	ret

00003e36 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3e36:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    3e3a:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3e3e:	01 90       	ld	r0, Z+
    3e40:	f0 81       	ld	r31, Z
    3e42:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3e44:	22 81       	ldd	r18, Z+2	; 0x02
    3e46:	33 81       	ldd	r19, Z+3	; 0x03
    3e48:	2e 0f       	add	r18, r30
    3e4a:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	40 81       	ld	r20, Z
    3e50:	e4 0f       	add	r30, r20
    3e52:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3e54:	e2 17       	cp	r30, r18
    3e56:	f3 07       	cpc	r31, r19
    3e58:	a0 f4       	brcc	.+40     	; 0x3e82 <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3e5a:	81 81       	ldd	r24, Z+1	; 0x01
    3e5c:	84 30       	cpi	r24, 0x04	; 4
    3e5e:	a1 f0       	breq	.+40     	; 0x3e88 <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3e60:	86 13       	cpse	r24, r22
    3e62:	06 c0       	rjmp	.+12     	; 0x3e70 <udc_next_desc_in_iface+0x3a>
    3e64:	14 c0       	rjmp	.+40     	; 0x3e8e <udc_next_desc_in_iface+0x58>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3e66:	81 81       	ldd	r24, Z+1	; 0x01
    3e68:	84 30       	cpi	r24, 0x04	; 4
    3e6a:	a1 f0       	breq	.+40     	; 0x3e94 <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3e6c:	86 17       	cp	r24, r22
    3e6e:	a9 f0       	breq	.+42     	; 0x3e9a <udc_next_desc_in_iface+0x64>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3e70:	80 81       	ld	r24, Z
    3e72:	e8 0f       	add	r30, r24
    3e74:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3e76:	e2 17       	cp	r30, r18
    3e78:	f3 07       	cpc	r31, r19
    3e7a:	a8 f3       	brcs	.-22     	; 0x3e66 <udc_next_desc_in_iface+0x30>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	08 95       	ret
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	08 95       	ret
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	08 95       	ret
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3e8e:	8e 2f       	mov	r24, r30
    3e90:	9f 2f       	mov	r25, r31
    3e92:	08 95       	ret
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	08 95       	ret
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3e9a:	8e 2f       	mov	r24, r30
    3e9c:	9f 2f       	mov	r25, r31
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
    3e9e:	08 95       	ret

00003ea0 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3ea0:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    3ea4:	8f 77       	andi	r24, 0x7F	; 127
    3ea6:	0e 94 08 27 	call	0x4e10	; 0x4e10 <udd_set_address>
    3eaa:	08 95       	ret

00003eac <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3eac:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <udc_num_configuration>
    3eb0:	99 23       	and	r25, r25
    3eb2:	81 f1       	breq	.+96     	; 0x3f14 <udc_update_iface_desc+0x68>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3eb4:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    3eb8:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3ebc:	01 90       	ld	r0, Z+
    3ebe:	f0 81       	ld	r31, Z
    3ec0:	e0 2d       	mov	r30, r0
    3ec2:	94 81       	ldd	r25, Z+4	; 0x04
    3ec4:	89 17       	cp	r24, r25
    3ec6:	40 f5       	brcc	.+80     	; 0x3f18 <udc_update_iface_desc+0x6c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3ec8:	e0 93 86 24 	sts	0x2486, r30	; 0x802486 <udc_ptr_iface>
    3ecc:	f0 93 87 24 	sts	0x2487, r31	; 0x802487 <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3ed0:	22 81       	ldd	r18, Z+2	; 0x02
    3ed2:	33 81       	ldd	r19, Z+3	; 0x03
    3ed4:	2e 0f       	add	r18, r30
    3ed6:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3ed8:	e2 17       	cp	r30, r18
    3eda:	f3 07       	cpc	r31, r19
    3edc:	f8 f4       	brcc	.+62     	; 0x3f1c <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3ede:	91 81       	ldd	r25, Z+1	; 0x01
    3ee0:	94 30       	cpi	r25, 0x04	; 4
    3ee2:	61 f4       	brne	.+24     	; 0x3efc <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3ee4:	92 81       	ldd	r25, Z+2	; 0x02
    3ee6:	89 13       	cpse	r24, r25
    3ee8:	09 c0       	rjmp	.+18     	; 0x3efc <udc_update_iface_desc+0x50>
    3eea:	93 81       	ldd	r25, Z+3	; 0x03
    3eec:	96 13       	cpse	r25, r22
    3eee:	06 c0       	rjmp	.+12     	; 0x3efc <udc_update_iface_desc+0x50>
    3ef0:	e0 93 86 24 	sts	0x2486, r30	; 0x802486 <udc_ptr_iface>
    3ef4:	f0 93 87 24 	sts	0x2487, r31	; 0x802487 <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3efc:	90 81       	ld	r25, Z
    3efe:	e9 0f       	add	r30, r25
    3f00:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3f02:	e2 17       	cp	r30, r18
    3f04:	f3 07       	cpc	r31, r19
    3f06:	58 f3       	brcs	.-42     	; 0x3ede <udc_update_iface_desc+0x32>
    3f08:	e0 93 86 24 	sts	0x2486, r30	; 0x802486 <udc_ptr_iface>
    3f0c:	f0 93 87 24 	sts	0x2487, r31	; 0x802487 <udc_ptr_iface+0x1>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	08 95       	ret
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    3f18:	80 e0       	ldi	r24, 0x00	; 0
    3f1a:	08 95       	ret
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
}
    3f1e:	08 95       	ret

00003f20 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3f20:	ef 92       	push	r14
    3f22:	ff 92       	push	r15
    3f24:	1f 93       	push	r17
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    3f32:	18 2f       	mov	r17, r24
    3f34:	88 23       	and	r24, r24
    3f36:	91 f1       	breq	.+100    	; 0x3f9c <udc_iface_disable+0x7c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3f38:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    3f3c:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3f40:	ec 2f       	mov	r30, r28
    3f42:	f0 e0       	ldi	r31, 0x00	; 0
    3f44:	ee 0f       	add	r30, r30
    3f46:	ff 1f       	adc	r31, r31
    3f48:	12 96       	adiw	r26, 0x02	; 2
    3f4a:	8d 91       	ld	r24, X+
    3f4c:	9c 91       	ld	r25, X
    3f4e:	13 97       	sbiw	r26, 0x03	; 3
    3f50:	e8 0f       	add	r30, r24
    3f52:	f9 1f       	adc	r31, r25
    3f54:	e0 80       	ld	r14, Z
    3f56:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3f58:	d7 01       	movw	r26, r14
    3f5a:	16 96       	adiw	r26, 0x06	; 6
    3f5c:	ed 91       	ld	r30, X+
    3f5e:	fc 91       	ld	r31, X
    3f60:	17 97       	sbiw	r26, 0x07	; 7
    3f62:	19 95       	eicall
    3f64:	68 2f       	mov	r22, r24
    3f66:	8c 2f       	mov	r24, r28
    3f68:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    3f6c:	18 2f       	mov	r17, r24
    3f6e:	88 23       	and	r24, r24
    3f70:	a9 f0       	breq	.+42     	; 0x3f9c <udc_iface_disable+0x7c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3f72:	c0 91 86 24 	lds	r28, 0x2486	; 0x802486 <udc_ptr_iface>
    3f76:	d0 91 87 24 	lds	r29, 0x2487	; 0x802487 <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3f7a:	65 e0       	ldi	r22, 0x05	; 5
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <udc_next_desc_in_iface>
    3f82:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3f84:	89 2b       	or	r24, r25
    3f86:	21 f0       	breq	.+8      	; 0x3f90 <udc_iface_disable+0x70>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3f88:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8a:	0e 94 3a 29 	call	0x5274	; 0x5274 <udd_ep_free>
		}
    3f8e:	f5 cf       	rjmp	.-22     	; 0x3f7a <udc_iface_disable+0x5a>
	}
#endif

	// Disable interface
	udi_api->disable();
    3f90:	d7 01       	movw	r26, r14
    3f92:	12 96       	adiw	r26, 0x02	; 2
    3f94:	ed 91       	ld	r30, X+
    3f96:	fc 91       	ld	r31, X
    3f98:	13 97       	sbiw	r26, 0x03	; 3
    3f9a:	19 95       	eicall
	return true;
}
    3f9c:	81 2f       	mov	r24, r17
    3f9e:	df 91       	pop	r29
    3fa0:	cf 91       	pop	r28
    3fa2:	1f 91       	pop	r17
    3fa4:	ff 90       	pop	r15
    3fa6:	ef 90       	pop	r14
    3fa8:	08 95       	ret

00003faa <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3faa:	1f 93       	push	r17
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3fb2:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    3fb6:	88 23       	and	r24, r24
    3fb8:	49 f1       	breq	.+82     	; 0x400c <__stack+0xd>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3fba:	c0 91 86 24 	lds	r28, 0x2486	; 0x802486 <udc_ptr_iface>
    3fbe:	d0 91 87 24 	lds	r29, 0x2487	; 0x802487 <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3fc2:	65 e0       	ldi	r22, 0x05	; 5
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <udc_next_desc_in_iface>
    3fca:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3fcc:	89 2b       	or	r24, r25
    3fce:	49 f0       	breq	.+18     	; 0x3fe2 <udc_iface_enable+0x38>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3fd0:	4c 81       	ldd	r20, Y+4	; 0x04
    3fd2:	5d 81       	ldd	r21, Y+5	; 0x05
    3fd4:	6b 81       	ldd	r22, Y+3	; 0x03
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <udd_ep_alloc>
    3fdc:	81 11       	cpse	r24, r1
    3fde:	f1 cf       	rjmp	.-30     	; 0x3fc2 <udc_iface_enable+0x18>
    3fe0:	15 c0       	rjmp	.+42     	; 0x400c <__stack+0xd>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3fe2:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    3fe6:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    3fea:	e1 2f       	mov	r30, r17
    3fec:	f0 e0       	ldi	r31, 0x00	; 0
    3fee:	ee 0f       	add	r30, r30
    3ff0:	ff 1f       	adc	r31, r31
    3ff2:	12 96       	adiw	r26, 0x02	; 2
    3ff4:	8d 91       	ld	r24, X+
    3ff6:	9c 91       	ld	r25, X
    3ff8:	13 97       	sbiw	r26, 0x03	; 3
    3ffa:	e8 0f       	add	r30, r24
    3ffc:	f9 1f       	adc	r31, r25
    3ffe:	01 90       	ld	r0, Z+
    4000:	f0 81       	ld	r31, Z
    4002:	e0 2d       	mov	r30, r0
    4004:	01 90       	ld	r0, Z+
    4006:	f0 81       	ld	r31, Z
    4008:	e0 2d       	mov	r30, r0
    400a:	19 95       	eicall
}
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	1f 91       	pop	r17
    4012:	08 95       	ret

00004014 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    4014:	80 91 86 24 	lds	r24, 0x2486	; 0x802486 <udc_ptr_iface>
    4018:	90 91 87 24 	lds	r25, 0x2487	; 0x802487 <udc_ptr_iface+0x1>
    401c:	08 95       	ret

0000401e <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    401e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <udd_enable>
    4022:	08 95       	ret

00004024 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    4024:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4026:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    402a:	88 23       	and	r24, r24
    402c:	c9 f0       	breq	.+50     	; 0x4060 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    402e:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    4032:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4036:	01 90       	ld	r0, Z+
    4038:	f0 81       	ld	r31, Z
    403a:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    403c:	84 81       	ldd	r24, Z+4	; 0x04
    403e:	88 23       	and	r24, r24
    4040:	79 f0       	breq	.+30     	; 0x4060 <udc_reset+0x3c>
    4042:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    4044:	8c 2f       	mov	r24, r28
    4046:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    404a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    404c:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    4050:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4054:	01 90       	ld	r0, Z+
    4056:	f0 81       	ld	r31, Z
    4058:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    405a:	84 81       	ldd	r24, Z+4	; 0x04
    405c:	c8 17       	cp	r28, r24
    405e:	90 f3       	brcs	.-28     	; 0x4044 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    4060:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udc_device_status>
    406c:	90 93 8f 24 	sts	0x248F, r25	; 0x80248f <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    4070:	cf 91       	pop	r28
    4072:	08 95       	ret

00004074 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    4074:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <udd_disable>
	udc_reset();
    4078:	0e 94 12 20 	call	0x4024	; 0x4024 <udc_reset>
    407c:	08 95       	ret

0000407e <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    407e:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    4080:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4084:	88 23       	and	r24, r24
    4086:	49 f1       	breq	.+82     	; 0x40da <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4088:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    408c:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4090:	ed 91       	ld	r30, X+
    4092:	fc 91       	ld	r31, X
    4094:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    4096:	84 81       	ldd	r24, Z+4	; 0x04
    4098:	88 23       	and	r24, r24
    409a:	f9 f0       	breq	.+62     	; 0x40da <udc_sof_notify+0x5c>
    409c:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    409e:	ec 2f       	mov	r30, r28
    40a0:	f0 e0       	ldi	r31, 0x00	; 0
    40a2:	ee 0f       	add	r30, r30
    40a4:	ff 1f       	adc	r31, r31
    40a6:	12 96       	adiw	r26, 0x02	; 2
    40a8:	8d 91       	ld	r24, X+
    40aa:	9c 91       	ld	r25, X
    40ac:	13 97       	sbiw	r26, 0x03	; 3
    40ae:	e8 0f       	add	r30, r24
    40b0:	f9 1f       	adc	r31, r25
    40b2:	01 90       	ld	r0, Z+
    40b4:	f0 81       	ld	r31, Z
    40b6:	e0 2d       	mov	r30, r0
    40b8:	00 84       	ldd	r0, Z+8	; 0x08
    40ba:	f1 85       	ldd	r31, Z+9	; 0x09
    40bc:	e0 2d       	mov	r30, r0
    40be:	30 97       	sbiw	r30, 0x00	; 0
    40c0:	09 f0       	breq	.+2      	; 0x40c4 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    40c2:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    40c4:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    40c6:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    40ca:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    40ce:	ed 91       	ld	r30, X+
    40d0:	fc 91       	ld	r31, X
    40d2:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    40d4:	84 81       	ldd	r24, Z+4	; 0x04
    40d6:	c8 17       	cp	r28, r24
    40d8:	10 f3       	brcs	.-60     	; 0x409e <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    40da:	cf 91       	pop	r28
    40dc:	08 95       	ret

000040de <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    40de:	0f 93       	push	r16
    40e0:	1f 93       	push	r17
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    40e6:	e1 ed       	ldi	r30, 0xD1	; 209
    40e8:	f5 e2       	ldi	r31, 0x25	; 37
    40ea:	12 86       	std	Z+10, r1	; 0x0a
    40ec:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    40ee:	14 86       	std	Z+12, r1	; 0x0c
    40f0:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    40f2:	16 86       	std	Z+14, r1	; 0x0e
    40f4:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    40f6:	80 81       	ld	r24, Z
    40f8:	88 23       	and	r24, r24
    40fa:	0c f0       	brlt	.+2      	; 0x40fe <udc_process_setup+0x20>
    40fc:	81 c2       	rjmp	.+1282   	; 0x4600 <udc_process_setup+0x522>
		if (udd_g_ctrlreq.req.wLength == 0) {
    40fe:	20 91 d7 25 	lds	r18, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4102:	30 91 d8 25 	lds	r19, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4106:	21 15       	cp	r18, r1
    4108:	31 05       	cpc	r19, r1
    410a:	09 f0       	breq	.+2      	; 0x410e <udc_process_setup+0x30>
    410c:	74 c2       	rjmp	.+1256   	; 0x45f6 <udc_process_setup+0x518>
    410e:	6b c2       	rjmp	.+1238   	; 0x45e6 <udc_process_setup+0x508>
    4110:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4112:	09 f0       	breq	.+2      	; 0x4116 <udc_process_setup+0x38>
    4114:	ab c0       	rjmp	.+342    	; 0x426c <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4116:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    411a:	96 30       	cpi	r25, 0x06	; 6
    411c:	81 f0       	breq	.+32     	; 0x413e <udc_process_setup+0x60>
    411e:	98 30       	cpi	r25, 0x08	; 8
    4120:	09 f4       	brne	.+2      	; 0x4124 <udc_process_setup+0x46>
    4122:	99 c0       	rjmp	.+306    	; 0x4256 <udc_process_setup+0x178>
    4124:	91 11       	cpse	r25, r1
    4126:	a2 c0       	rjmp	.+324    	; 0x426c <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    4128:	22 30       	cpi	r18, 0x02	; 2
    412a:	31 05       	cpc	r19, r1
    412c:	09 f0       	breq	.+2      	; 0x4130 <udc_process_setup+0x52>
    412e:	16 c2       	rjmp	.+1068   	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    4130:	62 e0       	ldi	r22, 0x02	; 2
    4132:	70 e0       	ldi	r23, 0x00	; 0
    4134:	8e e8       	ldi	r24, 0x8E	; 142
    4136:	94 e2       	ldi	r25, 0x24	; 36
    4138:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    413c:	6a c2       	rjmp	.+1236   	; 0x4612 <udc_process_setup+0x534>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    413e:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    4142:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    4146:	29 2f       	mov	r18, r25
    4148:	33 27       	eor	r19, r19
    414a:	22 30       	cpi	r18, 0x02	; 2
    414c:	31 05       	cpc	r19, r1
    414e:	b1 f0       	breq	.+44     	; 0x417c <udc_process_setup+0x9e>
    4150:	20 f4       	brcc	.+8      	; 0x415a <udc_process_setup+0x7c>
    4152:	21 30       	cpi	r18, 0x01	; 1
    4154:	31 05       	cpc	r19, r1
    4156:	41 f0       	breq	.+16     	; 0x4168 <udc_process_setup+0x8a>
    4158:	c1 c1       	rjmp	.+898    	; 0x44dc <udc_process_setup+0x3fe>
    415a:	23 30       	cpi	r18, 0x03	; 3
    415c:	31 05       	cpc	r19, r1
    415e:	f1 f1       	breq	.+124    	; 0x41dc <udc_process_setup+0xfe>
    4160:	2f 30       	cpi	r18, 0x0F	; 15
    4162:	31 05       	cpc	r19, r1
    4164:	61 f1       	breq	.+88     	; 0x41be <udc_process_setup+0xe0>
    4166:	ba c1       	rjmp	.+884    	; 0x44dc <udc_process_setup+0x3fe>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    4168:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <udc_config>
    416c:	90 91 53 20 	lds	r25, 0x2053	; 0x802053 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    4170:	dc 01       	movw	r26, r24
    4172:	6c 91       	ld	r22, X
    4174:	70 e0       	ldi	r23, 0x00	; 0
    4176:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    417a:	5e c0       	rjmp	.+188    	; 0x4238 <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    417c:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <udc_config>
    4180:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <udc_config+0x1>
    4184:	21 89       	ldd	r18, Z+17	; 0x11
    4186:	82 17       	cp	r24, r18
    4188:	08 f0       	brcs	.+2      	; 0x418c <udc_process_setup+0xae>
    418a:	e8 c1       	rjmp	.+976    	; 0x455c <udc_process_setup+0x47e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    418c:	99 27       	eor	r25, r25
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	88 0f       	add	r24, r24
    4194:	99 1f       	adc	r25, r25
    4196:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <udc_config+0x2>
    419a:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <udc_config+0x3>
    419e:	e8 0f       	add	r30, r24
    41a0:	f9 1f       	adc	r31, r25
    41a2:	80 81       	ld	r24, Z
    41a4:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    41a6:	fc 01       	movw	r30, r24
    41a8:	62 81       	ldd	r22, Z+2	; 0x02
    41aa:	73 81       	ldd	r23, Z+3	; 0x03
    41ac:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    41b0:	e0 91 d9 25 	lds	r30, 0x25D9	; 0x8025d9 <udd_g_ctrlreq+0x8>
    41b4:	f0 91 da 25 	lds	r31, 0x25DA	; 0x8025da <udd_g_ctrlreq+0x9>
    41b8:	82 e0       	ldi	r24, 0x02	; 2
    41ba:	81 83       	std	Z+1, r24	; 0x01
    41bc:	3d c0       	rjmp	.+122    	; 0x4238 <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    41be:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <udc_config+0x4>
    41c2:	90 91 57 20 	lds	r25, 0x2057	; 0x802057 <udc_config+0x5>
    41c6:	00 97       	sbiw	r24, 0x00	; 0
    41c8:	09 f4       	brne	.+2      	; 0x41cc <udc_process_setup+0xee>
    41ca:	c8 c1       	rjmp	.+912    	; 0x455c <udc_process_setup+0x47e>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    41cc:	dc 01       	movw	r26, r24
    41ce:	12 96       	adiw	r26, 0x02	; 2
    41d0:	6d 91       	ld	r22, X+
    41d2:	7c 91       	ld	r23, X
    41d4:	13 97       	sbiw	r26, 0x03	; 3
    41d6:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    41da:	2e c0       	rjmp	.+92     	; 0x4238 <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    41dc:	99 27       	eor	r25, r25
    41de:	81 30       	cpi	r24, 0x01	; 1
    41e0:	91 05       	cpc	r25, r1
    41e2:	99 f0       	breq	.+38     	; 0x420a <udc_process_setup+0x12c>
    41e4:	58 f0       	brcs	.+22     	; 0x41fc <udc_process_setup+0x11e>
    41e6:	82 30       	cpi	r24, 0x02	; 2
    41e8:	91 05       	cpc	r25, r1
    41ea:	09 f4       	brne	.+2      	; 0x41ee <udc_process_setup+0x110>
    41ec:	0e c2       	rjmp	.+1052   	; 0x460a <udc_process_setup+0x52c>
    41ee:	03 97       	sbiw	r24, 0x03	; 3
    41f0:	09 f0       	breq	.+2      	; 0x41f4 <udc_process_setup+0x116>
    41f2:	7d c1       	rjmp	.+762    	; 0x44ee <udc_process_setup+0x410>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    41f4:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    41f6:	e9 e3       	ldi	r30, 0x39	; 57
    41f8:	f3 e2       	ldi	r31, 0x23	; 35
    41fa:	0a c0       	rjmp	.+20     	; 0x4210 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    41fc:	64 e0       	ldi	r22, 0x04	; 4
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	8e e4       	ldi	r24, 0x4E	; 78
    4202:	90 e2       	ldi	r25, 0x20	; 32
    4204:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    4208:	17 c0       	rjmp	.+46     	; 0x4238 <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    420a:	e8 e4       	ldi	r30, 0x48	; 72
    420c:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    420e:	35 e0       	ldi	r19, 0x05	; 5
    4210:	a0 e2       	ldi	r26, 0x20	; 32
    4212:	b0 e2       	ldi	r27, 0x20	; 32
    4214:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    4216:	81 91       	ld	r24, Z+
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	8d 93       	st	X+, r24
    421c:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    421e:	2f 5f       	subi	r18, 0xFF	; 255
    4220:	23 17       	cp	r18, r19
    4222:	c8 f3       	brcs	.-14     	; 0x4216 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    4224:	63 2f       	mov	r22, r19
    4226:	66 0f       	add	r22, r22
    4228:	6e 5f       	subi	r22, 0xFE	; 254
    422a:	60 93 1e 20 	sts	0x201E, r22	; 0x80201e <udc_string_desc>
		udd_set_setup_payload(
    422e:	70 e0       	ldi	r23, 0x00	; 0
    4230:	8e e1       	ldi	r24, 0x1E	; 30
    4232:	90 e2       	ldi	r25, 0x20	; 32
    4234:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    4238:	e1 ed       	ldi	r30, 0xD1	; 209
    423a:	f5 e2       	ldi	r31, 0x25	; 37
    423c:	86 81       	ldd	r24, Z+6	; 0x06
    423e:	97 81       	ldd	r25, Z+7	; 0x07
    4240:	22 85       	ldd	r18, Z+10	; 0x0a
    4242:	33 85       	ldd	r19, Z+11	; 0x0b
    4244:	82 17       	cp	r24, r18
    4246:	93 07       	cpc	r25, r19
    4248:	08 f0       	brcs	.+2      	; 0x424c <udc_process_setup+0x16e>
    424a:	e3 c1       	rjmp	.+966    	; 0x4612 <udc_process_setup+0x534>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    424c:	80 93 db 25 	sts	0x25DB, r24	; 0x8025db <udd_g_ctrlreq+0xa>
    4250:	90 93 dc 25 	sts	0x25DC, r25	; 0x8025dc <udd_g_ctrlreq+0xb>
    4254:	de c1       	rjmp	.+956    	; 0x4612 <udc_process_setup+0x534>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    4256:	21 30       	cpi	r18, 0x01	; 1
    4258:	31 05       	cpc	r19, r1
    425a:	09 f0       	breq	.+2      	; 0x425e <udc_process_setup+0x180>
    425c:	7f c1       	rjmp	.+766    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    425e:	61 e0       	ldi	r22, 0x01	; 1
    4260:	70 e0       	ldi	r23, 0x00	; 0
    4262:	8a e8       	ldi	r24, 0x8A	; 138
    4264:	94 e2       	ldi	r25, 0x24	; 36
    4266:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    426a:	d3 c1       	rjmp	.+934    	; 0x4612 <udc_process_setup+0x534>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    426c:	81 30       	cpi	r24, 0x01	; 1
    426e:	f1 f5       	brne	.+124    	; 0x42ec <udc_process_setup+0x20e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4270:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    4274:	9a 30       	cpi	r25, 0x0A	; 10
    4276:	d1 f5       	brne	.+116    	; 0x42ec <udc_process_setup+0x20e>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    4278:	21 30       	cpi	r18, 0x01	; 1
    427a:	31 05       	cpc	r19, r1
    427c:	09 f0       	breq	.+2      	; 0x4280 <udc_process_setup+0x1a2>
    427e:	3c c1       	rjmp	.+632    	; 0x44f8 <udc_process_setup+0x41a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    4280:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4284:	88 23       	and	r24, r24
    4286:	09 f4       	brne	.+2      	; 0x428a <udc_process_setup+0x1ac>
    4288:	37 c1       	rjmp	.+622    	; 0x44f8 <udc_process_setup+0x41a>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    428a:	c0 91 d5 25 	lds	r28, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    428e:	d0 91 d6 25 	lds	r29, 0x25D6	; 0x8025d6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4292:	00 91 88 24 	lds	r16, 0x2488	; 0x802488 <udc_ptr_conf>
    4296:	10 91 89 24 	lds	r17, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    429a:	d8 01       	movw	r26, r16
    429c:	ed 91       	ld	r30, X+
    429e:	fc 91       	ld	r31, X
    42a0:	84 81       	ldd	r24, Z+4	; 0x04
    42a2:	c8 17       	cp	r28, r24
    42a4:	08 f0       	brcs	.+2      	; 0x42a8 <udc_process_setup+0x1ca>
    42a6:	28 c1       	rjmp	.+592    	; 0x44f8 <udc_process_setup+0x41a>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	8c 2f       	mov	r24, r28
    42ac:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    42b0:	88 23       	and	r24, r24
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <udc_process_setup+0x1d8>
    42b4:	1c c1       	rjmp	.+568    	; 0x44ee <udc_process_setup+0x410>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    42b6:	ce 01       	movw	r24, r28
    42b8:	99 27       	eor	r25, r25
    42ba:	88 0f       	add	r24, r24
    42bc:	99 1f       	adc	r25, r25
    42be:	d8 01       	movw	r26, r16
    42c0:	12 96       	adiw	r26, 0x02	; 2
    42c2:	ed 91       	ld	r30, X+
    42c4:	fc 91       	ld	r31, X
    42c6:	13 97       	sbiw	r26, 0x03	; 3
    42c8:	e8 0f       	add	r30, r24
    42ca:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    42cc:	01 90       	ld	r0, Z+
    42ce:	f0 81       	ld	r31, Z
    42d0:	e0 2d       	mov	r30, r0
    42d2:	86 81       	ldd	r24, Z+6	; 0x06
    42d4:	97 81       	ldd	r25, Z+7	; 0x07
    42d6:	fc 01       	movw	r30, r24
    42d8:	19 95       	eicall
    42da:	80 93 8c 24 	sts	0x248C, r24	; 0x80248c <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    42de:	61 e0       	ldi	r22, 0x01	; 1
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	8c e8       	ldi	r24, 0x8C	; 140
    42e4:	94 e2       	ldi	r25, 0x24	; 36
    42e6:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    42ea:	93 c1       	rjmp	.+806    	; 0x4612 <udc_process_setup+0x534>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    42ec:	82 30       	cpi	r24, 0x02	; 2
    42ee:	09 f0       	breq	.+2      	; 0x42f2 <udc_process_setup+0x214>
    42f0:	fe c0       	rjmp	.+508    	; 0x44ee <udc_process_setup+0x410>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    42f2:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    42f6:	81 11       	cpse	r24, r1
    42f8:	f3 c0       	rjmp	.+486    	; 0x44e0 <udc_process_setup+0x402>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    42fa:	22 30       	cpi	r18, 0x02	; 2
    42fc:	31 05       	cpc	r19, r1
    42fe:	09 f0       	breq	.+2      	; 0x4302 <udc_process_setup+0x224>
    4300:	2d c1       	rjmp	.+602    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4302:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    4306:	0e 94 be 27 	call	0x4f7c	; 0x4f7c <udd_ep_is_halted>
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	80 93 84 24 	sts	0x2484, r24	; 0x802484 <udc_ep_status.4927>
    4310:	90 93 85 24 	sts	0x2485, r25	; 0x802485 <udc_ep_status.4927+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4314:	62 e0       	ldi	r22, 0x02	; 2
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	84 e8       	ldi	r24, 0x84	; 132
    431a:	94 e2       	ldi	r25, 0x24	; 36
    431c:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <udd_set_setup_payload>
    4320:	78 c1       	rjmp	.+752    	; 0x4612 <udc_process_setup+0x534>
    4322:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4324:	09 f0       	breq	.+2      	; 0x4328 <udc_process_setup+0x24a>
    4326:	86 c0       	rjmp	.+268    	; 0x4434 <udc_process_setup+0x356>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4328:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    432c:	93 30       	cpi	r25, 0x03	; 3
    432e:	09 f4       	brne	.+2      	; 0x4332 <udc_process_setup+0x254>
    4330:	d9 c0       	rjmp	.+434    	; 0x44e4 <udc_process_setup+0x406>
    4332:	18 f4       	brcc	.+6      	; 0x433a <udc_process_setup+0x25c>
    4334:	91 30       	cpi	r25, 0x01	; 1
    4336:	a1 f0       	breq	.+40     	; 0x4360 <udc_process_setup+0x282>
    4338:	7d c0       	rjmp	.+250    	; 0x4434 <udc_process_setup+0x356>
    433a:	95 30       	cpi	r25, 0x05	; 5
    433c:	19 f0       	breq	.+6      	; 0x4344 <udc_process_setup+0x266>
    433e:	99 30       	cpi	r25, 0x09	; 9
    4340:	39 f1       	breq	.+78     	; 0x4390 <udc_process_setup+0x2b2>
    4342:	78 c0       	rjmp	.+240    	; 0x4434 <udc_process_setup+0x356>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4344:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4348:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    434c:	89 2b       	or	r24, r25
    434e:	09 f0       	breq	.+2      	; 0x4352 <udc_process_setup+0x274>
    4350:	05 c1       	rjmp	.+522    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4352:	80 e5       	ldi	r24, 0x50	; 80
    4354:	9f e1       	ldi	r25, 0x1F	; 31
    4356:	80 93 dd 25 	sts	0x25DD, r24	; 0x8025dd <udd_g_ctrlreq+0xc>
    435a:	90 93 de 25 	sts	0x25DE, r25	; 0x8025de <udd_g_ctrlreq+0xd>
    435e:	59 c1       	rjmp	.+690    	; 0x4612 <udc_process_setup+0x534>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4360:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4364:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4368:	89 2b       	or	r24, r25
    436a:	09 f0       	breq	.+2      	; 0x436e <udc_process_setup+0x290>
    436c:	f7 c0       	rjmp	.+494    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    436e:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    4372:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	09 f0       	breq	.+2      	; 0x437c <udc_process_setup+0x29e>
    437a:	f0 c0       	rjmp	.+480    	; 0x455c <udc_process_setup+0x47e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    437c:	80 91 8e 24 	lds	r24, 0x248E	; 0x80248e <udc_device_status>
    4380:	90 91 8f 24 	lds	r25, 0x248F	; 0x80248f <udc_device_status+0x1>
    4384:	8d 7f       	andi	r24, 0xFD	; 253
    4386:	80 93 8e 24 	sts	0x248E, r24	; 0x80248e <udc_device_status>
    438a:	90 93 8f 24 	sts	0x248F, r25	; 0x80248f <udc_device_status+0x1>
    438e:	41 c1       	rjmp	.+642    	; 0x4612 <udc_process_setup+0x534>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    4390:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4394:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4398:	89 2b       	or	r24, r25
    439a:	09 f0       	breq	.+2      	; 0x439e <udc_process_setup+0x2c0>
    439c:	df c0       	rjmp	.+446    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    439e:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <udd_getaddress>
    43a2:	88 23       	and	r24, r24
    43a4:	09 f4       	brne	.+2      	; 0x43a8 <udc_process_setup+0x2ca>
    43a6:	a3 c0       	rjmp	.+326    	; 0x44ee <udc_process_setup+0x410>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43a8:	20 91 d3 25 	lds	r18, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    43ac:	30 91 d4 25 	lds	r19, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    43b0:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    43b2:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <udc_config>
    43b6:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    43ba:	81 89       	ldd	r24, Z+17	; 0x11
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	82 17       	cp	r24, r18
    43c0:	93 07       	cpc	r25, r19
    43c2:	08 f4       	brcc	.+2      	; 0x43c6 <udc_process_setup+0x2e8>
    43c4:	94 c0       	rjmp	.+296    	; 0x44ee <udc_process_setup+0x410>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    43c6:	0e 94 12 20 	call	0x4024	; 0x4024 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    43ca:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    43ce:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    43d2:	80 93 8a 24 	sts	0x248A, r24	; 0x80248a <udc_num_configuration>
	if (udc_num_configuration == 0) {
    43d6:	88 23       	and	r24, r24
    43d8:	09 f4       	brne	.+2      	; 0x43dc <udc_process_setup+0x2fe>
    43da:	1b c1       	rjmp	.+566    	; 0x4612 <udc_process_setup+0x534>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    43dc:	99 27       	eor	r25, r25
    43de:	81 50       	subi	r24, 0x01	; 1
    43e0:	90 4c       	sbci	r25, 0xC0	; 192
    43e2:	88 0f       	add	r24, r24
    43e4:	99 1f       	adc	r25, r25
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <udc_config+0x2>
    43ee:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <udc_config+0x3>
    43f2:	e8 0f       	add	r30, r24
    43f4:	f9 1f       	adc	r31, r25
    43f6:	e0 93 88 24 	sts	0x2488, r30	; 0x802488 <udc_ptr_conf>
    43fa:	f0 93 89 24 	sts	0x2489, r31	; 0x802489 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    43fe:	01 90       	ld	r0, Z+
    4400:	f0 81       	ld	r31, Z
    4402:	e0 2d       	mov	r30, r0
    4404:	84 81       	ldd	r24, Z+4	; 0x04
    4406:	88 23       	and	r24, r24
    4408:	09 f4       	brne	.+2      	; 0x440c <udc_process_setup+0x32e>
    440a:	03 c1       	rjmp	.+518    	; 0x4612 <udc_process_setup+0x534>
    440c:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    440e:	60 e0       	ldi	r22, 0x00	; 0
    4410:	8c 2f       	mov	r24, r28
    4412:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <udc_iface_enable>
    4416:	88 23       	and	r24, r24
    4418:	09 f4       	brne	.+2      	; 0x441c <udc_process_setup+0x33e>
    441a:	69 c0       	rjmp	.+210    	; 0x44ee <udc_process_setup+0x410>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    441c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    441e:	e0 91 88 24 	lds	r30, 0x2488	; 0x802488 <udc_ptr_conf>
    4422:	f0 91 89 24 	lds	r31, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4426:	01 90       	ld	r0, Z+
    4428:	f0 81       	ld	r31, Z
    442a:	e0 2d       	mov	r30, r0
    442c:	84 81       	ldd	r24, Z+4	; 0x04
    442e:	c8 17       	cp	r28, r24
    4430:	70 f3       	brcs	.-36     	; 0x440e <udc_process_setup+0x330>
    4432:	ef c0       	rjmp	.+478    	; 0x4612 <udc_process_setup+0x534>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4434:	81 30       	cpi	r24, 0x01	; 1
    4436:	f9 f4       	brne	.+62     	; 0x4476 <udc_process_setup+0x398>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    4438:	90 91 d2 25 	lds	r25, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    443c:	9b 30       	cpi	r25, 0x0B	; 11
    443e:	d9 f4       	brne	.+54     	; 0x4476 <udc_process_setup+0x398>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4440:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4444:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4448:	89 2b       	or	r24, r25
    444a:	09 f0       	breq	.+2      	; 0x444e <udc_process_setup+0x370>
    444c:	55 c0       	rjmp	.+170    	; 0x44f8 <udc_process_setup+0x41a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    444e:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    4452:	88 23       	and	r24, r24
    4454:	09 f4       	brne	.+2      	; 0x4458 <udc_process_setup+0x37a>
    4456:	50 c0       	rjmp	.+160    	; 0x44f8 <udc_process_setup+0x41a>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4458:	e1 ed       	ldi	r30, 0xD1	; 209
    445a:	f5 e2       	ldi	r31, 0x25	; 37
    445c:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    445e:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4460:	8c 2f       	mov	r24, r28
    4462:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <udc_iface_disable>
    4466:	88 23       	and	r24, r24
    4468:	09 f4       	brne	.+2      	; 0x446c <udc_process_setup+0x38e>
    446a:	41 c0       	rjmp	.+130    	; 0x44ee <udc_process_setup+0x410>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    446c:	6d 2f       	mov	r22, r29
    446e:	8c 2f       	mov	r24, r28
    4470:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <udc_iface_enable>
    4474:	3a c0       	rjmp	.+116    	; 0x44ea <udc_process_setup+0x40c>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    4476:	82 30       	cpi	r24, 0x02	; 2
    4478:	d1 f5       	brne	.+116    	; 0x44ee <udc_process_setup+0x410>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    447a:	80 91 d2 25 	lds	r24, 0x25D2	; 0x8025d2 <udd_g_ctrlreq+0x1>
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	19 f0       	breq	.+6      	; 0x4488 <udc_process_setup+0x3aa>
    4482:	83 30       	cpi	r24, 0x03	; 3
    4484:	a1 f0       	breq	.+40     	; 0x44ae <udc_process_setup+0x3d0>
    4486:	30 c0       	rjmp	.+96     	; 0x44e8 <udc_process_setup+0x40a>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4488:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    448c:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4490:	89 2b       	or	r24, r25
    4492:	09 f0       	breq	.+2      	; 0x4496 <udc_process_setup+0x3b8>
    4494:	63 c0       	rjmp	.+198    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4496:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    449a:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    449e:	89 2b       	or	r24, r25
    44a0:	09 f0       	breq	.+2      	; 0x44a4 <udc_process_setup+0x3c6>
    44a2:	5c c0       	rjmp	.+184    	; 0x455c <udc_process_setup+0x47e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44a4:	80 91 d5 25 	lds	r24, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    44a8:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <udd_ep_clear_halt>
    44ac:	1e c0       	rjmp	.+60     	; 0x44ea <udc_process_setup+0x40c>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    44ae:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    44b2:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    44b6:	89 2b       	or	r24, r25
    44b8:	09 f0       	breq	.+2      	; 0x44bc <udc_process_setup+0x3de>
    44ba:	50 c0       	rjmp	.+160    	; 0x455c <udc_process_setup+0x47e>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    44bc:	80 91 d3 25 	lds	r24, 0x25D3	; 0x8025d3 <udd_g_ctrlreq+0x2>
    44c0:	90 91 d4 25 	lds	r25, 0x25D4	; 0x8025d4 <udd_g_ctrlreq+0x3>
    44c4:	89 2b       	or	r24, r25
    44c6:	09 f0       	breq	.+2      	; 0x44ca <udc_process_setup+0x3ec>
    44c8:	49 c0       	rjmp	.+146    	; 0x455c <udc_process_setup+0x47e>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    44ca:	c1 ed       	ldi	r28, 0xD1	; 209
    44cc:	d5 e2       	ldi	r29, 0x25	; 37
    44ce:	8c 81       	ldd	r24, Y+4	; 0x04
    44d0:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    44d4:	8c 81       	ldd	r24, Y+4	; 0x04
    44d6:	0e 94 57 29 	call	0x52ae	; 0x52ae <udd_ep_set_halt>
    44da:	07 c0       	rjmp	.+14     	; 0x44ea <udc_process_setup+0x40c>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	05 c0       	rjmp	.+10     	; 0x44ea <udc_process_setup+0x40c>
				break;
			}
		}
#endif
	}
	return false;
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	03 c0       	rjmp	.+6      	; 0x44ea <udc_process_setup+0x40c>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    44e4:	80 e0       	ldi	r24, 0x00	; 0
    44e6:	01 c0       	rjmp	.+2      	; 0x44ea <udc_process_setup+0x40c>
				break;
			}
		}
#endif
	}
	return false;
    44e8:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    44ea:	81 11       	cpse	r24, r1
    44ec:	93 c0       	rjmp	.+294    	; 0x4614 <udc_process_setup+0x536>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    44ee:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    44f2:	8f 71       	andi	r24, 0x1F	; 31
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	91 f5       	brne	.+100    	; 0x455c <udc_process_setup+0x47e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    44f8:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    44fc:	88 23       	and	r24, r24
    44fe:	09 f4       	brne	.+2      	; 0x4502 <udc_process_setup+0x424>
    4500:	74 c0       	rjmp	.+232    	; 0x45ea <udc_process_setup+0x50c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4502:	00 91 d5 25 	lds	r16, 0x25D5	; 0x8025d5 <udd_g_ctrlreq+0x4>
    4506:	10 91 d6 25 	lds	r17, 0x25D6	; 0x8025d6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    450a:	c0 91 88 24 	lds	r28, 0x2488	; 0x802488 <udc_ptr_conf>
    450e:	d0 91 89 24 	lds	r29, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4512:	e8 81       	ld	r30, Y
    4514:	f9 81       	ldd	r31, Y+1	; 0x01
    4516:	84 81       	ldd	r24, Z+4	; 0x04
    4518:	08 17       	cp	r16, r24
    451a:	08 f0       	brcs	.+2      	; 0x451e <udc_process_setup+0x440>
    451c:	68 c0       	rjmp	.+208    	; 0x45ee <udc_process_setup+0x510>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	80 2f       	mov	r24, r16
    4522:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    4526:	88 23       	and	r24, r24
    4528:	c9 f0       	breq	.+50     	; 0x455c <udc_process_setup+0x47e>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    452a:	f8 01       	movw	r30, r16
    452c:	ff 27       	eor	r31, r31
    452e:	cf 01       	movw	r24, r30
    4530:	88 0f       	add	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	ea 81       	ldd	r30, Y+2	; 0x02
    4536:	fb 81       	ldd	r31, Y+3	; 0x03
    4538:	e8 0f       	add	r30, r24
    453a:	f9 1f       	adc	r31, r25
    453c:	c0 81       	ld	r28, Z
    453e:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4540:	ee 81       	ldd	r30, Y+6	; 0x06
    4542:	ff 81       	ldd	r31, Y+7	; 0x07
    4544:	19 95       	eicall
    4546:	68 2f       	mov	r22, r24
    4548:	80 2f       	mov	r24, r16
    454a:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    454e:	88 23       	and	r24, r24
    4550:	29 f0       	breq	.+10     	; 0x455c <udc_process_setup+0x47e>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4552:	ec 81       	ldd	r30, Y+4	; 0x04
    4554:	fd 81       	ldd	r31, Y+5	; 0x05
    4556:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    4558:	81 11       	cpse	r24, r1
    455a:	5c c0       	rjmp	.+184    	; 0x4614 <udc_process_setup+0x536>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    455c:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    4560:	8f 71       	andi	r24, 0x1F	; 31
    4562:	82 30       	cpi	r24, 0x02	; 2
    4564:	09 f0       	breq	.+2      	; 0x4568 <udc_process_setup+0x48a>
    4566:	45 c0       	rjmp	.+138    	; 0x45f2 <udc_process_setup+0x514>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4568:	80 91 8a 24 	lds	r24, 0x248A	; 0x80248a <udc_num_configuration>
    456c:	88 23       	and	r24, r24
    456e:	b9 f1       	breq	.+110    	; 0x45de <udc_process_setup+0x500>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4570:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    4574:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    4578:	ed 91       	ld	r30, X+
    457a:	fc 91       	ld	r31, X
    457c:	11 97       	sbiw	r26, 0x01	; 1
    457e:	84 81       	ldd	r24, Z+4	; 0x04
    4580:	88 23       	and	r24, r24
    4582:	79 f1       	breq	.+94     	; 0x45e2 <udc_process_setup+0x504>
    4584:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4586:	ec 2f       	mov	r30, r28
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	ee 0f       	add	r30, r30
    458c:	ff 1f       	adc	r31, r31
    458e:	12 96       	adiw	r26, 0x02	; 2
    4590:	8d 91       	ld	r24, X+
    4592:	9c 91       	ld	r25, X
    4594:	13 97       	sbiw	r26, 0x03	; 3
    4596:	e8 0f       	add	r30, r24
    4598:	f9 1f       	adc	r31, r25
    459a:	00 81       	ld	r16, Z
    459c:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    459e:	d8 01       	movw	r26, r16
    45a0:	16 96       	adiw	r26, 0x06	; 6
    45a2:	ed 91       	ld	r30, X+
    45a4:	fc 91       	ld	r31, X
    45a6:	17 97       	sbiw	r26, 0x07	; 7
    45a8:	19 95       	eicall
    45aa:	68 2f       	mov	r22, r24
    45ac:	8c 2f       	mov	r24, r28
    45ae:	0e 94 56 1f 	call	0x3eac	; 0x3eac <udc_update_iface_desc>
    45b2:	88 23       	and	r24, r24
    45b4:	79 f1       	breq	.+94     	; 0x4614 <udc_process_setup+0x536>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    45b6:	d8 01       	movw	r26, r16
    45b8:	14 96       	adiw	r26, 0x04	; 4
    45ba:	ed 91       	ld	r30, X+
    45bc:	fc 91       	ld	r31, X
    45be:	15 97       	sbiw	r26, 0x05	; 5
    45c0:	19 95       	eicall
    45c2:	81 11       	cpse	r24, r1
    45c4:	27 c0       	rjmp	.+78     	; 0x4614 <udc_process_setup+0x536>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    45c6:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    45c8:	a0 91 88 24 	lds	r26, 0x2488	; 0x802488 <udc_ptr_conf>
    45cc:	b0 91 89 24 	lds	r27, 0x2489	; 0x802489 <udc_ptr_conf+0x1>
    45d0:	ed 91       	ld	r30, X+
    45d2:	fc 91       	ld	r31, X
    45d4:	11 97       	sbiw	r26, 0x01	; 1
    45d6:	94 81       	ldd	r25, Z+4	; 0x04
    45d8:	c9 17       	cp	r28, r25
    45da:	a8 f2       	brcs	.-86     	; 0x4586 <udc_process_setup+0x4a8>
    45dc:	1b c0       	rjmp	.+54     	; 0x4614 <udc_process_setup+0x536>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    45de:	80 e0       	ldi	r24, 0x00	; 0
    45e0:	19 c0       	rjmp	.+50     	; 0x4614 <udc_process_setup+0x536>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	17 c0       	rjmp	.+46     	; 0x4614 <udc_process_setup+0x536>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	15 c0       	rjmp	.+42     	; 0x4614 <udc_process_setup+0x536>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    45ea:	80 e0       	ldi	r24, 0x00	; 0
    45ec:	13 c0       	rjmp	.+38     	; 0x4614 <udc_process_setup+0x536>
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	11 c0       	rjmp	.+34     	; 0x4614 <udc_process_setup+0x536>
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	0f c0       	rjmp	.+30     	; 0x4614 <udc_process_setup+0x536>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    45f6:	98 2f       	mov	r25, r24
    45f8:	90 76       	andi	r25, 0x60	; 96
    45fa:	09 f0       	breq	.+2      	; 0x45fe <udc_process_setup+0x520>
    45fc:	78 cf       	rjmp	.-272    	; 0x44ee <udc_process_setup+0x410>
    45fe:	88 cd       	rjmp	.-1264   	; 0x4110 <udc_process_setup+0x32>
    4600:	98 2f       	mov	r25, r24
    4602:	90 76       	andi	r25, 0x60	; 96
    4604:	09 f0       	breq	.+2      	; 0x4608 <udc_process_setup+0x52a>
    4606:	73 cf       	rjmp	.-282    	; 0x44ee <udc_process_setup+0x410>
    4608:	8c ce       	rjmp	.-744    	; 0x4322 <udc_process_setup+0x244>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    460a:	3d e0       	ldi	r19, 0x0D	; 13
		str = udc_string_product_name;
    460c:	ea e3       	ldi	r30, 0x3A	; 58
    460e:	f0 e2       	ldi	r31, 0x20	; 32
    4610:	ff cd       	rjmp	.-1026   	; 0x4210 <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    4612:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	08 95       	ret

0000461e <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
    461e:	cf 93       	push	r28
    4620:	df 93       	push	r29
    4622:	1f 92       	push	r1
    4624:	1f 92       	push	r1
    4626:	cd b7       	in	r28, 0x3d	; 61
    4628:	de b7       	in	r29, 0x3e	; 62
	if (!b_idle && udd_b_idle) {
    462a:	81 11       	cpse	r24, r1
    462c:	26 c0       	rjmp	.+76     	; 0x467a <udd_sleep_mode+0x5c>
    462e:	90 91 d0 25 	lds	r25, 0x25D0	; 0x8025d0 <udd_b_idle>
    4632:	99 23       	and	r25, r25
    4634:	f9 f0       	breq	.+62     	; 0x4674 <udd_sleep_mode+0x56>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4636:	90 91 e2 25 	lds	r25, 0x25E2	; 0x8025e2 <sleepmgr_locks+0x1>
    463a:	91 11       	cpse	r25, r1
    463c:	01 c0       	rjmp	.+2      	; 0x4640 <udd_sleep_mode+0x22>
    463e:	ff cf       	rjmp	.-2      	; 0x463e <udd_sleep_mode+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4640:	9f b7       	in	r25, 0x3f	; 63
    4642:	9a 83       	std	Y+2, r25	; 0x02
	cpu_irq_disable();
    4644:	f8 94       	cli
	return flags;
    4646:	2a 81       	ldd	r18, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4648:	e1 ee       	ldi	r30, 0xE1	; 225
    464a:	f5 e2       	ldi	r31, 0x25	; 37
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	91 50       	subi	r25, 0x01	; 1
    4650:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4652:	2f bf       	out	0x3f, r18	; 63
    4654:	0f c0       	rjmp	.+30     	; 0x4674 <udd_sleep_mode+0x56>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4656:	90 91 e2 25 	lds	r25, 0x25E2	; 0x8025e2 <sleepmgr_locks+0x1>
    465a:	9f 3f       	cpi	r25, 0xFF	; 255
    465c:	09 f4       	brne	.+2      	; 0x4660 <udd_sleep_mode+0x42>
    465e:	ff cf       	rjmp	.-2      	; 0x465e <udd_sleep_mode+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4660:	9f b7       	in	r25, 0x3f	; 63
    4662:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    4664:	f8 94       	cli
	return flags;
    4666:	29 81       	ldd	r18, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4668:	e1 ee       	ldi	r30, 0xE1	; 225
    466a:	f5 e2       	ldi	r31, 0x25	; 37
    466c:	91 81       	ldd	r25, Z+1	; 0x01
    466e:	9f 5f       	subi	r25, 0xFF	; 255
    4670:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4672:	2f bf       	out	0x3f, r18	; 63
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    4674:	80 93 d0 25 	sts	0x25D0, r24	; 0x8025d0 <udd_b_idle>
}
    4678:	05 c0       	rjmp	.+10     	; 0x4684 <udd_sleep_mode+0x66>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
    467a:	90 91 d0 25 	lds	r25, 0x25D0	; 0x8025d0 <udd_b_idle>
    467e:	99 23       	and	r25, r25
    4680:	51 f3       	breq	.-44     	; 0x4656 <udd_sleep_mode+0x38>
    4682:	f8 cf       	rjmp	.-16     	; 0x4674 <udd_sleep_mode+0x56>
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
    4684:	0f 90       	pop	r0
    4686:	0f 90       	pop	r0
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	08 95       	ret

0000468e <udd_ctrl_init>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
    468e:	0f 93       	push	r16
	udd_disable_overflow_interrupt();
    4690:	e8 ec       	ldi	r30, 0xC8	; 200
    4692:	f4 e0       	ldi	r31, 0x04	; 4
    4694:	80 81       	ld	r24, Z
    4696:	8f 7d       	andi	r24, 0xDF	; 223
    4698:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    469a:	80 81       	ld	r24, Z
    469c:	8f 7d       	andi	r24, 0xDF	; 223
    469e:	80 83       	st	Z, r24

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    46a0:	e8 e9       	ldi	r30, 0x98	; 152
    46a2:	f5 e2       	ldi	r31, 0x25	; 37
    46a4:	02 e0       	ldi	r16, 0x02	; 2
    46a6:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    46a8:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <udd_sram+0x1a>
    46ac:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <udd_sram+0x1b>
	udd_control_in_ack_tc();
    46b0:	00 e2       	ldi	r16, 0x20	; 32
    46b2:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    46b4:	00 e4       	ldi	r16, 0x40	; 64
    46b6:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    46b8:	e0 e9       	ldi	r30, 0x90	; 144
    46ba:	f5 e2       	ldi	r31, 0x25	; 37
    46bc:	00 e4       	ldi	r16, 0x40	; 64
    46be:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    46c0:	e1 ed       	ldi	r30, 0xD1	; 209
    46c2:	f5 e2       	ldi	r31, 0x25	; 37
    46c4:	14 86       	std	Z+12, r1	; 0x0c
    46c6:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    46c8:	16 86       	std	Z+14, r1	; 0x0e
    46ca:	17 86       	std	Z+15, r1	; 0x0f
	udd_g_ctrlreq.payload_size = 0;
    46cc:	12 86       	std	Z+10, r1	; 0x0a
    46ce:	13 86       	std	Z+11, r1	; 0x0b
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    46d0:	10 92 79 25 	sts	0x2579, r1	; 0x802579 <udd_ep_control_state>
}
    46d4:	0f 91       	pop	r16
    46d6:	08 95       	ret

000046d8 <udd_ctrl_stall_data>:
		udd_control_out_enable_stall();
	}
}

static void udd_ctrl_stall_data(void)
{
    46d8:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    46da:	85 e0       	ldi	r24, 0x05	; 5
    46dc:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	udd_control_in_enable_stall();
    46e0:	e9 e9       	ldi	r30, 0x99	; 153
    46e2:	f5 e2       	ldi	r31, 0x25	; 37
    46e4:	04 e0       	ldi	r16, 0x04	; 4
    46e6:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    46e8:	e1 e9       	ldi	r30, 0x91	; 145
    46ea:	f5 e2       	ldi	r31, 0x25	; 37
    46ec:	04 e0       	ldi	r16, 0x04	; 4
    46ee:	05 93       	las	Z, r16
}
    46f0:	0f 91       	pop	r16
    46f2:	08 95       	ret

000046f4 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    46f4:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    46f6:	83 e0       	ldi	r24, 0x03	; 3
    46f8:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    46fc:	10 92 9a 25 	sts	0x259A, r1	; 0x80259a <udd_sram+0x1a>
    4700:	10 92 9b 25 	sts	0x259B, r1	; 0x80259b <udd_sram+0x1b>
	udd_control_in_clear_NACK0();
    4704:	e8 e9       	ldi	r30, 0x98	; 152
    4706:	f5 e2       	ldi	r31, 0x25	; 37
    4708:	02 e0       	ldi	r16, 0x02	; 2
    470a:	06 93       	lac	Z, r16
}
    470c:	0f 91       	pop	r16
    470e:	08 95       	ret

00004710 <udd_ctrl_endofrequest>:
}

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    4710:	e0 91 dd 25 	lds	r30, 0x25DD	; 0x8025dd <udd_g_ctrlreq+0xc>
    4714:	f0 91 de 25 	lds	r31, 0x25DE	; 0x8025de <udd_g_ctrlreq+0xd>
    4718:	30 97       	sbiw	r30, 0x00	; 0
    471a:	09 f0       	breq	.+2      	; 0x471e <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    471c:	19 95       	eicall
    471e:	08 95       	ret

00004720 <udd_ctrl_in_sent>:
		udd_control_out_ack_tc();
	}
}

static void udd_ctrl_in_sent(void)
{
    4720:	0f 93       	push	r16
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4726:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    472a:	83 30       	cpi	r24, 0x03	; 3
    472c:	29 f4       	brne	.+10     	; 0x4738 <udd_ctrl_in_sent+0x18>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    472e:	0e 94 88 23 	call	0x4710	; 0x4710 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    4732:	0e 94 47 23 	call	0x468e	; 0x468e <udd_ctrl_init>
		return;
    4736:	5e c0       	rjmp	.+188    	; 0x47f4 <udd_ctrl_in_sent+0xd4>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    4738:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    473c:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    4740:	c0 91 db 25 	lds	r28, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    4744:	d0 91 dc 25 	lds	r29, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
    4748:	c8 1b       	sub	r28, r24
    474a:	d9 0b       	sbc	r29, r25
	if (0 == nb_remain) {
    474c:	71 f5       	brne	.+92     	; 0x47aa <udd_ctrl_in_sent+0x8a>
		// Update number of total data sending by previous playload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    474e:	20 91 77 25 	lds	r18, 0x2577	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    4752:	30 91 78 25 	lds	r19, 0x2578	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
    4756:	82 0f       	add	r24, r18
    4758:	93 1f       	adc	r25, r19
    475a:	80 93 77 25 	sts	0x2577, r24	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    475e:	90 93 78 25 	sts	0x2578, r25	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    4762:	20 91 d7 25 	lds	r18, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4766:	30 91 d8 25 	lds	r19, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    476a:	82 17       	cp	r24, r18
    476c:	93 07       	cpc	r25, r19
    476e:	21 f0       	breq	.+8      	; 0x4778 <udd_ctrl_in_sent+0x58>
				|| b_shortpacket) {
    4770:	80 91 90 24 	lds	r24, 0x2490	; 0x802490 <b_shortpacket.5638>
    4774:	88 23       	and	r24, r24
    4776:	41 f0       	breq	.+16     	; 0x4788 <udd_ctrl_in_sent+0x68>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    4778:	84 e0       	ldi	r24, 0x04	; 4
    477a:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    477e:	e0 e9       	ldi	r30, 0x90	; 144
    4780:	f5 e2       	ldi	r31, 0x25	; 37
    4782:	02 e0       	ldi	r16, 0x02	; 2
    4784:	06 93       	lac	Z, r16
    4786:	36 c0       	rjmp	.+108    	; 0x47f4 <udd_ctrl_in_sent+0xd4>
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
    4788:	e0 91 df 25 	lds	r30, 0x25DF	; 0x8025df <udd_g_ctrlreq+0xe>
    478c:	f0 91 e0 25 	lds	r31, 0x25E0	; 0x8025e0 <udd_g_ctrlreq+0xf>
    4790:	30 97       	sbiw	r30, 0x00	; 0
    4792:	99 f0       	breq	.+38     	; 0x47ba <udd_ctrl_in_sent+0x9a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    4794:	19 95       	eicall
    4796:	88 23       	and	r24, r24
    4798:	81 f0       	breq	.+32     	; 0x47ba <udd_ctrl_in_sent+0x9a>
			// Underrun then send zlp on IN
			// nb_remain == 0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
    479a:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    479e:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
			nb_remain = udd_g_ctrlreq.payload_size;
    47a2:	c0 91 db 25 	lds	r28, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    47a6:	d0 91 dc 25 	lds	r29, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    47aa:	c0 34       	cpi	r28, 0x40	; 64
    47ac:	d1 05       	cpc	r29, r1
    47ae:	28 f0       	brcs	.+10     	; 0x47ba <udd_ctrl_in_sent+0x9a>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    47b0:	10 92 90 24 	sts	0x2490, r1	; 0x802490 <b_shortpacket.5638>
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    47b4:	c0 e4       	ldi	r28, 0x40	; 64
    47b6:	d0 e0       	ldi	r29, 0x00	; 0
    47b8:	03 c0       	rjmp	.+6      	; 0x47c0 <udd_ctrl_in_sent+0xa0>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    47ba:	81 e0       	ldi	r24, 0x01	; 1
    47bc:	80 93 90 24 	sts	0x2490, r24	; 0x802490 <b_shortpacket.5638>
	}
	udd_control_in_set_bytecnt(nb_remain);
    47c0:	e0 e8       	ldi	r30, 0x80	; 128
    47c2:	f5 e2       	ldi	r31, 0x25	; 37
    47c4:	c2 8f       	std	Z+26, r28	; 0x1a
    47c6:	d3 8f       	std	Z+27, r29	; 0x1b

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    47c8:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    47cc:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    47d0:	20 91 d9 25 	lds	r18, 0x25D9	; 0x8025d9 <udd_g_ctrlreq+0x8>
    47d4:	30 91 da 25 	lds	r19, 0x25DA	; 0x8025da <udd_g_ctrlreq+0x9>
    47d8:	28 0f       	add	r18, r24
    47da:	39 1f       	adc	r19, r25
    47dc:	24 8f       	std	Z+28, r18	; 0x1c
    47de:	35 8f       	std	Z+29, r19	; 0x1d
	udd_ctrl_payload_nb_trans += nb_remain;
    47e0:	c8 0f       	add	r28, r24
    47e2:	d9 1f       	adc	r29, r25
    47e4:	c0 93 75 25 	sts	0x2575, r28	; 0x802575 <udd_ctrl_payload_nb_trans>
    47e8:	d0 93 76 25 	sts	0x2576, r29	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    47ec:	e8 e9       	ldi	r30, 0x98	; 152
    47ee:	f5 e2       	ldi	r31, 0x25	; 37
    47f0:	02 e0       	ldi	r16, 0x02	; 2
    47f2:	06 93       	lac	Z, r16
}
    47f4:	df 91       	pop	r29
    47f6:	cf 91       	pop	r28
    47f8:	0f 91       	pop	r16
    47fa:	08 95       	ret

000047fc <udd_ep_get_size>:
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
    47fc:	fc 01       	movw	r30, r24
    47fe:	81 81       	ldd	r24, Z+1	; 0x01
    4800:	e8 2f       	mov	r30, r24
    4802:	e7 70       	andi	r30, 0x07	; 7
    4804:	8e 2f       	mov	r24, r30
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	fc 01       	movw	r30, r24
    480a:	31 97       	sbiw	r30, 0x01	; 1
    480c:	e7 30       	cpi	r30, 0x07	; 7
    480e:	f1 05       	cpc	r31, r1
    4810:	d8 f4       	brcc	.+54     	; 0x4848 <udd_ep_get_size+0x4c>
    4812:	88 27       	eor	r24, r24
    4814:	e6 52       	subi	r30, 0x26	; 38
    4816:	fe 4f       	sbci	r31, 0xFE	; 254
    4818:	8f 4f       	sbci	r24, 0xFF	; 255
    481a:	0c 94 c7 30 	jmp	0x618e	; 0x618e <__tablejump2__>
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
	case USB_EP_BUFSIZE_16_gc:
		return 16;
    481e:	80 e1       	ldi	r24, 0x10	; 16
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	08 95       	ret
	case USB_EP_BUFSIZE_32_gc:
		return 32;
    4824:	80 e2       	ldi	r24, 0x20	; 32
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	08 95       	ret
	case USB_EP_BUFSIZE_64_gc:
		return 64;
    482a:	80 e4       	ldi	r24, 0x40	; 64
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	08 95       	ret
	case USB_EP_BUFSIZE_128_gc:
		return 128;
    4830:	80 e8       	ldi	r24, 0x80	; 128
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	08 95       	ret
	case USB_EP_BUFSIZE_256_gc:
		return 256;
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	91 e0       	ldi	r25, 0x01	; 1
    483a:	08 95       	ret
	case USB_EP_BUFSIZE_512_gc:
		return 512;
    483c:	80 e0       	ldi	r24, 0x00	; 0
    483e:	92 e0       	ldi	r25, 0x02	; 2
    4840:	08 95       	ret
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
    4842:	8f ef       	ldi	r24, 0xFF	; 255
    4844:	93 e0       	ldi	r25, 0x03	; 3
    4846:	08 95       	ret
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
    4848:	88 e0       	ldi	r24, 0x08	; 8
    484a:	90 e0       	ldi	r25, 0x00	; 0
	case USB_EP_BUFSIZE_512_gc:
		return 512;
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
	}
}
    484c:	08 95       	ret

0000484e <udd_ep_get_job>:

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    484e:	28 2f       	mov	r18, r24
    4850:	2f 70       	andi	r18, 0x0F	; 15
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	22 0f       	add	r18, r18
    4856:	33 1f       	adc	r19, r19
    4858:	08 2e       	mov	r0, r24
    485a:	00 0c       	add	r0, r0
    485c:	99 0b       	sbc	r25, r25
    485e:	88 27       	eor	r24, r24
    4860:	99 0f       	add	r25, r25
    4862:	88 1f       	adc	r24, r24
    4864:	99 27       	eor	r25, r25
    4866:	82 0f       	add	r24, r18
    4868:	93 1f       	adc	r25, r19
    486a:	02 97       	sbiw	r24, 0x02	; 2
    486c:	9c 01       	movw	r18, r24
    486e:	22 0f       	add	r18, r18
    4870:	33 1f       	adc	r19, r19
    4872:	22 0f       	add	r18, r18
    4874:	33 1f       	adc	r19, r19
    4876:	22 0f       	add	r18, r18
    4878:	33 1f       	adc	r19, r19
    487a:	82 0f       	add	r24, r18
    487c:	93 1f       	adc	r25, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    487e:	8f 5e       	subi	r24, 0xEF	; 239
    4880:	9a 4d       	sbci	r25, 0xDA	; 218
    4882:	08 95       	ret

00004884 <udd_ctrl_interrupt_tc_setup>:
	}
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
    4884:	0f 93       	push	r16
    4886:	cf 93       	push	r28
	if (!udd_is_setup_event()) {
    4888:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    488c:	80 ff       	sbrs	r24, 0
    488e:	6a c0       	rjmp	.+212    	; 0x4964 <udd_ctrl_interrupt_tc_setup+0xe0>
		return false;
	}
	udd_ack_setup_event();
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    4896:	e0 e9       	ldi	r30, 0x90	; 144
    4898:	f5 e2       	ldi	r31, 0x25	; 37
    489a:	00 e8       	ldi	r16, 0x80	; 128
    489c:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    489e:	e8 e9       	ldi	r30, 0x98	; 152
    48a0:	f5 e2       	ldi	r31, 0x25	; 37
    48a2:	00 e8       	ldi	r16, 0x80	; 128
    48a4:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    48a6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>

	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
    48aa:	e0 e9       	ldi	r30, 0x90	; 144
    48ac:	f5 e2       	ldi	r31, 0x25	; 37
    48ae:	00 e1       	ldi	r16, 0x10	; 16
    48b0:	06 93       	lac	Z, r16
	udd_ep_control_state = UDD_EPCTRL_SETUP;
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    48b2:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    48b6:	88 23       	and	r24, r24
    48b8:	39 f0       	breq	.+14     	; 0x48c8 <udd_ctrl_interrupt_tc_setup+0x44>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    48ba:	83 50       	subi	r24, 0x03	; 3
    48bc:	82 30       	cpi	r24, 0x02	; 2
    48be:	10 f4       	brcc	.+4      	; 0x48c4 <udd_ctrl_interrupt_tc_setup+0x40>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// Accept that ZLP event can be hidden by setup packet event
			// in case of setup packet sending quickly after a ZLP
			udd_ctrl_endofrequest();
    48c0:	0e 94 88 23 	call	0x4710	; 0x4710 <udd_ctrl_endofrequest>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    48c4:	0e 94 47 23 	call	0x468e	; 0x468e <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    48c8:	80 91 92 25 	lds	r24, 0x2592	; 0x802592 <udd_sram+0x12>
    48cc:	90 91 93 25 	lds	r25, 0x2593	; 0x802593 <udd_sram+0x13>
    48d0:	08 97       	sbiw	r24, 0x08	; 8
    48d2:	09 f0       	breq	.+2      	; 0x48d6 <udd_ctrl_interrupt_tc_setup+0x52>
    48d4:	49 c0       	rjmp	.+146    	; 0x4968 <udd_ctrl_interrupt_tc_setup+0xe4>
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    48d6:	88 e0       	ldi	r24, 0x08	; 8
    48d8:	e5 e3       	ldi	r30, 0x35	; 53
    48da:	f5 e2       	ldi	r31, 0x25	; 37
    48dc:	a1 ed       	ldi	r26, 0xD1	; 209
    48de:	b5 e2       	ldi	r27, 0x25	; 37
    48e0:	01 90       	ld	r0, Z+
    48e2:	0d 92       	st	X+, r0
    48e4:	8a 95       	dec	r24
    48e6:	e1 f7       	brne	.-8      	; 0x48e0 <udd_ctrl_interrupt_tc_setup+0x5c>

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    48e8:	e8 ec       	ldi	r30, 0xC8	; 200
    48ea:	f4 e0       	ldi	r31, 0x04	; 4
    48ec:	80 81       	ld	r24, Z
    48ee:	80 62       	ori	r24, 0x20	; 32
    48f0:	80 83       	st	Z, r24
	udd_enable_underflow_interrupt();
    48f2:	80 81       	ld	r24, Z
    48f4:	80 62       	ori	r24, 0x20	; 32
    48f6:	80 83       	st	Z, r24

	// Decode setup request
	if (udc_process_setup() == false) {
    48f8:	0e 94 6f 20 	call	0x40de	; 0x40de <udc_process_setup>
    48fc:	c8 2f       	mov	r28, r24
    48fe:	81 11       	cpse	r24, r1
    4900:	04 c0       	rjmp	.+8      	; 0x490a <udd_ctrl_interrupt_tc_setup+0x86>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    4902:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <udd_ctrl_stall_data>
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    4906:	c1 e0       	ldi	r28, 0x01	; 1
    4908:	30 c0       	rjmp	.+96     	; 0x496a <udd_ctrl_interrupt_tc_setup+0xe6>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
		return;
	}

	if (Udd_setup_is_in()) {
    490a:	80 91 d1 25 	lds	r24, 0x25D1	; 0x8025d1 <udd_g_ctrlreq>
    490e:	88 23       	and	r24, r24
    4910:	74 f4       	brge	.+28     	; 0x492e <udd_ctrl_interrupt_tc_setup+0xaa>
		udd_ctrl_prev_payload_nb_trans = 0;
    4912:	10 92 77 25 	sts	0x2577, r1	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    4916:	10 92 78 25 	sts	0x2578, r1	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    491a:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    491e:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    4922:	82 e0       	ldi	r24, 0x02	; 2
    4924:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
		udd_ctrl_in_sent(); // Send first data transfer
    4928:	0e 94 90 23 	call	0x4720	; 0x4720 <udd_ctrl_in_sent>
    492c:	1e c0       	rjmp	.+60     	; 0x496a <udd_ctrl_interrupt_tc_setup+0xe6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    492e:	80 91 d7 25 	lds	r24, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    4932:	90 91 d8 25 	lds	r25, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    4936:	89 2b       	or	r24, r25
    4938:	19 f4       	brne	.+6      	; 0x4940 <udd_ctrl_interrupt_tc_setup+0xbc>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    493a:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <udd_ctrl_send_zlp_in>
    493e:	15 c0       	rjmp	.+42     	; 0x496a <udd_ctrl_interrupt_tc_setup+0xe6>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    4940:	10 92 77 25 	sts	0x2577, r1	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    4944:	10 92 78 25 	sts	0x2578, r1	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    4948:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    494c:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    4956:	e0 e9       	ldi	r30, 0x90	; 144
    4958:	f5 e2       	ldi	r31, 0x25	; 37
    495a:	02 e0       	ldi	r16, 0x02	; 2
    495c:	06 93       	lac	Z, r16
		udd_control_out_ack_tc();
    495e:	00 e2       	ldi	r16, 0x20	; 32
    4960:	06 93       	lac	Z, r16
    4962:	03 c0       	rjmp	.+6      	; 0x496a <udd_ctrl_interrupt_tc_setup+0xe6>
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
		return false;
    4964:	c0 e0       	ldi	r28, 0x00	; 0
    4966:	01 c0       	rjmp	.+2      	; 0x496a <udd_ctrl_interrupt_tc_setup+0xe6>
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    4968:	c1 e0       	ldi	r28, 0x01	; 1
}
    496a:	8c 2f       	mov	r24, r28
    496c:	cf 91       	pop	r28
    496e:	0f 91       	pop	r16
    4970:	08 95       	ret

00004972 <udd_ep_trans_complet>:
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
    4972:	8f 92       	push	r8
    4974:	9f 92       	push	r9
    4976:	af 92       	push	r10
    4978:	bf 92       	push	r11
    497a:	df 92       	push	r13
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	d8 2e       	mov	r13, r24
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
    498a:	0e 94 27 24 	call	0x484e	; 0x484e <udd_ep_get_job>
    498e:	8c 01       	movw	r16, r24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4990:	cd 2d       	mov	r28, r13
    4992:	cf 70       	andi	r28, 0x0F	; 15
    4994:	d0 e0       	ldi	r29, 0x00	; 0
    4996:	ce 01       	movw	r24, r28
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	cd 2d       	mov	r28, r13
    499e:	0d 2c       	mov	r0, r13
    49a0:	00 0c       	add	r0, r0
    49a2:	dd 0b       	sbc	r29, r29
    49a4:	cc 27       	eor	r28, r28
    49a6:	dd 0f       	add	r29, r29
    49a8:	cc 1f       	adc	r28, r28
    49aa:	dd 27       	eor	r29, r29
    49ac:	c8 0f       	add	r28, r24
    49ae:	d9 1f       	adc	r29, r25
    49b0:	ce 01       	movw	r24, r28
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	88 0f       	add	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	88 0f       	add	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	9c 01       	movw	r18, r24
    49c0:	20 57       	subi	r18, 0x70	; 112
    49c2:	3a 4d       	sbci	r19, 0xDA	; 218
    49c4:	79 01       	movw	r14, r18
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	ep_size = udd_ep_get_size(ep_ctrl);
    49c6:	c9 01       	movw	r24, r18
    49c8:	0e 94 fe 23 	call	0x47fc	; 0x47fc <udd_ep_get_size>
    49cc:	4c 01       	movw	r8, r24

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    49ce:	dd 20       	and	r13, r13
    49d0:	0c f0       	brlt	.+2      	; 0x49d4 <udd_ep_trans_complet+0x62>
    49d2:	72 c0       	rjmp	.+228    	; 0x4ab8 <udd_ep_trans_complet+0x146>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    49d4:	fe 01       	movw	r30, r28
    49d6:	ee 0f       	add	r30, r30
    49d8:	ff 1f       	adc	r31, r31
    49da:	ee 0f       	add	r30, r30
    49dc:	ff 1f       	adc	r31, r31
    49de:	ee 0f       	add	r30, r30
    49e0:	ff 1f       	adc	r31, r31
    49e2:	e0 58       	subi	r30, 0x80	; 128
    49e4:	fa 4d       	sbci	r31, 0xDA	; 218
    49e6:	26 89       	ldd	r18, Z+22	; 0x16
    49e8:	37 89       	ldd	r19, Z+23	; 0x17

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    49ea:	d8 01       	movw	r26, r16
    49ec:	15 96       	adiw	r26, 0x05	; 5
    49ee:	8d 91       	ld	r24, X+
    49f0:	9c 91       	ld	r25, X
    49f2:	16 97       	sbiw	r26, 0x06	; 6
    49f4:	82 0f       	add	r24, r18
    49f6:	93 1f       	adc	r25, r19
    49f8:	15 96       	adiw	r26, 0x05	; 5
    49fa:	8d 93       	st	X+, r24
    49fc:	9c 93       	st	X, r25
    49fe:	16 97       	sbiw	r26, 0x06	; 6

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    4a00:	13 96       	adiw	r26, 0x03	; 3
    4a02:	2d 91       	ld	r18, X+
    4a04:	3c 91       	ld	r19, X
    4a06:	14 97       	sbiw	r26, 0x04	; 4
    4a08:	82 17       	cp	r24, r18
    4a0a:	93 07       	cpc	r25, r19
    4a0c:	09 f4       	brne	.+2      	; 0x4a10 <udd_ep_trans_complet+0x9e>
    4a0e:	3e c0       	rjmp	.+124    	; 0x4a8c <udd_ep_trans_complet+0x11a>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4a10:	28 1b       	sub	r18, r24
    4a12:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4a14:	21 15       	cp	r18, r1
    4a16:	b4 e0       	ldi	r27, 0x04	; 4
    4a18:	3b 07       	cpc	r19, r27
    4a1a:	40 f0       	brcs	.+16     	; 0x4a2c <udd_ep_trans_complet+0xba>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    4a1c:	2f ef       	ldi	r18, 0xFF	; 255
    4a1e:	33 e0       	ldi	r19, 0x03	; 3
    4a20:	c9 01       	movw	r24, r18
    4a22:	b4 01       	movw	r22, r8
    4a24:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    4a28:	28 1b       	sub	r18, r24
    4a2a:	39 0b       	sbc	r19, r25
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
				&& (0==(next_trans % ep_size));
    4a2c:	f8 01       	movw	r30, r16
    4a2e:	80 81       	ld	r24, Z
    4a30:	81 ff       	sbrs	r24, 1
    4a32:	0a c0       	rjmp	.+20     	; 0x4a48 <udd_ep_trans_complet+0xd6>
    4a34:	c9 01       	movw	r24, r18
    4a36:	b4 01       	movw	r22, r8
    4a38:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    4a3c:	41 e0       	ldi	r20, 0x01	; 1
    4a3e:	89 2b       	or	r24, r25
    4a40:	09 f0       	breq	.+2      	; 0x4a44 <udd_ep_trans_complet+0xd2>
    4a42:	40 e0       	ldi	r20, 0x00	; 0
    4a44:	84 2f       	mov	r24, r20
    4a46:	01 c0       	rjmp	.+2      	; 0x4a4a <udd_ep_trans_complet+0xd8>
    4a48:	80 e0       	ldi	r24, 0x00	; 0
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    4a4a:	d8 01       	movw	r26, r16
    4a4c:	9c 91       	ld	r25, X
    4a4e:	80 fb       	bst	r24, 0
    4a50:	91 f9       	bld	r25, 1
    4a52:	9c 93       	st	X, r25
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4a54:	cc 0f       	add	r28, r28
    4a56:	dd 1f       	adc	r29, r29
    4a58:	cc 0f       	add	r28, r28
    4a5a:	dd 1f       	adc	r29, r29
    4a5c:	cc 0f       	add	r28, r28
    4a5e:	dd 1f       	adc	r29, r29
    4a60:	c0 58       	subi	r28, 0x80	; 128
    4a62:	da 4d       	sbci	r29, 0xDA	; 218
    4a64:	1e 8a       	std	Y+22, r1	; 0x16
    4a66:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    4a68:	2a 8b       	std	Y+18, r18	; 0x12
    4a6a:	3b 8b       	std	Y+19, r19	; 0x13
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    4a6c:	11 96       	adiw	r26, 0x01	; 1
    4a6e:	2d 91       	ld	r18, X+
    4a70:	3c 91       	ld	r19, X
    4a72:	12 97       	sbiw	r26, 0x02	; 2
    4a74:	15 96       	adiw	r26, 0x05	; 5
    4a76:	8d 91       	ld	r24, X+
    4a78:	9c 91       	ld	r25, X
    4a7a:	16 97       	sbiw	r26, 0x06	; 6
    4a7c:	82 0f       	add	r24, r18
    4a7e:	93 1f       	adc	r25, r19
    4a80:	8c 8b       	std	Y+20, r24	; 0x14
    4a82:	9d 8b       	std	Y+21, r25	; 0x15
			udd_endpoint_clear_NACK0(ep_ctrl);
    4a84:	f7 01       	movw	r30, r14
    4a86:	02 e0       	ldi	r16, 0x02	; 2
    4a88:	06 93       	lac	Z, r16
			return;
    4a8a:	ca c0       	rjmp	.+404    	; 0x4c20 <udd_ep_trans_complet+0x2ae>
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
    4a8c:	d8 01       	movw	r26, r16
    4a8e:	8c 91       	ld	r24, X
    4a90:	81 ff       	sbrs	r24, 1
    4a92:	b3 c0       	rjmp	.+358    	; 0x4bfa <udd_ep_trans_complet+0x288>
			ptr_job->b_shortpacket = false;
    4a94:	8d 7f       	andi	r24, 0xFD	; 253
    4a96:	8c 93       	st	X, r24
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4a98:	cc 0f       	add	r28, r28
    4a9a:	dd 1f       	adc	r29, r29
    4a9c:	cc 0f       	add	r28, r28
    4a9e:	dd 1f       	adc	r29, r29
    4aa0:	cc 0f       	add	r28, r28
    4aa2:	dd 1f       	adc	r29, r29
    4aa4:	c0 58       	subi	r28, 0x80	; 128
    4aa6:	da 4d       	sbci	r29, 0xDA	; 218
    4aa8:	1e 8a       	std	Y+22, r1	; 0x16
    4aaa:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    4aac:	1a 8a       	std	Y+18, r1	; 0x12
    4aae:	1b 8a       	std	Y+19, r1	; 0x13
			udd_endpoint_clear_NACK0(ep_ctrl);
    4ab0:	f7 01       	movw	r30, r14
    4ab2:	02 e0       	ldi	r16, 0x02	; 2
    4ab4:	06 93       	lac	Z, r16
			return;
    4ab6:	b4 c0       	rjmp	.+360    	; 0x4c20 <udd_ep_trans_complet+0x2ae>
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
    4ab8:	fe 01       	movw	r30, r28
    4aba:	ee 0f       	add	r30, r30
    4abc:	ff 1f       	adc	r31, r31
    4abe:	ee 0f       	add	r30, r30
    4ac0:	ff 1f       	adc	r31, r31
    4ac2:	ee 0f       	add	r30, r30
    4ac4:	ff 1f       	adc	r31, r31
    4ac6:	e0 58       	subi	r30, 0x80	; 128
    4ac8:	fa 4d       	sbci	r31, 0xDA	; 218
    4aca:	a2 88       	ldd	r10, Z+18	; 0x12
    4acc:	b3 88       	ldd	r11, Z+19	; 0x13

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    4ace:	d8 01       	movw	r26, r16
    4ad0:	8c 91       	ld	r24, X
    4ad2:	82 ff       	sbrs	r24, 2
    4ad4:	1b c0       	rjmp	.+54     	; 0x4b0c <udd_ep_trans_complet+0x19a>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    4ad6:	11 96       	adiw	r26, 0x01	; 1
    4ad8:	ed 91       	ld	r30, X+
    4ada:	fc 91       	ld	r31, X
    4adc:	12 97       	sbiw	r26, 0x02	; 2
    4ade:	15 96       	adiw	r26, 0x05	; 5
    4ae0:	2d 91       	ld	r18, X+
    4ae2:	3c 91       	ld	r19, X
    4ae4:	16 97       	sbiw	r26, 0x06	; 6
    4ae6:	13 96       	adiw	r26, 0x03	; 3
    4ae8:	8d 91       	ld	r24, X+
    4aea:	9c 91       	ld	r25, X
    4aec:	14 97       	sbiw	r26, 0x04	; 4
    4aee:	b4 01       	movw	r22, r8
    4af0:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    4af4:	b0 e4       	ldi	r27, 0x40	; 64
    4af6:	db 9e       	mul	r13, r27
    4af8:	b0 01       	movw	r22, r0
    4afa:	11 24       	eor	r1, r1
    4afc:	6f 5a       	subi	r22, 0xAF	; 175
    4afe:	7b 4d       	sbci	r23, 0xDB	; 219
    4b00:	ac 01       	movw	r20, r24
    4b02:	cf 01       	movw	r24, r30
    4b04:	82 0f       	add	r24, r18
    4b06:	93 1f       	adc	r25, r19
    4b08:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <memcpy>
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    4b0c:	f8 01       	movw	r30, r16
    4b0e:	25 81       	ldd	r18, Z+5	; 0x05
    4b10:	36 81       	ldd	r19, Z+6	; 0x06
    4b12:	2a 0d       	add	r18, r10
    4b14:	3b 1d       	adc	r19, r11
    4b16:	25 83       	std	Z+5, r18	; 0x05
    4b18:	36 83       	std	Z+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    4b1a:	83 81       	ldd	r24, Z+3	; 0x03
    4b1c:	94 81       	ldd	r25, Z+4	; 0x04
    4b1e:	82 17       	cp	r24, r18
    4b20:	93 07       	cpc	r25, r19
    4b22:	68 f4       	brcc	.+26     	; 0x4b3e <udd_ep_trans_complet+0x1cc>
			ptr_job->nb_trans = ptr_job->buf_size;
    4b24:	85 83       	std	Z+5, r24	; 0x05
    4b26:	96 83       	std	Z+6, r25	; 0x06
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
    4b28:	cc 0f       	add	r28, r28
    4b2a:	dd 1f       	adc	r29, r29
    4b2c:	cc 0f       	add	r28, r28
    4b2e:	dd 1f       	adc	r29, r29
    4b30:	cc 0f       	add	r28, r28
    4b32:	dd 1f       	adc	r29, r29
    4b34:	c0 58       	subi	r28, 0x80	; 128
    4b36:	da 4d       	sbci	r29, 0xDA	; 218
    4b38:	8e 89       	ldd	r24, Y+22	; 0x16
    4b3a:	9f 89       	ldd	r25, Y+23	; 0x17
    4b3c:	5e c0       	rjmp	.+188    	; 0x4bfa <udd_ep_trans_complet+0x288>
    4b3e:	fe 01       	movw	r30, r28
    4b40:	ee 0f       	add	r30, r30
    4b42:	ff 1f       	adc	r31, r31
    4b44:	ee 0f       	add	r30, r30
    4b46:	ff 1f       	adc	r31, r31
    4b48:	ee 0f       	add	r30, r30
    4b4a:	ff 1f       	adc	r31, r31
    4b4c:	e0 58       	subi	r30, 0x80	; 128
    4b4e:	fa 4d       	sbci	r31, 0xDA	; 218
    4b50:	46 89       	ldd	r20, Z+22	; 0x16
    4b52:	57 89       	ldd	r21, Z+23	; 0x17
    4b54:	a4 16       	cp	r10, r20
    4b56:	b5 06       	cpc	r11, r21
    4b58:	09 f0       	breq	.+2      	; 0x4b5c <udd_ep_trans_complet+0x1ea>
    4b5a:	4f c0       	rjmp	.+158    	; 0x4bfa <udd_ep_trans_complet+0x288>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    4b5c:	28 17       	cp	r18, r24
    4b5e:	39 07       	cpc	r19, r25
    4b60:	09 f4       	brne	.+2      	; 0x4b64 <udd_ep_trans_complet+0x1f2>
    4b62:	4b c0       	rjmp	.+150    	; 0x4bfa <udd_ep_trans_complet+0x288>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4b64:	ac 01       	movw	r20, r24
    4b66:	42 1b       	sub	r20, r18
    4b68:	53 0b       	sbc	r21, r19
    4b6a:	9a 01       	movw	r18, r20
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4b6c:	21 15       	cp	r18, r1
    4b6e:	54 e0       	ldi	r21, 0x04	; 4
    4b70:	35 07       	cpc	r19, r21
    4b72:	48 f0       	brcs	.+18     	; 0x4b86 <udd_ep_trans_complet+0x214>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    4b74:	2f ef       	ldi	r18, 0xFF	; 255
    4b76:	33 e0       	ldi	r19, 0x03	; 3
    4b78:	c9 01       	movw	r24, r18
    4b7a:	b4 01       	movw	r22, r8
    4b7c:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    4b80:	28 1b       	sub	r18, r24
    4b82:	39 0b       	sbc	r19, r25
    4b84:	06 c0       	rjmp	.+12     	; 0x4b92 <udd_ep_trans_complet+0x220>
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    4b86:	c9 01       	movw	r24, r18
    4b88:	b4 01       	movw	r22, r8
    4b8a:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    4b8e:	28 1b       	sub	r18, r24
    4b90:	39 0b       	sbc	r19, r25
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    4b92:	fe 01       	movw	r30, r28
    4b94:	ee 0f       	add	r30, r30
    4b96:	ff 1f       	adc	r31, r31
    4b98:	ee 0f       	add	r30, r30
    4b9a:	ff 1f       	adc	r31, r31
    4b9c:	ee 0f       	add	r30, r30
    4b9e:	ff 1f       	adc	r31, r31
    4ba0:	e0 58       	subi	r30, 0x80	; 128
    4ba2:	fa 4d       	sbci	r31, 0xDA	; 218
    4ba4:	12 8a       	std	Z+18, r1	; 0x12
    4ba6:	13 8a       	std	Z+19, r1	; 0x13
			if (next_trans < ep_size) {
    4ba8:	28 15       	cp	r18, r8
    4baa:	39 05       	cpc	r19, r9
    4bac:	78 f4       	brcc	.+30     	; 0x4bcc <udd_ep_trans_complet+0x25a>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    4bae:	d8 01       	movw	r26, r16
    4bb0:	8c 91       	ld	r24, X
    4bb2:	84 60       	ori	r24, 0x04	; 4
    4bb4:	8c 93       	st	X, r24
				udd_endpoint_set_buf( ep_ctrl,
    4bb6:	b0 e4       	ldi	r27, 0x40	; 64
    4bb8:	db 9e       	mul	r13, r27
    4bba:	c0 01       	movw	r24, r0
    4bbc:	11 24       	eor	r1, r1
    4bbe:	8f 5a       	subi	r24, 0xAF	; 175
    4bc0:	9b 4d       	sbci	r25, 0xDB	; 219
    4bc2:	84 8b       	std	Z+20, r24	; 0x14
    4bc4:	95 8b       	std	Z+21, r25	; 0x15
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    4bc6:	86 8a       	std	Z+22, r8	; 0x16
    4bc8:	97 8a       	std	Z+23, r9	; 0x17
    4bca:	13 c0       	rjmp	.+38     	; 0x4bf2 <udd_ep_trans_complet+0x280>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    4bcc:	f8 01       	movw	r30, r16
    4bce:	41 81       	ldd	r20, Z+1	; 0x01
    4bd0:	52 81       	ldd	r21, Z+2	; 0x02
    4bd2:	85 81       	ldd	r24, Z+5	; 0x05
    4bd4:	96 81       	ldd	r25, Z+6	; 0x06
    4bd6:	84 0f       	add	r24, r20
    4bd8:	95 1f       	adc	r25, r21
    4bda:	cc 0f       	add	r28, r28
    4bdc:	dd 1f       	adc	r29, r29
    4bde:	cc 0f       	add	r28, r28
    4be0:	dd 1f       	adc	r29, r29
    4be2:	cc 0f       	add	r28, r28
    4be4:	dd 1f       	adc	r29, r29
    4be6:	c0 58       	subi	r28, 0x80	; 128
    4be8:	da 4d       	sbci	r29, 0xDA	; 218
    4bea:	8c 8b       	std	Y+20, r24	; 0x14
    4bec:	9d 8b       	std	Y+21, r25	; 0x15
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    4bee:	2e 8b       	std	Y+22, r18	; 0x16
    4bf0:	3f 8b       	std	Y+23, r19	; 0x17
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    4bf2:	f7 01       	movw	r30, r14
    4bf4:	02 e0       	ldi	r16, 0x02	; 2
    4bf6:	06 93       	lac	Z, r16
			return;
    4bf8:	13 c0       	rjmp	.+38     	; 0x4c20 <udd_ep_trans_complet+0x2ae>
		}
	}

	// Job complete then call callback
	if (ptr_job->busy) {
    4bfa:	d8 01       	movw	r26, r16
    4bfc:	8c 91       	ld	r24, X
    4bfe:	80 ff       	sbrs	r24, 0
    4c00:	0f c0       	rjmp	.+30     	; 0x4c20 <udd_ep_trans_complet+0x2ae>
		ptr_job->busy = false;
    4c02:	8e 7f       	andi	r24, 0xFE	; 254
    4c04:	8c 93       	st	X, r24
		if (NULL != ptr_job->call_trans) {
    4c06:	17 96       	adiw	r26, 0x07	; 7
    4c08:	ed 91       	ld	r30, X+
    4c0a:	fc 91       	ld	r31, X
    4c0c:	18 97       	sbiw	r26, 0x08	; 8
    4c0e:	30 97       	sbiw	r30, 0x00	; 0
    4c10:	39 f0       	breq	.+14     	; 0x4c20 <udd_ep_trans_complet+0x2ae>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    4c12:	15 96       	adiw	r26, 0x05	; 5
    4c14:	6d 91       	ld	r22, X+
    4c16:	7c 91       	ld	r23, X
    4c18:	16 97       	sbiw	r26, 0x06	; 6
    4c1a:	4d 2d       	mov	r20, r13
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	19 95       	eicall
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
}
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	ff 90       	pop	r15
    4c2a:	ef 90       	pop	r14
    4c2c:	df 90       	pop	r13
    4c2e:	bf 90       	pop	r11
    4c30:	af 90       	pop	r10
    4c32:	9f 90       	pop	r9
    4c34:	8f 90       	pop	r8
    4c36:	08 95       	ret

00004c38 <udd_disable>:
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
    4c38:	1f 93       	push	r17
    4c3a:	cf 93       	push	r28
    4c3c:	df 93       	push	r29
    4c3e:	1f 92       	push	r1
    4c40:	1f 92       	push	r1
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c46:	8f b7       	in	r24, 0x3f	; 63
    4c48:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4c4a:	f8 94       	cli
	return flags;
    4c4c:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();
	udd_detach_device();
    4c4e:	e1 ec       	ldi	r30, 0xC1	; 193
    4c50:	f4 e0       	ldi	r31, 0x04	; 4
    4c52:	80 81       	ld	r24, Z
    4c54:	8e 7f       	andi	r24, 0xFE	; 254
    4c56:	80 83       	st	Z, r24
	// Disable interface
	USB_CTRLA = 0;
    4c58:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	USB_CTRLB = 0;
    4c5c:	10 82       	st	Z, r1
	sysclk_disable_usb();
    4c5e:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <sysclk_disable_usb>
	udd_sleep_mode(false);
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	0e 94 0f 23 	call	0x461e	; 0x461e <udd_sleep_mode>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4c68:	80 91 e6 25 	lds	r24, 0x25E6	; 0x8025e6 <sleepmgr_locks+0x5>
    4c6c:	81 11       	cpse	r24, r1
    4c6e:	01 c0       	rjmp	.+2      	; 0x4c72 <udd_disable+0x3a>
    4c70:	ff cf       	rjmp	.-2      	; 0x4c70 <udd_disable+0x38>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4c72:	8f b7       	in	r24, 0x3f	; 63
    4c74:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4c76:	f8 94       	cli
	return flags;
    4c78:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4c7a:	e1 ee       	ldi	r30, 0xE1	; 225
    4c7c:	f5 e2       	ldi	r31, 0x25	; 37
    4c7e:	85 81       	ldd	r24, Z+5	; 0x05
    4c80:	81 50       	subi	r24, 0x01	; 1
    4c82:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4c84:	9f bf       	out	0x3f, r25	; 63
    4c86:	1f bf       	out	0x3f, r17	; 63
#ifndef UDD_NO_SLEEP_MGR
	sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif
	cpu_irq_restore(flags);
}
    4c88:	0f 90       	pop	r0
    4c8a:	0f 90       	pop	r0
    4c8c:	df 91       	pop	r29
    4c8e:	cf 91       	pop	r28
    4c90:	1f 91       	pop	r17
    4c92:	08 95       	ret

00004c94 <udd_include_vbus_monitoring>:

bool udd_include_vbus_monitoring(void)
{
	return false; // No Vbus monitoring
}
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	08 95       	ret

00004c98 <udd_attach>:

void udd_attach(void)
{
    4c98:	1f 93       	push	r17
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	1f 92       	push	r1
    4ca0:	cd b7       	in	r28, 0x3d	; 61
    4ca2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4ca4:	8f b7       	in	r24, 0x3f	; 63
    4ca6:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4ca8:	f8 94       	cli
	return flags;
    4caa:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	0e 94 0f 23 	call	0x461e	; 0x461e <udd_sleep_mode>

	udd_ack_suspend_event();
    4cb2:	ea ec       	ldi	r30, 0xCA	; 202
    4cb4:	f4 e0       	ldi	r31, 0x04	; 4
    4cb6:	80 e4       	ldi	r24, 0x40	; 64
    4cb8:	80 83       	st	Z, r24
	udd_ack_resume_event();
    4cba:	80 e2       	ldi	r24, 0x20	; 32
    4cbc:	80 83       	st	Z, r24
	udd_attach_device();
    4cbe:	e1 ec       	ldi	r30, 0xC1	; 193
    4cc0:	f4 e0       	ldi	r31, 0x04	; 4
    4cc2:	80 81       	ld	r24, Z
    4cc4:	81 60       	ori	r24, 0x01	; 1
    4cc6:	80 83       	st	Z, r24
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    4cc8:	a9 ec       	ldi	r26, 0xC9	; 201
    4cca:	b4 e0       	ldi	r27, 0x04	; 4
    4ccc:	8c 91       	ld	r24, X
    4cce:	82 60       	ori	r24, 0x02	; 2
    4cd0:	8c 93       	st	X, r24
	udd_enable_busevt_interrupt();
    4cd2:	e8 ec       	ldi	r30, 0xC8	; 200
    4cd4:	f4 e0       	ldi	r31, 0x04	; 4
    4cd6:	80 81       	ld	r24, Z
    4cd8:	80 64       	ori	r24, 0x40	; 64
    4cda:	80 83       	st	Z, r24
	udd_enable_setup_interrupt();
    4cdc:	8c 91       	ld	r24, X
    4cde:	81 60       	ori	r24, 0x01	; 1
    4ce0:	8c 93       	st	X, r24
	udd_enable_start_of_frame_interrupt();
    4ce2:	80 81       	ld	r24, Z
    4ce4:	80 68       	ori	r24, 0x80	; 128
    4ce6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4ce8:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
}
    4cea:	0f 90       	pop	r0
    4cec:	df 91       	pop	r29
    4cee:	cf 91       	pop	r28
    4cf0:	1f 91       	pop	r17
    4cf2:	08 95       	ret

00004cf4 <udd_enable>:
#endif // (0!=USB_DEVICE_MAX_EP)
//@}


void udd_enable(void)
{
    4cf4:	0f 93       	push	r16
    4cf6:	1f 93       	push	r17
    4cf8:	cf 93       	push	r28
    4cfa:	df 93       	push	r29
    4cfc:	1f 92       	push	r1
    4cfe:	1f 92       	push	r1
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
# if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// RC oscillator calibration via USB Start Of Frame is not available
	// in low speed mode.
	// Thus, the calibration is disabled
	// when USB interface start in low speed mode
	DFLLRC32M.CTRL = 0;
    4d04:	00 e6       	ldi	r16, 0x60	; 96
    4d06:	10 e0       	ldi	r17, 0x00	; 0
    4d08:	f8 01       	movw	r30, r16
    4d0a:	10 82       	st	Z, r1
	// The USB hardware need of 6MHz in low speed mode
	sysclk_enable_usb(6);
	udd_set_low_speed();
#else
	// The USB hardware need of 48MHz in full speed mode
	sysclk_enable_usb(48);
    4d0c:	80 e3       	ldi	r24, 0x30	; 48
    4d0e:	0e 94 31 2c 	call	0x5862	; 0x5862 <sysclk_enable_usb>
	udd_set_full_speed();
    4d12:	e0 ec       	ldi	r30, 0xC0	; 192
    4d14:	f4 e0       	ldi	r31, 0x04	; 4
    4d16:	80 81       	ld	r24, Z
    4d18:	80 64       	ori	r24, 0x40	; 64
    4d1a:	80 83       	st	Z, r24
// The XMEGA_A1U does not support the RC calibration through Keepalive (Low speed).
#if (!defined USB_DEVICE_LOW_SPEED) || (!XMEGA_A1U)
# ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
#   if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// The SOF calibration can be enabled
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	f8 01       	movw	r30, r16
    4d20:	80 83       	st	Z, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4d22:	8f b7       	in	r24, 0x3f	; 63
    4d24:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4d26:	f8 94       	cli
	return flags;
    4d28:	1a 81       	ldd	r17, Y+2	; 0x02

	flags = cpu_irq_save();

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
    4d2a:	e0 e8       	ldi	r30, 0x80	; 128
    4d2c:	f5 e2       	ldi	r31, 0x25	; 37
    4d2e:	11 8a       	std	Z+17, r1	; 0x11
    4d30:	11 8e       	std	Z+25, r1	; 0x19
    4d32:	11 a2       	std	Z+33, r1	; 0x21
    4d34:	11 a6       	std	Z+41, r1	; 0x29
    4d36:	11 aa       	std	Z+49, r1	; 0x31
    4d38:	11 ae       	std	Z+57, r1	; 0x39
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
		udd_ep_job[i].busy = false;
    4d3a:	e1 e1       	ldi	r30, 0x11	; 17
    4d3c:	f5 e2       	ldi	r31, 0x25	; 37
    4d3e:	80 81       	ld	r24, Z
    4d40:	8e 7f       	andi	r24, 0xFE	; 254
    4d42:	80 83       	st	Z, r24
    4d44:	ea e1       	ldi	r30, 0x1A	; 26
    4d46:	f5 e2       	ldi	r31, 0x25	; 37
    4d48:	80 81       	ld	r24, Z
    4d4a:	8e 7f       	andi	r24, 0xFE	; 254
    4d4c:	80 83       	st	Z, r24
    4d4e:	e3 e2       	ldi	r30, 0x23	; 35
    4d50:	f5 e2       	ldi	r31, 0x25	; 37
    4d52:	80 81       	ld	r24, Z
    4d54:	8e 7f       	andi	r24, 0xFE	; 254
    4d56:	80 83       	st	Z, r24
    4d58:	ec e2       	ldi	r30, 0x2C	; 44
    4d5a:	f5 e2       	ldi	r31, 0x25	; 37
    4d5c:	80 81       	ld	r24, Z
    4d5e:	8e 7f       	andi	r24, 0xFE	; 254
    4d60:	80 83       	st	Z, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4d62:	6a e1       	ldi	r22, 0x1A	; 26
    4d64:	70 e0       	ldi	r23, 0x00	; 0
    4d66:	82 e0       	ldi	r24, 0x02	; 2
    4d68:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
#ifdef USB_PAD_USER_CAL0
	USB_CAL0 = USB_PAD_USER_CAL0;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL0));
	if (cal != 0xFF) {
    4d6c:	8f 3f       	cpi	r24, 0xFF	; 255
    4d6e:	19 f0       	breq	.+6      	; 0x4d76 <udd_enable+0x82>
		USB_CAL0 = cal;
    4d70:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4d74:	03 c0       	rjmp	.+6      	; 0x4d7c <udd_enable+0x88>
	} else {
		USB_CAL0 = 0x1F;
    4d76:	8f e1       	ldi	r24, 0x1F	; 31
    4d78:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4d7c:	6b e1       	ldi	r22, 0x1B	; 27
    4d7e:	70 e0       	ldi	r23, 0x00	; 0
    4d80:	82 e0       	ldi	r24, 0x02	; 2
    4d82:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
#ifdef USB_PAD_USER_CAL1
	USB_CAL1 = USB_PAD_USER_CAL1;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL1));
	if (cal != 0xFF) {
    4d86:	8f 3f       	cpi	r24, 0xFF	; 255
    4d88:	19 f0       	breq	.+6      	; 0x4d90 <udd_enable+0x9c>
		USB_CAL1 = cal;
    4d8a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4d8e:	03 c0       	rjmp	.+6      	; 0x4d96 <udd_enable+0xa2>
	} else {
		USB_CAL1 = 0x1F;
    4d90:	8f e1       	ldi	r24, 0x1F	; 31
    4d92:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
	}
#endif

	//** Enable USB hardware
	usb_pad_init();
	udd_set_nb_max_ep(USB_DEVICE_MAX_EP);
    4d96:	e0 ec       	ldi	r30, 0xC0	; 192
    4d98:	f4 e0       	ldi	r31, 0x04	; 4
    4d9a:	80 81       	ld	r24, Z
    4d9c:	82 60       	ori	r24, 0x02	; 2
    4d9e:	80 83       	st	Z, r24
	udd_enable_interface();
    4da0:	80 81       	ld	r24, Z
    4da2:	80 68       	ori	r24, 0x80	; 128
    4da4:	80 83       	st	Z, r24
	udd_enable_store_frame_number();
    4da6:	80 81       	ld	r24, Z
    4da8:	80 61       	ori	r24, 0x10	; 16
    4daa:	80 83       	st	Z, r24
#if XMEGA_A1U
	Assert(((uint16_t)(&udd_sram) & 0x0F) == 0); /* check align on 16bit */
#else
	Assert(((uint16_t)(&udd_sram) & 0x01) == 0); /* check align on WORD */
#endif
	udd_set_ep_table_addr(udd_sram.ep_ctrl);
    4dac:	80 e9       	ldi	r24, 0x90	; 144
    4dae:	95 e2       	ldi	r25, 0x25	; 37
    4db0:	86 83       	std	Z+6, r24	; 0x06
    4db2:	97 83       	std	Z+7, r25	; 0x07
	// Enable TC fifo management
	udd_enable_fifo();
    4db4:	80 81       	ld	r24, Z
    4db6:	80 62       	ori	r24, 0x20	; 32
    4db8:	80 83       	st	Z, r24
	udd_reset_fifo();
    4dba:	8f ef       	ldi	r24, 0xFF	; 255
    4dbc:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    4dc0:	e8 ec       	ldi	r30, 0xC8	; 200
    4dc2:	f4 e0       	ldi	r31, 0x04	; 4
    4dc4:	80 81       	ld	r24, Z
    4dc6:	81 60       	ori	r24, 0x01	; 1
    4dc8:	80 83       	st	Z, r24

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
    4dca:	10 92 d0 25 	sts	0x25D0, r1	; 0x8025d0 <udd_b_idle>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4dce:	80 91 e6 25 	lds	r24, 0x25E6	; 0x8025e6 <sleepmgr_locks+0x5>
    4dd2:	8f 3f       	cpi	r24, 0xFF	; 255
    4dd4:	09 f4       	brne	.+2      	; 0x4dd8 <udd_enable+0xe4>
    4dd6:	ff cf       	rjmp	.-2      	; 0x4dd6 <udd_enable+0xe2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4dd8:	8f b7       	in	r24, 0x3f	; 63
    4dda:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4ddc:	f8 94       	cli
	return flags;
    4dde:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4de0:	e1 ee       	ldi	r30, 0xE1	; 225
    4de2:	f5 e2       	ldi	r31, 0x25	; 37
    4de4:	85 81       	ldd	r24, Z+5	; 0x05
    4de6:	8f 5f       	subi	r24, 0xFF	; 255
    4de8:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4dea:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif

#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    4dec:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <udd_attach>
    4df0:	1f bf       	out	0x3f, r17	; 63
#endif
	cpu_irq_restore(flags);
}
    4df2:	0f 90       	pop	r0
    4df4:	0f 90       	pop	r0
    4df6:	df 91       	pop	r29
    4df8:	cf 91       	pop	r28
    4dfa:	1f 91       	pop	r17
    4dfc:	0f 91       	pop	r16
    4dfe:	08 95       	ret

00004e00 <udd_detach>:
}

void udd_detach(void)
{
	// Detach device from the bus
	udd_detach_device();
    4e00:	e1 ec       	ldi	r30, 0xC1	; 193
    4e02:	f4 e0       	ldi	r31, 0x04	; 4
    4e04:	80 81       	ld	r24, Z
    4e06:	8e 7f       	andi	r24, 0xFE	; 254
    4e08:	80 83       	st	Z, r24
    4e0a:	08 95       	ret

00004e0c <udd_is_high_speed>:
}

bool udd_is_high_speed(void)
{
	return false;
}
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	08 95       	ret

00004e10 <udd_set_address>:

void udd_set_address(uint8_t address)
{
	udd_set_device_address(address);
    4e10:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4e14:	08 95       	ret

00004e16 <udd_getaddress>:
}

uint8_t udd_getaddress(void)
{
	return udd_get_device_address();
    4e16:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
}
    4e1a:	08 95       	ret

00004e1c <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
	return udd_sram.frame_number;
    4e1c:	80 91 c0 25 	lds	r24, 0x25C0	; 0x8025c0 <udd_sram+0x40>
    4e20:	90 91 c1 25 	lds	r25, 0x25C1	; 0x8025c1 <udd_sram+0x41>
}
    4e24:	08 95       	ret

00004e26 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	08 95       	ret

00004e2c <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
    4e2c:	80 91 d0 25 	lds	r24, 0x25D0	; 0x8025d0 <udd_b_idle>
    4e30:	81 11       	cpse	r24, r1
    4e32:	0b c0       	rjmp	.+22     	; 0x4e4a <udd_send_remotewakeup+0x1e>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	0e 94 0f 23 	call	0x461e	; 0x461e <udd_sleep_mode>
		udd_send_remote_wake_up();
    4e3a:	e1 ec       	ldi	r30, 0xC1	; 193
    4e3c:	f4 e0       	ldi	r31, 0x04	; 4
    4e3e:	80 81       	ld	r24, Z
    4e40:	8b 7f       	andi	r24, 0xFB	; 251
    4e42:	80 83       	st	Z, r24
    4e44:	80 81       	ld	r24, Z
    4e46:	84 60       	ori	r24, 0x04	; 4
    4e48:	80 83       	st	Z, r24
    4e4a:	08 95       	ret

00004e4c <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    4e4c:	e1 ed       	ldi	r30, 0xD1	; 209
    4e4e:	f5 e2       	ldi	r31, 0x25	; 37
    4e50:	80 87       	std	Z+8, r24	; 0x08
    4e52:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    4e54:	62 87       	std	Z+10, r22	; 0x0a
    4e56:	73 87       	std	Z+11, r23	; 0x0b
    4e58:	08 95       	ret

00004e5a <udd_ep_alloc>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4e5a:	28 2f       	mov	r18, r24
    4e5c:	2f 70       	andi	r18, 0x0F	; 15
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	22 0f       	add	r18, r18
    4e62:	33 1f       	adc	r19, r19
    4e64:	08 2e       	mov	r0, r24
    4e66:	00 0c       	add	r0, r0
    4e68:	99 0b       	sbc	r25, r25
    4e6a:	88 27       	eor	r24, r24
    4e6c:	99 0f       	add	r25, r25
    4e6e:	88 1f       	adc	r24, r24
    4e70:	99 27       	eor	r25, r25
    4e72:	82 0f       	add	r24, r18
    4e74:	93 1f       	adc	r25, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
    4e76:	fc 01       	movw	r30, r24
    4e78:	ee 0f       	add	r30, r30
    4e7a:	ff 1f       	adc	r31, r31
    4e7c:	ee 0f       	add	r30, r30
    4e7e:	ff 1f       	adc	r31, r31
    4e80:	ee 0f       	add	r30, r30
    4e82:	ff 1f       	adc	r31, r31
    4e84:	e0 58       	subi	r30, 0x80	; 128
    4e86:	fa 4d       	sbci	r31, 0xDA	; 218
    4e88:	21 89       	ldd	r18, Z+17	; 0x11
    4e8a:	20 7c       	andi	r18, 0xC0	; 192
    4e8c:	09 f0       	breq	.+2      	; 0x4e90 <udd_ep_alloc+0x36>
    4e8e:	72 c0       	rjmp	.+228    	; 0x4f74 <udd_ep_alloc+0x11a>
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
    4e90:	63 70       	andi	r22, 0x03	; 3
    4e92:	61 30       	cpi	r22, 0x01	; 1
    4e94:	11 f0       	breq	.+4      	; 0x4e9a <udd_ep_alloc+0x40>
    4e96:	18 f4       	brcc	.+6      	; 0x4e9e <udd_ep_alloc+0x44>
    4e98:	04 c0       	rjmp	.+8      	; 0x4ea2 <udd_ep_alloc+0x48>
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
    4e9a:	60 ec       	ldi	r22, 0xC0	; 192
    4e9c:	03 c0       	rjmp	.+6      	; 0x4ea4 <udd_ep_alloc+0x4a>
		break;
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
    4e9e:	60 e8       	ldi	r22, 0x80	; 128
    4ea0:	01 c0       	rjmp	.+2      	; 0x4ea4 <udd_ep_alloc+0x4a>

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
    4ea2:	60 e4       	ldi	r22, 0x40	; 64
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    4ea4:	40 38       	cpi	r20, 0x80	; 128
    4ea6:	51 05       	cpc	r21, r1
    4ea8:	e9 f0       	breq	.+58     	; 0x4ee4 <udd_ep_alloc+0x8a>
    4eaa:	50 f4       	brcc	.+20     	; 0x4ec0 <udd_ep_alloc+0x66>
    4eac:	40 32       	cpi	r20, 0x20	; 32
    4eae:	51 05       	cpc	r21, r1
    4eb0:	a9 f0       	breq	.+42     	; 0x4edc <udd_ep_alloc+0x82>
    4eb2:	40 34       	cpi	r20, 0x40	; 64
    4eb4:	51 05       	cpc	r21, r1
    4eb6:	a1 f0       	breq	.+40     	; 0x4ee0 <udd_ep_alloc+0x86>
    4eb8:	40 31       	cpi	r20, 0x10	; 16
    4eba:	51 05       	cpc	r21, r1
    4ebc:	d9 f4       	brne	.+54     	; 0x4ef4 <udd_ep_alloc+0x9a>
    4ebe:	0c c0       	rjmp	.+24     	; 0x4ed8 <udd_ep_alloc+0x7e>
    4ec0:	41 15       	cp	r20, r1
    4ec2:	22 e0       	ldi	r18, 0x02	; 2
    4ec4:	52 07       	cpc	r21, r18
    4ec6:	91 f0       	breq	.+36     	; 0x4eec <udd_ep_alloc+0x92>
    4ec8:	4f 3f       	cpi	r20, 0xFF	; 255
    4eca:	23 e0       	ldi	r18, 0x03	; 3
    4ecc:	52 07       	cpc	r21, r18
    4ece:	81 f0       	breq	.+32     	; 0x4ef0 <udd_ep_alloc+0x96>
    4ed0:	41 15       	cp	r20, r1
    4ed2:	51 40       	sbci	r21, 0x01	; 1
    4ed4:	79 f4       	brne	.+30     	; 0x4ef4 <udd_ep_alloc+0x9a>
    4ed6:	08 c0       	rjmp	.+16     	; 0x4ee8 <udd_ep_alloc+0x8e>
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
    4ed8:	21 e0       	ldi	r18, 0x01	; 1
    4eda:	0d c0       	rjmp	.+26     	; 0x4ef6 <udd_ep_alloc+0x9c>
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    4edc:	22 e0       	ldi	r18, 0x02	; 2
    4ede:	0b c0       	rjmp	.+22     	; 0x4ef6 <udd_ep_alloc+0x9c>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    4ee0:	23 e0       	ldi	r18, 0x03	; 3
    4ee2:	09 c0       	rjmp	.+18     	; 0x4ef6 <udd_ep_alloc+0x9c>
		break;
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
    4ee4:	24 e0       	ldi	r18, 0x04	; 4
    4ee6:	07 c0       	rjmp	.+14     	; 0x4ef6 <udd_ep_alloc+0x9c>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    4ee8:	25 e0       	ldi	r18, 0x05	; 5
    4eea:	05 c0       	rjmp	.+10     	; 0x4ef6 <udd_ep_alloc+0x9c>
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    4eec:	26 e0       	ldi	r18, 0x06	; 6
    4eee:	03 c0       	rjmp	.+6      	; 0x4ef6 <udd_ep_alloc+0x9c>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    4ef0:	27 e0       	ldi	r18, 0x07	; 7
    4ef2:	01 c0       	rjmp	.+2      	; 0x4ef6 <udd_ep_alloc+0x9c>
	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	ee 0f       	add	r30, r30
    4efa:	ff 1f       	adc	r31, r31
    4efc:	ee 0f       	add	r30, r30
    4efe:	ff 1f       	adc	r31, r31
    4f00:	ee 0f       	add	r30, r30
    4f02:	ff 1f       	adc	r31, r31
    4f04:	e0 58       	subi	r30, 0x80	; 128
    4f06:	fa 4d       	sbci	r31, 0xDA	; 218
    4f08:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    4f0a:	dc 01       	movw	r26, r24
    4f0c:	aa 0f       	add	r26, r26
    4f0e:	bb 1f       	adc	r27, r27
    4f10:	aa 0f       	add	r26, r26
    4f12:	bb 1f       	adc	r27, r27
    4f14:	aa 0f       	add	r26, r26
    4f16:	bb 1f       	adc	r27, r27
    4f18:	a0 57       	subi	r26, 0x70	; 112
    4f1a:	ba 4d       	sbci	r27, 0xDA	; 218
    4f1c:	36 e0       	ldi	r19, 0x06	; 6
    4f1e:	3c 93       	st	X, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4f20:	26 2b       	or	r18, r22
    4f22:	21 8b       	std	Z+17, r18	; 0x11
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
    4f24:	fc 01       	movw	r30, r24
    4f26:	ee 0f       	add	r30, r30
    4f28:	ff 1f       	adc	r31, r31
    4f2a:	ee 0f       	add	r30, r30
    4f2c:	ff 1f       	adc	r31, r31
    4f2e:	ee 0f       	add	r30, r30
    4f30:	ff 1f       	adc	r31, r31
    4f32:	e0 58       	subi	r30, 0x80	; 128
    4f34:	fa 4d       	sbci	r31, 0xDA	; 218
    4f36:	21 89       	ldd	r18, Z+17	; 0x11
    4f38:	20 7c       	andi	r18, 0xC0	; 192
    4f3a:	20 3c       	cpi	r18, 0xC0	; 192
    4f3c:	69 f4       	brne	.+26     	; 0x4f58 <udd_ep_alloc+0xfe>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    4f3e:	fc 01       	movw	r30, r24
    4f40:	ee 0f       	add	r30, r30
    4f42:	ff 1f       	adc	r31, r31
    4f44:	ee 0f       	add	r30, r30
    4f46:	ff 1f       	adc	r31, r31
    4f48:	ee 0f       	add	r30, r30
    4f4a:	ff 1f       	adc	r31, r31
    4f4c:	e0 58       	subi	r30, 0x80	; 128
    4f4e:	fa 4d       	sbci	r31, 0xDA	; 218
    4f50:	21 89       	ldd	r18, Z+17	; 0x11
    4f52:	27 70       	andi	r18, 0x07	; 7
    4f54:	27 30       	cpi	r18, 0x07	; 7
    4f56:	81 f0       	breq	.+32     	; 0x4f78 <udd_ep_alloc+0x11e>
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
    4f58:	88 0f       	add	r24, r24
    4f5a:	99 1f       	adc	r25, r25
    4f5c:	88 0f       	add	r24, r24
    4f5e:	99 1f       	adc	r25, r25
    4f60:	88 0f       	add	r24, r24
    4f62:	99 1f       	adc	r25, r25
    4f64:	fc 01       	movw	r30, r24
    4f66:	e0 58       	subi	r30, 0x80	; 128
    4f68:	fa 4d       	sbci	r31, 0xDA	; 218
    4f6a:	81 89       	ldd	r24, Z+17	; 0x11
    4f6c:	80 62       	ori	r24, 0x20	; 32
    4f6e:	81 8b       	std	Z+17, r24	; 0x11
	return true;
    4f70:	81 e0       	ldi	r24, 0x01	; 1
    4f72:	08 95       	ret
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	08 95       	ret

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
    4f78:	81 e0       	ldi	r24, 0x01	; 1
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
    4f7a:	08 95       	ret

00004f7c <udd_ep_is_halted>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4f7c:	e8 2f       	mov	r30, r24
    4f7e:	ef 70       	andi	r30, 0x0F	; 15
    4f80:	f0 e0       	ldi	r31, 0x00	; 0
    4f82:	ee 0f       	add	r30, r30
    4f84:	ff 1f       	adc	r31, r31
    4f86:	08 2e       	mov	r0, r24
    4f88:	00 0c       	add	r0, r0
    4f8a:	99 0b       	sbc	r25, r25
    4f8c:	88 27       	eor	r24, r24
    4f8e:	99 0f       	add	r25, r25
    4f90:	88 1f       	adc	r24, r24
    4f92:	99 27       	eor	r25, r25
    4f94:	e8 0f       	add	r30, r24
    4f96:	f9 1f       	adc	r31, r25
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
    4f98:	ee 0f       	add	r30, r30
    4f9a:	ff 1f       	adc	r31, r31
    4f9c:	ee 0f       	add	r30, r30
    4f9e:	ff 1f       	adc	r31, r31
    4fa0:	ee 0f       	add	r30, r30
    4fa2:	ff 1f       	adc	r31, r31
    4fa4:	e0 58       	subi	r30, 0x80	; 128
    4fa6:	fa 4d       	sbci	r31, 0xDA	; 218
    4fa8:	81 89       	ldd	r24, Z+17	; 0x11
}
    4faa:	82 fb       	bst	r24, 2
    4fac:	88 27       	eor	r24, r24
    4fae:	80 f9       	bld	r24, 0
    4fb0:	08 95       	ret

00004fb2 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    4fb2:	0f 93       	push	r16
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4fb4:	28 2f       	mov	r18, r24
    4fb6:	2f 70       	andi	r18, 0x0F	; 15
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	a9 01       	movw	r20, r18
    4fbc:	44 0f       	add	r20, r20
    4fbe:	55 1f       	adc	r21, r21
    4fc0:	28 2f       	mov	r18, r24
    4fc2:	08 2e       	mov	r0, r24
    4fc4:	00 0c       	add	r0, r0
    4fc6:	33 0b       	sbc	r19, r19
    4fc8:	22 27       	eor	r18, r18
    4fca:	33 0f       	add	r19, r19
    4fcc:	22 1f       	adc	r18, r18
    4fce:	33 27       	eor	r19, r19
    4fd0:	24 0f       	add	r18, r20
    4fd2:	35 1f       	adc	r19, r21
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_clear_dtgl(ep_ctrl);
    4fd4:	f9 01       	movw	r30, r18
    4fd6:	ee 0f       	add	r30, r30
    4fd8:	ff 1f       	adc	r31, r31
    4fda:	ee 0f       	add	r30, r30
    4fdc:	ff 1f       	adc	r31, r31
    4fde:	ee 0f       	add	r30, r30
    4fe0:	ff 1f       	adc	r31, r31
    4fe2:	e0 57       	subi	r30, 0x70	; 112
    4fe4:	fa 4d       	sbci	r31, 0xDA	; 218
    4fe6:	01 e0       	ldi	r16, 0x01	; 1
    4fe8:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    4fea:	f9 01       	movw	r30, r18
    4fec:	ee 0f       	add	r30, r30
    4fee:	ff 1f       	adc	r31, r31
    4ff0:	ee 0f       	add	r30, r30
    4ff2:	ff 1f       	adc	r31, r31
    4ff4:	ee 0f       	add	r30, r30
    4ff6:	ff 1f       	adc	r31, r31
    4ff8:	e0 58       	subi	r30, 0x80	; 128
    4ffa:	fa 4d       	sbci	r31, 0xDA	; 218
    4ffc:	91 89       	ldd	r25, Z+17	; 0x11
    4ffe:	92 ff       	sbrs	r25, 2
    5000:	18 c0       	rjmp	.+48     	; 0x5032 <udd_ep_clear_halt+0x80>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    5002:	22 0f       	add	r18, r18
    5004:	33 1f       	adc	r19, r19
    5006:	22 0f       	add	r18, r18
    5008:	33 1f       	adc	r19, r19
    500a:	22 0f       	add	r18, r18
    500c:	33 1f       	adc	r19, r19
    500e:	f9 01       	movw	r30, r18
    5010:	e0 58       	subi	r30, 0x80	; 128
    5012:	fa 4d       	sbci	r31, 0xDA	; 218
    5014:	91 89       	ldd	r25, Z+17	; 0x11
    5016:	9b 7f       	andi	r25, 0xFB	; 251
    5018:	91 8b       	std	Z+17, r25	; 0x11

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
    501a:	0e 94 27 24 	call	0x484e	; 0x484e <udd_ep_get_job>
    501e:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    5020:	80 81       	ld	r24, Z
    5022:	80 ff       	sbrs	r24, 0
    5024:	06 c0       	rjmp	.+12     	; 0x5032 <udd_ep_clear_halt+0x80>
		ptr_job->busy = false;
    5026:	8e 7f       	andi	r24, 0xFE	; 254
    5028:	80 83       	st	Z, r24
		ptr_job->call_nohalt();
    502a:	07 80       	ldd	r0, Z+7	; 0x07
    502c:	f0 85       	ldd	r31, Z+8	; 0x08
    502e:	e0 2d       	mov	r30, r0
    5030:	19 95       	eicall
	}
	return true;
}
    5032:	81 e0       	ldi	r24, 0x01	; 1
    5034:	0f 91       	pop	r16
    5036:	08 95       	ret

00005038 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
    5038:	6f 92       	push	r6
    503a:	7f 92       	push	r7
    503c:	8f 92       	push	r8
    503e:	9f 92       	push	r9
    5040:	af 92       	push	r10
    5042:	bf 92       	push	r11
    5044:	cf 92       	push	r12
    5046:	df 92       	push	r13
    5048:	ef 92       	push	r14
    504a:	ff 92       	push	r15
    504c:	0f 93       	push	r16
    504e:	1f 93       	push	r17
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	1f 92       	push	r1
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	78 2e       	mov	r7, r24
    505c:	66 2e       	mov	r6, r22
    505e:	4a 01       	movw	r8, r20
    5060:	59 01       	movw	r10, r18
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
    5062:	0e 94 27 24 	call	0x484e	; 0x484e <udd_ep_get_job>
    5066:	6c 01       	movw	r12, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    5068:	27 2d       	mov	r18, r7
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    506a:	87 2d       	mov	r24, r7
    506c:	8f 70       	andi	r24, 0x0F	; 15
    506e:	e8 2e       	mov	r14, r24
    5070:	f1 2c       	mov	r15, r1
    5072:	c7 01       	movw	r24, r14
    5074:	88 0f       	add	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	e7 2c       	mov	r14, r7
    507a:	07 2c       	mov	r0, r7
    507c:	00 0c       	add	r0, r0
    507e:	ff 08       	sbc	r15, r15
    5080:	ee 24       	eor	r14, r14
    5082:	ff 0c       	add	r15, r15
    5084:	ee 1c       	adc	r14, r14
    5086:	ff 24       	eor	r15, r15
    5088:	e8 0e       	add	r14, r24
    508a:	f9 1e       	adc	r15, r25

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
    508c:	f7 01       	movw	r30, r14
    508e:	ee 0f       	add	r30, r30
    5090:	ff 1f       	adc	r31, r31
    5092:	ee 0f       	add	r30, r30
    5094:	ff 1f       	adc	r31, r31
    5096:	ee 0f       	add	r30, r30
    5098:	ff 1f       	adc	r31, r31
    509a:	e0 58       	subi	r30, 0x80	; 128
    509c:	fa 4d       	sbci	r31, 0xDA	; 218
    509e:	81 89       	ldd	r24, Z+17	; 0x11
    50a0:	80 7c       	andi	r24, 0xC0	; 192
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <udd_ep_run+0x6e>
    50a4:	84 c0       	rjmp	.+264    	; 0x51ae <udd_ep_run+0x176>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    50a6:	f7 01       	movw	r30, r14
    50a8:	ee 0f       	add	r30, r30
    50aa:	ff 1f       	adc	r31, r31
    50ac:	ee 0f       	add	r30, r30
    50ae:	ff 1f       	adc	r31, r31
    50b0:	ee 0f       	add	r30, r30
    50b2:	ff 1f       	adc	r31, r31
    50b4:	e0 58       	subi	r30, 0x80	; 128
    50b6:	fa 4d       	sbci	r31, 0xDA	; 218
    50b8:	81 89       	ldd	r24, Z+17	; 0x11
    50ba:	80 7c       	andi	r24, 0xC0	; 192
    50bc:	80 3c       	cpi	r24, 0xC0	; 192
    50be:	61 f0       	breq	.+24     	; 0x50d8 <udd_ep_run+0xa0>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    50c0:	f7 01       	movw	r30, r14
    50c2:	ee 0f       	add	r30, r30
    50c4:	ff 1f       	adc	r31, r31
    50c6:	ee 0f       	add	r30, r30
    50c8:	ff 1f       	adc	r31, r31
    50ca:	ee 0f       	add	r30, r30
    50cc:	ff 1f       	adc	r31, r31
    50ce:	e0 58       	subi	r30, 0x80	; 128
    50d0:	fa 4d       	sbci	r31, 0xDA	; 218
    50d2:	81 89       	ldd	r24, Z+17	; 0x11
    50d4:	82 fd       	sbrc	r24, 2
    50d6:	6d c0       	rjmp	.+218    	; 0x51b2 <udd_ep_run+0x17a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    50d8:	8f b7       	in	r24, 0x3f	; 63
    50da:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    50dc:	f8 94       	cli
	return flags;
    50de:	89 81       	ldd	r24, Y+1	; 0x01
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    50e0:	f6 01       	movw	r30, r12
    50e2:	90 81       	ld	r25, Z
    50e4:	90 ff       	sbrs	r25, 0
    50e6:	03 c0       	rjmp	.+6      	; 0x50ee <udd_ep_run+0xb6>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    50e8:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		return false; // Job already on going
    50ea:	80 e0       	ldi	r24, 0x00	; 0
    50ec:	63 c0       	rjmp	.+198    	; 0x51b4 <udd_ep_run+0x17c>
	}
	ptr_job->busy = true;
    50ee:	f6 01       	movw	r30, r12
    50f0:	90 81       	ld	r25, Z
    50f2:	91 60       	ori	r25, 0x01	; 1
    50f4:	90 83       	st	Z, r25
    50f6:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
    50f8:	81 82       	std	Z+1, r8	; 0x01
    50fa:	92 82       	std	Z+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    50fc:	a3 82       	std	Z+3, r10	; 0x03
    50fe:	b4 82       	std	Z+4, r11	; 0x04
	ptr_job->nb_trans = 0;
    5100:	15 82       	std	Z+5, r1	; 0x05
    5102:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->call_trans = callback;
    5104:	07 83       	std	Z+7, r16	; 0x07
    5106:	10 87       	std	Z+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    5108:	61 10       	cpse	r6, r1
    510a:	06 c0       	rjmp	.+12     	; 0x5118 <udd_ep_run+0xe0>
    510c:	91 e0       	ldi	r25, 0x01	; 1
    510e:	a1 14       	cp	r10, r1
    5110:	b1 04       	cpc	r11, r1
    5112:	19 f0       	breq	.+6      	; 0x511a <udd_ep_run+0xe2>
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	01 c0       	rjmp	.+2      	; 0x511a <udd_ep_run+0xe2>
    5118:	91 e0       	ldi	r25, 0x01	; 1
    511a:	f6 01       	movw	r30, r12
    511c:	80 81       	ld	r24, Z
    511e:	90 fb       	bst	r25, 0
    5120:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    5122:	8b 7f       	andi	r24, 0xFB	; 251
    5124:	80 83       	st	Z, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    5126:	22 23       	and	r18, r18
    5128:	64 f4       	brge	.+24     	; 0x5142 <udd_ep_run+0x10a>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    512a:	f7 01       	movw	r30, r14
    512c:	ee 0f       	add	r30, r30
    512e:	ff 1f       	adc	r31, r31
    5130:	ee 0f       	add	r30, r30
    5132:	ff 1f       	adc	r31, r31
    5134:	ee 0f       	add	r30, r30
    5136:	ff 1f       	adc	r31, r31
    5138:	e0 58       	subi	r30, 0x80	; 128
    513a:	fa 4d       	sbci	r31, 0xDA	; 218
    513c:	16 8a       	std	Z+22, r1	; 0x16
    513e:	17 8a       	std	Z+23, r1	; 0x17
    5140:	31 c0       	rjmp	.+98     	; 0x51a4 <udd_ep_run+0x16c>
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
    5142:	f7 01       	movw	r30, r14
    5144:	ee 0f       	add	r30, r30
    5146:	ff 1f       	adc	r31, r31
    5148:	ee 0f       	add	r30, r30
    514a:	ff 1f       	adc	r31, r31
    514c:	ee 0f       	add	r30, r30
    514e:	ff 1f       	adc	r31, r31
    5150:	e0 58       	subi	r30, 0x80	; 128
    5152:	fa 4d       	sbci	r31, 0xDA	; 218
    5154:	81 89       	ldd	r24, Z+17	; 0x11
    5156:	80 7c       	andi	r24, 0xC0	; 192
    5158:	80 3c       	cpi	r24, 0xC0	; 192
    515a:	b9 f4       	brne	.+46     	; 0x518a <udd_ep_run+0x152>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    515c:	c7 01       	movw	r24, r14
    515e:	88 0f       	add	r24, r24
    5160:	99 1f       	adc	r25, r25
    5162:	88 0f       	add	r24, r24
    5164:	99 1f       	adc	r25, r25
    5166:	88 0f       	add	r24, r24
    5168:	99 1f       	adc	r25, r25
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
    516a:	80 57       	subi	r24, 0x70	; 112
    516c:	9a 4d       	sbci	r25, 0xDA	; 218
    516e:	0e 94 fe 23 	call	0x47fc	; 0x47fc <udd_ep_get_size>
    5172:	bc 01       	movw	r22, r24
    5174:	c5 01       	movw	r24, r10
    5176:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    517a:	89 2b       	or	r24, r25
    517c:	31 f0       	breq	.+12     	; 0x518a <udd_ep_run+0x152>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    517e:	f6 01       	movw	r30, r12
    5180:	80 81       	ld	r24, Z
    5182:	8e 7f       	andi	r24, 0xFE	; 254
    5184:	80 83       	st	Z, r24
			return false;
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	15 c0       	rjmp	.+42     	; 0x51b4 <udd_ep_run+0x17c>
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    518a:	f7 01       	movw	r30, r14
    518c:	ee 0f       	add	r30, r30
    518e:	ff 1f       	adc	r31, r31
    5190:	ee 0f       	add	r30, r30
    5192:	ff 1f       	adc	r31, r31
    5194:	ee 0f       	add	r30, r30
    5196:	ff 1f       	adc	r31, r31
    5198:	e0 58       	subi	r30, 0x80	; 128
    519a:	fa 4d       	sbci	r31, 0xDA	; 218
    519c:	12 8a       	std	Z+18, r1	; 0x12
    519e:	13 8a       	std	Z+19, r1	; 0x13
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    51a0:	16 8a       	std	Z+22, r1	; 0x16
    51a2:	17 8a       	std	Z+23, r1	; 0x17
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    51a4:	87 2d       	mov	r24, r7
    51a6:	0e 94 b9 24 	call	0x4972	; 0x4972 <udd_ep_trans_complet>
	return true;
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	03 c0       	rjmp	.+6      	; 0x51b4 <udd_ep_run+0x17c>
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <udd_ep_run+0x17c>
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
		&& udd_endpoint_is_stall(ep_ctrl)) {
		return false; // Endpoint is halted
    51b2:	80 e0       	ldi	r24, 0x00	; 0
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
    51b4:	0f 90       	pop	r0
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	ff 90       	pop	r15
    51c0:	ef 90       	pop	r14
    51c2:	df 90       	pop	r13
    51c4:	cf 90       	pop	r12
    51c6:	bf 90       	pop	r11
    51c8:	af 90       	pop	r10
    51ca:	9f 90       	pop	r9
    51cc:	8f 90       	pop	r8
    51ce:	7f 90       	pop	r7
    51d0:	6f 90       	pop	r6
    51d2:	08 95       	ret

000051d4 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    51d4:	ff 92       	push	r15
    51d6:	0f 93       	push	r16
    51d8:	1f 93       	push	r17
    51da:	cf 93       	push	r28
    51dc:	df 93       	push	r29
    51de:	18 2f       	mov	r17, r24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    51e0:	c8 2f       	mov	r28, r24
    51e2:	cf 70       	andi	r28, 0x0F	; 15
    51e4:	d0 e0       	ldi	r29, 0x00	; 0
    51e6:	ce 01       	movw	r24, r28
    51e8:	88 0f       	add	r24, r24
    51ea:	99 1f       	adc	r25, r25
    51ec:	c1 2f       	mov	r28, r17
    51ee:	01 2e       	mov	r0, r17
    51f0:	00 0c       	add	r0, r0
    51f2:	dd 0b       	sbc	r29, r29
    51f4:	cc 27       	eor	r28, r28
    51f6:	dd 0f       	add	r29, r29
    51f8:	cc 1f       	adc	r28, r28
    51fa:	dd 27       	eor	r29, r29
    51fc:	c8 0f       	add	r28, r24
    51fe:	d9 1f       	adc	r29, r25
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    5200:	81 2f       	mov	r24, r17
    5202:	0e 94 27 24 	call	0x484e	; 0x484e <udd_ep_get_job>
    5206:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    5208:	fe 01       	movw	r30, r28
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	ee 0f       	add	r30, r30
    5210:	ff 1f       	adc	r31, r31
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	e0 57       	subi	r30, 0x70	; 112
    5218:	fa 4d       	sbci	r31, 0xDA	; 218
    521a:	02 e0       	ldi	r16, 0x02	; 2
    521c:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    521e:	8c 91       	ld	r24, X
    5220:	80 ff       	sbrs	r24, 0
    5222:	22 c0       	rjmp	.+68     	; 0x5268 <udd_ep_abort+0x94>
		return; // No job on going
	}
	ptr_job->busy = false;
    5224:	8e 7f       	andi	r24, 0xFE	; 254
    5226:	8c 93       	st	X, r24
	if (NULL != ptr_job->call_trans) {
    5228:	17 96       	adiw	r26, 0x07	; 7
    522a:	ed 91       	ld	r30, X+
    522c:	fc 91       	ld	r31, X
    522e:	18 97       	sbiw	r26, 0x08	; 8
    5230:	30 97       	sbiw	r30, 0x00	; 0
    5232:	d1 f0       	breq	.+52     	; 0x5268 <udd_ep_abort+0x94>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    5234:	11 23       	and	r17, r17
    5236:	5c f4       	brge	.+22     	; 0x524e <udd_ep_abort+0x7a>
    5238:	cc 0f       	add	r28, r28
    523a:	dd 1f       	adc	r29, r29
    523c:	cc 0f       	add	r28, r28
    523e:	dd 1f       	adc	r29, r29
    5240:	cc 0f       	add	r28, r28
    5242:	dd 1f       	adc	r29, r29
    5244:	c0 58       	subi	r28, 0x80	; 128
    5246:	da 4d       	sbci	r29, 0xDA	; 218
    5248:	6e 89       	ldd	r22, Y+22	; 0x16
    524a:	7f 89       	ldd	r23, Y+23	; 0x17
    524c:	0a c0       	rjmp	.+20     	; 0x5262 <udd_ep_abort+0x8e>
    524e:	cc 0f       	add	r28, r28
    5250:	dd 1f       	adc	r29, r29
    5252:	cc 0f       	add	r28, r28
    5254:	dd 1f       	adc	r29, r29
    5256:	cc 0f       	add	r28, r28
    5258:	dd 1f       	adc	r29, r29
    525a:	c0 58       	subi	r28, 0x80	; 128
    525c:	da 4d       	sbci	r29, 0xDA	; 218
    525e:	6a 89       	ldd	r22, Y+18	; 0x12
    5260:	7b 89       	ldd	r23, Y+19	; 0x13
    5262:	41 2f       	mov	r20, r17
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	19 95       	eicall
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
    5268:	df 91       	pop	r29
    526a:	cf 91       	pop	r28
    526c:	1f 91       	pop	r17
    526e:	0f 91       	pop	r16
    5270:	ff 90       	pop	r15
    5272:	08 95       	ret

00005274 <udd_ep_free>:
	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}

void udd_ep_free(udd_ep_id_t ep)
{
    5274:	cf 93       	push	r28
    5276:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
    5278:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    527c:	ec 2f       	mov	r30, r28
    527e:	ef 70       	andi	r30, 0x0F	; 15
    5280:	f0 e0       	ldi	r31, 0x00	; 0
    5282:	ee 0f       	add	r30, r30
    5284:	ff 1f       	adc	r31, r31
    5286:	8c 2f       	mov	r24, r28
    5288:	cc 0f       	add	r28, r28
    528a:	99 0b       	sbc	r25, r25
    528c:	88 27       	eor	r24, r24
    528e:	99 0f       	add	r25, r25
    5290:	88 1f       	adc	r24, r24
    5292:	99 27       	eor	r25, r25
    5294:	e8 0f       	add	r30, r24
    5296:	f9 1f       	adc	r31, r25
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5298:	ee 0f       	add	r30, r30
    529a:	ff 1f       	adc	r31, r31
    529c:	ee 0f       	add	r30, r30
    529e:	ff 1f       	adc	r31, r31
    52a0:	ee 0f       	add	r30, r30
    52a2:	ff 1f       	adc	r31, r31
    52a4:	e0 58       	subi	r30, 0x80	; 128
    52a6:	fa 4d       	sbci	r31, 0xDA	; 218
    52a8:	11 8a       	std	Z+17, r1	; 0x11
}
    52aa:	cf 91       	pop	r28
    52ac:	08 95       	ret

000052ae <udd_ep_set_halt>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    52ae:	e8 2f       	mov	r30, r24
    52b0:	ef 70       	andi	r30, 0x0F	; 15
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	ee 0f       	add	r30, r30
    52b6:	ff 1f       	adc	r31, r31
    52b8:	28 2f       	mov	r18, r24
    52ba:	08 2e       	mov	r0, r24
    52bc:	00 0c       	add	r0, r0
    52be:	33 0b       	sbc	r19, r19
    52c0:	22 27       	eor	r18, r18
    52c2:	33 0f       	add	r19, r19
    52c4:	22 1f       	adc	r18, r18
    52c6:	33 27       	eor	r19, r19
    52c8:	e2 0f       	add	r30, r18
    52ca:	f3 1f       	adc	r31, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_enable_stall(ep_ctrl);
    52cc:	ee 0f       	add	r30, r30
    52ce:	ff 1f       	adc	r31, r31
    52d0:	ee 0f       	add	r30, r30
    52d2:	ff 1f       	adc	r31, r31
    52d4:	ee 0f       	add	r30, r30
    52d6:	ff 1f       	adc	r31, r31
    52d8:	e0 58       	subi	r30, 0x80	; 128
    52da:	fa 4d       	sbci	r31, 0xDA	; 218
    52dc:	91 89       	ldd	r25, Z+17	; 0x11
    52de:	94 60       	ori	r25, 0x04	; 4
    52e0:	91 8b       	std	Z+17, r25	; 0x11

	udd_ep_abort(ep);
    52e2:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
	return true;
}
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	08 95       	ret

000052ea <udd_ep_wait_stall_clear>:
	}
}

bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
    52ea:	0f 93       	push	r16
    52ec:	1f 93       	push	r17
    52ee:	cf 93       	push	r28
    52f0:	df 93       	push	r29
    52f2:	8b 01       	movw	r16, r22
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    52f4:	c8 2f       	mov	r28, r24
    52f6:	cf 70       	andi	r28, 0x0F	; 15
    52f8:	d0 e0       	ldi	r29, 0x00	; 0
    52fa:	cc 0f       	add	r28, r28
    52fc:	dd 1f       	adc	r29, r29
    52fe:	28 2f       	mov	r18, r24
    5300:	08 2e       	mov	r0, r24
    5302:	00 0c       	add	r0, r0
    5304:	33 0b       	sbc	r19, r19
    5306:	22 27       	eor	r18, r18
    5308:	33 0f       	add	r19, r19
    530a:	22 1f       	adc	r18, r18
    530c:	33 27       	eor	r19, r19
    530e:	c2 0f       	add	r28, r18
    5310:	d3 1f       	adc	r29, r19
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    5312:	0e 94 27 24 	call	0x484e	; 0x484e <udd_ep_get_job>

	if (udd_endpoint_is_stall(ep_ctrl)) {
    5316:	cc 0f       	add	r28, r28
    5318:	dd 1f       	adc	r29, r29
    531a:	cc 0f       	add	r28, r28
    531c:	dd 1f       	adc	r29, r29
    531e:	cc 0f       	add	r28, r28
    5320:	dd 1f       	adc	r29, r29
    5322:	c0 58       	subi	r28, 0x80	; 128
    5324:	da 4d       	sbci	r29, 0xDA	; 218
    5326:	29 89       	ldd	r18, Y+17	; 0x11
    5328:	22 ff       	sbrs	r18, 2
    532a:	0a c0       	rjmp	.+20     	; 0x5340 <udd_ep_wait_stall_clear+0x56>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    532c:	fc 01       	movw	r30, r24
    532e:	20 81       	ld	r18, Z
    5330:	20 fd       	sbrc	r18, 0
    5332:	0a c0       	rjmp	.+20     	; 0x5348 <udd_ep_wait_stall_clear+0x5e>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    5334:	21 60       	ori	r18, 0x01	; 1
    5336:	20 83       	st	Z, r18
		ptr_job->call_nohalt = callback;
    5338:	07 83       	std	Z+7, r16	; 0x07
    533a:	10 87       	std	Z+8, r17	; 0x08
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	05 c0       	rjmp	.+10     	; 0x534a <udd_ep_wait_stall_clear+0x60>
		}
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
    5340:	f8 01       	movw	r30, r16
    5342:	19 95       	eicall
	}
	return true;
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	01 c0       	rjmp	.+2      	; 0x534a <udd_ep_wait_stall_clear+0x60>
	ptr_job = udd_ep_get_job(ep);

	if (udd_endpoint_is_stall(ep_ctrl)) {
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
			return false; // Job already on going
    5348:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    534a:	df 91       	pop	r29
    534c:	cf 91       	pop	r28
    534e:	1f 91       	pop	r17
    5350:	0f 91       	pop	r16
    5352:	08 95       	ret

00005354 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    5354:	1f 92       	push	r1
    5356:	0f 92       	push	r0
    5358:	0f b6       	in	r0, 0x3f	; 63
    535a:	0f 92       	push	r0
    535c:	11 24       	eor	r1, r1
    535e:	08 b6       	in	r0, 0x38	; 56
    5360:	0f 92       	push	r0
    5362:	18 be       	out	0x38, r1	; 56
    5364:	09 b6       	in	r0, 0x39	; 57
    5366:	0f 92       	push	r0
    5368:	19 be       	out	0x39, r1	; 57
    536a:	0b b6       	in	r0, 0x3b	; 59
    536c:	0f 92       	push	r0
    536e:	1b be       	out	0x3b, r1	; 59
    5370:	0f 93       	push	r16
    5372:	2f 93       	push	r18
    5374:	3f 93       	push	r19
    5376:	4f 93       	push	r20
    5378:	5f 93       	push	r21
    537a:	6f 93       	push	r22
    537c:	7f 93       	push	r23
    537e:	8f 93       	push	r24
    5380:	9f 93       	push	r25
    5382:	af 93       	push	r26
    5384:	bf 93       	push	r27
    5386:	ef 93       	push	r30
    5388:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    538a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    538e:	88 23       	and	r24, r24
    5390:	34 f4       	brge	.+12     	; 0x539e <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    5392:	80 e8       	ldi	r24, 0x80	; 128
    5394:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    5398:	0e 94 3f 20 	call	0x407e	; 0x407e <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    539c:	90 c0       	rjmp	.+288    	; 0x54be <__vector_125+0x16a>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    539e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    53a2:	82 ff       	sbrs	r24, 2
    53a4:	22 c0       	rjmp	.+68     	; 0x53ea <__vector_125+0x96>
		udd_ack_underflow_event();
    53a6:	84 e0       	ldi	r24, 0x04	; 4
    53a8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    53ac:	80 91 98 25 	lds	r24, 0x2598	; 0x802598 <udd_sram+0x18>
    53b0:	86 ff       	sbrs	r24, 6
    53b2:	85 c0       	rjmp	.+266    	; 0x54be <__vector_125+0x16a>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    53b4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    53b8:	81 fd       	sbrc	r24, 1
    53ba:	81 c0       	rjmp	.+258    	; 0x54be <__vector_125+0x16a>
    53bc:	0e 94 42 24 	call	0x4884	; 0x4884 <udd_ctrl_interrupt_tc_setup>
    53c0:	81 11       	cpse	r24, r1
    53c2:	7d c0       	rjmp	.+250    	; 0x54be <__vector_125+0x16a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    53c4:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    53c8:	81 30       	cpi	r24, 0x01	; 1
    53ca:	19 f4       	brne	.+6      	; 0x53d2 <__vector_125+0x7e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    53cc:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <udd_ctrl_send_zlp_in>
    53d0:	76 c0       	rjmp	.+236    	; 0x54be <__vector_125+0x16a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    53d2:	84 30       	cpi	r24, 0x04	; 4
    53d4:	09 f0       	breq	.+2      	; 0x53d8 <__vector_125+0x84>
    53d6:	73 c0       	rjmp	.+230    	; 0x54be <__vector_125+0x16a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    53d8:	e9 e9       	ldi	r30, 0x99	; 153
    53da:	f5 e2       	ldi	r31, 0x25	; 37
    53dc:	04 e0       	ldi	r16, 0x04	; 4
    53de:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    53e0:	e1 e9       	ldi	r30, 0x91	; 145
    53e2:	f5 e2       	ldi	r31, 0x25	; 37
    53e4:	04 e0       	ldi	r16, 0x04	; 4
    53e6:	05 93       	las	Z, r16
    53e8:	6a c0       	rjmp	.+212    	; 0x54be <__vector_125+0x16a>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    53ea:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    53ee:	81 ff       	sbrs	r24, 1
    53f0:	61 c0       	rjmp	.+194    	; 0x54b4 <__vector_125+0x160>
		udd_ack_overflow_event();
    53f2:	82 e0       	ldi	r24, 0x02	; 2
    53f4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    53f8:	80 91 90 25 	lds	r24, 0x2590	; 0x802590 <udd_sram+0x10>
    53fc:	86 ff       	sbrs	r24, 6
    53fe:	5f c0       	rjmp	.+190    	; 0x54be <__vector_125+0x16a>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5400:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5404:	81 fd       	sbrc	r24, 1
    5406:	5b c0       	rjmp	.+182    	; 0x54be <__vector_125+0x16a>
    5408:	0e 94 42 24 	call	0x4884	; 0x4884 <udd_ctrl_interrupt_tc_setup>
    540c:	81 11       	cpse	r24, r1
    540e:	57 c0       	rjmp	.+174    	; 0x54be <__vector_125+0x16a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5410:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    5414:	82 30       	cpi	r24, 0x02	; 2
    5416:	41 f4       	brne	.+16     	; 0x5428 <__vector_125+0xd4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    5418:	84 e0       	ldi	r24, 0x04	; 4
    541a:	80 93 79 25 	sts	0x2579, r24	; 0x802579 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    541e:	e0 e9       	ldi	r30, 0x90	; 144
    5420:	f5 e2       	ldi	r31, 0x25	; 37
    5422:	02 e0       	ldi	r16, 0x02	; 2
    5424:	06 93       	lac	Z, r16
    5426:	4b c0       	rjmp	.+150    	; 0x54be <__vector_125+0x16a>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    5428:	83 30       	cpi	r24, 0x03	; 3
    542a:	09 f0       	breq	.+2      	; 0x542e <__vector_125+0xda>
    542c:	48 c0       	rjmp	.+144    	; 0x54be <__vector_125+0x16a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    542e:	e9 e9       	ldi	r30, 0x99	; 153
    5430:	f5 e2       	ldi	r31, 0x25	; 37
    5432:	04 e0       	ldi	r16, 0x04	; 4
    5434:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5436:	e1 e9       	ldi	r30, 0x91	; 145
    5438:	f5 e2       	ldi	r31, 0x25	; 37
    543a:	04 e0       	ldi	r16, 0x04	; 4
    543c:	05 93       	las	Z, r16
    543e:	3f c0       	rjmp	.+126    	; 0x54be <__vector_125+0x16a>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5440:	80 e1       	ldi	r24, 0x10	; 16
    5442:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5446:	81 e0       	ldi	r24, 0x01	; 1
    5448:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    544c:	81 e8       	ldi	r24, 0x81	; 129
    544e:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5452:	82 e0       	ldi	r24, 0x02	; 2
    5454:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    5458:	82 e8       	ldi	r24, 0x82	; 130
    545a:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <udd_ep_abort>
		}
#endif
		udc_reset();
    545e:	0e 94 12 20 	call	0x4024	; 0x4024 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    5462:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5466:	e0 e8       	ldi	r30, 0x80	; 128
    5468:	f5 e2       	ldi	r31, 0x25	; 37
    546a:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    546c:	96 e0       	ldi	r25, 0x06	; 6
    546e:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5470:	83 e4       	ldi	r24, 0x43	; 67
    5472:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    5474:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    5476:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    5478:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    547a:	85 e3       	ldi	r24, 0x35	; 53
    547c:	95 e2       	ldi	r25, 0x25	; 37
    547e:	84 8b       	std	Z+20, r24	; 0x14
    5480:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    5482:	0e 94 47 23 	call	0x468e	; 0x468e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    5486:	1b c0       	rjmp	.+54     	; 0x54be <__vector_125+0x16a>
	}

	if (udd_is_suspend_event()) {
    5488:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    548c:	86 ff       	sbrs	r24, 6
    548e:	07 c0       	rjmp	.+14     	; 0x549e <__vector_125+0x14a>
		udd_ack_suspend_event();
    5490:	80 e4       	ldi	r24, 0x40	; 64
    5492:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    5496:	80 e0       	ldi	r24, 0x00	; 0
    5498:	0e 94 0f 23 	call	0x461e	; 0x461e <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    549c:	10 c0       	rjmp	.+32     	; 0x54be <__vector_125+0x16a>
	}

	if (udd_is_resume_event()) {
    549e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    54a2:	85 ff       	sbrs	r24, 5
    54a4:	0c c0       	rjmp	.+24     	; 0x54be <__vector_125+0x16a>
		udd_ack_resume_event();
    54a6:	80 e2       	ldi	r24, 0x20	; 32
    54a8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    54ac:	81 e0       	ldi	r24, 0x01	; 1
    54ae:	0e 94 0f 23 	call	0x461e	; 0x461e <udd_sleep_mode>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    54b2:	05 c0       	rjmp	.+10     	; 0x54be <__vector_125+0x16a>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    54b4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    54b8:	84 fd       	sbrc	r24, 4
    54ba:	c2 cf       	rjmp	.-124    	; 0x5440 <__vector_125+0xec>
    54bc:	e5 cf       	rjmp	.-54     	; 0x5488 <__vector_125+0x134>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    54be:	ff 91       	pop	r31
    54c0:	ef 91       	pop	r30
    54c2:	bf 91       	pop	r27
    54c4:	af 91       	pop	r26
    54c6:	9f 91       	pop	r25
    54c8:	8f 91       	pop	r24
    54ca:	7f 91       	pop	r23
    54cc:	6f 91       	pop	r22
    54ce:	5f 91       	pop	r21
    54d0:	4f 91       	pop	r20
    54d2:	3f 91       	pop	r19
    54d4:	2f 91       	pop	r18
    54d6:	0f 91       	pop	r16
    54d8:	0f 90       	pop	r0
    54da:	0b be       	out	0x3b, r0	; 59
    54dc:	0f 90       	pop	r0
    54de:	09 be       	out	0x39, r0	; 57
    54e0:	0f 90       	pop	r0
    54e2:	08 be       	out	0x38, r0	; 56
    54e4:	0f 90       	pop	r0
    54e6:	0f be       	out	0x3f, r0	; 63
    54e8:	0f 90       	pop	r0
    54ea:	1f 90       	pop	r1
    54ec:	18 95       	reti

000054ee <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    54ee:	1f 92       	push	r1
    54f0:	0f 92       	push	r0
    54f2:	0f b6       	in	r0, 0x3f	; 63
    54f4:	0f 92       	push	r0
    54f6:	11 24       	eor	r1, r1
    54f8:	08 b6       	in	r0, 0x38	; 56
    54fa:	0f 92       	push	r0
    54fc:	18 be       	out	0x38, r1	; 56
    54fe:	09 b6       	in	r0, 0x39	; 57
    5500:	0f 92       	push	r0
    5502:	19 be       	out	0x39, r1	; 57
    5504:	0a b6       	in	r0, 0x3a	; 58
    5506:	0f 92       	push	r0
    5508:	1a be       	out	0x3a, r1	; 58
    550a:	0b b6       	in	r0, 0x3b	; 59
    550c:	0f 92       	push	r0
    550e:	1b be       	out	0x3b, r1	; 59
    5510:	0f 93       	push	r16
    5512:	1f 93       	push	r17
    5514:	2f 93       	push	r18
    5516:	3f 93       	push	r19
    5518:	4f 93       	push	r20
    551a:	5f 93       	push	r21
    551c:	6f 93       	push	r22
    551e:	7f 93       	push	r23
    5520:	8f 93       	push	r24
    5522:	9f 93       	push	r25
    5524:	af 93       	push	r26
    5526:	bf 93       	push	r27
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
    552c:	ef 93       	push	r30
    552e:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5530:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5534:	81 fd       	sbrc	r24, 1
    5536:	04 c0       	rjmp	.+8      	; 0x5540 <__vector_126+0x52>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    5538:	0e 94 42 24 	call	0x4884	; 0x4884 <udd_ctrl_interrupt_tc_setup>
    553c:	81 11       	cpse	r24, r1
    553e:	c4 c0       	rjmp	.+392    	; 0x56c8 <__vector_126+0x1da>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5540:	82 e0       	ldi	r24, 0x02	; 2
    5542:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5546:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    554a:	81 95       	neg	r24
    554c:	88 0f       	add	r24, r24
    554e:	e0 e9       	ldi	r30, 0x90	; 144
    5550:	f5 e2       	ldi	r31, 0x25	; 37
    5552:	e8 1b       	sub	r30, r24
    5554:	f1 09       	sbc	r31, r1
    5556:	20 81       	ld	r18, Z
    5558:	31 81       	ldd	r19, Z+1	; 0x01
    555a:	20 59       	subi	r18, 0x90	; 144
    555c:	35 42       	sbci	r19, 0x25	; 37
    555e:	36 95       	lsr	r19
    5560:	27 95       	ror	r18
    5562:	36 95       	lsr	r19
    5564:	27 95       	ror	r18
    5566:	36 95       	lsr	r19
    5568:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    556a:	82 2f       	mov	r24, r18
    556c:	86 95       	lsr	r24
    556e:	20 fd       	sbrc	r18, 0
    5570:	02 c0       	rjmp	.+4      	; 0x5576 <__vector_126+0x88>
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	01 c0       	rjmp	.+2      	; 0x5578 <__vector_126+0x8a>
    5576:	90 e8       	ldi	r25, 0x80	; 128
    5578:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    557a:	e8 2f       	mov	r30, r24
    557c:	ef 70       	andi	r30, 0x0F	; 15
    557e:	f0 e0       	ldi	r31, 0x00	; 0
    5580:	ee 0f       	add	r30, r30
    5582:	ff 1f       	adc	r31, r31
    5584:	28 2f       	mov	r18, r24
    5586:	08 2e       	mov	r0, r24
    5588:	00 0c       	add	r0, r0
    558a:	33 0b       	sbc	r19, r19
    558c:	22 27       	eor	r18, r18
    558e:	33 0f       	add	r19, r19
    5590:	22 1f       	adc	r18, r18
    5592:	33 27       	eor	r19, r19
    5594:	e2 0f       	add	r30, r18
    5596:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    5598:	df 01       	movw	r26, r30
    559a:	aa 0f       	add	r26, r26
    559c:	bb 1f       	adc	r27, r27
    559e:	aa 0f       	add	r26, r26
    55a0:	bb 1f       	adc	r27, r27
    55a2:	aa 0f       	add	r26, r26
    55a4:	bb 1f       	adc	r27, r27
    55a6:	a0 57       	subi	r26, 0x70	; 112
    55a8:	ba 4d       	sbci	r27, 0xDA	; 218
    55aa:	9c 91       	ld	r25, X
    55ac:	95 ff       	sbrs	r25, 5
    55ae:	8c c0       	rjmp	.+280    	; 0x56c8 <__vector_126+0x1da>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    55b0:	fd 01       	movw	r30, r26
    55b2:	00 e2       	ldi	r16, 0x20	; 32
    55b4:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    55b6:	81 11       	cpse	r24, r1
    55b8:	80 c0       	rjmp	.+256    	; 0x56ba <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    55ba:	80 91 79 25 	lds	r24, 0x2579	; 0x802579 <udd_ep_control_state>
    55be:	84 30       	cpi	r24, 0x04	; 4
    55c0:	29 f4       	brne	.+10     	; 0x55cc <__vector_126+0xde>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    55c2:	0e 94 88 23 	call	0x4710	; 0x4710 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    55c6:	0e 94 47 23 	call	0x468e	; 0x468e <udd_ctrl_init>
    55ca:	7e c0       	rjmp	.+252    	; 0x56c8 <__vector_126+0x1da>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    55cc:	00 91 92 25 	lds	r16, 0x2592	; 0x802592 <udd_sram+0x12>
    55d0:	10 91 93 25 	lds	r17, 0x2593	; 0x802593 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    55d4:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    55d8:	90 91 dc 25 	lds	r25, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
    55dc:	c0 91 75 25 	lds	r28, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    55e0:	d0 91 76 25 	lds	r29, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    55e4:	98 01       	movw	r18, r16
    55e6:	2c 0f       	add	r18, r28
    55e8:	3d 1f       	adc	r19, r29
    55ea:	82 17       	cp	r24, r18
    55ec:	93 07       	cpc	r25, r19
    55ee:	18 f4       	brcc	.+6      	; 0x55f6 <__vector_126+0x108>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    55f0:	8c 01       	movw	r16, r24
    55f2:	0c 1b       	sub	r16, r28
    55f4:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    55f6:	80 91 d9 25 	lds	r24, 0x25D9	; 0x8025d9 <udd_g_ctrlreq+0x8>
    55fa:	90 91 da 25 	lds	r25, 0x25DA	; 0x8025da <udd_g_ctrlreq+0x9>
    55fe:	a8 01       	movw	r20, r16
    5600:	65 e3       	ldi	r22, 0x35	; 53
    5602:	75 e2       	ldi	r23, 0x25	; 37
    5604:	8c 0f       	add	r24, r28
    5606:	9d 1f       	adc	r25, r29
    5608:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    560c:	c0 0f       	add	r28, r16
    560e:	d1 1f       	adc	r29, r17
    5610:	c0 93 75 25 	sts	0x2575, r28	; 0x802575 <udd_ctrl_payload_nb_trans>
    5614:	d0 93 76 25 	sts	0x2576, r29	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    5618:	00 34       	cpi	r16, 0x40	; 64
    561a:	11 05       	cpc	r17, r1
    561c:	69 f4       	brne	.+26     	; 0x5638 <__vector_126+0x14a>
    561e:	80 91 77 25 	lds	r24, 0x2577	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    5622:	90 91 78 25 	lds	r25, 0x2578	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
    5626:	8c 0f       	add	r24, r28
    5628:	9d 1f       	adc	r25, r29
    562a:	20 91 d7 25 	lds	r18, 0x25D7	; 0x8025d7 <udd_g_ctrlreq+0x6>
    562e:	30 91 d8 25 	lds	r19, 0x25D8	; 0x8025d8 <udd_g_ctrlreq+0x7>
    5632:	82 17       	cp	r24, r18
    5634:	93 07       	cpc	r25, r19
    5636:	90 f0       	brcs	.+36     	; 0x565c <__vector_126+0x16e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    5638:	e1 ed       	ldi	r30, 0xD1	; 209
    563a:	f5 e2       	ldi	r31, 0x25	; 37
    563c:	c2 87       	std	Z+10, r28	; 0x0a
    563e:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5640:	06 84       	ldd	r0, Z+14	; 0x0e
    5642:	f7 85       	ldd	r31, Z+15	; 0x0f
    5644:	e0 2d       	mov	r30, r0
    5646:	30 97       	sbiw	r30, 0x00	; 0
    5648:	31 f0       	breq	.+12     	; 0x5656 <__vector_126+0x168>
			if (!udd_g_ctrlreq.over_under_run()) {
    564a:	19 95       	eicall
    564c:	81 11       	cpse	r24, r1
    564e:	03 c0       	rjmp	.+6      	; 0x5656 <__vector_126+0x168>
				// Stall ZLP
				udd_ctrl_stall_data();
    5650:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <udd_ctrl_stall_data>
    5654:	39 c0       	rjmp	.+114    	; 0x56c8 <__vector_126+0x1da>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    5656:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <udd_ctrl_send_zlp_in>
    565a:	36 c0       	rjmp	.+108    	; 0x56c8 <__vector_126+0x1da>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    565c:	80 91 db 25 	lds	r24, 0x25DB	; 0x8025db <udd_g_ctrlreq+0xa>
    5660:	90 91 dc 25 	lds	r25, 0x25DC	; 0x8025dc <udd_g_ctrlreq+0xb>
    5664:	c8 17       	cp	r28, r24
    5666:	d9 07       	cpc	r29, r25
    5668:	09 f5       	brne	.+66     	; 0x56ac <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    566a:	e0 91 df 25 	lds	r30, 0x25DF	; 0x8025df <udd_g_ctrlreq+0xe>
    566e:	f0 91 e0 25 	lds	r31, 0x25E0	; 0x8025e0 <udd_g_ctrlreq+0xf>
    5672:	30 97       	sbiw	r30, 0x00	; 0
    5674:	19 f4       	brne	.+6      	; 0x567c <__vector_126+0x18e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    5676:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <udd_ctrl_stall_data>
    567a:	26 c0       	rjmp	.+76     	; 0x56c8 <__vector_126+0x1da>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    567c:	19 95       	eicall
    567e:	81 11       	cpse	r24, r1
    5680:	03 c0       	rjmp	.+6      	; 0x5688 <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    5682:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <udd_ctrl_stall_data>
    5686:	20 c0       	rjmp	.+64     	; 0x56c8 <__vector_126+0x1da>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    5688:	20 91 77 25 	lds	r18, 0x2577	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    568c:	30 91 78 25 	lds	r19, 0x2578	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
    5690:	80 91 75 25 	lds	r24, 0x2575	; 0x802575 <udd_ctrl_payload_nb_trans>
    5694:	90 91 76 25 	lds	r25, 0x2576	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
    5698:	82 0f       	add	r24, r18
    569a:	93 1f       	adc	r25, r19
    569c:	80 93 77 25 	sts	0x2577, r24	; 0x802577 <udd_ctrl_prev_payload_nb_trans>
    56a0:	90 93 78 25 	sts	0x2578, r25	; 0x802578 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    56a4:	10 92 75 25 	sts	0x2575, r1	; 0x802575 <udd_ctrl_payload_nb_trans>
    56a8:	10 92 76 25 	sts	0x2576, r1	; 0x802576 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    56ac:	e0 e9       	ldi	r30, 0x90	; 144
    56ae:	f5 e2       	ldi	r31, 0x25	; 37
    56b0:	02 e0       	ldi	r16, 0x02	; 2
    56b2:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    56b4:	00 e2       	ldi	r16, 0x20	; 32
    56b6:	06 93       	lac	Z, r16
    56b8:	07 c0       	rjmp	.+14     	; 0x56c8 <__vector_126+0x1da>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    56ba:	80 38       	cpi	r24, 0x80	; 128
    56bc:	19 f4       	brne	.+6      	; 0x56c4 <__vector_126+0x1d6>
		udd_ctrl_in_sent();
    56be:	0e 94 90 23 	call	0x4720	; 0x4720 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    56c2:	02 c0       	rjmp	.+4      	; 0x56c8 <__vector_126+0x1da>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    56c4:	0e 94 b9 24 	call	0x4972	; 0x4972 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    56c8:	ff 91       	pop	r31
    56ca:	ef 91       	pop	r30
    56cc:	df 91       	pop	r29
    56ce:	cf 91       	pop	r28
    56d0:	bf 91       	pop	r27
    56d2:	af 91       	pop	r26
    56d4:	9f 91       	pop	r25
    56d6:	8f 91       	pop	r24
    56d8:	7f 91       	pop	r23
    56da:	6f 91       	pop	r22
    56dc:	5f 91       	pop	r21
    56de:	4f 91       	pop	r20
    56e0:	3f 91       	pop	r19
    56e2:	2f 91       	pop	r18
    56e4:	1f 91       	pop	r17
    56e6:	0f 91       	pop	r16
    56e8:	0f 90       	pop	r0
    56ea:	0b be       	out	0x3b, r0	; 59
    56ec:	0f 90       	pop	r0
    56ee:	0a be       	out	0x3a, r0	; 58
    56f0:	0f 90       	pop	r0
    56f2:	09 be       	out	0x39, r0	; 57
    56f4:	0f 90       	pop	r0
    56f6:	08 be       	out	0x38, r0	; 56
    56f8:	0f 90       	pop	r0
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	0f 90       	pop	r0
    56fe:	1f 90       	pop	r1
    5700:	18 95       	reti

00005702 <udd_ep_is_valid>:
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
    5702:	98 2f       	mov	r25, r24
    5704:	9f 70       	andi	r25, 0x0F	; 15
	if (ep == 0) {
    5706:	29 f0       	breq	.+10     	; 0x5712 <udd_ep_is_valid+0x10>
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	93 30       	cpi	r25, 0x03	; 3
    570c:	18 f0       	brcs	.+6      	; 0x5714 <udd_ep_is_valid+0x12>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	08 95       	ret

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	if (ep == 0) {
		return false;
    5712:	80 e0       	ldi	r24, 0x00	; 0
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    5714:	08 95       	ret

00005716 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    5716:	0f 93       	push	r16
    5718:	1f 93       	push	r17
    571a:	cf 93       	push	r28
    571c:	df 93       	push	r29
    571e:	cd b7       	in	r28, 0x3d	; 61
    5720:	de b7       	in	r29, 0x3e	; 62
    5722:	27 97       	sbiw	r28, 0x07	; 7
    5724:	cd bf       	out	0x3d, r28	; 61
    5726:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    5728:	8f ef       	ldi	r24, 0xFF	; 255
    572a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    572e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    5732:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    5736:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    573a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    573e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    5742:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    5746:	64 e0       	ldi	r22, 0x04	; 4
    5748:	81 e4       	ldi	r24, 0x41	; 65
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
    5750:	6c e1       	ldi	r22, 0x1C	; 28
    5752:	70 e0       	ldi	r23, 0x00	; 0
    5754:	82 e0       	ldi	r24, 0x02	; 2
    5756:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    575a:	8a 83       	std	Y+2, r24	; 0x02
    575c:	6d e1       	ldi	r22, 0x1D	; 29
    575e:	70 e0       	ldi	r23, 0x00	; 0
    5760:	82 e0       	ldi	r24, 0x02	; 2
    5762:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    5766:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    5768:	89 81       	ldd	r24, Y+1	; 0x01
    576a:	9a 81       	ldd	r25, Y+2	; 0x02
    576c:	01 96       	adiw	r24, 0x01	; 1
    576e:	21 f4       	brne	.+8      	; 0x5778 <sysclk_init+0x62>
		cal = 0x2340;
    5770:	80 e4       	ldi	r24, 0x40	; 64
    5772:	93 e2       	ldi	r25, 0x23	; 35
    5774:	89 83       	std	Y+1, r24	; 0x01
    5776:	9a 83       	std	Y+2, r25	; 0x02
    5778:	89 81       	ldd	r24, Y+1	; 0x01
    577a:	9a 81       	ldd	r25, Y+2	; 0x02
    577c:	8b 83       	std	Y+3, r24	; 0x03
    577e:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    5780:	e0 e6       	ldi	r30, 0x60	; 96
    5782:	f0 e0       	ldi	r31, 0x00	; 0
    5784:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    5786:	8c 81       	ldd	r24, Y+4	; 0x04
    5788:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    578a:	8f b7       	in	r24, 0x3f	; 63
    578c:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    578e:	f8 94       	cli
	return flags;
    5790:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    5792:	e0 e5       	ldi	r30, 0x50	; 80
    5794:	f0 e0       	ldi	r31, 0x00	; 0
    5796:	80 81       	ld	r24, Z
    5798:	82 60       	ori	r24, 0x02	; 2
    579a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    579c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    579e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    57a0:	81 ff       	sbrs	r24, 1
    57a2:	fd cf       	rjmp	.-6      	; 0x579e <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    57a4:	8f b7       	in	r24, 0x3f	; 63
    57a6:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    57a8:	f8 94       	cli
	return flags;
    57aa:	9f 81       	ldd	r25, Y+7	; 0x07
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    57ac:	00 e5       	ldi	r16, 0x50	; 80
    57ae:	10 e0       	ldi	r17, 0x00	; 0
    57b0:	d8 01       	movw	r26, r16
    57b2:	16 96       	adiw	r26, 0x06	; 6
    57b4:	8c 91       	ld	r24, X
    57b6:	16 97       	sbiw	r26, 0x06	; 6
    57b8:	89 7f       	andi	r24, 0xF9	; 249
    57ba:	16 96       	adiw	r26, 0x06	; 6
    57bc:	8c 93       	st	X, r24
    57be:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    57c0:	e0 e6       	ldi	r30, 0x60	; 96
    57c2:	f0 e0       	ldi	r31, 0x00	; 0
    57c4:	80 e8       	ldi	r24, 0x80	; 128
    57c6:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    57c8:	8b eb       	ldi	r24, 0xBB	; 187
    57ca:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    57cc:	16 96       	adiw	r26, 0x06	; 6
    57ce:	8c 91       	ld	r24, X
    57d0:	16 97       	sbiw	r26, 0x06	; 6
    57d2:	84 60       	ori	r24, 0x04	; 4
    57d4:	16 96       	adiw	r26, 0x06	; 6
    57d6:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    57d8:	80 81       	ld	r24, Z
    57da:	81 60       	ori	r24, 0x01	; 1
    57dc:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    57de:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    57e0:	61 e0       	ldi	r22, 0x01	; 1
    57e2:	80 e4       	ldi	r24, 0x40	; 64
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    57ea:	8f b7       	in	r24, 0x3f	; 63
    57ec:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    57ee:	f8 94       	cli
	return flags;
    57f0:	9d 81       	ldd	r25, Y+5	; 0x05
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    57f2:	f8 01       	movw	r30, r16
    57f4:	80 81       	ld	r24, Z
    57f6:	8e 7f       	andi	r24, 0xFE	; 254
    57f8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    57fa:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    57fc:	27 96       	adiw	r28, 0x07	; 7
    57fe:	cd bf       	out	0x3d, r28	; 61
    5800:	de bf       	out	0x3e, r29	; 62
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	1f 91       	pop	r17
    5808:	0f 91       	pop	r16
    580a:	08 95       	ret

0000580c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	1f 92       	push	r1
    5812:	cd b7       	in	r28, 0x3d	; 61
    5814:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5816:	9f b7       	in	r25, 0x3f	; 63
    5818:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    581a:	f8 94       	cli
	return flags;
    581c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    581e:	e8 2f       	mov	r30, r24
    5820:	f0 e0       	ldi	r31, 0x00	; 0
    5822:	e0 59       	subi	r30, 0x90	; 144
    5824:	ff 4f       	sbci	r31, 0xFF	; 255
    5826:	60 95       	com	r22
    5828:	80 81       	ld	r24, Z
    582a:	68 23       	and	r22, r24
    582c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    582e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    5830:	0f 90       	pop	r0
    5832:	df 91       	pop	r29
    5834:	cf 91       	pop	r28
    5836:	08 95       	ret

00005838 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    5838:	cf 93       	push	r28
    583a:	df 93       	push	r29
    583c:	1f 92       	push	r1
    583e:	cd b7       	in	r28, 0x3d	; 61
    5840:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5842:	9f b7       	in	r25, 0x3f	; 63
    5844:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    5846:	f8 94       	cli
	return flags;
    5848:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    584a:	e8 2f       	mov	r30, r24
    584c:	f0 e0       	ldi	r31, 0x00	; 0
    584e:	e0 59       	subi	r30, 0x90	; 144
    5850:	ff 4f       	sbci	r31, 0xFF	; 255
    5852:	80 81       	ld	r24, Z
    5854:	68 2b       	or	r22, r24
    5856:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5858:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    585a:	0f 90       	pop	r0
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	08 95       	ret

00005862 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	1f 92       	push	r1
    5868:	1f 92       	push	r1
    586a:	cd b7       	in	r28, 0x3d	; 61
    586c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    586e:	86 30       	cpi	r24, 0x06	; 6
    5870:	11 f0       	breq	.+4      	; 0x5876 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    5872:	60 e0       	ldi	r22, 0x00	; 0
    5874:	01 c0       	rjmp	.+2      	; 0x5878 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    5876:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5878:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    587c:	81 fd       	sbrc	r24, 1
    587e:	2a c0       	rjmp	.+84     	; 0x58d4 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5880:	8f b7       	in	r24, 0x3f	; 63
    5882:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    5884:	f8 94       	cli
	return flags;
    5886:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    5888:	e0 e5       	ldi	r30, 0x50	; 80
    588a:	f0 e0       	ldi	r31, 0x00	; 0
    588c:	80 81       	ld	r24, Z
    588e:	82 60       	ori	r24, 0x02	; 2
    5890:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5892:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    5894:	81 81       	ldd	r24, Z+1	; 0x01
    5896:	81 ff       	sbrs	r24, 1
    5898:	fd cf       	rjmp	.-6      	; 0x5894 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    589a:	8f b7       	in	r24, 0x3f	; 63
    589c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    589e:	f8 94       	cli
	return flags;
    58a0:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    58a2:	a0 e5       	ldi	r26, 0x50	; 80
    58a4:	b0 e0       	ldi	r27, 0x00	; 0
    58a6:	16 96       	adiw	r26, 0x06	; 6
    58a8:	8c 91       	ld	r24, X
    58aa:	16 97       	sbiw	r26, 0x06	; 6
    58ac:	89 7f       	andi	r24, 0xF9	; 249
    58ae:	16 96       	adiw	r26, 0x06	; 6
    58b0:	8c 93       	st	X, r24
    58b2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    58b4:	e0 e6       	ldi	r30, 0x60	; 96
    58b6:	f0 e0       	ldi	r31, 0x00	; 0
    58b8:	80 e8       	ldi	r24, 0x80	; 128
    58ba:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    58bc:	8b eb       	ldi	r24, 0xBB	; 187
    58be:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    58c0:	16 96       	adiw	r26, 0x06	; 6
    58c2:	8c 91       	ld	r24, X
    58c4:	16 97       	sbiw	r26, 0x06	; 6
    58c6:	84 60       	ori	r24, 0x04	; 4
    58c8:	16 96       	adiw	r26, 0x06	; 6
    58ca:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    58cc:	80 81       	ld	r24, Z
    58ce:	81 60       	ori	r24, 0x01	; 1
    58d0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    58d2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    58d4:	63 60       	ori	r22, 0x03	; 3
    58d6:	84 e4       	ldi	r24, 0x44	; 68
    58d8:	90 e0       	ldi	r25, 0x00	; 0
    58da:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    58de:	60 e4       	ldi	r22, 0x40	; 64
    58e0:	80 e0       	ldi	r24, 0x00	; 0
    58e2:	0e 94 06 2c 	call	0x580c	; 0x580c <sysclk_enable_module>
}
    58e6:	0f 90       	pop	r0
    58e8:	0f 90       	pop	r0
    58ea:	df 91       	pop	r29
    58ec:	cf 91       	pop	r28
    58ee:	08 95       	ret

000058f0 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    58f0:	60 e4       	ldi	r22, 0x40	; 64
    58f2:	80 e0       	ldi	r24, 0x00	; 0
    58f4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    58f8:	60 e0       	ldi	r22, 0x00	; 0
    58fa:	84 e4       	ldi	r24, 0x44	; 68
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
    5902:	08 95       	ret

00005904 <nvm_read_device_serial>:
 *       the program space reads will be corrupted.
 *
 * \retval storage Pointer to the structure where to store the device serial
 */
void nvm_read_device_serial(struct nvm_device_serial *storage)
{
    5904:	cf 93       	push	r28
    5906:	df 93       	push	r29
    5908:	ec 01       	movw	r28, r24
    590a:	68 e0       	ldi	r22, 0x08	; 8
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	82 e0       	ldi	r24, 0x02	; 2
    5910:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
	storage->lotnum0 = nvm_read_production_signature_row(
    5914:	88 83       	st	Y, r24
    5916:	69 e0       	ldi	r22, 0x09	; 9
    5918:	70 e0       	ldi	r23, 0x00	; 0
    591a:	82 e0       	ldi	r24, 0x02	; 2
    591c:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    5920:	89 83       	std	Y+1, r24	; 0x01
    5922:	6a e0       	ldi	r22, 0x0A	; 10
    5924:	70 e0       	ldi	r23, 0x00	; 0
    5926:	82 e0       	ldi	r24, 0x02	; 2
    5928:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    592c:	8a 83       	std	Y+2, r24	; 0x02
    592e:	6b e0       	ldi	r22, 0x0B	; 11
    5930:	70 e0       	ldi	r23, 0x00	; 0
    5932:	82 e0       	ldi	r24, 0x02	; 2
    5934:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    5938:	8b 83       	std	Y+3, r24	; 0x03
    593a:	6c e0       	ldi	r22, 0x0C	; 12
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	82 e0       	ldi	r24, 0x02	; 2
    5940:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    5944:	8c 83       	std	Y+4, r24	; 0x04
    5946:	6d e0       	ldi	r22, 0x0D	; 13
    5948:	70 e0       	ldi	r23, 0x00	; 0
    594a:	82 e0       	ldi	r24, 0x02	; 2
    594c:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    5950:	8d 83       	std	Y+5, r24	; 0x05
    5952:	60 e1       	ldi	r22, 0x10	; 16
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	82 e0       	ldi	r24, 0x02	; 2
    5958:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    595c:	8e 83       	std	Y+6, r24	; 0x06
    595e:	62 e1       	ldi	r22, 0x12	; 18
    5960:	70 e0       	ldi	r23, 0x00	; 0
    5962:	82 e0       	ldi	r24, 0x02	; 2
    5964:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    5968:	8f 83       	std	Y+7, r24	; 0x07
    596a:	63 e1       	ldi	r22, 0x13	; 19
    596c:	70 e0       	ldi	r23, 0x00	; 0
    596e:	82 e0       	ldi	r24, 0x02	; 2
    5970:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    5974:	88 87       	std	Y+8, r24	; 0x08
    5976:	64 e1       	ldi	r22, 0x14	; 20
    5978:	70 e0       	ldi	r23, 0x00	; 0
    597a:	82 e0       	ldi	r24, 0x02	; 2
    597c:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    5980:	89 87       	std	Y+9, r24	; 0x09
    5982:	65 e1       	ldi	r22, 0x15	; 21
    5984:	70 e0       	ldi	r23, 0x00	; 0
    5986:	82 e0       	ldi	r24, 0x02	; 2
    5988:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    598c:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	08 95       	ret

00005994 <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    5994:	dc 01       	movw	r26, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5996:	e0 ec       	ldi	r30, 0xC0	; 192
    5998:	f1 e0       	ldi	r31, 0x01	; 1
    599a:	97 85       	ldd	r25, Z+15	; 0x0f
    599c:	99 23       	and	r25, r25
    599e:	ec f3       	brlt	.-6      	; 0x599a <nvm_eeprom_read_byte+0x6>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    59a0:	ec ec       	ldi	r30, 0xCC	; 204
    59a2:	f1 e0       	ldi	r31, 0x01	; 1
    59a4:	80 81       	ld	r24, Z
    59a6:	88 60       	ori	r24, 0x08	; 8
    59a8:	80 83       	st	Z, r24
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
    59aa:	b0 5f       	subi	r27, 0xF0	; 240
    59ac:	8c 91       	ld	r24, X
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    59ae:	90 81       	ld	r25, Z
    59b0:	97 7f       	andi	r25, 0xF7	; 247
    59b2:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    59b4:	08 95       	ret

000059b6 <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    59b6:	cf 93       	push	r28
    59b8:	df 93       	push	r29
    59ba:	9c 01       	movw	r18, r24
    59bc:	db 01       	movw	r26, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59be:	e0 ec       	ldi	r30, 0xC0	; 192
    59c0:	f1 e0       	ldi	r31, 0x01	; 1
    59c2:	97 85       	ldd	r25, Z+15	; 0x0f
    59c4:	99 23       	and	r25, r25
    59c6:	ec f3       	brlt	.-6      	; 0x59c2 <nvm_eeprom_read_buffer+0xc>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    59c8:	cc ec       	ldi	r28, 0xCC	; 204
    59ca:	d1 e0       	ldi	r29, 0x01	; 1
    59cc:	98 81       	ld	r25, Y
    59ce:	98 60       	ori	r25, 0x08	; 8
    59d0:	98 83       	st	Y, r25
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    59d2:	b9 01       	movw	r22, r18
    59d4:	70 5f       	subi	r23, 0xF0	; 240
    59d6:	cd 01       	movw	r24, r26
    59d8:	0e 94 f9 30 	call	0x61f2	; 0x61f2 <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    59dc:	88 81       	ld	r24, Y
    59de:	87 7f       	andi	r24, 0xF7	; 247
    59e0:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    59e2:	df 91       	pop	r29
    59e4:	cf 91       	pop	r28
    59e6:	08 95       	ret

000059e8 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    59e8:	e0 ec       	ldi	r30, 0xC0	; 192
    59ea:	f1 e0       	ldi	r31, 0x01	; 1
    59ec:	87 85       	ldd	r24, Z+15	; 0x0f
    59ee:	88 23       	and	r24, r24
    59f0:	ec f3       	brlt	.-6      	; 0x59ec <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    59f2:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    59f6:	81 ff       	sbrs	r24, 1
    59f8:	08 c0       	rjmp	.+16     	; 0x5a0a <nvm_eeprom_flush_buffer+0x22>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    59fa:	86 e3       	ldi	r24, 0x36	; 54
    59fc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5a00:	61 e0       	ldi	r22, 0x01	; 1
    5a02:	8b ec       	ldi	r24, 0xCB	; 203
    5a04:	91 e0       	ldi	r25, 0x01	; 1
    5a06:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
    5a0a:	08 95       	ret

00005a0c <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a0c:	e0 ec       	ldi	r30, 0xC0	; 192
    5a0e:	f1 e0       	ldi	r31, 0x01	; 1
    5a10:	97 85       	ldd	r25, Z+15	; 0x0f
    5a12:	99 23       	and	r25, r25
    5a14:	ec f3       	brlt	.-6      	; 0x5a10 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    5a16:	ac ec       	ldi	r26, 0xCC	; 204
    5a18:	b1 e0       	ldi	r27, 0x01	; 1
    5a1a:	9c 91       	ld	r25, X
    5a1c:	98 60       	ori	r25, 0x08	; 8
    5a1e:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    5a20:	e8 2f       	mov	r30, r24
    5a22:	f0 e0       	ldi	r31, 0x00	; 0
    5a24:	f0 5f       	subi	r31, 0xF0	; 240
    5a26:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    5a28:	8c 91       	ld	r24, X
    5a2a:	87 7f       	andi	r24, 0xF7	; 247
    5a2c:	8c 93       	st	X, r24
    5a2e:	08 95       	ret

00005a30 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    5a30:	ff 92       	push	r15
    5a32:	0f 93       	push	r16
    5a34:	1f 93       	push	r17
    5a36:	cf 93       	push	r28
    5a38:	df 93       	push	r29
    5a3a:	18 2f       	mov	r17, r24
    5a3c:	f9 2e       	mov	r15, r25
    5a3e:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    5a40:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    5a44:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a48:	e0 ec       	ldi	r30, 0xC0	; 192
    5a4a:	f1 e0       	ldi	r31, 0x01	; 1
    5a4c:	87 85       	ldd	r24, Z+15	; 0x0f
    5a4e:	88 23       	and	r24, r24
    5a50:	ec f3       	brlt	.-6      	; 0x5a4c <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    5a52:	6c 2f       	mov	r22, r28
    5a54:	81 2f       	mov	r24, r17
    5a56:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    5a5a:	c0 ec       	ldi	r28, 0xC0	; 192
    5a5c:	d1 e0       	ldi	r29, 0x01	; 1
    5a5e:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5a60:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5a62:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    5a64:	85 e3       	ldi	r24, 0x35	; 53
    5a66:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5a68:	61 e0       	ldi	r22, 0x01	; 1
    5a6a:	8b ec       	ldi	r24, 0xCB	; 203
    5a6c:	91 e0       	ldi	r25, 0x01	; 1
    5a6e:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    5a72:	0a 87       	std	Y+10, r16	; 0x0a
}
    5a74:	df 91       	pop	r29
    5a76:	cf 91       	pop	r28
    5a78:	1f 91       	pop	r17
    5a7a:	0f 91       	pop	r16
    5a7c:	ff 90       	pop	r15
    5a7e:	08 95       	ret

00005a80 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    5a80:	0f 93       	push	r16
    5a82:	1f 93       	push	r17
    5a84:	cf 93       	push	r28
    5a86:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a88:	e0 ec       	ldi	r30, 0xC0	; 192
    5a8a:	f1 e0       	ldi	r31, 0x01	; 1
    5a8c:	87 85       	ldd	r24, Z+15	; 0x0f
    5a8e:	88 23       	and	r24, r24
    5a90:	ec f3       	brlt	.-6      	; 0x5a8c <nvm_eeprom_load_page_to_buffer+0xc>
    5a92:	c0 e0       	ldi	r28, 0x00	; 0
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    5a94:	f8 01       	movw	r30, r16
    5a96:	61 91       	ld	r22, Z+
    5a98:	8f 01       	movw	r16, r30
    5a9a:	8c 2f       	mov	r24, r28
    5a9c:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5aa0:	cf 5f       	subi	r28, 0xFF	; 255
    5aa2:	c0 32       	cpi	r28, 0x20	; 32
    5aa4:	b9 f7       	brne	.-18     	; 0x5a94 <nvm_eeprom_load_page_to_buffer+0x14>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	08 95       	ret

00005aae <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    5aae:	1f 93       	push	r17
    5ab0:	cf 93       	push	r28
    5ab2:	df 93       	push	r29
    5ab4:	e0 ec       	ldi	r30, 0xC0	; 192
    5ab6:	f1 e0       	ldi	r31, 0x01	; 1
    5ab8:	97 85       	ldd	r25, Z+15	; 0x0f
    5aba:	99 23       	and	r25, r25
    5abc:	ec f3       	brlt	.-6      	; 0x5ab8 <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5abe:	20 e2       	ldi	r18, 0x20	; 32
    5ac0:	82 9f       	mul	r24, r18
    5ac2:	c0 01       	movw	r24, r0
    5ac4:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5ac6:	c0 ec       	ldi	r28, 0xC0	; 192
    5ac8:	d1 e0       	ldi	r29, 0x01	; 1
    5aca:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5acc:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5ace:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5ad0:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5ad2:	85 e3       	ldi	r24, 0x35	; 53
    5ad4:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5ad6:	61 e0       	ldi	r22, 0x01	; 1
    5ad8:	8b ec       	ldi	r24, 0xCB	; 203
    5ada:	91 e0       	ldi	r25, 0x01	; 1
    5adc:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	NVM.CMD = old_cmd;
    5ae0:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	08 95       	ret

00005aea <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    5aea:	cf 92       	push	r12
    5aec:	df 92       	push	r13
    5aee:	ef 92       	push	r14
    5af0:	ff 92       	push	r15
    5af2:	0f 93       	push	r16
    5af4:	1f 93       	push	r17
    5af6:	cf 93       	push	r28
    5af8:	df 93       	push	r29
    5afa:	ec 01       	movw	r28, r24
    5afc:	7b 01       	movw	r14, r22
    5afe:	8a 01       	movw	r16, r20
	while (len) {
    5b00:	45 2b       	or	r20, r21
    5b02:	69 f1       	breq	.+90     	; 0x5b5e <nvm_eeprom_erase_and_write_buffer+0x74>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    5b04:	ce 01       	movw	r24, r28
    5b06:	8f 71       	andi	r24, 0x1F	; 31
    5b08:	99 27       	eor	r25, r25
    5b0a:	89 2b       	or	r24, r25
    5b0c:	c1 f4       	brne	.+48     	; 0x5b3e <nvm_eeprom_erase_and_write_buffer+0x54>
    5b0e:	00 32       	cpi	r16, 0x20	; 32
    5b10:	11 05       	cpc	r17, r1
    5b12:	a8 f0       	brcs	.+42     	; 0x5b3e <nvm_eeprom_erase_and_write_buffer+0x54>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    5b14:	c7 01       	movw	r24, r14
    5b16:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    5b1a:	ce 01       	movw	r24, r28
    5b1c:	96 95       	lsr	r25
    5b1e:	87 95       	ror	r24
    5b20:	92 95       	swap	r25
    5b22:	82 95       	swap	r24
    5b24:	8f 70       	andi	r24, 0x0F	; 15
    5b26:	89 27       	eor	r24, r25
    5b28:	9f 70       	andi	r25, 0x0F	; 15
    5b2a:	89 27       	eor	r24, r25
    5b2c:	0e 94 57 2d 	call	0x5aae	; 0x5aae <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    5b30:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    5b32:	80 e2       	ldi	r24, 0x20	; 32
    5b34:	e8 0e       	add	r14, r24
    5b36:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    5b38:	00 52       	subi	r16, 0x20	; 32
    5b3a:	11 09       	sbc	r17, r1
    5b3c:	0d c0       	rjmp	.+26     	; 0x5b58 <nvm_eeprom_erase_and_write_buffer+0x6e>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    5b3e:	6e 01       	movw	r12, r28
    5b40:	ef ef       	ldi	r30, 0xFF	; 255
    5b42:	ce 1a       	sub	r12, r30
    5b44:	de 0a       	sbc	r13, r30
    5b46:	f7 01       	movw	r30, r14
    5b48:	61 91       	ld	r22, Z+
    5b4a:	7f 01       	movw	r14, r30
    5b4c:	ce 01       	movw	r24, r28
    5b4e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    5b52:	01 50       	subi	r16, 0x01	; 1
    5b54:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    5b56:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    5b58:	01 15       	cp	r16, r1
    5b5a:	11 05       	cpc	r17, r1
    5b5c:	99 f6       	brne	.-90     	; 0x5b04 <nvm_eeprom_erase_and_write_buffer+0x1a>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    5b5e:	df 91       	pop	r29
    5b60:	cf 91       	pop	r28
    5b62:	1f 91       	pop	r17
    5b64:	0f 91       	pop	r16
    5b66:	ff 90       	pop	r15
    5b68:	ef 90       	pop	r14
    5b6a:	df 90       	pop	r13
    5b6c:	cf 90       	pop	r12
    5b6e:	08 95       	ret

00005b70 <nvm_eeprom_split_write_page>:
 * before writing.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_split_write_page(uint8_t page_addr)
{
    5b70:	1f 93       	push	r17
    5b72:	cf 93       	push	r28
    5b74:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b76:	e0 ec       	ldi	r30, 0xC0	; 192
    5b78:	f1 e0       	ldi	r31, 0x01	; 1
    5b7a:	97 85       	ldd	r25, Z+15	; 0x0f
    5b7c:	99 23       	and	r25, r25
    5b7e:	ec f3       	brlt	.-6      	; 0x5b7a <nvm_eeprom_split_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5b80:	20 e2       	ldi	r18, 0x20	; 32
    5b82:	82 9f       	mul	r24, r18
    5b84:	c0 01       	movw	r24, r0
    5b86:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5b88:	c0 ec       	ldi	r28, 0xC0	; 192
    5b8a:	d1 e0       	ldi	r29, 0x01	; 1
    5b8c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5b8e:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5b90:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5b92:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5b94:	84 e3       	ldi	r24, 0x34	; 52
    5b96:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5b98:	61 e0       	ldi	r22, 0x01	; 1
    5b9a:	8b ec       	ldi	r24, 0xCB	; 203
    5b9c:	91 e0       	ldi	r25, 0x01	; 1
    5b9e:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	NVM.CMD = old_cmd;
    5ba2:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
}
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	08 95       	ret

00005bac <nvm_eeprom_fill_buffer_with_value>:
 *       EEPROM write page operation.
 *
 * \param  value Value to copy to the page buffer.
 */
void nvm_eeprom_fill_buffer_with_value(uint8_t value)
{
    5bac:	cf 93       	push	r28
    5bae:	df 93       	push	r29
    5bb0:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    5bb2:	0e 94 f4 2c 	call	0x59e8	; 0x59e8 <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5bb6:	e0 ec       	ldi	r30, 0xC0	; 192
    5bb8:	f1 e0       	ldi	r31, 0x01	; 1
    5bba:	87 85       	ldd	r24, Z+15	; 0x0f
    5bbc:	88 23       	and	r24, r24
    5bbe:	ec f3       	brlt	.-6      	; 0x5bba <nvm_eeprom_fill_buffer_with_value+0xe>
    5bc0:	c0 e0       	ldi	r28, 0x00	; 0
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, value);
    5bc2:	6d 2f       	mov	r22, r29
    5bc4:	8c 2f       	mov	r24, r28
    5bc6:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <nvm_eeprom_load_byte_to_buffer>
	nvm_eeprom_flush_buffer();
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    5bca:	cf 5f       	subi	r28, 0xFF	; 255
    5bcc:	c0 32       	cpi	r28, 0x20	; 32
    5bce:	c9 f7       	brne	.-14     	; 0x5bc2 <nvm_eeprom_fill_buffer_with_value+0x16>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    5bd0:	df 91       	pop	r29
    5bd2:	cf 91       	pop	r28
    5bd4:	08 95       	ret

00005bd6 <nvm_eeprom_erase_bytes_in_page>:
 * written to in the page buffer reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_bytes_in_page(uint8_t page_addr)
{
    5bd6:	1f 93       	push	r17
    5bd8:	cf 93       	push	r28
    5bda:	df 93       	push	r29
    5bdc:	e0 ec       	ldi	r30, 0xC0	; 192
    5bde:	f1 e0       	ldi	r31, 0x01	; 1
    5be0:	97 85       	ldd	r25, Z+15	; 0x0f
    5be2:	99 23       	and	r25, r25
    5be4:	ec f3       	brlt	.-6      	; 0x5be0 <nvm_eeprom_erase_bytes_in_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5be6:	20 e2       	ldi	r18, 0x20	; 32
    5be8:	82 9f       	mul	r24, r18
    5bea:	c0 01       	movw	r24, r0
    5bec:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5bee:	c0 ec       	ldi	r28, 0xC0	; 192
    5bf0:	d1 e0       	ldi	r29, 0x01	; 1
    5bf2:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5bf4:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5bf6:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5bf8:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5bfa:	82 e3       	ldi	r24, 0x32	; 50
    5bfc:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5bfe:	61 e0       	ldi	r22, 0x01	; 1
    5c00:	8b ec       	ldi	r24, 0xCB	; 203
    5c02:	91 e0       	ldi	r25, 0x01	; 1
    5c04:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	NVM.CMD = old_cmd;
    5c08:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
}
    5c0a:	df 91       	pop	r29
    5c0c:	cf 91       	pop	r28
    5c0e:	1f 91       	pop	r17
    5c10:	08 95       	ret

00005c12 <nvm_eeprom_erase_page>:
 * This function erases one EEPROM page, so that every location reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_page(uint8_t page_addr)
{
    5c12:	cf 93       	push	r28
    5c14:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    5c16:	8f ef       	ldi	r24, 0xFF	; 255
    5c18:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    5c1c:	8c 2f       	mov	r24, r28
    5c1e:	0e 94 eb 2d 	call	0x5bd6	; 0x5bd6 <nvm_eeprom_erase_bytes_in_page>
}
    5c22:	cf 91       	pop	r28
    5c24:	08 95       	ret

00005c26 <nvm_eeprom_erase_bytes_in_all_pages>:
 *
 * This function erases bytes from all EEPROM pages, so that every location
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
    5c26:	1f 93       	push	r17
    5c28:	cf 93       	push	r28
    5c2a:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c2c:	e0 ec       	ldi	r30, 0xC0	; 192
    5c2e:	f1 e0       	ldi	r31, 0x01	; 1
    5c30:	87 85       	ldd	r24, Z+15	; 0x0f
    5c32:	88 23       	and	r24, r24
    5c34:	ec f3       	brlt	.-6      	; 0x5c30 <nvm_eeprom_erase_bytes_in_all_pages+0xa>
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5c36:	c0 ec       	ldi	r28, 0xC0	; 192
    5c38:	d1 e0       	ldi	r29, 0x01	; 1
    5c3a:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5c3c:	80 e3       	ldi	r24, 0x30	; 48
    5c3e:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5c40:	61 e0       	ldi	r22, 0x01	; 1
    5c42:	8b ec       	ldi	r24, 0xCB	; 203
    5c44:	91 e0       	ldi	r25, 0x01	; 1
    5c46:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	NVM.CMD = old_cmd;
    5c4a:	1a 87       	std	Y+10, r17	; 0x0a
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
}
    5c4c:	df 91       	pop	r29
    5c4e:	cf 91       	pop	r28
    5c50:	1f 91       	pop	r17
    5c52:	08 95       	ret

00005c54 <nvm_eeprom_erase_all>:
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    5c54:	8f ef       	ldi	r24, 0xFF	; 255
    5c56:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    5c5a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <nvm_eeprom_erase_bytes_in_all_pages>
    5c5e:	08 95       	ret

00005c60 <nvm_issue_flash_range_crc>:
 *
 * \param start_addr  end byte address
 * \param end_addr    start byte address
 */
void nvm_issue_flash_range_crc(flash_addr_t start_addr, flash_addr_t end_addr)
{
    5c60:	cf 92       	push	r12
    5c62:	df 92       	push	r13
    5c64:	ef 92       	push	r14
    5c66:	ff 92       	push	r15
    5c68:	1f 93       	push	r17
    5c6a:	cf 93       	push	r28
    5c6c:	df 93       	push	r29
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    5c6e:	c0 ec       	ldi	r28, 0xC0	; 192
    5c70:	d1 e0       	ldi	r29, 0x01	; 1
    5c72:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    5c74:	ea e3       	ldi	r30, 0x3A	; 58
    5c76:	ea 87       	std	Y+10, r30	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    5c78:	68 83       	st	Y, r22
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    5c7a:	c7 2e       	mov	r12, r23
    5c7c:	d8 2e       	mov	r13, r24
    5c7e:	e9 2e       	mov	r14, r25
    5c80:	ff 24       	eor	r15, r15
    5c82:	c9 82       	std	Y+1, r12	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    5c84:	aa 27       	eor	r26, r26
    5c86:	bb 27       	eor	r27, r27
    5c88:	8a 83       	std	Y+2, r24	; 0x02
#endif

	// Load the end byte address in NVM Data Register
	NVM.DATA0 = end_addr & 0xFF;
    5c8a:	2c 83       	std	Y+4, r18	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    5c8c:	bb 27       	eor	r27, r27
    5c8e:	a5 2f       	mov	r26, r21
    5c90:	94 2f       	mov	r25, r20
    5c92:	83 2f       	mov	r24, r19
    5c94:	8d 83       	std	Y+5, r24	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    5c96:	ca 01       	movw	r24, r20
    5c98:	aa 27       	eor	r26, r26
    5c9a:	bb 27       	eor	r27, r27
    5c9c:	8e 83       	std	Y+6, r24	; 0x06
#endif

	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5c9e:	61 e0       	ldi	r22, 0x01	; 1
    5ca0:	8b ec       	ldi	r24, 0xCB	; 203
    5ca2:	91 e0       	ldi	r25, 0x01	; 1
    5ca4:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    5ca8:	1a 87       	std	Y+10, r17	; 0x0a
}
    5caa:	df 91       	pop	r29
    5cac:	cf 91       	pop	r28
    5cae:	1f 91       	pop	r17
    5cb0:	ff 90       	pop	r15
    5cb2:	ef 90       	pop	r14
    5cb4:	df 90       	pop	r13
    5cb6:	cf 90       	pop	r12
    5cb8:	08 95       	ret

00005cba <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    5cba:	da 01       	movw	r26, r20
    5cbc:	a9 01       	movw	r20, r18
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5cbe:	e0 ec       	ldi	r30, 0xC0	; 192
    5cc0:	f1 e0       	ldi	r31, 0x01	; 1
    5cc2:	37 85       	ldd	r19, Z+15	; 0x0f
    5cc4:	33 23       	and	r19, r19
    5cc6:	ec f3       	brlt	.-6      	; 0x5cc2 <nvm_flash_read_buffer+0x8>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    5cc8:	41 15       	cp	r20, r1
    5cca:	51 05       	cpc	r21, r1
    5ccc:	79 f0       	breq	.+30     	; 0x5cec <nvm_flash_read_buffer+0x32>
    5cce:	4a 0f       	add	r20, r26
    5cd0:	5b 1f       	adc	r21, r27
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    5cd2:	0b b6       	in	r0, 0x3b	; 59
    5cd4:	8b bf       	out	0x3b, r24	; 59
    5cd6:	fb 01       	movw	r30, r22
    5cd8:	37 91       	elpm	r19, Z+
    5cda:	0b be       	out	0x3b, r0	; 59
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    5cdc:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    5cde:	6f 5f       	subi	r22, 0xFF	; 255
    5ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ce4:	9f 4f       	sbci	r25, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    5ce6:	a4 17       	cp	r26, r20
    5ce8:	b5 07       	cpc	r27, r21
    5cea:	99 f7       	brne	.-26     	; 0x5cd2 <nvm_flash_read_buffer+0x18>
    5cec:	08 95       	ret

00005cee <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    5cee:	ef 92       	push	r14
    5cf0:	ff 92       	push	r15
    5cf2:	0f 93       	push	r16
    5cf4:	1f 93       	push	r17
    5cf6:	cf 93       	push	r28
    5cf8:	df 93       	push	r29
    5cfa:	7a 01       	movw	r14, r20
    5cfc:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    5cfe:	eb 01       	movw	r28, r22
    5d00:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    5d02:	23 2b       	or	r18, r19
    5d04:	59 f0       	breq	.+22     	; 0x5d1c <nvm_user_sig_read_buffer+0x2e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    5d06:	be 01       	movw	r22, r28
    5d08:	81 e0       	ldi	r24, 0x01	; 1
    5d0a:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    5d0e:	f7 01       	movw	r30, r14
    5d10:	81 93       	st	Z+, r24
    5d12:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    5d14:	21 96       	adiw	r28, 0x01	; 1
		len--;
    5d16:	01 50       	subi	r16, 0x01	; 1
    5d18:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    5d1a:	a9 f7       	brne	.-22     	; 0x5d06 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	1f 91       	pop	r17
    5d22:	0f 91       	pop	r16
    5d24:	ff 90       	pop	r15
    5d26:	ef 90       	pop	r14
    5d28:	08 95       	ret

00005d2a <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5d2a:	2f 92       	push	r2
    5d2c:	3f 92       	push	r3
    5d2e:	4f 92       	push	r4
    5d30:	5f 92       	push	r5
    5d32:	6f 92       	push	r6
    5d34:	7f 92       	push	r7
    5d36:	8f 92       	push	r8
    5d38:	9f 92       	push	r9
    5d3a:	af 92       	push	r10
    5d3c:	bf 92       	push	r11
    5d3e:	cf 92       	push	r12
    5d40:	df 92       	push	r13
    5d42:	ef 92       	push	r14
    5d44:	ff 92       	push	r15
    5d46:	0f 93       	push	r16
    5d48:	1f 93       	push	r17
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	00 d0       	rcall	.+0      	; 0x5d50 <nvm_user_sig_write_buffer+0x26>
    5d50:	1f 92       	push	r1
    5d52:	cd b7       	in	r28, 0x3d	; 61
    5d54:	de b7       	in	r29, 0x3e	; 62
    5d56:	4b 83       	std	Y+3, r20	; 0x03
    5d58:	5c 83       	std	Y+4, r21	; 0x04
    5d5a:	79 01       	movw	r14, r18
    5d5c:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    5d5e:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    5d60:	23 2b       	or	r18, r19
    5d62:	09 f0       	breq	.+2      	; 0x5d66 <nvm_user_sig_write_buffer+0x3c>
    5d64:	51 c0       	rjmp	.+162    	; 0x5e08 <nvm_user_sig_write_buffer+0xde>
    5d66:	67 c0       	rjmp	.+206    	; 0x5e36 <nvm_user_sig_write_buffer+0x10c>
    5d68:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5d6a:	33 20       	and	r3, r3
    5d6c:	89 f0       	breq	.+34     	; 0x5d90 <nvm_user_sig_write_buffer+0x66>
    5d6e:	b2 01       	movw	r22, r4
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    5d76:	89 83       	std	Y+1, r24	; 0x01
    5d78:	b8 01       	movw	r22, r16
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	0e 94 1e 30 	call	0x603c	; 0x603c <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    5d80:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    5d82:	89 81       	ldd	r24, Y+1	; 0x01
    5d84:	9a 81       	ldd	r25, Y+2	; 0x02
    5d86:	01 96       	adiw	r24, 0x01	; 1
    5d88:	29 f0       	breq	.+10     	; 0x5d94 <nvm_user_sig_write_buffer+0x6a>
					b_flag_erase = true; // The page is not empty
    5d8a:	22 24       	eor	r2, r2
    5d8c:	23 94       	inc	r2
    5d8e:	02 c0       	rjmp	.+4      	; 0x5d94 <nvm_user_sig_write_buffer+0x6a>
				}
			}else{
				w_value = 0xFFFF;
    5d90:	89 82       	std	Y+1, r8	; 0x01
    5d92:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    5d94:	e1 14       	cp	r14, r1
    5d96:	f1 04       	cpc	r15, r1
    5d98:	09 f1       	breq	.+66     	; 0x5ddc <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == page_pos) {
    5d9a:	ac 14       	cp	r10, r12
    5d9c:	bd 04       	cpc	r11, r13
    5d9e:	79 f4       	brne	.+30     	; 0x5dbe <nvm_user_sig_write_buffer+0x94>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5da0:	81 e0       	ldi	r24, 0x01	; 1
    5da2:	e8 1a       	sub	r14, r24
    5da4:	f1 08       	sbc	r15, r1
					opt_address++;
    5da6:	ef ef       	ldi	r30, 0xFF	; 255
    5da8:	ce 1a       	sub	r12, r30
    5daa:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    5dac:	eb 81       	ldd	r30, Y+3	; 0x03
    5dae:	fc 81       	ldd	r31, Y+4	; 0x04
    5db0:	81 91       	ld	r24, Z+
    5db2:	eb 83       	std	Y+3, r30	; 0x03
    5db4:	fc 83       	std	Y+4, r31	; 0x04
    5db6:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    5db8:	e1 14       	cp	r14, r1
    5dba:	f1 04       	cpc	r15, r1
    5dbc:	79 f0       	breq	.+30     	; 0x5ddc <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == (page_pos+1)) {
    5dbe:	c0 16       	cp	r12, r16
    5dc0:	d1 06       	cpc	r13, r17
    5dc2:	61 f4       	brne	.+24     	; 0x5ddc <nvm_user_sig_write_buffer+0xb2>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5dc4:	f1 e0       	ldi	r31, 0x01	; 1
    5dc6:	ef 1a       	sub	r14, r31
    5dc8:	f1 08       	sbc	r15, r1
					opt_address++;
    5dca:	2f ef       	ldi	r18, 0xFF	; 255
    5dcc:	c2 1a       	sub	r12, r18
    5dce:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    5dd0:	eb 81       	ldd	r30, Y+3	; 0x03
    5dd2:	fc 81       	ldd	r31, Y+4	; 0x04
    5dd4:	81 91       	ld	r24, Z+
    5dd6:	eb 83       	std	Y+3, r30	; 0x03
    5dd8:	fc 83       	std	Y+4, r31	; 0x04
    5dda:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    5ddc:	49 81       	ldd	r20, Y+1	; 0x01
    5dde:	5a 81       	ldd	r21, Y+2	; 0x02
    5de0:	c3 01       	movw	r24, r6
    5de2:	b2 01       	movw	r22, r4
    5de4:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
    5de8:	f2 e0       	ldi	r31, 0x02	; 2
    5dea:	4f 0e       	add	r4, r31
    5dec:	51 1c       	adc	r5, r1
    5dee:	61 1c       	adc	r6, r1
    5df0:	71 1c       	adc	r7, r1
    5df2:	0e 5f       	subi	r16, 0xFE	; 254
    5df4:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    5df6:	01 30       	cpi	r16, 0x01	; 1
    5df8:	22 e0       	ldi	r18, 0x02	; 2
    5dfa:	12 07       	cpc	r17, r18
    5dfc:	09 f0       	breq	.+2      	; 0x5e00 <nvm_user_sig_write_buffer+0xd6>
    5dfe:	b4 cf       	rjmp	.-152    	; 0x5d68 <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    5e00:	e1 14       	cp	r14, r1
    5e02:	f1 04       	cpc	r15, r1
    5e04:	29 f4       	brne	.+10     	; 0x5e10 <nvm_user_sig_write_buffer+0xe6>
    5e06:	0a c0       	rjmp	.+20     	; 0x5e1c <nvm_user_sig_write_buffer+0xf2>
    5e08:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    5e0a:	88 24       	eor	r8, r8
    5e0c:	8a 94       	dec	r8
    5e0e:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5e10:	01 e0       	ldi	r16, 0x01	; 1
    5e12:	10 e0       	ldi	r17, 0x00	; 0
    5e14:	41 2c       	mov	r4, r1
    5e16:	51 2c       	mov	r5, r1
    5e18:	32 01       	movw	r6, r4
    5e1a:	a6 cf       	rjmp	.-180    	; 0x5d68 <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    5e1c:	22 20       	and	r2, r2
    5e1e:	59 f0       	breq	.+22     	; 0x5e36 <nvm_user_sig_write_buffer+0x10c>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5e20:	e0 ec       	ldi	r30, 0xC0	; 192
    5e22:	f1 e0       	ldi	r31, 0x01	; 1
    5e24:	87 85       	ldd	r24, Z+15	; 0x0f
    5e26:	88 23       	and	r24, r24
    5e28:	ec f3       	brlt	.-6      	; 0x5e24 <nvm_user_sig_write_buffer+0xfa>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    5e2a:	48 e1       	ldi	r20, 0x18	; 24
    5e2c:	60 e0       	ldi	r22, 0x00	; 0
    5e2e:	70 e0       	ldi	r23, 0x00	; 0
    5e30:	cb 01       	movw	r24, r22
    5e32:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5e36:	e0 ec       	ldi	r30, 0xC0	; 192
    5e38:	f1 e0       	ldi	r31, 0x01	; 1
    5e3a:	87 85       	ldd	r24, Z+15	; 0x0f
    5e3c:	88 23       	and	r24, r24
    5e3e:	ec f3       	brlt	.-6      	; 0x5e3a <nvm_user_sig_write_buffer+0x110>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    5e40:	4a e1       	ldi	r20, 0x1A	; 26
    5e42:	60 e0       	ldi	r22, 0x00	; 0
    5e44:	70 e0       	ldi	r23, 0x00	; 0
    5e46:	cb 01       	movw	r24, r22
    5e48:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    5e4c:	24 96       	adiw	r28, 0x04	; 4
    5e4e:	cd bf       	out	0x3d, r28	; 61
    5e50:	de bf       	out	0x3e, r29	; 62
    5e52:	df 91       	pop	r29
    5e54:	cf 91       	pop	r28
    5e56:	1f 91       	pop	r17
    5e58:	0f 91       	pop	r16
    5e5a:	ff 90       	pop	r15
    5e5c:	ef 90       	pop	r14
    5e5e:	df 90       	pop	r13
    5e60:	cf 90       	pop	r12
    5e62:	bf 90       	pop	r11
    5e64:	af 90       	pop	r10
    5e66:	9f 90       	pop	r9
    5e68:	8f 90       	pop	r8
    5e6a:	7f 90       	pop	r7
    5e6c:	6f 90       	pop	r6
    5e6e:	5f 90       	pop	r5
    5e70:	4f 90       	pop	r4
    5e72:	3f 90       	pop	r3
    5e74:	2f 90       	pop	r2
    5e76:	08 95       	ret

00005e78 <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5e78:	2f 92       	push	r2
    5e7a:	3f 92       	push	r3
    5e7c:	4f 92       	push	r4
    5e7e:	5f 92       	push	r5
    5e80:	6f 92       	push	r6
    5e82:	7f 92       	push	r7
    5e84:	8f 92       	push	r8
    5e86:	9f 92       	push	r9
    5e88:	af 92       	push	r10
    5e8a:	bf 92       	push	r11
    5e8c:	cf 92       	push	r12
    5e8e:	df 92       	push	r13
    5e90:	ef 92       	push	r14
    5e92:	ff 92       	push	r15
    5e94:	0f 93       	push	r16
    5e96:	1f 93       	push	r17
    5e98:	cf 93       	push	r28
    5e9a:	df 93       	push	r29
    5e9c:	cd b7       	in	r28, 0x3d	; 61
    5e9e:	de b7       	in	r29, 0x3e	; 62
    5ea0:	2a 97       	sbiw	r28, 0x0a	; 10
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	de bf       	out	0x3e, r29	; 62
    5ea6:	2b 01       	movw	r4, r22
    5ea8:	3c 01       	movw	r6, r24
    5eaa:	1a 01       	movw	r2, r20
    5eac:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    5eae:	dc 01       	movw	r26, r24
    5eb0:	cb 01       	movw	r24, r22
    5eb2:	88 27       	eor	r24, r24
    5eb4:	9e 7f       	andi	r25, 0xFE	; 254
    5eb6:	8f 83       	std	Y+7, r24	; 0x07
    5eb8:	98 87       	std	Y+8, r25	; 0x08
    5eba:	a9 87       	std	Y+9, r26	; 0x09
    5ebc:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    5ebe:	23 2b       	or	r18, r19
    5ec0:	09 f4       	brne	.+2      	; 0x5ec4 <nvm_flash_erase_and_write_buffer+0x4c>
    5ec2:	8d c0       	rjmp	.+282    	; 0x5fde <nvm_flash_erase_and_write_buffer+0x166>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    5ec4:	88 24       	eor	r8, r8
    5ec6:	8a 94       	dec	r8
    5ec8:	98 2c       	mov	r9, r8
    5eca:	04 c0       	rjmp	.+8      	; 0x5ed4 <nvm_flash_erase_and_write_buffer+0x5c>
    5ecc:	cf 82       	std	Y+7, r12	; 0x07
    5ece:	d8 86       	std	Y+8, r13	; 0x08
    5ed0:	e9 86       	std	Y+9, r14	; 0x09
    5ed2:	fa 86       	std	Y+10, r15	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5ed4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5ed8:	88 23       	and	r24, r24
    5eda:	e4 f3       	brlt	.-8      	; 0x5ed4 <nvm_flash_erase_and_write_buffer+0x5c>
    5edc:	8f 81       	ldd	r24, Y+7	; 0x07
    5ede:	98 85       	ldd	r25, Y+8	; 0x08
    5ee0:	a9 85       	ldd	r26, Y+9	; 0x09
    5ee2:	ba 85       	ldd	r27, Y+10	; 0x0a
    5ee4:	9e 5f       	subi	r25, 0xFE	; 254
    5ee6:	af 4f       	sbci	r26, 0xFF	; 255
    5ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    5eea:	8b 83       	std	Y+3, r24	; 0x03
    5eec:	9c 83       	std	Y+4, r25	; 0x04
    5eee:	ad 83       	std	Y+5, r26	; 0x05
    5ef0:	be 83       	std	Y+6, r27	; 0x06
    5ef2:	cf 80       	ldd	r12, Y+7	; 0x07
    5ef4:	d8 84       	ldd	r13, Y+8	; 0x08
    5ef6:	e9 84       	ldd	r14, Y+9	; 0x09
    5ef8:	fa 84       	ldd	r15, Y+10	; 0x0a
    5efa:	10 e0       	ldi	r17, 0x00	; 0
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5efc:	00 23       	and	r16, r16
    5efe:	61 f0       	breq	.+24     	; 0x5f18 <nvm_flash_erase_and_write_buffer+0xa0>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    5f00:	0b b6       	in	r0, 0x3b	; 59
    5f02:	eb be       	out	0x3b, r14	; 59
    5f04:	f6 01       	movw	r30, r12
    5f06:	87 91       	elpm	r24, Z+
    5f08:	96 91       	elpm	r25, Z
    5f0a:	0b be       	out	0x3b, r0	; 59
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    5f0c:	89 83       	std	Y+1, r24	; 0x01
    5f0e:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    5f10:	01 96       	adiw	r24, 0x01	; 1
    5f12:	21 f0       	breq	.+8      	; 0x5f1c <nvm_flash_erase_and_write_buffer+0xa4>
					b_flag_erase = true; // The page is not empty
    5f14:	11 e0       	ldi	r17, 0x01	; 1
    5f16:	02 c0       	rjmp	.+4      	; 0x5f1c <nvm_flash_erase_and_write_buffer+0xa4>
				}
			}else{
				w_value = 0xFFFF;
    5f18:	89 82       	std	Y+1, r8	; 0x01
    5f1a:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    5f1c:	a1 14       	cp	r10, r1
    5f1e:	b1 04       	cpc	r11, r1
    5f20:	61 f1       	breq	.+88     	; 0x5f7a <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == page_address) {
    5f22:	c4 14       	cp	r12, r4
    5f24:	d5 04       	cpc	r13, r5
    5f26:	e6 04       	cpc	r14, r6
    5f28:	f7 04       	cpc	r15, r7
    5f2a:	79 f4       	brne	.+30     	; 0x5f4a <nvm_flash_erase_and_write_buffer+0xd2>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5f2c:	b1 e0       	ldi	r27, 0x01	; 1
    5f2e:	ab 1a       	sub	r10, r27
    5f30:	b1 08       	sbc	r11, r1
					opt_address++;
    5f32:	ef ef       	ldi	r30, 0xFF	; 255
    5f34:	4e 1a       	sub	r4, r30
    5f36:	5e 0a       	sbc	r5, r30
    5f38:	6e 0a       	sbc	r6, r30
    5f3a:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    5f3c:	d1 01       	movw	r26, r2
    5f3e:	8d 91       	ld	r24, X+
    5f40:	1d 01       	movw	r2, r26
    5f42:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    5f44:	a1 14       	cp	r10, r1
    5f46:	b1 04       	cpc	r11, r1
    5f48:	c1 f0       	breq	.+48     	; 0x5f7a <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == (page_address+1)) {
    5f4a:	d7 01       	movw	r26, r14
    5f4c:	c6 01       	movw	r24, r12
    5f4e:	01 96       	adiw	r24, 0x01	; 1
    5f50:	a1 1d       	adc	r26, r1
    5f52:	b1 1d       	adc	r27, r1
    5f54:	84 15       	cp	r24, r4
    5f56:	95 05       	cpc	r25, r5
    5f58:	a6 05       	cpc	r26, r6
    5f5a:	b7 05       	cpc	r27, r7
    5f5c:	71 f4       	brne	.+28     	; 0x5f7a <nvm_flash_erase_and_write_buffer+0x102>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5f5e:	b1 e0       	ldi	r27, 0x01	; 1
    5f60:	ab 1a       	sub	r10, r27
    5f62:	b1 08       	sbc	r11, r1
					opt_address++;
    5f64:	26 01       	movw	r4, r12
    5f66:	37 01       	movw	r6, r14
    5f68:	e2 e0       	ldi	r30, 0x02	; 2
    5f6a:	4e 0e       	add	r4, r30
    5f6c:	51 1c       	adc	r5, r1
    5f6e:	61 1c       	adc	r6, r1
    5f70:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    5f72:	d1 01       	movw	r26, r2
    5f74:	8d 91       	ld	r24, X+
    5f76:	1d 01       	movw	r2, r26
    5f78:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    5f7a:	49 81       	ldd	r20, Y+1	; 0x01
    5f7c:	5a 81       	ldd	r21, Y+2	; 0x02
    5f7e:	c7 01       	movw	r24, r14
    5f80:	b6 01       	movw	r22, r12
    5f82:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
			page_address+=2;
    5f86:	b2 e0       	ldi	r27, 0x02	; 2
    5f88:	cb 0e       	add	r12, r27
    5f8a:	d1 1c       	adc	r13, r1
    5f8c:	e1 1c       	adc	r14, r1
    5f8e:	f1 1c       	adc	r15, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    5f90:	8b 81       	ldd	r24, Y+3	; 0x03
    5f92:	9c 81       	ldd	r25, Y+4	; 0x04
    5f94:	ad 81       	ldd	r26, Y+5	; 0x05
    5f96:	be 81       	ldd	r27, Y+6	; 0x06
    5f98:	c8 16       	cp	r12, r24
    5f9a:	d9 06       	cpc	r13, r25
    5f9c:	ea 06       	cpc	r14, r26
    5f9e:	fb 06       	cpc	r15, r27
    5fa0:	09 f0       	breq	.+2      	; 0x5fa4 <nvm_flash_erase_and_write_buffer+0x12c>
    5fa2:	ac cf       	rjmp	.-168    	; 0x5efc <nvm_flash_erase_and_write_buffer+0x84>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    5fa4:	11 23       	and	r17, r17
    5fa6:	61 f0       	breq	.+24     	; 0x5fc0 <nvm_flash_erase_and_write_buffer+0x148>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    5fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    5faa:	78 85       	ldd	r23, Y+8	; 0x08
    5fac:	89 85       	ldd	r24, Y+9	; 0x09
    5fae:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5fb0:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5fb4:	22 23       	and	r18, r18
    5fb6:	e4 f3       	brlt	.-8      	; 0x5fb0 <nvm_flash_erase_and_write_buffer+0x138>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    5fb8:	45 e2       	ldi	r20, 0x25	; 37
    5fba:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5fbe:	0b c0       	rjmp	.+22     	; 0x5fd6 <nvm_flash_erase_and_write_buffer+0x15e>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    5fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    5fc2:	78 85       	ldd	r23, Y+8	; 0x08
    5fc4:	89 85       	ldd	r24, Y+9	; 0x09
    5fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5fc8:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5fcc:	22 23       	and	r18, r18
    5fce:	e4 f3       	brlt	.-8      	; 0x5fc8 <nvm_flash_erase_and_write_buffer+0x150>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    5fd0:	44 e2       	ldi	r20, 0x24	; 36
    5fd2:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    5fd6:	a1 14       	cp	r10, r1
    5fd8:	b1 04       	cpc	r11, r1
    5fda:	09 f0       	breq	.+2      	; 0x5fde <nvm_flash_erase_and_write_buffer+0x166>
    5fdc:	77 cf       	rjmp	.-274    	; 0x5ecc <nvm_flash_erase_and_write_buffer+0x54>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    5fde:	2a 96       	adiw	r28, 0x0a	; 10
    5fe0:	cd bf       	out	0x3d, r28	; 61
    5fe2:	de bf       	out	0x3e, r29	; 62
    5fe4:	df 91       	pop	r29
    5fe6:	cf 91       	pop	r28
    5fe8:	1f 91       	pop	r17
    5fea:	0f 91       	pop	r16
    5fec:	ff 90       	pop	r15
    5fee:	ef 90       	pop	r14
    5ff0:	df 90       	pop	r13
    5ff2:	cf 90       	pop	r12
    5ff4:	bf 90       	pop	r11
    5ff6:	af 90       	pop	r10
    5ff8:	9f 90       	pop	r9
    5ffa:	8f 90       	pop	r8
    5ffc:	7f 90       	pop	r7
    5ffe:	6f 90       	pop	r6
    6000:	5f 90       	pop	r5
    6002:	4f 90       	pop	r4
    6004:	3f 90       	pop	r3
    6006:	2f 90       	pop	r2
    6008:	08 95       	ret

0000600a <nvm_fuses_read>:
 * \param fuse Fuse byte to read.
 *
 * \return  Byte value of fuse.
 */
uint8_t nvm_fuses_read(enum fuse_byte_t fuse)
{
    600a:	1f 93       	push	r17
    600c:	cf 93       	push	r28
    600e:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    6010:	e0 ec       	ldi	r30, 0xC0	; 192
    6012:	f1 e0       	ldi	r31, 0x01	; 1
    6014:	97 85       	ldd	r25, Z+15	; 0x0f
    6016:	99 23       	and	r25, r25
    6018:	ec f3       	brlt	.-6      	; 0x6014 <nvm_fuses_read+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Set address
	NVM.ADDR0 = fuse;
    601a:	c0 ec       	ldi	r28, 0xC0	; 192
    601c:	d1 e0       	ldi	r29, 0x01	; 1
    601e:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    6020:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    6022:	87 e0       	ldi	r24, 0x07	; 7
    6024:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    6026:	61 e0       	ldi	r22, 0x01	; 1
    6028:	8b ec       	ldi	r24, 0xCB	; 203
    602a:	91 e0       	ldi	r25, 0x01	; 1
    602c:	0e 94 28 30 	call	0x6050	; 0x6050 <ccp_write_io>
	NVM.CMD = old_cmd;
    6030:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);

	return NVM.DATA0;
    6032:	8c 81       	ldd	r24, Y+4	; 0x04
}
    6034:	df 91       	pop	r29
    6036:	cf 91       	pop	r28
    6038:	1f 91       	pop	r17
    603a:	08 95       	ret

0000603c <nvm_read_byte>:
    603c:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    6040:	e6 2f       	mov	r30, r22
    6042:	f7 2f       	mov	r31, r23
    6044:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    6048:	84 91       	lpm	r24, Z
    604a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    604e:	08 95       	ret

00006050 <ccp_write_io>:
    6050:	1b be       	out	0x3b, r1	; 59
    6052:	fc 01       	movw	r30, r24
    6054:	28 ed       	ldi	r18, 0xD8	; 216
    6056:	24 bf       	out	0x34, r18	; 52
    6058:	60 83       	st	Z, r22
    605a:	08 95       	ret

0000605c <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	PORTA_DIR = 0;//set all IO's to input
    605c:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTB_DIR = 0;//set all IO's to input
    6060:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	PORTC_DIR = (1<<4)|(1<<5)|(1<<7); //set SS, MOSI and SPCK as output
    6064:	80 eb       	ldi	r24, 0xB0	; 176
    6066:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = (1<<0)|(1<<1)|(1<<3)|(1<<4); //set CAN and Ethernet SS and TXD2 as output
    606a:	9b e1       	ldi	r25, 0x1B	; 27
    606c:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE_DIR = (1<<4)|(1<<5)|(1<<7); //set DE, RE and TXD1 as output
    6070:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTF_DIR = (1<<3)|(1<<4)|(1<<5); //set DE, RE and TXD1 as output
    6074:	88 e3       	ldi	r24, 0x38	; 56
    6076:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTH_DIR = (1<<4)|(1<<5); //set LED1 and LED2 as output
    607a:	80 e3       	ldi	r24, 0x30	; 48
    607c:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
	PORTJ_DIR = 0;//set all IO's to input
    6080:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
	PORTK_DIR = 0;//set all IO's to input
    6084:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	PORTQ_DIR = (1<<0)|(1<<1)|(1<<2)|(1<<3); //set relays to output
    6088:	8f e0       	ldi	r24, 0x0F	; 15
    608a:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
	PORTR_DIR = (1<<0)|(1<<1); //set relays to output
    608e:	83 e0       	ldi	r24, 0x03	; 3
    6090:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
	

	PORTA_PIN0CTRL = (1<<PORT_OPC0_bp )|(1<<PORT_OPC1_bp);
    6094:	88 e1       	ldi	r24, 0x18	; 24
    6096:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    609a:	08 95       	ret

0000609c <__mulsi3>:
    609c:	db 01       	movw	r26, r22
    609e:	8f 93       	push	r24
    60a0:	9f 93       	push	r25
    60a2:	0e 94 ee 30 	call	0x61dc	; 0x61dc <__muluhisi3>
    60a6:	bf 91       	pop	r27
    60a8:	af 91       	pop	r26
    60aa:	a2 9f       	mul	r26, r18
    60ac:	80 0d       	add	r24, r0
    60ae:	91 1d       	adc	r25, r1
    60b0:	a3 9f       	mul	r26, r19
    60b2:	90 0d       	add	r25, r0
    60b4:	b2 9f       	mul	r27, r18
    60b6:	90 0d       	add	r25, r0
    60b8:	11 24       	eor	r1, r1
    60ba:	08 95       	ret

000060bc <__udivmodhi4>:
    60bc:	aa 1b       	sub	r26, r26
    60be:	bb 1b       	sub	r27, r27
    60c0:	51 e1       	ldi	r21, 0x11	; 17
    60c2:	07 c0       	rjmp	.+14     	; 0x60d2 <__udivmodhi4_ep>

000060c4 <__udivmodhi4_loop>:
    60c4:	aa 1f       	adc	r26, r26
    60c6:	bb 1f       	adc	r27, r27
    60c8:	a6 17       	cp	r26, r22
    60ca:	b7 07       	cpc	r27, r23
    60cc:	10 f0       	brcs	.+4      	; 0x60d2 <__udivmodhi4_ep>
    60ce:	a6 1b       	sub	r26, r22
    60d0:	b7 0b       	sbc	r27, r23

000060d2 <__udivmodhi4_ep>:
    60d2:	88 1f       	adc	r24, r24
    60d4:	99 1f       	adc	r25, r25
    60d6:	5a 95       	dec	r21
    60d8:	a9 f7       	brne	.-22     	; 0x60c4 <__udivmodhi4_loop>
    60da:	80 95       	com	r24
    60dc:	90 95       	com	r25
    60de:	bc 01       	movw	r22, r24
    60e0:	cd 01       	movw	r24, r26
    60e2:	08 95       	ret

000060e4 <__divmodhi4>:
    60e4:	97 fb       	bst	r25, 7
    60e6:	07 2e       	mov	r0, r23
    60e8:	16 f4       	brtc	.+4      	; 0x60ee <__divmodhi4+0xa>
    60ea:	00 94       	com	r0
    60ec:	07 d0       	rcall	.+14     	; 0x60fc <__divmodhi4_neg1>
    60ee:	77 fd       	sbrc	r23, 7
    60f0:	09 d0       	rcall	.+18     	; 0x6104 <__divmodhi4_neg2>
    60f2:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__udivmodhi4>
    60f6:	07 fc       	sbrc	r0, 7
    60f8:	05 d0       	rcall	.+10     	; 0x6104 <__divmodhi4_neg2>
    60fa:	3e f4       	brtc	.+14     	; 0x610a <__divmodhi4_exit>

000060fc <__divmodhi4_neg1>:
    60fc:	90 95       	com	r25
    60fe:	81 95       	neg	r24
    6100:	9f 4f       	sbci	r25, 0xFF	; 255
    6102:	08 95       	ret

00006104 <__divmodhi4_neg2>:
    6104:	70 95       	com	r23
    6106:	61 95       	neg	r22
    6108:	7f 4f       	sbci	r23, 0xFF	; 255

0000610a <__divmodhi4_exit>:
    610a:	08 95       	ret

0000610c <__udivmodsi4>:
    610c:	a1 e2       	ldi	r26, 0x21	; 33
    610e:	1a 2e       	mov	r1, r26
    6110:	aa 1b       	sub	r26, r26
    6112:	bb 1b       	sub	r27, r27
    6114:	fd 01       	movw	r30, r26
    6116:	0d c0       	rjmp	.+26     	; 0x6132 <__udivmodsi4_ep>

00006118 <__udivmodsi4_loop>:
    6118:	aa 1f       	adc	r26, r26
    611a:	bb 1f       	adc	r27, r27
    611c:	ee 1f       	adc	r30, r30
    611e:	ff 1f       	adc	r31, r31
    6120:	a2 17       	cp	r26, r18
    6122:	b3 07       	cpc	r27, r19
    6124:	e4 07       	cpc	r30, r20
    6126:	f5 07       	cpc	r31, r21
    6128:	20 f0       	brcs	.+8      	; 0x6132 <__udivmodsi4_ep>
    612a:	a2 1b       	sub	r26, r18
    612c:	b3 0b       	sbc	r27, r19
    612e:	e4 0b       	sbc	r30, r20
    6130:	f5 0b       	sbc	r31, r21

00006132 <__udivmodsi4_ep>:
    6132:	66 1f       	adc	r22, r22
    6134:	77 1f       	adc	r23, r23
    6136:	88 1f       	adc	r24, r24
    6138:	99 1f       	adc	r25, r25
    613a:	1a 94       	dec	r1
    613c:	69 f7       	brne	.-38     	; 0x6118 <__udivmodsi4_loop>
    613e:	60 95       	com	r22
    6140:	70 95       	com	r23
    6142:	80 95       	com	r24
    6144:	90 95       	com	r25
    6146:	9b 01       	movw	r18, r22
    6148:	ac 01       	movw	r20, r24
    614a:	bd 01       	movw	r22, r26
    614c:	cf 01       	movw	r24, r30
    614e:	08 95       	ret

00006150 <__divmodsi4>:
    6150:	05 2e       	mov	r0, r21
    6152:	97 fb       	bst	r25, 7
    6154:	1e f4       	brtc	.+6      	; 0x615c <__divmodsi4+0xc>
    6156:	00 94       	com	r0
    6158:	0e 94 bf 30 	call	0x617e	; 0x617e <__negsi2>
    615c:	57 fd       	sbrc	r21, 7
    615e:	07 d0       	rcall	.+14     	; 0x616e <__divmodsi4_neg2>
    6160:	0e 94 86 30 	call	0x610c	; 0x610c <__udivmodsi4>
    6164:	07 fc       	sbrc	r0, 7
    6166:	03 d0       	rcall	.+6      	; 0x616e <__divmodsi4_neg2>
    6168:	4e f4       	brtc	.+18     	; 0x617c <__divmodsi4_exit>
    616a:	0c 94 bf 30 	jmp	0x617e	; 0x617e <__negsi2>

0000616e <__divmodsi4_neg2>:
    616e:	50 95       	com	r21
    6170:	40 95       	com	r20
    6172:	30 95       	com	r19
    6174:	21 95       	neg	r18
    6176:	3f 4f       	sbci	r19, 0xFF	; 255
    6178:	4f 4f       	sbci	r20, 0xFF	; 255
    617a:	5f 4f       	sbci	r21, 0xFF	; 255

0000617c <__divmodsi4_exit>:
    617c:	08 95       	ret

0000617e <__negsi2>:
    617e:	90 95       	com	r25
    6180:	80 95       	com	r24
    6182:	70 95       	com	r23
    6184:	61 95       	neg	r22
    6186:	7f 4f       	sbci	r23, 0xFF	; 255
    6188:	8f 4f       	sbci	r24, 0xFF	; 255
    618a:	9f 4f       	sbci	r25, 0xFF	; 255
    618c:	08 95       	ret

0000618e <__tablejump2__>:
    618e:	ee 0f       	add	r30, r30
    6190:	ff 1f       	adc	r31, r31
    6192:	88 1f       	adc	r24, r24
    6194:	8b bf       	out	0x3b, r24	; 59
    6196:	07 90       	elpm	r0, Z+
    6198:	f6 91       	elpm	r31, Z
    619a:	e0 2d       	mov	r30, r0
    619c:	1b be       	out	0x3b, r1	; 59
    619e:	19 94       	eijmp

000061a0 <__mulhisi3>:
    61a0:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__umulhisi3>
    61a4:	33 23       	and	r19, r19
    61a6:	12 f4       	brpl	.+4      	; 0x61ac <__mulhisi3+0xc>
    61a8:	8a 1b       	sub	r24, r26
    61aa:	9b 0b       	sbc	r25, r27
    61ac:	0c 94 e9 30 	jmp	0x61d2	; 0x61d2 <__usmulhisi3_tail>

000061b0 <__umulhisi3>:
    61b0:	a2 9f       	mul	r26, r18
    61b2:	b0 01       	movw	r22, r0
    61b4:	b3 9f       	mul	r27, r19
    61b6:	c0 01       	movw	r24, r0
    61b8:	a3 9f       	mul	r26, r19
    61ba:	70 0d       	add	r23, r0
    61bc:	81 1d       	adc	r24, r1
    61be:	11 24       	eor	r1, r1
    61c0:	91 1d       	adc	r25, r1
    61c2:	b2 9f       	mul	r27, r18
    61c4:	70 0d       	add	r23, r0
    61c6:	81 1d       	adc	r24, r1
    61c8:	11 24       	eor	r1, r1
    61ca:	91 1d       	adc	r25, r1
    61cc:	08 95       	ret

000061ce <__usmulhisi3>:
    61ce:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__umulhisi3>

000061d2 <__usmulhisi3_tail>:
    61d2:	b7 ff       	sbrs	r27, 7
    61d4:	08 95       	ret
    61d6:	82 1b       	sub	r24, r18
    61d8:	93 0b       	sbc	r25, r19
    61da:	08 95       	ret

000061dc <__muluhisi3>:
    61dc:	0e 94 d8 30 	call	0x61b0	; 0x61b0 <__umulhisi3>
    61e0:	a5 9f       	mul	r26, r21
    61e2:	90 0d       	add	r25, r0
    61e4:	b4 9f       	mul	r27, r20
    61e6:	90 0d       	add	r25, r0
    61e8:	a4 9f       	mul	r26, r20
    61ea:	80 0d       	add	r24, r0
    61ec:	91 1d       	adc	r25, r1
    61ee:	11 24       	eor	r1, r1
    61f0:	08 95       	ret

000061f2 <memcpy>:
    61f2:	fb 01       	movw	r30, r22
    61f4:	dc 01       	movw	r26, r24
    61f6:	02 c0       	rjmp	.+4      	; 0x61fc <memcpy+0xa>
    61f8:	01 90       	ld	r0, Z+
    61fa:	0d 92       	st	X+, r0
    61fc:	41 50       	subi	r20, 0x01	; 1
    61fe:	50 40       	sbci	r21, 0x00	; 0
    6200:	d8 f7       	brcc	.-10     	; 0x61f8 <memcpy+0x6>
    6202:	08 95       	ret

00006204 <_exit>:
    6204:	f8 94       	cli

00006206 <__stop_program>:
    6206:	ff cf       	rjmp	.-2      	; 0x6206 <__stop_program>
