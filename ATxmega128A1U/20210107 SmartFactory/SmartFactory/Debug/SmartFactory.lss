
SmartFactory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000058  00020000  00020000  000064c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .jmp_table    000000a8  00007e00  00007e00  00006420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00005f6a  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         000003e2  00802000  00005f6a  0000603e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002a5  008023e2  008023e2  00006522  2**4
                  ALLOC
  5 .comment      00000060  00000000  00000000  00006520  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006580  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000a20  00000000  00000000  000065c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00013462  00000000  00000000  00006fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006a6a  00000000  00000000  0001a442  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00008eb2  00000000  00000000  00020eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d90  00000000  00000000  00029d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0003af33  00000000  00000000  0002baf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008797  00000000  00000000  00066a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000900  00000000  00000000  0006f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0000c60c  00000000  00000000  0006fac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_CommonSPM>:
   20000:	fc 01       	movw	r30, r24
   20002:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20006:	2d e9       	ldi	r18, 0x9D	; 157
   20008:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
   2000c:	e8 95       	spm
   2000e:	11 24       	eor	r1, r1
   20010:	3b bf       	out	0x3b, r19	; 59
   20012:	08 95       	ret

00020014 <nvm_common_spm>:
   20014:	9b b7       	in	r25, 0x3b	; 59
   20016:	8b bf       	out	0x3b, r24	; 59
   20018:	fb 01       	movw	r30, r22
   2001a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2001e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20022:	7d e9       	ldi	r23, 0x9D	; 157
   20024:	70 93 34 00 	sts	0x0034, r23	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
   20028:	e8 95       	spm
   2002a:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2002e:	9b bf       	out	0x3b, r25	; 59
   20030:	08 95       	ret

00020032 <nvm_flash_load_word_to_buffer>:
   20032:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
   20036:	27 fd       	sbrc	r18, 7
   20038:	fc cf       	rjmp	.-8      	; 0x20032 <nvm_flash_load_word_to_buffer>
   2003a:	9b b7       	in	r25, 0x3b	; 59
   2003c:	8b bf       	out	0x3b, r24	; 59
   2003e:	fb 01       	movw	r30, r22
   20040:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20044:	23 e2       	ldi	r18, 0x23	; 35
   20046:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   2004a:	0a 01       	movw	r0, r20
   2004c:	e8 95       	spm
   2004e:	11 24       	eor	r1, r1
   20050:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
   20054:	9b bf       	out	0x3b, r25	; 59
   20056:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 02 	jmp	0x516	; 0x516 <__ctors_end>
       4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
       8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
       c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      10:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      14:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      18:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      1c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      20:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      24:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      28:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      2c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      30:	0c 94 5b 06 	jmp	0xcb6	; 0xcb6 <__vector_12>
      34:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      38:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      3c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      40:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      44:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      48:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      4c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      50:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      54:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      58:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      5c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      60:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      64:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      68:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      6c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      70:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      74:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      78:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      7c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      80:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      84:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      88:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      8c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      90:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      94:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      98:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      9c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      a8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      ac:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      b4:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_45>
      b8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      bc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      c8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      cc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      d8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      dc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      e8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      ec:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      f0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      f4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      f8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
      fc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     100:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     104:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     108:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     10c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     110:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     114:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     118:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     11c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     120:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     124:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     128:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     12c:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__vector_75>
     130:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     134:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     138:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     13c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     140:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     144:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     148:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     14c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     150:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     154:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     158:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     15c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     160:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     164:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     168:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     16c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     170:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     174:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     178:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     17c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     180:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     184:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     188:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     18c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     190:	0c 94 0b 17 	jmp	0x2e16	; 0x2e16 <__vector_100>
     194:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__vector_101>
     198:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     19c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1a0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1a4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1a8:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__vector_106>
     1ac:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1b0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1b4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1b8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1bc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1c0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1c4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1c8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1cc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1d0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1d4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1d8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1dc:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1e0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1e4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1e8:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1ec:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1f0:	0c 94 b1 02 	jmp	0x562	; 0x562 <__bad_interrupt>
     1f4:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__vector_125>
     1f8:	0c 94 20 29 	jmp	0x5240	; 0x5240 <__vector_126>
     1fc:	f8 14       	cp	r15, r8
     1fe:	07 15       	cp	r16, r7
     200:	16 15       	cp	r17, r6
     202:	25 15       	cp	r18, r5
     204:	33 15       	cp	r19, r3
     206:	42 15       	cp	r20, r2
     208:	51 15       	cp	r21, r1
     20a:	5f 15       	cp	r21, r15
     20c:	6c 15       	cp	r22, r12
     20e:	7b 15       	cp	r23, r11
     210:	8a 15       	cp	r24, r10
     212:	99 15       	cp	r25, r9
     214:	51 16       	cp	r5, r17
     216:	51 16       	cp	r5, r17
     218:	51 16       	cp	r5, r17
     21a:	51 16       	cp	r5, r17
     21c:	51 16       	cp	r5, r17
     21e:	51 16       	cp	r5, r17
     220:	51 16       	cp	r5, r17
     222:	51 16       	cp	r5, r17
     224:	51 16       	cp	r5, r17
     226:	51 16       	cp	r5, r17
     228:	51 16       	cp	r5, r17
     22a:	51 16       	cp	r5, r17
     22c:	51 16       	cp	r5, r17
     22e:	51 16       	cp	r5, r17
     230:	51 16       	cp	r5, r17
     232:	51 16       	cp	r5, r17
     234:	51 16       	cp	r5, r17
     236:	51 16       	cp	r5, r17
     238:	51 16       	cp	r5, r17
     23a:	51 16       	cp	r5, r17
     23c:	4f 16       	cp	r4, r31
     23e:	4f 16       	cp	r4, r31
     240:	4f 16       	cp	r4, r31
     242:	4f 16       	cp	r4, r31
     244:	4f 16       	cp	r4, r31
     246:	4f 16       	cp	r4, r31
     248:	4f 16       	cp	r4, r31
     24a:	4f 16       	cp	r4, r31
     24c:	4f 16       	cp	r4, r31
     24e:	4f 16       	cp	r4, r31
     250:	4f 16       	cp	r4, r31
     252:	4f 16       	cp	r4, r31
     254:	4f 16       	cp	r4, r31
     256:	4f 16       	cp	r4, r31
     258:	4f 16       	cp	r4, r31
     25a:	4f 16       	cp	r4, r31
     25c:	4f 16       	cp	r4, r31
     25e:	4f 16       	cp	r4, r31
     260:	4f 16       	cp	r4, r31
     262:	4f 16       	cp	r4, r31
     264:	53 16       	cp	r5, r19
     266:	53 16       	cp	r5, r19
     268:	53 16       	cp	r5, r19
     26a:	53 16       	cp	r5, r19
     26c:	53 16       	cp	r5, r19
     26e:	53 16       	cp	r5, r19
     270:	53 16       	cp	r5, r19
     272:	53 16       	cp	r5, r19
     274:	53 16       	cp	r5, r19
     276:	53 16       	cp	r5, r19
     278:	4d 16       	cp	r4, r29
     27a:	4d 16       	cp	r4, r29
     27c:	4d 16       	cp	r4, r29
     27e:	4d 16       	cp	r4, r29
     280:	4d 16       	cp	r4, r29
     282:	4d 16       	cp	r4, r29
     284:	4d 16       	cp	r4, r29
     286:	4d 16       	cp	r4, r29
     288:	4d 16       	cp	r4, r29
     28a:	4d 16       	cp	r4, r29
     28c:	53 16       	cp	r5, r19
     28e:	53 16       	cp	r5, r19
     290:	53 16       	cp	r5, r19
     292:	53 16       	cp	r5, r19
     294:	53 16       	cp	r5, r19
     296:	53 16       	cp	r5, r19
     298:	53 16       	cp	r5, r19
     29a:	53 16       	cp	r5, r19
     29c:	53 16       	cp	r5, r19
     29e:	53 16       	cp	r5, r19
     2a0:	53 16       	cp	r5, r19
     2a2:	53 16       	cp	r5, r19
     2a4:	53 16       	cp	r5, r19
     2a6:	53 16       	cp	r5, r19
     2a8:	53 16       	cp	r5, r19
     2aa:	53 16       	cp	r5, r19
     2ac:	53 16       	cp	r5, r19
     2ae:	53 16       	cp	r5, r19
     2b0:	53 16       	cp	r5, r19
     2b2:	53 16       	cp	r5, r19
     2b4:	4b 16       	cp	r4, r27
     2b6:	4b 16       	cp	r4, r27
     2b8:	4b 16       	cp	r4, r27
     2ba:	4b 16       	cp	r4, r27
     2bc:	4b 16       	cp	r4, r27
     2be:	4b 16       	cp	r4, r27
     2c0:	4b 16       	cp	r4, r27
     2c2:	4b 16       	cp	r4, r27
     2c4:	4b 16       	cp	r4, r27
     2c6:	4b 16       	cp	r4, r27
     2c8:	4b 16       	cp	r4, r27
     2ca:	4b 16       	cp	r4, r27
     2cc:	4b 16       	cp	r4, r27
     2ce:	4b 16       	cp	r4, r27
     2d0:	4b 16       	cp	r4, r27
     2d2:	49 16       	cp	r4, r25
     2d4:	49 16       	cp	r4, r25
     2d6:	49 16       	cp	r4, r25
     2d8:	49 16       	cp	r4, r25
     2da:	49 16       	cp	r4, r25
     2dc:	49 16       	cp	r4, r25
     2de:	49 16       	cp	r4, r25
     2e0:	49 16       	cp	r4, r25
     2e2:	49 16       	cp	r4, r25
     2e4:	49 16       	cp	r4, r25
     2e6:	49 16       	cp	r4, r25
     2e8:	49 16       	cp	r4, r25
     2ea:	49 16       	cp	r4, r25
     2ec:	49 16       	cp	r4, r25
     2ee:	49 16       	cp	r4, r25
     2f0:	47 16       	cp	r4, r23
     2f2:	47 16       	cp	r4, r23
     2f4:	47 16       	cp	r4, r23
     2f6:	47 16       	cp	r4, r23
     2f8:	47 16       	cp	r4, r23
     2fa:	47 16       	cp	r4, r23
     2fc:	47 16       	cp	r4, r23
     2fe:	47 16       	cp	r4, r23
     300:	47 16       	cp	r4, r23
     302:	47 16       	cp	r4, r23
     304:	47 16       	cp	r4, r23
     306:	47 16       	cp	r4, r23
     308:	47 16       	cp	r4, r23
     30a:	47 16       	cp	r4, r23
     30c:	47 16       	cp	r4, r23
     30e:	47 16       	cp	r4, r23
     310:	47 16       	cp	r4, r23
     312:	47 16       	cp	r4, r23
     314:	47 16       	cp	r4, r23
     316:	47 16       	cp	r4, r23
     318:	45 16       	cp	r4, r21
     31a:	45 16       	cp	r4, r21
     31c:	45 16       	cp	r4, r21
     31e:	45 16       	cp	r4, r21
     320:	45 16       	cp	r4, r21
     322:	45 16       	cp	r4, r21
     324:	45 16       	cp	r4, r21
     326:	45 16       	cp	r4, r21
     328:	45 16       	cp	r4, r21
     32a:	45 16       	cp	r4, r21
     32c:	43 16       	cp	r4, r19
     32e:	43 16       	cp	r4, r19
     330:	43 16       	cp	r4, r19
     332:	43 16       	cp	r4, r19
     334:	43 16       	cp	r4, r19
     336:	43 16       	cp	r4, r19
     338:	43 16       	cp	r4, r19
     33a:	43 16       	cp	r4, r19
     33c:	43 16       	cp	r4, r19
     33e:	43 16       	cp	r4, r19
     340:	43 16       	cp	r4, r19
     342:	43 16       	cp	r4, r19
     344:	43 16       	cp	r4, r19
     346:	43 16       	cp	r4, r19
     348:	43 16       	cp	r4, r19
     34a:	43 16       	cp	r4, r19
     34c:	43 16       	cp	r4, r19
     34e:	43 16       	cp	r4, r19
     350:	43 16       	cp	r4, r19
     352:	43 16       	cp	r4, r19
     354:	43 16       	cp	r4, r19
     356:	43 16       	cp	r4, r19
     358:	43 16       	cp	r4, r19
     35a:	43 16       	cp	r4, r19
     35c:	43 16       	cp	r4, r19
     35e:	43 16       	cp	r4, r19
     360:	43 16       	cp	r4, r19
     362:	43 16       	cp	r4, r19
     364:	43 16       	cp	r4, r19
     366:	43 16       	cp	r4, r19
     368:	41 16       	cp	r4, r17
     36a:	41 16       	cp	r4, r17
     36c:	41 16       	cp	r4, r17
     36e:	41 16       	cp	r4, r17
     370:	41 16       	cp	r4, r17
     372:	3f 16       	cp	r3, r31
     374:	3f 16       	cp	r3, r31
     376:	3f 16       	cp	r3, r31
     378:	3f 16       	cp	r3, r31
     37a:	3f 16       	cp	r3, r31
     37c:	3d 16       	cp	r3, r29
     37e:	3d 16       	cp	r3, r29
     380:	3d 16       	cp	r3, r29
     382:	3d 16       	cp	r3, r29
     384:	3d 16       	cp	r3, r29
     386:	3b 16       	cp	r3, r27
     388:	3b 16       	cp	r3, r27
     38a:	3b 16       	cp	r3, r27
     38c:	3b 16       	cp	r3, r27
     38e:	3b 16       	cp	r3, r27
     390:	55 16       	cp	r5, r21
     392:	55 16       	cp	r5, r21
     394:	55 16       	cp	r5, r21
     396:	55 16       	cp	r5, r21
     398:	55 16       	cp	r5, r21
     39a:	55 16       	cp	r5, r21
     39c:	b8 22       	and	r11, r24
     39e:	bb 22       	and	r11, r27
     3a0:	be 22       	and	r11, r30
     3a2:	c1 22       	and	r12, r17
     3a4:	c4 22       	and	r12, r20
     3a6:	c7 22       	and	r12, r23
     3a8:	ca 22       	and	r12, r26

000003aa <__trampolines_start>:
     3aa:	0c 94 bb 22 	jmp	0x4576	; 0x4576 <udd_ep_get_size+0x28>
     3ae:	0c 94 be 22 	jmp	0x457c	; 0x457c <udd_ep_get_size+0x2e>
     3b2:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <udi_cdc_data_disable>
     3b6:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <udi_cdc_data_enable>
     3ba:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <_Z15ReadSharpSensorh+0x22>
     3be:	0c 94 30 19 	jmp	0x3260	; 0x3260 <udi_cdc_line_coding_received>
     3c2:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_Z9isSmallerii>
     3c6:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <_Z15ReadSharpSensorh>
     3ca:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <_Z10AnalogReadi>
     3ce:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <_Z3LEDb>
     3d2:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <_Z15ReadSharpSensorh+0x4e>
     3d6:	0c 94 a7 18 	jmp	0x314e	; 0x314e <udi_cdc_comm_enable>
     3da:	0c 94 e2 18 	jmp	0x31c4	; 0x31c4 <udi_cdc_data_setup>
     3de:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <_Z12IO_ReadWritebh+0xd0>
     3e2:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <_Z7isEqualii>
     3e6:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <_Z15OptocouplerReadi>
     3ea:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <_Z12IO_ReadWritebh+0x5a>
     3ee:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <_Z15ReadSharpSensorh+0x2e>
     3f2:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <MoveElevator>
     3f6:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <_Z15ReadSharpSensorh+0x46>
     3fa:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_Z8multiplyii>
     3fe:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <_Z15ReadSharpSensorh+0x3e>
     402:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <udd_ep_get_size+0x22>
     406:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <_Z3addii>
     40a:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <udi_cdc_comm_setup>
     40e:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <_Z11printNumberj>
     412:	0c 94 fe 11 	jmp	0x23fc	; 0x23fc <_Z8StopBeltj>
     416:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <_Z12IO_ReadWritebh+0x1e>
     41a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <_Z12IO_ReadWritebh+0x3c>
     41e:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <_Z12IO_ReadWritebh+0x78>
     422:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <_Z15ReadSharpSensorh+0x26>
     426:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <udi_cdc_data_sent>
     42a:	0c 94 54 1b 	jmp	0x36a8	; 0x36a8 <udi_cdc_data_received>
     42e:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <_Z12IO_ReadWritebh+0x160>
     432:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <_Z13StopTurntablej>
     436:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <_Z12IO_ReadWritebh+0x142>
     43a:	0c 94 82 13 	jmp	0x2704	; 0x2704 <_Z13requestResultv>
     43e:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <_Z11DigitalReadi>
     442:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <udi_cdc_serial_state_msg_sent>
     446:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <udd_ep_get_size+0x34>
     44a:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <ElevatorIsReady>
     44e:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_Z15ReadSharpSensorh+0x42>
     452:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <_Z8Solenoidhb>
     456:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_Z6invertj>
     45a:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <_Z15ReadSharpSensorh+0x32>
     45e:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <_Z15ReadSharpSensorh+0x2a>
     462:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <SorterarmIsFinnished>
     466:	0c 94 c7 22 	jmp	0x458e	; 0x458e <udd_ep_get_size+0x40>
     46a:	0c 94 97 10 	jmp	0x212e	; 0x212e <HomeSorterArm>
     46e:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_Z8isBiggerii>
     472:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <SelectColour>
     476:	0c 94 df 12 	jmp	0x25be	; 0x25be <_Z10SetAddresshh>
     47a:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <_Z15ReadSharpSensorh+0x52>
     47e:	0c 94 95 12 	jmp	0x252a	; 0x252a <_Z13DemoTestBlockv>
     482:	0c 94 37 03 	jmp	0x66e	; 0x66e <_Z9delay1secv>
     486:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_Z12IO_ReadWritebh+0xec>
     48a:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_Z9logic_andbb>
     48e:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <_Z12IO_ReadWritebh+0x94>
     492:	0c 94 29 12 	jmp	0x2452	; 0x2452 <_Z13MoveTurntablebji>
     496:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <_Z15passthrough_TWIv>
     49a:	0c 94 f9 1d 	jmp	0x3bf2	; 0x3bf2 <udc_valid_address>
     49e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <_Z9ToggleLEDv>
     4a2:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <_Z13PulseSolenoidh>
     4a6:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <_Z9logic_xorbb>
     4aa:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <StopSorterArm>
     4ae:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <_Z9set_relaybh>
     4b2:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <_Z14requestStartedv>
     4b6:	0c 94 8b 03 	jmp	0x716	; 0x716 <_Z8subtractii>
     4ba:	0c 94 41 03 	jmp	0x682	; 0x682 <_Z8delay_msj>
     4be:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <MoveSorterArmTo>
     4c2:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_Z15isBiggerOrEqualii>
     4c6:	0c 94 f9 10 	jmp	0x21f2	; 0x21f2 <MoveSorterArmDistance>
     4ca:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <_Z15ReadSharpSensorh+0x3a>
     4ce:	0c 94 7b 15 	jmp	0x2af6	; 0x2af6 <_Z12IO_ReadWritebh+0x124>
     4d2:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <udi_cdc_getsetting>
     4d6:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_Z8logic_orbb>
     4da:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <_Z15ReadSharpSensorh+0x36>
     4de:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <udi_cdc_comm_disable>
     4e2:	0c 94 c4 22 	jmp	0x4588	; 0x4588 <udd_ep_get_size+0x3a>
     4e6:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <ReadColourSensor>
     4ea:	0c 94 c7 12 	jmp	0x258e	; 0x258e <_Z17StopDemoTestBlockv>
     4ee:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <_Z15ReadSharpSensorh+0x56>
     4f2:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <_Z15ReadSharpSensorh+0x4a>
     4f6:	0c 94 cf 03 	jmp	0x79e	; 0x79e <_Z6divideii>
     4fa:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <_Z8MoveBeltbji>
     4fe:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <StopElevator>
     502:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <_Z12IO_ReadWritebh+0x106>
     506:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <udi_cdc_data_sof_notify>
     50a:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_Z16isSmallerOrEqualii>
     50e:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <_Z12IO_ReadWritebh+0xb2>
     512:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <udd_ep_get_size+0x46>

00000516 <__ctors_end>:
     516:	11 24       	eor	r1, r1
     518:	1f be       	out	0x3f, r1	; 63
     51a:	cf ef       	ldi	r28, 0xFF	; 255
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df e3       	ldi	r29, 0x3F	; 63
     520:	de bf       	out	0x3e, r29	; 62
     522:	00 e0       	ldi	r16, 0x00	; 0
     524:	0c bf       	out	0x3c, r16	; 60
     526:	18 be       	out	0x38, r1	; 56
     528:	19 be       	out	0x39, r1	; 57
     52a:	1a be       	out	0x3a, r1	; 58
     52c:	1b be       	out	0x3b, r1	; 59

0000052e <__do_copy_data>:
     52e:	13 e2       	ldi	r17, 0x23	; 35
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e2       	ldi	r27, 0x20	; 32
     534:	ea e6       	ldi	r30, 0x6A	; 106
     536:	ff e5       	ldi	r31, 0x5F	; 95
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	0b bf       	out	0x3b, r16	; 59
     53c:	02 c0       	rjmp	.+4      	; 0x542 <__do_copy_data+0x14>
     53e:	07 90       	elpm	r0, Z+
     540:	0d 92       	st	X+, r0
     542:	a2 3e       	cpi	r26, 0xE2	; 226
     544:	b1 07       	cpc	r27, r17
     546:	d9 f7       	brne	.-10     	; 0x53e <__do_copy_data+0x10>
     548:	1b be       	out	0x3b, r1	; 59

0000054a <__do_clear_bss>:
     54a:	26 e2       	ldi	r18, 0x26	; 38
     54c:	a2 ee       	ldi	r26, 0xE2	; 226
     54e:	b3 e2       	ldi	r27, 0x23	; 35
     550:	01 c0       	rjmp	.+2      	; 0x554 <.do_clear_bss_start>

00000552 <.do_clear_bss_loop>:
     552:	1d 92       	st	X+, r1

00000554 <.do_clear_bss_start>:
     554:	a7 38       	cpi	r26, 0x87	; 135
     556:	b2 07       	cpc	r27, r18
     558:	e1 f7       	brne	.-8      	; 0x552 <.do_clear_bss_loop>
     55a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <main>
     55e:	0c 94 b3 2f 	jmp	0x5f66	; 0x5f66 <_exit>

00000562 <__bad_interrupt>:
     562:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000566 <SP_ReadByte>:
     566:	3b b7       	in	r19, 0x3b	; 59
     568:	8b bf       	out	0x3b, r24	; 59
     56a:	fb 01       	movw	r30, r22
     56c:	86 91       	elpm	r24, Z
     56e:	3b bf       	out	0x3b, r19	; 59
     570:	08 95       	ret

00000572 <SP_ReadWord>:
     572:	3b b7       	in	r19, 0x3b	; 59
     574:	8b bf       	out	0x3b, r24	; 59
     576:	fb 01       	movw	r30, r22
     578:	87 91       	elpm	r24, Z+
     57a:	96 91       	elpm	r25, Z
     57c:	3b bf       	out	0x3b, r19	; 59
     57e:	08 95       	ret

00000580 <SP_ReadCalibrationByte>:
     580:	42 e0       	ldi	r20, 0x02	; 2
     582:	70 c0       	rjmp	.+224    	; 0x664 <SP_CommonLPM>

00000584 <SP_ReadUserSignatureByte>:
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	6e c0       	rjmp	.+220    	; 0x664 <SP_CommonLPM>

00000588 <SP_ReadFuseByte>:
     588:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
     58c:	88 27       	eor	r24, r24
     58e:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
     592:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
     596:	47 e0       	ldi	r20, 0x07	; 7
     598:	55 d0       	rcall	.+170    	; 0x644 <SP_CommonCMD>
     59a:	cb 01       	movw	r24, r22
     59c:	08 95       	ret

0000059e <SP_WriteLockBits>:
     59e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     5a2:	48 e0       	ldi	r20, 0x08	; 8
     5a4:	4f c0       	rjmp	.+158    	; 0x644 <SP_CommonCMD>

000005a6 <SP_ReadLockBits>:
     5a6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
     5aa:	08 95       	ret

000005ac <SP_EraseUserSignatureRow>:
     5ac:	3b b7       	in	r19, 0x3b	; 59
     5ae:	48 e1       	ldi	r20, 0x18	; 24
     5b0:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005b4 <SP_WriteUserSignatureRow>:
     5b4:	3b b7       	in	r19, 0x3b	; 59
     5b6:	4a e1       	ldi	r20, 0x1A	; 26
     5b8:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005bc <SP_EraseApplicationSection>:
     5bc:	3b b7       	in	r19, 0x3b	; 59
     5be:	40 e2       	ldi	r20, 0x20	; 32
     5c0:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005c4 <SP_EraseApplicationPage>:
     5c4:	3b b7       	in	r19, 0x3b	; 59
     5c6:	8b bf       	out	0x3b, r24	; 59
     5c8:	cb 01       	movw	r24, r22
     5ca:	42 e2       	ldi	r20, 0x22	; 34
     5cc:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005d0 <SP_LoadFlashWord>:
     5d0:	3b b7       	in	r19, 0x3b	; 59
     5d2:	0b 01       	movw	r0, r22
     5d4:	43 e2       	ldi	r20, 0x23	; 35
     5d6:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005da <SP_WriteApplicationPage>:
     5da:	3b b7       	in	r19, 0x3b	; 59
     5dc:	8b bf       	out	0x3b, r24	; 59
     5de:	cb 01       	movw	r24, r22
     5e0:	44 e2       	ldi	r20, 0x24	; 36
     5e2:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005e6 <SP_EraseWriteApplicationPage>:
     5e6:	3b b7       	in	r19, 0x3b	; 59
     5e8:	8b bf       	out	0x3b, r24	; 59
     5ea:	cb 01       	movw	r24, r22
     5ec:	45 e2       	ldi	r20, 0x25	; 37
     5ee:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005f2 <SP_EraseFlashBuffer>:
     5f2:	3b b7       	in	r19, 0x3b	; 59
     5f4:	46 e2       	ldi	r20, 0x26	; 38
     5f6:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000005fa <SP_EraseBootPage>:
     5fa:	3b b7       	in	r19, 0x3b	; 59
     5fc:	8b bf       	out	0x3b, r24	; 59
     5fe:	cb 01       	movw	r24, r22
     600:	4a e2       	ldi	r20, 0x2A	; 42
     602:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000606 <SP_WriteBootPage>:
     606:	3b b7       	in	r19, 0x3b	; 59
     608:	8b bf       	out	0x3b, r24	; 59
     60a:	cb 01       	movw	r24, r22
     60c:	4c e2       	ldi	r20, 0x2C	; 44
     60e:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000612 <SP_EraseWriteBootPage>:
     612:	3b b7       	in	r19, 0x3b	; 59
     614:	8b bf       	out	0x3b, r24	; 59
     616:	cb 01       	movw	r24, r22
     618:	4d e2       	ldi	r20, 0x2D	; 45
     61a:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000061e <SP_ApplicationCRC>:
     61e:	48 e3       	ldi	r20, 0x38	; 56
     620:	11 c0       	rjmp	.+34     	; 0x644 <SP_CommonCMD>

00000622 <SP_BootCRC>:
     622:	49 e3       	ldi	r20, 0x39	; 57
     624:	0f c0       	rjmp	.+30     	; 0x644 <SP_CommonCMD>

00000626 <SP_LockSPM>:
     626:	28 ed       	ldi	r18, 0xD8	; 216
     628:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
     632:	08 95       	ret

00000634 <SP_WaitForSPM>:
     634:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
     638:	27 fd       	sbrc	r18, 7
     63a:	fc cf       	rjmp	.-8      	; 0x634 <SP_WaitForSPM>
     63c:	22 27       	eor	r18, r18
     63e:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     642:	08 95       	ret

00000644 <SP_CommonCMD>:
     644:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     648:	28 ed       	ldi	r18, 0xD8	; 216
     64a:	31 e0       	ldi	r19, 0x01	; 1
     64c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
     650:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
     654:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
     658:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
     65c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
     660:	99 27       	eor	r25, r25
     662:	08 95       	ret

00000664 <SP_CommonLPM>:
     664:	fc 01       	movw	r30, r24
     666:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
     66a:	84 91       	lpm	r24, Z
     66c:	08 95       	ret

0000066e <_Z9delay1secv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	8d e3       	ldi	r24, 0x3D	; 61
     672:	99 e4       	ldi	r25, 0x49	; 73
     674:	21 50       	subi	r18, 0x01	; 1
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	90 40       	sbci	r25, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <_Z9delay1secv+0x6>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <_Z9delay1secv+0x10>
     67e:	00 00       	nop
     680:	08 95       	ret

00000682 <_Z8delay_msj>:
}


void delay_ms(uint16_t ms)
{
	for(uint16_t i = 0; i < ms; i++)
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	69 f0       	breq	.+26     	; 0x6a0 <_Z8delay_msj+0x1e>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	ef e6       	ldi	r30, 0x6F	; 111
     68c:	f7 e1       	ldi	r31, 0x17	; 23
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <_Z8delay_msj+0xc>
     692:	00 c0       	rjmp	.+0      	; 0x694 <_Z8delay_msj+0x12>
     694:	00 00       	nop
     696:	2f 5f       	subi	r18, 0xFF	; 255
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	82 17       	cp	r24, r18
     69c:	93 07       	cpc	r25, r19
     69e:	a9 f7       	brne	.-22     	; 0x68a <_Z8delay_msj+0x8>
     6a0:	08 95       	ret

000006a2 <_Z11printNumberj>:



void printNumber(uint16_t num)
{
	USART_Transmit_Number(USARTD0, num);
     6a2:	bc 01       	movw	r22, r24
     6a4:	80 ea       	ldi	r24, 0xA0	; 160
     6a6:	99 e0       	ldi	r25, 0x09	; 9
     6a8:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_TransmitString(USARTD0, "\n\r");
     6ac:	61 e8       	ldi	r22, 0x81	; 129
     6ae:	73 e2       	ldi	r23, 0x23	; 35
     6b0:	80 ea       	ldi	r24, 0xA0	; 160
     6b2:	99 e0       	ldi	r25, 0x09	; 9
     6b4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
     6b8:	08 95       	ret

000006ba <_Z6invertj>:


uint16_t invert(uint16_t num)
{
	return -num;
}
     6ba:	91 95       	neg	r25
     6bc:	81 95       	neg	r24
     6be:	91 09       	sbc	r25, r1
     6c0:	08 95       	ret

000006c2 <_Z3addii>:



int16_t add(int16_t A, int16_t B)
{
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	9b 01       	movw	r18, r22
	long res = (long)A + B;
     6cc:	6c 01       	movw	r12, r24
     6ce:	09 2e       	mov	r0, r25
     6d0:	00 0c       	add	r0, r0
     6d2:	ee 08       	sbc	r14, r14
     6d4:	ff 08       	sbc	r15, r15
     6d6:	ab 01       	movw	r20, r22
     6d8:	77 0f       	add	r23, r23
     6da:	66 0b       	sbc	r22, r22
     6dc:	77 0b       	sbc	r23, r23
     6de:	4c 0d       	add	r20, r12
     6e0:	5d 1d       	adc	r21, r13
     6e2:	6e 1d       	adc	r22, r14
     6e4:	7f 1d       	adc	r23, r15

	if(res > 32767)
     6e6:	41 15       	cp	r20, r1
     6e8:	e0 e8       	ldi	r30, 0x80	; 128
     6ea:	5e 07       	cpc	r21, r30
     6ec:	61 05       	cpc	r22, r1
     6ee:	71 05       	cpc	r23, r1
     6f0:	44 f4       	brge	.+16     	; 0x702 <_Z3addii+0x40>
	return 32767;
	if(res < -32768)
     6f2:	41 15       	cp	r20, r1
     6f4:	50 48       	sbci	r21, 0x80	; 128
     6f6:	6f 4f       	sbci	r22, 0xFF	; 255
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	34 f0       	brlt	.+12     	; 0x708 <_Z3addii+0x46>
	return -32767;

	return (int16_t)res;
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	05 c0       	rjmp	.+10     	; 0x70c <_Z3addii+0x4a>
int16_t add(int16_t A, int16_t B)
{
	long res = (long)A + B;

	if(res > 32767)
	return 32767;
     702:	8f ef       	ldi	r24, 0xFF	; 255
     704:	9f e7       	ldi	r25, 0x7F	; 127
     706:	02 c0       	rjmp	.+4      	; 0x70c <_Z3addii+0x4a>
	if(res < -32768)
	return -32767;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <_Z8subtractii>:


int16_t subtract(int16_t A, int16_t B)
{
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	9b 01       	movw	r18, r22
	long res = (long)A - B;
     720:	ac 01       	movw	r20, r24
     722:	09 2e       	mov	r0, r25
     724:	00 0c       	add	r0, r0
     726:	66 0b       	sbc	r22, r22
     728:	77 0b       	sbc	r23, r23
     72a:	69 01       	movw	r12, r18
     72c:	03 2e       	mov	r0, r19
     72e:	00 0c       	add	r0, r0
     730:	ee 08       	sbc	r14, r14
     732:	ff 08       	sbc	r15, r15
     734:	4c 19       	sub	r20, r12
     736:	5d 09       	sbc	r21, r13
     738:	6e 09       	sbc	r22, r14
     73a:	7f 09       	sbc	r23, r15

	if(res > 32767)
     73c:	41 15       	cp	r20, r1
     73e:	e0 e8       	ldi	r30, 0x80	; 128
     740:	5e 07       	cpc	r21, r30
     742:	61 05       	cpc	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	44 f4       	brge	.+16     	; 0x758 <_Z8subtractii+0x42>
	return 32767;
	if(res < -32768)
     748:	41 15       	cp	r20, r1
     74a:	50 48       	sbci	r21, 0x80	; 128
     74c:	6f 4f       	sbci	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	34 f0       	brlt	.+12     	; 0x75e <_Z8subtractii+0x48>
	return -32767;

	return (int16_t)res;
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	05 c0       	rjmp	.+10     	; 0x762 <_Z8subtractii+0x4c>
int16_t subtract(int16_t A, int16_t B)
{
	long res = (long)A - B;

	if(res > 32767)
	return 32767;
     758:	8f ef       	ldi	r24, 0xFF	; 255
     75a:	9f e7       	ldi	r25, 0x7F	; 127
     75c:	02 c0       	rjmp	.+4      	; 0x762 <_Z8subtractii+0x4c>
	if(res < -32768)
	return -32767;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     762:	ff 90       	pop	r15
     764:	ef 90       	pop	r14
     766:	df 90       	pop	r13
     768:	cf 90       	pop	r12
     76a:	08 95       	ret

0000076c <_Z8multiplyii>:


int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;
     76c:	9c 01       	movw	r18, r24
     76e:	db 01       	movw	r26, r22
     770:	0e 94 79 2f 	call	0x5ef2	; 0x5ef2 <__mulhisi3>

	if(res > 32767)
     774:	61 15       	cp	r22, r1
     776:	20 e8       	ldi	r18, 0x80	; 128
     778:	72 07       	cpc	r23, r18
     77a:	81 05       	cpc	r24, r1
     77c:	91 05       	cpc	r25, r1
     77e:	4c f4       	brge	.+18     	; 0x792 <_Z8multiplyii+0x26>
	return 32767;
	if(res < -32768)
     780:	61 15       	cp	r22, r1
     782:	20 e8       	ldi	r18, 0x80	; 128
     784:	72 07       	cpc	r23, r18
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	82 07       	cpc	r24, r18
     78a:	92 07       	cpc	r25, r18
     78c:	2c f0       	brlt	.+10     	; 0x798 <_Z8multiplyii+0x2c>
	return -32767;

	return (int16_t)res;
     78e:	cb 01       	movw	r24, r22
     790:	08 95       	ret
int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;

	if(res > 32767)
	return 32767;
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	9f e7       	ldi	r25, 0x7F	; 127
     796:	08 95       	ret
	if(res < -32768)
	return -32767;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     79c:	08 95       	ret

0000079e <_Z6divideii>:


int16_t divide(int16_t A, int16_t B)
{
	return A / B;
     79e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
     7a2:	cb 01       	movw	r24, r22
}
     7a4:	08 95       	ret

000007a6 <_Z7isEqualii>:


bool isEqual(int16_t A, int16_t B)			{return A == B; }
     7a6:	21 e0       	ldi	r18, 0x01	; 1
     7a8:	86 17       	cp	r24, r22
     7aa:	97 07       	cpc	r25, r23
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <_Z7isEqualii+0xa>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	82 2f       	mov	r24, r18
     7b2:	08 95       	ret

000007b4 <_Z8isBiggerii>:
bool isBigger(int16_t A, int16_t B)			{return A > B;	}
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	68 17       	cp	r22, r24
     7b8:	79 07       	cpc	r23, r25
     7ba:	0c f0       	brlt	.+2      	; 0x7be <_Z8isBiggerii+0xa>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	82 2f       	mov	r24, r18
     7c0:	08 95       	ret

000007c2 <_Z9isSmallerii>:
bool isSmaller(int16_t A, int16_t B)		{return A < B;	}
     7c2:	21 e0       	ldi	r18, 0x01	; 1
     7c4:	86 17       	cp	r24, r22
     7c6:	97 07       	cpc	r25, r23
     7c8:	0c f0       	brlt	.+2      	; 0x7cc <_Z9isSmallerii+0xa>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	82 2f       	mov	r24, r18
     7ce:	08 95       	ret

000007d0 <_Z15isBiggerOrEqualii>:
bool isBiggerOrEqual(int16_t A, int16_t B)	{return A >= B;	}
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	86 17       	cp	r24, r22
     7d4:	97 07       	cpc	r25, r23
     7d6:	0c f4       	brge	.+2      	; 0x7da <_Z15isBiggerOrEqualii+0xa>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	82 2f       	mov	r24, r18
     7dc:	08 95       	ret

000007de <_Z16isSmallerOrEqualii>:
bool isSmallerOrEqual(int16_t A, int16_t B)	{return A <= B; }
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	68 17       	cp	r22, r24
     7e2:	79 07       	cpc	r23, r25
     7e4:	0c f4       	brge	.+2      	; 0x7e8 <_Z16isSmallerOrEqualii+0xa>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	82 2f       	mov	r24, r18
     7ea:	08 95       	ret

000007ec <_Z8logic_orbb>:

bool logic_or(bool A, bool B)	{return A || B; }
     7ec:	81 11       	cpse	r24, r1
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <_Z8logic_orbb+0x8>
     7f0:	86 2f       	mov	r24, r22
     7f2:	08 95       	ret
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	08 95       	ret

000007f8 <_Z9logic_andbb>:
bool logic_and(bool A, bool B)	{return A && B; }
     7f8:	81 11       	cpse	r24, r1
     7fa:	86 2f       	mov	r24, r22
     7fc:	08 95       	ret

000007fe <_Z9logic_xorbb>:
     7fe:	86 27       	eor	r24, r22
     800:	08 95       	ret

00000802 <_Z11hexToNibblec>:
	return (hexToNibble(h) << 4) | hexToNibble(l);
}

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
     802:	90 ed       	ldi	r25, 0xD0	; 208
     804:	98 0f       	add	r25, r24
     806:	9a 30       	cpi	r25, 0x0A	; 10
     808:	60 f0       	brcs	.+24     	; 0x822 <_Z11hexToNibblec+0x20>
	{
		return hex-'0';
	}
	else if(hex >= 'A' && hex <= 'F')
     80a:	9f eb       	ldi	r25, 0xBF	; 191
     80c:	98 0f       	add	r25, r24
     80e:	96 30       	cpi	r25, 0x06	; 6
     810:	10 f4       	brcc	.+4      	; 0x816 <_Z11hexToNibblec+0x14>
	{
		return hex-'A'+10;
     812:	87 53       	subi	r24, 0x37	; 55
     814:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
     816:	9f e9       	ldi	r25, 0x9F	; 159
     818:	98 0f       	add	r25, r24
     81a:	96 30       	cpi	r25, 0x06	; 6
     81c:	20 f4       	brcc	.+8      	; 0x826 <_Z11hexToNibblec+0x24>
	{
		return hex-'a'+10;
     81e:	87 55       	subi	r24, 0x57	; 87
     820:	08 95       	ret

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
	{
		return hex-'0';
     822:	89 2f       	mov	r24, r25
     824:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
	{
		return hex-'a'+10;
	}
	return 0xff;
     826:	8f ef       	ldi	r24, 0xFF	; 255
}
     828:	08 95       	ret

0000082a <_Z9hexToBytecc>:
 */ 

#include "Convert.h"

uint8_t hexToByte(char h, char l)
{
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	d6 2f       	mov	r29, r22
	return (hexToNibble(h) << 4) | hexToNibble(l);
     830:	0e 94 01 04 	call	0x802	; 0x802 <_Z11hexToNibblec>
     834:	c8 2f       	mov	r28, r24
     836:	8d 2f       	mov	r24, r29
     838:	0e 94 01 04 	call	0x802	; 0x802 <_Z11hexToNibblec>
     83c:	90 e1       	ldi	r25, 0x10	; 16
     83e:	c9 9f       	mul	r28, r25
     840:	90 01       	movw	r18, r0
     842:	11 24       	eor	r1, r1
}
     844:	82 2b       	or	r24, r18
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <_Z11resetDevicev>:
 #include "Programming.h"

void resetDevice()
{
	//disable interrupts
	asm("cli");
     84c:	f8 94       	cli
	// enable watchdog timer
	CCP = 0xD8;
     84e:	88 ed       	ldi	r24, 0xD8	; 216
     850:	84 bf       	out	0x34, r24	; 52
	WDT.CTRL = (1<< WDT_ENABLE_bp)| (1<<WDT_CEN_bp);
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     858:	ff cf       	rjmp	.-2      	; 0x858 <_Z11resetDevicev+0xc>

0000085a <_Z12programFlashhjhPh>:
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
}


void programFlash(uint8_t byteCount, uint16_t address, uint8_t recordType, uint8_t* data)
{
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	e8 2e       	mov	r14, r24
     868:	eb 01       	movw	r28, r22
     86a:	89 01       	movw	r16, r18
	static uint16_t previousAddress = 0xFFFF;
	static bool firstByte = true;

	if(recordType == EOF_RECORD)
     86c:	41 30       	cpi	r20, 0x01	; 1
     86e:	71 f5       	brne	.+92     	; 0x8cc <_Z12programFlashhjhPh+0x72>
	{
		// if the first byte has already been sent
		if(!firstByte)
     870:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     874:	81 11       	cpse	r24, r1
     876:	28 c0       	rjmp	.+80     	; 0x8c8 <_Z12programFlashhjhPh+0x6e>
		{
			// check if the address is within the blockly range
			if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     878:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     87c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     880:	90 58       	subi	r25, 0x80	; 128
     882:	8f 3f       	cpi	r24, 0xFF	; 255
     884:	9f 47       	sbci	r25, 0x7F	; 127
     886:	b0 f0       	brcs	.+44     	; 0x8b4 <_Z12programFlashhjhPh+0x5a>
			{
				USART_TransmitString(USARTD0, "\n\rFlash address:");
     888:	66 eb       	ldi	r22, 0xB6	; 182
     88a:	70 e2       	ldi	r23, 0x20	; 32
     88c:	80 ea       	ldi	r24, 0xA0	; 160
     88e:	99 e0       	ldi	r25, 0x09	; 9
     890:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
				USART_Transmit_Number(USARTD0, previousAddress);
     894:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     898:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     89c:	80 ea       	ldi	r24, 0xA0	; 160
     89e:	99 e0       	ldi	r25, 0x09	; 9
     8a0:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
				USART_TransmitString(USARTD0, " out of range\n\rResetting");
     8a4:	67 ec       	ldi	r22, 0xC7	; 199
     8a6:	70 e2       	ldi	r23, 0x20	; 32
     8a8:	80 ea       	ldi	r24, 0xA0	; 160
     8aa:	99 e0       	ldi	r25, 0x09	; 9
     8ac:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
				
				//USB_TransmitString("\n\rFlash address:");
				//USB_Transmit_Number(previousAddress);
				//USB_TransmitString(" out of range\n\rResetting");
				resetDevice();
     8b0:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
			}
			
			SP_WaitForSPM();	//wait for nvm module if busy
     8b4:	0e 94 1a 03 	call	0x634	; 0x634 <SP_WaitForSPM>
			SP_EraseWriteApplicationPage(previousAddress); //program page to flash
     8b8:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     8bc:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SP_EraseWriteApplicationPage>
		}
		// reset device
		resetDevice();
     8c8:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
	}
	else if(recordType == DATA_RECORD)
     8cc:	41 11       	cpse	r20, r1
     8ce:	56 c0       	rjmp	.+172    	; 0x97c <_Z12programFlashhjhPh+0x122>
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     8d0:	88 23       	and	r24, r24
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <_Z12programFlashhjhPh+0x7c>
     8d4:	53 c0       	rjmp	.+166    	; 0x97c <_Z12programFlashhjhPh+0x122>
     8d6:	f1 2c       	mov	r15, r1
		{
			// if address is in the another page than the last
			if(previousAddress/SPM_PAGESIZE != address/SPM_PAGESIZE)
     8d8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     8dc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     8e0:	ac 01       	movw	r20, r24
     8e2:	45 2f       	mov	r20, r21
     8e4:	55 27       	eor	r21, r21
     8e6:	46 95       	lsr	r20
     8e8:	9e 01       	movw	r18, r28
     8ea:	23 2f       	mov	r18, r19
     8ec:	33 27       	eor	r19, r19
     8ee:	26 95       	lsr	r18
     8f0:	42 17       	cp	r20, r18
     8f2:	53 07       	cpc	r21, r19
     8f4:	41 f1       	breq	.+80     	; 0x946 <_Z12programFlashhjhPh+0xec>
			{
				// if this isn't the first byte
				if(!firstByte)
     8f6:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     8fa:	21 11       	cpse	r18, r1
     8fc:	24 c0       	rjmp	.+72     	; 0x946 <_Z12programFlashhjhPh+0xec>
				{
					if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     8fe:	90 58       	subi	r25, 0x80	; 128
     900:	8f 3f       	cpi	r24, 0xFF	; 255
     902:	9f 47       	sbci	r25, 0x7F	; 127
     904:	b0 f0       	brcs	.+44     	; 0x932 <_Z12programFlashhjhPh+0xd8>
					{
						USART_TransmitString(USARTD0, "\n\rFlash address:");
     906:	66 eb       	ldi	r22, 0xB6	; 182
     908:	70 e2       	ldi	r23, 0x20	; 32
     90a:	80 ea       	ldi	r24, 0xA0	; 160
     90c:	99 e0       	ldi	r25, 0x09	; 9
     90e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
						USART_Transmit_Number(USARTD0, previousAddress);
     912:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     916:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     91a:	80 ea       	ldi	r24, 0xA0	; 160
     91c:	99 e0       	ldi	r25, 0x09	; 9
     91e:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
						USART_TransmitString(USARTD0, " out of range\n\rResetting");
     922:	67 ec       	ldi	r22, 0xC7	; 199
     924:	70 e2       	ldi	r23, 0x20	; 32
     926:	80 ea       	ldi	r24, 0xA0	; 160
     928:	99 e0       	ldi	r25, 0x09	; 9
     92a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
						
						//USB_TransmitString("\n\rFlash address:");
						//USB_Transmit_Number(previousAddress);
						//USB_TransmitString(" out of range\n\rResetting");
						
						resetDevice();
     92e:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
					}
					
					SP_WaitForSPM();
     932:	0e 94 1a 03 	call	0x634	; 0x634 <SP_WaitForSPM>
					SP_EraseWriteApplicationPage(previousAddress);
     936:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     93a:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <SP_EraseWriteApplicationPage>
				}
			}
			
			//load byte into temporary page buffer
			SP_WaitForSPM();
     946:	0e 94 1a 03 	call	0x634	; 0x634 <SP_WaitForSPM>
			SP_LoadFlashWord(address%SPM_PAGESIZE, ((uint16_t)data[i+1] << 8 | data[i]));
     94a:	f8 01       	movw	r30, r16
     94c:	ef 0d       	add	r30, r15
     94e:	f1 1d       	adc	r31, r1
     950:	61 81       	ldd	r22, Z+1	; 0x01
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	76 2f       	mov	r23, r22
     956:	66 27       	eor	r22, r22
     958:	80 81       	ld	r24, Z
     95a:	68 2b       	or	r22, r24
     95c:	ce 01       	movw	r24, r28
     95e:	91 70       	andi	r25, 0x01	; 1
     960:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <SP_LoadFlashWord>
				
			// track the programming state
			firstByte = false;
     964:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
			previousAddress = address;
     968:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__DATA_REGION_ORIGIN__>
     96c:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
			address+=2;
     970:	22 96       	adiw	r28, 0x02	; 2
		resetDevice();
	}
	else if(recordType == DATA_RECORD)
	{
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     972:	f3 94       	inc	r15
     974:	f3 94       	inc	r15
     976:	fe 14       	cp	r15, r14
     978:	08 f4       	brcc	.+2      	; 0x97c <_Z12programFlashhjhPh+0x122>
     97a:	ae cf       	rjmp	.-164    	; 0x8d8 <_Z12programFlashhjhPh+0x7e>
			previousAddress = address;
			address+=2;
		}
	}

     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <_Z14programHexLinePc>:
		programHexLine(buff);
	}
}

void programHexLine(char* line)
{
     98a:	5f 92       	push	r5
     98c:	6f 92       	push	r6
     98e:	7f 92       	push	r7
     990:	8f 92       	push	r8
     992:	9f 92       	push	r9
     994:	af 92       	push	r10
     996:	bf 92       	push	r11
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	60 97       	sbiw	r28, 0x10	; 16
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	5c 01       	movw	r10, r24
	cli();
     9b4:	f8 94       	cli
	// parse the line
	uint8_t byteCount	= hexToByte(line[1], line[2]);
     9b6:	fc 01       	movw	r30, r24
     9b8:	62 81       	ldd	r22, Z+2	; 0x02
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
     9bc:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9c0:	78 2e       	mov	r7, r24
	uint8_t address_H	= hexToByte(line[3], line[4]);
     9c2:	f5 01       	movw	r30, r10
     9c4:	64 81       	ldd	r22, Z+4	; 0x04
     9c6:	83 81       	ldd	r24, Z+3	; 0x03
     9c8:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9cc:	58 2e       	mov	r5, r24
	uint8_t address_L	= hexToByte(line[5], line[6]);
     9ce:	f5 01       	movw	r30, r10
     9d0:	66 81       	ldd	r22, Z+6	; 0x06
     9d2:	85 81       	ldd	r24, Z+5	; 0x05
     9d4:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9d8:	e8 2e       	mov	r14, r24
	uint8_t recordType	= hexToByte(line[7], line[8]);
     9da:	f5 01       	movw	r30, r10
     9dc:	60 85       	ldd	r22, Z+8	; 0x08
     9de:	87 81       	ldd	r24, Z+7	; 0x07
     9e0:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
     9e4:	68 2e       	mov	r6, r24

	uint8_t checksum = byteCount + address_H + address_L + recordType;
     9e6:	f7 2c       	mov	r15, r7
     9e8:	f5 0c       	add	r15, r5
     9ea:	fe 0c       	add	r15, r14
     9ec:	f8 0e       	add	r15, r24
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     9ee:	77 20       	and	r7, r7
     9f0:	f9 f0       	breq	.+62     	; 0xa30 <_Z14programHexLinePc+0xa6>
     9f2:	85 01       	movw	r16, r10
     9f4:	07 5f       	subi	r16, 0xF7	; 247
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	6c 01       	movw	r12, r24
     9fe:	88 24       	eor	r8, r8
     a00:	8a 94       	dec	r8
     a02:	87 0c       	add	r8, r7
     a04:	91 2c       	mov	r9, r1
     a06:	88 0c       	add	r8, r8
     a08:	99 1c       	adc	r9, r9
     a0a:	9b e0       	ldi	r25, 0x0B	; 11
     a0c:	89 0e       	add	r8, r25
     a0e:	91 1c       	adc	r9, r1
     a10:	8a 0c       	add	r8, r10
     a12:	9b 1c       	adc	r9, r11
	{
		uint8_t charOffset = 9+2*i;
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
     a14:	f8 01       	movw	r30, r16
     a16:	61 81       	ldd	r22, Z+1	; 0x01
     a18:	80 81       	ld	r24, Z
     a1a:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
		checksum += byte;
     a1e:	f8 0e       	add	r15, r24
		data[i] = byte;
     a20:	f6 01       	movw	r30, r12
     a22:	81 93       	st	Z+, r24
     a24:	6f 01       	movw	r12, r30
     a26:	0e 5f       	subi	r16, 0xFE	; 254
     a28:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t checksum = byteCount + address_H + address_L + recordType;
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     a2a:	08 15       	cp	r16, r8
     a2c:	19 05       	cpc	r17, r9
     a2e:	91 f7       	brne	.-28     	; 0xa14 <_Z14programHexLinePc+0x8a>
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
		checksum += byte;
		data[i] = byte;
	}

	checksum += hexToByte(line[9+2*byteCount],line[10+2*byteCount]);
     a30:	e7 2d       	mov	r30, r7
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	35 96       	adiw	r30, 0x05	; 5
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ea 0d       	add	r30, r10
     a3c:	fb 1d       	adc	r31, r11
     a3e:	df 01       	movw	r26, r30
     a40:	11 97       	sbiw	r26, 0x01	; 1
     a42:	60 81       	ld	r22, Z
     a44:	8c 91       	ld	r24, X
     a46:	0e 94 15 04 	call	0x82a	; 0x82a <_Z9hexToBytecc>
	
	if(checksum != 0)
     a4a:	8f 0d       	add	r24, r15
     a4c:	41 f0       	breq	.+16     	; 0xa5e <_Z14programHexLinePc+0xd4>
	{
		USART_TransmitString(USARTD0, "\n\rChecksum error while receiving program\n\rResetting");
     a4e:	60 ee       	ldi	r22, 0xE0	; 224
     a50:	70 e2       	ldi	r23, 0x20	; 32
     a52:	80 ea       	ldi	r24, 0xA0	; 160
     a54:	99 e0       	ldi	r25, 0x09	; 9
     a56:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("\n\rChecksum error while receiving program\n\rResetting");
		resetDevice();
     a5a:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
		return;
	}
	
	USART_TransmitString(USARTD0, "\r\nReceived: ");
     a5e:	64 e1       	ldi	r22, 0x14	; 20
     a60:	71 e2       	ldi	r23, 0x21	; 33
     a62:	80 ea       	ldi	r24, 0xA0	; 160
     a64:	99 e0       	ldi	r25, 0x09	; 9
     a66:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit(USARTD0, line, 11+2*byteCount);
     a6a:	47 2d       	mov	r20, r7
     a6c:	44 0f       	add	r20, r20
     a6e:	45 5f       	subi	r20, 0xF5	; 245
     a70:	b5 01       	movw	r22, r10
     a72:	80 ea       	ldi	r24, 0xA0	; 160
     a74:	99 e0       	ldi	r25, 0x09	; 9
     a76:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z14USART_TransmitR12USART_structPKch>
	
	//USB_TransmitString("\r\nReceived: ");
	//USB_Transmit(line, 11+2*byteCount);
		
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
     a7a:	6e 2d       	mov	r22, r14
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	75 29       	or	r23, r5
     a80:	9e 01       	movw	r18, r28
     a82:	2f 5f       	subi	r18, 0xFF	; 255
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	46 2d       	mov	r20, r6
     a88:	87 2d       	mov	r24, r7
     a8a:	0e 94 2d 04 	call	0x85a	; 0x85a <_Z12programFlashhjhPh>
}
     a8e:	60 96       	adiw	r28, 0x10	; 16
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	7f 90       	pop	r7
     aae:	6f 90       	pop	r6
     ab0:	5f 90       	pop	r5
     ab2:	08 95       	ret

00000ab4 <_Z17receiveHexFileUSBv>:
		break;
	}
}

void receiveHexFileUSB()
{
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	e2 97       	sbiw	r28, 0x32	; 50
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	6c 01       	movw	r12, r24
     ac8:	7e 01       	movw	r14, r28
     aca:	93 e3       	ldi	r25, 0x33	; 51
     acc:	e9 0e       	add	r14, r25
     ace:	f1 1c       	adc	r15, r1
     ad0:	86 01       	movw	r16, r12
	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
		{
			char c = USART_Receive(USARTD0);
     ad2:	80 ea       	ldi	r24, 0xA0	; 160
     ad4:	99 e0       	ldi	r25, 0x09	; 9
     ad6:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z13USART_ReceiveR12USART_struct>
     ada:	98 01       	movw	r18, r16
     adc:	2c 19       	sub	r18, r12
     ade:	3d 09       	sbc	r19, r13
			buff[i] = c;
     ae0:	f8 01       	movw	r30, r16
     ae2:	81 93       	st	Z+, r24
     ae4:	8f 01       	movw	r16, r30
			if(c == '\n')
     ae6:	8a 30       	cpi	r24, 0x0A	; 10
     ae8:	41 f4       	brne	.+16     	; 0xafa <_Z17receiveHexFileUSBv+0x46>
			{
				buff[i+1] = '\0';
     aea:	e2 e0       	ldi	r30, 0x02	; 2
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	ec 0f       	add	r30, r28
     af0:	fd 1f       	adc	r31, r29
     af2:	e2 0f       	add	r30, r18
     af4:	f3 1f       	adc	r31, r19
     af6:	10 82       	st	Z, r1
				break;
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <_Z17receiveHexFileUSBv+0x4c>
	char buff[50];

	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
     afa:	ee 15       	cp	r30, r14
     afc:	ff 05       	cpc	r31, r15
     afe:	49 f7       	brne	.-46     	; 0xad2 <_Z17receiveHexFileUSBv+0x1e>
			{
				buff[i+1] = '\0';
				break;
			}
		}
		programHexLine(buff);
     b00:	c6 01       	movw	r24, r12
     b02:	0e 94 c5 04 	call	0x98a	; 0x98a <_Z14programHexLinePc>

void receiveHexFileUSB()
{
	char buff[50];

	while(true)
     b06:	e4 cf       	rjmp	.-56     	; 0xad0 <_Z17receiveHexFileUSBv+0x1c>

00000b08 <_Z10getUsbBootv>:
	// let the watchdog time out
	while(true);
}

void getUsbBoot()
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	c0 e1       	ldi	r28, 0x10	; 16
     b12:	d7 e2       	ldi	r29, 0x27	; 39
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
	{
		if(USART_Available(USARTD0))
     b14:	80 ea       	ldi	r24, 0xA0	; 160
     b16:	99 e0       	ldi	r25, 0x09	; 9
     b18:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z15USART_AvailableR12USART_struct>
     b1c:	81 11       	cpse	r24, r1
     b1e:	0c c0       	rjmp	.+24     	; 0xb38 <_Z10getUsbBootv+0x30>
		{
			timeout = false;
			break;
		}
		if(TWI_RecievedAddress(TWIC))
     b20:	80 e8       	ldi	r24, 0x80	; 128
     b22:	94 e0       	ldi	r25, 0x04	; 4
     b24:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_Z19TWI_RecievedAddressR10TWI_struct>
     b28:	81 11       	cpse	r24, r1
     b2a:	22 c0       	rjmp	.+68     	; 0xb70 <_Z10getUsbBootv+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2c:	86 ef       	ldi	r24, 0xF6	; 246
     b2e:	8a 95       	dec	r24
     b30:	f1 f7       	brne	.-4      	; 0xb2e <_Z10getUsbBootv+0x26>
     b32:	21 97       	sbiw	r28, 0x01	; 1
void getUsbBoot()
{
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
     b34:	79 f7       	brne	.-34     	; 0xb14 <_Z10getUsbBootv+0xc>
     b36:	1c c0       	rjmp	.+56     	; 0xb70 <_Z10getUsbBootv+0x68>
     b38:	c1 e2       	ldi	r28, 0x21	; 33
     b3a:	d1 e2       	ldi	r29, 0x21	; 33
     b3c:	05 e2       	ldi	r16, 0x25	; 37
     b3e:	11 e2       	ldi	r17, 0x21	; 33
	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
	{
		char c = USART_Receive(USARTD0);
     b40:	80 ea       	ldi	r24, 0xA0	; 160
     b42:	99 e0       	ldi	r25, 0x09	; 9
     b44:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z13USART_ReceiveR12USART_struct>
		//USART0_Transmit(c);
		if(c != check[i])
     b48:	99 91       	ld	r25, Y+
     b4a:	89 13       	cpse	r24, r25
     b4c:	11 c0       	rjmp	.+34     	; 0xb70 <_Z10getUsbBootv+0x68>
	}

	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
     b4e:	c0 17       	cp	r28, r16
     b50:	d1 07       	cpc	r29, r17
     b52:	b1 f7       	brne	.-20     	; 0xb40 <_Z10getUsbBootv+0x38>
		if(c != check[i])
		return;
	}


	switch(USART_Receive(USARTD0))
     b54:	80 ea       	ldi	r24, 0xA0	; 160
     b56:	99 e0       	ldi	r25, 0x09	; 9
     b58:	0e 94 48 09 	call	0x1290	; 0x1290 <_Z13USART_ReceiveR12USART_struct>
     b5c:	85 35       	cpi	r24, 0x55	; 85
     b5e:	41 f4       	brne	.+16     	; 0xb70 <_Z10getUsbBootv+0x68>
	{
		case 'U':
		// upload hex file via usb
		USART_TransmitString(USARTD0,"Receiving program via UART\n\r");
     b60:	66 e2       	ldi	r22, 0x26	; 38
     b62:	71 e2       	ldi	r23, 0x21	; 33
     b64:	80 ea       	ldi	r24, 0xA0	; 160
     b66:	99 e0       	ldi	r25, 0x09	; 9
     b68:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		//USB_TransmitString("Receiving program via UART\n\r");
		receiveHexFileUSB();
     b6c:	0e 94 5a 05 	call	0xab4	; 0xab4 <_Z17receiveHexFileUSBv>
		break;
		default:
		break;
	}
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_Z17receiveHexFileI2CPFvvE>:
		programHexLine(buff);
	}
}

void receiveHexFileI2C(void (*cb)())
{
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	e2 97       	sbiw	r28, 0x32	; 50
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	8c 01       	movw	r16, r24
	char buff[50];

	while(true)
	{
		USART_TransmitString(USARTD0, "\n\rtest4\n\r");
     b8e:	63 e4       	ldi	r22, 0x43	; 67
     b90:	71 e2       	ldi	r23, 0x21	; 33
     b92:	80 ea       	ldi	r24, 0xA0	; 160
     b94:	99 e0       	ldi	r25, 0x09	; 9
     b96:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		// receive a line of the hex file
		TWI_ReceivePacket(TWIC,(uint8_t*)buff, 50);
     b9a:	42 e3       	ldi	r20, 0x32	; 50
     b9c:	be 01       	movw	r22, r28
     b9e:	6f 5f       	subi	r22, 0xFF	; 255
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	80 e8       	ldi	r24, 0x80	; 128
     ba4:	94 e0       	ldi	r25, 0x04	; 4
     ba6:	0e 94 65 07 	call	0xeca	; 0xeca <_Z17TWI_ReceivePacketR10TWI_structPhh>
		
		if(buff[0] == 's') { cb(); } //voer callback uit: stepper-test modus
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	83 37       	cpi	r24, 0x73	; 115
     bae:	11 f4       	brne	.+4      	; 0xbb4 <_Z17receiveHexFileI2CPFvvE+0x3a>
     bb0:	f8 01       	movw	r30, r16
     bb2:	19 95       	eicall
			
		if(buff[0] != ':')
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	8a 33       	cpi	r24, 0x3A	; 58
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <_Z17receiveHexFileI2CPFvvE+0x4e>
		{
			USART_TransmitString(USARTD0,"Error while receiving program");
     bba:	6d e4       	ldi	r22, 0x4D	; 77
     bbc:	71 e2       	ldi	r23, 0x21	; 33
     bbe:	80 ea       	ldi	r24, 0xA0	; 160
     bc0:	99 e0       	ldi	r25, 0x09	; 9
     bc2:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
			return;
     bc6:	0b c0       	rjmp	.+22     	; 0xbde <_Z17receiveHexFileI2CPFvvE+0x64>
		}
		USART_TransmitString(USARTD0,"test");
     bc8:	6b e6       	ldi	r22, 0x6B	; 107
     bca:	71 e2       	ldi	r23, 0x21	; 33
     bcc:	80 ea       	ldi	r24, 0xA0	; 160
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		programHexLine(buff);
     bd4:	ce 01       	movw	r24, r28
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	0e 94 c5 04 	call	0x98a	; 0x98a <_Z14programHexLinePc>

void receiveHexFileI2C(void (*cb)())
{
	char buff[50];

	while(true)
     bdc:	d8 cf       	rjmp	.-80     	; 0xb8e <_Z17receiveHexFileI2CPFvvE+0x14>
			return;
		}
		USART_TransmitString(USARTD0,"test");
		programHexLine(buff);
	}
}
     bde:	e2 96       	adiw	r28, 0x32	; 50
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	1f 91       	pop	r17
     bea:	0f 91       	pop	r16
     bec:	08 95       	ret

00000bee <_Z8SPI_InitR10SPI_struct>:
#include <util/delay.h>

void SPI_Init(SPI_struct &SPI)
{
	//enable SPI, Set master mode, 8MHz default Clock
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER0_bm;
     bee:	81 e5       	ldi	r24, 0x51	; 81
     bf0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     bf4:	08 95       	ret

00000bf6 <_Z14SPI_TrancieverR10SPI_structh>:
}

uint8_t SPI_Tranciever(SPI_struct &SPI, uint8_t data)
{
     bf6:	fc 01       	movw	r30, r24
	//load data into data buffer
	SPI.DATA = data;
     bf8:	63 83       	std	Z+3, r22	; 0x03
	//wait for transmit complete
	while (!(SPI.STATUS & (1<<SPI_IF_bp)));
     bfa:	92 81       	ldd	r25, Z+2	; 0x02
     bfc:	99 23       	and	r25, r25
     bfe:	ec f7       	brge	.-6      	; 0xbfa <_Z14SPI_TrancieverR10SPI_structh+0x4>
	
	//return received data
	return(SPI.DATA);		
     c00:	83 81       	ldd	r24, Z+3	; 0x03
}
     c02:	08 95       	ret

00000c04 <_Z11SS_set_highR11PORT_structh>:

void SS_set_high(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTSET = (1<<pin);
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_Z11SS_set_highR11PORT_structh+0xa>
     c0a:	22 0f       	add	r18, r18
     c0c:	33 1f       	adc	r19, r19
     c0e:	6a 95       	dec	r22
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <_Z11SS_set_highR11PORT_structh+0x6>
     c12:	fc 01       	movw	r30, r24
     c14:	25 83       	std	Z+5, r18	; 0x05
     c16:	fa e0       	ldi	r31, 0x0A	; 10
     c18:	fa 95       	dec	r31
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <_Z11SS_set_highR11PORT_structh+0x14>
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <_Z11SS_set_highR11PORT_structh+0x1a>
     c1e:	08 95       	ret

00000c20 <_Z10SS_set_lowR11PORT_structh>:
	_delay_us(1);
}

void SS_set_low(PORT_struct &PORT, uint8_t pin)
{
	PORT.OUTCLR = (1<<pin);
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <_Z10SS_set_lowR11PORT_structh+0xa>
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	6a 95       	dec	r22
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <_Z10SS_set_lowR11PORT_structh+0x6>
     c2e:	fc 01       	movw	r30, r24
     c30:	26 83       	std	Z+6, r18	; 0x06
     c32:	fa e0       	ldi	r31, 0x0A	; 10
     c34:	fa 95       	dec	r31
     c36:	f1 f7       	brne	.-4      	; 0xc34 <_Z10SS_set_lowR11PORT_structh+0x14>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <_Z10SS_set_lowR11PORT_structh+0x1a>
     c3a:	08 95       	ret

00000c3c <_Z12SPI_CAN_ReadR10SPI_structhh>:
	_delay_us(1);
}

uint8_t SPI_CAN_Read(SPI_struct &SPI, uint8_t address, uint8_t read_cmd)
{
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
     c44:	16 2f       	mov	r17, r22
	SPI_Tranciever(SPI, read_cmd);
     c46:	64 2f       	mov	r22, r20
     c48:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     c4c:	61 2f       	mov	r22, r17
     c4e:	ce 01       	movw	r24, r28
     c50:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	uint8_t data = SPI_Tranciever(SPI, 0x00);
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	ce 01       	movw	r24, r28
     c58:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	return data;
}
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <_Z13SPI_CAN_writeR10SPI_structhhh>:

void SPI_CAN_write(SPI_struct &SPI, uint8_t address, uint8_t data, uint8_t write_cmd)
{
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	ec 01       	movw	r28, r24
     c6e:	06 2f       	mov	r16, r22
     c70:	14 2f       	mov	r17, r20
	SPI_Tranciever(SPI, write_cmd);
     c72:	62 2f       	mov	r22, r18
     c74:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, address);
     c78:	60 2f       	mov	r22, r16
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
	SPI_Tranciever(SPI, data);
     c80:	61 2f       	mov	r22, r17
     c82:	ce 01       	movw	r24, r28
     c84:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z14SPI_TrancieverR10SPI_structh>
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>:
ISR(TWIF_TWIS_vect) { //slave
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
}


void TWI_HandleISR(void (*TxCallback)(), void (*RxCallback)(uint8_t), TWI_struct &TWI) {
     c92:	fc 01       	movw	r30, r24
	if((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp))) { //read operation
     c94:	da 01       	movw	r26, r20
     c96:	1a 96       	adiw	r26, 0x0a	; 10
     c98:	9c 91       	ld	r25, X
     c9a:	91 ff       	sbrs	r25, 1
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x14>
		if (!TxCallback) { return; } //callback is niet ingesteld
     c9e:	30 97       	sbiw	r30, 0x00	; 0
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		TxCallback();
     ca2:	19 95       	eicall
     ca4:	08 95       	ret
	} else { //write operation
		if (!RxCallback) { return; } //callback is niet ingesteld
     ca6:	61 15       	cp	r22, r1
     ca8:	71 05       	cpc	r23, r1
     caa:	21 f0       	breq	.+8      	; 0xcb4 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct+0x22>
		RxCallback(TWI.SLAVE.DATA); //ongetest
     cac:	fa 01       	movw	r30, r20
     cae:	84 85       	ldd	r24, Z+12	; 0x0c
     cb0:	fb 01       	movw	r30, r22
     cb2:	19 95       	eicall
     cb4:	08 95       	ret

00000cb6 <__vector_12>:
void (*TWIF_TxCallback)();
void (*TWIC_RxCallback)(uint8_t); //onReceive, data wordt/is ontvangen van master
void (*TWID_RxCallback)(uint8_t); //via callbacks ongetest
void (*TWIE_RxCallback)(uint8_t);
void (*TWIF_RxCallback)(uint8_t);
ISR(TWIC_TWIS_vect) { //slave
     cb6:	1f 92       	push	r1
     cb8:	0f 92       	push	r0
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	08 b6       	in	r0, 0x38	; 56
     cc2:	0f 92       	push	r0
     cc4:	18 be       	out	0x38, r1	; 56
     cc6:	09 b6       	in	r0, 0x39	; 57
     cc8:	0f 92       	push	r0
     cca:	19 be       	out	0x39, r1	; 57
     ccc:	0b b6       	in	r0, 0x3b	; 59
     cce:	0f 92       	push	r0
     cd0:	1b be       	out	0x3b, r1	; 59
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
	TWI_HandleISR(TWIC_TxCallback, TWIC_RxCallback, TWIC);
     cea:	60 91 eb 23 	lds	r22, 0x23EB	; 0x8023eb <TWIC_RxCallback>
     cee:	70 91 ec 23 	lds	r23, 0x23EC	; 0x8023ec <TWIC_RxCallback+0x1>
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	54 e0       	ldi	r21, 0x04	; 4
     cf6:	80 91 f3 23 	lds	r24, 0x23F3	; 0x8023f3 <TWIC_TxCallback>
     cfa:	90 91 f4 23 	lds	r25, 0x23F4	; 0x8023f4 <TWIC_TxCallback+0x1>
     cfe:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0b be       	out	0x3b, r0	; 59
     d1e:	0f 90       	pop	r0
     d20:	09 be       	out	0x39, r0	; 57
     d22:	0f 90       	pop	r0
     d24:	08 be       	out	0x38, r0	; 56
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <__vector_75>:
ISR(TWID_TWIS_vect) { //slave
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	08 b6       	in	r0, 0x38	; 56
     d3c:	0f 92       	push	r0
     d3e:	18 be       	out	0x38, r1	; 56
     d40:	09 b6       	in	r0, 0x39	; 57
     d42:	0f 92       	push	r0
     d44:	19 be       	out	0x39, r1	; 57
     d46:	0b b6       	in	r0, 0x3b	; 59
     d48:	0f 92       	push	r0
     d4a:	1b be       	out	0x3b, r1	; 59
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	ef 93       	push	r30
     d62:	ff 93       	push	r31
	TWI_HandleISR(TWID_TxCallback, TWID_RxCallback, TWID);
     d64:	60 91 e9 23 	lds	r22, 0x23E9	; 0x8023e9 <TWID_RxCallback>
     d68:	70 91 ea 23 	lds	r23, 0x23EA	; 0x8023ea <TWID_RxCallback+0x1>
     d6c:	40 e9       	ldi	r20, 0x90	; 144
     d6e:	54 e0       	ldi	r21, 0x04	; 4
     d70:	80 91 f1 23 	lds	r24, 0x23F1	; 0x8023f1 <TWID_TxCallback>
     d74:	90 91 f2 23 	lds	r25, 0x23F2	; 0x8023f2 <TWID_TxCallback+0x1>
     d78:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0b be       	out	0x3b, r0	; 59
     d98:	0f 90       	pop	r0
     d9a:	09 be       	out	0x39, r0	; 57
     d9c:	0f 90       	pop	r0
     d9e:	08 be       	out	0x38, r0	; 56
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_45>:
ISR(TWIE_TWIS_vect) { //slave
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	08 b6       	in	r0, 0x38	; 56
     db6:	0f 92       	push	r0
     db8:	18 be       	out	0x38, r1	; 56
     dba:	09 b6       	in	r0, 0x39	; 57
     dbc:	0f 92       	push	r0
     dbe:	19 be       	out	0x39, r1	; 57
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	1b be       	out	0x3b, r1	; 59
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
	TWI_HandleISR(TWIE_TxCallback, TWIE_RxCallback, TWIE);
     dde:	60 91 e7 23 	lds	r22, 0x23E7	; 0x8023e7 <TWIE_RxCallback>
     de2:	70 91 e8 23 	lds	r23, 0x23E8	; 0x8023e8 <TWIE_RxCallback+0x1>
     de6:	40 ea       	ldi	r20, 0xA0	; 160
     de8:	54 e0       	ldi	r21, 0x04	; 4
     dea:	80 91 ef 23 	lds	r24, 0x23EF	; 0x8023ef <TWIE_TxCallback>
     dee:	90 91 f0 23 	lds	r25, 0x23F0	; 0x8023f0 <TWIE_TxCallback+0x1>
     df2:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0b be       	out	0x3b, r0	; 59
     e12:	0f 90       	pop	r0
     e14:	09 be       	out	0x39, r0	; 57
     e16:	0f 90       	pop	r0
     e18:	08 be       	out	0x38, r0	; 56
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	0f 90       	pop	r0
     e20:	1f 90       	pop	r1
     e22:	18 95       	reti

00000e24 <__vector_106>:
ISR(TWIF_TWIS_vect) { //slave
     e24:	1f 92       	push	r1
     e26:	0f 92       	push	r0
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	0f 92       	push	r0
     e2c:	11 24       	eor	r1, r1
     e2e:	08 b6       	in	r0, 0x38	; 56
     e30:	0f 92       	push	r0
     e32:	18 be       	out	0x38, r1	; 56
     e34:	09 b6       	in	r0, 0x39	; 57
     e36:	0f 92       	push	r0
     e38:	19 be       	out	0x39, r1	; 57
     e3a:	0b b6       	in	r0, 0x3b	; 59
     e3c:	0f 92       	push	r0
     e3e:	1b be       	out	0x3b, r1	; 59
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
	TWI_HandleISR(TWIF_TxCallback, TWIF_RxCallback, TWIF);
     e58:	60 91 e5 23 	lds	r22, 0x23E5	; 0x8023e5 <TWIF_RxCallback>
     e5c:	70 91 e6 23 	lds	r23, 0x23E6	; 0x8023e6 <TWIF_RxCallback+0x1>
     e60:	40 eb       	ldi	r20, 0xB0	; 176
     e62:	54 e0       	ldi	r21, 0x04	; 4
     e64:	80 91 ed 23 	lds	r24, 0x23ED	; 0x8023ed <TWIF_TxCallback>
     e68:	90 91 ee 23 	lds	r25, 0x23EE	; 0x8023ee <TWIF_TxCallback+0x1>
     e6c:	0e 94 49 06 	call	0xc92	; 0xc92 <_Z13TWI_HandleISRPFvvEPFvhER10TWI_struct>
}
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	0f 90       	pop	r0
     e8a:	0b be       	out	0x3b, r0	; 59
     e8c:	0f 90       	pop	r0
     e8e:	09 be       	out	0x39, r0	; 57
     e90:	0f 90       	pop	r0
     e92:	08 be       	out	0x38, r0	; 56
     e94:	0f 90       	pop	r0
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	0f 90       	pop	r0
     e9a:	1f 90       	pop	r1
     e9c:	18 95       	reti

00000e9e <_Z8TWI_initR10TWI_struct>:
	}
}


void TWI_init(TWI_struct &TWI) //als slave
{
     e9e:	fc 01       	movw	r30, r24
	TWI.SLAVE.CTRLA = (1<<TWI_SLAVE_APIEN_bp)|(1<<TWI_SLAVE_ENABLE_bp)|(1<<TWI_SLAVE_PIEN_bp)|(1<<TWI_SLAVE_PMEN_bp);
     ea0:	8e e1       	ldi	r24, 0x1E	; 30
     ea2:	80 87       	std	Z+8, r24	; 0x08
	TWI.SLAVE.CTRLA |= (1<<TWI_SLAVE_DIEN_bp);
     ea4:	80 85       	ldd	r24, Z+8	; 0x08
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	80 87       	std	Z+8, r24	; 0x08

	//toegevoegd voor TWI_Write(), clear deze bits om het springen naar ISRs uit te schakelen
	TWI.SLAVE.CTRLA |= TWI_MASTER_INTLVL0_bm | TWI_MASTER_INTLVL1_bm; //enable port interrupt high level
     eaa:	80 85       	ldd	r24, Z+8	; 0x08
     eac:	80 6c       	ori	r24, 0xC0	; 192
     eae:	80 87       	std	Z+8, r24	; 0x08
     eb0:	08 95       	ret

00000eb2 <_Z19TWI_RecievedAddressR10TWI_struct>:


bool TWI_RecievedAddress(TWI_struct &TWI)
{
	//valid address received and write operation
	return ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)));
     eb2:	fc 01       	movw	r30, r24
     eb4:	22 85       	ldd	r18, Z+10	; 0x0a
     eb6:	26 ff       	sbrs	r18, 6
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <_Z19TWI_RecievedAddressR10TWI_struct+0x14>
     eba:	82 85       	ldd	r24, Z+10	; 0x0a
     ebc:	86 95       	lsr	r24
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	89 27       	eor	r24, r25
     ec4:	08 95       	ret
     ec6:	80 e0       	ldi	r24, 0x00	; 0
}
     ec8:	08 95       	ret

00000eca <_Z17TWI_ReceivePacketR10TWI_structPhh>:

//============================================================
//	RECEIVE PACKET : HVWI VERSIE
//============================================================
bool TWI_ReceivePacket(TWI_struct &TWI, uint8_t* buffer, uint8_t bufferLength) {
     eca:	fc 01       	movw	r30, r24
	//variabelen
	volatile static bool bResult;
	volatile static int i;
	//begin bij de eerste ontvangst databuffer index
	i=0;
     ecc:	10 92 e3 23 	sts	0x23E3, r1	; 0x8023e3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     ed0:	10 92 e4 23 	sts	0x23E4, r1	; 0x8023e4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
	//uitgangspunt: het correct ontvangen van data door de slave vanaf de master is niet gelukt
	bResult = false;
     ed4:	10 92 e2 23 	sts	0x23E2, r1	; 0x8023e2 <__data_end>
	//   TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm; //hier wordt een '1' weggeschreven in het APIF bit waardoor
	//                                       //dit bit wordt gewist(!), zie datasheet. Alle overige 0-bits
	//                                       //hebben geen invloed op de overige register bits inhoud(!)
	//----------------------------------------------------------------------------------------------------
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
     ed8:	80 e4       	ldi	r24, 0x40	; 64
     eda:	82 87       	std	Z+10, r24	; 0x0a
			break;
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     edc:	50 e0       	ldi	r21, 0x00	; 0
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     ede:	20 e8       	ldi	r18, 0x80	; 128
	//genereer een ack op het ontvangen adres, de master zal nu een eerste databyte zenden
	TWI.SLAVE.STATUS=TWI_SLAVE_APIF_bm;
	//voor altijd doe
	while ( true ) {
		//er is een door de master gegenereerde stop conditie gedetecteerd (want TWI_SLAVE_PIEN_bm in CTRLA is gezet)
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_APIF_bm ) {
     ee0:	82 85       	ldd	r24, Z+10	; 0x0a
     ee2:	86 ff       	sbrs	r24, 6
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <_Z17TWI_ReceivePacketR10TWI_structPhh+0x24>
			//meld een pass
			bResult = true ;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 e2 23 	sts	0x23E2, r24	; 0x8023e2 <__data_end>
			//verlaat de lus
			break;
     eec:	1b c0       	rjmp	.+54     	; 0xf24 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
		}//if
		//er is een databyte ontvangen
		if ( TWI.SLAVE.STATUS & TWI_SLAVE_DIF_bm ) {
     eee:	82 85       	ldd	r24, Z+10	; 0x0a
     ef0:	88 23       	and	r24, r24
     ef2:	b4 f7       	brge	.-20     	; 0xee0 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
			//er is nog ruimte in de ontvangst buffer
			if ( i <= bufferLength ) {
     ef4:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     ef8:	90 91 e4 23 	lds	r25, 0x23E4	; 0x8023e4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     efc:	48 17       	cp	r20, r24
     efe:	59 07       	cpc	r21, r25
     f00:	8c f0       	brlt	.+34     	; 0xf24 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x5a>
				//noteer het ontvangen databyte
				buffer[i++] = TWI.SLAVE.DATA;
     f02:	80 91 e3 23 	lds	r24, 0x23E3	; 0x8023e3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f06:	90 91 e4 23 	lds	r25, 0x23E4	; 0x8023e4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f0a:	dc 01       	movw	r26, r24
     f0c:	11 96       	adiw	r26, 0x01	; 1
     f0e:	a0 93 e3 23 	sts	0x23E3, r26	; 0x8023e3 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i>
     f12:	b0 93 e4 23 	sts	0x23E4, r27	; 0x8023e4 <_ZZ17TWI_ReceivePacketR10TWI_structPhhE1i+0x1>
     f16:	34 85       	ldd	r19, Z+12	; 0x0c
     f18:	db 01       	movw	r26, r22
     f1a:	a8 0f       	add	r26, r24
     f1c:	b9 1f       	adc	r27, r25
     f1e:	3c 93       	st	X, r19
			else {
				//verlaat de lus (met foutstatus)
				break;
			}//else
			//genereer een ack op het ontvangen databyte, de master zal nu eventueel een volgende databyte zenden
			TWI.SLAVE.STATUS=TWI_SLAVE_DIF_bm;
     f20:	22 87       	std	Z+10, r18	; 0x0a
     f22:	de cf       	rjmp	.-68     	; 0xee0 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x16>
		}//if
	}//while
	//rapporteer het resultaat
	return bResult ;
     f24:	80 91 e2 23 	lds	r24, 0x23E2	; 0x8023e2 <__data_end>
} //TWI_ReceivePacket
     f28:	08 95       	ret

00000f2a <_Z9TWI_WriteR10TWI_structh>:


bool TWI_Write(TWI_struct &TWI, uint8_t byte) //als slave
{
     f2a:	fc 01       	movw	r30, r24
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
     f2c:	82 85       	ldd	r24, Z+10	; 0x0a
     f2e:	86 ff       	sbrs	r24, 6
     f30:	fd cf       	rjmp	.-6      	; 0xf2c <_Z9TWI_WriteR10TWI_structh+0x2>

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
     f32:	82 85       	ldd	r24, Z+10	; 0x0a
     f34:	81 ff       	sbrs	r24, 1
     f36:	25 c0       	rjmp	.+74     	; 0xf82 <_Z9TWI_WriteR10TWI_structh+0x58>
		return false; //master write operation
	}

	while(1) {
		TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f38:	82 85       	ldd	r24, Z+10	; 0x0a
     f3a:	80 6c       	ori	r24, 0xC0	; 192
     f3c:	82 87       	std	Z+10, r24	; 0x0a

		TWI.SLAVE.DATA = byte;
     f3e:	64 87       	std	Z+12, r22	; 0x0c

		//acknowledge and send byte
		TWI.SLAVE.CTRLB &= ~(TWI_SLAVE_ACKACT_bm); //ACK
     f40:	81 85       	ldd	r24, Z+9	; 0x09
     f42:	8b 7f       	andi	r24, 0xFB	; 251
     f44:	81 87       	std	Z+9, r24	; 0x09
//		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp); //RESPONSE, er komen meer bytes	//<<< gebruik deze voor een toekomstige TWI_SendPacket functie
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD1_bp); //COMPLETE, enige byte wordt verzonden
     f46:	81 85       	ldd	r24, Z+9	; 0x09
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	81 87       	std	Z+9, r24	; 0x09

		//wait for transmission completed
		while(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIF_bp)) {
     f4c:	82 85       	ldd	r24, Z+10	; 0x0a
     f4e:	88 23       	and	r24, r24
     f50:	74 f4       	brge	.+28     	; 0xf6e <_Z9TWI_WriteR10TWI_structh+0x44>
			//check for collisions or bus errors
			if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_COLL_bp) || TWI.SLAVE.STATUS &(1<<TWI_SLAVE_BUSERR_bp)) {
     f52:	82 85       	ldd	r24, Z+10	; 0x0a
     f54:	83 fd       	sbrc	r24, 3
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <_Z9TWI_WriteR10TWI_structh+0x34>
     f58:	82 85       	ldd	r24, Z+10	; 0x0a
     f5a:	82 ff       	sbrs	r24, 2
     f5c:	f7 cf       	rjmp	.-18     	; 0xf4c <_Z9TWI_WriteR10TWI_structh+0x22>
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_BUSERR_bp); //clear buserror, collision is cleared automatically
     f5e:	82 85       	ldd	r24, Z+10	; 0x0a
     f60:	84 60       	ori	r24, 0x04	; 4
     f62:	82 87       	std	Z+10, r24	; 0x0a
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f64:	82 85       	ldd	r24, Z+10	; 0x0a
     f66:	80 6c       	ori	r24, 0xC0	; 192
     f68:	82 87       	std	Z+10, r24	; 0x0a
				return false;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret
     f6e:	80 e5       	ldi	r24, 0x50	; 80
     f70:	8a 95       	dec	r24
     f72:	f1 f7       	brne	.-4      	; 0xf70 <_Z9TWI_WriteR10TWI_structh+0x46>

		_delay_us(10);

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
     f74:	82 85       	ldd	r24, Z+10	; 0x0a
     f76:	86 ff       	sbrs	r24, 6
     f78:	df cf       	rjmp	.-66     	; 0xf38 <_Z9TWI_WriteR10TWI_structh+0xe>
     f7a:	82 85       	ldd	r24, Z+10	; 0x0a
     f7c:	80 fd       	sbrc	r24, 0
     f7e:	dc cf       	rjmp	.-72     	; 0xf38 <_Z9TWI_WriteR10TWI_structh+0xe>
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <_Z9TWI_WriteR10TWI_structh+0x5c>
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));

	//check if master read operation
	if( !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)) ) {
		return false; //master write operation
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret

//		if (TWI.SLAVE.STATUS &(1<<TWI_SLAVE_RXACK_bp)) {	//<<< op een of andere manier komt de NACK flag voorafgaand van de STOP conditie nooit aan bod
			//NACK, expect STOP or repeated START condition
			if ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_AP_bp))) {
				//received stop condition
				TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
     f86:	82 85       	ldd	r24, Z+10	; 0x0a
     f88:	80 6c       	ori	r24, 0xC0	; 192
     f8a:	82 87       	std	Z+10, r24	; 0x0a
				return true;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
			}
//		} //ACK, continue transmitting
	}
}
     f8e:	08 95       	ret

00000f90 <_Z13TWI_onRequestPFvvER10TWI_struct>:


//tx callbacks, set function call at interrupt
void TWI_onRequest(void (*f)(), TWI_struct &twi) {
	switch ((int) (&twi)) {
     f90:	60 39       	cpi	r22, 0x90	; 144
     f92:	24 e0       	ldi	r18, 0x04	; 4
     f94:	72 07       	cpc	r23, r18
     f96:	91 f0       	breq	.+36     	; 0xfbc <_Z13TWI_onRequestPFvvER10TWI_struct+0x2c>
     f98:	24 f4       	brge	.+8      	; 0xfa2 <_Z13TWI_onRequestPFvvER10TWI_struct+0x12>
     f9a:	60 38       	cpi	r22, 0x80	; 128
     f9c:	74 40       	sbci	r23, 0x04	; 4
     f9e:	49 f0       	breq	.+18     	; 0xfb2 <_Z13TWI_onRequestPFvvER10TWI_struct+0x22>
     fa0:	1c c0       	rjmp	.+56     	; 0xfda <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
     fa2:	60 3a       	cpi	r22, 0xA0	; 160
     fa4:	24 e0       	ldi	r18, 0x04	; 4
     fa6:	72 07       	cpc	r23, r18
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <_Z13TWI_onRequestPFvvER10TWI_struct+0x36>
     faa:	60 3b       	cpi	r22, 0xB0	; 176
     fac:	74 40       	sbci	r23, 0x04	; 4
     fae:	81 f0       	breq	.+32     	; 0xfd0 <_Z13TWI_onRequestPFvvER10TWI_struct+0x40>
     fb0:	14 c0       	rjmp	.+40     	; 0xfda <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_TxCallback = f; break;
     fb2:	80 93 f3 23 	sts	0x23F3, r24	; 0x8023f3 <TWIC_TxCallback>
     fb6:	90 93 f4 23 	sts	0x23F4, r25	; 0x8023f4 <TWIC_TxCallback+0x1>
     fba:	08 95       	ret
		case TWID_ptr: TWID_TxCallback = f; break;
     fbc:	80 93 f1 23 	sts	0x23F1, r24	; 0x8023f1 <TWID_TxCallback>
     fc0:	90 93 f2 23 	sts	0x23F2, r25	; 0x8023f2 <TWID_TxCallback+0x1>
     fc4:	08 95       	ret
		case TWIE_ptr: TWIE_TxCallback = f; break;
     fc6:	80 93 ef 23 	sts	0x23EF, r24	; 0x8023ef <TWIE_TxCallback>
     fca:	90 93 f0 23 	sts	0x23F0, r25	; 0x8023f0 <TWIE_TxCallback+0x1>
     fce:	08 95       	ret
		case TWIF_ptr: TWIF_TxCallback = f; break;
     fd0:	80 93 ed 23 	sts	0x23ED, r24	; 0x8023ed <TWIF_TxCallback>
     fd4:	90 93 ee 23 	sts	0x23EE, r25	; 0x8023ee <TWIF_TxCallback+0x1>
     fd8:	08 95       	ret
     fda:	ff cf       	rjmp	.-2      	; 0xfda <_Z13TWI_onRequestPFvvER10TWI_struct+0x4a>

00000fdc <_Z13TWI_onReceivePFvhER10TWI_struct>:
}


//rx callbacks, set function call at interrupt
void TWI_onReceive(void (*f)(uint8_t), TWI_struct &twi) {
	switch ((int) &twi) {
     fdc:	60 39       	cpi	r22, 0x90	; 144
     fde:	24 e0       	ldi	r18, 0x04	; 4
     fe0:	72 07       	cpc	r23, r18
     fe2:	91 f0       	breq	.+36     	; 0x1008 <_Z13TWI_onReceivePFvhER10TWI_struct+0x2c>
     fe4:	24 f4       	brge	.+8      	; 0xfee <_Z13TWI_onReceivePFvhER10TWI_struct+0x12>
     fe6:	60 38       	cpi	r22, 0x80	; 128
     fe8:	74 40       	sbci	r23, 0x04	; 4
     fea:	49 f0       	breq	.+18     	; 0xffe <_Z13TWI_onReceivePFvhER10TWI_struct+0x22>
     fec:	1c c0       	rjmp	.+56     	; 0x1026 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
     fee:	60 3a       	cpi	r22, 0xA0	; 160
     ff0:	24 e0       	ldi	r18, 0x04	; 4
     ff2:	72 07       	cpc	r23, r18
     ff4:	71 f0       	breq	.+28     	; 0x1012 <_Z13TWI_onReceivePFvhER10TWI_struct+0x36>
     ff6:	60 3b       	cpi	r22, 0xB0	; 176
     ff8:	74 40       	sbci	r23, 0x04	; 4
     ffa:	81 f0       	breq	.+32     	; 0x101c <_Z13TWI_onReceivePFvhER10TWI_struct+0x40>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>
		case TWIC_ptr: TWIC_RxCallback = f; break;
     ffe:	80 93 eb 23 	sts	0x23EB, r24	; 0x8023eb <TWIC_RxCallback>
    1002:	90 93 ec 23 	sts	0x23EC, r25	; 0x8023ec <TWIC_RxCallback+0x1>
    1006:	08 95       	ret
		case TWID_ptr: TWID_RxCallback = f; break;
    1008:	80 93 e9 23 	sts	0x23E9, r24	; 0x8023e9 <TWID_RxCallback>
    100c:	90 93 ea 23 	sts	0x23EA, r25	; 0x8023ea <TWID_RxCallback+0x1>
    1010:	08 95       	ret
		case TWIE_ptr: TWIE_RxCallback = f; break;
    1012:	80 93 e7 23 	sts	0x23E7, r24	; 0x8023e7 <TWIE_RxCallback>
    1016:	90 93 e8 23 	sts	0x23E8, r25	; 0x8023e8 <TWIE_RxCallback+0x1>
    101a:	08 95       	ret
		case TWIF_ptr: TWIF_RxCallback = f; break;
    101c:	80 93 e5 23 	sts	0x23E5, r24	; 0x8023e5 <TWIF_RxCallback>
    1020:	90 93 e6 23 	sts	0x23E6, r25	; 0x8023e6 <TWIF_RxCallback+0x1>
    1024:	08 95       	ret
    1026:	ff cf       	rjmp	.-2      	; 0x1026 <_Z13TWI_onReceivePFvhER10TWI_struct+0x4a>

00001028 <_Z10HexToASCIIh>:

#include "UART.h"

char HexToASCII(uint8_t i)
  {
	  i &= 0x0f;
    1028:	8f 70       	andi	r24, 0x0F	; 15
	  if(i > 9)
    102a:	8a 30       	cpi	r24, 0x0A	; 10
    102c:	10 f0       	brcs	.+4      	; 0x1032 <_Z10HexToASCIIh+0xa>
	  return i+'A'-10;
    102e:	89 5c       	subi	r24, 0xC9	; 201
    1030:	08 95       	ret
	  else
	  return i+'0';
    1032:	80 5d       	subi	r24, 0xD0	; 208
  }
    1034:	08 95       	ret

00001036 <_Z18USART_Set_BaudrateR12USART_structmm>:
 
 bool USART_Set_Baudrate(USART_struct &USART, uint32_t baud, uint32_t cpu_hz)
{
    1036:	4f 92       	push	r4
    1038:	5f 92       	push	r5
    103a:	6f 92       	push	r6
    103c:	7f 92       	push	r7
    103e:	8f 92       	push	r8
    1040:	9f 92       	push	r9
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	7c 01       	movw	r14, r24
    1052:	4a 01       	movw	r8, r20
    1054:	5b 01       	movw	r10, r22
    1056:	28 01       	movw	r4, r16
    1058:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    105a:	fc 01       	movw	r30, r24
    105c:	84 81       	ldd	r24, Z+4	; 0x04
    105e:	82 ff       	sbrs	r24, 2
    1060:	16 c0       	rjmp	.+44     	; 0x108e <_Z18USART_Set_BaudrateR12USART_structmm+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1062:	d9 01       	movw	r26, r18
    1064:	c8 01       	movw	r24, r16
    1066:	68 94       	set
    1068:	12 f8       	bld	r1, 2
    106a:	b6 95       	lsr	r27
    106c:	a7 95       	ror	r26
    106e:	97 95       	ror	r25
    1070:	87 95       	ror	r24
    1072:	16 94       	lsr	r1
    1074:	d1 f7       	brne	.-12     	; 0x106a <_Z18USART_Set_BaudrateR12USART_structmm+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1076:	b9 01       	movw	r22, r18
    1078:	a8 01       	movw	r20, r16
    107a:	03 2e       	mov	r0, r19
    107c:	36 e1       	ldi	r19, 0x16	; 22
    107e:	76 95       	lsr	r23
    1080:	67 95       	ror	r22
    1082:	57 95       	ror	r21
    1084:	47 95       	ror	r20
    1086:	3a 95       	dec	r19
    1088:	d1 f7       	brne	.-12     	; 0x107e <_Z18USART_Set_BaudrateR12USART_structmm+0x48>
    108a:	30 2d       	mov	r19, r0
    108c:	15 c0       	rjmp	.+42     	; 0x10b8 <_Z18USART_Set_BaudrateR12USART_structmm+0x82>

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    108e:	d9 01       	movw	r26, r18
    1090:	c8 01       	movw	r24, r16
    1092:	68 94       	set
    1094:	13 f8       	bld	r1, 3
    1096:	b6 95       	lsr	r27
    1098:	a7 95       	ror	r26
    109a:	97 95       	ror	r25
    109c:	87 95       	ror	r24
    109e:	16 94       	lsr	r1
    10a0:	d1 f7       	brne	.-12     	; 0x1096 <_Z18USART_Set_BaudrateR12USART_structmm+0x60>
		min_rate /= 2;
    10a2:	b9 01       	movw	r22, r18
    10a4:	a8 01       	movw	r20, r16
    10a6:	03 2e       	mov	r0, r19
    10a8:	37 e1       	ldi	r19, 0x17	; 23
    10aa:	76 95       	lsr	r23
    10ac:	67 95       	ror	r22
    10ae:	57 95       	ror	r21
    10b0:	47 95       	ror	r20
    10b2:	3a 95       	dec	r19
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <_Z18USART_Set_BaudrateR12USART_structmm+0x74>
    10b6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    10b8:	88 15       	cp	r24, r8
    10ba:	99 05       	cpc	r25, r9
    10bc:	aa 05       	cpc	r26, r10
    10be:	bb 05       	cpc	r27, r11
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <_Z18USART_Set_BaudrateR12USART_structmm+0x8e>
    10c2:	a6 c0       	rjmp	.+332    	; 0x1210 <_Z18USART_Set_BaudrateR12USART_structmm+0x1da>
    10c4:	84 16       	cp	r8, r20
    10c6:	95 06       	cpc	r9, r21
    10c8:	a6 06       	cpc	r10, r22
    10ca:	b7 06       	cpc	r11, r23
    10cc:	08 f4       	brcc	.+2      	; 0x10d0 <_Z18USART_Set_BaudrateR12USART_structmm+0x9a>
    10ce:	a2 c0       	rjmp	.+324    	; 0x1214 <_Z18USART_Set_BaudrateR12USART_structmm+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!(USART.CTRLB & USART_CLK2X_bm)) {
    10d0:	f7 01       	movw	r30, r14
    10d2:	84 81       	ldd	r24, Z+4	; 0x04
    10d4:	82 fd       	sbrc	r24, 2
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <_Z18USART_Set_BaudrateR12USART_structmm+0xaa>
		baud *= 2;
    10d8:	88 0c       	add	r8, r8
    10da:	99 1c       	adc	r9, r9
    10dc:	aa 1c       	adc	r10, r10
    10de:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    10e0:	c3 01       	movw	r24, r6
    10e2:	b2 01       	movw	r22, r4
    10e4:	a5 01       	movw	r20, r10
    10e6:	94 01       	movw	r18, r8
    10e8:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    10ec:	2f 3f       	cpi	r18, 0xFF	; 255
    10ee:	31 05       	cpc	r19, r1
    10f0:	41 05       	cpc	r20, r1
    10f2:	51 05       	cpc	r21, r1
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <_Z18USART_Set_BaudrateR12USART_structmm+0xc2>
    10f6:	90 c0       	rjmp	.+288    	; 0x1218 <_Z18USART_Set_BaudrateR12USART_structmm+0x1e2>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a0 e0       	ldi	r26, 0x00	; 0
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	c9 ef       	ldi	r28, 0xF9	; 249
    1102:	05 c0       	rjmp	.+10     	; 0x110e <_Z18USART_Set_BaudrateR12USART_structmm+0xd8>
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	4a 07       	cpc	r20, r26
    110a:	5b 07       	cpc	r21, r27
    110c:	58 f0       	brcs	.+22     	; 0x1124 <_Z18USART_Set_BaudrateR12USART_structmm+0xee>
			break;
		}

		limit <<= 1;
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	aa 1f       	adc	r26, r26
    1114:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1116:	cd 3f       	cpi	r28, 0xFD	; 253
    1118:	0c f4       	brge	.+2      	; 0x111c <_Z18USART_Set_BaudrateR12USART_structmm+0xe6>
			limit |= 1;
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    111e:	c7 30       	cpi	r28, 0x07	; 7
    1120:	89 f7       	brne	.-30     	; 0x1104 <_Z18USART_Set_BaudrateR12USART_structmm+0xce>
    1122:	4f c0       	rjmp	.+158    	; 0x11c2 <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1124:	cc 23       	and	r28, r28
    1126:	0c f0       	brlt	.+2      	; 0x112a <_Z18USART_Set_BaudrateR12USART_structmm+0xf4>
    1128:	4c c0       	rjmp	.+152    	; 0x11c2 <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    112a:	d5 01       	movw	r26, r10
    112c:	c4 01       	movw	r24, r8
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	aa 1f       	adc	r26, r26
    1134:	bb 1f       	adc	r27, r27
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	aa 1f       	adc	r26, r26
    113c:	bb 1f       	adc	r27, r27
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	48 1a       	sub	r4, r24
    1148:	59 0a       	sbc	r5, r25
    114a:	6a 0a       	sbc	r6, r26
    114c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    114e:	ce 3f       	cpi	r28, 0xFE	; 254
    1150:	f4 f4       	brge	.+60     	; 0x118e <_Z18USART_Set_BaudrateR12USART_structmm+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1152:	8d ef       	ldi	r24, 0xFD	; 253
    1154:	9f ef       	ldi	r25, 0xFF	; 255
    1156:	8c 1b       	sub	r24, r28
    1158:	91 09       	sbc	r25, r1
    115a:	c7 fd       	sbrc	r28, 7
    115c:	93 95       	inc	r25
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <_Z18USART_Set_BaudrateR12USART_structmm+0x132>
    1160:	44 0c       	add	r4, r4
    1162:	55 1c       	adc	r5, r5
    1164:	66 1c       	adc	r6, r6
    1166:	77 1c       	adc	r7, r7
    1168:	8a 95       	dec	r24
    116a:	d2 f7       	brpl	.-12     	; 0x1160 <_Z18USART_Set_BaudrateR12USART_structmm+0x12a>
    116c:	d5 01       	movw	r26, r10
    116e:	c4 01       	movw	r24, r8
    1170:	b6 95       	lsr	r27
    1172:	a7 95       	ror	r26
    1174:	97 95       	ror	r25
    1176:	87 95       	ror	r24
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	64 0d       	add	r22, r4
    117e:	75 1d       	adc	r23, r5
    1180:	86 1d       	adc	r24, r6
    1182:	97 1d       	adc	r25, r7
    1184:	a5 01       	movw	r20, r10
    1186:	94 01       	movw	r18, r8
    1188:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>
    118c:	37 c0       	rjmp	.+110    	; 0x11fc <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
		} else {
			baud <<= exp + 3;
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	8c 0f       	add	r24, r28
    1192:	a5 01       	movw	r20, r10
    1194:	94 01       	movw	r18, r8
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <_Z18USART_Set_BaudrateR12USART_structmm+0x16a>
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	44 1f       	adc	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	8a 95       	dec	r24
    11a2:	d2 f7       	brpl	.-12     	; 0x1198 <_Z18USART_Set_BaudrateR12USART_structmm+0x162>
			div = (cpu_hz + baud / 2) / baud;
    11a4:	da 01       	movw	r26, r20
    11a6:	c9 01       	movw	r24, r18
    11a8:	b6 95       	lsr	r27
    11aa:	a7 95       	ror	r26
    11ac:	97 95       	ror	r25
    11ae:	87 95       	ror	r24
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	64 0d       	add	r22, r4
    11b6:	75 1d       	adc	r23, r5
    11b8:	86 1d       	adc	r24, r6
    11ba:	97 1d       	adc	r25, r7
    11bc:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>
    11c0:	1d c0       	rjmp	.+58     	; 0x11fc <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	8c 0f       	add	r24, r28
    11c6:	a5 01       	movw	r20, r10
    11c8:	94 01       	movw	r18, r8
    11ca:	04 c0       	rjmp	.+8      	; 0x11d4 <_Z18USART_Set_BaudrateR12USART_structmm+0x19e>
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	44 1f       	adc	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	8a 95       	dec	r24
    11d6:	d2 f7       	brpl	.-12     	; 0x11cc <_Z18USART_Set_BaudrateR12USART_structmm+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    11d8:	da 01       	movw	r26, r20
    11da:	c9 01       	movw	r24, r18
    11dc:	b6 95       	lsr	r27
    11de:	a7 95       	ror	r26
    11e0:	97 95       	ror	r25
    11e2:	87 95       	ror	r24
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	64 0d       	add	r22, r4
    11ea:	75 1d       	adc	r23, r5
    11ec:	86 1d       	adc	r24, r6
    11ee:	97 1d       	adc	r25, r7
    11f0:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	31 09       	sbc	r19, r1
    11f8:	41 09       	sbc	r20, r1
    11fa:	51 09       	sbc	r21, r1
	}

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    11fc:	83 2f       	mov	r24, r19
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	c2 95       	swap	r28
    1202:	c0 7f       	andi	r28, 0xF0	; 240
    1204:	c8 2b       	or	r28, r24
    1206:	f7 01       	movw	r30, r14
    1208:	c7 83       	std	Z+7, r28	; 0x07
	USART.BAUDCTRLA = (uint8_t)div;
    120a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	18 c0       	rjmp	.+48     	; 0x1240 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	16 c0       	rjmp	.+44     	; 0x1240 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1218:	d5 01       	movw	r26, r10
    121a:	c4 01       	movw	r24, r8
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	aa 1f       	adc	r26, r26
    1222:	bb 1f       	adc	r27, r27
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	aa 1f       	adc	r26, r26
    122a:	bb 1f       	adc	r27, r27
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	48 1a       	sub	r4, r24
    1236:	59 0a       	sbc	r5, r25
    1238:	6a 0a       	sbc	r6, r26
    123a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    123c:	c9 ef       	ldi	r28, 0xF9	; 249
    123e:	89 cf       	rjmp	.-238    	; 0x1152 <_Z18USART_Set_BaudrateR12USART_structmm+0x11c>

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	USART.BAUDCTRLA = (uint8_t)div;

	return true;
}
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	5f 90       	pop	r5
    1258:	4f 90       	pop	r4
    125a:	08 95       	ret

0000125c <_Z10USART_InitR12USART_structmmb>:
 
 
 void USART_Init(USART_struct &USART, uint32_t baud, uint32_t cpu_hz, bool doubleSpeed)
 {	
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
	 /* Set baud rate */
	 USART_Set_Baudrate(USART, baud,cpu_hz);
    1266:	0e 94 1b 08 	call	0x1036	; 0x1036 <_Z18USART_Set_BaudrateR12USART_structmm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    126a:	8f e5       	ldi	r24, 0x5F	; 95
    126c:	9a ee       	ldi	r25, 0xEA	; 234
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <_Z10USART_InitR12USART_structmmb+0x12>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <_Z10USART_InitR12USART_structmmb+0x18>
    1274:	00 00       	nop
	 _delay_ms(10); // wait for stable clock
	 //USART.CTRLA = (1 << USART_RXCINTLVL0_bp)|(1 << USART_TXCINTLVL0_bp)|(1 << USART_DREINTLVL0_bp);
	 USART.CTRLB = (1 << USART_RXEN_bp)|(1 << USART_TXEN_bp); 
    1276:	88 e1       	ldi	r24, 0x18	; 24
    1278:	8c 83       	std	Y+4, r24	; 0x04
 }
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	08 95       	ret

00001284 <_Z14USART_TransmitR12USART_structc>:

void USART_Transmit(USART_struct &USART, const char data )
{
    1284:	fc 01       	movw	r30, r24
	/* Wait for empty transmit buffer */
	while ( !( USART.STATUS & (1<<USART_DREIF_bp)) );
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	95 ff       	sbrs	r25, 5
    128a:	fd cf       	rjmp	.-6      	; 0x1286 <_Z14USART_TransmitR12USART_structc+0x2>
	/* Put data into buffer, sends the data */
	USART.DATA = data;
    128c:	60 83       	st	Z, r22
    128e:	08 95       	ret

00001290 <_Z13USART_ReceiveR12USART_struct>:
}

char USART_Receive(USART_struct &USART)
{
    1290:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	while ( !(USART.STATUS & (1<<USART_RXCIF_bp)));
    1292:	91 81       	ldd	r25, Z+1	; 0x01
    1294:	99 23       	and	r25, r25
    1296:	ec f7       	brge	.-6      	; 0x1292 <_Z13USART_ReceiveR12USART_struct+0x2>
	/* Get and return received data from buffer */
	return USART.DATA;
    1298:	80 81       	ld	r24, Z
}
    129a:	08 95       	ret

0000129c <_Z13USART_ReceiveR12USART_structjRb>:

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
    129c:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    129e:	61 15       	cp	r22, r1
    12a0:	71 05       	cpc	r23, r1
    12a2:	99 f0       	breq	.+38     	; 0x12ca <_Z13USART_ReceiveR12USART_structjRb+0x2e>
	{
		if(USART.STATUS & (1<<USART_RXCIF_bp))
    12a4:	81 81       	ldd	r24, Z+1	; 0x01
    12a6:	88 23       	and	r24, r24
    12a8:	34 f0       	brlt	.+12     	; 0x12b6 <_Z13USART_ReceiveR12USART_structjRb+0x1a>
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	05 c0       	rjmp	.+10     	; 0x12ba <_Z13USART_ReceiveR12USART_structjRb+0x1e>
    12b0:	91 81       	ldd	r25, Z+1	; 0x01
    12b2:	99 23       	and	r25, r25
    12b4:	14 f4       	brge	.+4      	; 0x12ba <_Z13USART_ReceiveR12USART_structjRb+0x1e>
		{
			/* Get and return received data from buffer */
			return USART.DATA;
    12b6:	80 81       	ld	r24, Z
    12b8:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	8a 95       	dec	r24
    12be:	f1 f7       	brne	.-4      	; 0x12bc <_Z13USART_ReceiveR12USART_structjRb+0x20>
}

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    12c0:	2f 5f       	subi	r18, 0xFF	; 255
    12c2:	3f 4f       	sbci	r19, 0xFF	; 255
    12c4:	62 17       	cp	r22, r18
    12c6:	73 07       	cpc	r23, r19
    12c8:	99 f7       	brne	.-26     	; 0x12b0 <_Z13USART_ReceiveR12USART_structjRb+0x14>
		}

		_delay_us(1);
	}
	 
	isTimedOut = true;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	fa 01       	movw	r30, r20
    12ce:	80 83       	st	Z, r24
	return 0;
    12d0:	80 e0       	ldi	r24, 0x00	; 0
}
    12d2:	08 95       	ret

000012d4 <_Z15USART_AvailableR12USART_struct>:

 bool USART_Available(USART_struct &USART)
 {
	 return (USART.STATUS & (1<<USART_RXCIF_bp));
    12d4:	fc 01       	movw	r30, r24
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
 }
    12d8:	88 1f       	adc	r24, r24
    12da:	88 27       	eor	r24, r24
    12dc:	88 1f       	adc	r24, r24
    12de:	08 95       	ret

000012e0 <_Z20USART_TransmitStringR12USART_structPKc>:


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	fb 01       	movw	r30, r22
	 for(uint8_t i = 0; str[i]; i++)
    12ec:	60 81       	ld	r22, Z
    12ee:	66 23       	and	r22, r22
    12f0:	69 f0       	breq	.+26     	; 0x130c <_Z20USART_TransmitStringR12USART_structPKc+0x2c>
    12f2:	8f 01       	movw	r16, r30
    12f4:	7c 01       	movw	r14, r24
    12f6:	c0 e0       	ldi	r28, 0x00	; 0
	 USART_Transmit(USART, str[i]);
    12f8:	c7 01       	movw	r24, r14
    12fa:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
	 for(uint8_t i = 0; str[i]; i++)
    12fe:	cf 5f       	subi	r28, 0xFF	; 255
    1300:	f8 01       	movw	r30, r16
    1302:	ec 0f       	add	r30, r28
    1304:	f1 1d       	adc	r31, r1
    1306:	60 81       	ld	r22, Z
    1308:	61 11       	cpse	r22, r1
    130a:	f6 cf       	rjmp	.-20     	; 0x12f8 <_Z20USART_TransmitStringR12USART_structPKc+0x18>
	 USART_Transmit(USART, str[i]);
 }
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	08 95       	ret

00001318 <_Z14USART_TransmitR12USART_structPKch>:


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
	 for(uint8_t i = 0; i < length; i++)
    1324:	44 23       	and	r20, r20
    1326:	81 f0       	breq	.+32     	; 0x1348 <_Z14USART_TransmitR12USART_structPKch+0x30>
    1328:	7c 01       	movw	r14, r24
    132a:	eb 01       	movw	r28, r22
    132c:	41 50       	subi	r20, 0x01	; 1
    132e:	04 2f       	mov	r16, r20
    1330:	10 e0       	ldi	r17, 0x00	; 0
    1332:	0f 5f       	subi	r16, 0xFF	; 255
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	06 0f       	add	r16, r22
    1338:	17 1f       	adc	r17, r23
	 USART_Transmit(USART, buff[i]);
    133a:	69 91       	ld	r22, Y+
    133c:	c7 01       	movw	r24, r14
    133e:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
	 for(uint8_t i = 0; i < length; i++)
    1342:	c0 17       	cp	r28, r16
    1344:	d1 07       	cpc	r29, r17
    1346:	c9 f7       	brne	.-14     	; 0x133a <_Z14USART_TransmitR12USART_structPKch+0x22>
	 USART_Transmit(USART, buff[i]);
 }
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	08 95       	ret

00001356 <_Z18USART_Transmit_HexR12USART_structc>:

 
 void USART_Transmit_Hex(USART_struct &USART, const char data )
 {
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	ec 01       	movw	r28, r24
    135e:	16 2f       	mov	r17, r22
	 USART_TransmitString(USART, "0x");
    1360:	60 e7       	ldi	r22, 0x70	; 112
    1362:	71 e2       	ldi	r23, 0x21	; 33
    1364:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	 USART_Transmit(USART, HexToASCII(data>>4));
    1368:	81 2f       	mov	r24, r17
    136a:	82 95       	swap	r24
    136c:	8f 70       	andi	r24, 0x0F	; 15
    136e:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>
    1372:	68 2f       	mov	r22, r24
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	 USART_Transmit(USART, HexToASCII(data));
    137a:	81 2f       	mov	r24, r17
    137c:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>
    1380:	68 2f       	mov	r22, r24
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	08 95       	ret

00001390 <_Z21USART_Transmit_NumberR12USART_structi>:


 void USART_Transmit_Number(USART_struct &USART, int16_t num)
 {
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	8c 01       	movw	r16, r24
    139a:	eb 01       	movw	r28, r22
	 if(num < 0)
    139c:	dd 23       	and	r29, r29
    139e:	34 f4       	brge	.+12     	; 0x13ac <_Z21USART_Transmit_NumberR12USART_structi+0x1c>
	 {
		 num = -num;
    13a0:	d1 95       	neg	r29
    13a2:	c1 95       	neg	r28
    13a4:	d1 09       	sbc	r29, r1
		 USART_Transmit(USART, '-');
    13a6:	6d e2       	ldi	r22, 0x2D	; 45
    13a8:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	 }

	 bool started = false;
	 uint8_t ten_thousands	= (num/10000);
    13ac:	ce 01       	movw	r24, r28
    13ae:	60 e1       	ldi	r22, 0x10	; 16
    13b0:	77 e2       	ldi	r23, 0x27	; 39
    13b2:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	 if(ten_thousands > 0)
    13b6:	66 23       	and	r22, r22
    13b8:	31 f0       	breq	.+12     	; 0x13c6 <_Z21USART_Transmit_NumberR12USART_structi+0x36>
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
    13ba:	60 5d       	subi	r22, 0xD0	; 208
    13bc:	c8 01       	movw	r24, r16
    13be:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <_Z21USART_Transmit_NumberR12USART_structi+0x38>
	 {
		 num = -num;
		 USART_Transmit(USART, '-');
	 }

	 bool started = false;
    13c6:	20 e0       	ldi	r18, 0x00	; 0
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
		 started = true;
	 }

	 uint8_t thousands	= (num/1000)%10;
    13c8:	ce 01       	movw	r24, r28
    13ca:	68 ee       	ldi	r22, 0xE8	; 232
    13cc:	73 e0       	ldi	r23, 0x03	; 3
    13ce:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    13d2:	cb 01       	movw	r24, r22
    13d4:	6a e0       	ldi	r22, 0x0A	; 10
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	 if(thousands > 0)
    13dc:	88 23       	and	r24, r24
    13de:	81 f0       	breq	.+32     	; 0x1400 <_Z21USART_Transmit_NumberR12USART_structi+0x70>
	 {
		 USART_Transmit(USART, '0'+thousands);
    13e0:	60 e3       	ldi	r22, 0x30	; 48
    13e2:	68 0f       	add	r22, r24
    13e4:	c8 01       	movw	r24, r16
    13e6:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t hundreds	= (num/100)%10;
    13ea:	ce 01       	movw	r24, r28
    13ec:	64 e6       	ldi	r22, 0x64	; 100
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    13f4:	cb 01       	movw	r24, r22
    13f6:	6a e0       	ldi	r22, 0x0A	; 10
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    13fe:	0e c0       	rjmp	.+28     	; 0x141c <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1400:	ce 01       	movw	r24, r28
    1402:	64 e6       	ldi	r22, 0x64	; 100
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    140a:	cb 01       	movw	r24, r22
    140c:	6a e0       	ldi	r22, 0x0A	; 10
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	 if(hundreds > 0 || started)
    1414:	81 11       	cpse	r24, r1
    1416:	02 c0       	rjmp	.+4      	; 0x141c <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
    1418:	22 23       	and	r18, r18
    141a:	f9 f0       	breq	.+62     	; 0x145a <_Z21USART_Transmit_NumberR12USART_structi+0xca>
	 {
		 USART_Transmit(USART, '0'+hundreds);
    141c:	60 e3       	ldi	r22, 0x30	; 48
    141e:	68 0f       	add	r22, r24
    1420:	c8 01       	movw	r24, r16
    1422:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
    1426:	2a e0       	ldi	r18, 0x0A	; 10
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	ce 01       	movw	r24, r28
    142c:	b9 01       	movw	r22, r18
    142e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    1432:	cb 01       	movw	r24, r22
    1434:	b9 01       	movw	r22, r18
    1436:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	 if(tens > 0 || started)
	 {
		 USART_Transmit(USART, '0'+tens);
    143a:	60 e3       	ldi	r22, 0x30	; 48
    143c:	68 0f       	add	r22, r24
    143e:	c8 01       	movw	r24, r16
    1440:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
    1444:	ce 01       	movw	r24, r28
    1446:	6a e0       	ldi	r22, 0x0A	; 10
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    144e:	60 e3       	ldi	r22, 0x30	; 48
    1450:	68 0f       	add	r22, r24
    1452:	c8 01       	movw	r24, r16
    1454:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
 }
    1458:	0d c0       	rjmp	.+26     	; 0x1474 <_Z21USART_Transmit_NumberR12USART_structi+0xe4>
	 {
		 USART_Transmit(USART, '0'+hundreds);
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
    145a:	2a e0       	ldi	r18, 0x0A	; 10
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    1466:	cb 01       	movw	r24, r22
    1468:	b9 01       	movw	r22, r18
    146a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	 if(tens > 0 || started)
    146e:	88 23       	and	r24, r24
    1470:	49 f3       	breq	.-46     	; 0x1444 <_Z21USART_Transmit_NumberR12USART_structi+0xb4>
    1472:	e3 cf       	rjmp	.-58     	; 0x143a <_Z21USART_Transmit_NumberR12USART_structi+0xaa>
		 USART_Transmit(USART, '0'+tens);
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
 }
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	1f 91       	pop	r17
    147a:	0f 91       	pop	r16
    147c:	08 95       	ret

0000147e <_Z18USART_TransmitDoneR12USART_struct>:
 


bool USART_TransmitDone(USART_struct &USART)
{
	return USART.STATUS & (1<<USART_DREIF_bp);
    147e:	fc 01       	movw	r30, r24
    1480:	81 81       	ldd	r24, Z+1	; 0x01
}
    1482:	85 fb       	bst	r24, 5
    1484:	88 27       	eor	r24, r24
    1486:	80 f9       	bld	r24, 0
    1488:	08 95       	ret

0000148a <_Z12USB_Transmitc>:

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
    1490:	08 95       	ret

00001492 <_Z11USB_Receivev>:
}

char USB_Receive()
{
	// 	/* Wait for data to be received */
	while (!udi_cdc_is_rx_ready());
    1492:	0e 94 85 1b 	call	0x370a	; 0x370a <udi_cdc_is_rx_ready>
    1496:	88 23       	and	r24, r24
    1498:	e1 f3       	breq	.-8      	; 0x1492 <_Z11USB_Receivev>
	// 	/* Get and return received data from buffer */
	return udi_cdc_getc();
    149a:	0e 94 de 1b 	call	0x37bc	; 0x37bc <udi_cdc_getc>
}
    149e:	08 95       	ret

000014a0 <_Z11USB_ReceivejRb>:

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	8c 01       	movw	r16, r24
    14ae:	7b 01       	movw	r14, r22
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    14b0:	89 2b       	or	r24, r25
    14b2:	81 f0       	breq	.+32     	; 0x14d4 <_Z11USB_ReceivejRb+0x34>
    14b4:	c0 e0       	ldi	r28, 0x00	; 0
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(udi_cdc_is_rx_ready())
    14b8:	0e 94 85 1b 	call	0x370a	; 0x370a <udi_cdc_is_rx_ready>
    14bc:	88 23       	and	r24, r24
    14be:	19 f0       	breq	.+6      	; 0x14c6 <_Z11USB_ReceivejRb+0x26>
		{
			/* Get and return received data from buffer */
			return udi_cdc_getc();
    14c0:	0e 94 de 1b 	call	0x37bc	; 0x37bc <udi_cdc_getc>
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <_Z11USB_ReceivejRb+0x3c>
    14c6:	88 e0       	ldi	r24, 0x08	; 8
    14c8:	8a 95       	dec	r24
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <_Z11USB_ReceivejRb+0x28>
}

char USB_Receive(uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
    14cc:	21 96       	adiw	r28, 0x01	; 1
    14ce:	0c 17       	cp	r16, r28
    14d0:	1d 07       	cpc	r17, r29
    14d2:	91 f7       	brne	.-28     	; 0x14b8 <_Z11USB_ReceivejRb+0x18>
		}

		_delay_us(1);
	}
	
	isTimedOut = true;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	f7 01       	movw	r30, r14
    14d8:	80 83       	st	Z, r24
	return 0;
    14da:	80 e0       	ldi	r24, 0x00	; 0
}
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	ff 90       	pop	r15
    14e6:	ef 90       	pop	r14
    14e8:	08 95       	ret

000014ea <_Z13USB_Availablev>:

bool USB_Available()
{
	return (udi_cdc_is_tx_ready());
    14ea:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <udi_cdc_is_tx_ready>
}
    14ee:	08 95       	ret

000014f0 <_Z18USB_TransmitStringPKc>:


void USB_TransmitString(const char* str)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	fc 01       	movw	r30, r24
	for(uint8_t i = 0; str[i]; i++)
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	61 f0       	breq	.+24     	; 0x1516 <_Z18USB_TransmitStringPKc+0x26>
    14fe:	8f 01       	movw	r16, r30
    1500:	c0 e0       	ldi	r28, 0x00	; 0

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
}


void USB_TransmitString(const char* str)
{
	for(uint8_t i = 0; str[i]; i++)
    1508:	cf 5f       	subi	r28, 0xFF	; 255
    150a:	f8 01       	movw	r30, r16
    150c:	ec 0f       	add	r30, r28
    150e:	f1 1d       	adc	r31, r1
    1510:	80 81       	ld	r24, Z
    1512:	81 11       	cpse	r24, r1
    1514:	f6 cf       	rjmp	.-20     	; 0x1502 <_Z18USB_TransmitStringPKc+0x12>
	USB_Transmit(str[i]);
}
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <_Z12USB_TransmitPKch>:


void USB_Transmit(const char* buff, uint8_t length)
{
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
	for(uint8_t i = 0; i < length; i++)
    1526:	66 23       	and	r22, r22
    1528:	79 f0       	breq	.+30     	; 0x1548 <_Z12USB_TransmitPKch+0x2a>
    152a:	ec 01       	movw	r28, r24
    152c:	61 50       	subi	r22, 0x01	; 1
    152e:	06 2f       	mov	r16, r22
    1530:	10 e0       	ldi	r17, 0x00	; 0
    1532:	0f 5f       	subi	r16, 0xFF	; 255
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	08 0f       	add	r16, r24
    1538:	19 1f       	adc	r17, r25
	USB_Transmit(buff[i]);
    153a:	89 91       	ld	r24, Y+

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
}


void USB_Transmit(const char* buff, uint8_t length)
{
	for(uint8_t i = 0; i < length; i++)
    1542:	c0 17       	cp	r28, r16
    1544:	d1 07       	cpc	r29, r17
    1546:	c9 f7       	brne	.-14     	; 0x153a <_Z12USB_TransmitPKch+0x1c>
	USB_Transmit(buff[i]);
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <_Z16USB_Transmit_Hexc>:


void USB_Transmit_Hex(const char data )
{
    1552:	cf 93       	push	r28
    1554:	c8 2f       	mov	r28, r24
	USB_TransmitString("0x");
    1556:	80 e7       	ldi	r24, 0x70	; 112
    1558:	91 e2       	ldi	r25, 0x21	; 33
    155a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	USB_Transmit(HexToASCII(data>>4));
    155e:	8c 2f       	mov	r24, r28
    1560:	82 95       	swap	r24
    1562:	8f 70       	andi	r24, 0x0F	; 15
    1564:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>

void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
    156e:	8c 2f       	mov	r24, r28
    1570:	0e 94 14 08 	call	0x1028	; 0x1028 <_Z10HexToASCIIh>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
void USB_Transmit_Hex(const char data )
{
	USB_TransmitString("0x");
	USB_Transmit(HexToASCII(data>>4));
	USB_Transmit(HexToASCII(data));
}
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <_Z19USB_Transmit_Numberi>:


void USB_Transmit_Number(int16_t num)
{
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	ec 01       	movw	r28, r24
	if(num < 0)
    1584:	99 23       	and	r25, r25
    1586:	3c f4       	brge	.+14     	; 0x1596 <_Z19USB_Transmit_Numberi+0x18>
	{
		num = -num;
    1588:	d1 95       	neg	r29
    158a:	c1 95       	neg	r28
    158c:	d1 09       	sbc	r29, r1

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    158e:	8d e2       	ldi	r24, 0x2D	; 45
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
	uint8_t ten_thousands	= (num/10000);
    1596:	ce 01       	movw	r24, r28
    1598:	60 e1       	ldi	r22, 0x10	; 16
    159a:	77 e2       	ldi	r23, 0x27	; 39
    159c:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	if(ten_thousands > 0)
    15a0:	66 23       	and	r22, r22
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <_Z19USB_Transmit_Numberi+0x34>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15a4:	80 e3       	ldi	r24, 0x30	; 48
    15a6:	86 0f       	add	r24, r22
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
	bool started = false;
	uint8_t ten_thousands	= (num/10000);
	if(ten_thousands > 0)
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
    15ae:	21 e0       	ldi	r18, 0x01	; 1
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <_Z19USB_Transmit_Numberi+0x36>
	{
		num = -num;
		USB_Transmit('-');
	}

	bool started = false;
    15b2:	20 e0       	ldi	r18, 0x00	; 0
	{
		USB_Transmit('0'+ten_thousands);
		started = true;
	}

	uint8_t thousands	= (num/1000)%10;
    15b4:	ce 01       	movw	r24, r28
    15b6:	68 ee       	ldi	r22, 0xE8	; 232
    15b8:	73 e0       	ldi	r23, 0x03	; 3
    15ba:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    15be:	cb 01       	movw	r24, r22
    15c0:	6a e0       	ldi	r22, 0x0A	; 10
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	if(thousands > 0)
    15c8:	88 23       	and	r24, r24
    15ca:	79 f0       	breq	.+30     	; 0x15ea <_Z19USB_Transmit_Numberi+0x6c>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    15cc:	80 5d       	subi	r24, 0xD0	; 208
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
	{
		USB_Transmit('0'+thousands);
		started = true;
	}

	uint8_t hundreds	= (num/100)%10;
    15d4:	ce 01       	movw	r24, r28
    15d6:	64 e6       	ldi	r22, 0x64	; 100
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    15de:	cb 01       	movw	r24, r22
    15e0:	6a e0       	ldi	r22, 0x0A	; 10
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <_Z19USB_Transmit_Numberi+0x88>
    15ea:	ce 01       	movw	r24, r28
    15ec:	64 e6       	ldi	r22, 0x64	; 100
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    15f4:	cb 01       	movw	r24, r22
    15f6:	6a e0       	ldi	r22, 0x0A	; 10
    15f8:	70 e0       	ldi	r23, 0x00	; 0
    15fa:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	if(hundreds > 0 || started)
    15fe:	81 11       	cpse	r24, r1
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <_Z19USB_Transmit_Numberi+0x88>
    1602:	22 23       	and	r18, r18
    1604:	e1 f0       	breq	.+56     	; 0x163e <_Z19USB_Transmit_Numberi+0xc0>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1606:	80 5d       	subi	r24, 0xD0	; 208
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	ce 01       	movw	r24, r28
    1614:	b9 01       	movw	r22, r18
    1616:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    161a:	cb 01       	movw	r24, r22
    161c:	b9 01       	movw	r22, r18
    161e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>

void USB_Transmit(const char data )
{
	//while(!udi_cdc_is_tx_ready())
	//{
	udi_cdc_putc(data);
    1622:	80 5d       	subi	r24, 0xD0	; 208
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
    162a:	ce 01       	movw	r24, r28
    162c:	6a e0       	ldi	r22, 0x0A	; 10
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    1634:	80 5d       	subi	r24, 0xD0	; 208
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <udi_cdc_putc>
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    163c:	0d c0       	rjmp	.+26     	; 0x1658 <_Z19USB_Transmit_Numberi+0xda>
	{
		USB_Transmit('0'+hundreds);
		started = true;
	}

	uint8_t tens		= (num/10)%10;
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	ce 01       	movw	r24, r28
    1644:	b9 01       	movw	r22, r18
    1646:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
    164a:	cb 01       	movw	r24, r22
    164c:	b9 01       	movw	r22, r18
    164e:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <__divmodhi4>
	if(tens > 0 || started)
    1652:	88 23       	and	r24, r24
    1654:	51 f3       	breq	.-44     	; 0x162a <_Z19USB_Transmit_Numberi+0xac>
    1656:	e5 cf       	rjmp	.-54     	; 0x1622 <_Z19USB_Transmit_Numberi+0xa4>
		USB_Transmit('0'+tens);
		started = true;
	}
	
	USB_Transmit('0' + (num%10));
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <StopElevator>:
	}
}


/* blockly functie */
void StopElevator() {
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	1f 92       	push	r1
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	DEBUG_OUT("-----STOPPING ELEVATOR------ \n\r");
    166c:	63 e7       	ldi	r22, 0x73	; 115
    166e:	71 e2       	ldi	r23, 0x21	; 33
    1670:	80 ea       	ldi	r24, 0xA0	; 160
    1672:	99 e0       	ldi	r25, 0x09	; 9
    1674:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	uint16_t motor_id = ELEVATOR_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    1678:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1); // Stopt lift motor
    167a:	00 eb       	ldi	r16, 0xB0	; 176
    167c:	1a e0       	ldi	r17, 0x0A	; 10
    167e:	28 e0       	ldi	r18, 0x08	; 8
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	be 01       	movw	r22, r28
    1684:	6f 5f       	subi	r22, 0xFF	; 255
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8c e4       	ldi	r24, 0x4C	; 76
    168a:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    168e:	0f 90       	pop	r0
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <ElevatorIsReady>:


/* blockly functie */
bool ElevatorIsReady() {
    169a:	cf 93       	push	r28
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
    169c:	80 91 f7 23 	lds	r24, 0x23F7	; 0x8023f7 <elevatorDirection>
    16a0:	88 23       	and	r24, r24
    16a2:	29 f0       	breq	.+10     	; 0x16ae <ElevatorIsReady+0x14>
    16a4:	c0 91 f6 23 	lds	r28, 0x23F6	; 0x8023f6 <elevatorIsUp>
    16a8:	c1 11       	cpse	r28, r1
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <ElevatorIsReady+0x1e>
    16ac:	0a c0       	rjmp	.+20     	; 0x16c2 <ElevatorIsReady+0x28>
		StopElevator();
		return 1; // Lift is boven aangekomen
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
    16ae:	c0 91 f5 23 	lds	r28, 0x23F5	; 0x8023f5 <elevatorIsDown>
    16b2:	c1 11       	cpse	r28, r1
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <ElevatorIsReady+0x24>
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <ElevatorIsReady+0x28>

/* blockly functie */
bool ElevatorIsReady() {
	
	if ((elevatorDirection == 1) && (elevatorIsUp == true)) {
		StopElevator();
    16b8:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
		return 1; // Lift is boven aangekomen
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <ElevatorIsReady+0x28>
	}
	else if ((elevatorDirection == 0) && (elevatorIsDown == true)) {
		StopElevator();
    16be:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
		return 1; // Lift is beneden aangekomen
	}
	else {
		return 0; // Lift is nog bezig
	}
}
    16c2:	8c 2f       	mov	r24, r28
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <ElevatorButtonInISR>:
}


// ISR, switch is ingedrukt
void ElevatorButtonInISR(bool ElevatorIsUp) {
	if (ElevatorIsUp == elevatorDirection){ //Elevator stops moving if it reaches switch opposite to moving direction
    16c8:	90 91 f7 23 	lds	r25, 0x23F7	; 0x8023f7 <elevatorDirection>
    16cc:	98 13       	cpse	r25, r24
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <ElevatorButtonInISR+0x26>
		if(elevatorDirection == true){ //(ev_richting 1 = up, 0 = down)
    16d0:	99 23       	and	r25, r25
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <ElevatorButtonInISR+0x18>
			elevatorIsUp = true;
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <elevatorIsUp>
			elevatorIsDown = false;
    16da:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <elevatorIsDown>
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <ElevatorButtonInISR+0x22>
		}else { //(ev_richting 1 = up, 0 = down)
			elevatorIsUp = false;
    16e0:	10 92 f6 23 	sts	0x23F6, r1	; 0x8023f6 <elevatorIsUp>
			elevatorIsDown = true;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 f5 23 	sts	0x23F5, r24	; 0x8023f5 <elevatorIsDown>
		}
		StopElevator();
    16ea:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
    16ee:	08 95       	ret

000016f0 <ElevatorInit>:
	}
}

// Inputs voor de lift worden op Input-Pullup gezet
void ElevatorInit() {
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
	PORTK_DIR &= ~(EV_SWITCH_PIN_UP); // Set pin as input
    16f4:	e0 e2       	ldi	r30, 0x20	; 32
    16f6:	f7 e0       	ldi	r31, 0x07	; 7
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7e       	andi	r24, 0xEF	; 239
    16fc:	80 83       	st	Z, r24
	PORTK_DIR &= ~(EV_SWITCH_PIN_DOWN);
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7d       	andi	r24, 0xDF	; 223
    1702:	80 83       	st	Z, r24
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for DOWN\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for DOWN\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for DOWN\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for DOWN\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for DOWN\n\r"); break;
		case PIN5_bm: PORTK_PIN5CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN5CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN5CTRL for DOWN\n\r"); break;
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f7 e0       	ldi	r31, 0x07	; 7
    1708:	d8 e1       	ldi	r29, 0x18	; 24
    170a:	d0 83       	st	Z, r29
    170c:	c2 e0       	ldi	r28, 0x02	; 2
    170e:	c0 83       	st	Z, r28
    1710:	63 e9       	ldi	r22, 0x93	; 147
    1712:	71 e2       	ldi	r23, 0x21	; 33
    1714:	80 ea       	ldi	r24, 0xA0	; 160
    1716:	99 e0       	ldi	r25, 0x09	; 9
    1718:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	switch(EV_SWITCH_PIN_UP){
		case PIN0_bm: PORTK_PIN0CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN0CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN0CTRL for UP\n\r"); break;
		case PIN1_bm: PORTK_PIN1CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN1CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN1CTRL for UP\n\r"); break;
		case PIN2_bm: PORTK_PIN2CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN2CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN2CTRL for UP\n\r"); break;
		case PIN3_bm: PORTK_PIN3CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN3CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN3CTRL for UP\n\r"); break;
		case PIN4_bm: PORTK_PIN4CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN4CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN4CTRL for UP\n\r"); break;
    171c:	e4 e3       	ldi	r30, 0x34	; 52
    171e:	f7 e0       	ldi	r31, 0x07	; 7
    1720:	d0 83       	st	Z, r29
    1722:	c0 83       	st	Z, r28
    1724:	6b ea       	ldi	r22, 0xAB	; 171
    1726:	71 e2       	ldi	r23, 0x21	; 33
    1728:	80 ea       	ldi	r24, 0xA0	; 160
    172a:	99 e0       	ldi	r25, 0x09	; 9
    172c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		case PIN6_bm: PORTK_PIN6CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN6CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN6CTRL for UP\n\r"); break;
		case PIN7_bm: PORTK_PIN7CTRL = PORT_OPC_PULLUP_gc; PORTK_PIN7CTRL = PORT_ISC_FALLING_gc; USART_TransmitString(USARTD0, "Set PIN7CTRL for UP\n\r"); break;
		default: break;
	}

	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interrupt opwekkende pin, in het K register
    1730:	ea e2       	ldi	r30, 0x2A	; 42
    1732:	f7 e0       	ldi	r31, 0x07	; 7
    1734:	80 81       	ld	r24, Z
    1736:	80 61       	ori	r24, 0x10	; 16
    1738:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    173a:	80 81       	ld	r24, Z
    173c:	80 62       	ori	r24, 0x20	; 32
    173e:	80 83       	st	Z, r24


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    1740:	e9 e2       	ldi	r30, 0x29	; 41
    1742:	f7 e0       	ldi	r31, 0x07	; 7
    1744:	80 81       	ld	r24, Z
    1746:	81 60       	ori	r24, 0x01	; 1
    1748:	80 83       	st	Z, r24
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <ElevatorInterruptSetup>:


// Deprecated. Functionality moved to ElevatorInit()
void ElevatorInterruptSetup() {
	PORTK_INT0MASK |= EV_SWITCH_PIN_UP; // Stel pin in interreupt opwekkende pin, in het K register
    1750:	ea e2       	ldi	r30, 0x2A	; 42
    1752:	f7 e0       	ldi	r31, 0x07	; 7
    1754:	80 81       	ld	r24, Z
    1756:	80 61       	ori	r24, 0x10	; 16
    1758:	80 83       	st	Z, r24
	PORTK_INT0MASK |= EV_SWITCH_PIN_DOWN;
    175a:	80 81       	ld	r24, Z
    175c:	80 62       	ori	r24, 0x20	; 32
    175e:	80 83       	st	Z, r24

	PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; // Interupts op beide flanken
    1760:	e4 e3       	ldi	r30, 0x34	; 52
    1762:	f7 e0       	ldi	r31, 0x07	; 7
    1764:	80 81       	ld	r24, Z
    1766:	82 60       	ori	r24, 0x02	; 2
    1768:	80 83       	st	Z, r24
	PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc;
    176a:	e5 e3       	ldi	r30, 0x35	; 53
    176c:	f7 e0       	ldi	r31, 0x07	; 7
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	80 83       	st	Z, r24
	// 31-03-2021, Falling edges om gedrag daarvan te bestuderen


	PORTK_INTCTRL |= PORT_INT0LVL0_bm; // Enable PORTK INT0 as a Low-Level interrupt
    1774:	e9 e2       	ldi	r30, 0x29	; 41
    1776:	f7 e0       	ldi	r31, 0x07	; 7
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	80 83       	st	Z, r24
    177e:	08 95       	ret

00001780 <ConfigElevator>:

bool ConfigElevator(bool direction) {

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
    1780:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1784:	94 fd       	sbrc	r25, 4
    1786:	19 c0       	rjmp	.+50     	; 0x17ba <ConfigElevator+0x3a>
    1788:	81 11       	cpse	r24, r1
    178a:	1c c0       	rjmp	.+56     	; 0x17c4 <ConfigElevator+0x44>
    178c:	48 c0       	rjmp	.+144    	; 0x181e <ConfigElevator+0x9e>
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    178e:	81 11       	cpse	r24, r1
    1790:	21 c0       	rjmp	.+66     	; 0x17d4 <ConfigElevator+0x54>
    1792:	1c c0       	rjmp	.+56     	; 0x17cc <ConfigElevator+0x4c>
		elevatorIsDown = true;
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    1794:	90 91 f5 23 	lds	r25, 0x23F5	; 0x8023f5 <elevatorIsDown>
    1798:	91 11       	cpse	r25, r1
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <ConfigElevator+0x36>
    179c:	1f c0       	rjmp	.+62     	; 0x17dc <ConfigElevator+0x5c>
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    179e:	81 11       	cpse	r24, r1
    17a0:	43 c0       	rjmp	.+134    	; 0x1828 <ConfigElevator+0xa8>
    17a2:	25 c0       	rjmp	.+74     	; 0x17ee <ConfigElevator+0x6e>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    17a4:	88 23       	and	r24, r24
    17a6:	59 f1       	breq	.+86     	; 0x17fe <ConfigElevator+0x7e>
    17a8:	26 c0       	rjmp	.+76     	; 0x17f6 <ConfigElevator+0x76>
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    17aa:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17ae:	85 fd       	sbrc	r24, 5
    17b0:	2c c0       	rjmp	.+88     	; 0x180a <ConfigElevator+0x8a>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	08 95       	ret
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	08 95       	ret

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    17ba:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17be:	95 ff       	sbrs	r25, 5
    17c0:	e6 cf       	rjmp	.-52     	; 0x178e <ConfigElevator+0xe>
    17c2:	08 c0       	rjmp	.+16     	; 0x17d4 <ConfigElevator+0x54>
bool ConfigElevator(bool direction) {

	bool start = 0;

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <elevatorIsUp>
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <ConfigElevator+0x9a>
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
		elevatorIsDown = true;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	80 93 f5 23 	sts	0x23F5, r24	; 0x8023f5 <elevatorIsDown>
    17d2:	23 c0       	rjmp	.+70     	; 0x181a <ConfigElevator+0x9a>
		start = 0; // Lift mag niet starten, want wil naar beneden en is al beneden
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
    17d4:	90 91 f6 23 	lds	r25, 0x23F6	; 0x8023f6 <elevatorIsUp>
    17d8:	91 11       	cpse	r25, r1
    17da:	dc cf       	rjmp	.-72     	; 0x1794 <ConfigElevator+0x14>
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
    17dc:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17e0:	94 ff       	sbrs	r25, 4
    17e2:	dd cf       	rjmp	.-70     	; 0x179e <ConfigElevator+0x1e>
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    17e4:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    17e8:	95 ff       	sbrs	r25, 5
    17ea:	dc cf       	rjmp	.-72     	; 0x17a4 <ConfigElevator+0x24>
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <ConfigElevator+0x7e>
	}
	else if ((elevatorIsUp == true) && (elevatorIsDown == true)) {
		start = 0; // Lift mag niet starten, want is boven en beneden, ERROR!!!
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	80 93 f6 23 	sts	0x23F6, r24	; 0x8023f6 <elevatorIsUp>
    17f4:	0e c0       	rjmp	.+28     	; 0x1812 <ConfigElevator+0x92>
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	80 93 f5 23 	sts	0x23F5, r24	; 0x8023f5 <elevatorIsDown>
    17fc:	0a c0       	rjmp	.+20     	; 0x1812 <ConfigElevator+0x92>
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
    17fe:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1802:	84 fd       	sbrc	r24, 4
    1804:	d2 cf       	rjmp	.-92     	; 0x17aa <ConfigElevator+0x2a>
	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
		return 1; // Lift mag starten
	}
	else {
		return 0; // Lift mag niet starten
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	08 95       	ret
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
		elevatorIsDown = true;
		start = 1; // Lift mag starten, want wil naar boven en is beneden
	}
	else if ((PORTK_IN & EV_SWITCH_PIN_UP) && (PORTK_IN & EV_SWITCH_PIN_DOWN)) {
		elevatorIsUp = false;
    180a:	10 92 f6 23 	sts	0x23F6, r1	; 0x8023f6 <elevatorIsUp>
		elevatorIsDown = false;
    180e:	10 92 f5 23 	sts	0x23F5, r1	; 0x8023f5 <elevatorIsDown>
	}

	

	if (start == 1) {
		ElevatorInterruptSetup(); // Pinnen worden ingesteld om interrupts te kunnen genereren 
    1812:	0e 94 a8 0b 	call	0x1750	; 0x1750 <ElevatorInterruptSetup>
		return 1; // Lift mag starten
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	08 95       	ret
	}
	else {
		return 0; // Lift mag niet starten
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	08 95       	ret

	if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 1)) {
		elevatorIsUp = true;
		start = 0; // Lift mag niet starten, want wil naar boven en is al boven
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 0)) {
    181e:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1822:	95 ff       	sbrs	r25, 5
    1824:	d3 cf       	rjmp	.-90     	; 0x17cc <ConfigElevator+0x4c>
    1826:	d6 cf       	rjmp	.-84     	; 0x17d4 <ConfigElevator+0x54>
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_UP) && (direction == 0)) {
		elevatorIsUp = true;
		start = 1; // Lift mag starten, want is boven en wil naar beneden
	}
	else if (!(PORTK_IN & EV_SWITCH_PIN_DOWN) && (direction == 1)) {
    1828:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    182c:	85 ff       	sbrs	r24, 5
    182e:	e3 cf       	rjmp	.-58     	; 0x17f6 <ConfigElevator+0x76>
    1830:	e6 cf       	rjmp	.-52     	; 0x17fe <ConfigElevator+0x7e>

00001832 <MoveElevator>:

bool elevatorDirection;							// Richting van de lift
volatile bool elevatorIsUp, elevatorIsDown;	// Boleans om de stand van de lift bij te houden

/* blockly functie */
void MoveElevator(bool direction) {
    1832:	ff 92       	push	r15
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	28 97       	sbiw	r28, 0x08	; 8
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	f8 2e       	mov	r15, r24
	elevatorDirection = !direction;//if up is called the elevator moves down, this is fixed using the !
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	8f 25       	eor	r24, r15
    184c:	80 93 f7 23 	sts	0x23F7, r24	; 0x8023f7 <elevatorDirection>
	if (ConfigElevator(!direction)) {
    1850:	0e 94 c0 0b 	call	0x1780	; 0x1780 <ConfigElevator>
    1854:	88 23       	and	r24, r24
    1856:	49 f1       	breq	.+82     	; 0x18aa <MoveElevator+0x78>
		DEBUG_OUT("-----MOVING ELEVATOR------ \n\r");
    1858:	61 ec       	ldi	r22, 0xC1	; 193
    185a:	71 e2       	ldi	r23, 0x21	; 33
    185c:	80 ea       	ldi	r24, 0xA0	; 160
    185e:	99 e0       	ldi	r25, 0x09	; 9
    1860:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		
		uint16_t motor_id = ELEVATOR_MOTOR_ID; // Motor ID van lift
		bool Direction = direction;

		char directiondata[] = { Direction };
    1864:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    1866:	00 eb       	ldi	r16, 0xB0	; 176
    1868:	1a e0       	ldi	r17, 0x0A	; 10
    186a:	28 e0       	ldi	r18, 0x08	; 8
    186c:	41 e0       	ldi	r20, 0x01	; 1
    186e:	be 01       	movw	r22, r28
    1870:	68 5f       	subi	r22, 0xF8	; 248
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8a e4       	ldi	r24, 0x4A	; 74
    1876:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { 0x03,0x66,0xFF,0xFF,Direction,MOTOR_STEP_HALF,MOTOR_ON };
    187a:	be 01       	movw	r22, r28
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	87 e0       	ldi	r24, 0x07	; 7
    1882:	fb 01       	movw	r30, r22
    1884:	11 92       	st	Z+, r1
    1886:	8a 95       	dec	r24
    1888:	e9 f7       	brne	.-6      	; 0x1884 <MoveElevator+0x52>
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	86 e6       	ldi	r24, 0x66	; 102
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	8c 83       	std	Y+4, r24	; 0x04
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	8e 83       	std	Y+6, r24	; 0x06
    189c:	8f 83       	std	Y+7, r24	; 0x07
    189e:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    18a0:	28 e0       	ldi	r18, 0x08	; 8
    18a2:	47 e0       	ldi	r20, 0x07	; 7
    18a4:	86 e4       	ldi	r24, 0x46	; 70
    18a6:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    18aa:	28 96       	adiw	r28, 0x08	; 8
    18ac:	cd bf       	out	0x3d, r28	; 61
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	08 95       	ret

000018bc <_Z11gpioSetModeh9gpioModes>:


void gpioSetMode(uint8_t pin, gpioModes_t mode)
{
	//Set the PORTK Direction register using the DIRSET and DIRCLR register
	if(mode == GPIO_MODE_INPUT){
    18bc:	61 11       	cpse	r22, r1
    18be:	03 c0       	rjmp	.+6      	; 0x18c6 <_Z11gpioSetModeh9gpioModes+0xa>
		//Write PORTK_DIR bit 'pin' to 0
		PORTK_DIRCLR = pin;
    18c0:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <__TEXT_REGION_LENGTH__+0x700722>
    18c4:	08 95       	ret
	}
	else if(mode == GPIO_MODE_OUTPUT){
    18c6:	61 30       	cpi	r22, 0x01	; 1
    18c8:	11 f4       	brne	.+4      	; 0x18ce <_Z11gpioSetModeh9gpioModes+0x12>
		PORTK_DIRSET = pin;
    18ca:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <__TEXT_REGION_LENGTH__+0x700721>
    18ce:	08 95       	ret

000018d0 <_Z12gpioSetLevelhb>:
}

void gpioSetLevel(uint8_t pin, bool level)
{
	//Set the output level of PORTK using the OUTSET and OUTCLR register
	if(level){
    18d0:	66 23       	and	r22, r22
    18d2:	19 f0       	breq	.+6      	; 0x18da <_Z12gpioSetLevelhb+0xa>
		PORTK_OUTSET = pin;
    18d4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    18d8:	08 95       	ret
	}
	else{
		PORTK_OUTCLR = pin;
    18da:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
    18de:	08 95       	ret

000018e0 <_Z12gpioGetLevelh>:
}

bool gpioGetLevel(uint8_t pin)
{
	
	return ((PORTK_IN & pin) ? 1 : 0);
    18e0:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    18e4:	98 23       	and	r25, r24
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <_Z12gpioGetLevelh+0xc>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
}
    18ec:	08 95       	ret

000018ee <initColorSensor>:
   * @brief  Initializes the color sensor
   * @param  None
   * @retval None
   */
void initColorSensor(void){
    PORTJ_DIR &= ~(PIN6_bm);	//set pin as input
    18ee:	e0 e0       	ldi	r30, 0x00	; 0
    18f0:	f7 e0       	ldi	r31, 0x07	; 7
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 7b       	andi	r24, 0xBF	; 191
    18f6:	80 83       	st	Z, r24
	PORTH_DIR |= PIN6_bm | PIN7_bm;	//set pins as output	
    18f8:	e0 ee       	ldi	r30, 0xE0	; 224
    18fa:	f6 e0       	ldi	r31, 0x06	; 6
    18fc:	80 81       	ld	r24, Z
    18fe:	80 6c       	ori	r24, 0xC0	; 192
    1900:	80 83       	st	Z, r24
    1902:	08 95       	ret

00001904 <FrequencyToColourVal>:
  * @param  freq    frequency of the color
  *         color   desired color
  * @retval RGB value 
  */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t color) {
	if (!freq) { return 0; } //bad frequency, don't return a color
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	09 f4       	brne	.+2      	; 0x190a <FrequencyToColourVal+0x6>
    1908:	45 c0       	rjmp	.+138    	; 0x1994 <FrequencyToColourVal+0x90>
	
    uint8_t RGBValue = 0;
	switch (color) {
    190a:	61 30       	cpi	r22, 0x01	; 1
    190c:	c9 f0       	breq	.+50     	; 0x1940 <FrequencyToColourVal+0x3c>
    190e:	18 f0       	brcs	.+6      	; 0x1916 <FrequencyToColourVal+0x12>
    1910:	62 30       	cpi	r22, 0x02	; 2
    1912:	59 f1       	breq	.+86     	; 0x196a <FrequencyToColourVal+0x66>
    1914:	41 c0       	rjmp	.+130    	; 0x1998 <FrequencyToColourVal+0x94>
        //if the frequency is low there is a high color occurance
		case REDCASE: //red
		    RGBValue = map(freq, MINREDFREQ, MAXREDFREQ, 255, 0);
    1916:	a0 e0       	ldi	r26, 0x00	; 0
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	9c 01       	movw	r18, r24
    191c:	ad 01       	movw	r20, r26
    191e:	23 51       	subi	r18, 0x13	; 19
    1920:	31 09       	sbc	r19, r1
    1922:	41 09       	sbc	r20, r1
    1924:	51 09       	sbc	r21, r1
    1926:	a1 e0       	ldi	r26, 0x01	; 1
    1928:	bf ef       	ldi	r27, 0xFF	; 255
    192a:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__mulohisi3>
    192e:	2e e6       	ldi	r18, 0x6E	; 110
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__divmodsi4>
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	82 0f       	add	r24, r18
            break;
    193e:	08 95       	ret
		case GREENCASE: //green
		    RGBValue = map(freq, MINGREENFREQ, MAXGREENFREQ, 255, 0);
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	9c 01       	movw	r18, r24
    1946:	ad 01       	movw	r20, r26
    1948:	2c 53       	subi	r18, 0x3C	; 60
    194a:	31 09       	sbc	r19, r1
    194c:	41 09       	sbc	r20, r1
    194e:	51 09       	sbc	r21, r1
    1950:	a1 e0       	ldi	r26, 0x01	; 1
    1952:	bf ef       	ldi	r27, 0xFF	; 255
    1954:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__mulohisi3>
    1958:	24 e6       	ldi	r18, 0x64	; 100
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__divmodsi4>
    1964:	8f ef       	ldi	r24, 0xFF	; 255
    1966:	82 0f       	add	r24, r18
            break;
    1968:	08 95       	ret
		case BLUECASE: //blue
		    RGBValue = map(freq, MINBLUEFREQ, MAXBLUEFREQ, 255, 0);
    196a:	a0 e0       	ldi	r26, 0x00	; 0
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	9c 01       	movw	r18, r24
    1970:	ad 01       	movw	r20, r26
    1972:	2e 50       	subi	r18, 0x0E	; 14
    1974:	31 09       	sbc	r19, r1
    1976:	41 09       	sbc	r20, r1
    1978:	51 09       	sbc	r21, r1
    197a:	a1 e0       	ldi	r26, 0x01	; 1
    197c:	bf ef       	ldi	r27, 0xFF	; 255
    197e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__mulohisi3>
    1982:	2e e6       	ldi	r18, 0x6E	; 110
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__divmodsi4>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	82 0f       	add	r24, r18
            break;
    1992:	08 95       	ret
  * @param  freq    frequency of the color
  *         color   desired color
  * @retval RGB value 
  */
uint8_t FrequencyToColourVal(uint16_t freq, uint8_t color) {
	if (!freq) { return 0; } //bad frequency, don't return a color
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	08 95       	ret
	
    uint8_t RGBValue = 0;
    1998:	80 e0       	ldi	r24, 0x00	; 0
	//check on out of bounds
    if (RGBValue<0) { RGBValue = 0; }
	if (RGBValue>255) { RGBValue = 255; }
	
	return RGBValue;
}
    199a:	08 95       	ret

0000199c <getColor>:
/**
  * @brief  reads out raw value of the desired color
  * @param  color you want to read out (0 = red, 1 = green, 2 = blue)
  * @retval Selected color (if color = 0 the raw value of red is returned)
  */
uint16_t getColor(uint8_t color){
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
  *     |Green      |HiGH |High |
  *     |Blue       |Low  |High |
  *     |No filter  |High |Low  |
  *     =========================
  */
   switch (color) {
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	59 f0       	breq	.+22     	; 0x19ba <getColor+0x1e>
    19a4:	18 f0       	brcs	.+6      	; 0x19ac <getColor+0x10>
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	79 f0       	breq	.+30     	; 0x19c8 <getColor+0x2c>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <getColor+0x38>
        case REDCASE: //red
		    PORTH_OUTCLR = (1<<PIN_S2); //S2, to LOW
    19ac:	e6 ee       	ldi	r30, 0xE6	; 230
    19ae:	f6 e0       	ldi	r31, 0x06	; 6
    19b0:	80 e8       	ldi	r24, 0x80	; 128
    19b2:	80 83       	st	Z, r24
		    PORTH_OUTCLR = (1<<PIN_S3); //S3, to LOW
    19b4:	80 e4       	ldi	r24, 0x40	; 64
    19b6:	80 83       	st	Z, r24
		    break;
    19b8:	0d c0       	rjmp	.+26     	; 0x19d4 <getColor+0x38>
		
		case GREENCASE: //green
		    PORTH_OUTSET = (1<<PIN_S2); //S2, to HIGH
    19ba:	e5 ee       	ldi	r30, 0xE5	; 229
    19bc:	f6 e0       	ldi	r31, 0x06	; 6
    19be:	80 e8       	ldi	r24, 0x80	; 128
    19c0:	80 83       	st	Z, r24
		    PORTH_OUTSET = (1<<PIN_S3); //S3, to HIGH
    19c2:	80 e4       	ldi	r24, 0x40	; 64
    19c4:	80 83       	st	Z, r24
    		break;
    19c6:	06 c0       	rjmp	.+12     	; 0x19d4 <getColor+0x38>
		
		case BLUECASE: //blue
	    	PORTH_OUTCLR = (1<<PIN_S2); //S2, to LOW
    19c8:	80 e8       	ldi	r24, 0x80	; 128
    19ca:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    		PORTH_OUTSET = (1<<PIN_S3); //S3, to HIGH
    19ce:	80 e4       	ldi	r24, 0x40	; 64
    19d0:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
		    break;
    }
    return (uint16_t) pulseIn(&PORTJ, PIN6_bm, 0, 10000); //pin 10
    19d4:	00 e1       	ldi	r16, 0x10	; 16
    19d6:	17 e2       	ldi	r17, 0x27	; 39
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	60 e4       	ldi	r22, 0x40	; 64
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	97 e0       	ldi	r25, 0x07	; 7
    19e4:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <pulseIn>
}
    19e8:	cb 01       	movw	r24, r22
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <calcAverageArray>:
  * @brief  calculate average value in array
  * @param  a       array
  *         size    size of the array
  * @retval sum = average of the array
  */
uint16_t calcAverageArray(uint16_t *a, uint8_t size) {
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	06 2f       	mov	r16, r22
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    19f6:	66 23       	and	r22, r22
    19f8:	81 f0       	breq	.+32     	; 0x1a1a <calcAverageArray+0x2a>
    19fa:	e8 2f       	mov	r30, r24
    19fc:	f9 2f       	mov	r31, r25
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	ba 01       	movw	r22, r20
		sum += a[i];
    1a06:	a1 91       	ld	r26, Z+
    1a08:	b1 91       	ld	r27, Z+
    1a0a:	4a 0f       	add	r20, r26
    1a0c:	5b 1f       	adc	r21, r27
    1a0e:	61 1d       	adc	r22, r1
    1a10:	71 1d       	adc	r23, r1
  *         size    size of the array
  * @retval sum = average of the array
  */
uint16_t calcAverageArray(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
	for (uint8_t i=0; i<size; i++) {
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	08 13       	cpse	r16, r24
    1a16:	f7 cf       	rjmp	.-18     	; 0x1a06 <calcAverageArray+0x16>
    1a18:	03 c0       	rjmp	.+6      	; 0x1a20 <calcAverageArray+0x30>
  * @param  a       array
  *         size    size of the array
  * @retval sum = average of the array
  */
uint16_t calcAverageArray(uint16_t *a, uint8_t size) {
	unsigned long sum = 0;
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	ba 01       	movw	r22, r20
	for (uint8_t i=0; i<size; i++) {
		sum += a[i];
	}
	sum /= size;
	return sum;
    1a20:	10 e0       	ldi	r17, 0x00	; 0
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	cb 01       	movw	r24, r22
    1a28:	ba 01       	movw	r22, r20
    1a2a:	a9 01       	movw	r20, r18
    1a2c:	98 01       	movw	r18, r16
    1a2e:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>
}
    1a32:	c9 01       	movw	r24, r18
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <ReadColourSensor>:
  * @param  None
  * @def    DIFFERENTCOLORS = ammount of different colors (3)
  *         AVERAGECOLORS = ammount of samples taken
  * @retval color (#rrggbb) retreived from the color frequency
  */
uint16_t ReadColourSensor(void){
    1a3a:	af 92       	push	r10
    1a3c:	bf 92       	push	r11
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	2d 97       	sbiw	r28, 0x0d	; 13
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	5e 01       	movw	r10, r28
    1a58:	8b e0       	ldi	r24, 0x0B	; 11
    1a5a:	a8 0e       	add	r10, r24
    1a5c:	b1 1c       	adc	r11, r1
	uint16_t storeOneColor[AVERAGECOLORS];
	uint8_t RedGreenBlue[DIFFERENTCOLORS];

	for (uint8_t desiredColor=0;desiredColor<DIFFERENTCOLORS;desiredColor++){//Read Red Green and Blue apart
    1a5e:	f1 2c       	mov	r15, r1
    1a60:	65 01       	movw	r12, r10
    1a62:	8e 01       	movw	r16, r28
    1a64:	0f 5f       	subi	r16, 0xFF	; 255
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
        for (uint8_t i=0;i<AVERAGECOLORS;i++){//sample one color 5 times and take the average
            storeOneColor[i] = getColor(desiredColor);
    1a68:	8f 2d       	mov	r24, r15
    1a6a:	0e 94 ce 0c 	call	0x199c	; 0x199c <getColor>
    1a6e:	f8 01       	movw	r30, r16
    1a70:	81 93       	st	Z+, r24
    1a72:	91 93       	st	Z+, r25
    1a74:	8f 01       	movw	r16, r30
uint16_t ReadColourSensor(void){
	uint16_t storeOneColor[AVERAGECOLORS];
	uint8_t RedGreenBlue[DIFFERENTCOLORS];

	for (uint8_t desiredColor=0;desiredColor<DIFFERENTCOLORS;desiredColor++){//Read Red Green and Blue apart
        for (uint8_t i=0;i<AVERAGECOLORS;i++){//sample one color 5 times and take the average
    1a76:	ec 15       	cp	r30, r12
    1a78:	fd 05       	cpc	r31, r13
    1a7a:	b1 f7       	brne	.-20     	; 0x1a68 <ReadColourSensor+0x2e>
            storeOneColor[i] = getColor(desiredColor);
        }
        //map color frequency to RGB and store in array
        /*FrequencyToColourVal(freq, color)
        calcAverageArray(array, size)*/
        RedGreenBlue[desiredColor] = FrequencyToColourVal(calcAverageArray(storeOneColor, AVERAGECOLORS), desiredColor);
    1a7c:	65 e0       	ldi	r22, 0x05	; 5
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <calcAverageArray>
    1a86:	6f 2d       	mov	r22, r15
    1a88:	0e 94 82 0c 	call	0x1904	; 0x1904 <FrequencyToColourVal>
    1a8c:	f5 01       	movw	r30, r10
    1a8e:	81 93       	st	Z+, r24
    1a90:	5f 01       	movw	r10, r30
  */
uint16_t ReadColourSensor(void){
	uint16_t storeOneColor[AVERAGECOLORS];
	uint8_t RedGreenBlue[DIFFERENTCOLORS];

	for (uint8_t desiredColor=0;desiredColor<DIFFERENTCOLORS;desiredColor++){//Read Red Green and Blue apart
    1a92:	f3 94       	inc	r15
    1a94:	f3 e0       	ldi	r31, 0x03	; 3
    1a96:	ff 12       	cpse	r15, r31
    1a98:	e4 cf       	rjmp	.-56     	; 0x1a62 <ReadColourSensor+0x28>
        //map color frequency to RGB and store in array
        /*FrequencyToColourVal(freq, color)
        calcAverageArray(array, size)*/
        RedGreenBlue[desiredColor] = FrequencyToColourVal(calcAverageArray(storeOneColor, AVERAGECOLORS), desiredColor);
    }
    uint8_t redColor     = RedGreenBlue[REDCASE];
    1a9a:	1b 85       	ldd	r17, Y+11	; 0x0b
    uint8_t greenColor   = RedGreenBlue[GREENCASE];
    1a9c:	fc 84       	ldd	r15, Y+12	; 0x0c
    uint8_t blueColor    = RedGreenBlue[BLUECASE];
    1a9e:	0d 85       	ldd	r16, Y+13	; 0x0d
	
	DEBUG_OUT("color = #");
    1aa0:	6f ed       	ldi	r22, 0xDF	; 223
    1aa2:	71 e2       	ldi	r23, 0x21	; 33
    1aa4:	80 ea       	ldi	r24, 0xA0	; 160
    1aa6:	99 e0       	ldi	r25, 0x09	; 9
    1aa8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit_Number(USARTD0, (uint16_t) redColor);
    1aac:	61 2f       	mov	r22, r17
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 ea       	ldi	r24, 0xA0	; 160
    1ab2:	99 e0       	ldi	r25, 0x09	; 9
    1ab4:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
	DEBUG_OUT(" ");
    1ab8:	6f e1       	ldi	r22, 0x1F	; 31
    1aba:	71 e2       	ldi	r23, 0x21	; 33
    1abc:	80 ea       	ldi	r24, 0xA0	; 160
    1abe:	99 e0       	ldi	r25, 0x09	; 9
    1ac0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit_Number(USARTD0, (uint16_t) greenColor);
    1ac4:	6f 2d       	mov	r22, r15
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	80 ea       	ldi	r24, 0xA0	; 160
    1aca:	99 e0       	ldi	r25, 0x09	; 9
    1acc:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
	DEBUG_OUT(" ");
    1ad0:	6f e1       	ldi	r22, 0x1F	; 31
    1ad2:	71 e2       	ldi	r23, 0x21	; 33
    1ad4:	80 ea       	ldi	r24, 0xA0	; 160
    1ad6:	99 e0       	ldi	r25, 0x09	; 9
    1ad8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit_Number(USARTD0, (uint16_t) blueColor);
    1adc:	60 2f       	mov	r22, r16
    1ade:	70 e0       	ldi	r23, 0x00	; 0
    1ae0:	80 ea       	ldi	r24, 0xA0	; 160
    1ae2:	99 e0       	ldi	r25, 0x09	; 9
    1ae4:	0e 94 c8 09 	call	0x1390	; 0x1390 <_Z21USART_Transmit_NumberR12USART_structi>
	DEBUG_OUT("\n\r");
    1ae8:	61 e8       	ldi	r22, 0x81	; 129
    1aea:	73 e2       	ldi	r23, 0x23	; 35
    1aec:	80 ea       	ldi	r24, 0xA0	; 160
    1aee:	99 e0       	ldi	r25, 0x09	; 9
    1af0:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	
    if (redColor < blueColor && redColor < greenColor && redColor < 20){ //color is red
    1af4:	10 17       	cp	r17, r16
    1af6:	68 f4       	brcc	.+26     	; 0x1b12 <ReadColourSensor+0xd8>
    1af8:	1f 15       	cp	r17, r15
    1afa:	58 f4       	brcc	.+22     	; 0x1b12 <ReadColourSensor+0xd8>
    1afc:	14 31       	cpi	r17, 0x14	; 20
    1afe:	48 f4       	brcc	.+18     	; 0x1b12 <ReadColourSensor+0xd8>
        DEBUG_OUT("color is ORANGE\n\r");
    1b00:	69 ee       	ldi	r22, 0xE9	; 233
    1b02:	71 e2       	ldi	r23, 0x21	; 33
    1b04:	80 ea       	ldi	r24, 0xA0	; 160
    1b06:	99 e0       	ldi	r25, 0x09	; 9
    1b08:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		return 4; //4 equals orange in blockly
    1b0c:	84 e0       	ldi	r24, 0x04	; 4
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	22 c0       	rjmp	.+68     	; 0x1b56 <ReadColourSensor+0x11c>
    }else if (blueColor < redColor && blueColor < greenColor && greenColor>190){  //color is blue
    1b12:	01 17       	cp	r16, r17
    1b14:	70 f4       	brcc	.+28     	; 0x1b32 <ReadColourSensor+0xf8>
    1b16:	0f 15       	cp	r16, r15
    1b18:	60 f4       	brcc	.+24     	; 0x1b32 <ReadColourSensor+0xf8>
    1b1a:	8e eb       	ldi	r24, 0xBE	; 190
    1b1c:	8f 15       	cp	r24, r15
    1b1e:	48 f4       	brcc	.+18     	; 0x1b32 <ReadColourSensor+0xf8>
        DEBUG_OUT("color is BLUE\n\r");
    1b20:	6b ef       	ldi	r22, 0xFB	; 251
    1b22:	71 e2       	ldi	r23, 0x21	; 33
    1b24:	80 ea       	ldi	r24, 0xA0	; 160
    1b26:	99 e0       	ldi	r25, 0x09	; 9
    1b28:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		return 1; //1 equals blue in blockly
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	12 c0       	rjmp	.+36     	; 0x1b56 <ReadColourSensor+0x11c>
    }else if (greenColor < redColor && greenColor < blueColor){ //color is green
    1b32:	f1 16       	cp	r15, r17
    1b34:	58 f4       	brcc	.+22     	; 0x1b4c <ReadColourSensor+0x112>
    1b36:	f0 16       	cp	r15, r16
    1b38:	60 f4       	brcc	.+24     	; 0x1b52 <ReadColourSensor+0x118>
        DEBUG_OUT("color is GREEN\n\r");
    1b3a:	6b e0       	ldi	r22, 0x0B	; 11
    1b3c:	72 e2       	ldi	r23, 0x22	; 34
    1b3e:	80 ea       	ldi	r24, 0xA0	; 160
    1b40:	99 e0       	ldi	r25, 0x09	; 9
    1b42:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		return 2; //2 equals green in blockly
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <ReadColourSensor+0x11c>
    }else{
		return 0; //0 equals black in blockly
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <ReadColourSensor+0x11c>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1b56:	2d 96       	adiw	r28, 0x0d	; 13
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	08 95       	ret

00001b70 <SelectColour>:
}

/* blockly functie - functie ter vervanging van werking met char* omdat blockly problemen met kleuren => assembly heeft */
uint16_t SelectColour(uint16_t i) { 
	return i; 
}
    1b70:	08 95       	ret

00001b72 <CompareColours>:

/* blockly functie */
bool CompareColours(uint16_t c1, uint16_t c2) {
	return (c1 == c2);
    1b72:	21 e0       	ldi	r18, 0x01	; 1
    1b74:	86 17       	cp	r24, r22
    1b76:	97 07       	cpc	r25, r23
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <CompareColours+0xa>
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
}
    1b7c:	82 2f       	mov	r24, r18
    1b7e:	08 95       	ret

00001b80 <map>:
/**
  * @brief  map value (arduino function)
  * @reference https://www.arduino.cc/reference/en/language/functions/math/map/ 
  * @retval the mapped value
  */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
    1b80:	4f 92       	push	r4
    1b82:	5f 92       	push	r5
    1b84:	6f 92       	push	r6
    1b86:	7f 92       	push	r7
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	29 01       	movw	r4, r18
    1ba2:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1ba4:	9b 01       	movw	r18, r22
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	24 19       	sub	r18, r4
    1baa:	35 09       	sbc	r19, r5
    1bac:	46 09       	sbc	r20, r6
    1bae:	57 09       	sbc	r21, r7
    1bb0:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb2:	9b 89       	ldd	r25, Y+19	; 0x13
    1bb4:	ac 89       	ldd	r26, Y+20	; 0x14
    1bb6:	bd 89       	ldd	r27, Y+21	; 0x15
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	6a 19       	sub	r22, r10
    1bbe:	7b 09       	sbc	r23, r11
    1bc0:	8c 09       	sbc	r24, r12
    1bc2:	9d 09       	sbc	r25, r13
    1bc4:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__mulsi3>
    1bc8:	a8 01       	movw	r20, r16
    1bca:	97 01       	movw	r18, r14
    1bcc:	24 19       	sub	r18, r4
    1bce:	35 09       	sbc	r19, r5
    1bd0:	46 09       	sbc	r20, r6
    1bd2:	57 09       	sbc	r21, r7
    1bd4:	0e 94 51 2f 	call	0x5ea2	; 0x5ea2 <__divmodsi4>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	b9 01       	movw	r22, r18
    1bdc:	6a 0d       	add	r22, r10
    1bde:	7b 1d       	adc	r23, r11
    1be0:	8c 1d       	adc	r24, r12
    1be2:	9d 1d       	adc	r25, r13
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	1f 91       	pop	r17
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	7f 90       	pop	r7
    1bfa:	6f 90       	pop	r6
    1bfc:	5f 90       	pop	r5
    1bfe:	4f 90       	pop	r4
    1c00:	08 95       	ret

00001c02 <pulseIn>:

#include "pulseIn.h"


unsigned long pulseIn(PORT_struct *port, uint8_t pin_bm, uint8_t state, unsigned long timeout)
{
    1c02:	8f 92       	push	r8
    1c04:	9f 92       	push	r9
    1c06:	af 92       	push	r10
    1c08:	bf 92       	push	r11
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	fc 01       	movw	r30, r24
    1c18:	86 2f       	mov	r24, r22
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
    1c1a:	44 23       	and	r20, r20
    1c1c:	11 f0       	breq	.+4      	; 0x1c22 <pulseIn+0x20>
    1c1e:	a6 2f       	mov	r26, r22
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <pulseIn+0x22>
    1c22:	a0 e0       	ldi	r26, 0x00	; 0
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    1c24:	b9 01       	movw	r22, r18
    1c26:	a8 01       	movw	r20, r16
    1c28:	44 0f       	add	r20, r20
    1c2a:	55 1f       	adc	r21, r21
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	04 0f       	add	r16, r20
    1c32:	15 1f       	adc	r17, r21
    1c34:	26 1f       	adc	r18, r22
    1c36:	37 1f       	adc	r19, r23
    1c38:	36 95       	lsr	r19
    1c3a:	27 95       	ror	r18
    1c3c:	17 95       	ror	r17
    1c3e:	07 95       	ror	r16
    1c40:	3f 70       	andi	r19, 0x0F	; 15
	uint8_t stateMask = (state ? pin_bm : 0); // The stateMask is a variable to check if the bit coresponds to the pin is 0 or 1. When the state is 0, it is set to 0 to measure the time of LOW state. If the state i not 0, it is set to bitmask of the pin. 
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	ba 01       	movw	r22, r20
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
    1c48:	90 85       	ldd	r25, Z+8	; 0x08
    1c4a:	98 23       	and	r25, r24
    1c4c:	a9 13       	cpse	r26, r25
    1c4e:	10 c0       	rjmp	.+32     	; 0x1c70 <pulseIn+0x6e>
		if (numloops++ == maxloops) { return 0; }
    1c50:	6a 01       	movw	r12, r20
    1c52:	7b 01       	movw	r14, r22
    1c54:	9f ef       	ldi	r25, 0xFF	; 255
    1c56:	c9 1a       	sub	r12, r25
    1c58:	d9 0a       	sbc	r13, r25
    1c5a:	e9 0a       	sbc	r14, r25
    1c5c:	f9 0a       	sbc	r15, r25
    1c5e:	04 17       	cp	r16, r20
    1c60:	15 07       	cpc	r17, r21
    1c62:	26 07       	cpc	r18, r22
    1c64:	37 07       	cpc	r19, r23
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <pulseIn+0x68>
    1c68:	69 c0       	rjmp	.+210    	; 0x1d3c <pulseIn+0x13a>
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	a6 01       	movw	r20, r12
    1c6e:	ec cf       	rjmp	.-40     	; 0x1c48 <pulseIn+0x46>
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
    1c70:	90 85       	ldd	r25, Z+8	; 0x08
    1c72:	98 23       	and	r25, r24
    1c74:	a9 13       	cpse	r26, r25
    1c76:	08 c0       	rjmp	.+16     	; 0x1c88 <pulseIn+0x86>
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
    1c78:	90 85       	ldd	r25, Z+8	; 0x08
    1c7a:	98 23       	and	r25, r24
    1c7c:	a9 17       	cp	r26, r25
    1c7e:	a1 f0       	breq	.+40     	; 0x1ca8 <pulseIn+0xa6>
    1c80:	c1 2c       	mov	r12, r1
    1c82:	d1 2c       	mov	r13, r1
    1c84:	76 01       	movw	r14, r12
    1c86:	2f c0       	rjmp	.+94     	; 0x1ce6 <pulseIn+0xe4>
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1c88:	6a 01       	movw	r12, r20
    1c8a:	7b 01       	movw	r14, r22
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	c9 1a       	sub	r12, r25
    1c90:	d9 0a       	sbc	r13, r25
    1c92:	e9 0a       	sbc	r14, r25
    1c94:	f9 0a       	sbc	r15, r25
    1c96:	04 17       	cp	r16, r20
    1c98:	15 07       	cpc	r17, r21
    1c9a:	26 07       	cpc	r18, r22
    1c9c:	37 07       	cpc	r19, r23
    1c9e:	09 f4       	brne	.+2      	; 0x1ca2 <pulseIn+0xa0>
    1ca0:	51 c0       	rjmp	.+162    	; 0x1d44 <pulseIn+0x142>
    1ca2:	b7 01       	movw	r22, r14
    1ca4:	a6 01       	movw	r20, r12
    1ca6:	e4 cf       	rjmp	.-56     	; 0x1c70 <pulseIn+0x6e>
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1ca8:	40 17       	cp	r20, r16
    1caa:	51 07       	cpc	r21, r17
    1cac:	62 07       	cpc	r22, r18
    1cae:	73 07       	cpc	r23, r19
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <pulseIn+0xb2>
    1cb2:	4c c0       	rjmp	.+152    	; 0x1d4c <pulseIn+0x14a>
    1cb4:	c1 2c       	mov	r12, r1
    1cb6:	d1 2c       	mov	r13, r1
    1cb8:	76 01       	movw	r14, r12
    1cba:	0c c0       	rjmp	.+24     	; 0x1cd4 <pulseIn+0xd2>
    1cbc:	4a 01       	movw	r8, r20
    1cbe:	5b 01       	movw	r10, r22
    1cc0:	8c 0c       	add	r8, r12
    1cc2:	9d 1c       	adc	r9, r13
    1cc4:	ae 1c       	adc	r10, r14
    1cc6:	bf 1c       	adc	r11, r15
    1cc8:	08 15       	cp	r16, r8
    1cca:	19 05       	cpc	r17, r9
    1ccc:	2a 05       	cpc	r18, r10
    1cce:	3b 05       	cpc	r19, r11
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <pulseIn+0xd2>
    1cd2:	40 c0       	rjmp	.+128    	; 0x1d54 <pulseIn+0x152>
		width++;
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
    1cd6:	c9 1a       	sub	r12, r25
    1cd8:	d9 0a       	sbc	r13, r25
    1cda:	e9 0a       	sbc	r14, r25
    1cdc:	f9 0a       	sbc	r15, r25
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
    1cde:	90 85       	ldd	r25, Z+8	; 0x08
    1ce0:	98 23       	and	r25, r24
    1ce2:	a9 17       	cp	r26, r25
    1ce4:	59 f3       	breq	.-42     	; 0x1cbc <pulseIn+0xba>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	a6 01       	movw	r20, r12
    1cea:	44 0f       	add	r20, r20
    1cec:	55 1f       	adc	r21, r21
    1cee:	66 1f       	adc	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	44 0f       	add	r20, r20
    1cf4:	55 1f       	adc	r21, r21
    1cf6:	66 1f       	adc	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	db 01       	movw	r26, r22
    1cfc:	ca 01       	movw	r24, r20
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	aa 1f       	adc	r26, r26
    1d04:	bb 1f       	adc	r27, r27
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	aa 1f       	adc	r26, r26
    1d0c:	bb 1f       	adc	r27, r27
    1d0e:	84 0f       	add	r24, r20
    1d10:	95 1f       	adc	r25, r21
    1d12:	a6 1f       	adc	r26, r22
    1d14:	b7 1f       	adc	r27, r23
    1d16:	8c 0d       	add	r24, r12
    1d18:	9d 1d       	adc	r25, r13
    1d1a:	ae 1d       	adc	r26, r14
    1d1c:	bf 1d       	adc	r27, r15
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	60 5f       	subi	r22, 0xF0	; 240
    1d24:	7f 4f       	sbci	r23, 0xFF	; 255
    1d26:	8f 4f       	sbci	r24, 0xFF	; 255
    1d28:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2a:	28 e1       	ldi	r18, 0x18	; 24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>
    1d36:	ca 01       	movw	r24, r20
    1d38:	b9 01       	movw	r22, r18
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <pulseIn+0x158>
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	70 e0       	ldi	r23, 0x00	; 0
    1d40:	cb 01       	movw	r24, r22
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <pulseIn+0x158>
	}
	
	// wait for the pulse to start
	while ((port->IN & pin_bm) != stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	cb 01       	movw	r24, r22
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <pulseIn+0x158>
	}
	
	// wait for the pulse to stop
	while ((port->IN & pin_bm) == stateMask) {
		if (numloops++ == maxloops) { return 0; }
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	cb 01       	movw	r24, r22
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <pulseIn+0x158>
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	cb 01       	movw	r24, r22
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16);
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	9f 90       	pop	r9
    1d6c:	8f 90       	pop	r8
    1d6e:	08 95       	ret

00001d70 <SorterarmIsFinnished>:
	}
}

bool SorterarmIsFinnished(){
	return 0;
}
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 95       	ret

00001d74 <StopSorterArm>:
	}
}

/* stop stepper */
void StopSorterArm()
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	1f 92       	push	r1
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	char data[] = { MOTOR_OFF };
    1d82:	19 82       	std	Y+1, r1	; 0x01
	uint16_t motor_id = SORTER_MOTOR_ID;
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    1d84:	00 eb       	ldi	r16, 0xB0	; 176
    1d86:	1a e0       	ldi	r17, 0x0A	; 10
    1d88:	27 e0       	ldi	r18, 0x07	; 7
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	be 01       	movw	r22, r28
    1d8e:	6f 5f       	subi	r22, 0xFF	; 255
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	8c e4       	ldi	r24, 0x4C	; 76
    1d94:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    1d98:	0f 90       	pop	r0
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <SorterArmISR>:
volatile bool saIsLeft, saIsRight; // Sorterarm is links of rechts van zijn uiterste rijkweidte


// Interrupt ISR
void SorterArmISR(){
	if (!(PORTK_IN & sa1.switch_pin_left)){
    1da4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1da8:	86 fd       	sbrc	r24, 6
    1daa:	0e c0       	rjmp	.+28     	; 0x1dc8 <SorterArmISR+0x24>
		DEBUG_OUT("----------------Stop sorter arm----------------\n");
    1dac:	6c e1       	ldi	r22, 0x1C	; 28
    1dae:	72 e2       	ldi	r23, 0x22	; 34
    1db0:	80 ea       	ldi	r24, 0xA0	; 160
    1db2:	99 e0       	ldi	r25, 0x09	; 9
    1db4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		StopSorterArm();
    1db8:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <StopSorterArm>
		saIsLeft = true;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	80 93 f9 23 	sts	0x23F9, r24	; 0x8023f9 <saIsLeft>
		saIsRight = false;
    1dc2:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <saIsRight>
    1dc6:	08 95       	ret
	}
	else if (!(PORTK_IN & sa1.switch_pin_right)){
    1dc8:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    1dcc:	88 23       	and	r24, r24
    1dce:	74 f0       	brlt	.+28     	; 0x1dec <SorterArmISR+0x48>
		DEBUG_OUT("----------------Stop sorter arm----------------\n");
    1dd0:	6c e1       	ldi	r22, 0x1C	; 28
    1dd2:	72 e2       	ldi	r23, 0x22	; 34
    1dd4:	80 ea       	ldi	r24, 0xA0	; 160
    1dd6:	99 e0       	ldi	r25, 0x09	; 9
    1dd8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		StopSorterArm();
    1ddc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <StopSorterArm>
		saIsLeft = false;
    1de0:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <saIsLeft>
		saIsRight = true;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <saIsRight>
    1dea:	08 95       	ret
	}
	else {
		DEBUG_OUT("----------------Don't stop sorter arm----------------\n");
    1dec:	6d e4       	ldi	r22, 0x4D	; 77
    1dee:	72 e2       	ldi	r23, 0x22	; 34
    1df0:	80 ea       	ldi	r24, 0xA0	; 160
    1df2:	99 e0       	ldi	r25, 0x09	; 9
    1df4:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		saIsLeft = false;
    1df8:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <saIsLeft>
		saIsRight = false;
    1dfc:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <saIsRight>
    1e00:	08 95       	ret

00001e02 <_Z17SorterarmLinksISRv>:


}

void SorterarmLinksISR() {
	saIsLeft = true;
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	80 93 f9 23 	sts	0x23F9, r24	; 0x8023f9 <saIsLeft>
	saIsRight = false;
    1e08:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <saIsRight>
	StopSorterArm();
    1e0c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <StopSorterArm>
    1e10:	08 95       	ret

00001e12 <_Z18SorterArmRechtsISRv>:
}

void SorterArmRechtsISR() {
	saIsLeft = false;
    1e12:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <saIsLeft>
	saIsRight = true;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <saIsRight>
	StopSorterArm();
    1e1c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <StopSorterArm>
    1e20:	08 95       	ret

00001e22 <SaSetInput>:


// Zet pinnen van de sorterarm als input-pullup
void SaSetInput(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_DIR &= ~(switch_pin_left);		//pin set left as input
    1e22:	e0 e2       	ldi	r30, 0x20	; 32
    1e24:	f7 e0       	ldi	r31, 0x07	; 7
    1e26:	90 81       	ld	r25, Z
    1e28:	28 2f       	mov	r18, r24
    1e2a:	20 95       	com	r18
    1e2c:	92 23       	and	r25, r18
    1e2e:	90 83       	st	Z, r25
	PORTK_DIR &= ~(switch_pin_right);		//pin set right as input
    1e30:	90 81       	ld	r25, Z
    1e32:	26 2f       	mov	r18, r22
    1e34:	20 95       	com	r18
    1e36:	92 23       	and	r25, r18
    1e38:	90 83       	st	Z, r25
	
	//Set the PINnCTRL of the left switch to PULLUP
	switch (switch_pin_left)				//pull-up
    1e3a:	88 30       	cpi	r24, 0x08	; 8
    1e3c:	29 f1       	breq	.+74     	; 0x1e88 <SaSetInput+0x66>
    1e3e:	38 f4       	brcc	.+14     	; 0x1e4e <SaSetInput+0x2c>
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	b1 f0       	breq	.+44     	; 0x1e70 <SaSetInput+0x4e>
    1e44:	84 30       	cpi	r24, 0x04	; 4
    1e46:	d1 f0       	breq	.+52     	; 0x1e7c <SaSetInput+0x5a>
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	d9 f5       	brne	.+118    	; 0x1ec2 <SaSetInput+0xa0>
    1e4c:	0b c0       	rjmp	.+22     	; 0x1e64 <SaSetInput+0x42>
    1e4e:	80 32       	cpi	r24, 0x20	; 32
    1e50:	39 f1       	breq	.+78     	; 0x1ea0 <SaSetInput+0x7e>
    1e52:	18 f4       	brcc	.+6      	; 0x1e5a <SaSetInput+0x38>
    1e54:	80 31       	cpi	r24, 0x10	; 16
    1e56:	f1 f0       	breq	.+60     	; 0x1e94 <SaSetInput+0x72>
    1e58:	34 c0       	rjmp	.+104    	; 0x1ec2 <SaSetInput+0xa0>
    1e5a:	80 34       	cpi	r24, 0x40	; 64
    1e5c:	39 f1       	breq	.+78     	; 0x1eac <SaSetInput+0x8a>
    1e5e:	80 38       	cpi	r24, 0x80	; 128
    1e60:	59 f1       	breq	.+86     	; 0x1eb8 <SaSetInput+0x96>
    1e62:	2f c0       	rjmp	.+94     	; 0x1ec2 <SaSetInput+0xa0>
	{
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    1e64:	e0 e3       	ldi	r30, 0x30	; 48
    1e66:	f7 e0       	ldi	r31, 0x07	; 7
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 61       	ori	r24, 0x18	; 24
    1e6c:	80 83       	st	Z, r24
    1e6e:	29 c0       	rjmp	.+82     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    1e70:	e1 e3       	ldi	r30, 0x31	; 49
    1e72:	f7 e0       	ldi	r31, 0x07	; 7
    1e74:	80 81       	ld	r24, Z
    1e76:	88 61       	ori	r24, 0x18	; 24
    1e78:	80 83       	st	Z, r24
    1e7a:	23 c0       	rjmp	.+70     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    1e7c:	e2 e3       	ldi	r30, 0x32	; 50
    1e7e:	f7 e0       	ldi	r31, 0x07	; 7
    1e80:	80 81       	ld	r24, Z
    1e82:	88 61       	ori	r24, 0x18	; 24
    1e84:	80 83       	st	Z, r24
    1e86:	1d c0       	rjmp	.+58     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    1e88:	e3 e3       	ldi	r30, 0x33	; 51
    1e8a:	f7 e0       	ldi	r31, 0x07	; 7
    1e8c:	80 81       	ld	r24, Z
    1e8e:	88 61       	ori	r24, 0x18	; 24
    1e90:	80 83       	st	Z, r24
    1e92:	17 c0       	rjmp	.+46     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    1e94:	e4 e3       	ldi	r30, 0x34	; 52
    1e96:	f7 e0       	ldi	r31, 0x07	; 7
    1e98:	80 81       	ld	r24, Z
    1e9a:	88 61       	ori	r24, 0x18	; 24
    1e9c:	80 83       	st	Z, r24
    1e9e:	11 c0       	rjmp	.+34     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    1ea0:	e5 e3       	ldi	r30, 0x35	; 53
    1ea2:	f7 e0       	ldi	r31, 0x07	; 7
    1ea4:	80 81       	ld	r24, Z
    1ea6:	88 61       	ori	r24, 0x18	; 24
    1ea8:	80 83       	st	Z, r24
    1eaa:	0b c0       	rjmp	.+22     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    1eac:	e6 e3       	ldi	r30, 0x36	; 54
    1eae:	f7 e0       	ldi	r31, 0x07	; 7
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 61       	ori	r24, 0x18	; 24
    1eb4:	80 83       	st	Z, r24
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <SaSetInput+0xa0>
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    1eb8:	e7 e3       	ldi	r30, 0x37	; 55
    1eba:	f7 e0       	ldi	r31, 0x07	; 7
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 61       	ori	r24, 0x18	; 24
    1ec0:	80 83       	st	Z, r24
		default: break;
	}

	//Set the PINnCTRL of the right switch to PULLUP
	switch(switch_pin_right){
    1ec2:	68 30       	cpi	r22, 0x08	; 8
    1ec4:	29 f1       	breq	.+74     	; 0x1f10 <SaSetInput+0xee>
    1ec6:	38 f4       	brcc	.+14     	; 0x1ed6 <SaSetInput+0xb4>
    1ec8:	62 30       	cpi	r22, 0x02	; 2
    1eca:	b1 f0       	breq	.+44     	; 0x1ef8 <SaSetInput+0xd6>
    1ecc:	64 30       	cpi	r22, 0x04	; 4
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <SaSetInput+0xe2>
    1ed0:	61 30       	cpi	r22, 0x01	; 1
    1ed2:	d9 f5       	brne	.+118    	; 0x1f4a <SaSetInput+0x128>
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <SaSetInput+0xca>
    1ed6:	60 32       	cpi	r22, 0x20	; 32
    1ed8:	39 f1       	breq	.+78     	; 0x1f28 <SaSetInput+0x106>
    1eda:	18 f4       	brcc	.+6      	; 0x1ee2 <SaSetInput+0xc0>
    1edc:	60 31       	cpi	r22, 0x10	; 16
    1ede:	f1 f0       	breq	.+60     	; 0x1f1c <SaSetInput+0xfa>
    1ee0:	08 95       	ret
    1ee2:	60 34       	cpi	r22, 0x40	; 64
    1ee4:	39 f1       	breq	.+78     	; 0x1f34 <SaSetInput+0x112>
    1ee6:	60 38       	cpi	r22, 0x80	; 128
    1ee8:	59 f1       	breq	.+86     	; 0x1f40 <SaSetInput+0x11e>
    1eea:	08 95       	ret
		case PIN0_bm: PORTK_PIN0CTRL |= PORT_OPC_PULLUP_gc; break;
    1eec:	e0 e3       	ldi	r30, 0x30	; 48
    1eee:	f7 e0       	ldi	r31, 0x07	; 7
    1ef0:	80 81       	ld	r24, Z
    1ef2:	88 61       	ori	r24, 0x18	; 24
    1ef4:	80 83       	st	Z, r24
    1ef6:	08 95       	ret
		case PIN1_bm: PORTK_PIN1CTRL |= PORT_OPC_PULLUP_gc; break;
    1ef8:	e1 e3       	ldi	r30, 0x31	; 49
    1efa:	f7 e0       	ldi	r31, 0x07	; 7
    1efc:	80 81       	ld	r24, Z
    1efe:	88 61       	ori	r24, 0x18	; 24
    1f00:	80 83       	st	Z, r24
    1f02:	08 95       	ret
		case PIN2_bm: PORTK_PIN2CTRL |= PORT_OPC_PULLUP_gc; break;
    1f04:	e2 e3       	ldi	r30, 0x32	; 50
    1f06:	f7 e0       	ldi	r31, 0x07	; 7
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 61       	ori	r24, 0x18	; 24
    1f0c:	80 83       	st	Z, r24
    1f0e:	08 95       	ret
		case PIN3_bm: PORTK_PIN3CTRL |= PORT_OPC_PULLUP_gc; break;
    1f10:	e3 e3       	ldi	r30, 0x33	; 51
    1f12:	f7 e0       	ldi	r31, 0x07	; 7
    1f14:	80 81       	ld	r24, Z
    1f16:	88 61       	ori	r24, 0x18	; 24
    1f18:	80 83       	st	Z, r24
    1f1a:	08 95       	ret
		case PIN4_bm: PORTK_PIN4CTRL |= PORT_OPC_PULLUP_gc; break;
    1f1c:	e4 e3       	ldi	r30, 0x34	; 52
    1f1e:	f7 e0       	ldi	r31, 0x07	; 7
    1f20:	80 81       	ld	r24, Z
    1f22:	88 61       	ori	r24, 0x18	; 24
    1f24:	80 83       	st	Z, r24
    1f26:	08 95       	ret
		case PIN5_bm: PORTK_PIN5CTRL |= PORT_OPC_PULLUP_gc; break;
    1f28:	e5 e3       	ldi	r30, 0x35	; 53
    1f2a:	f7 e0       	ldi	r31, 0x07	; 7
    1f2c:	80 81       	ld	r24, Z
    1f2e:	88 61       	ori	r24, 0x18	; 24
    1f30:	80 83       	st	Z, r24
    1f32:	08 95       	ret
		case PIN6_bm: PORTK_PIN6CTRL |= PORT_OPC_PULLUP_gc; break;
    1f34:	e6 e3       	ldi	r30, 0x36	; 54
    1f36:	f7 e0       	ldi	r31, 0x07	; 7
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 61       	ori	r24, 0x18	; 24
    1f3c:	80 83       	st	Z, r24
    1f3e:	08 95       	ret
		case PIN7_bm: PORTK_PIN7CTRL |= PORT_OPC_PULLUP_gc; break;
    1f40:	e7 e3       	ldi	r30, 0x37	; 55
    1f42:	f7 e0       	ldi	r31, 0x07	; 7
    1f44:	80 81       	ld	r24, Z
    1f46:	88 61       	ori	r24, 0x18	; 24
    1f48:	80 83       	st	Z, r24
    1f4a:	08 95       	ret

00001f4c <SaSetInterrupt>:


// Zet interrupts aan op de sorterarm pinnen
void SaSetInterrupt(uint8_t switch_pin_left, uint8_t switch_pin_right)
{
	PORTK_INT1MASK |= switch_pin_left;		//pin listen interrupt left
    1f4c:	eb e2       	ldi	r30, 0x2B	; 43
    1f4e:	f7 e0       	ldi	r31, 0x07	; 7
    1f50:	90 81       	ld	r25, Z
    1f52:	98 2b       	or	r25, r24
    1f54:	90 83       	st	Z, r25
	PORTK_INT1MASK |= switch_pin_right;		//pin listen interrupt right
    1f56:	90 81       	ld	r25, Z
    1f58:	69 2b       	or	r22, r25
    1f5a:	60 83       	st	Z, r22

	switch (switch_pin_left)					//sense both edges
    1f5c:	84 30       	cpi	r24, 0x04	; 4
    1f5e:	09 f1       	breq	.+66     	; 0x1fa2 <SaSetInterrupt+0x56>
    1f60:	28 f4       	brcc	.+10     	; 0x1f6c <SaSetInterrupt+0x20>
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	41 f0       	breq	.+16     	; 0x1f76 <SaSetInterrupt+0x2a>
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	89 f0       	breq	.+34     	; 0x1f8c <SaSetInterrupt+0x40>
    1f6a:	3b c0       	rjmp	.+118    	; 0x1fe2 <SaSetInterrupt+0x96>
    1f6c:	88 30       	cpi	r24, 0x08	; 8
    1f6e:	21 f1       	breq	.+72     	; 0x1fb8 <SaSetInterrupt+0x6c>
    1f70:	80 31       	cpi	r24, 0x10	; 16
    1f72:	69 f1       	breq	.+90     	; 0x1fce <SaSetInterrupt+0x82>
    1f74:	36 c0       	rjmp	.+108    	; 0x1fe2 <SaSetInterrupt+0x96>
	{
	case PIN0_bm: PORTK_PIN0CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc; break;
    1f76:	e0 e3       	ldi	r30, 0x30	; 48
    1f78:	f7 e0       	ldi	r31, 0x07	; 7
    1f7a:	80 81       	ld	r24, Z
    1f7c:	82 60       	ori	r24, 0x02	; 2
    1f7e:	80 83       	st	Z, r24
    1f80:	e1 e3       	ldi	r30, 0x31	; 49
    1f82:	f7 e0       	ldi	r31, 0x07	; 7
    1f84:	80 81       	ld	r24, Z
    1f86:	82 60       	ori	r24, 0x02	; 2
    1f88:	80 83       	st	Z, r24
    1f8a:	2b c0       	rjmp	.+86     	; 0x1fe2 <SaSetInterrupt+0x96>
	case PIN1_bm: PORTK_PIN1CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc; break;
    1f8c:	e1 e3       	ldi	r30, 0x31	; 49
    1f8e:	f7 e0       	ldi	r31, 0x07	; 7
    1f90:	80 81       	ld	r24, Z
    1f92:	82 60       	ori	r24, 0x02	; 2
    1f94:	80 83       	st	Z, r24
    1f96:	e2 e3       	ldi	r30, 0x32	; 50
    1f98:	f7 e0       	ldi	r31, 0x07	; 7
    1f9a:	80 81       	ld	r24, Z
    1f9c:	82 60       	ori	r24, 0x02	; 2
    1f9e:	80 83       	st	Z, r24
    1fa0:	20 c0       	rjmp	.+64     	; 0x1fe2 <SaSetInterrupt+0x96>
	case PIN2_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN3CTRL |= PORT_ISC_FALLING_gc; break;
    1fa2:	e2 e3       	ldi	r30, 0x32	; 50
    1fa4:	f7 e0       	ldi	r31, 0x07	; 7
    1fa6:	80 81       	ld	r24, Z
    1fa8:	82 60       	ori	r24, 0x02	; 2
    1faa:	80 83       	st	Z, r24
    1fac:	e3 e3       	ldi	r30, 0x33	; 51
    1fae:	f7 e0       	ldi	r31, 0x07	; 7
    1fb0:	80 81       	ld	r24, Z
    1fb2:	82 60       	ori	r24, 0x02	; 2
    1fb4:	80 83       	st	Z, r24
    1fb6:	15 c0       	rjmp	.+42     	; 0x1fe2 <SaSetInterrupt+0x96>
	case PIN3_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN4CTRL |= PORT_ISC_FALLING_gc; break;
    1fb8:	e2 e3       	ldi	r30, 0x32	; 50
    1fba:	f7 e0       	ldi	r31, 0x07	; 7
    1fbc:	80 81       	ld	r24, Z
    1fbe:	82 60       	ori	r24, 0x02	; 2
    1fc0:	80 83       	st	Z, r24
    1fc2:	e4 e3       	ldi	r30, 0x34	; 52
    1fc4:	f7 e0       	ldi	r31, 0x07	; 7
    1fc6:	80 81       	ld	r24, Z
    1fc8:	82 60       	ori	r24, 0x02	; 2
    1fca:	80 83       	st	Z, r24
    1fcc:	0a c0       	rjmp	.+20     	; 0x1fe2 <SaSetInterrupt+0x96>
	case PIN4_bm: PORTK_PIN2CTRL |= PORT_ISC_FALLING_gc, PORTK_PIN5CTRL |= PORT_ISC_FALLING_gc; break;
    1fce:	e2 e3       	ldi	r30, 0x32	; 50
    1fd0:	f7 e0       	ldi	r31, 0x07	; 7
    1fd2:	80 81       	ld	r24, Z
    1fd4:	82 60       	ori	r24, 0x02	; 2
    1fd6:	80 83       	st	Z, r24
    1fd8:	e5 e3       	ldi	r30, 0x35	; 53
    1fda:	f7 e0       	ldi	r31, 0x07	; 7
    1fdc:	80 81       	ld	r24, Z
    1fde:	82 60       	ori	r24, 0x02	; 2
    1fe0:	80 83       	st	Z, r24
	}

	PORTK_INTCTRL |= PORT_INT1LVL0_bm;	//enable interrupt on PORTK
    1fe2:	e9 e2       	ldi	r30, 0x29	; 41
    1fe4:	f7 e0       	ldi	r31, 0x07	; 7
    1fe6:	80 81       	ld	r24, Z
    1fe8:	84 60       	ori	r24, 0x04	; 4
    1fea:	80 83       	st	Z, r24
    1fec:	08 95       	ret

00001fee <ConfigSorterArm>:
bool SorterarmIsFinnished(){
	return 0;
}

bool ConfigSorterArm(){
	SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
    1fee:	60 e8       	ldi	r22, 0x80	; 128
    1ff0:	80 e4       	ldi	r24, 0x40	; 64
    1ff2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <SaSetInput>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ff6:	2f e7       	ldi	r18, 0x7F	; 127
    1ff8:	82 e3       	ldi	r24, 0x32	; 50
    1ffa:	92 e0       	ldi	r25, 0x02	; 2
    1ffc:	21 50       	subi	r18, 0x01	; 1
    1ffe:	80 40       	sbci	r24, 0x00	; 0
    2000:	90 40       	sbci	r25, 0x00	; 0
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <ConfigSorterArm+0xe>
    2004:	00 c0       	rjmp	.+0      	; 0x2006 <ConfigSorterArm+0x18>
    2006:	00 00       	nop
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
    2008:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    200c:	86 fd       	sbrc	r24, 6
    200e:	27 c0       	rjmp	.+78     	; 0x205e <ConfigSorterArm+0x70>
    2010:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <saDirection>
    2014:	81 11       	cpse	r24, r1
    2016:	28 c0       	rjmp	.+80     	; 0x2068 <ConfigSorterArm+0x7a>
    2018:	22 c0       	rjmp	.+68     	; 0x205e <ConfigSorterArm+0x70>
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
    201a:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <saDirection>
    201e:	81 11       	cpse	r24, r1
    2020:	27 c0       	rjmp	.+78     	; 0x2070 <ConfigSorterArm+0x82>
    2022:	15 c0       	rjmp	.+42     	; 0x204e <ConfigSorterArm+0x60>
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    2024:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <saIsRight>
    2028:	81 11       	cpse	r24, r1
    202a:	17 c0       	rjmp	.+46     	; 0x205a <ConfigSorterArm+0x6c>
    202c:	25 c0       	rjmp	.+74     	; 0x2078 <ConfigSorterArm+0x8a>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    202e:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <saDirection>
    2032:	81 11       	cpse	r24, r1
    2034:	0c c0       	rjmp	.+24     	; 0x204e <ConfigSorterArm+0x60>
    2036:	3a c0       	rjmp	.+116    	; 0x20ac <ConfigSorterArm+0xbe>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2038:	80 91 fa 23 	lds	r24, 0x23FA	; 0x8023fa <saDirection>
    203c:	81 11       	cpse	r24, r1
    203e:	29 c0       	rjmp	.+82     	; 0x2092 <ConfigSorterArm+0xa4>
    2040:	24 c0       	rjmp	.+72     	; 0x208a <ConfigSorterArm+0x9c>
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    2042:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2046:	88 23       	and	r24, r24
    2048:	54 f1       	brlt	.+84     	; 0x209e <ConfigSorterArm+0xb0>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	08 95       	ret
		saIsRight = false;
		Start = 1;
	}
		
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
    204e:	60 e8       	ldi	r22, 0x80	; 128
    2050:	80 e4       	ldi	r24, 0x40	; 64
    2052:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <SaSetInterrupt>
		return 1; // Sorteram mag starten
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	08 95       	ret
	}
	else {
		return 0; // Sorterarm mag niet starten
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	08 95       	ret
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
    205e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2062:	86 ff       	sbrs	r24, 6
    2064:	da cf       	rjmp	.-76     	; 0x201a <ConfigSorterArm+0x2c>
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <ConfigSorterArm+0x82>
	_delay_ms(30); // Debounce tijd
	
	bool Start = 0; // Sorterarm mag starten of niet
	
	if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 1)){ // Sorterarm is links en wil naar links, niet mogelijk
		saIsLeft = true;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	80 93 f9 23 	sts	0x23F9, r24	; 0x8023f9 <saIsLeft>
    206e:	1c c0       	rjmp	.+56     	; 0x20a8 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if (!(PORTK_IN & sa1.switch_pin_left) && (saDirection == 0)){ // Sorterarm is links en wil naar rechts, mogelijk
		Start = 1;
	}
	else if ((saIsLeft == true) && (saIsRight == true)){
    2070:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <saIsLeft>
    2074:	81 11       	cpse	r24, r1
    2076:	d6 cf       	rjmp	.-84     	; 0x2024 <ConfigSorterArm+0x36>
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
    2078:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    207c:	88 23       	and	r24, r24
    207e:	bc f6       	brge	.-82     	; 0x202e <ConfigSorterArm+0x40>
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    2080:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2084:	88 23       	and	r24, r24
    2086:	c4 f6       	brge	.-80     	; 0x2038 <ConfigSorterArm+0x4a>
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <ConfigSorterArm+0xa4>
		saIsRight = true;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	80 93 f8 23 	sts	0x23F8, r24	; 0x8023f8 <saIsRight>
    2090:	0b c0       	rjmp	.+22     	; 0x20a8 <ConfigSorterArm+0xba>
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
    2092:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2096:	86 fd       	sbrc	r24, 6
    2098:	d4 cf       	rjmp	.-88     	; 0x2042 <ConfigSorterArm+0x54>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	08 95       	ret
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
		saIsRight = true;
		Start = 0;
	}
	else if ((PORTK_IN & sa1.switch_pin_left) && (PORTK_IN & sa1.switch_pin_right)){ // Sorterarm is niet links of rechts, mogelijk
		saIsLeft = false;
    209e:	10 92 f9 23 	sts	0x23F9, r1	; 0x8023f9 <saIsLeft>
		saIsRight = false;
    20a2:	10 92 f8 23 	sts	0x23F8, r1	; 0x8023f8 <saIsRight>
    20a6:	d3 cf       	rjmp	.-90     	; 0x204e <ConfigSorterArm+0x60>
	if (Start == 1){
		SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right); // Stel Sorterarm in om interrupts te genereren 
		return 1; // Sorteram mag starten
	}
	else {
		return 0; // Sorterarm mag niet starten
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	08 95       	ret
		Start = 0; // Bijde zijn waar, is niet mogelijk
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 1)){ // Sorterarm is rechts en wil naar links, mogelijk
		Start = 1;
	}
	else if (!(PORTK_IN & sa1.switch_pin_right) && (saDirection == 0)){ // Sorterarm is rechts en wil naar rechts, niet mogelijk
    20ac:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    20b0:	88 23       	and	r24, r24
    20b2:	5c f7       	brge	.-42     	; 0x208a <ConfigSorterArm+0x9c>
    20b4:	ee cf       	rjmp	.-36     	; 0x2092 <ConfigSorterArm+0xa4>

000020b6 <MoveSorterArm>:
}


/* beweeg stepper oneindig */
void MoveSorterArm(bool direction)
{
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	28 97       	sbiw	r28, 0x08	; 8
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	f8 2e       	mov	r15, r24
	if (ConfigSorterArm() == 1){
    20cc:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <ConfigSorterArm>
    20d0:	88 23       	and	r24, r24
    20d2:	21 f1       	breq	.+72     	; 0x211c <MoveSorterArm+0x66>
		saDirection = direction;
    20d4:	f0 92 fa 23 	sts	0x23FA, r15	; 0x8023fa <saDirection>
		uint16_t motor_id = SORTER_MOTOR_ID;
		uint16_t motor_speed = 300;
		uint16_t steps = 5000;

		char directiondata[] = { direction };
    20d8:	f8 86       	std	Y+8, r15	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    20da:	00 eb       	ldi	r16, 0xB0	; 176
    20dc:	1a e0       	ldi	r17, 0x0A	; 10
    20de:	27 e0       	ldi	r18, 0x07	; 7
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	be 01       	movw	r22, r28
    20e4:	68 5f       	subi	r22, 0xF8	; 248
    20e6:	7f 4f       	sbci	r23, 0xFF	; 255
    20e8:	8a e4       	ldi	r24, 0x4A	; 74
    20ea:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    20ee:	be 01       	movw	r22, r28
    20f0:	6f 5f       	subi	r22, 0xFF	; 255
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	87 e0       	ldi	r24, 0x07	; 7
    20f6:	fb 01       	movw	r30, r22
    20f8:	11 92       	st	Z+, r1
    20fa:	8a 95       	dec	r24
    20fc:	e9 f7       	brne	.-6      	; 0x20f8 <MoveSorterArm+0x42>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	8f 83       	std	Y+7, r24	; 0x07
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	8c e2       	ldi	r24, 0x2C	; 44
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	83 e1       	ldi	r24, 0x13	; 19
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	88 e8       	ldi	r24, 0x88	; 136
    210e:	8c 83       	std	Y+4, r24	; 0x04
    2110:	fd 82       	std	Y+5, r15	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2112:	27 e0       	ldi	r18, 0x07	; 7
    2114:	47 e0       	ldi	r20, 0x07	; 7
    2116:	86 e4       	ldi	r24, 0x46	; 70
    2118:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		}

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}
    211c:	28 96       	adiw	r28, 0x08	; 8
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	df 91       	pop	r29
    2124:	cf 91       	pop	r28
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	08 95       	ret

0000212e <HomeSorterArm>:
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
    212e:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <saIsLeft>
    2132:	88 23       	and	r24, r24
    2134:	29 f0       	breq	.+10     	; 0x2140 <HomeSorterArm+0x12>
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
    2136:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <saIsRight>
    213a:	88 23       	and	r24, r24
    213c:	49 f0       	breq	.+18     	; 0x2150 <HomeSorterArm+0x22>
    213e:	08 95       	ret


void HomeSorterArm()
{
	while (saIsLeft == false) {
		MoveSorterArm(0);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <MoveSorterArm>
}


void HomeSorterArm()
{
	while (saIsLeft == false) {
    2146:	80 91 f9 23 	lds	r24, 0x23F9	; 0x8023f9 <saIsLeft>
    214a:	88 23       	and	r24, r24
    214c:	c9 f3       	breq	.-14     	; 0x2140 <HomeSorterArm+0x12>
    214e:	f3 cf       	rjmp	.-26     	; 0x2136 <HomeSorterArm+0x8>
	}
	


	while (saIsRight == false) {
		MoveSorterArm(1);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <MoveSorterArm>
		MoveSorterArm(0);
	}
	


	while (saIsRight == false) {
    2156:	80 91 f8 23 	lds	r24, 0x23F8	; 0x8023f8 <saIsRight>
    215a:	88 23       	and	r24, r24
    215c:	c9 f3       	breq	.-14     	; 0x2150 <HomeSorterArm+0x22>
    215e:	08 95       	ret

00002160 <MoveSorterArmTo>:

	/* https://stackoverflow.com/questions/11193800/c-bit-operations-copy-one-bit-from-one-byte-to-another-byte */
	// sa_direction = (sa_direction & ~(sa->switch_pin)) | (((uint8_t)direction << __builtin_ctz(sa->switch_pin)) & sa->switch_pin);
}

void MoveSorterArmTo(uint16_t toPosition){
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	28 97       	sbiw	r28, 0x08	; 8
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	8c 01       	movw	r16, r24
	bool direction;
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
    217a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <ConfigSorterArm>
    217e:	88 23       	and	r24, r24
    2180:	69 f1       	breq	.+90     	; 0x21dc <MoveSorterArmTo+0x7c>
	
		if (toPosition <= sa1.position){
    2182:	01 15       	cp	r16, r1
    2184:	11 05       	cpc	r17, r1
    2186:	31 f0       	breq	.+12     	; 0x2194 <MoveSorterArmTo+0x34>
			direction = 1;
			steps = toPosition - sa1.position;
		}
		else if (toPosition >= sa1.position){
			direction = 0;
			steps = sa1.position - toPosition;
    2188:	ee 24       	eor	r14, r14
    218a:	ff 24       	eor	r15, r15
    218c:	e0 1a       	sub	r14, r16
    218e:	f1 0a       	sbc	r15, r17
		if (toPosition <= sa1.position){
			direction = 1;
			steps = toPosition - sa1.position;
		}
		else if (toPosition >= sa1.position){
			direction = 0;
    2190:	d1 2c       	mov	r13, r1
    2192:	04 c0       	rjmp	.+8      	; 0x219c <MoveSorterArmTo+0x3c>
	
	if (ConfigSorterArm() == 1){
	
		if (toPosition <= sa1.position){
			direction = 1;
			steps = toPosition - sa1.position;
    2194:	e1 2c       	mov	r14, r1
    2196:	f1 2c       	mov	r15, r1
	uint16_t steps;
	
	if (ConfigSorterArm() == 1){
	
		if (toPosition <= sa1.position){
			direction = 1;
    2198:	dd 24       	eor	r13, r13
    219a:	d3 94       	inc	r13
		}
	
		uint16_t motor_id = SORTER_MOTOR_ID;
		uint16_t motor_speed = 400;
	
		char directiondata[] = { direction };
    219c:	d8 86       	std	Y+8, r13	; 0x08
		stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    219e:	00 eb       	ldi	r16, 0xB0	; 176
    21a0:	1a e0       	ldi	r17, 0x0A	; 10
    21a2:	27 e0       	ldi	r18, 0x07	; 7
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	be 01       	movw	r22, r28
    21a8:	68 5f       	subi	r22, 0xF8	; 248
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	8a e4       	ldi	r24, 0x4A	; 74
    21ae:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
		char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    21b2:	be 01       	movw	r22, r28
    21b4:	6f 5f       	subi	r22, 0xFF	; 255
    21b6:	7f 4f       	sbci	r23, 0xFF	; 255
    21b8:	87 e0       	ldi	r24, 0x07	; 7
    21ba:	fb 01       	movw	r30, r22
    21bc:	11 92       	st	Z+, r1
    21be:	8a 95       	dec	r24
    21c0:	e9 f7       	brne	.-6      	; 0x21bc <MoveSorterArmTo+0x5c>
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	8f 83       	std	Y+7, r24	; 0x07
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	80 e9       	ldi	r24, 0x90	; 144
    21ca:	8a 83       	std	Y+2, r24	; 0x02
    21cc:	fb 82       	std	Y+3, r15	; 0x03
    21ce:	ec 82       	std	Y+4, r14	; 0x04
    21d0:	dd 82       	std	Y+5, r13	; 0x05
		stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    21d2:	27 e0       	ldi	r18, 0x07	; 7
    21d4:	47 e0       	ldi	r20, 0x07	; 7
    21d6:	86 e4       	ldi	r24, 0x46	; 70
    21d8:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    21dc:	28 96       	adiw	r28, 0x08	; 8
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	08 95       	ret

000021f2 <MoveSorterArmDistance>:

void MoveSorterArmDistance(bool direction, uint16_t steps){
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
    21fc:	cf 93       	push	r28
    21fe:	df 93       	push	r29
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	28 97       	sbiw	r28, 0x08	; 8
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	f8 2e       	mov	r15, r24
    220c:	e6 2e       	mov	r14, r22
    220e:	d7 2e       	mov	r13, r23
	
	if (ConfigSorterArm() == 1){
    2210:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <ConfigSorterArm>
    2214:	88 23       	and	r24, r24
    2216:	01 f1       	breq	.+64     	; 0x2258 <MoveSorterArmDistance+0x66>
	uint16_t motor_id = SORTER_MOTOR_ID;
	uint16_t motor_speed = 300;

	char directiondata[] = { direction };
    2218:	f8 86       	std	Y+8, r15	; 0x08
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    221a:	00 eb       	ldi	r16, 0xB0	; 176
    221c:	1a e0       	ldi	r17, 0x0A	; 10
    221e:	27 e0       	ldi	r18, 0x07	; 7
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	be 01       	movw	r22, r28
    2224:	68 5f       	subi	r22, 0xF8	; 248
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	8a e4       	ldi	r24, 0x4A	; 74
    222a:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { (uint8_t)(motor_speed >> 8),(uint8_t)motor_speed,(uint8_t)(steps >> 8),(uint8_t)steps,direction,MOTOR_STEP_FULL,MOTOR_ON };
    222e:	be 01       	movw	r22, r28
    2230:	6f 5f       	subi	r22, 0xFF	; 255
    2232:	7f 4f       	sbci	r23, 0xFF	; 255
    2234:	87 e0       	ldi	r24, 0x07	; 7
    2236:	fb 01       	movw	r30, r22
    2238:	11 92       	st	Z+, r1
    223a:	8a 95       	dec	r24
    223c:	e9 f7       	brne	.-6      	; 0x2238 <MoveSorterArmDistance+0x46>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	8f 83       	std	Y+7, r24	; 0x07
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	8c e2       	ldi	r24, 0x2C	; 44
    2246:	8a 83       	std	Y+2, r24	; 0x02
    2248:	db 82       	std	Y+3, r13	; 0x03
    224a:	ec 82       	std	Y+4, r14	; 0x04
    224c:	fd 82       	std	Y+5, r15	; 0x05
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    224e:	27 e0       	ldi	r18, 0x07	; 7
    2250:	47 e0       	ldi	r20, 0x07	; 7
    2252:	86 e4       	ldi	r24, 0x46	; 70
    2254:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	}
}
    2258:	28 96       	adiw	r28, 0x08	; 8
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	ff 90       	pop	r15
    2268:	ef 90       	pop	r14
    226a:	df 90       	pop	r13
    226c:	08 95       	ret

0000226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>:
#include "Stepperdriver.h"



void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	d8 2e       	mov	r13, r24
    2280:	7b 01       	movw	r14, r22
    2282:	d4 2f       	mov	r29, r20
    2284:	c2 2e       	mov	r12, r18
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
    2286:	f8 94       	cli
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
    2288:	cc ef       	ldi	r28, 0xFC	; 252
    228a:	c8 1b       	sub	r28, r24
    228c:	c4 1b       	sub	r28, r20
    228e:	c2 1b       	sub	r28, r18
	for(uint8_t i = 0; i < length; i++)
    2290:	44 23       	and	r20, r20
    2292:	69 f0       	breq	.+26     	; 0x22ae <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x40>
    2294:	fb 01       	movw	r30, r22
    2296:	2f ef       	ldi	r18, 0xFF	; 255
    2298:	24 0f       	add	r18, r20
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	2f 5f       	subi	r18, 0xFF	; 255
    229e:	3f 4f       	sbci	r19, 0xFF	; 255
    22a0:	26 0f       	add	r18, r22
    22a2:	37 1f       	adc	r19, r23
	{
		checksum = checksum - data[i];
    22a4:	81 91       	ld	r24, Z+
    22a6:	c8 1b       	sub	r28, r24

void stepperWriteRegister(uint8_t address, const char* data, uint8_t length, uint8_t motorID, USART_struct &USART)
{
	cli(); //global interrupt disable, this function is not re-entrant and should not be interrupted
	uint8_t checksum = 0xFF-motorID-(length+3)-address;
	for(uint8_t i = 0; i < length; i++)
    22a8:	e2 17       	cp	r30, r18
    22aa:	f3 07       	cpc	r31, r19
    22ac:	d9 f7       	brne	.-10     	; 0x22a4 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x36>
	{
		checksum = checksum - data[i];
	}
	
	USART_Transmit(USART, 0xFF); //send 0xFFFF
    22ae:	6f ef       	ldi	r22, 0xFF	; 255
    22b0:	c8 01       	movw	r24, r16
    22b2:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0xFF);
    22b6:	6f ef       	ldi	r22, 0xFF	; 255
    22b8:	c8 01       	movw	r24, r16
    22ba:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, motorID); //send motorID
    22be:	6c 2d       	mov	r22, r12
    22c0:	c8 01       	movw	r24, r16
    22c2:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, length+3); //transmit message length (register instruction+address+data+checksum)
    22c6:	63 e0       	ldi	r22, 0x03	; 3
    22c8:	6d 0f       	add	r22, r29
    22ca:	c8 01       	movw	r24, r16
    22cc:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, 0x00); // instruction (not yet implemented)
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	c8 01       	movw	r24, r16
    22d4:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, address); // send address to start writing
    22d8:	6d 2d       	mov	r22, r13
    22da:	c8 01       	movw	r24, r16
    22dc:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
	USART_Transmit(USART, data, length); //send data to write to registers
    22e0:	4d 2f       	mov	r20, r29
    22e2:	b7 01       	movw	r22, r14
    22e4:	c8 01       	movw	r24, r16
    22e6:	0e 94 8c 09 	call	0x1318	; 0x1318 <_Z14USART_TransmitR12USART_structPKch>
	USART_Transmit(USART, checksum);
    22ea:	6c 2f       	mov	r22, r28
    22ec:	c8 01       	movw	r24, r16
    22ee:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z14USART_TransmitR12USART_structc>
    22f2:	2f e7       	ldi	r18, 0x7F	; 127
    22f4:	82 e3       	ldi	r24, 0x32	; 50
    22f6:	92 e0       	ldi	r25, 0x02	; 2
    22f8:	21 50       	subi	r18, 0x01	; 1
    22fa:	80 40       	sbci	r24, 0x00	; 0
    22fc:	90 40       	sbci	r25, 0x00	; 0
    22fe:	e1 f7       	brne	.-8      	; 0x22f8 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x8a>
    2300:	00 c0       	rjmp	.+0      	; 0x2302 <_Z20stepperWriteRegisterhPKchhR12USART_struct+0x94>
    2302:	00 00       	nop

	_delay_ms(30);
	sei(); //global interrupt enable
    2304:	78 94       	sei
}
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	ff 90       	pop	r15
    2310:	ef 90       	pop	r14
    2312:	df 90       	pop	r13
    2314:	cf 90       	pop	r12
    2316:	08 95       	ret

00002318 <_Z22ChangeDirectionStepperbh>:


void ChangeDirectionStepper(bool direction, uint8_t motor_id)
{
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	1f 92       	push	r1
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	26 2f       	mov	r18, r22
	char directiondata[]={direction};
    2328:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    232a:	00 eb       	ldi	r16, 0xB0	; 176
    232c:	1a e0       	ldi	r17, 0x0A	; 10
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	be 01       	movw	r22, r28
    2332:	6f 5f       	subi	r22, 0xFF	; 255
    2334:	7f 4f       	sbci	r23, 0xFF	; 255
    2336:	8a e4       	ldi	r24, 0x4A	; 74
    2338:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <_Z8MoveBeltbji>:


void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	28 97       	sbiw	r28, 0x08	; 8
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
    2362:	62 30       	cpi	r22, 0x02	; 2
    2364:	71 05       	cpc	r23, r1
    2366:	61 f0       	breq	.+24     	; 0x2380 <_Z8MoveBeltbji+0x38>
    2368:	20 f4       	brcc	.+8      	; 0x2372 <_Z8MoveBeltbji+0x2a>
    236a:	61 30       	cpi	r22, 0x01	; 1
    236c:	71 05       	cpc	r23, r1
    236e:	a9 f0       	breq	.+42     	; 0x239a <_Z8MoveBeltbji+0x52>
    2370:	39 c0       	rjmp	.+114    	; 0x23e4 <_Z8MoveBeltbji+0x9c>
    2372:	63 30       	cpi	r22, 0x03	; 3
    2374:	71 05       	cpc	r23, r1
    2376:	41 f0       	breq	.+16     	; 0x2388 <_Z8MoveBeltbji+0x40>
    2378:	64 30       	cpi	r22, 0x04	; 4
    237a:	71 05       	cpc	r23, r1
    237c:	51 f0       	breq	.+20     	; 0x2392 <_Z8MoveBeltbji+0x4a>
    237e:	32 c0       	rjmp	.+100    	; 0x23e4 <_Z8MoveBeltbji+0x9c>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    2380:	68 94       	set
    2382:	cc 24       	eor	r12, r12
    2384:	c1 f8       	bld	r12, 1
    2386:	0b c0       	rjmp	.+22     	; 0x239e <_Z8MoveBeltbji+0x56>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    2388:	0f 2e       	mov	r0, r31
    238a:	f3 e0       	ldi	r31, 0x03	; 3
    238c:	cf 2e       	mov	r12, r31
    238e:	f0 2d       	mov	r31, r0
    2390:	06 c0       	rjmp	.+12     	; 0x239e <_Z8MoveBeltbji+0x56>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    2392:	68 94       	set
    2394:	cc 24       	eor	r12, r12
    2396:	c2 f8       	bld	r12, 2
    2398:	02 c0       	rjmp	.+4      	; 0x239e <_Z8MoveBeltbji+0x56>
void MoveBelt(bool direction, uint16_t i, int16_t speed)
{
	uint8_t motor_id;
	//Only move when 'i' has a number that is a Belt motor ID
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
    239a:	cc 24       	eor	r12, r12
    239c:	c3 94       	inc	r12
    239e:	d5 2e       	mov	r13, r21
    23a0:	e4 2e       	mov	r14, r20
    23a2:	f8 2e       	mov	r15, r24
		default: return;
	}
	//Convert speed from uint16_t to byte array:
	char speedData[2]={(char)((speed>>8)&0xff), (char)(speed&0xff)};
	//Convert bool to byte array, could this be a typecast instead (and would that make a difference)
	char directiondata[]={direction};
    23a4:	89 83       	std	Y+1, r24	; 0x01
	//Write direction data to the direction register
	stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),motor_id, USARTE1);
    23a6:	00 eb       	ldi	r16, 0xB0	; 176
    23a8:	1a e0       	ldi	r17, 0x0A	; 10
    23aa:	2c 2d       	mov	r18, r12
    23ac:	41 e0       	ldi	r20, 0x01	; 1
    23ae:	be 01       	movw	r22, r28
    23b0:	6f 5f       	subi	r22, 0xFF	; 255
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	8a e4       	ldi	r24, 0x4A	; 74
    23b6:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	//Write the remaining data:
	char data[]={speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON};
    23ba:	be 01       	movw	r22, r28
    23bc:	6e 5f       	subi	r22, 0xFE	; 254
    23be:	7f 4f       	sbci	r23, 0xFF	; 255
    23c0:	87 e0       	ldi	r24, 0x07	; 7
    23c2:	fb 01       	movw	r30, r22
    23c4:	11 92       	st	Z+, r1
    23c6:	8a 95       	dec	r24
    23c8:	e9 f7       	brne	.-6      	; 0x23c4 <_Z8MoveBeltbji+0x7c>
    23ca:	8f ef       	ldi	r24, 0xFF	; 255
    23cc:	8c 83       	std	Y+4, r24	; 0x04
    23ce:	8d 83       	std	Y+5, r24	; 0x05
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	88 87       	std	Y+8, r24	; 0x08
    23d4:	da 82       	std	Y+2, r13	; 0x02
    23d6:	eb 82       	std	Y+3, r14	; 0x03
    23d8:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),motor_id,USARTE1); //This write operation also contains direction data? Why is the other one still needed?
    23da:	2c 2d       	mov	r18, r12
    23dc:	47 e0       	ldi	r20, 0x07	; 7
    23de:	86 e4       	ldi	r24, 0x46	; 70
    23e0:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    23e4:	28 96       	adiw	r28, 0x08	; 8
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	de bf       	out	0x3e, r29	; 62
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	08 95       	ret

000023fc <_Z8StopBeltj>:


void StopBelt(uint16_t i)
{
    23fc:	0f 93       	push	r16
    23fe:	1f 93       	push	r17
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	1f 92       	push	r1
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    240a:	82 30       	cpi	r24, 0x02	; 2
    240c:	91 05       	cpc	r25, r1
    240e:	51 f0       	breq	.+20     	; 0x2424 <_Z8StopBeltj+0x28>
    2410:	18 f4       	brcc	.+6      	; 0x2418 <_Z8StopBeltj+0x1c>
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	69 f0       	breq	.+26     	; 0x2430 <_Z8StopBeltj+0x34>
    2416:	17 c0       	rjmp	.+46     	; 0x2446 <_Z8StopBeltj+0x4a>
    2418:	83 30       	cpi	r24, 0x03	; 3
    241a:	91 05       	cpc	r25, r1
    241c:	29 f0       	breq	.+10     	; 0x2428 <_Z8StopBeltj+0x2c>
    241e:	04 97       	sbiw	r24, 0x04	; 4
    2420:	29 f0       	breq	.+10     	; 0x242c <_Z8StopBeltj+0x30>
    2422:	11 c0       	rjmp	.+34     	; 0x2446 <_Z8StopBeltj+0x4a>
		case 1: motor_id = BELT_1_MOTOR_ID; break;
		case 2: motor_id = BELT_2_MOTOR_ID; break;
    2424:	22 e0       	ldi	r18, 0x02	; 2
    2426:	05 c0       	rjmp	.+10     	; 0x2432 <_Z8StopBeltj+0x36>
		case 3: motor_id = BELT_3_MOTOR_ID; break;
    2428:	23 e0       	ldi	r18, 0x03	; 3
    242a:	03 c0       	rjmp	.+6      	; 0x2432 <_Z8StopBeltj+0x36>
		case 4: motor_id = BELT_4_MOTOR_ID; break;
    242c:	24 e0       	ldi	r18, 0x04	; 4
    242e:	01 c0       	rjmp	.+2      	; 0x2432 <_Z8StopBeltj+0x36>

void StopBelt(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = BELT_1_MOTOR_ID; break;
    2430:	21 e0       	ldi	r18, 0x01	; 1
		case 2: motor_id = BELT_2_MOTOR_ID; break;
		case 3: motor_id = BELT_3_MOTOR_ID; break;
		case 4: motor_id = BELT_4_MOTOR_ID; break;
		default: return;
	}
	char data[]={MOTOR_OFF};
    2432:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data)/sizeof(*data),motor_id,USARTE1);
    2434:	00 eb       	ldi	r16, 0xB0	; 176
    2436:	1a e0       	ldi	r17, 0x0A	; 10
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	be 01       	movw	r22, r28
    243c:	6f 5f       	subi	r22, 0xFF	; 255
    243e:	7f 4f       	sbci	r23, 0xFF	; 255
    2440:	8c e4       	ldi	r24, 0x4C	; 76
    2442:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    2446:	0f 90       	pop	r0
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <_Z13MoveTurntablebji>:


void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	28 97       	sbiw	r28, 0x08	; 8
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id;
	switch(i) {
    246c:	61 30       	cpi	r22, 0x01	; 1
    246e:	71 05       	cpc	r23, r1
    2470:	41 f0       	breq	.+16     	; 0x2482 <_Z13MoveTurntablebji+0x30>
    2472:	62 30       	cpi	r22, 0x02	; 2
    2474:	71 05       	cpc	r23, r1
    2476:	71 f5       	brne	.+92     	; 0x24d4 <_Z13MoveTurntablebji+0x82>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    2478:	0f 2e       	mov	r0, r31
    247a:	f6 e0       	ldi	r31, 0x06	; 6
    247c:	cf 2e       	mov	r12, r31
    247e:	f0 2d       	mov	r31, r0
    2480:	04 c0       	rjmp	.+8      	; 0x248a <_Z13MoveTurntablebji+0x38>

void MoveTurntable(bool direction, uint16_t i, int16_t speed )
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
    2482:	0f 2e       	mov	r0, r31
    2484:	f5 e0       	ldi	r31, 0x05	; 5
    2486:	cf 2e       	mov	r12, r31
    2488:	f0 2d       	mov	r31, r0
    248a:	d5 2e       	mov	r13, r21
    248c:	e4 2e       	mov	r14, r20
    248e:	f8 2e       	mov	r15, r24
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
    2490:	89 83       	std	Y+1, r24	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    2492:	00 eb       	ldi	r16, 0xB0	; 176
    2494:	1a e0       	ldi	r17, 0x0A	; 10
    2496:	2c 2d       	mov	r18, r12
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	be 01       	movw	r22, r28
    249c:	6f 5f       	subi	r22, 0xFF	; 255
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	8a e4       	ldi	r24, 0x4A	; 74
    24a2:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_QUARTER,MOTOR_ON }; // Turntable's draaien op 1/4 step mode, hierdoor kunnen de motoreren soepeler draaien
    24a6:	be 01       	movw	r22, r28
    24a8:	6e 5f       	subi	r22, 0xFE	; 254
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	87 e0       	ldi	r24, 0x07	; 7
    24ae:	fb 01       	movw	r30, r22
    24b0:	11 92       	st	Z+, r1
    24b2:	8a 95       	dec	r24
    24b4:	e9 f7       	brne	.-6      	; 0x24b0 <_Z13MoveTurntablebji+0x5e>
    24b6:	8f ef       	ldi	r24, 0xFF	; 255
    24b8:	8c 83       	std	Y+4, r24	; 0x04
    24ba:	8d 83       	std	Y+5, r24	; 0x05
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	8f 83       	std	Y+7, r24	; 0x07
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	88 87       	std	Y+8, r24	; 0x08
    24c4:	da 82       	std	Y+2, r13	; 0x02
    24c6:	eb 82       	std	Y+3, r14	; 0x03
    24c8:	fe 82       	std	Y+6, r15	; 0x06
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    24ca:	2c 2d       	mov	r18, r12
    24cc:	47 e0       	ldi	r20, 0x07	; 7
    24ce:	86 e4       	ldi	r24, 0x46	; 70
    24d0:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    24d4:	28 96       	adiw	r28, 0x08	; 8
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	ff 90       	pop	r15
    24e4:	ef 90       	pop	r14
    24e6:	df 90       	pop	r13
    24e8:	cf 90       	pop	r12
    24ea:	08 95       	ret

000024ec <_Z13StopTurntablej>:


void StopTurntable(uint16_t i)
{
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	1f 92       	push	r1
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id;
	switch(i) {
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	21 f0       	breq	.+8      	; 0x2508 <_Z13StopTurntablej+0x1c>
    2500:	02 97       	sbiw	r24, 0x02	; 2
    2502:	69 f4       	brne	.+26     	; 0x251e <_Z13StopTurntablej+0x32>
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
    2504:	26 e0       	ldi	r18, 0x06	; 6
    2506:	01 c0       	rjmp	.+2      	; 0x250a <_Z13StopTurntablej+0x1e>

void StopTurntable(uint16_t i)
{
	uint8_t motor_id;
	switch(i) {
		case 1: motor_id = TURNTABLE_1_MOTOR_ID; break;
    2508:	25 e0       	ldi	r18, 0x05	; 5
		case 2: motor_id = TURNTABLE_2_MOTOR_ID; break;
		default: return;
	}

	char data[] = { MOTOR_OFF };
    250a:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    250c:	00 eb       	ldi	r16, 0xB0	; 176
    250e:	1a e0       	ldi	r17, 0x0A	; 10
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	be 01       	movw	r22, r28
    2514:	6f 5f       	subi	r22, 0xFF	; 255
    2516:	7f 4f       	sbci	r23, 0xFF	; 255
    2518:	8c e4       	ldi	r24, 0x4C	; 76
    251a:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    251e:	0f 90       	pop	r0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	08 95       	ret

0000252a <_Z13DemoTestBlockv>:


// Test Code om uit te zoeken hoe een motor gestart moet worden op adres 0x0A
void DemoTestBlock() {
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	28 97       	sbiw	r28, 0x08	; 8
    2538:	cd bf       	out	0x3d, r28	; 61
    253a:	de bf       	out	0x3e, r29	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID; // Dit zou 0x0A moeten zijn
	int16_t speed = 1000;
	bool direction = 0;
	
	char speedData[2] = { (char)((speed >> 8) & 0xff), (char)(speed & 0xff) };
	char directiondata[] = { direction };
    253c:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(DIRECTION_REG, directiondata, sizeof(directiondata) / sizeof(*directiondata), motor_id, USARTE1);
    253e:	00 eb       	ldi	r16, 0xB0	; 176
    2540:	1a e0       	ldi	r17, 0x0A	; 10
    2542:	2a e0       	ldi	r18, 0x0A	; 10
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	be 01       	movw	r22, r28
    2548:	6f 5f       	subi	r22, 0xFF	; 255
    254a:	7f 4f       	sbci	r23, 0xFF	; 255
    254c:	8a e4       	ldi	r24, 0x4A	; 74
    254e:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
	char data[] = { speedData[0], speedData[1],0xFF,0xFF,direction,MOTOR_STEP_FULL,MOTOR_ON };
    2552:	be 01       	movw	r22, r28
    2554:	6e 5f       	subi	r22, 0xFE	; 254
    2556:	7f 4f       	sbci	r23, 0xFF	; 255
    2558:	87 e0       	ldi	r24, 0x07	; 7
    255a:	fb 01       	movw	r30, r22
    255c:	11 92       	st	Z+, r1
    255e:	8a 95       	dec	r24
    2560:	e9 f7       	brne	.-6      	; 0x255c <_Z13DemoTestBlockv+0x32>
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	8c 83       	std	Y+4, r24	; 0x04
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	88 87       	std	Y+8, r24	; 0x08
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	8a 83       	std	Y+2, r24	; 0x02
    2570:	88 ee       	ldi	r24, 0xE8	; 232
    2572:	8b 83       	std	Y+3, r24	; 0x03
	stepperWriteRegister(STEPS_PS_HREG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    2574:	2a e0       	ldi	r18, 0x0A	; 10
    2576:	47 e0       	ldi	r20, 0x07	; 7
    2578:	86 e4       	ldi	r24, 0x46	; 70
    257a:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    257e:	28 96       	adiw	r28, 0x08	; 8
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	08 95       	ret

0000258e <_Z17StopDemoTestBlockv>:


// Test code om de motor op TEST_DEMO_MOTOR_ID weer te stoppen
void StopDemoTestBlock() {
    258e:	0f 93       	push	r16
    2590:	1f 93       	push	r17
    2592:	cf 93       	push	r28
    2594:	df 93       	push	r29
    2596:	1f 92       	push	r1
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	uint8_t motor_id = TEST_DEMO_MOTOR_ID;
	char data[] = { MOTOR_OFF };
    259c:	19 82       	std	Y+1, r1	; 0x01
	stepperWriteRegister(MOTOR_ENABLE_REG, data, sizeof(data) / sizeof(*data), motor_id, USARTE1);
    259e:	00 eb       	ldi	r16, 0xB0	; 176
    25a0:	1a e0       	ldi	r17, 0x0A	; 10
    25a2:	2a e0       	ldi	r18, 0x0A	; 10
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	be 01       	movw	r22, r28
    25a8:	6f 5f       	subi	r22, 0xFF	; 255
    25aa:	7f 4f       	sbci	r23, 0xFF	; 255
    25ac:	8c e4       	ldi	r24, 0x4C	; 76
    25ae:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
}
    25b2:	0f 90       	pop	r0
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	08 95       	ret

000025be <_Z10SetAddresshh>:


// Change the address of a motor
void SetAddress(uint8_t from, uint8_t to) {
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29
    25c6:	1f 92       	push	r1
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
	uint16_t motor_id = from; // Old address
	char regdata = to; // New address
    25cc:	69 83       	std	Y+1, r22	; 0x01
	stepperWriteRegister(BUS_ADDRESS_REG, 
						 &regdata, 
						 1, // Size of message
						 motor_id, 
						 USARTE1
						 ); //Write new address to motor
    25ce:	00 eb       	ldi	r16, 0xB0	; 176
    25d0:	1a e0       	ldi	r17, 0x0A	; 10
    25d2:	28 2f       	mov	r18, r24
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	be 01       	movw	r22, r28
    25d8:	6f 5f       	subi	r22, 0xFF	; 255
    25da:	7f 4f       	sbci	r23, 0xFF	; 255
    25dc:	85 e0       	ldi	r24, 0x05	; 5
    25de:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <_Z9ToggleLEDv>:
	JMP(ReadColourSensor),
	JMP(SelectColour),
	JMP(set_relay),
};


    25ee:	e7 ee       	ldi	r30, 0xE7	; 231
    25f0:	f6 e0       	ldi	r31, 0x06	; 6
    25f2:	80 81       	ld	r24, Z
    25f4:	80 63       	ori	r24, 0x30	; 48
    25f6:	80 83       	st	Z, r24
    25f8:	08 95       	ret

000025fa <_Z3LEDb>:
void ToggleLED() { PORTH_OUTTGL |= (1<<4)|(1<<5); }
void LED(bool i) {
    25fa:	88 23       	and	r24, r24
    25fc:	31 f0       	breq	.+12     	; 0x260a <_Z3LEDb+0x10>
	if (i) {
    25fe:	e6 ee       	ldi	r30, 0xE6	; 230
    2600:	f6 e0       	ldi	r31, 0x06	; 6
    2602:	80 81       	ld	r24, Z
    2604:	80 63       	ori	r24, 0x30	; 48
    2606:	80 83       	st	Z, r24
    2608:	08 95       	ret
		PORTH_OUTCLR |= (1<<4)|(1<<5);
		} else {
    260a:	e5 ee       	ldi	r30, 0xE5	; 229
    260c:	f6 e0       	ldi	r31, 0x06	; 6
    260e:	80 81       	ld	r24, Z
    2610:	80 63       	ori	r24, 0x30	; 48
    2612:	80 83       	st	Z, r24
    2614:	08 95       	ret

00002616 <_Z9set_relaybh>:
#define RELAY4_OUTCLR	PORTQ_OUTCLR
#define RELAY5_OUTCLR	PORTQ_OUTCLR


void set_relay(bool value, uint8_t relay)
{
    2616:	cf 93       	push	r28
    2618:	df 93       	push	r29
    261a:	d8 2f       	mov	r29, r24
    261c:	c6 2f       	mov	r28, r22
	DEBUG_OUT("Setting a relay!");
    261e:	64 e8       	ldi	r22, 0x84	; 132
    2620:	72 e2       	ldi	r23, 0x22	; 34
    2622:	80 ea       	ldi	r24, 0xA0	; 160
    2624:	99 e0       	ldi	r25, 0x09	; 9
    2626:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	switch (relay)
    262a:	c3 30       	cpi	r28, 0x03	; 3
    262c:	49 f1       	breq	.+82     	; 0x2680 <_Z9set_relaybh+0x6a>
    262e:	28 f4       	brcc	.+10     	; 0x263a <_Z9set_relaybh+0x24>
    2630:	c1 30       	cpi	r28, 0x01	; 1
    2632:	d1 f1       	breq	.+116    	; 0x26a8 <_Z9set_relaybh+0x92>
    2634:	c2 30       	cpi	r28, 0x02	; 2
    2636:	71 f1       	breq	.+92     	; 0x2694 <_Z9set_relaybh+0x7e>
    2638:	40 c0       	rjmp	.+128    	; 0x26ba <_Z9set_relaybh+0xa4>
    263a:	c5 30       	cpi	r28, 0x05	; 5
    263c:	69 f0       	breq	.+26     	; 0x2658 <_Z9set_relaybh+0x42>
    263e:	b0 f0       	brcs	.+44     	; 0x266c <_Z9set_relaybh+0x56>
    2640:	c6 30       	cpi	r28, 0x06	; 6
    2642:	d9 f5       	brne	.+118    	; 0x26ba <_Z9set_relaybh+0xa4>
	{	
		//Use conditional operator to check for SET or CLR for relay:
		//IMPORTANT: In the ULN2803, signal traces get inverted (Relay0 on Atmega pin label is Relay output marked K6, see schematic sheet 5: "Relays_Optocoupers")
		case 6: value ? RELAY0_OUTSET = RELAY0_bm : RELAY0_OUTCLR = RELAY0_bm; break;
    2644:	dd 23       	and	r29, r29
    2646:	21 f0       	breq	.+8      	; 0x2650 <_Z9set_relaybh+0x3a>
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    264e:	35 c0       	rjmp	.+106    	; 0x26ba <_Z9set_relaybh+0xa4>
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    2656:	31 c0       	rjmp	.+98     	; 0x26ba <_Z9set_relaybh+0xa4>
		case 5: value ? RELAY1_OUTSET = RELAY1_bm : RELAY1_OUTCLR = RELAY1_bm; break;
    2658:	dd 23       	and	r29, r29
    265a:	21 f0       	breq	.+8      	; 0x2664 <_Z9set_relaybh+0x4e>
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	80 93 e5 07 	sts	0x07E5, r24	; 0x8007e5 <__TEXT_REGION_LENGTH__+0x7007e5>
    2662:	2b c0       	rjmp	.+86     	; 0x26ba <_Z9set_relaybh+0xa4>
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <__TEXT_REGION_LENGTH__+0x7007e6>
    266a:	27 c0       	rjmp	.+78     	; 0x26ba <_Z9set_relaybh+0xa4>
		case 4: value ? RELAY2_OUTSET = RELAY2_bm : RELAY2_OUTCLR = RELAY2_bm; break;
    266c:	dd 23       	and	r29, r29
    266e:	21 f0       	breq	.+8      	; 0x2678 <_Z9set_relaybh+0x62>
    2670:	88 e0       	ldi	r24, 0x08	; 8
    2672:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    2676:	21 c0       	rjmp	.+66     	; 0x26ba <_Z9set_relaybh+0xa4>
    2678:	88 e0       	ldi	r24, 0x08	; 8
    267a:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    267e:	1d c0       	rjmp	.+58     	; 0x26ba <_Z9set_relaybh+0xa4>
		case 3: value ? RELAY3_OUTSET = RELAY3_bm : RELAY3_OUTCLR = RELAY3_bm; break;
    2680:	dd 23       	and	r29, r29
    2682:	21 f0       	breq	.+8      	; 0x268c <_Z9set_relaybh+0x76>
    2684:	84 e0       	ldi	r24, 0x04	; 4
    2686:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    268a:	17 c0       	rjmp	.+46     	; 0x26ba <_Z9set_relaybh+0xa4>
    268c:	84 e0       	ldi	r24, 0x04	; 4
    268e:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    2692:	13 c0       	rjmp	.+38     	; 0x26ba <_Z9set_relaybh+0xa4>
		case 2: value ? RELAY4_OUTSET = RELAY4_bm : RELAY4_OUTCLR = RELAY4_bm; break;
    2694:	dd 23       	and	r29, r29
    2696:	21 f0       	breq	.+8      	; 0x26a0 <_Z9set_relaybh+0x8a>
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    269e:	0d c0       	rjmp	.+26     	; 0x26ba <_Z9set_relaybh+0xa4>
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <_Z9set_relaybh+0xa4>
		case 1: value ? RELAY5_OUTSET = RELAY5_bm : RELAY5_OUTCLR = RELAY5_bm; break;
    26a8:	dd 23       	and	r29, r29
    26aa:	21 f0       	breq	.+8      	; 0x26b4 <_Z9set_relaybh+0x9e>
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__TEXT_REGION_LENGTH__+0x7007c5>
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <_Z9set_relaybh+0xa4>
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__TEXT_REGION_LENGTH__+0x7007c6>
		default: break;
	}
}
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <_Z8Solenoidhb>:
#define SOLENOID_H_

#include "relays.h"

void Solenoid(uint8_t solenoid, bool InOut)
{
    26c0:	98 2f       	mov	r25, r24
    26c2:	86 2f       	mov	r24, r22
	set_relay(InOut,solenoid);
    26c4:	69 2f       	mov	r22, r25
    26c6:	0e 94 0b 13 	call	0x2616	; 0x2616 <_Z9set_relaybh>
    26ca:	08 95       	ret

000026cc <_Z13PulseSolenoidh>:
}

void PulseSolenoid(uint8_t solenoid)
{
    26cc:	cf 93       	push	r28
    26ce:	c8 2f       	mov	r28, r24
	set_relay(1,solenoid);
    26d0:	68 2f       	mov	r22, r24
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 0b 13 	call	0x2616	; 0x2616 <_Z9set_relaybh>
    26d8:	2f ef       	ldi	r18, 0xFF	; 255
    26da:	85 ea       	ldi	r24, 0xA5	; 165
    26dc:	9e e0       	ldi	r25, 0x0E	; 14
    26de:	21 50       	subi	r18, 0x01	; 1
    26e0:	80 40       	sbci	r24, 0x00	; 0
    26e2:	90 40       	sbci	r25, 0x00	; 0
    26e4:	e1 f7       	brne	.-8      	; 0x26de <_Z13PulseSolenoidh+0x12>
    26e6:	00 c0       	rjmp	.+0      	; 0x26e8 <_Z13PulseSolenoidh+0x1c>
    26e8:	00 00       	nop
	_delay_ms(200);
	set_relay(0,solenoid);
    26ea:	6c 2f       	mov	r22, r28
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	0e 94 0b 13 	call	0x2616	; 0x2616 <_Z9set_relaybh>
}
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <_Z14requestStartedv>:
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
void requestStarted() { TWI_Write(TWIC, Started); }
    26f6:	60 91 fc 23 	lds	r22, 0x23FC	; 0x8023fc <Started>
    26fa:	80 e8       	ldi	r24, 0x80	; 128
    26fc:	94 e0       	ldi	r25, 0x04	; 4
    26fe:	0e 94 95 07 	call	0xf2a	; 0xf2a <_Z9TWI_WriteR10TWI_structh>
    2702:	08 95       	ret

00002704 <_Z13requestResultv>:
void requestResult() { TWI_Write(TWIC, Result); }
    2704:	60 91 fb 23 	lds	r22, 0x23FB	; 0x8023fb <Result>
    2708:	80 e8       	ldi	r24, 0x80	; 128
    270a:	94 e0       	ldi	r25, 0x04	; 4
    270c:	0e 94 95 07 	call	0xf2a	; 0xf2a <_Z9TWI_WriteR10TWI_structh>
    2710:	08 95       	ret

00002712 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	09 f4       	brne	.+2      	; 0x2718 <sysclk_enable_peripheral_clock+0x6>
    2716:	5c c1       	rjmp	.+696    	; 0x29d0 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2718:	80 3c       	cpi	r24, 0xC0	; 192
    271a:	91 05       	cpc	r25, r1
    271c:	29 f4       	brne	.+10     	; 0x2728 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    271e:	60 e1       	ldi	r22, 0x10	; 16
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2726:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2728:	80 34       	cpi	r24, 0x40	; 64
    272a:	24 e0       	ldi	r18, 0x04	; 4
    272c:	92 07       	cpc	r25, r18
    272e:	29 f4       	brne	.+10     	; 0x273a <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2730:	68 e0       	ldi	r22, 0x08	; 8
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2738:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    273a:	81 15       	cp	r24, r1
    273c:	24 e0       	ldi	r18, 0x04	; 4
    273e:	92 07       	cpc	r25, r18
    2740:	29 f4       	brne	.+10     	; 0x274c <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2742:	64 e0       	ldi	r22, 0x04	; 4
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    274a:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    274c:	80 38       	cpi	r24, 0x80	; 128
    274e:	21 e0       	ldi	r18, 0x01	; 1
    2750:	92 07       	cpc	r25, r18
    2752:	29 f4       	brne	.+10     	; 0x275e <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    275c:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    275e:	81 15       	cp	r24, r1
    2760:	21 e0       	ldi	r18, 0x01	; 1
    2762:	92 07       	cpc	r25, r18
    2764:	29 f4       	brne	.+10     	; 0x2770 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2766:	61 e0       	ldi	r22, 0x01	; 1
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    276e:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2770:	80 38       	cpi	r24, 0x80	; 128
    2772:	23 e0       	ldi	r18, 0x03	; 3
    2774:	92 07       	cpc	r25, r18
    2776:	29 f4       	brne	.+10     	; 0x2782 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2778:	61 e0       	ldi	r22, 0x01	; 1
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2780:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2782:	80 39       	cpi	r24, 0x90	; 144
    2784:	23 e0       	ldi	r18, 0x03	; 3
    2786:	92 07       	cpc	r25, r18
    2788:	29 f4       	brne	.+10     	; 0x2794 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2792:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2794:	81 15       	cp	r24, r1
    2796:	22 e0       	ldi	r18, 0x02	; 2
    2798:	92 07       	cpc	r25, r18
    279a:	29 f4       	brne	.+10     	; 0x27a6 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    279c:	62 e0       	ldi	r22, 0x02	; 2
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    27a4:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    27a6:	80 34       	cpi	r24, 0x40	; 64
    27a8:	22 e0       	ldi	r18, 0x02	; 2
    27aa:	92 07       	cpc	r25, r18
    27ac:	29 f4       	brne	.+10     	; 0x27b8 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    27ae:	62 e0       	ldi	r22, 0x02	; 2
    27b0:	82 e0       	ldi	r24, 0x02	; 2
    27b2:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    27b6:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    27b8:	81 15       	cp	r24, r1
    27ba:	23 e0       	ldi	r18, 0x03	; 3
    27bc:	92 07       	cpc	r25, r18
    27be:	29 f4       	brne	.+10     	; 0x27ca <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    27c0:	64 e0       	ldi	r22, 0x04	; 4
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    27c8:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    27ca:	80 32       	cpi	r24, 0x20	; 32
    27cc:	23 e0       	ldi	r18, 0x03	; 3
    27ce:	92 07       	cpc	r25, r18
    27d0:	29 f4       	brne	.+10     	; 0x27dc <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    27d2:	64 e0       	ldi	r22, 0x04	; 4
    27d4:	82 e0       	ldi	r24, 0x02	; 2
    27d6:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    27da:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    27dc:	81 15       	cp	r24, r1
    27de:	28 e0       	ldi	r18, 0x08	; 8
    27e0:	92 07       	cpc	r25, r18
    27e2:	29 f4       	brne	.+10     	; 0x27ee <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    27e4:	61 e0       	ldi	r22, 0x01	; 1
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    27ec:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    27ee:	81 15       	cp	r24, r1
    27f0:	29 e0       	ldi	r18, 0x09	; 9
    27f2:	92 07       	cpc	r25, r18
    27f4:	29 f4       	brne	.+10     	; 0x2800 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	84 e0       	ldi	r24, 0x04	; 4
    27fa:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    27fe:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2800:	81 15       	cp	r24, r1
    2802:	2a e0       	ldi	r18, 0x0A	; 10
    2804:	92 07       	cpc	r25, r18
    2806:	29 f4       	brne	.+10     	; 0x2812 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	85 e0       	ldi	r24, 0x05	; 5
    280c:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2810:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2812:	81 15       	cp	r24, r1
    2814:	2b e0       	ldi	r18, 0x0B	; 11
    2816:	92 07       	cpc	r25, r18
    2818:	29 f4       	brne	.+10     	; 0x2824 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    281a:	61 e0       	ldi	r22, 0x01	; 1
    281c:	86 e0       	ldi	r24, 0x06	; 6
    281e:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2822:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2824:	80 34       	cpi	r24, 0x40	; 64
    2826:	28 e0       	ldi	r18, 0x08	; 8
    2828:	92 07       	cpc	r25, r18
    282a:	29 f4       	brne	.+10     	; 0x2836 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	83 e0       	ldi	r24, 0x03	; 3
    2830:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2834:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2836:	80 34       	cpi	r24, 0x40	; 64
    2838:	29 e0       	ldi	r18, 0x09	; 9
    283a:	92 07       	cpc	r25, r18
    283c:	29 f4       	brne	.+10     	; 0x2848 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    283e:	62 e0       	ldi	r22, 0x02	; 2
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2846:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2848:	80 34       	cpi	r24, 0x40	; 64
    284a:	2a e0       	ldi	r18, 0x0A	; 10
    284c:	92 07       	cpc	r25, r18
    284e:	29 f4       	brne	.+10     	; 0x285a <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	85 e0       	ldi	r24, 0x05	; 5
    2854:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2858:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    285a:	80 34       	cpi	r24, 0x40	; 64
    285c:	2b e0       	ldi	r18, 0x0B	; 11
    285e:	92 07       	cpc	r25, r18
    2860:	29 f4       	brne	.+10     	; 0x286c <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	86 e0       	ldi	r24, 0x06	; 6
    2866:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    286a:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    286c:	80 39       	cpi	r24, 0x90	; 144
    286e:	28 e0       	ldi	r18, 0x08	; 8
    2870:	92 07       	cpc	r25, r18
    2872:	29 f4       	brne	.+10     	; 0x287e <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2874:	64 e0       	ldi	r22, 0x04	; 4
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    287c:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    287e:	80 39       	cpi	r24, 0x90	; 144
    2880:	29 e0       	ldi	r18, 0x09	; 9
    2882:	92 07       	cpc	r25, r18
    2884:	29 f4       	brne	.+10     	; 0x2890 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2886:	64 e0       	ldi	r22, 0x04	; 4
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    288e:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2890:	80 39       	cpi	r24, 0x90	; 144
    2892:	2a e0       	ldi	r18, 0x0A	; 10
    2894:	92 07       	cpc	r25, r18
    2896:	29 f4       	brne	.+10     	; 0x28a2 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2898:	64 e0       	ldi	r22, 0x04	; 4
    289a:	85 e0       	ldi	r24, 0x05	; 5
    289c:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    28a0:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    28a2:	80 39       	cpi	r24, 0x90	; 144
    28a4:	2b e0       	ldi	r18, 0x0B	; 11
    28a6:	92 07       	cpc	r25, r18
    28a8:	29 f4       	brne	.+10     	; 0x28b4 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    28aa:	64 e0       	ldi	r22, 0x04	; 4
    28ac:	86 e0       	ldi	r24, 0x06	; 6
    28ae:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    28b2:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    28b4:	80 3c       	cpi	r24, 0xC0	; 192
    28b6:	28 e0       	ldi	r18, 0x08	; 8
    28b8:	92 07       	cpc	r25, r18
    28ba:	29 f4       	brne	.+10     	; 0x28c6 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    28bc:	68 e0       	ldi	r22, 0x08	; 8
    28be:	83 e0       	ldi	r24, 0x03	; 3
    28c0:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    28c4:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    28c6:	80 3c       	cpi	r24, 0xC0	; 192
    28c8:	29 e0       	ldi	r18, 0x09	; 9
    28ca:	92 07       	cpc	r25, r18
    28cc:	29 f4       	brne	.+10     	; 0x28d8 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    28ce:	68 e0       	ldi	r22, 0x08	; 8
    28d0:	84 e0       	ldi	r24, 0x04	; 4
    28d2:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    28d6:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    28d8:	80 3c       	cpi	r24, 0xC0	; 192
    28da:	2a e0       	ldi	r18, 0x0A	; 10
    28dc:	92 07       	cpc	r25, r18
    28de:	29 f4       	brne	.+10     	; 0x28ea <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    28e0:	68 e0       	ldi	r22, 0x08	; 8
    28e2:	85 e0       	ldi	r24, 0x05	; 5
    28e4:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    28e8:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    28ea:	80 3c       	cpi	r24, 0xC0	; 192
    28ec:	2b e0       	ldi	r18, 0x0B	; 11
    28ee:	92 07       	cpc	r25, r18
    28f0:	29 f4       	brne	.+10     	; 0x28fc <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    28f2:	68 e0       	ldi	r22, 0x08	; 8
    28f4:	86 e0       	ldi	r24, 0x06	; 6
    28f6:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    28fa:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    28fc:	80 3a       	cpi	r24, 0xA0	; 160
    28fe:	28 e0       	ldi	r18, 0x08	; 8
    2900:	92 07       	cpc	r25, r18
    2902:	29 f4       	brne	.+10     	; 0x290e <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2904:	60 e1       	ldi	r22, 0x10	; 16
    2906:	83 e0       	ldi	r24, 0x03	; 3
    2908:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    290c:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    290e:	80 3a       	cpi	r24, 0xA0	; 160
    2910:	29 e0       	ldi	r18, 0x09	; 9
    2912:	92 07       	cpc	r25, r18
    2914:	29 f4       	brne	.+10     	; 0x2920 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2916:	60 e1       	ldi	r22, 0x10	; 16
    2918:	84 e0       	ldi	r24, 0x04	; 4
    291a:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    291e:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2920:	80 3a       	cpi	r24, 0xA0	; 160
    2922:	2a e0       	ldi	r18, 0x0A	; 10
    2924:	92 07       	cpc	r25, r18
    2926:	29 f4       	brne	.+10     	; 0x2932 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2928:	60 e1       	ldi	r22, 0x10	; 16
    292a:	85 e0       	ldi	r24, 0x05	; 5
    292c:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2930:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2932:	80 3a       	cpi	r24, 0xA0	; 160
    2934:	2b e0       	ldi	r18, 0x0B	; 11
    2936:	92 07       	cpc	r25, r18
    2938:	29 f4       	brne	.+10     	; 0x2944 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    293a:	60 e1       	ldi	r22, 0x10	; 16
    293c:	86 e0       	ldi	r24, 0x06	; 6
    293e:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2942:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2944:	80 3b       	cpi	r24, 0xB0	; 176
    2946:	28 e0       	ldi	r18, 0x08	; 8
    2948:	92 07       	cpc	r25, r18
    294a:	29 f4       	brne	.+10     	; 0x2956 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    294c:	60 e2       	ldi	r22, 0x20	; 32
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2954:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2956:	80 3b       	cpi	r24, 0xB0	; 176
    2958:	29 e0       	ldi	r18, 0x09	; 9
    295a:	92 07       	cpc	r25, r18
    295c:	29 f4       	brne	.+10     	; 0x2968 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    295e:	60 e2       	ldi	r22, 0x20	; 32
    2960:	84 e0       	ldi	r24, 0x04	; 4
    2962:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2966:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2968:	80 3b       	cpi	r24, 0xB0	; 176
    296a:	2a e0       	ldi	r18, 0x0A	; 10
    296c:	92 07       	cpc	r25, r18
    296e:	29 f4       	brne	.+10     	; 0x297a <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2970:	60 e2       	ldi	r22, 0x20	; 32
    2972:	85 e0       	ldi	r24, 0x05	; 5
    2974:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    2978:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    297a:	80 3b       	cpi	r24, 0xB0	; 176
    297c:	2b e0       	ldi	r18, 0x0B	; 11
    297e:	92 07       	cpc	r25, r18
    2980:	29 f4       	brne	.+10     	; 0x298c <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2982:	60 e2       	ldi	r22, 0x20	; 32
    2984:	86 e0       	ldi	r24, 0x06	; 6
    2986:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    298a:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    298c:	80 38       	cpi	r24, 0x80	; 128
    298e:	24 e0       	ldi	r18, 0x04	; 4
    2990:	92 07       	cpc	r25, r18
    2992:	29 f4       	brne	.+10     	; 0x299e <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2994:	60 e4       	ldi	r22, 0x40	; 64
    2996:	83 e0       	ldi	r24, 0x03	; 3
    2998:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    299c:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    299e:	80 39       	cpi	r24, 0x90	; 144
    29a0:	24 e0       	ldi	r18, 0x04	; 4
    29a2:	92 07       	cpc	r25, r18
    29a4:	29 f4       	brne	.+10     	; 0x29b0 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    29a6:	60 e4       	ldi	r22, 0x40	; 64
    29a8:	84 e0       	ldi	r24, 0x04	; 4
    29aa:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    29ae:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    29b0:	80 3a       	cpi	r24, 0xA0	; 160
    29b2:	24 e0       	ldi	r18, 0x04	; 4
    29b4:	92 07       	cpc	r25, r18
    29b6:	29 f4       	brne	.+10     	; 0x29c2 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    29b8:	60 e4       	ldi	r22, 0x40	; 64
    29ba:	85 e0       	ldi	r24, 0x05	; 5
    29bc:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    29c0:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    29c2:	80 3b       	cpi	r24, 0xB0	; 176
    29c4:	94 40       	sbci	r25, 0x04	; 4
    29c6:	21 f4       	brne	.+8      	; 0x29d0 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    29c8:	60 e4       	ldi	r22, 0x40	; 64
    29ca:	86 e0       	ldi	r24, 0x06	; 6
    29cc:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
    29d0:	08 95       	ret

000029d2 <_Z12IO_ReadWritebh>:

#ifndef DIGITALIO_H_
#define DIGITALIO_H_

bool IO_ReadWrite(bool value, uint8_t io_port)
{
    29d2:	28 2f       	mov	r18, r24
	switch(io_port)
    29d4:	86 2f       	mov	r24, r22
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	fc 01       	movw	r30, r24
    29da:	31 97       	sbiw	r30, 0x01	; 1
    29dc:	ec 30       	cpi	r30, 0x0C	; 12
    29de:	f1 05       	cpc	r31, r1
    29e0:	08 f0       	brcs	.+2      	; 0x29e4 <_Z12IO_ReadWritebh+0x12>
    29e2:	b6 c0       	rjmp	.+364    	; 0x2b50 <_Z12IO_ReadWritebh+0x17e>
    29e4:	88 27       	eor	r24, r24
    29e6:	e2 50       	subi	r30, 0x02	; 2
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	8f 4f       	sbci	r24, 0xFF	; 255
    29ec:	0c 94 70 2f 	jmp	0x5ee0	; 0x5ee0 <__tablejump2__>
	{
		case 1:
		if (value == true)
    29f0:	22 23       	and	r18, r18
    29f2:	21 f0       	breq	.+8      	; 0x29fc <_Z12IO_ReadWritebh+0x2a>
		{
			PORTK_OUTSET = (1<<PIN7_bp);
    29f4:	80 e8       	ldi	r24, 0x80	; 128
    29f6:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    29fa:	03 c0       	rjmp	.+6      	; 0x2a02 <_Z12IO_ReadWritebh+0x30>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN7_bp);
    29fc:	80 e8       	ldi	r24, 0x80	; 128
    29fe:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN7_bp));
    2a02:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a06:	88 1f       	adc	r24, r24
    2a08:	88 27       	eor	r24, r24
    2a0a:	88 1f       	adc	r24, r24
    2a0c:	08 95       	ret
		break;
		
		case 2:
		if (value == true)
    2a0e:	22 23       	and	r18, r18
    2a10:	21 f0       	breq	.+8      	; 0x2a1a <_Z12IO_ReadWritebh+0x48>
		{
			PORTK_OUTSET = (1<<PIN6_bp);
    2a12:	80 e4       	ldi	r24, 0x40	; 64
    2a14:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a18:	03 c0       	rjmp	.+6      	; 0x2a20 <_Z12IO_ReadWritebh+0x4e>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN6_bp);
    2a1a:	80 e4       	ldi	r24, 0x40	; 64
    2a1c:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN6_bp));
    2a20:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a24:	86 fb       	bst	r24, 6
    2a26:	88 27       	eor	r24, r24
    2a28:	80 f9       	bld	r24, 0
    2a2a:	08 95       	ret
		break;
		
		case 3:
		if (value == true)
    2a2c:	22 23       	and	r18, r18
    2a2e:	21 f0       	breq	.+8      	; 0x2a38 <_Z12IO_ReadWritebh+0x66>
		{
			PORTK_OUTSET = (1<<PIN5_bp);
    2a30:	80 e2       	ldi	r24, 0x20	; 32
    2a32:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a36:	03 c0       	rjmp	.+6      	; 0x2a3e <_Z12IO_ReadWritebh+0x6c>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN5_bp);
    2a38:	80 e2       	ldi	r24, 0x20	; 32
    2a3a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN5_bp));
    2a3e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a42:	85 fb       	bst	r24, 5
    2a44:	88 27       	eor	r24, r24
    2a46:	80 f9       	bld	r24, 0
    2a48:	08 95       	ret
		break;
		
		case 4: //Lift limit switches
		if (value == true)
    2a4a:	22 23       	and	r18, r18
    2a4c:	21 f0       	breq	.+8      	; 0x2a56 <_Z12IO_ReadWritebh+0x84>
		{
			PORTK_OUTSET = (1<<PIN4_bp);
    2a4e:	80 e1       	ldi	r24, 0x10	; 16
    2a50:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <_Z12IO_ReadWritebh+0x8a>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN4_bp);
    2a56:	80 e1       	ldi	r24, 0x10	; 16
    2a58:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN4_bp));
    2a5c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a60:	82 95       	swap	r24
    2a62:	81 70       	andi	r24, 0x01	; 1
    2a64:	08 95       	ret
		break;
		
		case 5:
		if (value == true)
    2a66:	22 23       	and	r18, r18
    2a68:	21 f0       	breq	.+8      	; 0x2a72 <_Z12IO_ReadWritebh+0xa0>
		{
			PORTK_OUTSET = (1<<PIN3_bp);
    2a6a:	88 e0       	ldi	r24, 0x08	; 8
    2a6c:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a70:	03 c0       	rjmp	.+6      	; 0x2a78 <_Z12IO_ReadWritebh+0xa6>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN3_bp);
    2a72:	88 e0       	ldi	r24, 0x08	; 8
    2a74:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN3_bp));
    2a78:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a7c:	83 fb       	bst	r24, 3
    2a7e:	88 27       	eor	r24, r24
    2a80:	80 f9       	bld	r24, 0
    2a82:	08 95       	ret
		break;
		
		case 6:
		if (value == true)
    2a84:	22 23       	and	r18, r18
    2a86:	21 f0       	breq	.+8      	; 0x2a90 <_Z12IO_ReadWritebh+0xbe>
		{
			PORTK_OUTSET = (1<<PIN2_bp);
    2a88:	84 e0       	ldi	r24, 0x04	; 4
    2a8a:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2a8e:	03 c0       	rjmp	.+6      	; 0x2a96 <_Z12IO_ReadWritebh+0xc4>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN2_bp);
    2a90:	84 e0       	ldi	r24, 0x04	; 4
    2a92:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN2_bp));
    2a96:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2a9a:	82 fb       	bst	r24, 2
    2a9c:	88 27       	eor	r24, r24
    2a9e:	80 f9       	bld	r24, 0
    2aa0:	08 95       	ret
		break;
		
		case 7:
		if (value == true)
    2aa2:	22 23       	and	r18, r18
    2aa4:	21 f0       	breq	.+8      	; 0x2aae <_Z12IO_ReadWritebh+0xdc>
		{
			PORTK_OUTSET = (1<<PIN1_bp);
    2aa6:	82 e0       	ldi	r24, 0x02	; 2
    2aa8:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2aac:	03 c0       	rjmp	.+6      	; 0x2ab4 <_Z12IO_ReadWritebh+0xe2>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN1_bp);
    2aae:	82 e0       	ldi	r24, 0x02	; 2
    2ab0:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN1_bp));
    2ab4:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2ab8:	86 95       	lsr	r24
    2aba:	81 70       	andi	r24, 0x01	; 1
    2abc:	08 95       	ret
		break;
		
		case 8:
		if (value == true)
    2abe:	22 23       	and	r18, r18
    2ac0:	21 f0       	breq	.+8      	; 0x2aca <_Z12IO_ReadWritebh+0xf8>
		{
			PORTK_OUTSET = (1<<PIN0_bp);
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <__TEXT_REGION_LENGTH__+0x700725>
    2ac8:	03 c0       	rjmp	.+6      	; 0x2ad0 <_Z12IO_ReadWritebh+0xfe>
		}
		else
		{
			PORTK_OUTCLR = (1<<PIN0_bp);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <__TEXT_REGION_LENGTH__+0x700726>
		}
		return (PORTK_IN &(1<<PIN0_bp));
    2ad0:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <__TEXT_REGION_LENGTH__+0x700728>
    2ad4:	81 70       	andi	r24, 0x01	; 1
    2ad6:	08 95       	ret
		break;
		
		case 9:
		if (value == true)
    2ad8:	22 23       	and	r18, r18
    2ada:	21 f0       	breq	.+8      	; 0x2ae4 <_Z12IO_ReadWritebh+0x112>
		{
			PORTJ_OUTSET = (1<<PIN7_bp);
    2adc:	80 e8       	ldi	r24, 0x80	; 128
    2ade:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2ae2:	03 c0       	rjmp	.+6      	; 0x2aea <_Z12IO_ReadWritebh+0x118>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN7_bp);
    2ae4:	80 e8       	ldi	r24, 0x80	; 128
    2ae6:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN7_bp));
    2aea:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2aee:	88 1f       	adc	r24, r24
    2af0:	88 27       	eor	r24, r24
    2af2:	88 1f       	adc	r24, r24
    2af4:	08 95       	ret
		break;
		
		case 10:
		if (value == true)
    2af6:	22 23       	and	r18, r18
    2af8:	21 f0       	breq	.+8      	; 0x2b02 <_Z12IO_ReadWritebh+0x130>
		{
			PORTJ_OUTSET = (1<<PIN6_bp);
    2afa:	80 e4       	ldi	r24, 0x40	; 64
    2afc:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <__TEXT_REGION_LENGTH__+0x700705>
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <_Z12IO_ReadWritebh+0x136>
		}
		else
		{
			PORTJ_OUTCLR = (1<<PIN6_bp);
    2b02:	80 e4       	ldi	r24, 0x40	; 64
    2b04:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <__TEXT_REGION_LENGTH__+0x700706>
		}
		return (PORTJ_IN &(1<<PIN6_bp));
    2b08:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2b0c:	86 fb       	bst	r24, 6
    2b0e:	88 27       	eor	r24, r24
    2b10:	80 f9       	bld	r24, 0
    2b12:	08 95       	ret
		break;
		
		case 11:
		if (value == true)
    2b14:	22 23       	and	r18, r18
    2b16:	21 f0       	breq	.+8      	; 0x2b20 <_Z12IO_ReadWritebh+0x14e>
		{
			PORTH_OUTSET = (1<<PIN7_bp);
    2b18:	80 e8       	ldi	r24, 0x80	; 128
    2b1a:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2b1e:	03 c0       	rjmp	.+6      	; 0x2b26 <_Z12IO_ReadWritebh+0x154>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN7_bp);
    2b20:	80 e8       	ldi	r24, 0x80	; 128
    2b22:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN7_bp));
    2b26:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	88 27       	eor	r24, r24
    2b2e:	88 1f       	adc	r24, r24
    2b30:	08 95       	ret
		break;
		
		case 12:
		if (value == true)
    2b32:	22 23       	and	r18, r18
    2b34:	21 f0       	breq	.+8      	; 0x2b3e <_Z12IO_ReadWritebh+0x16c>
		{
			PORTH_OUTSET = (1<<PIN6_bp);
    2b36:	80 e4       	ldi	r24, 0x40	; 64
    2b38:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <__TEXT_REGION_LENGTH__+0x7006e5>
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <_Z12IO_ReadWritebh+0x172>
		}
		else
		{
			PORTH_OUTCLR = (1<<PIN6_bp);
    2b3e:	80 e4       	ldi	r24, 0x40	; 64
    2b40:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
		}
		return (PORTH_IN &(1<<PIN6_bp));
    2b44:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <__TEXT_REGION_LENGTH__+0x7006e8>
    2b48:	86 fb       	bst	r24, 6
    2b4a:	88 27       	eor	r24, r24
    2b4c:	80 f9       	bld	r24, 0
    2b4e:	08 95       	ret
		break;
		
	}
	return 0;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
}
    2b52:	08 95       	ret

00002b54 <_Z11DigitalReadi>:
void ToggleLED();
void LED(bool i);
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
    2b54:	68 2f       	mov	r22, r24
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <_Z12IO_ReadWritebh>
    2b5c:	08 95       	ret

00002b5e <_Z17ReadSignatureBytej>:

uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin);

uint8_t ReadSignatureByte(uint16_t Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    2b5e:	aa ec       	ldi	r26, 0xCA	; 202
    2b60:	b1 e0       	ldi	r27, 0x01	; 1
    2b62:	22 e0       	ldi	r18, 0x02	; 2
    2b64:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    2b66:	fc 01       	movw	r30, r24
    2b68:	84 91       	lpm	r24, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    2b6a:	1c 92       	st	X, r1
	return Result;
}
    2b6c:	08 95       	ret

00002b6e <_Z12I_AnalogReadR13ADC_CH_structh>:
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
	}
}

uint8_t I_AnalogRead(ADC_CH_struct &CH, uint8_t pin) {
    2b6e:	fc 01       	movw	r30, r24
	switch(pin)
    2b70:	63 30       	cpi	r22, 0x03	; 3
    2b72:	89 f0       	breq	.+34     	; 0x2b96 <_Z12I_AnalogReadR13ADC_CH_structh+0x28>
    2b74:	28 f4       	brcc	.+10     	; 0x2b80 <_Z12I_AnalogReadR13ADC_CH_structh+0x12>
    2b76:	61 30       	cpi	r22, 0x01	; 1
    2b78:	41 f0       	breq	.+16     	; 0x2b8a <_Z12I_AnalogReadR13ADC_CH_structh+0x1c>
    2b7a:	62 30       	cpi	r22, 0x02	; 2
    2b7c:	49 f0       	breq	.+18     	; 0x2b90 <_Z12I_AnalogReadR13ADC_CH_structh+0x22>
    2b7e:	1d c0       	rjmp	.+58     	; 0x2bba <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
    2b80:	64 30       	cpi	r22, 0x04	; 4
    2b82:	61 f0       	breq	.+24     	; 0x2b9c <_Z12I_AnalogReadR13ADC_CH_structh+0x2e>
    2b84:	65 30       	cpi	r22, 0x05	; 5
    2b86:	69 f0       	breq	.+26     	; 0x2ba2 <_Z12I_AnalogReadR13ADC_CH_structh+0x34>
    2b88:	18 c0       	rjmp	.+48     	; 0x2bba <_Z12I_AnalogReadR13ADC_CH_structh+0x4c>
	{
		//ADC_CH_MUXPOS_PIN0_gc is AREF pin (op 5v), pin lezen returned altijd >252
		case 1:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc; //select pin
    2b8a:	88 e0       	ldi	r24, 0x08	; 8
    2b8c:	81 83       	std	Z+1, r24	; 0x01
		break;
    2b8e:	0b c0       	rjmp	.+22     	; 0x2ba6 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 2:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc; //select pin
    2b90:	80 e1       	ldi	r24, 0x10	; 16
    2b92:	81 83       	std	Z+1, r24	; 0x01
		break;
    2b94:	08 c0       	rjmp	.+16     	; 0x2ba6 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 3:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc; //select pin
    2b96:	88 e1       	ldi	r24, 0x18	; 24
    2b98:	81 83       	std	Z+1, r24	; 0x01
		break;
    2b9a:	05 c0       	rjmp	.+10     	; 0x2ba6 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 4:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc; //select pin
    2b9c:	80 e2       	ldi	r24, 0x20	; 32
    2b9e:	81 83       	std	Z+1, r24	; 0x01
		break;
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <_Z12I_AnalogReadR13ADC_CH_structh+0x38>
		
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
    2ba2:	88 e2       	ldi	r24, 0x28	; 40
    2ba4:	81 83       	std	Z+1, r24	; 0x01
		default:
		return 0;
		break;
	}
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
    2ba6:	80 81       	ld	r24, Z
    2ba8:	80 68       	ori	r24, 0x80	; 128
    2baa:	80 83       	st	Z, r24
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	90 ff       	sbrs	r25, 0
    2bb0:	fd cf       	rjmp	.-6      	; 0x2bac <_Z12I_AnalogReadR13ADC_CH_structh+0x3e>
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	83 83       	std	Z+3, r24	; 0x03
	return CH.RESL; //return lower byte result from channel (8 bit result)
    2bb6:	84 81       	ldd	r24, Z+4	; 0x04
    2bb8:	08 95       	ret
		case 5:
		CH.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc; //select pin
		break;
		
		default:
		return 0;
    2bba:	80 e0       	ldi	r24, 0x00	; 0
	
	CH.CTRL |= ADC_CH_START_bm; //start conversion channel
	while ((CH.INTFLAGS & ADC_CH0IF_bm) == 0); //wacht op interrupt bit
	CH.INTFLAGS = ADC_CH0IF_bm; //clear interrupt flag by writing one to it
	return CH.RESL; //return lower byte result from channel (8 bit result)
}
    2bbc:	08 95       	ret

00002bbe <_Z12I_AnalogReadR10ADC_structh>:

//defaults to ch0
uint8_t I_AnalogRead(ADC_struct &ADC, uint8_t pin) {
	return I_AnalogRead(ADC.CH0, pin);
    2bbe:	80 96       	adiw	r24, 0x20	; 32
    2bc0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <_Z12I_AnalogReadR13ADC_CH_structh>
}
    2bc4:	08 95       	ret

00002bc6 <_Z8ADC_InitR10ADC_struct>:
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
	return Result;
}

void ADC_Init(ADC_struct &ADC) {
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	ec 01       	movw	r28, r24
	/* http://ww1.microchip.com/downloads/en/DeviceDoc/doc8077.pdf page 296 */

	//calibration data from signature row
	if (&ADC == &ADCA) {
    2bd0:	c1 15       	cp	r28, r1
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	d8 07       	cpc	r29, r24
    2bd6:	79 f4       	brne	.+30     	; 0x2bf6 <_Z8ADC_InitR10ADC_struct+0x30>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCACAL0); //effect onbekend maar staat in datasheet
    2bd8:	80 b5       	in	r24, 0x20	; 32
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z17ReadSignatureBytej>
    2be0:	00 e0       	ldi	r16, 0x00	; 0
    2be2:	12 e0       	ldi	r17, 0x02	; 2
    2be4:	f8 01       	movw	r30, r16
    2be6:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCACAL1);
    2be8:	81 b5       	in	r24, 0x21	; 33
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z17ReadSignatureBytej>
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	85 87       	std	Z+13, r24	; 0x0d
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <_Z8ADC_InitR10ADC_struct+0x58>
	} else if (&ADC == &ADCB) {
    2bf6:	c0 34       	cpi	r28, 0x40	; 64
    2bf8:	f2 e0       	ldi	r31, 0x02	; 2
    2bfa:	df 07       	cpc	r29, r31
    2bfc:	79 f4       	brne	.+30     	; 0x2c1c <_Z8ADC_InitR10ADC_struct+0x56>
		ADC.CALL = ReadSignatureByte(PRODSIGNATURES_ADCBCAL0);
    2bfe:	84 b5       	in	r24, 0x24	; 36
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z17ReadSignatureBytej>
    2c06:	00 e4       	ldi	r16, 0x40	; 64
    2c08:	12 e0       	ldi	r17, 0x02	; 2
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	84 87       	std	Z+12, r24	; 0x0c
		ADC.CALH = ReadSignatureByte(PRODSIGNATURES_ADCBCAL1);
    2c0e:	85 b5       	in	r24, 0x25	; 37
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <_Z17ReadSignatureBytej>
    2c16:	f8 01       	movw	r30, r16
    2c18:	85 87       	std	Z+13, r24	; 0x0d
    2c1a:	01 c0       	rjmp	.+2      	; 0x2c1e <_Z8ADC_InitR10ADC_struct+0x58>
    2c1c:	ff cf       	rjmp	.-2      	; 0x2c1c <_Z8ADC_InitR10ADC_struct+0x56>
		//geef error ofzo
		while(true){}
	}
	
	//cancel any pending conversions, disable ADC
	ADC.CTRLA = ADC_FLUSH_bm;
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	88 83       	st	Y, r24
	
	//external reference on PORT A (voltage dat op AREF pin wordt gezet, het te meten voltage mag hier niet boven komen)
	ADC.REFCTRL = ADC_REFSEL_AREFA_gc;
    2c22:	80 e2       	ldi	r24, 0x20	; 32
    2c24:	8a 83       	std	Y+2, r24	; 0x02
	
	//8-bit right-adjusted result
	ADC.CTRLB = (ADC_RESOLUTION_8BIT_gc | (1<<ADC_CONMODE_bm));
    2c26:	84 e0       	ldi	r24, 0x04	; 4
    2c28:	89 83       	std	Y+1, r24	; 0x01
	
	//prescaler 128						// !willekeurig gekozen
	ADC.PRESCALER = ADC_PRESCALER_DIV64_gc;
    2c2a:	8c 83       	std	Y+4, r24	; 0x04

	//enable ADC
	ADC.CTRLA |= ADC_ENABLE_bm;
    2c2c:	88 81       	ld	r24, Y
    2c2e:	81 60       	ori	r24, 0x01	; 1
    2c30:	88 83       	st	Y, r24
	
	//result at ch0
//	ADC.CTRLA |= (0x0<<2);

	//single ended input no gain
	ADC.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	88 a3       	std	Y+32, r24	; 0x20

	//disable interrupts
	ADCA.CH0.INTCTRL = 0;
    2c36:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
	
	//2 dummy reads
	for (int i=0; i<2; i++) {
		I_AnalogRead(ADC, 1);
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_Z12I_AnalogReadR10ADC_structh>
    2c42:	61 e0       	ldi	r22, 0x01	; 1
    2c44:	ce 01       	movw	r24, r28
    2c46:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_Z12I_AnalogReadR10ADC_structh>
	}
}
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	08 95       	ret

00002c54 <_Z15ReadSharpSensorh>:
#ifndef SHARPSENSOR_H_
#define SHARPSENSOR_H_

uint8_t ReadSharpSensor(uint8_t sensor)
{
	uint8_t val = I_AnalogRead(ADCA, sensor);
    2c54:	68 2f       	mov	r22, r24
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	92 e0       	ldi	r25, 0x02	; 2
    2c5a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_Z12I_AnalogReadR10ADC_structh>
	
	switch(val)
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	fc 01       	movw	r30, r24
    2c62:	fc 97       	sbiw	r30, 0x3c	; 60
    2c64:	e4 3c       	cpi	r30, 0xC4	; 196
    2c66:	f1 05       	cpc	r31, r1
    2c68:	f0 f4       	brcc	.+60     	; 0x2ca6 <_Z15ReadSharpSensorh+0x52>
    2c6a:	88 27       	eor	r24, r24
    2c6c:	e6 5f       	subi	r30, 0xF6	; 246
    2c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c70:	8f 4f       	sbci	r24, 0xFF	; 255
    2c72:	0c 94 70 2f 	jmp	0x5ee0	; 0x5ee0 <__tablejump2__>
		case 250 ... 255:
		return 4; //centimeter
		break;
		
		case 245 ... 249:
		return 5; //centimeter
    2c76:	85 e0       	ldi	r24, 0x05	; 5
    2c78:	08 95       	ret
		break;
		
		case 240 ... 244:
		return 7; //centimeter
    2c7a:	87 e0       	ldi	r24, 0x07	; 7
    2c7c:	08 95       	ret
		break;
		
		case 235 ... 239:
		return 8; //centimeter
    2c7e:	88 e0       	ldi	r24, 0x08	; 8
    2c80:	08 95       	ret
		break;
		
		case 230 ... 234:
		return 9; //centimeter
    2c82:	89 e0       	ldi	r24, 0x09	; 9
    2c84:	08 95       	ret
		break;
		
		case 200 ... 229:
		return 10; //centimeter
    2c86:	8a e0       	ldi	r24, 0x0A	; 10
    2c88:	08 95       	ret
		break;
		
		case 190 ... 199:
		return 11; //centimeter
    2c8a:	8b e0       	ldi	r24, 0x0B	; 11
    2c8c:	08 95       	ret
		break;
		
		case 170 ... 189:
		return 12; //centimeter
    2c8e:	8c e0       	ldi	r24, 0x0C	; 12
    2c90:	08 95       	ret
		break;
		
		case 155 ... 169:
		return 13; //centimeter
    2c92:	8d e0       	ldi	r24, 0x0D	; 13
    2c94:	08 95       	ret
		break;
		
		case 140 ... 154:
		return 14; //centimeter
    2c96:	8e e0       	ldi	r24, 0x0E	; 14
    2c98:	08 95       	ret
		break;
		
		case 110 ... 119:
		return 16; //centimeter
    2c9a:	80 e1       	ldi	r24, 0x10	; 16
    2c9c:	08 95       	ret
		break;
		
		case 80 ... 99:
		return 20; //centimeter
    2c9e:	84 e1       	ldi	r24, 0x14	; 20
    2ca0:	08 95       	ret
		break;
		
		case 60 ... 79:
		return 25; //centimeter
    2ca2:	89 e1       	ldi	r24, 0x19	; 25
    2ca4:	08 95       	ret
		break;
		
		default:
		return 30;
    2ca6:	8e e1       	ldi	r24, 0x1E	; 30
    2ca8:	08 95       	ret
	uint8_t val = I_AnalogRead(ADCA, sensor);
	
	switch(val)
	{
		case 250 ... 255:
		return 4; //centimeter
    2caa:	84 e0       	ldi	r24, 0x04	; 4
		
		default:
		return 30;
		break;
	}
}
    2cac:	08 95       	ret

00002cae <_Z10AnalogReadi>:
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
    2cae:	68 2f       	mov	r22, r24
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <_Z12I_AnalogReadR10ADC_structh>
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	08 95       	ret

00002cbc <_Z15passthrough_TWIv>:
	} //Set the LED pins to output
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
void ToggleLED2(){ PORTH_OUTTGL |= (1 << 5); } // Zet tweede LED aan of uit


/* Enter stepper-testing mode. Will exit on Reset */
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	2b 97       	sbiw	r28, 0x0b	; 11
    2cc6:	cd bf       	out	0x3d, r28	; 61
    2cc8:	de bf       	out	0x3e, r29	; 62
void passthrough_TWI() {
	char buff[3];
    2cca:	60 e8       	ldi	r22, 0x80	; 128
    2ccc:	74 e0       	ldi	r23, 0x04	; 4
    2cce:	82 e8       	ldi	r24, 0x82	; 130
    2cd0:	93 e1       	ldi	r25, 0x13	; 19
    2cd2:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z13TWI_onRequestPFvvER10TWI_struct>
	TWI_onRequest(requestResult, TWIC);
	
	while (1) {
		if (TWI_RecievedAddress(TWIC)) {
    2cd6:	0f 2e       	mov	r0, r31
    2cd8:	f6 ee       	ldi	r31, 0xE6	; 230
    2cda:	cf 2e       	mov	r12, r31
    2cdc:	f6 e0       	ldi	r31, 0x06	; 6
    2cde:	df 2e       	mov	r13, r31
    2ce0:	f0 2d       	mov	r31, r0
			TWIC.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
			
			if (buff[0] == 0) { //test steppers
				//buff[1] motorid, buff[2] direction
				char directiondata[]={buff[2]};
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
    2ce2:	0f 2e       	mov	r0, r31
    2ce4:	f7 e0       	ldi	r31, 0x07	; 7
    2ce6:	9f 2e       	mov	r9, r31
    2ce8:	f0 2d       	mov	r31, r0
    2cea:	5e 01       	movw	r10, r28
    2cec:	84 e0       	ldi	r24, 0x04	; 4
    2cee:	a8 0e       	add	r10, r24
    2cf0:	b1 1c       	adc	r11, r1
    2cf2:	0f 2e       	mov	r0, r31
    2cf4:	fc e4       	ldi	r31, 0x4C	; 76
    2cf6:	7f 2e       	mov	r7, r31
    2cf8:	f0 2d       	mov	r31, r0
    2cfa:	0f 2e       	mov	r0, r31
    2cfc:	f2 e3       	ldi	r31, 0x32	; 50
    2cfe:	8f 2e       	mov	r8, r31
    2d00:	f0 2d       	mov	r31, r0
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
				} else if (buff[0] == 1) { //lees analog
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
			}
			
    2d02:	0f 2e       	mov	r0, r31
    2d04:	f5 ee       	ldi	r31, 0xE5	; 229
    2d06:	ef 2e       	mov	r14, r31
    2d08:	f6 e0       	ldi	r31, 0x06	; 6
    2d0a:	ff 2e       	mov	r15, r31
    2d0c:	f0 2d       	mov	r31, r0
/* Enter stepper-testing mode. Will exit on Reset */
void passthrough_TWI() {
	char buff[3];
	TWI_onRequest(requestResult, TWIC);
	
	while (1) {
    2d0e:	80 e8       	ldi	r24, 0x80	; 128
    2d10:	94 e0       	ldi	r25, 0x04	; 4
    2d12:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_Z19TWI_RecievedAddressR10TWI_struct>
    2d16:	88 23       	and	r24, r24
    2d18:	d1 f3       	breq	.-12     	; 0x2d0e <_Z15passthrough_TWIv+0x52>
		if (TWI_RecievedAddress(TWIC)) {
    2d1a:	f6 01       	movw	r30, r12
    2d1c:	80 81       	ld	r24, Z
    2d1e:	80 63       	ori	r24, 0x30	; 48
    2d20:	80 83       	st	Z, r24
			PORTH_OUTCLR |= (1<<4)|(1<<5); //LED on
			
    2d22:	43 e0       	ldi	r20, 0x03	; 3
    2d24:	be 01       	movw	r22, r28
    2d26:	6f 5f       	subi	r22, 0xFF	; 255
    2d28:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2a:	80 e8       	ldi	r24, 0x80	; 128
    2d2c:	94 e0       	ldi	r25, 0x04	; 4
    2d2e:	0e 94 65 07 	call	0xeca	; 0xeca <_Z17TWI_ReceivePacketR10TWI_structPhh>
    2d32:	8f e6       	ldi	r24, 0x6F	; 111
    2d34:	97 e1       	ldi	r25, 0x17	; 23
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <_Z15passthrough_TWIv+0x7a>
    2d3a:	00 c0       	rjmp	.+0      	; 0x2d3c <_Z15passthrough_TWIv+0x80>
    2d3c:	00 00       	nop
			TWI_ReceivePacket(TWIC,(uint8_t*)buff, 3);
			_delay_ms(1);
    2d3e:	e0 e8       	ldi	r30, 0x80	; 128
    2d40:	f4 e0       	ldi	r31, 0x04	; 4
    2d42:	82 85       	ldd	r24, Z+10	; 0x0a
    2d44:	80 6c       	ori	r24, 0xC0	; 192
    2d46:	82 87       	std	Z+10, r24	; 0x0a
			TWIC.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp); //clear interrupts
			
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	81 11       	cpse	r24, r1
    2d4c:	20 c0       	rjmp	.+64     	; 0x2d8e <_Z15passthrough_TWIv+0xd2>
			if (buff[0] == 0) { //test steppers
				//buff[1] motorid, buff[2] direction
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	8b 87       	std	Y+11, r24	; 0x0b
				char directiondata[]={buff[2]};
    2d52:	00 eb       	ldi	r16, 0xB0	; 176
    2d54:	1a e0       	ldi	r17, 0x0A	; 10
    2d56:	2a 81       	ldd	r18, Y+2	; 0x02
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	be 01       	movw	r22, r28
    2d5c:	65 5f       	subi	r22, 0xF5	; 245
    2d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d60:	8a e4       	ldi	r24, 0x4A	; 74
    2d62:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
				stepperWriteRegister(DIRECTION_REG,directiondata,sizeof(directiondata)/sizeof(*directiondata),buff[1], USARTE1);
    2d66:	f5 01       	movw	r30, r10
    2d68:	89 2d       	mov	r24, r9
    2d6a:	11 92       	st	Z+, r1
    2d6c:	8a 95       	dec	r24
    2d6e:	e9 f7       	brne	.-6      	; 0x2d6a <_Z15passthrough_TWIv+0xae>
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	8c 83       	std	Y+4, r24	; 0x04
    2d74:	7d 82       	std	Y+5, r7	; 0x05
    2d76:	8f 82       	std	Y+7, r8	; 0x07
    2d78:	89 87       	std	Y+9, r24	; 0x09
    2d7a:	8a 87       	std	Y+10, r24	; 0x0a
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	88 87       	std	Y+8, r24	; 0x08
				char data[]={0x01,0x4c,0x00,0x32,buff[2],MOTOR_STEP_HALF,MOTOR_ON};
    2d80:	2a 81       	ldd	r18, Y+2	; 0x02
    2d82:	49 2d       	mov	r20, r9
    2d84:	b5 01       	movw	r22, r10
    2d86:	86 e4       	ldi	r24, 0x46	; 70
    2d88:	0e 94 37 11 	call	0x226e	; 0x226e <_Z20stepperWriteRegisterhPKchhR12USART_struct>
    2d8c:	08 c0       	rjmp	.+16     	; 0x2d9e <_Z15passthrough_TWIv+0xe2>
				stepperWriteRegister(STEPS_PS_HREG,data,sizeof(data)/sizeof(*data),buff[1],USARTE1);
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	31 f4       	brne	.+12     	; 0x2d9e <_Z15passthrough_TWIv+0xe2>
				} else if (buff[0] == 1) { //lees analog
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 57 16 	call	0x2cae	; 0x2cae <_Z10AnalogReadi>
    2d9a:	80 93 fb 23 	sts	0x23FB, r24	; 0x8023fb <Result>
				Result = AnalogRead(buff[1]); //bij een interrupt stuurt de ATmega Result via TWI
			}
			
    2d9e:	f7 01       	movw	r30, r14
    2da0:	80 81       	ld	r24, Z
    2da2:	80 63       	ori	r24, 0x30	; 48
    2da4:	80 83       	st	Z, r24
    2da6:	b3 cf       	rjmp	.-154    	; 0x2d0e <_Z15passthrough_TWIv+0x52>

00002da8 <_Z16initOptocouplersv>:

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
    2da8:	8f e3       	ldi	r24, 0x3F	; 63
    2daa:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
    2dae:	08 95       	ret

00002db0 <_Z17I_OptocouplerReadh>:
/**
 * \brief - Read the level of an optocoupler
 */
bool I_OptocouplerRead(uint8_t io_port)
{
	switch(io_port)
    2db0:	82 30       	cpi	r24, 0x02	; 2
    2db2:	a9 f0       	breq	.+42     	; 0x2dde <_Z17I_OptocouplerReadh+0x2e>
    2db4:	28 f4       	brcc	.+10     	; 0x2dc0 <_Z17I_OptocouplerReadh+0x10>
    2db6:	88 23       	and	r24, r24
    2db8:	49 f0       	breq	.+18     	; 0x2dcc <_Z17I_OptocouplerReadh+0x1c>
    2dba:	81 30       	cpi	r24, 0x01	; 1
    2dbc:	59 f0       	breq	.+22     	; 0x2dd4 <_Z17I_OptocouplerReadh+0x24>
    2dbe:	26 c0       	rjmp	.+76     	; 0x2e0c <_Z17I_OptocouplerReadh+0x5c>
    2dc0:	84 30       	cpi	r24, 0x04	; 4
    2dc2:	c9 f0       	breq	.+50     	; 0x2df6 <_Z17I_OptocouplerReadh+0x46>
    2dc4:	90 f0       	brcs	.+36     	; 0x2dea <_Z17I_OptocouplerReadh+0x3a>
    2dc6:	85 30       	cpi	r24, 0x05	; 5
    2dc8:	d9 f0       	breq	.+54     	; 0x2e00 <_Z17I_OptocouplerReadh+0x50>
    2dca:	20 c0       	rjmp	.+64     	; 0x2e0c <_Z17I_OptocouplerReadh+0x5c>
	{
		case 0: return OPTO_IN & OPTO0;
    2dcc:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2dd0:	81 70       	andi	r24, 0x01	; 1
    2dd2:	08 95       	ret
		case 1: return OPTO_IN & OPTO1;
    2dd4:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2dd8:	86 95       	lsr	r24
    2dda:	81 70       	andi	r24, 0x01	; 1
    2ddc:	08 95       	ret
		case 2: return OPTO_IN & OPTO2;
    2dde:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2de2:	82 fb       	bst	r24, 2
    2de4:	88 27       	eor	r24, r24
    2de6:	80 f9       	bld	r24, 0
    2de8:	08 95       	ret
		case 3: return OPTO_IN & OPTO3;
    2dea:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2dee:	83 fb       	bst	r24, 3
    2df0:	88 27       	eor	r24, r24
    2df2:	80 f9       	bld	r24, 0
    2df4:	08 95       	ret
		case 4: return OPTO_IN & OPTO4;
    2df6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2dfa:	82 95       	swap	r24
    2dfc:	81 70       	andi	r24, 0x01	; 1
    2dfe:	08 95       	ret
		case 5: return OPTO_IN & OPTO5;
    2e00:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <__TEXT_REGION_LENGTH__+0x700708>
    2e04:	85 fb       	bst	r24, 5
    2e06:	88 27       	eor	r24, r24
    2e08:	80 f9       	bld	r24, 0
    2e0a:	08 95       	ret
		default: return 0;
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2e0e:	08 95       	ret

00002e10 <_Z15OptocouplerReadi>:
void ToggleLED1();
void ToggleLED2();
void passthrough_TWI();
bool DigitalRead(int16_t IO) { return IO_ReadWrite(true, IO); }
uint16_t AnalogRead(int16_t IO) { return (uint16_t)I_AnalogRead(ADCA, (uint8_t)IO); }
bool OptocouplerRead(int16_t IO) { return I_OptocouplerRead((uint8_t)IO); }
    2e10:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <_Z17I_OptocouplerReadh>
    2e14:	08 95       	ret

00002e16 <__vector_100>:
void requestStarted() { TWI_Write(TWIC, Started); }
void requestResult() { TWI_Write(TWIC, Result); }


/* ISR INT0, gebruikt voor lift interrupts */
ISR(PORTK_INT0_vect) {
    2e16:	1f 92       	push	r1
    2e18:	0f 92       	push	r0
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	0f 92       	push	r0
    2e1e:	11 24       	eor	r1, r1
    2e20:	08 b6       	in	r0, 0x38	; 56
    2e22:	0f 92       	push	r0
    2e24:	18 be       	out	0x38, r1	; 56
    2e26:	09 b6       	in	r0, 0x39	; 57
    2e28:	0f 92       	push	r0
    2e2a:	19 be       	out	0x39, r1	; 57
    2e2c:	0b b6       	in	r0, 0x3b	; 59
    2e2e:	0f 92       	push	r0
    2e30:	1b be       	out	0x3b, r1	; 59
    2e32:	2f 93       	push	r18
    2e34:	3f 93       	push	r19
    2e36:	4f 93       	push	r20
    2e38:	5f 93       	push	r21
    2e3a:	6f 93       	push	r22
    2e3c:	7f 93       	push	r23
    2e3e:	8f 93       	push	r24
    2e40:	9f 93       	push	r25
    2e42:	af 93       	push	r26
    2e44:	bf 93       	push	r27
    2e46:	cf 93       	push	r28
    2e48:	ef 93       	push	r30
    2e4a:	ff 93       	push	r31
	bool elevatorUpPressed = !(PORTK_IN & EV_SWITCH_PIN_UP); //Pin use pull-ups, invert to give true on pressed
    2e4c:	e8 e2       	ldi	r30, 0x28	; 40
    2e4e:	f7 e0       	ldi	r31, 0x07	; 7
    2e50:	c0 81       	ld	r28, Z
    2e52:	c0 71       	andi	r28, 0x10	; 16
	bool elevatorDownPressed = !(PORTK_IN & EV_SWITCH_PIN_DOWN);
    2e54:	80 81       	ld	r24, Z

	if(elevatorDownPressed){
    2e56:	85 fd       	sbrc	r24, 5
    2e58:	09 c0       	rjmp	.+18     	; 0x2e6c <__vector_100+0x56>
		DEBUG_OUT("Elevator Switch UP was pressed\n\r");
    2e5a:	65 e9       	ldi	r22, 0x95	; 149
    2e5c:	72 e2       	ldi	r23, 0x22	; 34
    2e5e:	80 ea       	ldi	r24, 0xA0	; 160
    2e60:	99 e0       	ldi	r25, 0x09	; 9
    2e62:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(false); //Run with parameter false to indicate DOWN
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <ElevatorButtonInISR>

	}
	if(elevatorUpPressed){
    2e6c:	c1 11       	cpse	r28, r1
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <__vector_100+0x6c>
		DEBUG_OUT("Elevator Switch DOWN was pressed\n\r");
    2e70:	68 eb       	ldi	r22, 0xB8	; 184
    2e72:	72 e2       	ldi	r23, 0x22	; 34
    2e74:	80 ea       	ldi	r24, 0xA0	; 160
    2e76:	99 e0       	ldi	r25, 0x09	; 9
    2e78:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		ElevatorButtonInISR(true); //Run with parameter true to indicate UP
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <ElevatorButtonInISR>
	}
}
    2e82:	ff 91       	pop	r31
    2e84:	ef 91       	pop	r30
    2e86:	cf 91       	pop	r28
    2e88:	bf 91       	pop	r27
    2e8a:	af 91       	pop	r26
    2e8c:	9f 91       	pop	r25
    2e8e:	8f 91       	pop	r24
    2e90:	7f 91       	pop	r23
    2e92:	6f 91       	pop	r22
    2e94:	5f 91       	pop	r21
    2e96:	4f 91       	pop	r20
    2e98:	3f 91       	pop	r19
    2e9a:	2f 91       	pop	r18
    2e9c:	0f 90       	pop	r0
    2e9e:	0b be       	out	0x3b, r0	; 59
    2ea0:	0f 90       	pop	r0
    2ea2:	09 be       	out	0x39, r0	; 57
    2ea4:	0f 90       	pop	r0
    2ea6:	08 be       	out	0x38, r0	; 56
    2ea8:	0f 90       	pop	r0
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	0f 90       	pop	r0
    2eae:	1f 90       	pop	r1
    2eb0:	18 95       	reti

00002eb2 <__vector_101>:


///* ISR INT1, gebruikt voor sorterarm interrupts */
ISR(PORTK_INT1_vect) {
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	08 b6       	in	r0, 0x38	; 56
    2ebe:	0f 92       	push	r0
    2ec0:	18 be       	out	0x38, r1	; 56
    2ec2:	09 b6       	in	r0, 0x39	; 57
    2ec4:	0f 92       	push	r0
    2ec6:	19 be       	out	0x39, r1	; 57
    2ec8:	0a b6       	in	r0, 0x3a	; 58
    2eca:	0f 92       	push	r0
    2ecc:	1a be       	out	0x3a, r1	; 58
    2ece:	0b b6       	in	r0, 0x3b	; 59
    2ed0:	0f 92       	push	r0
    2ed2:	1b be       	out	0x3b, r1	; 59
    2ed4:	2f 93       	push	r18
    2ed6:	3f 93       	push	r19
    2ed8:	4f 93       	push	r20
    2eda:	5f 93       	push	r21
    2edc:	6f 93       	push	r22
    2ede:	7f 93       	push	r23
    2ee0:	8f 93       	push	r24
    2ee2:	9f 93       	push	r25
    2ee4:	af 93       	push	r26
    2ee6:	bf 93       	push	r27
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
    2eec:	ef 93       	push	r30
    2eee:	ff 93       	push	r31
	
	//Read the PORTK register on the SorterArm pins:
	bool leftIsPressed = !(PORTK_IN & sa1.switch_pin_left); //Pin use pull-ups, invert to give true on pressed
    2ef0:	e8 e2       	ldi	r30, 0x28	; 40
    2ef2:	f7 e0       	ldi	r31, 0x07	; 7
    2ef4:	d0 81       	ld	r29, Z
	bool rightIsPressed = !(PORTK_IN & sa1.switch_pin_right);
    2ef6:	c0 81       	ld	r28, Z
    2ef8:	c0 78       	andi	r28, 0x80	; 128

	DEBUG_OUT("Entered INT1 ISR\r\n");
    2efa:	69 ed       	ldi	r22, 0xD9	; 217
    2efc:	72 e2       	ldi	r23, 0x22	; 34
    2efe:	80 ea       	ldi	r24, 0xA0	; 160
    2f00:	99 e0       	ldi	r25, 0x09	; 9
    2f02:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	if(leftIsPressed){
    2f06:	d6 fd       	sbrc	r29, 6
    2f08:	08 c0       	rjmp	.+16     	; 0x2f1a <__vector_101+0x68>
	 DEBUG_OUT("SorterArm switch LEFT was pressed\n\r");
    2f0a:	6c ee       	ldi	r22, 0xEC	; 236
    2f0c:	72 e2       	ldi	r23, 0x22	; 34
    2f0e:	80 ea       	ldi	r24, 0xA0	; 160
    2f10:	99 e0       	ldi	r25, 0x09	; 9
    2f12:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	 SorterArmISR();
    2f16:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <SorterArmISR>
	}
	if(rightIsPressed){
    2f1a:	c1 11       	cpse	r28, r1
    2f1c:	08 c0       	rjmp	.+16     	; 0x2f2e <__vector_101+0x7c>
	 DEBUG_OUT("SorterArm switch RIGHT was pressed\n\r");
    2f1e:	60 e1       	ldi	r22, 0x10	; 16
    2f20:	73 e2       	ldi	r23, 0x23	; 35
    2f22:	80 ea       	ldi	r24, 0xA0	; 160
    2f24:	99 e0       	ldi	r25, 0x09	; 9
    2f26:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	 SorterArmISR();
    2f2a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <SorterArmISR>

	//Currently checks the PORTK register for which pin is pressed down
	//The sorterArm should theoretically only be able to press one switch at a time
	//If necessary, code could be added for checking which switch changed state.
	
}
    2f2e:	ff 91       	pop	r31
    2f30:	ef 91       	pop	r30
    2f32:	df 91       	pop	r29
    2f34:	cf 91       	pop	r28
    2f36:	bf 91       	pop	r27
    2f38:	af 91       	pop	r26
    2f3a:	9f 91       	pop	r25
    2f3c:	8f 91       	pop	r24
    2f3e:	7f 91       	pop	r23
    2f40:	6f 91       	pop	r22
    2f42:	5f 91       	pop	r21
    2f44:	4f 91       	pop	r20
    2f46:	3f 91       	pop	r19
    2f48:	2f 91       	pop	r18
    2f4a:	0f 90       	pop	r0
    2f4c:	0b be       	out	0x3b, r0	; 59
    2f4e:	0f 90       	pop	r0
    2f50:	0a be       	out	0x3a, r0	; 58
    2f52:	0f 90       	pop	r0
    2f54:	09 be       	out	0x39, r0	; 57
    2f56:	0f 90       	pop	r0
    2f58:	08 be       	out	0x38, r0	; 56
    2f5a:	0f 90       	pop	r0
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	0f 90       	pop	r0
    2f60:	1f 90       	pop	r1
    2f62:	18 95       	reti

00002f64 <_Z8initLEDsv>:
		PORTH_OUTCLR |= (1<<4)|(1<<5);
		} else {
		PORTH_OUTSET |= (1<<4)|(1<<5);
	}
}
void initLEDs() {
    2f64:	80 e3       	ldi	r24, 0x30	; 48
    2f66:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <__TEXT_REGION_LENGTH__+0x7006e1>
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
    2f6a:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <__TEXT_REGION_LENGTH__+0x7006e6>
    2f6e:	08 95       	ret

00002f70 <main>:
	
}


int main(void)
{
    2f70:	cf 92       	push	r12
    2f72:	df 92       	push	r13
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
	// Setup/init
	irq_initialize_vectors();
    2f80:	87 e0       	ldi	r24, 0x07	; 7
    2f82:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    2f86:	78 94       	sei
	sysclk_init();
    2f88:	0e 94 34 2a 	call	0x5468	; 0x5468 <sysclk_init>
	udc_start();
    2f8c:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <udc_start>
	
	//Set up peripherals
	sysclk_enable_peripheral_clock(&TWIC);		//TWI/I2C line for interfacing with ESP32
    2f90:	80 e8       	ldi	r24, 0x80	; 128
    2f92:	94 e0       	ldi	r25, 0x04	; 4
    2f94:	0e 94 89 13 	call	0x2712	; 0x2712 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD0);	//USB line for debugging
    2f98:	80 ea       	ldi	r24, 0xA0	; 160
    2f9a:	99 e0       	ldi	r25, 0x09	; 9
    2f9c:	0e 94 89 13 	call	0x2712	; 0x2712 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTE1);	//RS485
    2fa0:	80 eb       	ldi	r24, 0xB0	; 176
    2fa2:	9a e0       	ldi	r25, 0x0A	; 10
    2fa4:	0e 94 89 13 	call	0x2712	; 0x2712 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&ADCA);		//ADC for reading sensors
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	92 e0       	ldi	r25, 0x02	; 2
    2fac:	0e 94 89 13 	call	0x2712	; 0x2712 <sysclk_enable_peripheral_clock>
	
	TWI_init(TWIC);
    2fb0:	80 e8       	ldi	r24, 0x80	; 128
    2fb2:	94 e0       	ldi	r25, 0x04	; 4
    2fb4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <_Z8TWI_initR10TWI_struct>
	TWI_onRequest(requestStarted, TWIC);
    2fb8:	60 e8       	ldi	r22, 0x80	; 128
    2fba:	74 e0       	ldi	r23, 0x04	; 4
    2fbc:	8b e7       	ldi	r24, 0x7B	; 123
    2fbe:	93 e1       	ldi	r25, 0x13	; 19
    2fc0:	0e 94 c8 07 	call	0xf90	; 0xf90 <_Z13TWI_onRequestPFvvER10TWI_struct>

	// Init board
	board_init();
    2fc4:	0e 94 d7 2e 	call	0x5dae	; 0x5dae <board_init>
	initLEDs();
    2fc8:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <_Z8initLEDsv>

	//Init UART for Debug interface and RS485 drivers
	USART_Init(USARTD0, 115200, 24000000, false);	// RX/TX out
    2fcc:	e1 2c       	mov	r14, r1
    2fce:	00 e0       	ldi	r16, 0x00	; 0
    2fd0:	16 e3       	ldi	r17, 0x36	; 54
    2fd2:	2e e6       	ldi	r18, 0x6E	; 110
    2fd4:	31 e0       	ldi	r19, 0x01	; 1
    2fd6:	40 e0       	ldi	r20, 0x00	; 0
    2fd8:	52 ec       	ldi	r21, 0xC2	; 194
    2fda:	61 e0       	ldi	r22, 0x01	; 1
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 ea       	ldi	r24, 0xA0	; 160
    2fe0:	99 e0       	ldi	r25, 0x09	; 9
    2fe2:	0e 94 2e 09 	call	0x125c	; 0x125c <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTE1,37100,24000000,false);	// RS485 1
    2fe6:	00 e0       	ldi	r16, 0x00	; 0
    2fe8:	16 e3       	ldi	r17, 0x36	; 54
    2fea:	2e e6       	ldi	r18, 0x6E	; 110
    2fec:	31 e0       	ldi	r19, 0x01	; 1
    2fee:	4c ee       	ldi	r20, 0xEC	; 236
    2ff0:	50 e9       	ldi	r21, 0x90	; 144
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	70 e0       	ldi	r23, 0x00	; 0
    2ff6:	80 eb       	ldi	r24, 0xB0	; 176
    2ff8:	9a e0       	ldi	r25, 0x0A	; 10
    2ffa:	0e 94 2e 09 	call	0x125c	; 0x125c <_Z10USART_InitR12USART_structmmb>
	USART_Init(USARTF0,37100,24000000,false);	// RS485 2
    2ffe:	00 e0       	ldi	r16, 0x00	; 0
    3000:	16 e3       	ldi	r17, 0x36	; 54
    3002:	2e e6       	ldi	r18, 0x6E	; 110
    3004:	31 e0       	ldi	r19, 0x01	; 1
    3006:	4c ee       	ldi	r20, 0xEC	; 236
    3008:	50 e9       	ldi	r21, 0x90	; 144
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	80 ea       	ldi	r24, 0xA0	; 160
    3010:	9b e0       	ldi	r25, 0x0B	; 11
    3012:	0e 94 2e 09 	call	0x125c	; 0x125c <_Z10USART_InitR12USART_structmmb>
	
	PORTE_OUTSET = 0b00110000;
    3016:	80 e3       	ldi	r24, 0x30	; 48
    3018:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	
	ADC_Init(ADCA);
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	92 e0       	ldi	r25, 0x02	; 2
    3020:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <_Z8ADC_InitR10ADC_struct>
    3024:	c1 e0       	ldi	r28, 0x01	; 1
    3026:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
    3028:	ce 01       	movw	r24, r28
    302a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <_Z8StopBeltj>
    302e:	21 96       	adiw	r28, 0x01	; 1
	PORTE_OUTSET = 0b00110000;
	
	ADC_Init(ADCA);
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
    3030:	cc 30       	cpi	r28, 0x0C	; 12
    3032:	d1 05       	cpc	r29, r1
    3034:	c9 f7       	brne	.-14     	; 0x3028 <main+0xb8>
    3036:	c1 e0       	ldi	r28, 0x01	; 1
    3038:	d0 e0       	ldi	r29, 0x00	; 0
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
		StopTurntable(i);
    303a:	ce 01       	movw	r24, r28
    303c:	0e 94 76 12 	call	0x24ec	; 0x24ec <_Z13StopTurntablej>
    3040:	21 96       	adiw	r28, 0x01	; 1
	
	//Stop all motors on boot:
	for (uint8_t i=1; i<=11; i++) {
		StopBelt(i);
	}
	for (uint8_t i=1; i<=11; i++) {
    3042:	cc 30       	cpi	r28, 0x0C	; 12
    3044:	d1 05       	cpc	r29, r1
    3046:	c9 f7       	brne	.-14     	; 0x303a <main+0xca>
		StopTurntable(i);
	}
	StopSorterArm();
    3048:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <StopSorterArm>
	StopElevator();
    304c:	0e 94 2f 0b 	call	0x165e	; 0x165e <StopElevator>
	
	// sysclk_enable_peripheral_clock(&TCC1); //zie SorterArm.cpp, TODO weghalen als stepperdrivers uitgelezen kunnen worden
	
	sei(); //global interrupt enable
    3050:	78 94       	sei
	ElevatorInit();
    3052:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <ElevatorInit>

/**
 * \brief - Set all optocouplers to input
 */
void initOptocouplers(){
	OPTO_DIRCLR = OPTOS_bm;
    3056:	8f e3       	ldi	r24, 0x3F	; 63
    3058:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <__TEXT_REGION_LENGTH__+0x700702>
	//ElevatorInterruptSetup();
	//SaSetInput(sa1.switch_pin_left, sa1.switch_pin_right);
	//SaSetInterrupt(sa1.switch_pin_left, sa1.switch_pin_right);

	initColorSensor();
	
    305c:	85 e3       	ldi	r24, 0x35	; 53
    305e:	93 e2       	ldi	r25, 0x23	; 35
    3060:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	USB_TransmitString("TEST\n"); // Test serial working

	
	/* Insert application code here, after the board has been initialized. */
	
	
    3064:	6b e3       	ldi	r22, 0x3B	; 59
    3066:	73 e2       	ldi	r23, 0x23	; 35
    3068:	80 ea       	ldi	r24, 0xA0	; 160
    306a:	99 e0       	ldi	r25, 0x09	; 9
    306c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_TransmitString(USARTD0, "\n\r------------------------------------------------------------\n\rReset\n\n\r");
    3070:	8b e3       	ldi	r24, 0x3B	; 59
    3072:	93 e2       	ldi	r25, 0x23	; 35
    3074:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
	
	
    3078:	0e 94 84 05 	call	0xb08	; 0xb08 <_Z10getUsbBootv>
    307c:	0f 2e       	mov	r0, r31
    307e:	f0 e2       	ldi	r31, 0x20	; 32
    3080:	cf 2e       	mov	r12, r31
    3082:	f1 ea       	ldi	r31, 0xA1	; 161
    3084:	df 2e       	mov	r13, r31
    3086:	f7 e0       	ldi	r31, 0x07	; 7
    3088:	ef 2e       	mov	r14, r31
    308a:	f1 2c       	mov	r15, r1
    308c:	f0 2d       	mov	r31, r0
	getUsbBoot();
	
	for (long i=0;i<500000;i++)
	{
    308e:	80 e8       	ldi	r24, 0x80	; 128
    3090:	94 e0       	ldi	r25, 0x04	; 4
    3092:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_Z19TWI_RecievedAddressR10TWI_struct>
    3096:	88 23       	and	r24, r24
    3098:	21 f0       	breq	.+8      	; 0x30a2 <main+0x132>
		if(TWI_RecievedAddress(TWIC))
    309a:	8e e5       	ldi	r24, 0x5E	; 94
    309c:	96 e1       	ldi	r25, 0x16	; 22
    309e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17receiveHexFileI2CPFvvE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    30a2:	88 e0       	ldi	r24, 0x08	; 8
    30a4:	8a 95       	dec	r24
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <main+0x134>
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	c8 1a       	sub	r12, r24
    30ac:	d1 08       	sbc	r13, r1
    30ae:	e1 08       	sbc	r14, r1
    30b0:	f1 08       	sbc	r15, r1
	USART_TransmitString(USARTD0, "\n\r------------------------------------------------------------\n\rReset\n\n\r");
	USB_TransmitString("\n\r------------------------------------------------------------\n\rReset\n\n\r");
	
	
	getUsbBoot();
	
    30b2:	69 f7       	brne	.-38     	; 0x308e <main+0x11e>
		if(TWI_RecievedAddress(TWIC))
		receiveHexFileI2C(passthrough_TWI); //Check if I2C transmission contains new program or enables Stepper-test mode
		_delay_us(1);
	}
	
	#ifdef DEBUG
    30b4:	64 e8       	ldi	r22, 0x84	; 132
    30b6:	73 e2       	ldi	r23, 0x23	; 35
    30b8:	80 ea       	ldi	r24, 0xA0	; 160
    30ba:	99 e0       	ldi	r25, 0x09	; 9
    30bc:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_TransmitString(USARTD0, "\r\nRunning in DEBUG mode\r\n");
	#endif
	
	// check if the blockly code area is empty
    30c0:	6e e9       	ldi	r22, 0x9E	; 158
    30c2:	73 e2       	ldi	r23, 0x23	; 35
    30c4:	80 ea       	ldi	r24, 0xA0	; 160
    30c6:	99 e0       	ldi	r25, 0x09	; 9
    30c8:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_TransmitString(USARTD0, "Checking for program\n\r");
    30cc:	8e e9       	ldi	r24, 0x9E	; 158
    30ce:	93 e2       	ldi	r25, 0x23	; 35
    30d0:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	USB_TransmitString("Checking for program\n\r");
	
    30d4:	e0 e0       	ldi	r30, 0x00	; 0
    30d6:	f0 e8       	ldi	r31, 0x80	; 128
    30d8:	e4 91       	lpm	r30, Z
    30da:	ef 3f       	cpi	r30, 0xFF	; 255
    30dc:	91 f4       	brne	.+36     	; 0x3102 <main+0x192>
	if(pgm_read_byte(0x8000) == 0xFF)
	{
    30de:	65 eb       	ldi	r22, 0xB5	; 181
    30e0:	73 e2       	ldi	r23, 0x23	; 35
    30e2:	80 ea       	ldi	r24, 0xA0	; 160
    30e4:	99 e0       	ldi	r25, 0x09	; 9
    30e6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
		USART_TransmitString(USARTD0, "No program found\n\r");
    30ea:	85 eb       	ldi	r24, 0xB5	; 181
    30ec:	93 e2       	ldi	r25, 0x23	; 35
    30ee:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
		USB_TransmitString("No program found\n\r");
		
		while(true)
		{
			//USART0_TransmitString("test");
    30f2:	c8 e0       	ldi	r28, 0x08	; 8
    30f4:	d6 e0       	ldi	r29, 0x06	; 6
    30f6:	88 81       	ld	r24, Y
    30f8:	81 11       	cpse	r24, r1
    30fa:	fd cf       	rjmp	.-6      	; 0x30f6 <main+0x186>
			if (!PORTA_IN &(1<<0))
			{
    30fc:	0e 94 26 04 	call	0x84c	; 0x84c <_Z11resetDevicev>
    3100:	fa cf       	rjmp	.-12     	; 0x30f6 <main+0x186>
				resetDevice();
			}
		}
	}

	// run the blockly
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	80 93 fc 23 	sts	0x23FC, r24	; 0x8023fc <Started>
	Started = 1;
    3108:	68 ec       	ldi	r22, 0xC8	; 200
    310a:	73 e2       	ldi	r23, 0x23	; 35
    310c:	80 ea       	ldi	r24, 0xA0	; 160
    310e:	99 e0       	ldi	r25, 0x09	; 9
    3110:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_TransmitString(USARTD0, "Starting your program\n\r");
    3114:	88 ec       	ldi	r24, 0xC8	; 200
    3116:	93 e2       	ldi	r25, 0x23	; 35
    3118:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z18USB_TransmitStringPKc>
	USB_TransmitString("Starting your program\n\r");
    311c:	0c 94 00 40 	jmp	0x8000	; 0x8000 <jump_table+0x200>
	asm("jmp 0x8000");

    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	ff 90       	pop	r15
    312e:	ef 90       	pop	r14
    3130:	df 90       	pop	r13
    3132:	cf 90       	pop	r12
    3134:	08 95       	ret

00003136 <_Z10ToggleLED1v>:
	}
}
void initLEDs() {
	PORTH_DIRSET = PIN4_bm | PIN5_bm;
	PORTH_OUTCLR = PIN4_bm | PIN5_bm;
	} //Set the LED pins to output
    3136:	e7 ee       	ldi	r30, 0xE7	; 231
    3138:	f6 e0       	ldi	r31, 0x06	; 6
    313a:	80 81       	ld	r24, Z
    313c:	80 61       	ori	r24, 0x10	; 16
    313e:	80 83       	st	Z, r24
    3140:	08 95       	ret

00003142 <_Z10ToggleLED2v>:
void ToggleLED1() { PORTH_OUTTGL |= (1 << 4); } // Zet tweede LED aan of uit
    3142:	e7 ee       	ldi	r30, 0xE7	; 231
    3144:	f6 e0       	ldi	r31, 0x06	; 6
    3146:	80 81       	ld	r24, Z
    3148:	80 62       	ori	r24, 0x20	; 32
    314a:	80 83       	st	Z, r24
    314c:	08 95       	ret

0000314e <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
    314e:	10 92 12 25 	sts	0x2512, r1	; 0x802512 <udi_cdc_nb_comm_enabled>
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    3152:	10 92 1e 25 	sts	0x251E, r1	; 0x80251e <udi_cdc_state>
    3156:	10 92 1f 25 	sts	0x251F, r1	; 0x80251f <udi_cdc_state+0x1>

	uid_cdc_state_msg[port].header.bmRequestType =
    315a:	e4 e1       	ldi	r30, 0x14	; 20
    315c:	f5 e2       	ldi	r31, 0x25	; 37
    315e:	81 ea       	ldi	r24, 0xA1	; 161
    3160:	80 83       	st	Z, r24
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    3162:	80 e2       	ldi	r24, 0x20	; 32
    3164:	81 83       	std	Z+1, r24	; 0x01
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    3166:	12 82       	std	Z+2, r1	; 0x02
    3168:	13 82       	std	Z+3, r1	; 0x03
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    316a:	14 82       	std	Z+4, r1	; 0x04
    316c:	15 82       	std	Z+5, r1	; 0x05
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    316e:	82 e0       	ldi	r24, 0x02	; 2
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	86 83       	std	Z+6, r24	; 0x06
    3174:	97 83       	std	Z+7, r25	; 0x07
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    3176:	10 86       	std	Z+8, r1	; 0x08
    3178:	11 86       	std	Z+9, r1	; 0x09

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    317a:	e2 e2       	ldi	r30, 0x22	; 34
    317c:	f5 e2       	ldi	r31, 0x25	; 37
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	92 ec       	ldi	r25, 0xC2	; 194
    3182:	a1 e0       	ldi	r26, 0x01	; 1
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	80 83       	st	Z, r24
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	a2 83       	std	Z+2, r26	; 0x02
    318c:	b3 83       	std	Z+3, r27	; 0x03
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    318e:	14 82       	std	Z+4, r1	; 0x04
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    3190:	15 82       	std	Z+5, r1	; 0x05
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    3192:	88 e0       	ldi	r24, 0x08	; 8
    3194:	86 83       	std	Z+6, r24	; 0x06
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    3196:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udi_cdc_nb_comm_enabled>
    319a:	8f 5f       	subi	r24, 0xFF	; 255
    319c:	80 93 12 25 	sts	0x2512, r24	; 0x802512 <udi_cdc_nb_comm_enabled>
	return true;
}
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	08 95       	ret

000031a4 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    31a4:	80 91 12 25 	lds	r24, 0x2512	; 0x802512 <udi_cdc_nb_comm_enabled>
    31a8:	81 50       	subi	r24, 0x01	; 1
    31aa:	80 93 12 25 	sts	0x2512, r24	; 0x802512 <udi_cdc_nb_comm_enabled>
    31ae:	08 95       	ret

000031b0 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    31b0:	80 91 11 25 	lds	r24, 0x2511	; 0x802511 <udi_cdc_nb_data_enabled>
    31b4:	81 50       	subi	r24, 0x01	; 1
    31b6:	80 93 11 25 	sts	0x2511, r24	; 0x802511 <udi_cdc_nb_data_enabled>
	port = udi_cdc_nb_data_enabled;
    31ba:	80 91 11 25 	lds	r24, 0x2511	; 0x802511 <udi_cdc_nb_data_enabled>
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    31be:	10 92 10 25 	sts	0x2510, r1	; 0x802510 <udi_cdc_data_running>
    31c2:	08 95       	ret

000031c4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	08 95       	ret

000031c8 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	08 95       	ret

000031cc <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
    31cc:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <udd_g_ctrlreq>
    31d0:	88 23       	and	r24, r24
    31d2:	cc f4       	brge	.+50     	; 0x3206 <udi_cdc_comm_setup+0x3a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    31d4:	80 76       	andi	r24, 0x60	; 96
    31d6:	80 32       	cpi	r24, 0x20	; 32
    31d8:	b9 f5       	brne	.+110    	; 0x3248 <udi_cdc_comm_setup+0x7c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    31da:	80 91 72 26 	lds	r24, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    31de:	81 32       	cpi	r24, 0x21	; 33
    31e0:	a9 f5       	brne	.+106    	; 0x324c <udi_cdc_comm_setup+0x80>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    31e2:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    31e6:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    31ea:	07 97       	sbiw	r24, 0x07	; 7
    31ec:	89 f5       	brne	.+98     	; 0x3250 <udi_cdc_comm_setup+0x84>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
    31ee:	e1 e7       	ldi	r30, 0x71	; 113
    31f0:	f6 e2       	ldi	r31, 0x26	; 38
    31f2:	82 e2       	ldi	r24, 0x22	; 34
    31f4:	95 e2       	ldi	r25, 0x25	; 37
    31f6:	80 87       	std	Z+8, r24	; 0x08
    31f8:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    31fa:	87 e0       	ldi	r24, 0x07	; 7
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	82 87       	std	Z+10, r24	; 0x0a
    3200:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	08 95       	ret
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    3206:	80 76       	andi	r24, 0x60	; 96
    3208:	80 32       	cpi	r24, 0x20	; 32
    320a:	21 f5       	brne	.+72     	; 0x3254 <udi_cdc_comm_setup+0x88>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    320c:	80 91 72 26 	lds	r24, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    3210:	80 32       	cpi	r24, 0x20	; 32
    3212:	21 f0       	breq	.+8      	; 0x321c <udi_cdc_comm_setup+0x50>
    3214:	82 32       	cpi	r24, 0x22	; 34
    3216:	01 f1       	breq	.+64     	; 0x3258 <udi_cdc_comm_setup+0x8c>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	08 95       	ret
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
    321c:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    3220:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    3224:	07 97       	sbiw	r24, 0x07	; 7
    3226:	d1 f4       	brne	.+52     	; 0x325c <udi_cdc_comm_setup+0x90>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
    3228:	e1 e7       	ldi	r30, 0x71	; 113
    322a:	f6 e2       	ldi	r31, 0x26	; 38
    322c:	80 e3       	ldi	r24, 0x30	; 48
    322e:	99 e1       	ldi	r25, 0x19	; 25
    3230:	84 87       	std	Z+12, r24	; 0x0c
    3232:	95 87       	std	Z+13, r25	; 0x0d
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
    3234:	82 e2       	ldi	r24, 0x22	; 34
    3236:	95 e2       	ldi	r25, 0x25	; 37
    3238:	80 87       	std	Z+8, r24	; 0x08
    323a:	91 87       	std	Z+9, r25	; 0x09
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
    323c:	87 e0       	ldi	r24, 0x07	; 7
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	82 87       	std	Z+10, r24	; 0x0a
    3242:	93 87       	std	Z+11, r25	; 0x0b
						sizeof(usb_cdc_line_coding_t);
				return true;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	08 95       	ret
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	08 95       	ret
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	08 95       	ret
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	08 95       	ret
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	08 95       	ret
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
    325c:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
    325e:	08 95       	ret

00003260 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
    3260:	08 95       	ret

00003262 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	1f 92       	push	r1
    326e:	cd b7       	in	r28, 0x3d	; 61
    3270:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    3272:	80 91 00 24 	lds	r24, 0x2400	; 0x802400 <udi_cdc_tx_trans_ongoing>
    3276:	81 11       	cpse	r24, r1
    3278:	9f c0       	rjmp	.+318    	; 0x33b8 <udi_cdc_tx_send+0x156>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    327a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <udd_is_high_speed>
    327e:	88 23       	and	r24, r24
    3280:	51 f0       	breq	.+20     	; 0x3296 <udi_cdc_tx_send+0x34>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    3282:	00 91 01 24 	lds	r16, 0x2401	; 0x802401 <udi_cdc_tx_sof_num>
    3286:	10 91 02 24 	lds	r17, 0x2402	; 0x802402 <udi_cdc_tx_sof_num+0x1>
    328a:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <udd_get_micro_frame_number>
    328e:	08 17       	cp	r16, r24
    3290:	19 07       	cpc	r17, r25
    3292:	59 f4       	brne	.+22     	; 0x32aa <udi_cdc_tx_send+0x48>
    3294:	91 c0       	rjmp	.+290    	; 0x33b8 <udi_cdc_tx_send+0x156>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    3296:	00 91 01 24 	lds	r16, 0x2401	; 0x802401 <udi_cdc_tx_sof_num>
    329a:	10 91 02 24 	lds	r17, 0x2402	; 0x802402 <udi_cdc_tx_sof_num+0x1>
    329e:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <udd_get_frame_number>
    32a2:	08 17       	cp	r16, r24
    32a4:	19 07       	cpc	r17, r25
    32a6:	09 f4       	brne	.+2      	; 0x32aa <udi_cdc_tx_send+0x48>
    32a8:	87 c0       	rjmp	.+270    	; 0x33b8 <udi_cdc_tx_send+0x156>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    32aa:	8f b7       	in	r24, 0x3f	; 63
    32ac:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    32ae:	f8 94       	cli
	return flags;
    32b0:	19 81       	ldd	r17, Y+1	; 0x01
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    32b2:	00 91 03 24 	lds	r16, 0x2403	; 0x802403 <udi_cdc_tx_buf_sel>
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    32b6:	e0 2f       	mov	r30, r16
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	ee 0f       	add	r30, r30
    32bc:	ff 1f       	adc	r31, r31
    32be:	ec 5f       	subi	r30, 0xFC	; 252
    32c0:	fb 4d       	sbci	r31, 0xDB	; 219
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	89 2b       	or	r24, r25
    32c8:	09 f5       	brne	.+66     	; 0x330c <udi_cdc_tx_send+0xaa>
		sof_zlp_counter++;
    32ca:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <sof_zlp_counter.5229>
    32ce:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <sof_zlp_counter.5229+0x1>
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	80 93 fd 23 	sts	0x23FD, r24	; 0x8023fd <sof_zlp_counter.5229>
    32d8:	90 93 fe 23 	sts	0x23FE, r25	; 0x8023fe <sof_zlp_counter.5229+0x1>
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    32dc:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <udd_is_high_speed>
    32e0:	81 11       	cpse	r24, r1
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <udi_cdc_tx_send+0x90>
    32e4:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <sof_zlp_counter.5229>
    32e8:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <sof_zlp_counter.5229+0x1>
    32ec:	84 36       	cpi	r24, 0x64	; 100
    32ee:	91 05       	cpc	r25, r1
    32f0:	58 f0       	brcs	.+22     	; 0x3308 <udi_cdc_tx_send+0xa6>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    32f2:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <udd_is_high_speed>
    32f6:	88 23       	and	r24, r24
    32f8:	49 f0       	breq	.+18     	; 0x330c <udi_cdc_tx_send+0xaa>
    32fa:	80 91 fd 23 	lds	r24, 0x23FD	; 0x8023fd <sof_zlp_counter.5229>
    32fe:	90 91 fe 23 	lds	r25, 0x23FE	; 0x8023fe <sof_zlp_counter.5229+0x1>
    3302:	80 32       	cpi	r24, 0x20	; 32
    3304:	93 40       	sbci	r25, 0x03	; 3
    3306:	10 f4       	brcc	.+4      	; 0x330c <udi_cdc_tx_send+0xaa>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3308:	1f bf       	out	0x3f, r17	; 63
    330a:	56 c0       	rjmp	.+172    	; 0x33b8 <udi_cdc_tx_send+0x156>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
    330c:	10 92 fd 23 	sts	0x23FD, r1	; 0x8023fd <sof_zlp_counter.5229>
    3310:	10 92 fe 23 	sts	0x23FE, r1	; 0x8023fe <sof_zlp_counter.5229+0x1>

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    3314:	80 91 ff 23 	lds	r24, 0x23FF	; 0x8023ff <udi_cdc_tx_both_buf_to_send>
    3318:	81 11       	cpse	r24, r1
    331a:	06 c0       	rjmp	.+12     	; 0x3328 <udi_cdc_tx_send+0xc6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	01 11       	cpse	r16, r1
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	80 93 03 24 	sts	0x2403, r24	; 0x802403 <udi_cdc_tx_buf_sel>
    3326:	04 c0       	rjmp	.+8      	; 0x3330 <udi_cdc_tx_send+0xce>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	01 11       	cpse	r16, r1
    332c:	80 e0       	ldi	r24, 0x00	; 0
    332e:	08 2f       	mov	r16, r24
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	80 93 00 24 	sts	0x2400, r24	; 0x802400 <udi_cdc_tx_trans_ongoing>
    3336:	1f bf       	out	0x3f, r17	; 63
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    3338:	10 e0       	ldi	r17, 0x00	; 0
    333a:	f8 01       	movw	r30, r16
    333c:	ee 0f       	add	r30, r30
    333e:	ff 1f       	adc	r31, r31
    3340:	ec 5f       	subi	r30, 0xFC	; 252
    3342:	fb 4d       	sbci	r31, 0xDB	; 219
    3344:	80 81       	ld	r24, Z
    3346:	91 81       	ldd	r25, Z+1	; 0x01
    3348:	ff 24       	eor	r15, r15
    334a:	f3 94       	inc	r15
    334c:	80 34       	cpi	r24, 0x40	; 64
    334e:	91 05       	cpc	r25, r1
    3350:	09 f4       	brne	.+2      	; 0x3354 <udi_cdc_tx_send+0xf2>
    3352:	f1 2c       	mov	r15, r1
	if (b_short_packet) {
    3354:	80 34       	cpi	r24, 0x40	; 64
    3356:	91 05       	cpc	r25, r1
    3358:	91 f0       	breq	.+36     	; 0x337e <udi_cdc_tx_send+0x11c>
		if (udd_is_high_speed()) {
    335a:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <udd_is_high_speed>
    335e:	88 23       	and	r24, r24
    3360:	39 f0       	breq	.+14     	; 0x3370 <udi_cdc_tx_send+0x10e>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    3362:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <udd_get_micro_frame_number>
    3366:	80 93 01 24 	sts	0x2401, r24	; 0x802401 <udi_cdc_tx_sof_num>
    336a:	90 93 02 24 	sts	0x2402, r25	; 0x802402 <udi_cdc_tx_sof_num+0x1>
    336e:	0b c0       	rjmp	.+22     	; 0x3386 <udi_cdc_tx_send+0x124>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    3370:	0e 94 b7 25 	call	0x4b6e	; 0x4b6e <udd_get_frame_number>
    3374:	80 93 01 24 	sts	0x2401, r24	; 0x802401 <udi_cdc_tx_sof_num>
    3378:	90 93 02 24 	sts	0x2402, r25	; 0x802402 <udi_cdc_tx_sof_num+0x1>
    337c:	04 c0       	rjmp	.+8      	; 0x3386 <udi_cdc_tx_send+0x124>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    337e:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <udi_cdc_tx_sof_num>
    3382:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <udi_cdc_tx_sof_num+0x1>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    3386:	f8 01       	movw	r30, r16
    3388:	ee 0f       	add	r30, r30
    338a:	ff 1f       	adc	r31, r31
    338c:	ec 5f       	subi	r30, 0xFC	; 252
    338e:	fb 4d       	sbci	r31, 0xDB	; 219
    3390:	20 81       	ld	r18, Z
    3392:	31 81       	ldd	r19, Z+1	; 0x01
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    3394:	a8 01       	movw	r20, r16
    3396:	00 24       	eor	r0, r0
    3398:	56 95       	lsr	r21
    339a:	47 95       	ror	r20
    339c:	07 94       	ror	r0
    339e:	56 95       	lsr	r21
    33a0:	47 95       	ror	r20
    33a2:	07 94       	ror	r0
    33a4:	54 2f       	mov	r21, r20
    33a6:	40 2d       	mov	r20, r0
    33a8:	48 5f       	subi	r20, 0xF8	; 248
    33aa:	5b 4d       	sbci	r21, 0xDB	; 219
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
    33ac:	03 ee       	ldi	r16, 0xE3	; 227
    33ae:	19 e1       	ldi	r17, 0x19	; 25
    33b0:	6f 2d       	mov	r22, r15
    33b2:	81 e8       	ldi	r24, 0x81	; 129
    33b4:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <udd_ep_run>
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
    33b8:	0f 90       	pop	r0
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	08 95       	ret

000033c6 <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    33c6:	81 11       	cpse	r24, r1
    33c8:	16 c0       	rjmp	.+44     	; 0x33f6 <udi_cdc_data_sent+0x30>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    33ca:	20 91 03 24 	lds	r18, 0x2403	; 0x802403 <udi_cdc_tx_buf_sel>
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	22 23       	and	r18, r18
    33d4:	11 f0       	breq	.+4      	; 0x33da <udi_cdc_data_sent+0x14>
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	88 0f       	add	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	fc 01       	movw	r30, r24
    33e0:	ec 5f       	subi	r30, 0xFC	; 252
    33e2:	fb 4d       	sbci	r31, 0xDB	; 219
    33e4:	10 82       	st	Z, r1
    33e6:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_both_buf_to_send[port] = false;
    33e8:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_trans_ongoing[port] = false;
    33ec:	10 92 00 24 	sts	0x2400, r1	; 0x802400 <udi_cdc_tx_trans_ongoing>

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	0e 94 31 19 	call	0x3262	; 0x3262 <udi_cdc_tx_send>
    33f6:	08 95       	ret

000033f8 <udi_cdc_data_sof_notify>:
void udi_cdc_data_sof_notify(void)
{
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	0e 94 31 19 	call	0x3262	; 0x3262 <udi_cdc_tx_send>
    33fe:	08 95       	ret

00003400 <udi_cdc_ctrl_state_notify>:
	udi_cdc_ctrl_state_notify(port, ep_comm);
}


static void udi_cdc_ctrl_state_notify(uint8_t port, udd_ep_id_t ep)
{
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	// Send it if possible and state changed
	if ((!udi_cdc_serial_state_msg_ongoing[port])
    3404:	80 91 20 25 	lds	r24, 0x2520	; 0x802520 <udi_cdc_serial_state_msg_ongoing>
    3408:	81 11       	cpse	r24, r1
    340a:	1f c0       	rjmp	.+62     	; 0x344a <udi_cdc_ctrl_state_notify+0x4a>
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
    340c:	20 91 1e 25 	lds	r18, 0x251E	; 0x80251e <udi_cdc_state>
    3410:	30 91 1f 25 	lds	r19, 0x251F	; 0x80251f <udi_cdc_state+0x1>
    3414:	80 91 1c 25 	lds	r24, 0x251C	; 0x80251c <uid_cdc_state_msg+0x8>
    3418:	90 91 1d 25 	lds	r25, 0x251D	; 0x80251d <uid_cdc_state_msg+0x9>
    341c:	28 17       	cp	r18, r24
    341e:	39 07       	cpc	r19, r25
    3420:	a1 f0       	breq	.+40     	; 0x344a <udi_cdc_ctrl_state_notify+0x4a>
    3422:	86 2f       	mov	r24, r22
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
    3424:	20 91 1e 25 	lds	r18, 0x251E	; 0x80251e <udi_cdc_state>
    3428:	30 91 1f 25 	lds	r19, 0x251F	; 0x80251f <udi_cdc_state+0x1>
    342c:	20 93 1c 25 	sts	0x251C, r18	; 0x80251c <uid_cdc_state_msg+0x8>
    3430:	30 93 1d 25 	sts	0x251D, r19	; 0x80251d <uid_cdc_state_msg+0x9>
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
				udd_ep_run(ep,
    3434:	03 e5       	ldi	r16, 0x53	; 83
    3436:	1a e1       	ldi	r17, 0x1A	; 26
    3438:	2a e0       	ldi	r18, 0x0A	; 10
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	44 e1       	ldi	r20, 0x14	; 20
    343e:	55 e2       	ldi	r21, 0x25	; 37
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <udd_ep_run>
	if ((!udi_cdc_serial_state_msg_ongoing[port])
			&& (udi_cdc_state[port] != uid_cdc_state_msg[port].value)) {
		// Fill notification message
		uid_cdc_state_msg[port].value = udi_cdc_state[port];
		// Send notification message
		udi_cdc_serial_state_msg_ongoing[port] =
    3446:	80 93 20 25 	sts	0x2520, r24	; 0x802520 <udi_cdc_serial_state_msg_ongoing>
				false,
				(uint8_t *) & uid_cdc_state_msg[port],
				sizeof(uid_cdc_state_msg[0]),
				udi_cdc_serial_state_msg_sent);
	}
}
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	08 95       	ret

00003450 <udi_cdc_ctrl_state_change>:

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}

static void udi_cdc_ctrl_state_change(uint8_t port, bool b_set, le16_t bit_mask)
{
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	1f 92       	push	r1
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    345a:	8f b7       	in	r24, 0x3f	; 63
    345c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    345e:	f8 94       	cli
	return flags;
    3460:	29 81       	ldd	r18, Y+1	; 0x01
	port = 0;
#endif

	// Update state
	flags = cpu_irq_save(); // Protect udi_cdc_state
	if (b_set) {
    3462:	66 23       	and	r22, r22
    3464:	59 f0       	breq	.+22     	; 0x347c <udi_cdc_ctrl_state_change+0x2c>
		udi_cdc_state[port] |= bit_mask;
    3466:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <udi_cdc_state>
    346a:	90 91 1f 25 	lds	r25, 0x251F	; 0x80251f <udi_cdc_state+0x1>
    346e:	48 2b       	or	r20, r24
    3470:	59 2b       	or	r21, r25
    3472:	40 93 1e 25 	sts	0x251E, r20	; 0x80251e <udi_cdc_state>
    3476:	50 93 1f 25 	sts	0x251F, r21	; 0x80251f <udi_cdc_state+0x1>
    347a:	0c c0       	rjmp	.+24     	; 0x3494 <udi_cdc_ctrl_state_change+0x44>
	} else {
		udi_cdc_state[port] &= ~(unsigned)bit_mask;
    347c:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <udi_cdc_state>
    3480:	90 91 1f 25 	lds	r25, 0x251F	; 0x80251f <udi_cdc_state+0x1>
    3484:	40 95       	com	r20
    3486:	50 95       	com	r21
    3488:	48 23       	and	r20, r24
    348a:	59 23       	and	r21, r25
    348c:	40 93 1e 25 	sts	0x251E, r20	; 0x80251e <udi_cdc_state>
    3490:	50 93 1f 25 	sts	0x251F, r21	; 0x80251f <udi_cdc_state+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3494:	2f bf       	out	0x3f, r18	; 63
#undef UDI_CDC_PORT_TO_COMM_EP
	default:
		ep_comm = UDI_CDC_COMM_EP_0;
		break;
	}
	udi_cdc_ctrl_state_notify(port, ep_comm);
    3496:	62 e8       	ldi	r22, 0x82	; 130
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	0e 94 00 1a 	call	0x3400	; 0x3400 <udi_cdc_ctrl_state_notify>
}
    349e:	0f 90       	pop	r0
    34a0:	df 91       	pop	r29
    34a2:	cf 91       	pop	r28
    34a4:	08 95       	ret

000034a6 <udi_cdc_serial_state_msg_sent>:
	default:
		port = 0;
		break;
	}

	udi_cdc_serial_state_msg_ongoing[port] = false;
    34a6:	10 92 20 25 	sts	0x2520, r1	; 0x802520 <udi_cdc_serial_state_msg_ongoing>

	// For the irregular signals like break, the incoming ring signal,
	// or the overrun error state, this will reset their values to zero
	// and again will not send another notification until their state changes.
	udi_cdc_state[port] &= ~(CDC_SERIAL_STATE_BREAK |
    34aa:	80 91 1e 25 	lds	r24, 0x251E	; 0x80251e <udi_cdc_state>
    34ae:	90 91 1f 25 	lds	r25, 0x251F	; 0x80251f <udi_cdc_state+0x1>
    34b2:	83 78       	andi	r24, 0x83	; 131
    34b4:	80 93 1e 25 	sts	0x251E, r24	; 0x80251e <udi_cdc_state>
    34b8:	90 93 1f 25 	sts	0x251F, r25	; 0x80251f <udi_cdc_state+0x1>
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	uid_cdc_state_msg[port].value &= ~(CDC_SERIAL_STATE_BREAK |
    34bc:	e4 e1       	ldi	r30, 0x14	; 20
    34be:	f5 e2       	ldi	r31, 0x25	; 37
    34c0:	80 85       	ldd	r24, Z+8	; 0x08
    34c2:	91 85       	ldd	r25, Z+9	; 0x09
    34c4:	83 78       	andi	r24, 0x83	; 131
    34c6:	80 87       	std	Z+8, r24	; 0x08
    34c8:	91 87       	std	Z+9, r25	; 0x09
			CDC_SERIAL_STATE_RING |
			CDC_SERIAL_STATE_FRAMING |
			CDC_SERIAL_STATE_PARITY | CDC_SERIAL_STATE_OVERRUN);
	// Send it if possible and state changed
	udi_cdc_ctrl_state_notify(port, ep);
    34ca:	64 2f       	mov	r22, r20
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	0e 94 00 1a 	call	0x3400	; 0x3400 <udi_cdc_ctrl_state_notify>
    34d2:	08 95       	ret

000034d4 <udi_cdc_ctrl_signal_dcd>:

//------- Application interface

void udi_cdc_ctrl_signal_dcd(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DCD);
    34d4:	41 e0       	ldi	r20, 0x01	; 1
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	68 2f       	mov	r22, r24
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    34e0:	08 95       	ret

000034e2 <udi_cdc_ctrl_signal_dsr>:
}

void udi_cdc_ctrl_signal_dsr(bool b_set)
{
	udi_cdc_ctrl_state_change(0, b_set, CDC_SERIAL_STATE_DSR);
    34e2:	42 e0       	ldi	r20, 0x02	; 2
    34e4:	50 e0       	ldi	r21, 0x00	; 0
    34e6:	68 2f       	mov	r22, r24
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    34ee:	08 95       	ret

000034f0 <udi_cdc_signal_framing_error>:
}

void udi_cdc_signal_framing_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_FRAMING);
    34f0:	40 e1       	ldi	r20, 0x10	; 16
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	61 e0       	ldi	r22, 0x01	; 1
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    34fc:	08 95       	ret

000034fe <udi_cdc_signal_parity_error>:
}

void udi_cdc_signal_parity_error(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_PARITY);
    34fe:	40 e2       	ldi	r20, 0x20	; 32
    3500:	50 e0       	ldi	r21, 0x00	; 0
    3502:	61 e0       	ldi	r22, 0x01	; 1
    3504:	80 e0       	ldi	r24, 0x00	; 0
    3506:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    350a:	08 95       	ret

0000350c <udi_cdc_signal_overrun>:
}

void udi_cdc_signal_overrun(void)
{
	udi_cdc_ctrl_state_change(0, true, CDC_SERIAL_STATE_OVERRUN);
    350c:	40 e4       	ldi	r20, 0x40	; 64
    350e:	50 e0       	ldi	r21, 0x00	; 0
    3510:	61 e0       	ldi	r22, 0x01	; 1
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    3518:	08 95       	ret

0000351a <udi_cdc_multi_ctrl_signal_dcd>:
}

void udi_cdc_multi_ctrl_signal_dcd(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DCD);
    351a:	41 e0       	ldi	r20, 0x01	; 1
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    3522:	08 95       	ret

00003524 <udi_cdc_multi_ctrl_signal_dsr>:
}

void udi_cdc_multi_ctrl_signal_dsr(uint8_t port, bool b_set)
{
	udi_cdc_ctrl_state_change(port, b_set, CDC_SERIAL_STATE_DSR);
    3524:	42 e0       	ldi	r20, 0x02	; 2
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    352c:	08 95       	ret

0000352e <udi_cdc_multi_signal_framing_error>:
}

void udi_cdc_multi_signal_framing_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_FRAMING);
    352e:	40 e1       	ldi	r20, 0x10	; 16
    3530:	50 e0       	ldi	r21, 0x00	; 0
    3532:	61 e0       	ldi	r22, 0x01	; 1
    3534:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    3538:	08 95       	ret

0000353a <udi_cdc_multi_signal_parity_error>:
}

void udi_cdc_multi_signal_parity_error(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_PARITY);
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	61 e0       	ldi	r22, 0x01	; 1
    3540:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    3544:	08 95       	ret

00003546 <udi_cdc_multi_signal_overrun>:
}

void udi_cdc_multi_signal_overrun(uint8_t port)
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
    3546:	40 e4       	ldi	r20, 0x40	; 64
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	0e 94 28 1a 	call	0x3450	; 0x3450 <udi_cdc_ctrl_state_change>
    3550:	08 95       	ret

00003552 <udi_cdc_multi_get_nb_received_data>:
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	1f 92       	push	r1
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    355c:	8f b7       	in	r24, 0x3f	; 63
    355e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3560:	f8 94       	cli
	return flags;
    3562:	49 81       	ldd	r20, Y+1	; 0x01

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    3564:	20 91 89 24 	lds	r18, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    3568:	30 91 8a 24 	lds	r19, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    356c:	e0 91 8b 24 	lds	r30, 0x248B	; 0x80248b <udi_cdc_rx_buf_sel>
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	ee 0f       	add	r30, r30
    3574:	ff 1f       	adc	r31, r31
    3576:	e4 57       	subi	r30, 0x74	; 116
    3578:	fb 4d       	sbci	r31, 0xDB	; 219
    357a:	80 81       	ld	r24, Z
    357c:	91 81       	ldd	r25, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    357e:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	return nb_received;
}
    3580:	82 1b       	sub	r24, r18
    3582:	93 0b       	sbc	r25, r19
    3584:	0f 90       	pop	r0
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	08 95       	ret

0000358c <udi_cdc_get_nb_received_data>:

iram_size_t udi_cdc_get_nb_received_data(void)
{
	return udi_cdc_multi_get_nb_received_data(0);
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <udi_cdc_multi_get_nb_received_data>
}
    3592:	08 95       	ret

00003594 <udi_cdc_multi_is_rx_ready>:

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    3594:	0e 94 a9 1a 	call	0x3552	; 0x3552 <udi_cdc_multi_get_nb_received_data>
    3598:	21 e0       	ldi	r18, 0x01	; 1
    359a:	89 2b       	or	r24, r25
    359c:	09 f4       	brne	.+2      	; 0x35a0 <udi_cdc_multi_is_rx_ready+0xc>
    359e:	20 e0       	ldi	r18, 0x00	; 0
}
    35a0:	82 2f       	mov	r24, r18
    35a2:	08 95       	ret

000035a4 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	cf 93       	push	r28
    35aa:	df 93       	push	r29
    35ac:	1f 92       	push	r1
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    35b2:	8f b7       	in	r24, 0x3f	; 63
    35b4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    35b6:	f8 94       	cli
	return flags;
    35b8:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    35ba:	20 91 8b 24 	lds	r18, 0x248B	; 0x80248b <udi_cdc_rx_buf_sel>
	if (udi_cdc_rx_trans_ongoing[port] ||
    35be:	80 91 88 24 	lds	r24, 0x2488	; 0x802488 <udi_cdc_rx_trans_ongoing>
    35c2:	81 11       	cpse	r24, r1
    35c4:	10 c0       	rjmp	.+32     	; 0x35e6 <udi_cdc_rx_start+0x42>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    35c6:	60 91 89 24 	lds	r22, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    35ca:	70 91 8a 24 	lds	r23, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
    35ce:	02 2f       	mov	r16, r18
    35d0:	10 e0       	ldi	r17, 0x00	; 0
    35d2:	f8 01       	movw	r30, r16
    35d4:	ee 0f       	add	r30, r30
    35d6:	ff 1f       	adc	r31, r31
    35d8:	e4 57       	subi	r30, 0x74	; 116
    35da:	fb 4d       	sbci	r31, 0xDB	; 219
    35dc:	40 81       	ld	r20, Z
    35de:	51 81       	ldd	r21, Z+1	; 0x01
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
    35e0:	64 17       	cp	r22, r20
    35e2:	75 07       	cpc	r23, r21
    35e4:	18 f4       	brcc	.+6      	; 0x35ec <udi_cdc_rx_start+0x48>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35e6:	9f bf       	out	0x3f, r25	; 63
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	24 c0       	rjmp	.+72     	; 0x3634 <udi_cdc_rx_start+0x90>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    35ec:	10 92 89 24 	sts	0x2489, r1	; 0x802489 <udi_cdc_rx_pos>
    35f0:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udi_cdc_rx_pos+0x1>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	21 11       	cpse	r18, r1
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <udi_cdc_rx_buf_sel>

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    35fe:	81 e0       	ldi	r24, 0x01	; 1
    3600:	80 93 88 24 	sts	0x2488, r24	; 0x802488 <udi_cdc_rx_trans_ongoing>
    3604:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	0e 94 ca 1a 	call	0x3594	; 0x3594 <udi_cdc_multi_is_rx_ready>
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    360c:	a8 01       	movw	r20, r16
    360e:	00 24       	eor	r0, r0
    3610:	56 95       	lsr	r21
    3612:	47 95       	ror	r20
    3614:	07 94       	ror	r0
    3616:	56 95       	lsr	r21
    3618:	47 95       	ror	r20
    361a:	07 94       	ror	r0
    361c:	54 2f       	mov	r21, r20
    361e:	40 2d       	mov	r20, r0
    3620:	40 57       	subi	r20, 0x70	; 112
    3622:	5b 4d       	sbci	r21, 0xDB	; 219
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
    3624:	04 e5       	ldi	r16, 0x54	; 84
    3626:	1b e1       	ldi	r17, 0x1B	; 27
    3628:	20 e4       	ldi	r18, 0x40	; 64
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	82 e0       	ldi	r24, 0x02	; 2
    3630:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <udd_ep_run>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    3634:	0f 90       	pop	r0
    3636:	df 91       	pop	r29
    3638:	cf 91       	pop	r28
    363a:	1f 91       	pop	r17
    363c:	0f 91       	pop	r16
    363e:	08 95       	ret

00003640 <udi_cdc_data_enable>:
{
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
    3640:	10 92 11 25 	sts	0x2511, r1	; 0x802511 <udi_cdc_nb_data_enabled>
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    3644:	10 92 00 24 	sts	0x2400, r1	; 0x802400 <udi_cdc_tx_trans_ongoing>
	udi_cdc_tx_both_buf_to_send[port] = false;
    3648:	10 92 ff 23 	sts	0x23FF, r1	; 0x8023ff <udi_cdc_tx_both_buf_to_send>
	udi_cdc_tx_buf_sel[port] = 0;
    364c:	10 92 03 24 	sts	0x2403, r1	; 0x802403 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf_nb[port][0] = 0;
    3650:	e4 e0       	ldi	r30, 0x04	; 4
    3652:	f4 e2       	ldi	r31, 0x24	; 36
    3654:	10 82       	st	Z, r1
    3656:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_tx_buf_nb[port][1] = 0;
    3658:	12 82       	std	Z+2, r1	; 0x02
    365a:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_tx_sof_num[port] = 0;
    365c:	10 92 01 24 	sts	0x2401, r1	; 0x802401 <udi_cdc_tx_sof_num>
    3660:	10 92 02 24 	sts	0x2402, r1	; 0x802402 <udi_cdc_tx_sof_num+0x1>
	udi_cdc_tx_send(port);
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	0e 94 31 19 	call	0x3262	; 0x3262 <udi_cdc_tx_send>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    366a:	10 92 88 24 	sts	0x2488, r1	; 0x802488 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_buf_sel[port] = 0;
    366e:	10 92 8b 24 	sts	0x248B, r1	; 0x80248b <udi_cdc_rx_buf_sel>
	udi_cdc_rx_buf_nb[port][0] = 0;
    3672:	ec e8       	ldi	r30, 0x8C	; 140
    3674:	f4 e2       	ldi	r31, 0x24	; 36
    3676:	10 82       	st	Z, r1
    3678:	11 82       	std	Z+1, r1	; 0x01
	udi_cdc_rx_buf_nb[port][1] = 0;
    367a:	12 82       	std	Z+2, r1	; 0x02
    367c:	13 82       	std	Z+3, r1	; 0x03
	udi_cdc_rx_pos[port] = 0;
    367e:	10 92 89 24 	sts	0x2489, r1	; 0x802489 <udi_cdc_rx_pos>
    3682:	10 92 8a 24 	sts	0x248A, r1	; 0x80248a <udi_cdc_rx_pos+0x1>
	if (!udi_cdc_rx_start(port)) {
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <udi_cdc_rx_start>
    368c:	88 23       	and	r24, r24
    368e:	59 f0       	breq	.+22     	; 0x36a6 <udi_cdc_data_enable+0x66>
		return false;
	}
	udi_cdc_nb_data_enabled++;
    3690:	90 91 11 25 	lds	r25, 0x2511	; 0x802511 <udi_cdc_nb_data_enabled>
    3694:	9f 5f       	subi	r25, 0xFF	; 255
    3696:	90 93 11 25 	sts	0x2511, r25	; 0x802511 <udi_cdc_nb_data_enabled>
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    369a:	90 91 11 25 	lds	r25, 0x2511	; 0x802511 <udi_cdc_nb_data_enabled>
    369e:	91 30       	cpi	r25, 0x01	; 1
    36a0:	11 f4       	brne	.+4      	; 0x36a6 <udi_cdc_data_enable+0x66>
		udi_cdc_data_running = true;
    36a2:	90 93 10 25 	sts	0x2510, r25	; 0x802510 <udi_cdc_data_running>
	}
	return true;
}
    36a6:	08 95       	ret

000036a8 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
    36ac:	81 11       	cpse	r24, r1
    36ae:	2a c0       	rjmp	.+84     	; 0x3704 <udi_cdc_data_received+0x5c>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    36b0:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <udi_cdc_rx_buf_sel>
    36b4:	e1 e0       	ldi	r30, 0x01	; 1
    36b6:	81 11       	cpse	r24, r1
    36b8:	e0 e0       	ldi	r30, 0x00	; 0
    36ba:	84 2f       	mov	r24, r20
	if (!n) {
    36bc:	61 15       	cp	r22, r1
    36be:	71 05       	cpc	r23, r1
    36c0:	a9 f4       	brne	.+42     	; 0x36ec <udi_cdc_data_received+0x44>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    36c2:	4e 2f       	mov	r20, r30
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	00 24       	eor	r0, r0
    36c8:	56 95       	lsr	r21
    36ca:	47 95       	ror	r20
    36cc:	07 94       	ror	r0
    36ce:	56 95       	lsr	r21
    36d0:	47 95       	ror	r20
    36d2:	07 94       	ror	r0
    36d4:	54 2f       	mov	r21, r20
    36d6:	40 2d       	mov	r20, r0
    36d8:	40 57       	subi	r20, 0x70	; 112
    36da:	5b 4d       	sbci	r21, 0xDB	; 219
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
    36dc:	04 e5       	ldi	r16, 0x54	; 84
    36de:	1b e1       	ldi	r17, 0x1B	; 27
    36e0:	20 e4       	ldi	r18, 0x40	; 64
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	61 e0       	ldi	r22, 0x01	; 1
    36e6:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <udd_ep_run>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    36ea:	0c c0       	rjmp	.+24     	; 0x3704 <udi_cdc_data_received+0x5c>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	ee 0f       	add	r30, r30
    36f0:	ff 1f       	adc	r31, r31
    36f2:	e4 57       	subi	r30, 0x74	; 116
    36f4:	fb 4d       	sbci	r31, 0xDB	; 219
    36f6:	60 83       	st	Z, r22
    36f8:	71 83       	std	Z+1, r23	; 0x01
	udi_cdc_rx_trans_ongoing[port] = false;
    36fa:	10 92 88 24 	sts	0x2488, r1	; 0x802488 <udi_cdc_rx_trans_ongoing>
	udi_cdc_rx_start(port);
    36fe:	80 e0       	ldi	r24, 0x00	; 0
    3700:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <udi_cdc_rx_start>
}
    3704:	1f 91       	pop	r17
    3706:	0f 91       	pop	r16
    3708:	08 95       	ret

0000370a <udi_cdc_is_rx_ready>:
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
	return udi_cdc_multi_is_rx_ready(0);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <udi_cdc_multi_is_rx_ready>
}
    3710:	08 95       	ret

00003712 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
    3712:	ef 92       	push	r14
    3714:	ff 92       	push	r15
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	1f 92       	push	r1
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    3722:	11 e0       	ldi	r17, 0x01	; 1
    3724:	80 91 28 25 	lds	r24, 0x2528	; 0x802528 <udi_cdc_line_coding+0x6>
    3728:	89 30       	cpi	r24, 0x09	; 9
    372a:	09 f0       	breq	.+2      	; 0x372e <udi_cdc_multi_getc+0x1c>
    372c:	10 e0       	ldi	r17, 0x00	; 0
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	50 e0       	ldi	r21, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3732:	8f b7       	in	r24, 0x3f	; 63
    3734:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3736:	f8 94       	cli
	return flags;
    3738:	a9 81       	ldd	r26, Y+1	; 0x01
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    373a:	20 91 89 24 	lds	r18, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    373e:	30 91 8a 24 	lds	r19, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    3742:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	fc 01       	movw	r30, r24
    374a:	ee 0f       	add	r30, r30
    374c:	ff 1f       	adc	r31, r31
    374e:	e4 57       	subi	r30, 0x74	; 116
    3750:	fb 4d       	sbci	r31, 0xDB	; 219
    3752:	60 81       	ld	r22, Z
    3754:	71 81       	ldd	r23, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3756:	af bf       	out	0x3f, r26	; 63
	cpu_irq_restore(flags);
	while (again) {
    3758:	26 17       	cp	r18, r22
    375a:	37 07       	cpc	r19, r23
    375c:	30 f0       	brcs	.+12     	; 0x376a <udi_cdc_multi_getc+0x58>
		if (!udi_cdc_data_running) {
    375e:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <udi_cdc_data_running>
    3762:	81 11       	cpse	r24, r1
    3764:	e6 cf       	rjmp	.-52     	; 0x3732 <udi_cdc_multi_getc+0x20>
			return 0;
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	22 c0       	rjmp	.+68     	; 0x37ae <udi_cdc_multi_getc+0x9c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    376a:	fc 01       	movw	r30, r24
    376c:	00 24       	eor	r0, r0
    376e:	f6 95       	lsr	r31
    3770:	e7 95       	ror	r30
    3772:	07 94       	ror	r0
    3774:	f6 95       	lsr	r31
    3776:	e7 95       	ror	r30
    3778:	07 94       	ror	r0
    377a:	fe 2f       	mov	r31, r30
    377c:	e0 2d       	mov	r30, r0
    377e:	e0 57       	subi	r30, 0x70	; 112
    3780:	fb 4d       	sbci	r31, 0xDB	; 219
    3782:	e2 0f       	add	r30, r18
    3784:	f3 1f       	adc	r31, r19
    3786:	80 81       	ld	r24, Z
    3788:	7a 01       	movw	r14, r20
    378a:	e8 2a       	or	r14, r24
	udi_cdc_rx_pos[port] = pos+1;
    378c:	2f 5f       	subi	r18, 0xFF	; 255
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	20 93 89 24 	sts	0x2489, r18	; 0x802489 <udi_cdc_rx_pos>
    3794:	30 93 8a 24 	sts	0x248A, r19	; 0x80248a <udi_cdc_rx_pos+0x1>

	udi_cdc_rx_start(port);
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <udi_cdc_rx_start>

	if (b_databit_9) {
    379e:	11 23       	and	r17, r17
    37a0:	21 f0       	breq	.+8      	; 0x37aa <udi_cdc_multi_getc+0x98>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
    37a2:	5e 2d       	mov	r21, r14
    37a4:	44 27       	eor	r20, r20

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
    37a6:	10 e0       	ldi	r17, 0x00	; 0
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
    37a8:	c4 cf       	rjmp	.-120    	; 0x3732 <udi_cdc_multi_getc+0x20>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    37aa:	8e 2d       	mov	r24, r14
    37ac:	9f 2d       	mov	r25, r15
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
    37ae:	0f 90       	pop	r0
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	ff 90       	pop	r15
    37b8:	ef 90       	pop	r14
    37ba:	08 95       	ret

000037bc <udi_cdc_getc>:

int udi_cdc_getc(void)
{
	return udi_cdc_multi_getc(0);
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	0e 94 89 1b 	call	0x3712	; 0x3712 <udi_cdc_multi_getc>
}
    37c2:	08 95       	ret

000037c4 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
    37c4:	cf 92       	push	r12
    37c6:	df 92       	push	r13
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29
    37d4:	1f 92       	push	r1
    37d6:	cd b7       	in	r28, 0x3d	; 61
    37d8:	de b7       	in	r29, 0x3e	; 62
    37da:	6b 01       	movw	r12, r22
    37dc:	7a 01       	movw	r14, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    37de:	8f b7       	in	r24, 0x3f	; 63
    37e0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    37e2:	f8 94       	cli
	return flags;
    37e4:	49 81       	ldd	r20, Y+1	; 0x01
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
    37e6:	60 91 89 24 	lds	r22, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    37ea:	70 91 8a 24 	lds	r23, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    37ee:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <udi_cdc_rx_buf_sel>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	fc 01       	movw	r30, r24
    37f6:	ee 0f       	add	r30, r30
    37f8:	ff 1f       	adc	r31, r31
    37fa:	e4 57       	subi	r30, 0x74	; 116
    37fc:	fb 4d       	sbci	r31, 0xDB	; 219
    37fe:	20 81       	ld	r18, Z
    3800:	31 81       	ldd	r19, Z+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3802:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);
	while (again) {
    3804:	62 17       	cp	r22, r18
    3806:	73 07       	cpc	r23, r19
    3808:	38 f0       	brcs	.+14     	; 0x3818 <udi_cdc_multi_read_buf+0x54>
		if (!udi_cdc_data_running) {
    380a:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <udi_cdc_data_running>
    380e:	81 11       	cpse	r24, r1
    3810:	e6 cf       	rjmp	.-52     	; 0x37de <udi_cdc_multi_read_buf+0x1a>
    3812:	8e 2d       	mov	r24, r14
    3814:	9f 2d       	mov	r25, r15
    3816:	36 c0       	rjmp	.+108    	; 0x3884 <udi_cdc_multi_read_buf+0xc0>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    3818:	fc 01       	movw	r30, r24
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	e4 57       	subi	r30, 0x74	; 116
    3820:	fb 4d       	sbci	r31, 0xDB	; 219
    3822:	20 81       	ld	r18, Z
    3824:	31 81       	ldd	r19, Z+1	; 0x01
    3826:	26 1b       	sub	r18, r22
    3828:	37 0b       	sbc	r19, r23
    382a:	87 01       	movw	r16, r14
    382c:	2e 15       	cp	r18, r14
    382e:	3f 05       	cpc	r19, r15
    3830:	08 f4       	brcc	.+2      	; 0x3834 <udi_cdc_multi_read_buf+0x70>
    3832:	89 01       	movw	r16, r18
	if (copy_nb>size) {
		copy_nb = size;
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
    3834:	00 24       	eor	r0, r0
    3836:	96 95       	lsr	r25
    3838:	87 95       	ror	r24
    383a:	07 94       	ror	r0
    383c:	96 95       	lsr	r25
    383e:	87 95       	ror	r24
    3840:	07 94       	ror	r0
    3842:	98 2f       	mov	r25, r24
    3844:	80 2d       	mov	r24, r0
    3846:	68 0f       	add	r22, r24
    3848:	79 1f       	adc	r23, r25
    384a:	60 57       	subi	r22, 0x70	; 112
    384c:	7b 4d       	sbci	r23, 0xDB	; 219
    384e:	a8 01       	movw	r20, r16
    3850:	c6 01       	movw	r24, r12
    3852:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <memcpy>
	udi_cdc_rx_pos[port] += copy_nb;
    3856:	80 91 89 24 	lds	r24, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    385a:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
    385e:	80 0f       	add	r24, r16
    3860:	91 1f       	adc	r25, r17
    3862:	80 93 89 24 	sts	0x2489, r24	; 0x802489 <udi_cdc_rx_pos>
    3866:	90 93 8a 24 	sts	0x248A, r25	; 0x80248a <udi_cdc_rx_pos+0x1>
	ptr_buf += copy_nb;
    386a:	c0 0e       	add	r12, r16
    386c:	d1 1e       	adc	r13, r17
	size -= copy_nb;
    386e:	e0 1a       	sub	r14, r16
    3870:	f1 0a       	sbc	r15, r17
	udi_cdc_rx_start(port);
    3872:	80 e0       	ldi	r24, 0x00	; 0
    3874:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <udi_cdc_rx_start>

	if (size) {
    3878:	e1 14       	cp	r14, r1
    387a:	f1 04       	cpc	r15, r1
    387c:	09 f0       	breq	.+2      	; 0x3880 <udi_cdc_multi_read_buf+0xbc>
    387e:	af cf       	rjmp	.-162    	; 0x37de <udi_cdc_multi_read_buf+0x1a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
}
    3884:	0f 90       	pop	r0
    3886:	df 91       	pop	r29
    3888:	cf 91       	pop	r28
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	ff 90       	pop	r15
    3890:	ef 90       	pop	r14
    3892:	df 90       	pop	r13
    3894:	cf 90       	pop	r12
    3896:	08 95       	ret

00003898 <udi_cdc_read_no_polling>:
	}
	return(nb_avail_data);
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
    3898:	ef 92       	push	r14
    389a:	ff 92       	push	r15
    389c:	0f 93       	push	r16
    389e:	1f 93       	push	r17
    38a0:	cf 93       	push	r28
    38a2:	df 93       	push	r29
    38a4:	1f 92       	push	r1
    38a6:	1f 92       	push	r1
    38a8:	cd b7       	in	r28, 0x3d	; 61
    38aa:	de b7       	in	r29, 0x3e	; 62
    38ac:	dc 01       	movw	r26, r24
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
    38ae:	90 91 10 25 	lds	r25, 0x2510	; 0x802510 <udi_cdc_data_running>
    38b2:	99 23       	and	r25, r25
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <udi_cdc_read_no_polling+0x20>
    38b6:	45 c0       	rjmp	.+138    	; 0x3942 <udi_cdc_read_no_polling+0xaa>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    38b8:	8f b7       	in	r24, 0x3f	; 63
    38ba:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    38bc:	f8 94       	cli
	return flags;
    38be:	89 81       	ldd	r24, Y+1	; 0x01
	}
	
	//Get number of available data
	// Check available data
	flags = cpu_irq_save(); // to protect udi_cdc_rx_pos & udi_cdc_rx_buf_sel
	pos = udi_cdc_rx_pos[port];
    38c0:	40 91 89 24 	lds	r20, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    38c4:	50 91 8a 24 	lds	r21, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
	buf_sel = udi_cdc_rx_buf_sel[port];
    38c8:	20 91 8b 24 	lds	r18, 0x248B	; 0x80248b <udi_cdc_rx_buf_sel>
	nb_avail_data = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	f9 01       	movw	r30, r18
    38d0:	ee 0f       	add	r30, r30
    38d2:	ff 1f       	adc	r31, r31
    38d4:	e4 57       	subi	r30, 0x74	; 116
    38d6:	fb 4d       	sbci	r31, 0xDB	; 219
    38d8:	e0 80       	ld	r14, Z
    38da:	f1 80       	ldd	r15, Z+1	; 0x01
    38dc:	e4 1a       	sub	r14, r20
    38de:	f5 0a       	sbc	r15, r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38e0:	8f bf       	out	0x3f, r24	; 63
    38e2:	06 2f       	mov	r16, r22
    38e4:	17 2f       	mov	r17, r23
    38e6:	e0 16       	cp	r14, r16
    38e8:	f1 06       	cpc	r15, r17
    38ea:	08 f4       	brcc	.+2      	; 0x38ee <udi_cdc_read_no_polling+0x56>
    38ec:	87 01       	movw	r16, r14
	//If the buffer contains less than the requested number of data,
	//adjust read size
	if(nb_avail_data<size) {
		size = nb_avail_data;
	}
	if(size>0) {
    38ee:	01 15       	cp	r16, r1
    38f0:	11 05       	cpc	r17, r1
    38f2:	51 f1       	breq	.+84     	; 0x3948 <udi_cdc_read_no_polling+0xb0>
    38f4:	cd 01       	movw	r24, r26
		memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], size);
    38f6:	00 24       	eor	r0, r0
    38f8:	36 95       	lsr	r19
    38fa:	27 95       	ror	r18
    38fc:	07 94       	ror	r0
    38fe:	36 95       	lsr	r19
    3900:	27 95       	ror	r18
    3902:	07 94       	ror	r0
    3904:	32 2f       	mov	r19, r18
    3906:	20 2d       	mov	r18, r0
    3908:	b9 01       	movw	r22, r18
    390a:	64 0f       	add	r22, r20
    390c:	75 1f       	adc	r23, r21
    390e:	60 57       	subi	r22, 0x70	; 112
    3910:	7b 4d       	sbci	r23, 0xDB	; 219
    3912:	a8 01       	movw	r20, r16
    3914:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <memcpy>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3918:	8f b7       	in	r24, 0x3f	; 63
    391a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    391c:	f8 94       	cli
	return flags;
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
		flags = cpu_irq_save(); // to protect udi_cdc_rx_pos
		udi_cdc_rx_pos[port] += size;
    3920:	20 91 89 24 	lds	r18, 0x2489	; 0x802489 <udi_cdc_rx_pos>
    3924:	30 91 8a 24 	lds	r19, 0x248A	; 0x80248a <udi_cdc_rx_pos+0x1>
    3928:	02 0f       	add	r16, r18
    392a:	13 1f       	adc	r17, r19
    392c:	00 93 89 24 	sts	0x2489, r16	; 0x802489 <udi_cdc_rx_pos>
    3930:	10 93 8a 24 	sts	0x248A, r17	; 0x80248a <udi_cdc_rx_pos+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3934:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <udi_cdc_rx_start>
	}
	return(nb_avail_data);
    393c:	8e 2d       	mov	r24, r14
    393e:	9f 2d       	mov	r25, r15
    3940:	05 c0       	rjmp	.+10     	; 0x394c <udi_cdc_read_no_polling+0xb4>
	port = 0;
#endif

	//Data interface not started... exit
	if (!udi_cdc_data_running) {
		return 0;
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	02 c0       	rjmp	.+4      	; 0x394c <udi_cdc_read_no_polling+0xb4>
		cpu_irq_restore(flags);
		
		ptr_buf += size;
		udi_cdc_rx_start(port);
	}
	return(nb_avail_data);
    3948:	8e 2d       	mov	r24, r14
    394a:	9f 2d       	mov	r25, r15
}

iram_size_t udi_cdc_read_no_polling(void* buf, iram_size_t size)
{
	return udi_cdc_multi_read_no_polling(0, buf, size);
}
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	ff 90       	pop	r15
    395a:	ef 90       	pop	r14
    395c:	08 95       	ret

0000395e <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
    395e:	ab 01       	movw	r20, r22
	return udi_cdc_multi_read_buf(0, buf, size);
    3960:	bc 01       	movw	r22, r24
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <udi_cdc_multi_read_buf>
}
    3968:	08 95       	ret

0000396a <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	1f 92       	push	r1
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3974:	8f b7       	in	r24, 0x3f	; 63
    3976:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3978:	f8 94       	cli
	return flags;
    397a:	99 81       	ldd	r25, Y+1	; 0x01
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    397c:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udi_cdc_tx_buf_sel>
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3980:	e8 2f       	mov	r30, r24
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	ee 0f       	add	r30, r30
    3986:	ff 1f       	adc	r31, r31
    3988:	ec 5f       	subi	r30, 0xFC	; 252
    398a:	fb 4d       	sbci	r31, 0xDB	; 219
    398c:	20 81       	ld	r18, Z
    398e:	31 81       	ldd	r19, Z+1	; 0x01
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    3990:	20 34       	cpi	r18, 0x40	; 64
    3992:	31 05       	cpc	r19, r1
    3994:	89 f4       	brne	.+34     	; 0x39b8 <udi_cdc_multi_get_free_tx_buffer+0x4e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    3996:	40 91 00 24 	lds	r20, 0x2400	; 0x802400 <udi_cdc_tx_trans_ongoing>
    399a:	41 11       	cpse	r20, r1
    399c:	0d c0       	rjmp	.+26     	; 0x39b8 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    399e:	40 91 ff 23 	lds	r20, 0x23FF	; 0x8023ff <udi_cdc_tx_both_buf_to_send>
    39a2:	41 11       	cpse	r20, r1
    39a4:	09 c0       	rjmp	.+18     	; 0x39b8 <udi_cdc_multi_get_free_tx_buffer+0x4e>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    39a6:	21 e0       	ldi	r18, 0x01	; 1
    39a8:	20 93 ff 23 	sts	0x23FF, r18	; 0x8023ff <udi_cdc_tx_both_buf_to_send>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    39ac:	81 11       	cpse	r24, r1
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	20 93 03 24 	sts	0x2403, r18	; 0x802403 <udi_cdc_tx_buf_sel>
			buf_sel_nb = 0;
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39b8:	9f bf       	out	0x3f, r25	; 63
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
    39ba:	80 e4       	ldi	r24, 0x40	; 64
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	82 1b       	sub	r24, r18
    39c0:	93 0b       	sbc	r25, r19
    39c2:	0f 90       	pop	r0
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	08 95       	ret

000039ca <udi_cdc_get_free_tx_buffer>:

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	0e 94 b5 1c 	call	0x396a	; 0x396a <udi_cdc_multi_get_free_tx_buffer>
}
    39d0:	08 95       	ret

000039d2 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    39d2:	0e 94 b5 1c 	call	0x396a	; 0x396a <udi_cdc_multi_get_free_tx_buffer>
    39d6:	21 e0       	ldi	r18, 0x01	; 1
    39d8:	89 2b       	or	r24, r25
    39da:	09 f4       	brne	.+2      	; 0x39de <udi_cdc_multi_is_tx_ready+0xc>
    39dc:	20 e0       	ldi	r18, 0x00	; 0
}
    39de:	82 2f       	mov	r24, r18
    39e0:	08 95       	ret

000039e2 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <udi_cdc_multi_is_tx_ready>
}
    39e8:	08 95       	ret

000039ea <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	1f 92       	push	r1
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	f6 2e       	mov	r15, r22
    39fc:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    39fe:	01 e0       	ldi	r16, 0x01	; 1
    3a00:	80 91 28 25 	lds	r24, 0x2528	; 0x802528 <udi_cdc_line_coding+0x6>
    3a04:	89 30       	cpi	r24, 0x09	; 9
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <udi_cdc_multi_putc+0x20>
    3a08:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <udi_cdc_multi_is_tx_ready>
    3a10:	81 11       	cpse	r24, r1
    3a12:	07 c0       	rjmp	.+14     	; 0x3a22 <udi_cdc_multi_putc+0x38>
		if (!udi_cdc_data_running) {
    3a14:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <udi_cdc_data_running>
    3a18:	81 11       	cpse	r24, r1
    3a1a:	f7 cf       	rjmp	.-18     	; 0x3a0a <udi_cdc_multi_putc+0x20>
			return false;
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	2c c0       	rjmp	.+88     	; 0x3a7a <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3a22:	8f b7       	in	r24, 0x3f	; 63
    3a24:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3a26:	f8 94       	cli
	return flags;
    3a28:	49 81       	ldd	r20, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3a2a:	80 91 03 24 	lds	r24, 0x2403	; 0x802403 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	fc 01       	movw	r30, r24
    3a32:	ee 0f       	add	r30, r30
    3a34:	ff 1f       	adc	r31, r31
    3a36:	ec 5f       	subi	r30, 0xFC	; 252
    3a38:	fb 4d       	sbci	r31, 0xDB	; 219
    3a3a:	20 81       	ld	r18, Z
    3a3c:	31 81       	ldd	r19, Z+1	; 0x01
    3a3e:	b9 01       	movw	r22, r18
    3a40:	6f 5f       	subi	r22, 0xFF	; 255
    3a42:	7f 4f       	sbci	r23, 0xFF	; 255
    3a44:	60 83       	st	Z, r22
    3a46:	71 83       	std	Z+1, r23	; 0x01
    3a48:	00 24       	eor	r0, r0
    3a4a:	96 95       	lsr	r25
    3a4c:	87 95       	ror	r24
    3a4e:	07 94       	ror	r0
    3a50:	96 95       	lsr	r25
    3a52:	87 95       	ror	r24
    3a54:	07 94       	ror	r0
    3a56:	98 2f       	mov	r25, r24
    3a58:	80 2d       	mov	r24, r0
    3a5a:	88 5f       	subi	r24, 0xF8	; 248
    3a5c:	9b 4d       	sbci	r25, 0xDB	; 219
    3a5e:	fc 01       	movw	r30, r24
    3a60:	e2 0f       	add	r30, r18
    3a62:	f3 1f       	adc	r31, r19
    3a64:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a66:	4f bf       	out	0x3f, r20	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
    3a68:	00 23       	and	r16, r16
    3a6a:	29 f0       	breq	.+10     	; 0x3a76 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
    3a6c:	f1 2e       	mov	r15, r17
    3a6e:	11 0f       	add	r17, r17
    3a70:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
    3a72:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
    3a74:	ca cf       	rjmp	.-108    	; 0x3a0a <udi_cdc_multi_putc+0x20>
	}
	return true;
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	90 e0       	ldi	r25, 0x00	; 0
}
    3a7a:	0f 90       	pop	r0
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	1f 91       	pop	r17
    3a82:	0f 91       	pop	r16
    3a84:	ff 90       	pop	r15
    3a86:	08 95       	ret

00003a88 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
    3a88:	bc 01       	movw	r22, r24
    3a8a:	80 e0       	ldi	r24, 0x00	; 0
    3a8c:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <udi_cdc_multi_putc>
}
    3a90:	08 95       	ret

00003a92 <udi_cdc_multi_write_buf>:

iram_size_t udi_cdc_multi_write_buf(uint8_t port, const void* buf, iram_size_t size)
{
    3a92:	5f 92       	push	r5
    3a94:	6f 92       	push	r6
    3a96:	7f 92       	push	r7
    3a98:	8f 92       	push	r8
    3a9a:	9f 92       	push	r9
    3a9c:	af 92       	push	r10
    3a9e:	bf 92       	push	r11
    3aa0:	cf 92       	push	r12
    3aa2:	df 92       	push	r13
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	1f 92       	push	r1
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	4b 01       	movw	r8, r22
    3ab8:	5a 01       	movw	r10, r20

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (9 == udi_cdc_line_coding[port].bDataBits) {
    3aba:	80 91 28 25 	lds	r24, 0x2528	; 0x802528 <udi_cdc_line_coding+0x6>
    3abe:	89 30       	cpi	r24, 0x09	; 9
    3ac0:	11 f4       	brne	.+4      	; 0x3ac6 <udi_cdc_multi_write_buf+0x34>
		size *=2;
    3ac2:	aa 0c       	add	r10, r10
    3ac4:	bb 1c       	adc	r11, r11

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3ac6:	68 94       	set
    3ac8:	66 24       	eor	r6, r6
    3aca:	66 f8       	bld	r6, 6
    3acc:	71 2c       	mov	r7, r1
		size *=2;
	}

udi_cdc_write_buf_loop_wait:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <udi_cdc_multi_is_tx_ready>
    3ad4:	81 11       	cpse	r24, r1
    3ad6:	07 c0       	rjmp	.+14     	; 0x3ae6 <udi_cdc_multi_write_buf+0x54>
		if (!udi_cdc_data_running) {
    3ad8:	80 91 10 25 	lds	r24, 0x2510	; 0x802510 <udi_cdc_data_running>
    3adc:	81 11       	cpse	r24, r1
    3ade:	f7 cf       	rjmp	.-18     	; 0x3ace <udi_cdc_multi_write_buf+0x3c>
    3ae0:	8a 2d       	mov	r24, r10
    3ae2:	9b 2d       	mov	r25, r11
    3ae4:	3a c0       	rjmp	.+116    	; 0x3b5a <udi_cdc_multi_write_buf+0xc8>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    3ae6:	8f b7       	in	r24, 0x3f	; 63
    3ae8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    3aea:	f8 94       	cli
	return flags;
    3aec:	59 80       	ldd	r5, Y+1	; 0x01
		goto udi_cdc_write_buf_loop_wait;
	}

	// Write values
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
    3aee:	00 91 03 24 	lds	r16, 0x2403	; 0x802403 <udi_cdc_tx_buf_sel>
	buf_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	f8 01       	movw	r30, r16
    3af6:	ee 0f       	add	r30, r30
    3af8:	ff 1f       	adc	r31, r31
    3afa:	ec 5f       	subi	r30, 0xFC	; 252
    3afc:	fb 4d       	sbci	r31, 0xDB	; 219
    3afe:	e0 80       	ld	r14, Z
    3b00:	f1 80       	ldd	r15, Z+1	; 0x01
	copy_nb = UDI_CDC_TX_BUFFERS - buf_nb;
    3b02:	c3 01       	movw	r24, r6
    3b04:	8e 19       	sub	r24, r14
    3b06:	9f 09       	sbc	r25, r15
    3b08:	65 01       	movw	r12, r10
    3b0a:	8a 15       	cp	r24, r10
    3b0c:	9b 05       	cpc	r25, r11
    3b0e:	08 f4       	brcc	.+2      	; 0x3b12 <udi_cdc_multi_write_buf+0x80>
    3b10:	6c 01       	movw	r12, r24
	if (copy_nb > size) {
		copy_nb = size;
	}
	memcpy(&udi_cdc_tx_buf[port][buf_sel][buf_nb], ptr_buf, copy_nb);
    3b12:	c8 01       	movw	r24, r16
    3b14:	00 24       	eor	r0, r0
    3b16:	96 95       	lsr	r25
    3b18:	87 95       	ror	r24
    3b1a:	07 94       	ror	r0
    3b1c:	96 95       	lsr	r25
    3b1e:	87 95       	ror	r24
    3b20:	07 94       	ror	r0
    3b22:	98 2f       	mov	r25, r24
    3b24:	80 2d       	mov	r24, r0
    3b26:	8e 0d       	add	r24, r14
    3b28:	9f 1d       	adc	r25, r15
    3b2a:	a6 01       	movw	r20, r12
    3b2c:	b4 01       	movw	r22, r8
    3b2e:	88 5f       	subi	r24, 0xF8	; 248
    3b30:	9b 4d       	sbci	r25, 0xDB	; 219
    3b32:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <memcpy>
	udi_cdc_tx_buf_nb[port][buf_sel] = buf_nb + copy_nb;
    3b36:	00 0f       	add	r16, r16
    3b38:	11 1f       	adc	r17, r17
    3b3a:	f8 01       	movw	r30, r16
    3b3c:	ec 5f       	subi	r30, 0xFC	; 252
    3b3e:	fb 4d       	sbci	r31, 0xDB	; 219
    3b40:	ec 0c       	add	r14, r12
    3b42:	fd 1c       	adc	r15, r13
    3b44:	e0 82       	st	Z, r14
    3b46:	f1 82       	std	Z+1, r15	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b48:	5f be       	out	0x3f, r5	; 63
	cpu_irq_restore(flags);

	// Update buffer pointer
	ptr_buf = ptr_buf + copy_nb;
    3b4a:	8c 0c       	add	r8, r12
    3b4c:	9d 1c       	adc	r9, r13
	size -= copy_nb;
    3b4e:	ac 18       	sub	r10, r12
    3b50:	bd 08       	sbc	r11, r13

	if (size) {
    3b52:	09 f0       	breq	.+2      	; 0x3b56 <udi_cdc_multi_write_buf+0xc4>
    3b54:	bc cf       	rjmp	.-136    	; 0x3ace <udi_cdc_multi_write_buf+0x3c>
		goto udi_cdc_write_buf_loop_wait;
	}

	return 0;
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
}
    3b5a:	0f 90       	pop	r0
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	1f 91       	pop	r17
    3b62:	0f 91       	pop	r16
    3b64:	ff 90       	pop	r15
    3b66:	ef 90       	pop	r14
    3b68:	df 90       	pop	r13
    3b6a:	cf 90       	pop	r12
    3b6c:	bf 90       	pop	r11
    3b6e:	af 90       	pop	r10
    3b70:	9f 90       	pop	r9
    3b72:	8f 90       	pop	r8
    3b74:	7f 90       	pop	r7
    3b76:	6f 90       	pop	r6
    3b78:	5f 90       	pop	r5
    3b7a:	08 95       	ret

00003b7c <udi_cdc_write_buf>:

iram_size_t udi_cdc_write_buf(const void* buf, iram_size_t size)
{
    3b7c:	ab 01       	movw	r20, r22
	return udi_cdc_multi_write_buf(0, buf, size);
    3b7e:	bc 01       	movw	r22, r24
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <udi_cdc_multi_write_buf>
}
    3b86:	08 95       	ret

00003b88 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3b88:	e0 91 2e 25 	lds	r30, 0x252E	; 0x80252e <udc_ptr_conf>
    3b8c:	f0 91 2f 25 	lds	r31, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3b90:	01 90       	ld	r0, Z+
    3b92:	f0 81       	ld	r31, Z
    3b94:	e0 2d       	mov	r30, r0
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3b96:	22 81       	ldd	r18, Z+2	; 0x02
    3b98:	33 81       	ldd	r19, Z+3	; 0x03
    3b9a:	2e 0f       	add	r18, r30
    3b9c:	3f 1f       	adc	r19, r31
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	40 81       	ld	r20, Z
    3ba2:	e4 0f       	add	r30, r20
    3ba4:	f1 1d       	adc	r31, r1
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3ba6:	e2 17       	cp	r30, r18
    3ba8:	f3 07       	cpc	r31, r19
    3baa:	a0 f4       	brcc	.+40     	; 0x3bd4 <udc_next_desc_in_iface+0x4c>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3bac:	81 81       	ldd	r24, Z+1	; 0x01
    3bae:	84 30       	cpi	r24, 0x04	; 4
    3bb0:	a1 f0       	breq	.+40     	; 0x3bda <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3bb2:	86 13       	cpse	r24, r22
    3bb4:	06 c0       	rjmp	.+12     	; 0x3bc2 <udc_next_desc_in_iface+0x3a>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <udc_next_desc_in_iface+0x58>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3bb8:	81 81       	ldd	r24, Z+1	; 0x01
    3bba:	84 30       	cpi	r24, 0x04	; 4
    3bbc:	a1 f0       	breq	.+40     	; 0x3be6 <udc_next_desc_in_iface+0x5e>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3bbe:	86 17       	cp	r24, r22
    3bc0:	a9 f0       	breq	.+42     	; 0x3bec <udc_next_desc_in_iface+0x64>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3bc2:	80 81       	ld	r24, Z
    3bc4:	e8 0f       	add	r30, r24
    3bc6:	f1 1d       	adc	r31, r1
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3bc8:	e2 17       	cp	r30, r18
    3bca:	f3 07       	cpc	r31, r19
    3bcc:	a8 f3       	brcs	.-22     	; 0x3bb8 <udc_next_desc_in_iface+0x30>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	08 95       	ret
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	08 95       	ret
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	08 95       	ret
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3be0:	8e 2f       	mov	r24, r30
    3be2:	9f 2f       	mov	r25, r31
    3be4:	08 95       	ret
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	08 95       	ret
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3bec:	8e 2f       	mov	r24, r30
    3bee:	9f 2f       	mov	r25, r31
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
    3bf0:	08 95       	ret

00003bf2 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    3bf2:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    3bf6:	8f 77       	andi	r24, 0x7F	; 127
    3bf8:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <udd_set_address>
    3bfc:	08 95       	ret

00003bfe <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3bfe:	90 91 30 25 	lds	r25, 0x2530	; 0x802530 <udc_num_configuration>
    3c02:	99 23       	and	r25, r25
    3c04:	81 f1       	breq	.+96     	; 0x3c66 <udc_update_iface_desc+0x68>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3c06:	e0 91 2e 25 	lds	r30, 0x252E	; 0x80252e <udc_ptr_conf>
    3c0a:	f0 91 2f 25 	lds	r31, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3c0e:	01 90       	ld	r0, Z+
    3c10:	f0 81       	ld	r31, Z
    3c12:	e0 2d       	mov	r30, r0
    3c14:	94 81       	ldd	r25, Z+4	; 0x04
    3c16:	89 17       	cp	r24, r25
    3c18:	40 f5       	brcc	.+80     	; 0x3c6a <udc_update_iface_desc+0x6c>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3c1a:	e0 93 2c 25 	sts	0x252C, r30	; 0x80252c <udc_ptr_iface>
    3c1e:	f0 93 2d 25 	sts	0x252D, r31	; 0x80252d <udc_ptr_iface+0x1>
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3c22:	22 81       	ldd	r18, Z+2	; 0x02
    3c24:	33 81       	ldd	r19, Z+3	; 0x03
    3c26:	2e 0f       	add	r18, r30
    3c28:	3f 1f       	adc	r19, r31
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3c2a:	e2 17       	cp	r30, r18
    3c2c:	f3 07       	cpc	r31, r19
    3c2e:	f8 f4       	brcc	.+62     	; 0x3c6e <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3c30:	91 81       	ldd	r25, Z+1	; 0x01
    3c32:	94 30       	cpi	r25, 0x04	; 4
    3c34:	61 f4       	brne	.+24     	; 0x3c4e <udc_update_iface_desc+0x50>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3c36:	92 81       	ldd	r25, Z+2	; 0x02
    3c38:	89 13       	cpse	r24, r25
    3c3a:	09 c0       	rjmp	.+18     	; 0x3c4e <udc_update_iface_desc+0x50>
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	96 13       	cpse	r25, r22
    3c40:	06 c0       	rjmp	.+12     	; 0x3c4e <udc_update_iface_desc+0x50>
    3c42:	e0 93 2c 25 	sts	0x252C, r30	; 0x80252c <udc_ptr_iface>
    3c46:	f0 93 2d 25 	sts	0x252D, r31	; 0x80252d <udc_ptr_iface+0x1>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	08 95       	ret
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3c4e:	90 81       	ld	r25, Z
    3c50:	e9 0f       	add	r30, r25
    3c52:	f1 1d       	adc	r31, r1
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    3c54:	e2 17       	cp	r30, r18
    3c56:	f3 07       	cpc	r31, r19
    3c58:	58 f3       	brcs	.-42     	; 0x3c30 <udc_update_iface_desc+0x32>
    3c5a:	e0 93 2c 25 	sts	0x252C, r30	; 0x80252c <udc_ptr_iface>
    3c5e:	f0 93 2d 25 	sts	0x252D, r31	; 0x80252d <udc_ptr_iface+0x1>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	08 95       	ret
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	08 95       	ret
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	08 95       	ret
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
}
    3c70:	08 95       	ret

00003c72 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3c72:	ef 92       	push	r14
    3c74:	ff 92       	push	r15
    3c76:	1f 93       	push	r17
    3c78:	cf 93       	push	r28
    3c7a:	df 93       	push	r29
    3c7c:	c8 2f       	mov	r28, r24
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3c7e:	60 e0       	ldi	r22, 0x00	; 0
    3c80:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    3c84:	18 2f       	mov	r17, r24
    3c86:	88 23       	and	r24, r24
    3c88:	91 f1       	breq	.+100    	; 0x3cee <udc_iface_disable+0x7c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3c8a:	a0 91 2e 25 	lds	r26, 0x252E	; 0x80252e <udc_ptr_conf>
    3c8e:	b0 91 2f 25 	lds	r27, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3c92:	ec 2f       	mov	r30, r28
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	ee 0f       	add	r30, r30
    3c98:	ff 1f       	adc	r31, r31
    3c9a:	12 96       	adiw	r26, 0x02	; 2
    3c9c:	8d 91       	ld	r24, X+
    3c9e:	9c 91       	ld	r25, X
    3ca0:	13 97       	sbiw	r26, 0x03	; 3
    3ca2:	e8 0f       	add	r30, r24
    3ca4:	f9 1f       	adc	r31, r25
    3ca6:	e0 80       	ld	r14, Z
    3ca8:	f1 80       	ldd	r15, Z+1	; 0x01

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3caa:	d7 01       	movw	r26, r14
    3cac:	16 96       	adiw	r26, 0x06	; 6
    3cae:	ed 91       	ld	r30, X+
    3cb0:	fc 91       	ld	r31, X
    3cb2:	17 97       	sbiw	r26, 0x07	; 7
    3cb4:	19 95       	eicall
    3cb6:	68 2f       	mov	r22, r24
    3cb8:	8c 2f       	mov	r24, r28
    3cba:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    3cbe:	18 2f       	mov	r17, r24
    3cc0:	88 23       	and	r24, r24
    3cc2:	a9 f0       	breq	.+42     	; 0x3cee <udc_iface_disable+0x7c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3cc4:	c0 91 2c 25 	lds	r28, 0x252C	; 0x80252c <udc_ptr_iface>
    3cc8:	d0 91 2d 25 	lds	r29, 0x252D	; 0x80252d <udc_ptr_iface+0x1>
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3ccc:	65 e0       	ldi	r22, 0x05	; 5
    3cce:	ce 01       	movw	r24, r28
    3cd0:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <udc_next_desc_in_iface>
    3cd4:	ec 01       	movw	r28, r24
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3cd6:	89 2b       	or	r24, r25
    3cd8:	21 f0       	breq	.+8      	; 0x3ce2 <udc_iface_disable+0x70>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <udd_ep_free>
		}
    3ce0:	f5 cf       	rjmp	.-22     	; 0x3ccc <udc_iface_disable+0x5a>
	}
#endif

	// Disable interface
	udi_api->disable();
    3ce2:	d7 01       	movw	r26, r14
    3ce4:	12 96       	adiw	r26, 0x02	; 2
    3ce6:	ed 91       	ld	r30, X+
    3ce8:	fc 91       	ld	r31, X
    3cea:	13 97       	sbiw	r26, 0x03	; 3
    3cec:	19 95       	eicall
	return true;
}
    3cee:	81 2f       	mov	r24, r17
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	1f 91       	pop	r17
    3cf6:	ff 90       	pop	r15
    3cf8:	ef 90       	pop	r14
    3cfa:	08 95       	ret

00003cfc <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3cfc:	1f 93       	push	r17
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	18 2f       	mov	r17, r24
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3d04:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    3d08:	88 23       	and	r24, r24
    3d0a:	49 f1       	breq	.+82     	; 0x3d5e <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3d0c:	c0 91 2c 25 	lds	r28, 0x252C	; 0x80252c <udc_ptr_iface>
    3d10:	d0 91 2d 25 	lds	r29, 0x252D	; 0x80252d <udc_ptr_iface+0x1>
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3d14:	65 e0       	ldi	r22, 0x05	; 5
    3d16:	ce 01       	movw	r24, r28
    3d18:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <udc_next_desc_in_iface>
    3d1c:	ec 01       	movw	r28, r24
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3d1e:	89 2b       	or	r24, r25
    3d20:	49 f0       	breq	.+18     	; 0x3d34 <udc_iface_enable+0x38>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3d22:	4c 81       	ldd	r20, Y+4	; 0x04
    3d24:	5d 81       	ldd	r21, Y+5	; 0x05
    3d26:	6b 81       	ldd	r22, Y+3	; 0x03
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	0e 94 d6 25 	call	0x4bac	; 0x4bac <udd_ep_alloc>
    3d2e:	81 11       	cpse	r24, r1
    3d30:	f1 cf       	rjmp	.-30     	; 0x3d14 <udc_iface_enable+0x18>
    3d32:	15 c0       	rjmp	.+42     	; 0x3d5e <udc_iface_enable+0x62>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    3d34:	a0 91 2e 25 	lds	r26, 0x252E	; 0x80252e <udc_ptr_conf>
    3d38:	b0 91 2f 25 	lds	r27, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3d3c:	e1 2f       	mov	r30, r17
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	ee 0f       	add	r30, r30
    3d42:	ff 1f       	adc	r31, r31
    3d44:	12 96       	adiw	r26, 0x02	; 2
    3d46:	8d 91       	ld	r24, X+
    3d48:	9c 91       	ld	r25, X
    3d4a:	13 97       	sbiw	r26, 0x03	; 3
    3d4c:	e8 0f       	add	r30, r24
    3d4e:	f9 1f       	adc	r31, r25
    3d50:	01 90       	ld	r0, Z+
    3d52:	f0 81       	ld	r31, Z
    3d54:	e0 2d       	mov	r30, r0
    3d56:	01 90       	ld	r0, Z+
    3d58:	f0 81       	ld	r31, Z
    3d5a:	e0 2d       	mov	r30, r0
    3d5c:	19 95       	eicall
}
    3d5e:	df 91       	pop	r29
    3d60:	cf 91       	pop	r28
    3d62:	1f 91       	pop	r17
    3d64:	08 95       	ret

00003d66 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
    3d66:	80 91 2c 25 	lds	r24, 0x252C	; 0x80252c <udc_ptr_iface>
    3d6a:	90 91 2d 25 	lds	r25, 0x252D	; 0x80252d <udc_ptr_iface+0x1>
    3d6e:	08 95       	ret

00003d70 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
	udd_enable();
    3d70:	0e 94 23 25 	call	0x4a46	; 0x4a46 <udd_enable>
    3d74:	08 95       	ret

00003d76 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    3d76:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3d78:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udc_num_configuration>
    3d7c:	88 23       	and	r24, r24
    3d7e:	c9 f0       	breq	.+50     	; 0x3db2 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3d80:	e0 91 2e 25 	lds	r30, 0x252E	; 0x80252e <udc_ptr_conf>
    3d84:	f0 91 2f 25 	lds	r31, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3d88:	01 90       	ld	r0, Z+
    3d8a:	f0 81       	ld	r31, Z
    3d8c:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3d8e:	84 81       	ldd	r24, Z+4	; 0x04
    3d90:	88 23       	and	r24, r24
    3d92:	79 f0       	breq	.+30     	; 0x3db2 <udc_reset+0x3c>
    3d94:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    3d96:	8c 2f       	mov	r24, r28
    3d98:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <udc_iface_disable>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3d9c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3d9e:	e0 91 2e 25 	lds	r30, 0x252E	; 0x80252e <udc_ptr_conf>
    3da2:	f0 91 2f 25 	lds	r31, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3da6:	01 90       	ld	r0, Z+
    3da8:	f0 81       	ld	r31, Z
    3daa:	e0 2d       	mov	r30, r0
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3dac:	84 81       	ldd	r24, Z+4	; 0x04
    3dae:	c8 17       	cp	r28, r24
    3db0:	90 f3       	brcs	.-28     	; 0x3d96 <udc_reset+0x20>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    3db2:	10 92 30 25 	sts	0x2530, r1	; 0x802530 <udc_num_configuration>
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	80 93 34 25 	sts	0x2534, r24	; 0x802534 <udc_device_status>
    3dbe:	90 93 35 25 	sts	0x2535, r25	; 0x802535 <udc_device_status+0x1>
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    3dc2:	cf 91       	pop	r28
    3dc4:	08 95       	ret

00003dc6 <udc_stop>:

/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
    3dc6:	0e 94 c5 24 	call	0x498a	; 0x498a <udd_disable>
	udc_reset();
    3dca:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <udc_reset>
    3dce:	08 95       	ret

00003dd0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    3dd0:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    3dd2:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udc_num_configuration>
    3dd6:	88 23       	and	r24, r24
    3dd8:	49 f1       	breq	.+82     	; 0x3e2c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3dda:	a0 91 2e 25 	lds	r26, 0x252E	; 0x80252e <udc_ptr_conf>
    3dde:	b0 91 2f 25 	lds	r27, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3de2:	ed 91       	ld	r30, X+
    3de4:	fc 91       	ld	r31, X
    3de6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3de8:	84 81       	ldd	r24, Z+4	; 0x04
    3dea:	88 23       	and	r24, r24
    3dec:	f9 f0       	breq	.+62     	; 0x3e2c <udc_sof_notify+0x5c>
    3dee:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    3df0:	ec 2f       	mov	r30, r28
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	ee 0f       	add	r30, r30
    3df6:	ff 1f       	adc	r31, r31
    3df8:	12 96       	adiw	r26, 0x02	; 2
    3dfa:	8d 91       	ld	r24, X+
    3dfc:	9c 91       	ld	r25, X
    3dfe:	13 97       	sbiw	r26, 0x03	; 3
    3e00:	e8 0f       	add	r30, r24
    3e02:	f9 1f       	adc	r31, r25
    3e04:	01 90       	ld	r0, Z+
    3e06:	f0 81       	ld	r31, Z
    3e08:	e0 2d       	mov	r30, r0
    3e0a:	00 84       	ldd	r0, Z+8	; 0x08
    3e0c:	f1 85       	ldd	r31, Z+9	; 0x09
    3e0e:	e0 2d       	mov	r30, r0
    3e10:	30 97       	sbiw	r30, 0x00	; 0
    3e12:	09 f0       	breq	.+2      	; 0x3e16 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    3e14:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    3e16:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    3e18:	a0 91 2e 25 	lds	r26, 0x252E	; 0x80252e <udc_ptr_conf>
    3e1c:	b0 91 2f 25 	lds	r27, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3e20:	ed 91       	ld	r30, X+
    3e22:	fc 91       	ld	r31, X
    3e24:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    3e26:	84 81       	ldd	r24, Z+4	; 0x04
    3e28:	c8 17       	cp	r28, r24
    3e2a:	10 f3       	brcs	.-60     	; 0x3df0 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    3e2c:	cf 91       	pop	r28
    3e2e:	08 95       	ret

00003e30 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    3e38:	e1 e7       	ldi	r30, 0x71	; 113
    3e3a:	f6 e2       	ldi	r31, 0x26	; 38
    3e3c:	12 86       	std	Z+10, r1	; 0x0a
    3e3e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    3e40:	14 86       	std	Z+12, r1	; 0x0c
    3e42:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    3e44:	16 86       	std	Z+14, r1	; 0x0e
    3e46:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    3e48:	80 81       	ld	r24, Z
    3e4a:	88 23       	and	r24, r24
    3e4c:	0c f0       	brlt	.+2      	; 0x3e50 <udc_process_setup+0x20>
    3e4e:	81 c2       	rjmp	.+1282   	; 0x4352 <__stack+0x353>
		if (udd_g_ctrlreq.req.wLength == 0) {
    3e50:	20 91 77 26 	lds	r18, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    3e54:	30 91 78 26 	lds	r19, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    3e58:	21 15       	cp	r18, r1
    3e5a:	31 05       	cpc	r19, r1
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <udc_process_setup+0x30>
    3e5e:	74 c2       	rjmp	.+1256   	; 0x4348 <__stack+0x349>
    3e60:	6b c2       	rjmp	.+1238   	; 0x4338 <__stack+0x339>
    3e62:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    3e64:	09 f0       	breq	.+2      	; 0x3e68 <udc_process_setup+0x38>
    3e66:	ab c0       	rjmp	.+342    	; 0x3fbe <udc_process_setup+0x18e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    3e68:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    3e6c:	96 30       	cpi	r25, 0x06	; 6
    3e6e:	81 f0       	breq	.+32     	; 0x3e90 <udc_process_setup+0x60>
    3e70:	98 30       	cpi	r25, 0x08	; 8
    3e72:	09 f4       	brne	.+2      	; 0x3e76 <udc_process_setup+0x46>
    3e74:	99 c0       	rjmp	.+306    	; 0x3fa8 <udc_process_setup+0x178>
    3e76:	91 11       	cpse	r25, r1
    3e78:	a2 c0       	rjmp	.+324    	; 0x3fbe <udc_process_setup+0x18e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    3e7a:	22 30       	cpi	r18, 0x02	; 2
    3e7c:	31 05       	cpc	r19, r1
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <udc_process_setup+0x52>
    3e80:	16 c2       	rjmp	.+1068   	; 0x42ae <__stack+0x2af>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    3e82:	62 e0       	ldi	r22, 0x02	; 2
    3e84:	70 e0       	ldi	r23, 0x00	; 0
    3e86:	84 e3       	ldi	r24, 0x34	; 52
    3e88:	95 e2       	ldi	r25, 0x25	; 37
    3e8a:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    3e8e:	6a c2       	rjmp	.+1236   	; 0x4364 <__stack+0x365>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    3e90:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    3e94:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    3e98:	29 2f       	mov	r18, r25
    3e9a:	33 27       	eor	r19, r19
    3e9c:	22 30       	cpi	r18, 0x02	; 2
    3e9e:	31 05       	cpc	r19, r1
    3ea0:	b1 f0       	breq	.+44     	; 0x3ece <udc_process_setup+0x9e>
    3ea2:	20 f4       	brcc	.+8      	; 0x3eac <udc_process_setup+0x7c>
    3ea4:	21 30       	cpi	r18, 0x01	; 1
    3ea6:	31 05       	cpc	r19, r1
    3ea8:	41 f0       	breq	.+16     	; 0x3eba <udc_process_setup+0x8a>
    3eaa:	c1 c1       	rjmp	.+898    	; 0x422e <__stack+0x22f>
    3eac:	23 30       	cpi	r18, 0x03	; 3
    3eae:	31 05       	cpc	r19, r1
    3eb0:	f1 f1       	breq	.+124    	; 0x3f2e <udc_process_setup+0xfe>
    3eb2:	2f 30       	cpi	r18, 0x0F	; 15
    3eb4:	31 05       	cpc	r19, r1
    3eb6:	61 f1       	breq	.+88     	; 0x3f10 <udc_process_setup+0xe0>
    3eb8:	ba c1       	rjmp	.+884    	; 0x422e <__stack+0x22f>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    3eba:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <udc_config>
    3ebe:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	6c 91       	ld	r22, X
    3ec6:	70 e0       	ldi	r23, 0x00	; 0
    3ec8:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    3ecc:	5e c0       	rjmp	.+188    	; 0x3f8a <udc_process_setup+0x15a>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    3ece:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    3ed2:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
    3ed6:	21 89       	ldd	r18, Z+17	; 0x11
    3ed8:	82 17       	cp	r24, r18
    3eda:	08 f0       	brcs	.+2      	; 0x3ede <udc_process_setup+0xae>
    3edc:	e8 c1       	rjmp	.+976    	; 0x42ae <__stack+0x2af>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    3ede:	99 27       	eor	r25, r25
    3ee0:	88 0f       	add	r24, r24
    3ee2:	99 1f       	adc	r25, r25
    3ee4:	88 0f       	add	r24, r24
    3ee6:	99 1f       	adc	r25, r25
    3ee8:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    3eec:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    3ef0:	e8 0f       	add	r30, r24
    3ef2:	f9 1f       	adc	r31, r25
    3ef4:	80 81       	ld	r24, Z
    3ef6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    3ef8:	fc 01       	movw	r30, r24
    3efa:	62 81       	ldd	r22, Z+2	; 0x02
    3efc:	73 81       	ldd	r23, Z+3	; 0x03
    3efe:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    3f02:	e0 91 79 26 	lds	r30, 0x2679	; 0x802679 <udd_g_ctrlreq+0x8>
    3f06:	f0 91 7a 26 	lds	r31, 0x267A	; 0x80267a <udd_g_ctrlreq+0x9>
    3f0a:	82 e0       	ldi	r24, 0x02	; 2
    3f0c:	81 83       	std	Z+1, r24	; 0x01
    3f0e:	3d c0       	rjmp	.+122    	; 0x3f8a <udc_process_setup+0x15a>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    3f10:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <udc_config+0x4>
    3f14:	90 91 51 20 	lds	r25, 0x2051	; 0x802051 <udc_config+0x5>
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <udc_process_setup+0xee>
    3f1c:	c8 c1       	rjmp	.+912    	; 0x42ae <__stack+0x2af>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    3f1e:	dc 01       	movw	r26, r24
    3f20:	12 96       	adiw	r26, 0x02	; 2
    3f22:	6d 91       	ld	r22, X+
    3f24:	7c 91       	ld	r23, X
    3f26:	13 97       	sbiw	r26, 0x03	; 3
    3f28:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    3f2c:	2e c0       	rjmp	.+92     	; 0x3f8a <udc_process_setup+0x15a>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    3f2e:	99 27       	eor	r25, r25
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	91 05       	cpc	r25, r1
    3f34:	99 f0       	breq	.+38     	; 0x3f5c <udc_process_setup+0x12c>
    3f36:	58 f0       	brcs	.+22     	; 0x3f4e <udc_process_setup+0x11e>
    3f38:	82 30       	cpi	r24, 0x02	; 2
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	09 f4       	brne	.+2      	; 0x3f40 <udc_process_setup+0x110>
    3f3e:	0e c2       	rjmp	.+1052   	; 0x435c <__stack+0x35d>
    3f40:	03 97       	sbiw	r24, 0x03	; 3
    3f42:	09 f0       	breq	.+2      	; 0x3f46 <udc_process_setup+0x116>
    3f44:	7d c1       	rjmp	.+762    	; 0x4240 <__stack+0x241>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    3f46:	31 e0       	ldi	r19, 0x01	; 1
		str = udc_get_string_serial_name();
    3f48:	e0 ee       	ldi	r30, 0xE0	; 224
    3f4a:	f3 e2       	ldi	r31, 0x23	; 35
    3f4c:	0a c0       	rjmp	.+20     	; 0x3f62 <udc_process_setup+0x132>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    3f4e:	64 e0       	ldi	r22, 0x04	; 4
    3f50:	70 e0       	ldi	r23, 0x00	; 0
    3f52:	88 e4       	ldi	r24, 0x48	; 72
    3f54:	90 e2       	ldi	r25, 0x20	; 32
    3f56:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    3f5a:	17 c0       	rjmp	.+46     	; 0x3f8a <udc_process_setup+0x15a>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    3f5c:	e2 e4       	ldi	r30, 0x42	; 66
    3f5e:	f0 e2       	ldi	r31, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    3f60:	35 e0       	ldi	r19, 0x05	; 5
    3f62:	aa e1       	ldi	r26, 0x1A	; 26
    3f64:	b0 e2       	ldi	r27, 0x20	; 32
    3f66:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3f68:	81 91       	ld	r24, Z+
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	8d 93       	st	X+, r24
    3f6e:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    3f70:	2f 5f       	subi	r18, 0xFF	; 255
    3f72:	23 17       	cp	r18, r19
    3f74:	c8 f3       	brcs	.-14     	; 0x3f68 <udc_process_setup+0x138>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    3f76:	63 2f       	mov	r22, r19
    3f78:	66 0f       	add	r22, r22
    3f7a:	6e 5f       	subi	r22, 0xFE	; 254
    3f7c:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <udc_string_desc>
		udd_set_setup_payload(
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	88 e1       	ldi	r24, 0x18	; 24
    3f84:	90 e2       	ldi	r25, 0x20	; 32
    3f86:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    3f8a:	e1 e7       	ldi	r30, 0x71	; 113
    3f8c:	f6 e2       	ldi	r31, 0x26	; 38
    3f8e:	86 81       	ldd	r24, Z+6	; 0x06
    3f90:	97 81       	ldd	r25, Z+7	; 0x07
    3f92:	22 85       	ldd	r18, Z+10	; 0x0a
    3f94:	33 85       	ldd	r19, Z+11	; 0x0b
    3f96:	82 17       	cp	r24, r18
    3f98:	93 07       	cpc	r25, r19
    3f9a:	08 f0       	brcs	.+2      	; 0x3f9e <udc_process_setup+0x16e>
    3f9c:	e3 c1       	rjmp	.+966    	; 0x4364 <__stack+0x365>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3f9e:	80 93 7b 26 	sts	0x267B, r24	; 0x80267b <udd_g_ctrlreq+0xa>
    3fa2:	90 93 7c 26 	sts	0x267C, r25	; 0x80267c <udd_g_ctrlreq+0xb>
    3fa6:	de c1       	rjmp	.+956    	; 0x4364 <__stack+0x365>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    3fa8:	21 30       	cpi	r18, 0x01	; 1
    3faa:	31 05       	cpc	r19, r1
    3fac:	09 f0       	breq	.+2      	; 0x3fb0 <udc_process_setup+0x180>
    3fae:	7f c1       	rjmp	.+766    	; 0x42ae <__stack+0x2af>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    3fb0:	61 e0       	ldi	r22, 0x01	; 1
    3fb2:	70 e0       	ldi	r23, 0x00	; 0
    3fb4:	80 e3       	ldi	r24, 0x30	; 48
    3fb6:	95 e2       	ldi	r25, 0x25	; 37
    3fb8:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    3fbc:	d3 c1       	rjmp	.+934    	; 0x4364 <__stack+0x365>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    3fbe:	81 30       	cpi	r24, 0x01	; 1
    3fc0:	f1 f5       	brne	.+124    	; 0x403e <__stack+0x3f>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    3fc2:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    3fc6:	9a 30       	cpi	r25, 0x0A	; 10
    3fc8:	d1 f5       	brne	.+116    	; 0x403e <__stack+0x3f>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    3fca:	21 30       	cpi	r18, 0x01	; 1
    3fcc:	31 05       	cpc	r19, r1
    3fce:	09 f0       	breq	.+2      	; 0x3fd2 <udc_process_setup+0x1a2>
    3fd0:	3c c1       	rjmp	.+632    	; 0x424a <__stack+0x24b>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    3fd2:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udc_num_configuration>
    3fd6:	88 23       	and	r24, r24
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <udc_process_setup+0x1ac>
    3fda:	37 c1       	rjmp	.+622    	; 0x424a <__stack+0x24b>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    3fdc:	c0 91 75 26 	lds	r28, 0x2675	; 0x802675 <udd_g_ctrlreq+0x4>
    3fe0:	d0 91 76 26 	lds	r29, 0x2676	; 0x802676 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3fe4:	00 91 2e 25 	lds	r16, 0x252E	; 0x80252e <udc_ptr_conf>
    3fe8:	10 91 2f 25 	lds	r17, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    3fec:	d8 01       	movw	r26, r16
    3fee:	ed 91       	ld	r30, X+
    3ff0:	fc 91       	ld	r31, X
    3ff2:	84 81       	ldd	r24, Z+4	; 0x04
    3ff4:	c8 17       	cp	r28, r24
    3ff6:	08 f0       	brcs	.+2      	; 0x3ffa <udc_process_setup+0x1ca>
    3ff8:	28 c1       	rjmp	.+592    	; 0x424a <__stack+0x24b>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3ffa:	60 e0       	ldi	r22, 0x00	; 0
    3ffc:	8c 2f       	mov	r24, r28
    3ffe:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    4002:	88 23       	and	r24, r24
    4004:	09 f4       	brne	.+2      	; 0x4008 <__stack+0x9>
    4006:	1c c1       	rjmp	.+568    	; 0x4240 <__stack+0x241>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4008:	ce 01       	movw	r24, r28
    400a:	99 27       	eor	r25, r25
    400c:	88 0f       	add	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	d8 01       	movw	r26, r16
    4012:	12 96       	adiw	r26, 0x02	; 2
    4014:	ed 91       	ld	r30, X+
    4016:	fc 91       	ld	r31, X
    4018:	13 97       	sbiw	r26, 0x03	; 3
    401a:	e8 0f       	add	r30, r24
    401c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    401e:	01 90       	ld	r0, Z+
    4020:	f0 81       	ld	r31, Z
    4022:	e0 2d       	mov	r30, r0
    4024:	86 81       	ldd	r24, Z+6	; 0x06
    4026:	97 81       	ldd	r25, Z+7	; 0x07
    4028:	fc 01       	movw	r30, r24
    402a:	19 95       	eicall
    402c:	80 93 32 25 	sts	0x2532, r24	; 0x802532 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    4030:	61 e0       	ldi	r22, 0x01	; 1
    4032:	70 e0       	ldi	r23, 0x00	; 0
    4034:	82 e3       	ldi	r24, 0x32	; 50
    4036:	95 e2       	ldi	r25, 0x25	; 37
    4038:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    403c:	93 c1       	rjmp	.+806    	; 0x4364 <__stack+0x365>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    403e:	82 30       	cpi	r24, 0x02	; 2
    4040:	09 f0       	breq	.+2      	; 0x4044 <__stack+0x45>
    4042:	fe c0       	rjmp	.+508    	; 0x4240 <__stack+0x241>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    4044:	80 91 72 26 	lds	r24, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    4048:	81 11       	cpse	r24, r1
    404a:	f3 c0       	rjmp	.+486    	; 0x4232 <__stack+0x233>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    404c:	22 30       	cpi	r18, 0x02	; 2
    404e:	31 05       	cpc	r19, r1
    4050:	09 f0       	breq	.+2      	; 0x4054 <__stack+0x55>
    4052:	2d c1       	rjmp	.+602    	; 0x42ae <__stack+0x2af>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4054:	80 91 75 26 	lds	r24, 0x2675	; 0x802675 <udd_g_ctrlreq+0x4>
    4058:	0e 94 67 26 	call	0x4cce	; 0x4cce <udd_ep_is_halted>
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	80 93 2a 25 	sts	0x252A, r24	; 0x80252a <udc_ep_status.4927>
    4062:	90 93 2b 25 	sts	0x252B, r25	; 0x80252b <udc_ep_status.4927+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    4066:	62 e0       	ldi	r22, 0x02	; 2
    4068:	70 e0       	ldi	r23, 0x00	; 0
    406a:	8a e2       	ldi	r24, 0x2A	; 42
    406c:	95 e2       	ldi	r25, 0x25	; 37
    406e:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <udd_set_setup_payload>
    4072:	78 c1       	rjmp	.+752    	; 0x4364 <__stack+0x365>
    4074:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4076:	09 f0       	breq	.+2      	; 0x407a <__stack+0x7b>
    4078:	86 c0       	rjmp	.+268    	; 0x4186 <__stack+0x187>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    407a:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    407e:	93 30       	cpi	r25, 0x03	; 3
    4080:	09 f4       	brne	.+2      	; 0x4084 <__stack+0x85>
    4082:	d9 c0       	rjmp	.+434    	; 0x4236 <__stack+0x237>
    4084:	18 f4       	brcc	.+6      	; 0x408c <__stack+0x8d>
    4086:	91 30       	cpi	r25, 0x01	; 1
    4088:	a1 f0       	breq	.+40     	; 0x40b2 <__stack+0xb3>
    408a:	7d c0       	rjmp	.+250    	; 0x4186 <__stack+0x187>
    408c:	95 30       	cpi	r25, 0x05	; 5
    408e:	19 f0       	breq	.+6      	; 0x4096 <__stack+0x97>
    4090:	99 30       	cpi	r25, 0x09	; 9
    4092:	39 f1       	breq	.+78     	; 0x40e2 <__stack+0xe3>
    4094:	78 c0       	rjmp	.+240    	; 0x4186 <__stack+0x187>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4096:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    409a:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    409e:	89 2b       	or	r24, r25
    40a0:	09 f0       	breq	.+2      	; 0x40a4 <__stack+0xa5>
    40a2:	05 c1       	rjmp	.+522    	; 0x42ae <__stack+0x2af>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    40a4:	89 ef       	ldi	r24, 0xF9	; 249
    40a6:	9d e1       	ldi	r25, 0x1D	; 29
    40a8:	80 93 7d 26 	sts	0x267D, r24	; 0x80267d <udd_g_ctrlreq+0xc>
    40ac:	90 93 7e 26 	sts	0x267E, r25	; 0x80267e <udd_g_ctrlreq+0xd>
    40b0:	59 c1       	rjmp	.+690    	; 0x4364 <__stack+0x365>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    40b2:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    40b6:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    40ba:	89 2b       	or	r24, r25
    40bc:	09 f0       	breq	.+2      	; 0x40c0 <__stack+0xc1>
    40be:	f7 c0       	rjmp	.+494    	; 0x42ae <__stack+0x2af>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    40c0:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    40c4:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <udd_g_ctrlreq+0x3>
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	09 f0       	breq	.+2      	; 0x40ce <__stack+0xcf>
    40cc:	f0 c0       	rjmp	.+480    	; 0x42ae <__stack+0x2af>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    40ce:	80 91 34 25 	lds	r24, 0x2534	; 0x802534 <udc_device_status>
    40d2:	90 91 35 25 	lds	r25, 0x2535	; 0x802535 <udc_device_status+0x1>
    40d6:	8d 7f       	andi	r24, 0xFD	; 253
    40d8:	80 93 34 25 	sts	0x2534, r24	; 0x802534 <udc_device_status>
    40dc:	90 93 35 25 	sts	0x2535, r25	; 0x802535 <udc_device_status+0x1>
    40e0:	41 c1       	rjmp	.+642    	; 0x4364 <__stack+0x365>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    40e2:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    40e6:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    40ea:	89 2b       	or	r24, r25
    40ec:	09 f0       	breq	.+2      	; 0x40f0 <__stack+0xf1>
    40ee:	df c0       	rjmp	.+446    	; 0x42ae <__stack+0x2af>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    40f0:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <udd_getaddress>
    40f4:	88 23       	and	r24, r24
    40f6:	09 f4       	brne	.+2      	; 0x40fa <__stack+0xfb>
    40f8:	a3 c0       	rjmp	.+326    	; 0x4240 <__stack+0x241>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    40fa:	20 91 73 26 	lds	r18, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    40fe:	30 91 74 26 	lds	r19, 0x2674	; 0x802674 <udd_g_ctrlreq+0x3>
    4102:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    4104:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config>
    4108:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    410c:	81 89       	ldd	r24, Z+17	; 0x11
    410e:	90 e0       	ldi	r25, 0x00	; 0
    4110:	82 17       	cp	r24, r18
    4112:	93 07       	cpc	r25, r19
    4114:	08 f4       	brcc	.+2      	; 0x4118 <__stack+0x119>
    4116:	94 c0       	rjmp	.+296    	; 0x4240 <__stack+0x241>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    4118:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    411c:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    4120:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <udd_g_ctrlreq+0x3>
    4124:	80 93 30 25 	sts	0x2530, r24	; 0x802530 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    4128:	88 23       	and	r24, r24
    412a:	09 f4       	brne	.+2      	; 0x412e <__stack+0x12f>
    412c:	1b c1       	rjmp	.+566    	; 0x4364 <__stack+0x365>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    412e:	99 27       	eor	r25, r25
    4130:	81 50       	subi	r24, 0x01	; 1
    4132:	90 4c       	sbci	r25, 0xC0	; 192
    4134:	88 0f       	add	r24, r24
    4136:	99 1f       	adc	r25, r25
    4138:	88 0f       	add	r24, r24
    413a:	99 1f       	adc	r25, r25
    413c:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <udc_config+0x2>
    4140:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <udc_config+0x3>
    4144:	e8 0f       	add	r30, r24
    4146:	f9 1f       	adc	r31, r25
    4148:	e0 93 2e 25 	sts	0x252E, r30	; 0x80252e <udc_ptr_conf>
    414c:	f0 93 2f 25 	sts	0x252F, r31	; 0x80252f <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4150:	01 90       	ld	r0, Z+
    4152:	f0 81       	ld	r31, Z
    4154:	e0 2d       	mov	r30, r0
    4156:	84 81       	ldd	r24, Z+4	; 0x04
    4158:	88 23       	and	r24, r24
    415a:	09 f4       	brne	.+2      	; 0x415e <__stack+0x15f>
    415c:	03 c1       	rjmp	.+518    	; 0x4364 <__stack+0x365>
    415e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    4160:	60 e0       	ldi	r22, 0x00	; 0
    4162:	8c 2f       	mov	r24, r28
    4164:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <udc_iface_enable>
    4168:	88 23       	and	r24, r24
    416a:	09 f4       	brne	.+2      	; 0x416e <__stack+0x16f>
    416c:	69 c0       	rjmp	.+210    	; 0x4240 <__stack+0x241>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    416e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4170:	e0 91 2e 25 	lds	r30, 0x252E	; 0x80252e <udc_ptr_conf>
    4174:	f0 91 2f 25 	lds	r31, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    4178:	01 90       	ld	r0, Z+
    417a:	f0 81       	ld	r31, Z
    417c:	e0 2d       	mov	r30, r0
    417e:	84 81       	ldd	r24, Z+4	; 0x04
    4180:	c8 17       	cp	r28, r24
    4182:	70 f3       	brcs	.-36     	; 0x4160 <__stack+0x161>
    4184:	ef c0       	rjmp	.+478    	; 0x4364 <__stack+0x365>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    4186:	81 30       	cpi	r24, 0x01	; 1
    4188:	f9 f4       	brne	.+62     	; 0x41c8 <__stack+0x1c9>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    418a:	90 91 72 26 	lds	r25, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    418e:	9b 30       	cpi	r25, 0x0B	; 11
    4190:	d9 f4       	brne	.+54     	; 0x41c8 <__stack+0x1c9>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4192:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    4196:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    419a:	89 2b       	or	r24, r25
    419c:	09 f0       	breq	.+2      	; 0x41a0 <__stack+0x1a1>
    419e:	55 c0       	rjmp	.+170    	; 0x424a <__stack+0x24b>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    41a0:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udc_num_configuration>
    41a4:	88 23       	and	r24, r24
    41a6:	09 f4       	brne	.+2      	; 0x41aa <__stack+0x1ab>
    41a8:	50 c0       	rjmp	.+160    	; 0x424a <__stack+0x24b>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    41aa:	e1 e7       	ldi	r30, 0x71	; 113
    41ac:	f6 e2       	ldi	r31, 0x26	; 38
    41ae:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    41b0:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    41b2:	8c 2f       	mov	r24, r28
    41b4:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <udc_iface_disable>
    41b8:	88 23       	and	r24, r24
    41ba:	09 f4       	brne	.+2      	; 0x41be <__stack+0x1bf>
    41bc:	41 c0       	rjmp	.+130    	; 0x4240 <__stack+0x241>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    41be:	6d 2f       	mov	r22, r29
    41c0:	8c 2f       	mov	r24, r28
    41c2:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <udc_iface_enable>
    41c6:	3a c0       	rjmp	.+116    	; 0x423c <__stack+0x23d>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    41c8:	82 30       	cpi	r24, 0x02	; 2
    41ca:	d1 f5       	brne	.+116    	; 0x4240 <__stack+0x241>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    41cc:	80 91 72 26 	lds	r24, 0x2672	; 0x802672 <udd_g_ctrlreq+0x1>
    41d0:	81 30       	cpi	r24, 0x01	; 1
    41d2:	19 f0       	breq	.+6      	; 0x41da <__stack+0x1db>
    41d4:	83 30       	cpi	r24, 0x03	; 3
    41d6:	a1 f0       	breq	.+40     	; 0x4200 <__stack+0x201>
    41d8:	30 c0       	rjmp	.+96     	; 0x423a <__stack+0x23b>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    41da:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    41de:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    41e2:	89 2b       	or	r24, r25
    41e4:	09 f0       	breq	.+2      	; 0x41e8 <__stack+0x1e9>
    41e6:	63 c0       	rjmp	.+198    	; 0x42ae <__stack+0x2af>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    41e8:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    41ec:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <udd_g_ctrlreq+0x3>
    41f0:	89 2b       	or	r24, r25
    41f2:	09 f0       	breq	.+2      	; 0x41f6 <__stack+0x1f7>
    41f4:	5c c0       	rjmp	.+184    	; 0x42ae <__stack+0x2af>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    41f6:	80 91 75 26 	lds	r24, 0x2675	; 0x802675 <udd_g_ctrlreq+0x4>
    41fa:	0e 94 82 26 	call	0x4d04	; 0x4d04 <udd_ep_clear_halt>
    41fe:	1e c0       	rjmp	.+60     	; 0x423c <__stack+0x23d>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    4200:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    4204:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    4208:	89 2b       	or	r24, r25
    420a:	09 f0       	breq	.+2      	; 0x420e <__stack+0x20f>
    420c:	50 c0       	rjmp	.+160    	; 0x42ae <__stack+0x2af>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    420e:	80 91 73 26 	lds	r24, 0x2673	; 0x802673 <udd_g_ctrlreq+0x2>
    4212:	90 91 74 26 	lds	r25, 0x2674	; 0x802674 <udd_g_ctrlreq+0x3>
    4216:	89 2b       	or	r24, r25
    4218:	09 f0       	breq	.+2      	; 0x421c <__stack+0x21d>
    421a:	49 c0       	rjmp	.+146    	; 0x42ae <__stack+0x2af>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    421c:	c1 e7       	ldi	r28, 0x71	; 113
    421e:	d6 e2       	ldi	r29, 0x26	; 38
    4220:	8c 81       	ldd	r24, Y+4	; 0x04
    4222:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4226:	8c 81       	ldd	r24, Y+4	; 0x04
    4228:	0e 94 00 28 	call	0x5000	; 0x5000 <udd_ep_set_halt>
    422c:	07 c0       	rjmp	.+14     	; 0x423c <__stack+0x23d>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    422e:	80 e0       	ldi	r24, 0x00	; 0
    4230:	05 c0       	rjmp	.+10     	; 0x423c <__stack+0x23d>
				break;
			}
		}
#endif
	}
	return false;
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	03 c0       	rjmp	.+6      	; 0x423c <__stack+0x23d>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	01 c0       	rjmp	.+2      	; 0x423c <__stack+0x23d>
				break;
			}
		}
#endif
	}
	return false;
    423a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    423c:	81 11       	cpse	r24, r1
    423e:	93 c0       	rjmp	.+294    	; 0x4366 <__stack+0x367>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4240:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <udd_g_ctrlreq>
    4244:	8f 71       	andi	r24, 0x1F	; 31
    4246:	81 30       	cpi	r24, 0x01	; 1
    4248:	91 f5       	brne	.+100    	; 0x42ae <__stack+0x2af>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    424a:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udc_num_configuration>
    424e:	88 23       	and	r24, r24
    4250:	09 f4       	brne	.+2      	; 0x4254 <__stack+0x255>
    4252:	74 c0       	rjmp	.+232    	; 0x433c <__stack+0x33d>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4254:	00 91 75 26 	lds	r16, 0x2675	; 0x802675 <udd_g_ctrlreq+0x4>
    4258:	10 91 76 26 	lds	r17, 0x2676	; 0x802676 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    425c:	c0 91 2e 25 	lds	r28, 0x252E	; 0x80252e <udc_ptr_conf>
    4260:	d0 91 2f 25 	lds	r29, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    4264:	e8 81       	ld	r30, Y
    4266:	f9 81       	ldd	r31, Y+1	; 0x01
    4268:	84 81       	ldd	r24, Z+4	; 0x04
    426a:	08 17       	cp	r16, r24
    426c:	08 f0       	brcs	.+2      	; 0x4270 <__stack+0x271>
    426e:	68 c0       	rjmp	.+208    	; 0x4340 <__stack+0x341>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4270:	60 e0       	ldi	r22, 0x00	; 0
    4272:	80 2f       	mov	r24, r16
    4274:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    4278:	88 23       	and	r24, r24
    427a:	c9 f0       	breq	.+50     	; 0x42ae <__stack+0x2af>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    427c:	f8 01       	movw	r30, r16
    427e:	ff 27       	eor	r31, r31
    4280:	cf 01       	movw	r24, r30
    4282:	88 0f       	add	r24, r24
    4284:	99 1f       	adc	r25, r25
    4286:	ea 81       	ldd	r30, Y+2	; 0x02
    4288:	fb 81       	ldd	r31, Y+3	; 0x03
    428a:	e8 0f       	add	r30, r24
    428c:	f9 1f       	adc	r31, r25
    428e:	c0 81       	ld	r28, Z
    4290:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4292:	ee 81       	ldd	r30, Y+6	; 0x06
    4294:	ff 81       	ldd	r31, Y+7	; 0x07
    4296:	19 95       	eicall
    4298:	68 2f       	mov	r22, r24
    429a:	80 2f       	mov	r24, r16
    429c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    42a0:	88 23       	and	r24, r24
    42a2:	29 f0       	breq	.+10     	; 0x42ae <__stack+0x2af>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    42a4:	ec 81       	ldd	r30, Y+4	; 0x04
    42a6:	fd 81       	ldd	r31, Y+5	; 0x05
    42a8:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    42aa:	81 11       	cpse	r24, r1
    42ac:	5c c0       	rjmp	.+184    	; 0x4366 <__stack+0x367>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    42ae:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <udd_g_ctrlreq>
    42b2:	8f 71       	andi	r24, 0x1F	; 31
    42b4:	82 30       	cpi	r24, 0x02	; 2
    42b6:	09 f0       	breq	.+2      	; 0x42ba <__stack+0x2bb>
    42b8:	45 c0       	rjmp	.+138    	; 0x4344 <__stack+0x345>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    42ba:	80 91 30 25 	lds	r24, 0x2530	; 0x802530 <udc_num_configuration>
    42be:	88 23       	and	r24, r24
    42c0:	b9 f1       	breq	.+110    	; 0x4330 <__stack+0x331>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    42c2:	a0 91 2e 25 	lds	r26, 0x252E	; 0x80252e <udc_ptr_conf>
    42c6:	b0 91 2f 25 	lds	r27, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    42ca:	ed 91       	ld	r30, X+
    42cc:	fc 91       	ld	r31, X
    42ce:	11 97       	sbiw	r26, 0x01	; 1
    42d0:	84 81       	ldd	r24, Z+4	; 0x04
    42d2:	88 23       	and	r24, r24
    42d4:	79 f1       	breq	.+94     	; 0x4334 <__stack+0x335>
    42d6:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    42d8:	ec 2f       	mov	r30, r28
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	ee 0f       	add	r30, r30
    42de:	ff 1f       	adc	r31, r31
    42e0:	12 96       	adiw	r26, 0x02	; 2
    42e2:	8d 91       	ld	r24, X+
    42e4:	9c 91       	ld	r25, X
    42e6:	13 97       	sbiw	r26, 0x03	; 3
    42e8:	e8 0f       	add	r30, r24
    42ea:	f9 1f       	adc	r31, r25
    42ec:	00 81       	ld	r16, Z
    42ee:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    42f0:	d8 01       	movw	r26, r16
    42f2:	16 96       	adiw	r26, 0x06	; 6
    42f4:	ed 91       	ld	r30, X+
    42f6:	fc 91       	ld	r31, X
    42f8:	17 97       	sbiw	r26, 0x07	; 7
    42fa:	19 95       	eicall
    42fc:	68 2f       	mov	r22, r24
    42fe:	8c 2f       	mov	r24, r28
    4300:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <udc_update_iface_desc>
    4304:	88 23       	and	r24, r24
    4306:	79 f1       	breq	.+94     	; 0x4366 <__stack+0x367>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    4308:	d8 01       	movw	r26, r16
    430a:	14 96       	adiw	r26, 0x04	; 4
    430c:	ed 91       	ld	r30, X+
    430e:	fc 91       	ld	r31, X
    4310:	15 97       	sbiw	r26, 0x05	; 5
    4312:	19 95       	eicall
    4314:	81 11       	cpse	r24, r1
    4316:	27 c0       	rjmp	.+78     	; 0x4366 <__stack+0x367>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    4318:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    431a:	a0 91 2e 25 	lds	r26, 0x252E	; 0x80252e <udc_ptr_conf>
    431e:	b0 91 2f 25 	lds	r27, 0x252F	; 0x80252f <udc_ptr_conf+0x1>
    4322:	ed 91       	ld	r30, X+
    4324:	fc 91       	ld	r31, X
    4326:	11 97       	sbiw	r26, 0x01	; 1
    4328:	94 81       	ldd	r25, Z+4	; 0x04
    432a:	c9 17       	cp	r28, r25
    432c:	a8 f2       	brcs	.-86     	; 0x42d8 <__stack+0x2d9>
    432e:	1b c0       	rjmp	.+54     	; 0x4366 <__stack+0x367>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	19 c0       	rjmp	.+50     	; 0x4366 <__stack+0x367>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	17 c0       	rjmp	.+46     	; 0x4366 <__stack+0x367>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	15 c0       	rjmp	.+42     	; 0x4366 <__stack+0x367>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	13 c0       	rjmp	.+38     	; 0x4366 <__stack+0x367>
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	11 c0       	rjmp	.+34     	; 0x4366 <__stack+0x367>
    4344:	80 e0       	ldi	r24, 0x00	; 0
    4346:	0f c0       	rjmp	.+30     	; 0x4366 <__stack+0x367>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4348:	98 2f       	mov	r25, r24
    434a:	90 76       	andi	r25, 0x60	; 96
    434c:	09 f0       	breq	.+2      	; 0x4350 <__stack+0x351>
    434e:	78 cf       	rjmp	.-272    	; 0x4240 <__stack+0x241>
    4350:	88 cd       	rjmp	.-1264   	; 0x3e62 <udc_process_setup+0x32>
    4352:	98 2f       	mov	r25, r24
    4354:	90 76       	andi	r25, 0x60	; 96
    4356:	09 f0       	breq	.+2      	; 0x435a <__stack+0x35b>
    4358:	73 cf       	rjmp	.-282    	; 0x4240 <__stack+0x241>
    435a:	8c ce       	rjmp	.-744    	; 0x4074 <__stack+0x75>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    435c:	3d e0       	ldi	r19, 0x0D	; 13
		str = udc_string_product_name;
    435e:	e4 e3       	ldi	r30, 0x34	; 52
    4360:	f0 e2       	ldi	r31, 0x20	; 32
    4362:	ff cd       	rjmp	.-1026   	; 0x3f62 <udc_process_setup+0x132>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    4364:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    4366:	df 91       	pop	r29
    4368:	cf 91       	pop	r28
    436a:	1f 91       	pop	r17
    436c:	0f 91       	pop	r16
    436e:	08 95       	ret

00004370 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
    4370:	cf 93       	push	r28
    4372:	df 93       	push	r29
    4374:	1f 92       	push	r1
    4376:	1f 92       	push	r1
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
	if (!b_idle && udd_b_idle) {
    437c:	81 11       	cpse	r24, r1
    437e:	26 c0       	rjmp	.+76     	; 0x43cc <udd_sleep_mode+0x5c>
    4380:	90 91 70 26 	lds	r25, 0x2670	; 0x802670 <udd_b_idle>
    4384:	99 23       	and	r25, r25
    4386:	f9 f0       	breq	.+62     	; 0x43c6 <udd_sleep_mode+0x56>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    4388:	90 91 82 26 	lds	r25, 0x2682	; 0x802682 <sleepmgr_locks+0x1>
    438c:	91 11       	cpse	r25, r1
    438e:	01 c0       	rjmp	.+2      	; 0x4392 <udd_sleep_mode+0x22>
    4390:	ff cf       	rjmp	.-2      	; 0x4390 <udd_sleep_mode+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4392:	9f b7       	in	r25, 0x3f	; 63
    4394:	9a 83       	std	Y+2, r25	; 0x02
	cpu_irq_disable();
    4396:	f8 94       	cli
	return flags;
    4398:	2a 81       	ldd	r18, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    439a:	e1 e8       	ldi	r30, 0x81	; 129
    439c:	f6 e2       	ldi	r31, 0x26	; 38
    439e:	91 81       	ldd	r25, Z+1	; 0x01
    43a0:	91 50       	subi	r25, 0x01	; 1
    43a2:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    43a4:	2f bf       	out	0x3f, r18	; 63
    43a6:	0f c0       	rjmp	.+30     	; 0x43c6 <udd_sleep_mode+0x56>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    43a8:	90 91 82 26 	lds	r25, 0x2682	; 0x802682 <sleepmgr_locks+0x1>
    43ac:	9f 3f       	cpi	r25, 0xFF	; 255
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <udd_sleep_mode+0x42>
    43b0:	ff cf       	rjmp	.-2      	; 0x43b0 <udd_sleep_mode+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    43b2:	9f b7       	in	r25, 0x3f	; 63
    43b4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    43b6:	f8 94       	cli
	return flags;
    43b8:	29 81       	ldd	r18, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    43ba:	e1 e8       	ldi	r30, 0x81	; 129
    43bc:	f6 e2       	ldi	r31, 0x26	; 38
    43be:	91 81       	ldd	r25, Z+1	; 0x01
    43c0:	9f 5f       	subi	r25, 0xFF	; 255
    43c2:	91 83       	std	Z+1, r25	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    43c4:	2f bf       	out	0x3f, r18	; 63
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    43c6:	80 93 70 26 	sts	0x2670, r24	; 0x802670 <udd_b_idle>
}
    43ca:	05 c0       	rjmp	.+10     	; 0x43d6 <udd_sleep_mode+0x66>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
    43cc:	90 91 70 26 	lds	r25, 0x2670	; 0x802670 <udd_b_idle>
    43d0:	99 23       	and	r25, r25
    43d2:	51 f3       	breq	.-44     	; 0x43a8 <udd_sleep_mode+0x38>
    43d4:	f8 cf       	rjmp	.-16     	; 0x43c6 <udd_sleep_mode+0x56>
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	08 95       	ret

000043e0 <udd_ctrl_init>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_ctrl_init(void)
{
    43e0:	0f 93       	push	r16
	udd_disable_overflow_interrupt();
    43e2:	e8 ec       	ldi	r30, 0xC8	; 200
    43e4:	f4 e0       	ldi	r31, 0x04	; 4
    43e6:	80 81       	ld	r24, Z
    43e8:	8f 7d       	andi	r24, 0xDF	; 223
    43ea:	80 83       	st	Z, r24
	udd_disable_underflow_interrupt();
    43ec:	80 81       	ld	r24, Z
    43ee:	8f 7d       	andi	r24, 0xDF	; 223
    43f0:	80 83       	st	Z, r24

	// Clear status flag from control endpoints
	// Mandatory for ATxmega128A1 Rev. K
	udd_control_in_set_NACK0();
    43f2:	e8 e3       	ldi	r30, 0x38	; 56
    43f4:	f6 e2       	ldi	r31, 0x26	; 38
    43f6:	02 e0       	ldi	r16, 0x02	; 2
    43f8:	05 93       	las	Z, r16
	udd_control_in_set_bytecnt(0);
    43fa:	10 92 3a 26 	sts	0x263A, r1	; 0x80263a <udd_sram+0x1a>
    43fe:	10 92 3b 26 	sts	0x263B, r1	; 0x80263b <udd_sram+0x1b>
	udd_control_in_ack_tc();
    4402:	00 e2       	ldi	r16, 0x20	; 32
    4404:	06 93       	lac	Z, r16
	udd_control_ack_in_underflow();
    4406:	00 e4       	ldi	r16, 0x40	; 64
    4408:	06 93       	lac	Z, r16
	udd_control_ack_out_overflow();
    440a:	e0 e3       	ldi	r30, 0x30	; 48
    440c:	f6 e2       	ldi	r31, 0x26	; 38
    440e:	00 e4       	ldi	r16, 0x40	; 64
    4410:	06 93       	lac	Z, r16

	udd_g_ctrlreq.callback = NULL;
    4412:	e1 e7       	ldi	r30, 0x71	; 113
    4414:	f6 e2       	ldi	r31, 0x26	; 38
    4416:	14 86       	std	Z+12, r1	; 0x0c
    4418:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    441a:	16 86       	std	Z+14, r1	; 0x0e
    441c:	17 86       	std	Z+15, r1	; 0x0f
	udd_g_ctrlreq.payload_size = 0;
    441e:	12 86       	std	Z+10, r1	; 0x0a
    4420:	13 86       	std	Z+11, r1	; 0x0b
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    4422:	10 92 1f 26 	sts	0x261F, r1	; 0x80261f <udd_ep_control_state>
}
    4426:	0f 91       	pop	r16
    4428:	08 95       	ret

0000442a <udd_ctrl_stall_data>:
		udd_control_out_enable_stall();
	}
}

static void udd_ctrl_stall_data(void)
{
    442a:	0f 93       	push	r16
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    442c:	85 e0       	ldi	r24, 0x05	; 5
    442e:	80 93 1f 26 	sts	0x261F, r24	; 0x80261f <udd_ep_control_state>
	udd_control_in_enable_stall();
    4432:	e9 e3       	ldi	r30, 0x39	; 57
    4434:	f6 e2       	ldi	r31, 0x26	; 38
    4436:	04 e0       	ldi	r16, 0x04	; 4
    4438:	05 93       	las	Z, r16
	udd_control_out_enable_stall();
    443a:	e1 e3       	ldi	r30, 0x31	; 49
    443c:	f6 e2       	ldi	r31, 0x26	; 38
    443e:	04 e0       	ldi	r16, 0x04	; 4
    4440:	05 93       	las	Z, r16
}
    4442:	0f 91       	pop	r16
    4444:	08 95       	ret

00004446 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
    4446:	0f 93       	push	r16
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    4448:	83 e0       	ldi	r24, 0x03	; 3
    444a:	80 93 1f 26 	sts	0x261F, r24	; 0x80261f <udd_ep_control_state>
	// Valid and sent empty IN packet on control endpoint
	udd_control_in_set_bytecnt(0);
    444e:	10 92 3a 26 	sts	0x263A, r1	; 0x80263a <udd_sram+0x1a>
    4452:	10 92 3b 26 	sts	0x263B, r1	; 0x80263b <udd_sram+0x1b>
	udd_control_in_clear_NACK0();
    4456:	e8 e3       	ldi	r30, 0x38	; 56
    4458:	f6 e2       	ldi	r31, 0x26	; 38
    445a:	02 e0       	ldi	r16, 0x02	; 2
    445c:	06 93       	lac	Z, r16
}
    445e:	0f 91       	pop	r16
    4460:	08 95       	ret

00004462 <udd_ctrl_endofrequest>:
}

static void udd_ctrl_endofrequest(void)
{
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    4462:	e0 91 7d 26 	lds	r30, 0x267D	; 0x80267d <udd_g_ctrlreq+0xc>
    4466:	f0 91 7e 26 	lds	r31, 0x267E	; 0x80267e <udd_g_ctrlreq+0xd>
    446a:	30 97       	sbiw	r30, 0x00	; 0
    446c:	09 f0       	breq	.+2      	; 0x4470 <udd_ctrl_endofrequest+0xe>
		udd_g_ctrlreq.callback();
    446e:	19 95       	eicall
    4470:	08 95       	ret

00004472 <udd_ctrl_in_sent>:
		udd_control_out_ack_tc();
	}
}

static void udd_ctrl_in_sent(void)
{
    4472:	0f 93       	push	r16
    4474:	cf 93       	push	r28
    4476:	df 93       	push	r29
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    4478:	80 91 1f 26 	lds	r24, 0x261F	; 0x80261f <udd_ep_control_state>
    447c:	83 30       	cpi	r24, 0x03	; 3
    447e:	29 f4       	brne	.+10     	; 0x448a <udd_ctrl_in_sent+0x18>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    4480:	0e 94 31 22 	call	0x4462	; 0x4462 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    4484:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <udd_ctrl_init>
		return;
    4488:	5e c0       	rjmp	.+188    	; 0x4546 <udd_ctrl_in_sent+0xd4>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    448a:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <udd_ctrl_payload_nb_trans>
    448e:	90 91 1c 26 	lds	r25, 0x261C	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
    4492:	c0 91 7b 26 	lds	r28, 0x267B	; 0x80267b <udd_g_ctrlreq+0xa>
    4496:	d0 91 7c 26 	lds	r29, 0x267C	; 0x80267c <udd_g_ctrlreq+0xb>
    449a:	c8 1b       	sub	r28, r24
    449c:	d9 0b       	sbc	r29, r25
	if (0 == nb_remain) {
    449e:	71 f5       	brne	.+92     	; 0x44fc <udd_ctrl_in_sent+0x8a>
		// Update number of total data sending by previous playload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    44a0:	20 91 1d 26 	lds	r18, 0x261D	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    44a4:	30 91 1e 26 	lds	r19, 0x261E	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
    44a8:	82 0f       	add	r24, r18
    44aa:	93 1f       	adc	r25, r19
    44ac:	80 93 1d 26 	sts	0x261D, r24	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    44b0:	90 93 1e 26 	sts	0x261E, r25	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    44b4:	20 91 77 26 	lds	r18, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    44b8:	30 91 78 26 	lds	r19, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    44bc:	82 17       	cp	r24, r18
    44be:	93 07       	cpc	r25, r19
    44c0:	21 f0       	breq	.+8      	; 0x44ca <udd_ctrl_in_sent+0x58>
				|| b_shortpacket) {
    44c2:	80 91 36 25 	lds	r24, 0x2536	; 0x802536 <b_shortpacket.5638>
    44c6:	88 23       	and	r24, r24
    44c8:	41 f0       	breq	.+16     	; 0x44da <udd_ctrl_in_sent+0x68>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    44ca:	84 e0       	ldi	r24, 0x04	; 4
    44cc:	80 93 1f 26 	sts	0x261F, r24	; 0x80261f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    44d0:	e0 e3       	ldi	r30, 0x30	; 48
    44d2:	f6 e2       	ldi	r31, 0x26	; 38
    44d4:	02 e0       	ldi	r16, 0x02	; 2
    44d6:	06 93       	lac	Z, r16
    44d8:	36 c0       	rjmp	.+108    	; 0x4546 <udd_ctrl_in_sent+0xd4>
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
    44da:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <udd_g_ctrlreq+0xe>
    44de:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <udd_g_ctrlreq+0xf>
    44e2:	30 97       	sbiw	r30, 0x00	; 0
    44e4:	99 f0       	breq	.+38     	; 0x450c <udd_ctrl_in_sent+0x9a>
				|| (!udd_g_ctrlreq.over_under_run())) {
    44e6:	19 95       	eicall
    44e8:	88 23       	and	r24, r24
    44ea:	81 f0       	breq	.+32     	; 0x450c <udd_ctrl_in_sent+0x9a>
			// Underrun then send zlp on IN
			// nb_remain == 0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
    44ec:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <udd_ctrl_payload_nb_trans>
    44f0:	10 92 1c 26 	sts	0x261C, r1	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
			nb_remain = udd_g_ctrlreq.payload_size;
    44f4:	c0 91 7b 26 	lds	r28, 0x267B	; 0x80267b <udd_g_ctrlreq+0xa>
    44f8:	d0 91 7c 26 	lds	r29, 0x267C	; 0x80267c <udd_g_ctrlreq+0xb>
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    44fc:	c0 34       	cpi	r28, 0x40	; 64
    44fe:	d1 05       	cpc	r29, r1
    4500:	28 f0       	brcs	.+10     	; 0x450c <udd_ctrl_in_sent+0x9a>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    4502:	10 92 36 25 	sts	0x2536, r1	; 0x802536 <b_shortpacket.5638>
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer an send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    4506:	c0 e4       	ldi	r28, 0x40	; 64
    4508:	d0 e0       	ldi	r29, 0x00	; 0
    450a:	03 c0       	rjmp	.+6      	; 0x4512 <udd_ctrl_in_sent+0xa0>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	80 93 36 25 	sts	0x2536, r24	; 0x802536 <b_shortpacket.5638>
	}
	udd_control_in_set_bytecnt(nb_remain);
    4512:	e0 e2       	ldi	r30, 0x20	; 32
    4514:	f6 e2       	ldi	r31, 0x26	; 38
    4516:	c2 8f       	std	Z+26, r28	; 0x1a
    4518:	d3 8f       	std	Z+27, r29	; 0x1b

	// Link payload buffer directly on USB hardware
	udd_control_in_set_buf(udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans);
    451a:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <udd_ctrl_payload_nb_trans>
    451e:	90 91 1c 26 	lds	r25, 0x261C	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
    4522:	20 91 79 26 	lds	r18, 0x2679	; 0x802679 <udd_g_ctrlreq+0x8>
    4526:	30 91 7a 26 	lds	r19, 0x267A	; 0x80267a <udd_g_ctrlreq+0x9>
    452a:	28 0f       	add	r18, r24
    452c:	39 1f       	adc	r19, r25
    452e:	24 8f       	std	Z+28, r18	; 0x1c
    4530:	35 8f       	std	Z+29, r19	; 0x1d
	udd_ctrl_payload_nb_trans += nb_remain;
    4532:	c8 0f       	add	r28, r24
    4534:	d9 1f       	adc	r29, r25
    4536:	c0 93 1b 26 	sts	0x261B, r28	; 0x80261b <udd_ctrl_payload_nb_trans>
    453a:	d0 93 1c 26 	sts	0x261C, r29	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>

	// Valid and sent the data available in control endpoint buffer
	udd_control_in_clear_NACK0();
    453e:	e8 e3       	ldi	r30, 0x38	; 56
    4540:	f6 e2       	ldi	r31, 0x26	; 38
    4542:	02 e0       	ldi	r16, 0x02	; 2
    4544:	06 93       	lac	Z, r16
}
    4546:	df 91       	pop	r29
    4548:	cf 91       	pop	r28
    454a:	0f 91       	pop	r16
    454c:	08 95       	ret

0000454e <udd_ep_get_size>:
#if (0!=USB_DEVICE_MAX_EP)

static uint16_t udd_ep_get_size(UDD_EP_t * ep_ctrl)
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
    454e:	fc 01       	movw	r30, r24
    4550:	81 81       	ldd	r24, Z+1	; 0x01
    4552:	e8 2f       	mov	r30, r24
    4554:	e7 70       	andi	r30, 0x07	; 7
    4556:	8e 2f       	mov	r24, r30
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	fc 01       	movw	r30, r24
    455c:	31 97       	sbiw	r30, 0x01	; 1
    455e:	e7 30       	cpi	r30, 0x07	; 7
    4560:	f1 05       	cpc	r31, r1
    4562:	d8 f4       	brcc	.+54     	; 0x459a <udd_ep_get_size+0x4c>
    4564:	88 27       	eor	r24, r24
    4566:	e2 53       	subi	r30, 0x32	; 50
    4568:	fe 4f       	sbci	r31, 0xFE	; 254
    456a:	8f 4f       	sbci	r24, 0xFF	; 255
    456c:	0c 94 70 2f 	jmp	0x5ee0	; 0x5ee0 <__tablejump2__>
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
	case USB_EP_BUFSIZE_16_gc:
		return 16;
    4570:	80 e1       	ldi	r24, 0x10	; 16
    4572:	90 e0       	ldi	r25, 0x00	; 0
    4574:	08 95       	ret
	case USB_EP_BUFSIZE_32_gc:
		return 32;
    4576:	80 e2       	ldi	r24, 0x20	; 32
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	08 95       	ret
	case USB_EP_BUFSIZE_64_gc:
		return 64;
    457c:	80 e4       	ldi	r24, 0x40	; 64
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	08 95       	ret
	case USB_EP_BUFSIZE_128_gc:
		return 128;
    4582:	80 e8       	ldi	r24, 0x80	; 128
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	08 95       	ret
	case USB_EP_BUFSIZE_256_gc:
		return 256;
    4588:	80 e0       	ldi	r24, 0x00	; 0
    458a:	91 e0       	ldi	r25, 0x01	; 1
    458c:	08 95       	ret
	case USB_EP_BUFSIZE_512_gc:
		return 512;
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	92 e0       	ldi	r25, 0x02	; 2
    4592:	08 95       	ret
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
    4594:	8f ef       	ldi	r24, 0xFF	; 255
    4596:	93 e0       	ldi	r25, 0x03	; 3
    4598:	08 95       	ret
{
	// Translate hardware defines to USB endpoint size
	switch (udd_endpoint_get_size_field(ep_ctrl)) {
	default:
	case USB_EP_BUFSIZE_8_gc:
		return 8;
    459a:	88 e0       	ldi	r24, 0x08	; 8
    459c:	90 e0       	ldi	r25, 0x00	; 0
	case USB_EP_BUFSIZE_512_gc:
		return 512;
	case USB_EP_BUFSIZE_1023_gc:
		return 1023;
	}
}
    459e:	08 95       	ret

000045a0 <udd_ep_get_job>:

static udd_ep_job_t *udd_ep_get_job(udd_ep_id_t ep)
{
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) +
    45a0:	28 2f       	mov	r18, r24
    45a2:	2f 70       	andi	r18, 0x0F	; 15
    45a4:	30 e0       	ldi	r19, 0x00	; 0
    45a6:	22 0f       	add	r18, r18
    45a8:	33 1f       	adc	r19, r19
    45aa:	08 2e       	mov	r0, r24
    45ac:	00 0c       	add	r0, r0
    45ae:	99 0b       	sbc	r25, r25
    45b0:	88 27       	eor	r24, r24
    45b2:	99 0f       	add	r25, r25
    45b4:	88 1f       	adc	r24, r24
    45b6:	99 27       	eor	r25, r25
    45b8:	82 0f       	add	r24, r18
    45ba:	93 1f       	adc	r25, r19
    45bc:	02 97       	sbiw	r24, 0x02	; 2
    45be:	9c 01       	movw	r18, r24
    45c0:	22 0f       	add	r18, r18
    45c2:	33 1f       	adc	r19, r19
    45c4:	22 0f       	add	r18, r18
    45c6:	33 1f       	adc	r19, r19
    45c8:	22 0f       	add	r18, r18
    45ca:	33 1f       	adc	r19, r19
    45cc:	82 0f       	add	r24, r18
    45ce:	93 1f       	adc	r25, r19
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}
    45d0:	89 54       	subi	r24, 0x49	; 73
    45d2:	9a 4d       	sbci	r25, 0xDA	; 218
    45d4:	08 95       	ret

000045d6 <udd_ctrl_interrupt_tc_setup>:
	}
	return false;
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
    45d6:	0f 93       	push	r16
    45d8:	cf 93       	push	r28
	if (!udd_is_setup_event()) {
    45da:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    45de:	80 ff       	sbrs	r24, 0
    45e0:	6a c0       	rjmp	.+212    	; 0x46b6 <udd_ctrl_interrupt_tc_setup+0xe0>
		return false;
	}
	udd_ack_setup_event();
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Clear eventually previous stall events
	udd_control_out_ack_stall();
    45e8:	e0 e3       	ldi	r30, 0x30	; 48
    45ea:	f6 e2       	ldi	r31, 0x26	; 38
    45ec:	00 e8       	ldi	r16, 0x80	; 128
    45ee:	06 93       	lac	Z, r16
	udd_control_in_ack_stall();
    45f0:	e8 e3       	ldi	r30, 0x38	; 56
    45f2:	f6 e2       	ldi	r31, 0x26	; 38
    45f4:	00 e8       	ldi	r16, 0x80	; 128
    45f6:	06 93       	lac	Z, r16
	udd_ack_stall_event();
    45f8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>

	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
    45fc:	e0 e3       	ldi	r30, 0x30	; 48
    45fe:	f6 e2       	ldi	r31, 0x26	; 38
    4600:	00 e1       	ldi	r16, 0x10	; 16
    4602:	06 93       	lac	Z, r16
	udd_ep_control_state = UDD_EPCTRL_SETUP;
}

static void udd_ctrl_setup_received(void)
{
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    4604:	80 91 1f 26 	lds	r24, 0x261F	; 0x80261f <udd_ep_control_state>
    4608:	88 23       	and	r24, r24
    460a:	39 f0       	breq	.+14     	; 0x461a <udd_ctrl_interrupt_tc_setup+0x44>
		if ((UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state)
    460c:	83 50       	subi	r24, 0x03	; 3
    460e:	82 30       	cpi	r24, 0x02	; 2
    4610:	10 f4       	brcc	.+4      	; 0x4616 <udd_ctrl_interrupt_tc_setup+0x40>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// Accept that ZLP event can be hidden by setup packet event
			// in case of setup packet sending quickly after a ZLP
			udd_ctrl_endofrequest();
    4612:	0e 94 31 22 	call	0x4462	; 0x4462 <udd_ctrl_endofrequest>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    4616:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <udd_ctrl_init>
	}
	// Fill setup request structure
	if (8 != udd_control_out_get_bytecnt())
    461a:	80 91 32 26 	lds	r24, 0x2632	; 0x802632 <udd_sram+0x12>
    461e:	90 91 33 26 	lds	r25, 0x2633	; 0x802633 <udd_sram+0x13>
    4622:	08 97       	sbiw	r24, 0x08	; 8
    4624:	09 f0       	breq	.+2      	; 0x4628 <udd_ctrl_interrupt_tc_setup+0x52>
    4626:	49 c0       	rjmp	.+146    	; 0x46ba <udd_ctrl_interrupt_tc_setup+0xe4>
		return; // Error data number don't correspond to SETUP packet
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    4628:	88 e0       	ldi	r24, 0x08	; 8
    462a:	eb ed       	ldi	r30, 0xDB	; 219
    462c:	f5 e2       	ldi	r31, 0x25	; 37
    462e:	a1 e7       	ldi	r26, 0x71	; 113
    4630:	b6 e2       	ldi	r27, 0x26	; 38
    4632:	01 90       	ld	r0, Z+
    4634:	0d 92       	st	X+, r0
    4636:	8a 95       	dec	r24
    4638:	e1 f7       	brne	.-8      	; 0x4632 <udd_ctrl_interrupt_tc_setup+0x5c>

	// To detect a protocol error on setup, enable nak interrupt on IN/OUT of control endpoint
	udd_enable_overflow_interrupt();
    463a:	e8 ec       	ldi	r30, 0xC8	; 200
    463c:	f4 e0       	ldi	r31, 0x04	; 4
    463e:	80 81       	ld	r24, Z
    4640:	80 62       	ori	r24, 0x20	; 32
    4642:	80 83       	st	Z, r24
	udd_enable_underflow_interrupt();
    4644:	80 81       	ld	r24, Z
    4646:	80 62       	ori	r24, 0x20	; 32
    4648:	80 83       	st	Z, r24

	// Decode setup request
	if (udc_process_setup() == false) {
    464a:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <udc_process_setup>
    464e:	c8 2f       	mov	r28, r24
    4650:	81 11       	cpse	r24, r1
    4652:	04 c0       	rjmp	.+8      	; 0x465c <udd_ctrl_interrupt_tc_setup+0x86>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    4654:	0e 94 15 22 	call	0x442a	; 0x442a <udd_ctrl_stall_data>
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    4658:	c1 e0       	ldi	r28, 0x01	; 1
    465a:	30 c0       	rjmp	.+96     	; 0x46bc <udd_ctrl_interrupt_tc_setup+0xe6>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
		return;
	}

	if (Udd_setup_is_in()) {
    465c:	80 91 71 26 	lds	r24, 0x2671	; 0x802671 <udd_g_ctrlreq>
    4660:	88 23       	and	r24, r24
    4662:	74 f4       	brge	.+28     	; 0x4680 <udd_ctrl_interrupt_tc_setup+0xaa>
		udd_ctrl_prev_payload_nb_trans = 0;
    4664:	10 92 1d 26 	sts	0x261D, r1	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    4668:	10 92 1e 26 	sts	0x261E, r1	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    466c:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <udd_ctrl_payload_nb_trans>
    4670:	10 92 1c 26 	sts	0x261C, r1	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    4674:	82 e0       	ldi	r24, 0x02	; 2
    4676:	80 93 1f 26 	sts	0x261F, r24	; 0x80261f <udd_ep_control_state>
		udd_ctrl_in_sent(); // Send first data transfer
    467a:	0e 94 39 22 	call	0x4472	; 0x4472 <udd_ctrl_in_sent>
    467e:	1e c0       	rjmp	.+60     	; 0x46bc <udd_ctrl_interrupt_tc_setup+0xe6>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    4680:	80 91 77 26 	lds	r24, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    4684:	90 91 78 26 	lds	r25, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    4688:	89 2b       	or	r24, r25
    468a:	19 f4       	brne	.+6      	; 0x4692 <udd_ctrl_interrupt_tc_setup+0xbc>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    468c:	0e 94 23 22 	call	0x4446	; 0x4446 <udd_ctrl_send_zlp_in>
    4690:	15 c0       	rjmp	.+42     	; 0x46bc <udd_ctrl_interrupt_tc_setup+0xe6>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    4692:	10 92 1d 26 	sts	0x261D, r1	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    4696:	10 92 1e 26 	sts	0x261E, r1	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
		udd_ctrl_payload_nb_trans = 0;
    469a:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <udd_ctrl_payload_nb_trans>
    469e:	10 92 1c 26 	sts	0x261C, r1	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	80 93 1f 26 	sts	0x261F, r24	; 0x80261f <udd_ep_control_state>
		// Clear packet to receive first packet
		udd_control_out_clear_NACK0();
    46a8:	e0 e3       	ldi	r30, 0x30	; 48
    46aa:	f6 e2       	ldi	r31, 0x26	; 38
    46ac:	02 e0       	ldi	r16, 0x02	; 2
    46ae:	06 93       	lac	Z, r16
		udd_control_out_ack_tc();
    46b0:	00 e2       	ldi	r16, 0x20	; 32
    46b2:	06 93       	lac	Z, r16
    46b4:	03 c0       	rjmp	.+6      	; 0x46bc <udd_ctrl_interrupt_tc_setup+0xe6>
}

static bool udd_ctrl_interrupt_tc_setup(void)
{
	if (!udd_is_setup_event()) {
		return false;
    46b6:	c0 e0       	ldi	r28, 0x00	; 0
    46b8:	01 c0       	rjmp	.+2      	; 0x46bc <udd_ctrl_interrupt_tc_setup+0xe6>
	Assert(udd_control_setup()); // A setup must be received on control endpoint

	// Ack SETUP packet and decode request
	udd_control_ack_setup();
	udd_ctrl_setup_received();
	return true;
    46ba:	c1 e0       	ldi	r28, 0x01	; 1
}
    46bc:	8c 2f       	mov	r24, r28
    46be:	cf 91       	pop	r28
    46c0:	0f 91       	pop	r16
    46c2:	08 95       	ret

000046c4 <udd_ep_trans_complet>:
	}
	return (USB_DEVICE_MAX_EP >= ep);
}

static void udd_ep_trans_complet(udd_ep_id_t ep)
{
    46c4:	8f 92       	push	r8
    46c6:	9f 92       	push	r9
    46c8:	af 92       	push	r10
    46ca:	bf 92       	push	r11
    46cc:	df 92       	push	r13
    46ce:	ef 92       	push	r14
    46d0:	ff 92       	push	r15
    46d2:	0f 93       	push	r16
    46d4:	1f 93       	push	r17
    46d6:	cf 93       	push	r28
    46d8:	df 93       	push	r29
    46da:	d8 2e       	mov	r13, r24
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
    46dc:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <udd_ep_get_job>
    46e0:	8c 01       	movw	r16, r24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    46e2:	cd 2d       	mov	r28, r13
    46e4:	cf 70       	andi	r28, 0x0F	; 15
    46e6:	d0 e0       	ldi	r29, 0x00	; 0
    46e8:	ce 01       	movw	r24, r28
    46ea:	88 0f       	add	r24, r24
    46ec:	99 1f       	adc	r25, r25
    46ee:	cd 2d       	mov	r28, r13
    46f0:	0d 2c       	mov	r0, r13
    46f2:	00 0c       	add	r0, r0
    46f4:	dd 0b       	sbc	r29, r29
    46f6:	cc 27       	eor	r28, r28
    46f8:	dd 0f       	add	r29, r29
    46fa:	cc 1f       	adc	r28, r28
    46fc:	dd 27       	eor	r29, r29
    46fe:	c8 0f       	add	r28, r24
    4700:	d9 1f       	adc	r29, r25
    4702:	ce 01       	movw	r24, r28
    4704:	88 0f       	add	r24, r24
    4706:	99 1f       	adc	r25, r25
    4708:	88 0f       	add	r24, r24
    470a:	99 1f       	adc	r25, r25
    470c:	88 0f       	add	r24, r24
    470e:	99 1f       	adc	r25, r25
    4710:	9c 01       	movw	r18, r24
    4712:	20 5d       	subi	r18, 0xD0	; 208
    4714:	39 4d       	sbci	r19, 0xD9	; 217
    4716:	79 01       	movw	r14, r18
	uint16_t ep_size, nb_trans;
	iram_size_t next_trans;

	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	ep_size = udd_ep_get_size(ep_ctrl);
    4718:	c9 01       	movw	r24, r18
    471a:	0e 94 a7 22 	call	0x454e	; 0x454e <udd_ep_get_size>
    471e:	4c 01       	movw	r8, r24

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    4720:	dd 20       	and	r13, r13
    4722:	0c f0       	brlt	.+2      	; 0x4726 <udd_ep_trans_complet+0x62>
    4724:	72 c0       	rjmp	.+228    	; 0x480a <udd_ep_trans_complet+0x146>
		// Transfer complete on IN
		nb_trans = udd_endpoint_in_nb_sent(ep_ctrl);
    4726:	fe 01       	movw	r30, r28
    4728:	ee 0f       	add	r30, r30
    472a:	ff 1f       	adc	r31, r31
    472c:	ee 0f       	add	r30, r30
    472e:	ff 1f       	adc	r31, r31
    4730:	ee 0f       	add	r30, r30
    4732:	ff 1f       	adc	r31, r31
    4734:	e0 5e       	subi	r30, 0xE0	; 224
    4736:	f9 4d       	sbci	r31, 0xD9	; 217
    4738:	26 89       	ldd	r18, Z+22	; 0x16
    473a:	37 89       	ldd	r19, Z+23	; 0x17

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    473c:	d8 01       	movw	r26, r16
    473e:	15 96       	adiw	r26, 0x05	; 5
    4740:	8d 91       	ld	r24, X+
    4742:	9c 91       	ld	r25, X
    4744:	16 97       	sbiw	r26, 0x06	; 6
    4746:	82 0f       	add	r24, r18
    4748:	93 1f       	adc	r25, r19
    474a:	15 96       	adiw	r26, 0x05	; 5
    474c:	8d 93       	st	X+, r24
    474e:	9c 93       	st	X, r25
    4750:	16 97       	sbiw	r26, 0x06	; 6

		// Need to send other data
		if (ptr_job->nb_trans != ptr_job->buf_size) {
    4752:	13 96       	adiw	r26, 0x03	; 3
    4754:	2d 91       	ld	r18, X+
    4756:	3c 91       	ld	r19, X
    4758:	14 97       	sbiw	r26, 0x04	; 4
    475a:	82 17       	cp	r24, r18
    475c:	93 07       	cpc	r25, r19
    475e:	09 f4       	brne	.+2      	; 0x4762 <udd_ep_trans_complet+0x9e>
    4760:	3e c0       	rjmp	.+124    	; 0x47de <udd_ep_trans_complet+0x11a>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    4762:	28 1b       	sub	r18, r24
    4764:	39 0b       	sbc	r19, r25
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    4766:	21 15       	cp	r18, r1
    4768:	b4 e0       	ldi	r27, 0x04	; 4
    476a:	3b 07       	cpc	r19, r27
    476c:	40 f0       	brcs	.+16     	; 0x477e <udd_ep_trans_complet+0xba>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    476e:	2f ef       	ldi	r18, 0xFF	; 255
    4770:	33 e0       	ldi	r19, 0x03	; 3
    4772:	c9 01       	movw	r24, r18
    4774:	b4 01       	movw	r22, r8
    4776:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    477a:	28 1b       	sub	r18, r24
    477c:	39 0b       	sbc	r19, r25
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
				&& (0==(next_trans % ep_size));
    477e:	f8 01       	movw	r30, r16
    4780:	80 81       	ld	r24, Z
    4782:	81 ff       	sbrs	r24, 1
    4784:	0a c0       	rjmp	.+20     	; 0x479a <udd_ep_trans_complet+0xd6>
    4786:	c9 01       	movw	r24, r18
    4788:	b4 01       	movw	r22, r8
    478a:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    478e:	41 e0       	ldi	r20, 0x01	; 1
    4790:	89 2b       	or	r24, r25
    4792:	09 f0       	breq	.+2      	; 0x4796 <udd_ep_trans_complet+0xd2>
    4794:	40 e0       	ldi	r20, 0x00	; 0
    4796:	84 2f       	mov	r24, r20
    4798:	01 c0       	rjmp	.+2      	; 0x479c <udd_ep_trans_complet+0xd8>
    479a:	80 e0       	ldi	r24, 0x00	; 0
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
					(UDD_ENDPOINT_MAX_TRANS % ep_size);
			}
			// Need ZLP, if requested and last packet is not a short packet
			ptr_job->b_shortpacket = ptr_job->b_shortpacket
    479c:	d8 01       	movw	r26, r16
    479e:	9c 91       	ld	r25, X
    47a0:	80 fb       	bst	r24, 0
    47a2:	91 f9       	bld	r25, 1
    47a4:	9c 93       	st	X, r25
				&& (0==(next_trans % ep_size));
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    47a6:	cc 0f       	add	r28, r28
    47a8:	dd 1f       	adc	r29, r29
    47aa:	cc 0f       	add	r28, r28
    47ac:	dd 1f       	adc	r29, r29
    47ae:	cc 0f       	add	r28, r28
    47b0:	dd 1f       	adc	r29, r29
    47b2:	c0 5e       	subi	r28, 0xE0	; 224
    47b4:	d9 4d       	sbci	r29, 0xD9	; 217
    47b6:	1e 8a       	std	Y+22, r1	; 0x16
    47b8:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, next_trans);
    47ba:	2a 8b       	std	Y+18, r18	; 0x12
    47bc:	3b 8b       	std	Y+19, r19	; 0x13
			// Link the user buffer directly on USB hardware DMA
			udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    47be:	11 96       	adiw	r26, 0x01	; 1
    47c0:	2d 91       	ld	r18, X+
    47c2:	3c 91       	ld	r19, X
    47c4:	12 97       	sbiw	r26, 0x02	; 2
    47c6:	15 96       	adiw	r26, 0x05	; 5
    47c8:	8d 91       	ld	r24, X+
    47ca:	9c 91       	ld	r25, X
    47cc:	16 97       	sbiw	r26, 0x06	; 6
    47ce:	82 0f       	add	r24, r18
    47d0:	93 1f       	adc	r25, r19
    47d2:	8c 8b       	std	Y+20, r24	; 0x14
    47d4:	9d 8b       	std	Y+21, r25	; 0x15
			udd_endpoint_clear_NACK0(ep_ctrl);
    47d6:	f7 01       	movw	r30, r14
    47d8:	02 e0       	ldi	r16, 0x02	; 2
    47da:	06 93       	lac	Z, r16
			return;
    47dc:	ca c0       	rjmp	.+404    	; 0x4972 <udd_ep_trans_complet+0x2ae>
		}

		// Need to send a ZLP after all data transfer
		if (ptr_job->b_shortpacket) {
    47de:	d8 01       	movw	r26, r16
    47e0:	8c 91       	ld	r24, X
    47e2:	81 ff       	sbrs	r24, 1
    47e4:	b3 c0       	rjmp	.+358    	; 0x494c <udd_ep_trans_complet+0x288>
			ptr_job->b_shortpacket = false;
    47e6:	8d 7f       	andi	r24, 0xFD	; 253
    47e8:	8c 93       	st	X, r24
			udd_endpoint_in_reset_nb_sent(ep_ctrl);
    47ea:	cc 0f       	add	r28, r28
    47ec:	dd 1f       	adc	r29, r29
    47ee:	cc 0f       	add	r28, r28
    47f0:	dd 1f       	adc	r29, r29
    47f2:	cc 0f       	add	r28, r28
    47f4:	dd 1f       	adc	r29, r29
    47f6:	c0 5e       	subi	r28, 0xE0	; 224
    47f8:	d9 4d       	sbci	r29, 0xD9	; 217
    47fa:	1e 8a       	std	Y+22, r1	; 0x16
    47fc:	1f 8a       	std	Y+23, r1	; 0x17
			udd_endpoint_in_set_bytecnt(ep_ctrl, 0);
    47fe:	1a 8a       	std	Y+18, r1	; 0x12
    4800:	1b 8a       	std	Y+19, r1	; 0x13
			udd_endpoint_clear_NACK0(ep_ctrl);
    4802:	f7 01       	movw	r30, r14
    4804:	02 e0       	ldi	r16, 0x02	; 2
    4806:	06 93       	lac	Z, r16
			return;
    4808:	b4 c0       	rjmp	.+360    	; 0x4972 <udd_ep_trans_complet+0x2ae>
		}
	}
	else
	{
		// Transfer complete on OUT
		nb_trans = udd_endpoint_out_nb_receiv(ep_ctrl);
    480a:	fe 01       	movw	r30, r28
    480c:	ee 0f       	add	r30, r30
    480e:	ff 1f       	adc	r31, r31
    4810:	ee 0f       	add	r30, r30
    4812:	ff 1f       	adc	r31, r31
    4814:	ee 0f       	add	r30, r30
    4816:	ff 1f       	adc	r31, r31
    4818:	e0 5e       	subi	r30, 0xE0	; 224
    481a:	f9 4d       	sbci	r31, 0xD9	; 217
    481c:	a2 88       	ldd	r10, Z+18	; 0x12
    481e:	b3 88       	ldd	r11, Z+19	; 0x13

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    4820:	d8 01       	movw	r26, r16
    4822:	8c 91       	ld	r24, X
    4824:	82 ff       	sbrs	r24, 2
    4826:	1b c0       	rjmp	.+54     	; 0x485e <udd_ep_trans_complet+0x19a>
			memcpy(&ptr_job->buf[ptr_job->nb_trans]
    4828:	11 96       	adiw	r26, 0x01	; 1
    482a:	ed 91       	ld	r30, X+
    482c:	fc 91       	ld	r31, X
    482e:	12 97       	sbiw	r26, 0x02	; 2
    4830:	15 96       	adiw	r26, 0x05	; 5
    4832:	2d 91       	ld	r18, X+
    4834:	3c 91       	ld	r19, X
    4836:	16 97       	sbiw	r26, 0x06	; 6
    4838:	13 96       	adiw	r26, 0x03	; 3
    483a:	8d 91       	ld	r24, X+
    483c:	9c 91       	ld	r25, X
    483e:	14 97       	sbiw	r26, 0x04	; 4
    4840:	b4 01       	movw	r22, r8
    4842:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    4846:	b0 e4       	ldi	r27, 0x40	; 64
    4848:	db 9e       	mul	r13, r27
    484a:	b0 01       	movw	r22, r0
    484c:	11 24       	eor	r1, r1
    484e:	69 50       	subi	r22, 0x09	; 9
    4850:	7b 4d       	sbci	r23, 0xDB	; 219
    4852:	ac 01       	movw	r20, r24
    4854:	cf 01       	movw	r24, r30
    4856:	82 0f       	add	r24, r18
    4858:	93 1f       	adc	r25, r19
    485a:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <memcpy>
				, udd_ep_out_cache_buffer[ep - 1]
				, ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    485e:	f8 01       	movw	r30, r16
    4860:	25 81       	ldd	r18, Z+5	; 0x05
    4862:	36 81       	ldd	r19, Z+6	; 0x06
    4864:	2a 0d       	add	r18, r10
    4866:	3b 1d       	adc	r19, r11
    4868:	25 83       	std	Z+5, r18	; 0x05
    486a:	36 83       	std	Z+6, r19	; 0x06
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    486c:	83 81       	ldd	r24, Z+3	; 0x03
    486e:	94 81       	ldd	r25, Z+4	; 0x04
    4870:	82 17       	cp	r24, r18
    4872:	93 07       	cpc	r25, r19
    4874:	68 f4       	brcc	.+26     	; 0x4890 <udd_ep_trans_complet+0x1cc>
			ptr_job->nb_trans = ptr_job->buf_size;
    4876:	85 83       	std	Z+5, r24	; 0x05
    4878:	96 83       	std	Z+6, r25	; 0x06
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_endpoint_out_get_nbbyte_requested(ep_ctrl))
    487a:	cc 0f       	add	r28, r28
    487c:	dd 1f       	adc	r29, r29
    487e:	cc 0f       	add	r28, r28
    4880:	dd 1f       	adc	r29, r29
    4882:	cc 0f       	add	r28, r28
    4884:	dd 1f       	adc	r29, r29
    4886:	c0 5e       	subi	r28, 0xE0	; 224
    4888:	d9 4d       	sbci	r29, 0xD9	; 217
    488a:	8e 89       	ldd	r24, Y+22	; 0x16
    488c:	9f 89       	ldd	r25, Y+23	; 0x17
    488e:	5e c0       	rjmp	.+188    	; 0x494c <udd_ep_trans_complet+0x288>
    4890:	fe 01       	movw	r30, r28
    4892:	ee 0f       	add	r30, r30
    4894:	ff 1f       	adc	r31, r31
    4896:	ee 0f       	add	r30, r30
    4898:	ff 1f       	adc	r31, r31
    489a:	ee 0f       	add	r30, r30
    489c:	ff 1f       	adc	r31, r31
    489e:	e0 5e       	subi	r30, 0xE0	; 224
    48a0:	f9 4d       	sbci	r31, 0xD9	; 217
    48a2:	46 89       	ldd	r20, Z+22	; 0x16
    48a4:	57 89       	ldd	r21, Z+23	; 0x17
    48a6:	a4 16       	cp	r10, r20
    48a8:	b5 06       	cpc	r11, r21
    48aa:	09 f0       	breq	.+2      	; 0x48ae <udd_ep_trans_complet+0x1ea>
    48ac:	4f c0       	rjmp	.+158    	; 0x494c <udd_ep_trans_complet+0x288>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    48ae:	28 17       	cp	r18, r24
    48b0:	39 07       	cpc	r19, r25
    48b2:	09 f4       	brne	.+2      	; 0x48b6 <udd_ep_trans_complet+0x1f2>
    48b4:	4b c0       	rjmp	.+150    	; 0x494c <udd_ep_trans_complet+0x288>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    48b6:	ac 01       	movw	r20, r24
    48b8:	42 1b       	sub	r20, r18
    48ba:	53 0b       	sbc	r21, r19
    48bc:	9a 01       	movw	r18, r20
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    48be:	21 15       	cp	r18, r1
    48c0:	54 e0       	ldi	r21, 0x04	; 4
    48c2:	35 07       	cpc	r19, r21
    48c4:	48 f0       	brcs	.+18     	; 0x48d8 <udd_ep_trans_complet+0x214>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    48c6:	2f ef       	ldi	r18, 0xFF	; 255
    48c8:	33 e0       	ldi	r19, 0x03	; 3
    48ca:	c9 01       	movw	r24, r18
    48cc:	b4 01       	movw	r22, r8
    48ce:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    48d2:	28 1b       	sub	r18, r24
    48d4:	39 0b       	sbc	r19, r25
    48d6:	06 c0       	rjmp	.+12     	; 0x48e4 <udd_ep_trans_complet+0x220>
					- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    48d8:	c9 01       	movw	r24, r18
    48da:	b4 01       	movw	r22, r8
    48dc:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    48e0:	28 1b       	sub	r18, r24
    48e2:	39 0b       	sbc	r19, r25
			}

			udd_endpoint_out_reset_nb_received(ep_ctrl);
    48e4:	fe 01       	movw	r30, r28
    48e6:	ee 0f       	add	r30, r30
    48e8:	ff 1f       	adc	r31, r31
    48ea:	ee 0f       	add	r30, r30
    48ec:	ff 1f       	adc	r31, r31
    48ee:	ee 0f       	add	r30, r30
    48f0:	ff 1f       	adc	r31, r31
    48f2:	e0 5e       	subi	r30, 0xE0	; 224
    48f4:	f9 4d       	sbci	r31, 0xD9	; 217
    48f6:	12 8a       	std	Z+18, r1	; 0x12
    48f8:	13 8a       	std	Z+19, r1	; 0x13
			if (next_trans < ep_size) {
    48fa:	28 15       	cp	r18, r8
    48fc:	39 05       	cpc	r19, r9
    48fe:	78 f4       	brcc	.+30     	; 0x491e <udd_ep_trans_complet+0x25a>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    4900:	d8 01       	movw	r26, r16
    4902:	8c 91       	ld	r24, X
    4904:	84 60       	ori	r24, 0x04	; 4
    4906:	8c 93       	st	X, r24
				udd_endpoint_set_buf( ep_ctrl,
    4908:	b0 e4       	ldi	r27, 0x40	; 64
    490a:	db 9e       	mul	r13, r27
    490c:	c0 01       	movw	r24, r0
    490e:	11 24       	eor	r1, r1
    4910:	89 50       	subi	r24, 0x09	; 9
    4912:	9b 4d       	sbci	r25, 0xDB	; 219
    4914:	84 8b       	std	Z+20, r24	; 0x14
    4916:	95 8b       	std	Z+21, r25	; 0x15
					udd_ep_out_cache_buffer[ep - 1]);
				udd_endpoint_out_set_nbbyte(ep_ctrl, ep_size);
    4918:	86 8a       	std	Z+22, r8	; 0x16
    491a:	97 8a       	std	Z+23, r9	; 0x17
    491c:	13 c0       	rjmp	.+38     	; 0x4944 <udd_ep_trans_complet+0x280>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_endpoint_set_buf(ep_ctrl, &ptr_job->buf[ptr_job->nb_trans]);
    491e:	f8 01       	movw	r30, r16
    4920:	41 81       	ldd	r20, Z+1	; 0x01
    4922:	52 81       	ldd	r21, Z+2	; 0x02
    4924:	85 81       	ldd	r24, Z+5	; 0x05
    4926:	96 81       	ldd	r25, Z+6	; 0x06
    4928:	84 0f       	add	r24, r20
    492a:	95 1f       	adc	r25, r21
    492c:	cc 0f       	add	r28, r28
    492e:	dd 1f       	adc	r29, r29
    4930:	cc 0f       	add	r28, r28
    4932:	dd 1f       	adc	r29, r29
    4934:	cc 0f       	add	r28, r28
    4936:	dd 1f       	adc	r29, r29
    4938:	c0 5e       	subi	r28, 0xE0	; 224
    493a:	d9 4d       	sbci	r29, 0xD9	; 217
    493c:	8c 8b       	std	Y+20, r24	; 0x14
    493e:	9d 8b       	std	Y+21, r25	; 0x15
				udd_endpoint_out_set_nbbyte(ep_ctrl, next_trans);
    4940:	2e 8b       	std	Y+22, r18	; 0x16
    4942:	3f 8b       	std	Y+23, r19	; 0x17
			}
			// Start transfer
			udd_endpoint_clear_NACK0(ep_ctrl);
    4944:	f7 01       	movw	r30, r14
    4946:	02 e0       	ldi	r16, 0x02	; 2
    4948:	06 93       	lac	Z, r16
			return;
    494a:	13 c0       	rjmp	.+38     	; 0x4972 <udd_ep_trans_complet+0x2ae>
		}
	}

	// Job complete then call callback
	if (ptr_job->busy) {
    494c:	d8 01       	movw	r26, r16
    494e:	8c 91       	ld	r24, X
    4950:	80 ff       	sbrs	r24, 0
    4952:	0f c0       	rjmp	.+30     	; 0x4972 <udd_ep_trans_complet+0x2ae>
		ptr_job->busy = false;
    4954:	8e 7f       	andi	r24, 0xFE	; 254
    4956:	8c 93       	st	X, r24
		if (NULL != ptr_job->call_trans) {
    4958:	17 96       	adiw	r26, 0x07	; 7
    495a:	ed 91       	ld	r30, X+
    495c:	fc 91       	ld	r31, X
    495e:	18 97       	sbiw	r26, 0x08	; 8
    4960:	30 97       	sbiw	r30, 0x00	; 0
    4962:	39 f0       	breq	.+14     	; 0x4972 <udd_ep_trans_complet+0x2ae>
			ptr_job->call_trans(UDD_EP_TRANSFER_OK,
    4964:	15 96       	adiw	r26, 0x05	; 5
    4966:	6d 91       	ld	r22, X+
    4968:	7c 91       	ld	r23, X
    496a:	16 97       	sbiw	r26, 0x06	; 6
    496c:	4d 2d       	mov	r20, r13
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	19 95       	eicall
				ptr_job->nb_trans,
				ep);
		}
	}
	return;
}
    4972:	df 91       	pop	r29
    4974:	cf 91       	pop	r28
    4976:	1f 91       	pop	r17
    4978:	0f 91       	pop	r16
    497a:	ff 90       	pop	r15
    497c:	ef 90       	pop	r14
    497e:	df 90       	pop	r13
    4980:	bf 90       	pop	r11
    4982:	af 90       	pop	r10
    4984:	9f 90       	pop	r9
    4986:	8f 90       	pop	r8
    4988:	08 95       	ret

0000498a <udd_disable>:
	cpu_irq_restore(flags);
}


void udd_disable(void)
{
    498a:	1f 93       	push	r17
    498c:	cf 93       	push	r28
    498e:	df 93       	push	r29
    4990:	1f 92       	push	r1
    4992:	1f 92       	push	r1
    4994:	cd b7       	in	r28, 0x3d	; 61
    4996:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4998:	8f b7       	in	r24, 0x3f	; 63
    499a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    499c:	f8 94       	cli
	return flags;
    499e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();
	udd_detach_device();
    49a0:	e1 ec       	ldi	r30, 0xC1	; 193
    49a2:	f4 e0       	ldi	r31, 0x04	; 4
    49a4:	80 81       	ld	r24, Z
    49a6:	8e 7f       	andi	r24, 0xFE	; 254
    49a8:	80 83       	st	Z, r24
	// Disable interface
	USB_CTRLA = 0;
    49aa:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
	USB_CTRLB = 0;
    49ae:	10 82       	st	Z, r1
	sysclk_disable_usb();
    49b0:	0e 94 21 2b 	call	0x5642	; 0x5642 <sysclk_disable_usb>
	udd_sleep_mode(false);
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	0e 94 b8 21 	call	0x4370	; 0x4370 <udd_sleep_mode>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    49ba:	80 91 86 26 	lds	r24, 0x2686	; 0x802686 <sleepmgr_locks+0x5>
    49be:	81 11       	cpse	r24, r1
    49c0:	01 c0       	rjmp	.+2      	; 0x49c4 <udd_disable+0x3a>
    49c2:	ff cf       	rjmp	.-2      	; 0x49c2 <udd_disable+0x38>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    49c4:	8f b7       	in	r24, 0x3f	; 63
    49c6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    49c8:	f8 94       	cli
	return flags;
    49ca:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    49cc:	e1 e8       	ldi	r30, 0x81	; 129
    49ce:	f6 e2       	ldi	r31, 0x26	; 38
    49d0:	85 81       	ldd	r24, Z+5	; 0x05
    49d2:	81 50       	subi	r24, 0x01	; 1
    49d4:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    49d6:	9f bf       	out	0x3f, r25	; 63
    49d8:	1f bf       	out	0x3f, r17	; 63
#ifndef UDD_NO_SLEEP_MGR
	sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif
	cpu_irq_restore(flags);
}
    49da:	0f 90       	pop	r0
    49dc:	0f 90       	pop	r0
    49de:	df 91       	pop	r29
    49e0:	cf 91       	pop	r28
    49e2:	1f 91       	pop	r17
    49e4:	08 95       	ret

000049e6 <udd_include_vbus_monitoring>:

bool udd_include_vbus_monitoring(void)
{
	return false; // No Vbus monitoring
}
    49e6:	80 e0       	ldi	r24, 0x00	; 0
    49e8:	08 95       	ret

000049ea <udd_attach>:

void udd_attach(void)
{
    49ea:	1f 93       	push	r17
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	1f 92       	push	r1
    49f2:	cd b7       	in	r28, 0x3d	; 61
    49f4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    49f6:	8f b7       	in	r24, 0x3f	; 63
    49f8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    49fa:	f8 94       	cli
	return flags;
    49fc:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	0e 94 b8 21 	call	0x4370	; 0x4370 <udd_sleep_mode>

	udd_ack_suspend_event();
    4a04:	ea ec       	ldi	r30, 0xCA	; 202
    4a06:	f4 e0       	ldi	r31, 0x04	; 4
    4a08:	80 e4       	ldi	r24, 0x40	; 64
    4a0a:	80 83       	st	Z, r24
	udd_ack_resume_event();
    4a0c:	80 e2       	ldi	r24, 0x20	; 32
    4a0e:	80 83       	st	Z, r24
	udd_attach_device();
    4a10:	e1 ec       	ldi	r30, 0xC1	; 193
    4a12:	f4 e0       	ldi	r31, 0x04	; 4
    4a14:	80 81       	ld	r24, Z
    4a16:	81 60       	ori	r24, 0x01	; 1
    4a18:	80 83       	st	Z, r24
	// Enable main USB interrupts
	udd_enable_tc_interrupt();
    4a1a:	a9 ec       	ldi	r26, 0xC9	; 201
    4a1c:	b4 e0       	ldi	r27, 0x04	; 4
    4a1e:	8c 91       	ld	r24, X
    4a20:	82 60       	ori	r24, 0x02	; 2
    4a22:	8c 93       	st	X, r24
	udd_enable_busevt_interrupt();
    4a24:	e8 ec       	ldi	r30, 0xC8	; 200
    4a26:	f4 e0       	ldi	r31, 0x04	; 4
    4a28:	80 81       	ld	r24, Z
    4a2a:	80 64       	ori	r24, 0x40	; 64
    4a2c:	80 83       	st	Z, r24
	udd_enable_setup_interrupt();
    4a2e:	8c 91       	ld	r24, X
    4a30:	81 60       	ori	r24, 0x01	; 1
    4a32:	8c 93       	st	X, r24
	udd_enable_start_of_frame_interrupt();
    4a34:	80 81       	ld	r24, Z
    4a36:	80 68       	ori	r24, 0x80	; 128
    4a38:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4a3a:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
}
    4a3c:	0f 90       	pop	r0
    4a3e:	df 91       	pop	r29
    4a40:	cf 91       	pop	r28
    4a42:	1f 91       	pop	r17
    4a44:	08 95       	ret

00004a46 <udd_enable>:
#endif // (0!=USB_DEVICE_MAX_EP)
//@}


void udd_enable(void)
{
    4a46:	0f 93       	push	r16
    4a48:	1f 93       	push	r17
    4a4a:	cf 93       	push	r28
    4a4c:	df 93       	push	r29
    4a4e:	1f 92       	push	r1
    4a50:	1f 92       	push	r1
    4a52:	cd b7       	in	r28, 0x3d	; 61
    4a54:	de b7       	in	r29, 0x3e	; 62
# if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// RC oscillator calibration via USB Start Of Frame is not available
	// in low speed mode.
	// Thus, the calibration is disabled
	// when USB interface start in low speed mode
	DFLLRC32M.CTRL = 0;
    4a56:	00 e6       	ldi	r16, 0x60	; 96
    4a58:	10 e0       	ldi	r17, 0x00	; 0
    4a5a:	f8 01       	movw	r30, r16
    4a5c:	10 82       	st	Z, r1
	// The USB hardware need of 6MHz in low speed mode
	sysclk_enable_usb(6);
	udd_set_low_speed();
#else
	// The USB hardware need of 48MHz in full speed mode
	sysclk_enable_usb(48);
    4a5e:	80 e3       	ldi	r24, 0x30	; 48
    4a60:	0e 94 da 2a 	call	0x55b4	; 0x55b4 <sysclk_enable_usb>
	udd_set_full_speed();
    4a64:	e0 ec       	ldi	r30, 0xC0	; 192
    4a66:	f4 e0       	ldi	r31, 0x04	; 4
    4a68:	80 81       	ld	r24, Z
    4a6a:	80 64       	ori	r24, 0x40	; 64
    4a6c:	80 83       	st	Z, r24
// The XMEGA_A1U does not support the RC calibration through Keepalive (Low speed).
#if (!defined USB_DEVICE_LOW_SPEED) || (!XMEGA_A1U)
# ifdef CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC
#   if CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC == OSC_ID_USBSOF
	// The SOF calibration can be enabled
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	f8 01       	movw	r30, r16
    4a72:	80 83       	st	Z, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4a74:	8f b7       	in	r24, 0x3f	; 63
    4a76:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    4a78:	f8 94       	cli
	return flags;
    4a7a:	1a 81       	ldd	r17, Y+2	; 0x02

	flags = cpu_irq_save();

	// Reset endpoints table
	for (i = 0; i < ((USB_DEVICE_MAX_EP + 1) * 2); i++) {
		udd_sram.ep_ctrl[i].CTRL = 0;
    4a7c:	e0 e2       	ldi	r30, 0x20	; 32
    4a7e:	f6 e2       	ldi	r31, 0x26	; 38
    4a80:	11 8a       	std	Z+17, r1	; 0x11
    4a82:	11 8e       	std	Z+25, r1	; 0x19
    4a84:	11 a2       	std	Z+33, r1	; 0x21
    4a86:	11 a6       	std	Z+41, r1	; 0x29
    4a88:	11 aa       	std	Z+49, r1	; 0x31
    4a8a:	11 ae       	std	Z+57, r1	; 0x39
	}
#if (0!=USB_DEVICE_MAX_EP)
	// Reset internal variables
	for (i = 0; i < (USB_DEVICE_MAX_EP * 2); i++) {
		udd_ep_job[i].busy = false;
    4a8c:	e7 eb       	ldi	r30, 0xB7	; 183
    4a8e:	f5 e2       	ldi	r31, 0x25	; 37
    4a90:	80 81       	ld	r24, Z
    4a92:	8e 7f       	andi	r24, 0xFE	; 254
    4a94:	80 83       	st	Z, r24
    4a96:	e0 ec       	ldi	r30, 0xC0	; 192
    4a98:	f5 e2       	ldi	r31, 0x25	; 37
    4a9a:	80 81       	ld	r24, Z
    4a9c:	8e 7f       	andi	r24, 0xFE	; 254
    4a9e:	80 83       	st	Z, r24
    4aa0:	e9 ec       	ldi	r30, 0xC9	; 201
    4aa2:	f5 e2       	ldi	r31, 0x25	; 37
    4aa4:	80 81       	ld	r24, Z
    4aa6:	8e 7f       	andi	r24, 0xFE	; 254
    4aa8:	80 83       	st	Z, r24
    4aaa:	e2 ed       	ldi	r30, 0xD2	; 210
    4aac:	f5 e2       	ldi	r31, 0x25	; 37
    4aae:	80 81       	ld	r24, Z
    4ab0:	8e 7f       	andi	r24, 0xFE	; 254
    4ab2:	80 83       	st	Z, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4ab4:	6a e1       	ldi	r22, 0x1A	; 26
    4ab6:	70 e0       	ldi	r23, 0x00	; 0
    4ab8:	82 e0       	ldi	r24, 0x02	; 2
    4aba:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
#ifdef USB_PAD_USER_CAL0
	USB_CAL0 = USB_PAD_USER_CAL0;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL0));
	if (cal != 0xFF) {
    4abe:	8f 3f       	cpi	r24, 0xFF	; 255
    4ac0:	19 f0       	breq	.+6      	; 0x4ac8 <udd_enable+0x82>
		USB_CAL0 = cal;
    4ac2:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4ac6:	03 c0       	rjmp	.+6      	; 0x4ace <udd_enable+0x88>
	} else {
		USB_CAL0 = 0x1F;
    4ac8:	8f e1       	ldi	r24, 0x1F	; 31
    4aca:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    4ace:	6b e1       	ldi	r22, 0x1B	; 27
    4ad0:	70 e0       	ldi	r23, 0x00	; 0
    4ad2:	82 e0       	ldi	r24, 0x02	; 2
    4ad4:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
#ifdef USB_PAD_USER_CAL1
	USB_CAL1 = USB_PAD_USER_CAL1;
#else
	cal = nvm_read_production_signature_row
			(nvm_get_production_signature_row_offset(USBCAL1));
	if (cal != 0xFF) {
    4ad8:	8f 3f       	cpi	r24, 0xFF	; 255
    4ada:	19 f0       	breq	.+6      	; 0x4ae2 <udd_enable+0x9c>
		USB_CAL1 = cal;
    4adc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    4ae0:	03 c0       	rjmp	.+6      	; 0x4ae8 <udd_enable+0xa2>
	} else {
		USB_CAL1 = 0x1F;
    4ae2:	8f e1       	ldi	r24, 0x1F	; 31
    4ae4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
	}
#endif

	//** Enable USB hardware
	usb_pad_init();
	udd_set_nb_max_ep(USB_DEVICE_MAX_EP);
    4ae8:	e0 ec       	ldi	r30, 0xC0	; 192
    4aea:	f4 e0       	ldi	r31, 0x04	; 4
    4aec:	80 81       	ld	r24, Z
    4aee:	82 60       	ori	r24, 0x02	; 2
    4af0:	80 83       	st	Z, r24
	udd_enable_interface();
    4af2:	80 81       	ld	r24, Z
    4af4:	80 68       	ori	r24, 0x80	; 128
    4af6:	80 83       	st	Z, r24
	udd_enable_store_frame_number();
    4af8:	80 81       	ld	r24, Z
    4afa:	80 61       	ori	r24, 0x10	; 16
    4afc:	80 83       	st	Z, r24
#if XMEGA_A1U
	Assert(((uint16_t)(&udd_sram) & 0x0F) == 0); /* check align on 16bit */
#else
	Assert(((uint16_t)(&udd_sram) & 0x01) == 0); /* check align on WORD */
#endif
	udd_set_ep_table_addr(udd_sram.ep_ctrl);
    4afe:	80 e3       	ldi	r24, 0x30	; 48
    4b00:	96 e2       	ldi	r25, 0x26	; 38
    4b02:	86 83       	std	Z+6, r24	; 0x06
    4b04:	97 83       	std	Z+7, r25	; 0x07
	// Enable TC fifo management
	udd_enable_fifo();
    4b06:	80 81       	ld	r24, Z
    4b08:	80 62       	ori	r24, 0x20	; 32
    4b0a:	80 83       	st	Z, r24
	udd_reset_fifo();
    4b0c:	8f ef       	ldi	r24, 0xFF	; 255
    4b0e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	// Enable Interrupt USB Device
	udd_enable_interrupt(UDD_USB_INT_LEVEL);
    4b12:	e8 ec       	ldi	r30, 0xC8	; 200
    4b14:	f4 e0       	ldi	r31, 0x04	; 4
    4b16:	80 81       	ld	r24, Z
    4b18:	81 60       	ori	r24, 0x01	; 1
    4b1a:	80 83       	st	Z, r24

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
    4b1c:	10 92 70 26 	sts	0x2670, r1	; 0x802670 <udd_b_idle>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    4b20:	80 91 86 26 	lds	r24, 0x2686	; 0x802686 <sleepmgr_locks+0x5>
    4b24:	8f 3f       	cpi	r24, 0xFF	; 255
    4b26:	09 f4       	brne	.+2      	; 0x4b2a <udd_enable+0xe4>
    4b28:	ff cf       	rjmp	.-2      	; 0x4b28 <udd_enable+0xe2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4b2a:	8f b7       	in	r24, 0x3f	; 63
    4b2c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4b2e:	f8 94       	cli
	return flags;
    4b30:	99 81       	ldd	r25, Y+1	; 0x01
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4b32:	e1 e8       	ldi	r30, 0x81	; 129
    4b34:	f6 e2       	ldi	r31, 0x26	; 38
    4b36:	85 81       	ldd	r24, Z+5	; 0x05
    4b38:	8f 5f       	subi	r24, 0xFF	; 255
    4b3a:	85 83       	std	Z+5, r24	; 0x05
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4b3c:	9f bf       	out	0x3f, r25	; 63
	sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_SUSPEND);
#endif

#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    4b3e:	0e 94 f5 24 	call	0x49ea	; 0x49ea <udd_attach>
    4b42:	1f bf       	out	0x3f, r17	; 63
#endif
	cpu_irq_restore(flags);
}
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	df 91       	pop	r29
    4b4a:	cf 91       	pop	r28
    4b4c:	1f 91       	pop	r17
    4b4e:	0f 91       	pop	r16
    4b50:	08 95       	ret

00004b52 <udd_detach>:
}

void udd_detach(void)
{
	// Detach device from the bus
	udd_detach_device();
    4b52:	e1 ec       	ldi	r30, 0xC1	; 193
    4b54:	f4 e0       	ldi	r31, 0x04	; 4
    4b56:	80 81       	ld	r24, Z
    4b58:	8e 7f       	andi	r24, 0xFE	; 254
    4b5a:	80 83       	st	Z, r24
    4b5c:	08 95       	ret

00004b5e <udd_is_high_speed>:
}

bool udd_is_high_speed(void)
{
	return false;
}
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	08 95       	ret

00004b62 <udd_set_address>:

void udd_set_address(uint8_t address)
{
	udd_set_device_address(address);
    4b62:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    4b66:	08 95       	ret

00004b68 <udd_getaddress>:
}

uint8_t udd_getaddress(void)
{
	return udd_get_device_address();
    4b68:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
}
    4b6c:	08 95       	ret

00004b6e <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
	return udd_sram.frame_number;
    4b6e:	80 91 60 26 	lds	r24, 0x2660	; 0x802660 <udd_sram+0x40>
    4b72:	90 91 61 26 	lds	r25, 0x2661	; 0x802661 <udd_sram+0x41>
}
    4b76:	08 95       	ret

00004b78 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	08 95       	ret

00004b7e <udd_send_remotewakeup>:

void udd_send_remotewakeup(void)
{
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
    4b7e:	80 91 70 26 	lds	r24, 0x2670	; 0x802670 <udd_b_idle>
    4b82:	81 11       	cpse	r24, r1
    4b84:	0b c0       	rjmp	.+22     	; 0x4b9c <udd_send_remotewakeup+0x1e>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	0e 94 b8 21 	call	0x4370	; 0x4370 <udd_sleep_mode>
		udd_send_remote_wake_up();
    4b8c:	e1 ec       	ldi	r30, 0xC1	; 193
    4b8e:	f4 e0       	ldi	r31, 0x04	; 4
    4b90:	80 81       	ld	r24, Z
    4b92:	8b 7f       	andi	r24, 0xFB	; 251
    4b94:	80 83       	st	Z, r24
    4b96:	80 81       	ld	r24, Z
    4b98:	84 60       	ori	r24, 0x04	; 4
    4b9a:	80 83       	st	Z, r24
    4b9c:	08 95       	ret

00004b9e <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    4b9e:	e1 e7       	ldi	r30, 0x71	; 113
    4ba0:	f6 e2       	ldi	r31, 0x26	; 38
    4ba2:	80 87       	std	Z+8, r24	; 0x08
    4ba4:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    4ba6:	62 87       	std	Z+10, r22	; 0x0a
    4ba8:	73 87       	std	Z+11, r23	; 0x0b
    4baa:	08 95       	ret

00004bac <udd_ep_alloc>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4bac:	28 2f       	mov	r18, r24
    4bae:	2f 70       	andi	r18, 0x0F	; 15
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    4bb2:	22 0f       	add	r18, r18
    4bb4:	33 1f       	adc	r19, r19
    4bb6:	08 2e       	mov	r0, r24
    4bb8:	00 0c       	add	r0, r0
    4bba:	99 0b       	sbc	r25, r25
    4bbc:	88 27       	eor	r24, r24
    4bbe:	99 0f       	add	r25, r25
    4bc0:	88 1f       	adc	r24, r24
    4bc2:	99 27       	eor	r25, r25
    4bc4:	82 0f       	add	r24, r18
    4bc6:	93 1f       	adc	r25, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
    4bc8:	fc 01       	movw	r30, r24
    4bca:	ee 0f       	add	r30, r30
    4bcc:	ff 1f       	adc	r31, r31
    4bce:	ee 0f       	add	r30, r30
    4bd0:	ff 1f       	adc	r31, r31
    4bd2:	ee 0f       	add	r30, r30
    4bd4:	ff 1f       	adc	r31, r31
    4bd6:	e0 5e       	subi	r30, 0xE0	; 224
    4bd8:	f9 4d       	sbci	r31, 0xD9	; 217
    4bda:	21 89       	ldd	r18, Z+17	; 0x11
    4bdc:	20 7c       	andi	r18, 0xC0	; 192
    4bde:	09 f0       	breq	.+2      	; 0x4be2 <udd_ep_alloc+0x36>
    4be0:	72 c0       	rjmp	.+228    	; 0x4cc6 <udd_ep_alloc+0x11a>
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
    4be2:	63 70       	andi	r22, 0x03	; 3
    4be4:	61 30       	cpi	r22, 0x01	; 1
    4be6:	11 f0       	breq	.+4      	; 0x4bec <udd_ep_alloc+0x40>
    4be8:	18 f4       	brcc	.+6      	; 0x4bf0 <udd_ep_alloc+0x44>
    4bea:	04 c0       	rjmp	.+8      	; 0x4bf4 <udd_ep_alloc+0x48>
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
    4bec:	60 ec       	ldi	r22, 0xC0	; 192
    4bee:	03 c0       	rjmp	.+6      	; 0x4bf6 <udd_ep_alloc+0x4a>
		break;
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
    4bf0:	60 e8       	ldi	r22, 0x80	; 128
    4bf2:	01 c0       	rjmp	.+2      	; 0x4bf6 <udd_ep_alloc+0x4a>

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
    4bf4:	60 e4       	ldi	r22, 0x40	; 64
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    4bf6:	40 38       	cpi	r20, 0x80	; 128
    4bf8:	51 05       	cpc	r21, r1
    4bfa:	e9 f0       	breq	.+58     	; 0x4c36 <udd_ep_alloc+0x8a>
    4bfc:	50 f4       	brcc	.+20     	; 0x4c12 <udd_ep_alloc+0x66>
    4bfe:	40 32       	cpi	r20, 0x20	; 32
    4c00:	51 05       	cpc	r21, r1
    4c02:	a9 f0       	breq	.+42     	; 0x4c2e <udd_ep_alloc+0x82>
    4c04:	40 34       	cpi	r20, 0x40	; 64
    4c06:	51 05       	cpc	r21, r1
    4c08:	a1 f0       	breq	.+40     	; 0x4c32 <udd_ep_alloc+0x86>
    4c0a:	40 31       	cpi	r20, 0x10	; 16
    4c0c:	51 05       	cpc	r21, r1
    4c0e:	d9 f4       	brne	.+54     	; 0x4c46 <udd_ep_alloc+0x9a>
    4c10:	0c c0       	rjmp	.+24     	; 0x4c2a <udd_ep_alloc+0x7e>
    4c12:	41 15       	cp	r20, r1
    4c14:	22 e0       	ldi	r18, 0x02	; 2
    4c16:	52 07       	cpc	r21, r18
    4c18:	91 f0       	breq	.+36     	; 0x4c3e <udd_ep_alloc+0x92>
    4c1a:	4f 3f       	cpi	r20, 0xFF	; 255
    4c1c:	23 e0       	ldi	r18, 0x03	; 3
    4c1e:	52 07       	cpc	r21, r18
    4c20:	81 f0       	breq	.+32     	; 0x4c42 <udd_ep_alloc+0x96>
    4c22:	41 15       	cp	r20, r1
    4c24:	51 40       	sbci	r21, 0x01	; 1
    4c26:	79 f4       	brne	.+30     	; 0x4c46 <udd_ep_alloc+0x9a>
    4c28:	08 c0       	rjmp	.+16     	; 0x4c3a <udd_ep_alloc+0x8e>
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
    4c2a:	21 e0       	ldi	r18, 0x01	; 1
    4c2c:	0d c0       	rjmp	.+26     	; 0x4c48 <udd_ep_alloc+0x9c>
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    4c2e:	22 e0       	ldi	r18, 0x02	; 2
    4c30:	0b c0       	rjmp	.+22     	; 0x4c48 <udd_ep_alloc+0x9c>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    4c32:	23 e0       	ldi	r18, 0x03	; 3
    4c34:	09 c0       	rjmp	.+18     	; 0x4c48 <udd_ep_alloc+0x9c>
		break;
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
    4c36:	24 e0       	ldi	r18, 0x04	; 4
    4c38:	07 c0       	rjmp	.+14     	; 0x4c48 <udd_ep_alloc+0x9c>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    4c3a:	25 e0       	ldi	r18, 0x05	; 5
    4c3c:	05 c0       	rjmp	.+10     	; 0x4c48 <udd_ep_alloc+0x9c>
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    4c3e:	26 e0       	ldi	r18, 0x06	; 6
    4c40:	03 c0       	rjmp	.+6      	; 0x4c48 <udd_ep_alloc+0x9c>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    4c42:	27 e0       	ldi	r18, 0x07	; 7
    4c44:	01 c0       	rjmp	.+2      	; 0x4c48 <udd_ep_alloc+0x9c>
	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
    4c46:	20 e0       	ldi	r18, 0x00	; 0
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4c48:	fc 01       	movw	r30, r24
    4c4a:	ee 0f       	add	r30, r30
    4c4c:	ff 1f       	adc	r31, r31
    4c4e:	ee 0f       	add	r30, r30
    4c50:	ff 1f       	adc	r31, r31
    4c52:	ee 0f       	add	r30, r30
    4c54:	ff 1f       	adc	r31, r31
    4c56:	e0 5e       	subi	r30, 0xE0	; 224
    4c58:	f9 4d       	sbci	r31, 0xD9	; 217
    4c5a:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	aa 0f       	add	r26, r26
    4c60:	bb 1f       	adc	r27, r27
    4c62:	aa 0f       	add	r26, r26
    4c64:	bb 1f       	adc	r27, r27
    4c66:	aa 0f       	add	r26, r26
    4c68:	bb 1f       	adc	r27, r27
    4c6a:	a0 5d       	subi	r26, 0xD0	; 208
    4c6c:	b9 4d       	sbci	r27, 0xD9	; 217
    4c6e:	36 e0       	ldi	r19, 0x06	; 6
    4c70:	3c 93       	st	X, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    4c72:	26 2b       	or	r18, r22
    4c74:	21 8b       	std	Z+17, r18	; 0x11
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
    4c76:	fc 01       	movw	r30, r24
    4c78:	ee 0f       	add	r30, r30
    4c7a:	ff 1f       	adc	r31, r31
    4c7c:	ee 0f       	add	r30, r30
    4c7e:	ff 1f       	adc	r31, r31
    4c80:	ee 0f       	add	r30, r30
    4c82:	ff 1f       	adc	r31, r31
    4c84:	e0 5e       	subi	r30, 0xE0	; 224
    4c86:	f9 4d       	sbci	r31, 0xD9	; 217
    4c88:	21 89       	ldd	r18, Z+17	; 0x11
    4c8a:	20 7c       	andi	r18, 0xC0	; 192
    4c8c:	20 3c       	cpi	r18, 0xC0	; 192
    4c8e:	69 f4       	brne	.+26     	; 0x4caa <udd_ep_alloc+0xfe>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    4c90:	fc 01       	movw	r30, r24
    4c92:	ee 0f       	add	r30, r30
    4c94:	ff 1f       	adc	r31, r31
    4c96:	ee 0f       	add	r30, r30
    4c98:	ff 1f       	adc	r31, r31
    4c9a:	ee 0f       	add	r30, r30
    4c9c:	ff 1f       	adc	r31, r31
    4c9e:	e0 5e       	subi	r30, 0xE0	; 224
    4ca0:	f9 4d       	sbci	r31, 0xD9	; 217
    4ca2:	21 89       	ldd	r18, Z+17	; 0x11
    4ca4:	27 70       	andi	r18, 0x07	; 7
    4ca6:	27 30       	cpi	r18, 0x07	; 7
    4ca8:	81 f0       	breq	.+32     	; 0x4cca <udd_ep_alloc+0x11e>
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
    4caa:	88 0f       	add	r24, r24
    4cac:	99 1f       	adc	r25, r25
    4cae:	88 0f       	add	r24, r24
    4cb0:	99 1f       	adc	r25, r25
    4cb2:	88 0f       	add	r24, r24
    4cb4:	99 1f       	adc	r25, r25
    4cb6:	fc 01       	movw	r30, r24
    4cb8:	e0 5e       	subi	r30, 0xE0	; 224
    4cba:	f9 4d       	sbci	r31, 0xD9	; 217
    4cbc:	81 89       	ldd	r24, Z+17	; 0x11
    4cbe:	80 62       	ori	r24, 0x20	; 32
    4cc0:	81 8b       	std	Z+17, r24	; 0x11
	return true;
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	08 95       	ret
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
    4cc6:	80 e0       	ldi	r24, 0x00	; 0
    4cc8:	08 95       	ret

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
    4cca:	81 e0       	ldi	r24, 0x01	; 1
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
    4ccc:	08 95       	ret

00004cce <udd_ep_is_halted>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4cce:	e8 2f       	mov	r30, r24
    4cd0:	ef 70       	andi	r30, 0x0F	; 15
    4cd2:	f0 e0       	ldi	r31, 0x00	; 0
    4cd4:	ee 0f       	add	r30, r30
    4cd6:	ff 1f       	adc	r31, r31
    4cd8:	08 2e       	mov	r0, r24
    4cda:	00 0c       	add	r0, r0
    4cdc:	99 0b       	sbc	r25, r25
    4cde:	88 27       	eor	r24, r24
    4ce0:	99 0f       	add	r25, r25
    4ce2:	88 1f       	adc	r24, r24
    4ce4:	99 27       	eor	r25, r25
    4ce6:	e8 0f       	add	r30, r24
    4ce8:	f9 1f       	adc	r31, r25
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
    4cea:	ee 0f       	add	r30, r30
    4cec:	ff 1f       	adc	r31, r31
    4cee:	ee 0f       	add	r30, r30
    4cf0:	ff 1f       	adc	r31, r31
    4cf2:	ee 0f       	add	r30, r30
    4cf4:	ff 1f       	adc	r31, r31
    4cf6:	e0 5e       	subi	r30, 0xE0	; 224
    4cf8:	f9 4d       	sbci	r31, 0xD9	; 217
    4cfa:	81 89       	ldd	r24, Z+17	; 0x11
}
    4cfc:	82 fb       	bst	r24, 2
    4cfe:	88 27       	eor	r24, r24
    4d00:	80 f9       	bld	r24, 0
    4d02:	08 95       	ret

00004d04 <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    4d04:	0f 93       	push	r16
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4d06:	28 2f       	mov	r18, r24
    4d08:	2f 70       	andi	r18, 0x0F	; 15
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	a9 01       	movw	r20, r18
    4d0e:	44 0f       	add	r20, r20
    4d10:	55 1f       	adc	r21, r21
    4d12:	28 2f       	mov	r18, r24
    4d14:	08 2e       	mov	r0, r24
    4d16:	00 0c       	add	r0, r0
    4d18:	33 0b       	sbc	r19, r19
    4d1a:	22 27       	eor	r18, r18
    4d1c:	33 0f       	add	r19, r19
    4d1e:	22 1f       	adc	r18, r18
    4d20:	33 27       	eor	r19, r19
    4d22:	24 0f       	add	r18, r20
    4d24:	35 1f       	adc	r19, r21
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_clear_dtgl(ep_ctrl);
    4d26:	f9 01       	movw	r30, r18
    4d28:	ee 0f       	add	r30, r30
    4d2a:	ff 1f       	adc	r31, r31
    4d2c:	ee 0f       	add	r30, r30
    4d2e:	ff 1f       	adc	r31, r31
    4d30:	ee 0f       	add	r30, r30
    4d32:	ff 1f       	adc	r31, r31
    4d34:	e0 5d       	subi	r30, 0xD0	; 208
    4d36:	f9 4d       	sbci	r31, 0xD9	; 217
    4d38:	01 e0       	ldi	r16, 0x01	; 1
    4d3a:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    4d3c:	f9 01       	movw	r30, r18
    4d3e:	ee 0f       	add	r30, r30
    4d40:	ff 1f       	adc	r31, r31
    4d42:	ee 0f       	add	r30, r30
    4d44:	ff 1f       	adc	r31, r31
    4d46:	ee 0f       	add	r30, r30
    4d48:	ff 1f       	adc	r31, r31
    4d4a:	e0 5e       	subi	r30, 0xE0	; 224
    4d4c:	f9 4d       	sbci	r31, 0xD9	; 217
    4d4e:	91 89       	ldd	r25, Z+17	; 0x11
    4d50:	92 ff       	sbrs	r25, 2
    4d52:	18 c0       	rjmp	.+48     	; 0x4d84 <udd_ep_clear_halt+0x80>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    4d54:	22 0f       	add	r18, r18
    4d56:	33 1f       	adc	r19, r19
    4d58:	22 0f       	add	r18, r18
    4d5a:	33 1f       	adc	r19, r19
    4d5c:	22 0f       	add	r18, r18
    4d5e:	33 1f       	adc	r19, r19
    4d60:	f9 01       	movw	r30, r18
    4d62:	e0 5e       	subi	r30, 0xE0	; 224
    4d64:	f9 4d       	sbci	r31, 0xD9	; 217
    4d66:	91 89       	ldd	r25, Z+17	; 0x11
    4d68:	9b 7f       	andi	r25, 0xFB	; 251
    4d6a:	91 8b       	std	Z+17, r25	; 0x11

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
    4d6c:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <udd_ep_get_job>
    4d70:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    4d72:	80 81       	ld	r24, Z
    4d74:	80 ff       	sbrs	r24, 0
    4d76:	06 c0       	rjmp	.+12     	; 0x4d84 <udd_ep_clear_halt+0x80>
		ptr_job->busy = false;
    4d78:	8e 7f       	andi	r24, 0xFE	; 254
    4d7a:	80 83       	st	Z, r24
		ptr_job->call_nohalt();
    4d7c:	07 80       	ldd	r0, Z+7	; 0x07
    4d7e:	f0 85       	ldd	r31, Z+8	; 0x08
    4d80:	e0 2d       	mov	r30, r0
    4d82:	19 95       	eicall
	}
	return true;
}
    4d84:	81 e0       	ldi	r24, 0x01	; 1
    4d86:	0f 91       	pop	r16
    4d88:	08 95       	ret

00004d8a <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
    4d8a:	6f 92       	push	r6
    4d8c:	7f 92       	push	r7
    4d8e:	8f 92       	push	r8
    4d90:	9f 92       	push	r9
    4d92:	af 92       	push	r10
    4d94:	bf 92       	push	r11
    4d96:	cf 92       	push	r12
    4d98:	df 92       	push	r13
    4d9a:	ef 92       	push	r14
    4d9c:	ff 92       	push	r15
    4d9e:	0f 93       	push	r16
    4da0:	1f 93       	push	r17
    4da2:	cf 93       	push	r28
    4da4:	df 93       	push	r29
    4da6:	1f 92       	push	r1
    4da8:	cd b7       	in	r28, 0x3d	; 61
    4daa:	de b7       	in	r29, 0x3e	; 62
    4dac:	78 2e       	mov	r7, r24
    4dae:	66 2e       	mov	r6, r22
    4db0:	4a 01       	movw	r8, r20
    4db2:	59 01       	movw	r10, r18
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
    4db4:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <udd_ep_get_job>
    4db8:	6c 01       	movw	r12, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    4dba:	27 2d       	mov	r18, r7
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4dbc:	87 2d       	mov	r24, r7
    4dbe:	8f 70       	andi	r24, 0x0F	; 15
    4dc0:	e8 2e       	mov	r14, r24
    4dc2:	f1 2c       	mov	r15, r1
    4dc4:	c7 01       	movw	r24, r14
    4dc6:	88 0f       	add	r24, r24
    4dc8:	99 1f       	adc	r25, r25
    4dca:	e7 2c       	mov	r14, r7
    4dcc:	07 2c       	mov	r0, r7
    4dce:	00 0c       	add	r0, r0
    4dd0:	ff 08       	sbc	r15, r15
    4dd2:	ee 24       	eor	r14, r14
    4dd4:	ff 0c       	add	r15, r15
    4dd6:	ee 1c       	adc	r14, r14
    4dd8:	ff 24       	eor	r15, r15
    4dda:	e8 0e       	add	r14, r24
    4ddc:	f9 1e       	adc	r15, r25

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
    4dde:	f7 01       	movw	r30, r14
    4de0:	ee 0f       	add	r30, r30
    4de2:	ff 1f       	adc	r31, r31
    4de4:	ee 0f       	add	r30, r30
    4de6:	ff 1f       	adc	r31, r31
    4de8:	ee 0f       	add	r30, r30
    4dea:	ff 1f       	adc	r31, r31
    4dec:	e0 5e       	subi	r30, 0xE0	; 224
    4dee:	f9 4d       	sbci	r31, 0xD9	; 217
    4df0:	81 89       	ldd	r24, Z+17	; 0x11
    4df2:	80 7c       	andi	r24, 0xC0	; 192
    4df4:	09 f4       	brne	.+2      	; 0x4df8 <udd_ep_run+0x6e>
    4df6:	84 c0       	rjmp	.+264    	; 0x4f00 <udd_ep_run+0x176>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    4df8:	f7 01       	movw	r30, r14
    4dfa:	ee 0f       	add	r30, r30
    4dfc:	ff 1f       	adc	r31, r31
    4dfe:	ee 0f       	add	r30, r30
    4e00:	ff 1f       	adc	r31, r31
    4e02:	ee 0f       	add	r30, r30
    4e04:	ff 1f       	adc	r31, r31
    4e06:	e0 5e       	subi	r30, 0xE0	; 224
    4e08:	f9 4d       	sbci	r31, 0xD9	; 217
    4e0a:	81 89       	ldd	r24, Z+17	; 0x11
    4e0c:	80 7c       	andi	r24, 0xC0	; 192
    4e0e:	80 3c       	cpi	r24, 0xC0	; 192
    4e10:	61 f0       	breq	.+24     	; 0x4e2a <udd_ep_run+0xa0>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    4e12:	f7 01       	movw	r30, r14
    4e14:	ee 0f       	add	r30, r30
    4e16:	ff 1f       	adc	r31, r31
    4e18:	ee 0f       	add	r30, r30
    4e1a:	ff 1f       	adc	r31, r31
    4e1c:	ee 0f       	add	r30, r30
    4e1e:	ff 1f       	adc	r31, r31
    4e20:	e0 5e       	subi	r30, 0xE0	; 224
    4e22:	f9 4d       	sbci	r31, 0xD9	; 217
    4e24:	81 89       	ldd	r24, Z+17	; 0x11
    4e26:	82 fd       	sbrc	r24, 2
    4e28:	6d c0       	rjmp	.+218    	; 0x4f04 <udd_ep_run+0x17a>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    4e2a:	8f b7       	in	r24, 0x3f	; 63
    4e2c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    4e2e:	f8 94       	cli
	return flags;
    4e30:	89 81       	ldd	r24, Y+1	; 0x01
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    4e32:	f6 01       	movw	r30, r12
    4e34:	90 81       	ld	r25, Z
    4e36:	90 ff       	sbrs	r25, 0
    4e38:	03 c0       	rjmp	.+6      	; 0x4e40 <udd_ep_run+0xb6>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4e3a:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		return false; // Job already on going
    4e3c:	80 e0       	ldi	r24, 0x00	; 0
    4e3e:	63 c0       	rjmp	.+198    	; 0x4f06 <udd_ep_run+0x17c>
	}
	ptr_job->busy = true;
    4e40:	f6 01       	movw	r30, r12
    4e42:	90 81       	ld	r25, Z
    4e44:	91 60       	ori	r25, 0x01	; 1
    4e46:	90 83       	st	Z, r25
    4e48:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
    4e4a:	81 82       	std	Z+1, r8	; 0x01
    4e4c:	92 82       	std	Z+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    4e4e:	a3 82       	std	Z+3, r10	; 0x03
    4e50:	b4 82       	std	Z+4, r11	; 0x04
	ptr_job->nb_trans = 0;
    4e52:	15 82       	std	Z+5, r1	; 0x05
    4e54:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->call_trans = callback;
    4e56:	07 83       	std	Z+7, r16	; 0x07
    4e58:	10 87       	std	Z+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    4e5a:	61 10       	cpse	r6, r1
    4e5c:	06 c0       	rjmp	.+12     	; 0x4e6a <udd_ep_run+0xe0>
    4e5e:	91 e0       	ldi	r25, 0x01	; 1
    4e60:	a1 14       	cp	r10, r1
    4e62:	b1 04       	cpc	r11, r1
    4e64:	19 f0       	breq	.+6      	; 0x4e6c <udd_ep_run+0xe2>
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	01 c0       	rjmp	.+2      	; 0x4e6c <udd_ep_run+0xe2>
    4e6a:	91 e0       	ldi	r25, 0x01	; 1
    4e6c:	f6 01       	movw	r30, r12
    4e6e:	80 81       	ld	r24, Z
    4e70:	90 fb       	bst	r25, 0
    4e72:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    4e74:	8b 7f       	andi	r24, 0xFB	; 251
    4e76:	80 83       	st	Z, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    4e78:	22 23       	and	r18, r18
    4e7a:	64 f4       	brge	.+24     	; 0x4e94 <udd_ep_run+0x10a>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    4e7c:	f7 01       	movw	r30, r14
    4e7e:	ee 0f       	add	r30, r30
    4e80:	ff 1f       	adc	r31, r31
    4e82:	ee 0f       	add	r30, r30
    4e84:	ff 1f       	adc	r31, r31
    4e86:	ee 0f       	add	r30, r30
    4e88:	ff 1f       	adc	r31, r31
    4e8a:	e0 5e       	subi	r30, 0xE0	; 224
    4e8c:	f9 4d       	sbci	r31, 0xD9	; 217
    4e8e:	16 8a       	std	Z+22, r1	; 0x16
    4e90:	17 8a       	std	Z+23, r1	; 0x17
    4e92:	31 c0       	rjmp	.+98     	; 0x4ef6 <udd_ep_run+0x16c>
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
    4e94:	f7 01       	movw	r30, r14
    4e96:	ee 0f       	add	r30, r30
    4e98:	ff 1f       	adc	r31, r31
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	ee 0f       	add	r30, r30
    4ea0:	ff 1f       	adc	r31, r31
    4ea2:	e0 5e       	subi	r30, 0xE0	; 224
    4ea4:	f9 4d       	sbci	r31, 0xD9	; 217
    4ea6:	81 89       	ldd	r24, Z+17	; 0x11
    4ea8:	80 7c       	andi	r24, 0xC0	; 192
    4eaa:	80 3c       	cpi	r24, 0xC0	; 192
    4eac:	b9 f4       	brne	.+46     	; 0x4edc <udd_ep_run+0x152>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4eae:	c7 01       	movw	r24, r14
    4eb0:	88 0f       	add	r24, r24
    4eb2:	99 1f       	adc	r25, r25
    4eb4:	88 0f       	add	r24, r24
    4eb6:	99 1f       	adc	r25, r25
    4eb8:	88 0f       	add	r24, r24
    4eba:	99 1f       	adc	r25, r25
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
    4ebc:	80 5d       	subi	r24, 0xD0	; 208
    4ebe:	99 4d       	sbci	r25, 0xD9	; 217
    4ec0:	0e 94 a7 22 	call	0x454e	; 0x454e <udd_ep_get_size>
    4ec4:	bc 01       	movw	r22, r24
    4ec6:	c5 01       	movw	r24, r10
    4ec8:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    4ecc:	89 2b       	or	r24, r25
    4ece:	31 f0       	breq	.+12     	; 0x4edc <udd_ep_run+0x152>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    4ed0:	f6 01       	movw	r30, r12
    4ed2:	80 81       	ld	r24, Z
    4ed4:	8e 7f       	andi	r24, 0xFE	; 254
    4ed6:	80 83       	st	Z, r24
			return false;
    4ed8:	80 e0       	ldi	r24, 0x00	; 0
    4eda:	15 c0       	rjmp	.+42     	; 0x4f06 <udd_ep_run+0x17c>
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    4edc:	f7 01       	movw	r30, r14
    4ede:	ee 0f       	add	r30, r30
    4ee0:	ff 1f       	adc	r31, r31
    4ee2:	ee 0f       	add	r30, r30
    4ee4:	ff 1f       	adc	r31, r31
    4ee6:	ee 0f       	add	r30, r30
    4ee8:	ff 1f       	adc	r31, r31
    4eea:	e0 5e       	subi	r30, 0xE0	; 224
    4eec:	f9 4d       	sbci	r31, 0xD9	; 217
    4eee:	12 8a       	std	Z+18, r1	; 0x12
    4ef0:	13 8a       	std	Z+19, r1	; 0x13
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    4ef2:	16 8a       	std	Z+22, r1	; 0x16
    4ef4:	17 8a       	std	Z+23, r1	; 0x17
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    4ef6:	87 2d       	mov	r24, r7
    4ef8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <udd_ep_trans_complet>
	return true;
    4efc:	81 e0       	ldi	r24, 0x01	; 1
    4efe:	03 c0       	rjmp	.+6      	; 0x4f06 <udd_ep_run+0x17c>
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
    4f00:	80 e0       	ldi	r24, 0x00	; 0
    4f02:	01 c0       	rjmp	.+2      	; 0x4f06 <udd_ep_run+0x17c>
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
		&& udd_endpoint_is_stall(ep_ctrl)) {
		return false; // Endpoint is halted
    4f04:	80 e0       	ldi	r24, 0x00	; 0
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
    4f06:	0f 90       	pop	r0
    4f08:	df 91       	pop	r29
    4f0a:	cf 91       	pop	r28
    4f0c:	1f 91       	pop	r17
    4f0e:	0f 91       	pop	r16
    4f10:	ff 90       	pop	r15
    4f12:	ef 90       	pop	r14
    4f14:	df 90       	pop	r13
    4f16:	cf 90       	pop	r12
    4f18:	bf 90       	pop	r11
    4f1a:	af 90       	pop	r10
    4f1c:	9f 90       	pop	r9
    4f1e:	8f 90       	pop	r8
    4f20:	7f 90       	pop	r7
    4f22:	6f 90       	pop	r6
    4f24:	08 95       	ret

00004f26 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    4f26:	ff 92       	push	r15
    4f28:	0f 93       	push	r16
    4f2a:	1f 93       	push	r17
    4f2c:	cf 93       	push	r28
    4f2e:	df 93       	push	r29
    4f30:	18 2f       	mov	r17, r24
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4f32:	c8 2f       	mov	r28, r24
    4f34:	cf 70       	andi	r28, 0x0F	; 15
    4f36:	d0 e0       	ldi	r29, 0x00	; 0
    4f38:	ce 01       	movw	r24, r28
    4f3a:	88 0f       	add	r24, r24
    4f3c:	99 1f       	adc	r25, r25
    4f3e:	c1 2f       	mov	r28, r17
    4f40:	01 2e       	mov	r0, r17
    4f42:	00 0c       	add	r0, r0
    4f44:	dd 0b       	sbc	r29, r29
    4f46:	cc 27       	eor	r28, r28
    4f48:	dd 0f       	add	r29, r29
    4f4a:	cc 1f       	adc	r28, r28
    4f4c:	dd 27       	eor	r29, r29
    4f4e:	c8 0f       	add	r28, r24
    4f50:	d9 1f       	adc	r29, r25
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    4f52:	81 2f       	mov	r24, r17
    4f54:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <udd_ep_get_job>
    4f58:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ee 0f       	add	r30, r30
    4f5e:	ff 1f       	adc	r31, r31
    4f60:	ee 0f       	add	r30, r30
    4f62:	ff 1f       	adc	r31, r31
    4f64:	ee 0f       	add	r30, r30
    4f66:	ff 1f       	adc	r31, r31
    4f68:	e0 5d       	subi	r30, 0xD0	; 208
    4f6a:	f9 4d       	sbci	r31, 0xD9	; 217
    4f6c:	02 e0       	ldi	r16, 0x02	; 2
    4f6e:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    4f70:	8c 91       	ld	r24, X
    4f72:	80 ff       	sbrs	r24, 0
    4f74:	22 c0       	rjmp	.+68     	; 0x4fba <udd_ep_abort+0x94>
		return; // No job on going
	}
	ptr_job->busy = false;
    4f76:	8e 7f       	andi	r24, 0xFE	; 254
    4f78:	8c 93       	st	X, r24
	if (NULL != ptr_job->call_trans) {
    4f7a:	17 96       	adiw	r26, 0x07	; 7
    4f7c:	ed 91       	ld	r30, X+
    4f7e:	fc 91       	ld	r31, X
    4f80:	18 97       	sbiw	r26, 0x08	; 8
    4f82:	30 97       	sbiw	r30, 0x00	; 0
    4f84:	d1 f0       	breq	.+52     	; 0x4fba <udd_ep_abort+0x94>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    4f86:	11 23       	and	r17, r17
    4f88:	5c f4       	brge	.+22     	; 0x4fa0 <udd_ep_abort+0x7a>
    4f8a:	cc 0f       	add	r28, r28
    4f8c:	dd 1f       	adc	r29, r29
    4f8e:	cc 0f       	add	r28, r28
    4f90:	dd 1f       	adc	r29, r29
    4f92:	cc 0f       	add	r28, r28
    4f94:	dd 1f       	adc	r29, r29
    4f96:	c0 5e       	subi	r28, 0xE0	; 224
    4f98:	d9 4d       	sbci	r29, 0xD9	; 217
    4f9a:	6e 89       	ldd	r22, Y+22	; 0x16
    4f9c:	7f 89       	ldd	r23, Y+23	; 0x17
    4f9e:	0a c0       	rjmp	.+20     	; 0x4fb4 <udd_ep_abort+0x8e>
    4fa0:	cc 0f       	add	r28, r28
    4fa2:	dd 1f       	adc	r29, r29
    4fa4:	cc 0f       	add	r28, r28
    4fa6:	dd 1f       	adc	r29, r29
    4fa8:	cc 0f       	add	r28, r28
    4faa:	dd 1f       	adc	r29, r29
    4fac:	c0 5e       	subi	r28, 0xE0	; 224
    4fae:	d9 4d       	sbci	r29, 0xD9	; 217
    4fb0:	6a 89       	ldd	r22, Y+18	; 0x12
    4fb2:	7b 89       	ldd	r23, Y+19	; 0x13
    4fb4:	41 2f       	mov	r20, r17
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	19 95       	eicall
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
    4fba:	df 91       	pop	r29
    4fbc:	cf 91       	pop	r28
    4fbe:	1f 91       	pop	r17
    4fc0:	0f 91       	pop	r16
    4fc2:	ff 90       	pop	r15
    4fc4:	08 95       	ret

00004fc6 <udd_ep_free>:
	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}

void udd_ep_free(udd_ep_id_t ep)
{
    4fc6:	cf 93       	push	r28
    4fc8:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
    4fca:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    4fce:	ec 2f       	mov	r30, r28
    4fd0:	ef 70       	andi	r30, 0x0F	; 15
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	ee 0f       	add	r30, r30
    4fd6:	ff 1f       	adc	r31, r31
    4fd8:	8c 2f       	mov	r24, r28
    4fda:	cc 0f       	add	r28, r28
    4fdc:	99 0b       	sbc	r25, r25
    4fde:	88 27       	eor	r24, r24
    4fe0:	99 0f       	add	r25, r25
    4fe2:	88 1f       	adc	r24, r24
    4fe4:	99 27       	eor	r25, r25
    4fe6:	e8 0f       	add	r30, r24
    4fe8:	f9 1f       	adc	r31, r25
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    4fea:	ee 0f       	add	r30, r30
    4fec:	ff 1f       	adc	r31, r31
    4fee:	ee 0f       	add	r30, r30
    4ff0:	ff 1f       	adc	r31, r31
    4ff2:	ee 0f       	add	r30, r30
    4ff4:	ff 1f       	adc	r31, r31
    4ff6:	e0 5e       	subi	r30, 0xE0	; 224
    4ff8:	f9 4d       	sbci	r31, 0xD9	; 217
    4ffa:	11 8a       	std	Z+17, r1	; 0x11
}
    4ffc:	cf 91       	pop	r28
    4ffe:	08 95       	ret

00005000 <udd_ep_set_halt>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5000:	e8 2f       	mov	r30, r24
    5002:	ef 70       	andi	r30, 0x0F	; 15
    5004:	f0 e0       	ldi	r31, 0x00	; 0
    5006:	ee 0f       	add	r30, r30
    5008:	ff 1f       	adc	r31, r31
    500a:	28 2f       	mov	r18, r24
    500c:	08 2e       	mov	r0, r24
    500e:	00 0c       	add	r0, r0
    5010:	33 0b       	sbc	r19, r19
    5012:	22 27       	eor	r18, r18
    5014:	33 0f       	add	r19, r19
    5016:	22 1f       	adc	r18, r18
    5018:	33 27       	eor	r19, r19
    501a:	e2 0f       	add	r30, r18
    501c:	f3 1f       	adc	r31, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_enable_stall(ep_ctrl);
    501e:	ee 0f       	add	r30, r30
    5020:	ff 1f       	adc	r31, r31
    5022:	ee 0f       	add	r30, r30
    5024:	ff 1f       	adc	r31, r31
    5026:	ee 0f       	add	r30, r30
    5028:	ff 1f       	adc	r31, r31
    502a:	e0 5e       	subi	r30, 0xE0	; 224
    502c:	f9 4d       	sbci	r31, 0xD9	; 217
    502e:	91 89       	ldd	r25, Z+17	; 0x11
    5030:	94 60       	ori	r25, 0x04	; 4
    5032:	91 8b       	std	Z+17, r25	; 0x11

	udd_ep_abort(ep);
    5034:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
	return true;
}
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	08 95       	ret

0000503c <udd_ep_wait_stall_clear>:
	}
}

bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
    503c:	0f 93       	push	r16
    503e:	1f 93       	push	r17
    5040:	cf 93       	push	r28
    5042:	df 93       	push	r29
    5044:	8b 01       	movw	r16, r22
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    5046:	c8 2f       	mov	r28, r24
    5048:	cf 70       	andi	r28, 0x0F	; 15
    504a:	d0 e0       	ldi	r29, 0x00	; 0
    504c:	cc 0f       	add	r28, r28
    504e:	dd 1f       	adc	r29, r29
    5050:	28 2f       	mov	r18, r24
    5052:	08 2e       	mov	r0, r24
    5054:	00 0c       	add	r0, r0
    5056:	33 0b       	sbc	r19, r19
    5058:	22 27       	eor	r18, r18
    505a:	33 0f       	add	r19, r19
    505c:	22 1f       	adc	r18, r18
    505e:	33 27       	eor	r19, r19
    5060:	c2 0f       	add	r28, r18
    5062:	d3 1f       	adc	r29, r19
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    5064:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <udd_ep_get_job>

	if (udd_endpoint_is_stall(ep_ctrl)) {
    5068:	cc 0f       	add	r28, r28
    506a:	dd 1f       	adc	r29, r29
    506c:	cc 0f       	add	r28, r28
    506e:	dd 1f       	adc	r29, r29
    5070:	cc 0f       	add	r28, r28
    5072:	dd 1f       	adc	r29, r29
    5074:	c0 5e       	subi	r28, 0xE0	; 224
    5076:	d9 4d       	sbci	r29, 0xD9	; 217
    5078:	29 89       	ldd	r18, Y+17	; 0x11
    507a:	22 ff       	sbrs	r18, 2
    507c:	0a c0       	rjmp	.+20     	; 0x5092 <udd_ep_wait_stall_clear+0x56>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    507e:	fc 01       	movw	r30, r24
    5080:	20 81       	ld	r18, Z
    5082:	20 fd       	sbrc	r18, 0
    5084:	0a c0       	rjmp	.+20     	; 0x509a <udd_ep_wait_stall_clear+0x5e>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    5086:	21 60       	ori	r18, 0x01	; 1
    5088:	20 83       	st	Z, r18
		ptr_job->call_nohalt = callback;
    508a:	07 83       	std	Z+7, r16	; 0x07
    508c:	10 87       	std	Z+8, r17	; 0x08
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
    508e:	81 e0       	ldi	r24, 0x01	; 1
    5090:	05 c0       	rjmp	.+10     	; 0x509c <udd_ep_wait_stall_clear+0x60>
		}
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
    5092:	f8 01       	movw	r30, r16
    5094:	19 95       	eicall
	}
	return true;
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	01 c0       	rjmp	.+2      	; 0x509c <udd_ep_wait_stall_clear+0x60>
	ptr_job = udd_ep_get_job(ep);

	if (udd_endpoint_is_stall(ep_ctrl)) {
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
			return false; // Job already on going
    509a:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    509c:	df 91       	pop	r29
    509e:	cf 91       	pop	r28
    50a0:	1f 91       	pop	r17
    50a2:	0f 91       	pop	r16
    50a4:	08 95       	ret

000050a6 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    50a6:	1f 92       	push	r1
    50a8:	0f 92       	push	r0
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	0f 92       	push	r0
    50ae:	11 24       	eor	r1, r1
    50b0:	08 b6       	in	r0, 0x38	; 56
    50b2:	0f 92       	push	r0
    50b4:	18 be       	out	0x38, r1	; 56
    50b6:	09 b6       	in	r0, 0x39	; 57
    50b8:	0f 92       	push	r0
    50ba:	19 be       	out	0x39, r1	; 57
    50bc:	0b b6       	in	r0, 0x3b	; 59
    50be:	0f 92       	push	r0
    50c0:	1b be       	out	0x3b, r1	; 59
    50c2:	0f 93       	push	r16
    50c4:	2f 93       	push	r18
    50c6:	3f 93       	push	r19
    50c8:	4f 93       	push	r20
    50ca:	5f 93       	push	r21
    50cc:	6f 93       	push	r22
    50ce:	7f 93       	push	r23
    50d0:	8f 93       	push	r24
    50d2:	9f 93       	push	r25
    50d4:	af 93       	push	r26
    50d6:	bf 93       	push	r27
    50d8:	ef 93       	push	r30
    50da:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    50dc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    50e0:	88 23       	and	r24, r24
    50e2:	34 f4       	brge	.+12     	; 0x50f0 <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    50e4:	80 e8       	ldi	r24, 0x80	; 128
    50e6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    50ea:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    50ee:	90 c0       	rjmp	.+288    	; 0x5210 <__vector_125+0x16a>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    50f0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    50f4:	82 ff       	sbrs	r24, 2
    50f6:	22 c0       	rjmp	.+68     	; 0x513c <__vector_125+0x96>
		udd_ack_underflow_event();
    50f8:	84 e0       	ldi	r24, 0x04	; 4
    50fa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    50fe:	80 91 38 26 	lds	r24, 0x2638	; 0x802638 <udd_sram+0x18>
    5102:	86 ff       	sbrs	r24, 6
    5104:	85 c0       	rjmp	.+266    	; 0x5210 <__vector_125+0x16a>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5106:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    510a:	81 fd       	sbrc	r24, 1
    510c:	81 c0       	rjmp	.+258    	; 0x5210 <__vector_125+0x16a>
    510e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <udd_ctrl_interrupt_tc_setup>
    5112:	81 11       	cpse	r24, r1
    5114:	7d c0       	rjmp	.+250    	; 0x5210 <__vector_125+0x16a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    5116:	80 91 1f 26 	lds	r24, 0x261F	; 0x80261f <udd_ep_control_state>
    511a:	81 30       	cpi	r24, 0x01	; 1
    511c:	19 f4       	brne	.+6      	; 0x5124 <__vector_125+0x7e>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    511e:	0e 94 23 22 	call	0x4446	; 0x4446 <udd_ctrl_send_zlp_in>
    5122:	76 c0       	rjmp	.+236    	; 0x5210 <__vector_125+0x16a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    5124:	84 30       	cpi	r24, 0x04	; 4
    5126:	09 f0       	breq	.+2      	; 0x512a <__vector_125+0x84>
    5128:	73 c0       	rjmp	.+230    	; 0x5210 <__vector_125+0x16a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    512a:	e9 e3       	ldi	r30, 0x39	; 57
    512c:	f6 e2       	ldi	r31, 0x26	; 38
    512e:	04 e0       	ldi	r16, 0x04	; 4
    5130:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5132:	e1 e3       	ldi	r30, 0x31	; 49
    5134:	f6 e2       	ldi	r31, 0x26	; 38
    5136:	04 e0       	ldi	r16, 0x04	; 4
    5138:	05 93       	las	Z, r16
    513a:	6a c0       	rjmp	.+212    	; 0x5210 <__vector_125+0x16a>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    513c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    5140:	81 ff       	sbrs	r24, 1
    5142:	61 c0       	rjmp	.+194    	; 0x5206 <__vector_125+0x160>
		udd_ack_overflow_event();
    5144:	82 e0       	ldi	r24, 0x02	; 2
    5146:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    514a:	80 91 30 26 	lds	r24, 0x2630	; 0x802630 <udd_sram+0x10>
    514e:	86 ff       	sbrs	r24, 6
    5150:	5f c0       	rjmp	.+190    	; 0x5210 <__vector_125+0x16a>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    5152:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5156:	81 fd       	sbrc	r24, 1
    5158:	5b c0       	rjmp	.+182    	; 0x5210 <__vector_125+0x16a>
    515a:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <udd_ctrl_interrupt_tc_setup>
    515e:	81 11       	cpse	r24, r1
    5160:	57 c0       	rjmp	.+174    	; 0x5210 <__vector_125+0x16a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    5162:	80 91 1f 26 	lds	r24, 0x261F	; 0x80261f <udd_ep_control_state>
    5166:	82 30       	cpi	r24, 0x02	; 2
    5168:	41 f4       	brne	.+16     	; 0x517a <__vector_125+0xd4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    516a:	84 e0       	ldi	r24, 0x04	; 4
    516c:	80 93 1f 26 	sts	0x261F, r24	; 0x80261f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    5170:	e0 e3       	ldi	r30, 0x30	; 48
    5172:	f6 e2       	ldi	r31, 0x26	; 38
    5174:	02 e0       	ldi	r16, 0x02	; 2
    5176:	06 93       	lac	Z, r16
    5178:	4b c0       	rjmp	.+150    	; 0x5210 <__vector_125+0x16a>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    517a:	83 30       	cpi	r24, 0x03	; 3
    517c:	09 f0       	breq	.+2      	; 0x5180 <__vector_125+0xda>
    517e:	48 c0       	rjmp	.+144    	; 0x5210 <__vector_125+0x16a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    5180:	e9 e3       	ldi	r30, 0x39	; 57
    5182:	f6 e2       	ldi	r31, 0x26	; 38
    5184:	04 e0       	ldi	r16, 0x04	; 4
    5186:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    5188:	e1 e3       	ldi	r30, 0x31	; 49
    518a:	f6 e2       	ldi	r31, 0x26	; 38
    518c:	04 e0       	ldi	r16, 0x04	; 4
    518e:	05 93       	las	Z, r16
    5190:	3f c0       	rjmp	.+126    	; 0x5210 <__vector_125+0x16a>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    5192:	80 e1       	ldi	r24, 0x10	; 16
    5194:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    5198:	81 e0       	ldi	r24, 0x01	; 1
    519a:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    519e:	81 e8       	ldi	r24, 0x81	; 129
    51a0:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    51a4:	82 e0       	ldi	r24, 0x02	; 2
    51a6:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    51aa:	82 e8       	ldi	r24, 0x82	; 130
    51ac:	0e 94 93 27 	call	0x4f26	; 0x4f26 <udd_ep_abort>
		}
#endif
		udc_reset();
    51b0:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    51b4:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    51b8:	e0 e2       	ldi	r30, 0x20	; 32
    51ba:	f6 e2       	ldi	r31, 0x26	; 38
    51bc:	11 8a       	std	Z+17, r1	; 0x11
	udd_endpoint_clear_status(ep_ctrl);
    51be:	96 e0       	ldi	r25, 0x06	; 6
    51c0:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    51c2:	83 e4       	ldi	r24, 0x43	; 67
    51c4:	81 8b       	std	Z+17, r24	; 0x11
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    51c6:	11 8e       	std	Z+25, r1	; 0x19
	udd_endpoint_clear_status(ep_ctrl);
    51c8:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    51ca:	81 8f       	std	Z+25, r24	; 0x19
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    51cc:	8b ed       	ldi	r24, 0xDB	; 219
    51ce:	95 e2       	ldi	r25, 0x25	; 37
    51d0:	84 8b       	std	Z+20, r24	; 0x14
    51d2:	95 8b       	std	Z+21, r25	; 0x15
		// Reset endpoint control management
		udd_ctrl_init();
    51d4:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    51d8:	1b c0       	rjmp	.+54     	; 0x5210 <__vector_125+0x16a>
	}

	if (udd_is_suspend_event()) {
    51da:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    51de:	86 ff       	sbrs	r24, 6
    51e0:	07 c0       	rjmp	.+14     	; 0x51f0 <__vector_125+0x14a>
		udd_ack_suspend_event();
    51e2:	80 e4       	ldi	r24, 0x40	; 64
    51e4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	0e 94 b8 21 	call	0x4370	; 0x4370 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    51ee:	10 c0       	rjmp	.+32     	; 0x5210 <__vector_125+0x16a>
	}

	if (udd_is_resume_event()) {
    51f0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    51f4:	85 ff       	sbrs	r24, 5
    51f6:	0c c0       	rjmp	.+24     	; 0x5210 <__vector_125+0x16a>
		udd_ack_resume_event();
    51f8:	80 e2       	ldi	r24, 0x20	; 32
    51fa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    51fe:	81 e0       	ldi	r24, 0x01	; 1
    5200:	0e 94 b8 21 	call	0x4370	; 0x4370 <udd_sleep_mode>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    5204:	05 c0       	rjmp	.+10     	; 0x5210 <__vector_125+0x16a>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    5206:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    520a:	84 fd       	sbrc	r24, 4
    520c:	c2 cf       	rjmp	.-124    	; 0x5192 <__vector_125+0xec>
    520e:	e5 cf       	rjmp	.-54     	; 0x51da <__vector_125+0x134>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    5210:	ff 91       	pop	r31
    5212:	ef 91       	pop	r30
    5214:	bf 91       	pop	r27
    5216:	af 91       	pop	r26
    5218:	9f 91       	pop	r25
    521a:	8f 91       	pop	r24
    521c:	7f 91       	pop	r23
    521e:	6f 91       	pop	r22
    5220:	5f 91       	pop	r21
    5222:	4f 91       	pop	r20
    5224:	3f 91       	pop	r19
    5226:	2f 91       	pop	r18
    5228:	0f 91       	pop	r16
    522a:	0f 90       	pop	r0
    522c:	0b be       	out	0x3b, r0	; 59
    522e:	0f 90       	pop	r0
    5230:	09 be       	out	0x39, r0	; 57
    5232:	0f 90       	pop	r0
    5234:	08 be       	out	0x38, r0	; 56
    5236:	0f 90       	pop	r0
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	0f 90       	pop	r0
    523c:	1f 90       	pop	r1
    523e:	18 95       	reti

00005240 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    5240:	1f 92       	push	r1
    5242:	0f 92       	push	r0
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	0f 92       	push	r0
    5248:	11 24       	eor	r1, r1
    524a:	08 b6       	in	r0, 0x38	; 56
    524c:	0f 92       	push	r0
    524e:	18 be       	out	0x38, r1	; 56
    5250:	09 b6       	in	r0, 0x39	; 57
    5252:	0f 92       	push	r0
    5254:	19 be       	out	0x39, r1	; 57
    5256:	0a b6       	in	r0, 0x3a	; 58
    5258:	0f 92       	push	r0
    525a:	1a be       	out	0x3a, r1	; 58
    525c:	0b b6       	in	r0, 0x3b	; 59
    525e:	0f 92       	push	r0
    5260:	1b be       	out	0x3b, r1	; 59
    5262:	0f 93       	push	r16
    5264:	1f 93       	push	r17
    5266:	2f 93       	push	r18
    5268:	3f 93       	push	r19
    526a:	4f 93       	push	r20
    526c:	5f 93       	push	r21
    526e:	6f 93       	push	r22
    5270:	7f 93       	push	r23
    5272:	8f 93       	push	r24
    5274:	9f 93       	push	r25
    5276:	af 93       	push	r26
    5278:	bf 93       	push	r27
    527a:	cf 93       	push	r28
    527c:	df 93       	push	r29
    527e:	ef 93       	push	r30
    5280:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    5282:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    5286:	81 fd       	sbrc	r24, 1
    5288:	04 c0       	rjmp	.+8      	; 0x5292 <__vector_126+0x52>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    528a:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <udd_ctrl_interrupt_tc_setup>
    528e:	81 11       	cpse	r24, r1
    5290:	c4 c0       	rjmp	.+392    	; 0x541a <__vector_126+0x1da>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    5292:	82 e0       	ldi	r24, 0x02	; 2
    5294:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    5298:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    529c:	81 95       	neg	r24
    529e:	88 0f       	add	r24, r24
    52a0:	e0 e3       	ldi	r30, 0x30	; 48
    52a2:	f6 e2       	ldi	r31, 0x26	; 38
    52a4:	e8 1b       	sub	r30, r24
    52a6:	f1 09       	sbc	r31, r1
    52a8:	20 81       	ld	r18, Z
    52aa:	31 81       	ldd	r19, Z+1	; 0x01
    52ac:	20 53       	subi	r18, 0x30	; 48
    52ae:	36 42       	sbci	r19, 0x26	; 38
    52b0:	36 95       	lsr	r19
    52b2:	27 95       	ror	r18
    52b4:	36 95       	lsr	r19
    52b6:	27 95       	ror	r18
    52b8:	36 95       	lsr	r19
    52ba:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    52bc:	82 2f       	mov	r24, r18
    52be:	86 95       	lsr	r24
    52c0:	20 fd       	sbrc	r18, 0
    52c2:	02 c0       	rjmp	.+4      	; 0x52c8 <__vector_126+0x88>
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	01 c0       	rjmp	.+2      	; 0x52ca <__vector_126+0x8a>
    52c8:	90 e8       	ldi	r25, 0x80	; 128
    52ca:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    52cc:	e8 2f       	mov	r30, r24
    52ce:	ef 70       	andi	r30, 0x0F	; 15
    52d0:	f0 e0       	ldi	r31, 0x00	; 0
    52d2:	ee 0f       	add	r30, r30
    52d4:	ff 1f       	adc	r31, r31
    52d6:	28 2f       	mov	r18, r24
    52d8:	08 2e       	mov	r0, r24
    52da:	00 0c       	add	r0, r0
    52dc:	33 0b       	sbc	r19, r19
    52de:	22 27       	eor	r18, r18
    52e0:	33 0f       	add	r19, r19
    52e2:	22 1f       	adc	r18, r18
    52e4:	33 27       	eor	r19, r19
    52e6:	e2 0f       	add	r30, r18
    52e8:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    52ea:	df 01       	movw	r26, r30
    52ec:	aa 0f       	add	r26, r26
    52ee:	bb 1f       	adc	r27, r27
    52f0:	aa 0f       	add	r26, r26
    52f2:	bb 1f       	adc	r27, r27
    52f4:	aa 0f       	add	r26, r26
    52f6:	bb 1f       	adc	r27, r27
    52f8:	a0 5d       	subi	r26, 0xD0	; 208
    52fa:	b9 4d       	sbci	r27, 0xD9	; 217
    52fc:	9c 91       	ld	r25, X
    52fe:	95 ff       	sbrs	r25, 5
    5300:	8c c0       	rjmp	.+280    	; 0x541a <__vector_126+0x1da>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    5302:	fd 01       	movw	r30, r26
    5304:	00 e2       	ldi	r16, 0x20	; 32
    5306:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    5308:	81 11       	cpse	r24, r1
    530a:	80 c0       	rjmp	.+256    	; 0x540c <__vector_126+0x1cc>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    530c:	80 91 1f 26 	lds	r24, 0x261F	; 0x80261f <udd_ep_control_state>
    5310:	84 30       	cpi	r24, 0x04	; 4
    5312:	29 f4       	brne	.+10     	; 0x531e <__vector_126+0xde>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    5314:	0e 94 31 22 	call	0x4462	; 0x4462 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    5318:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <udd_ctrl_init>
    531c:	7e c0       	rjmp	.+252    	; 0x541a <__vector_126+0x1da>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    531e:	00 91 32 26 	lds	r16, 0x2632	; 0x802632 <udd_sram+0x12>
    5322:	10 91 33 26 	lds	r17, 0x2633	; 0x802633 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    5326:	80 91 7b 26 	lds	r24, 0x267B	; 0x80267b <udd_g_ctrlreq+0xa>
    532a:	90 91 7c 26 	lds	r25, 0x267C	; 0x80267c <udd_g_ctrlreq+0xb>
    532e:	c0 91 1b 26 	lds	r28, 0x261B	; 0x80261b <udd_ctrl_payload_nb_trans>
    5332:	d0 91 1c 26 	lds	r29, 0x261C	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
    5336:	98 01       	movw	r18, r16
    5338:	2c 0f       	add	r18, r28
    533a:	3d 1f       	adc	r19, r29
    533c:	82 17       	cp	r24, r18
    533e:	93 07       	cpc	r25, r19
    5340:	18 f4       	brcc	.+6      	; 0x5348 <__vector_126+0x108>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    5342:	8c 01       	movw	r16, r24
    5344:	0c 1b       	sub	r16, r28
    5346:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    5348:	80 91 79 26 	lds	r24, 0x2679	; 0x802679 <udd_g_ctrlreq+0x8>
    534c:	90 91 7a 26 	lds	r25, 0x267A	; 0x80267a <udd_g_ctrlreq+0x9>
    5350:	a8 01       	movw	r20, r16
    5352:	6b ed       	ldi	r22, 0xDB	; 219
    5354:	75 e2       	ldi	r23, 0x25	; 37
    5356:	8c 0f       	add	r24, r28
    5358:	9d 1f       	adc	r25, r29
    535a:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    535e:	c0 0f       	add	r28, r16
    5360:	d1 1f       	adc	r29, r17
    5362:	c0 93 1b 26 	sts	0x261B, r28	; 0x80261b <udd_ctrl_payload_nb_trans>
    5366:	d0 93 1c 26 	sts	0x261C, r29	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    536a:	00 34       	cpi	r16, 0x40	; 64
    536c:	11 05       	cpc	r17, r1
    536e:	69 f4       	brne	.+26     	; 0x538a <__vector_126+0x14a>
    5370:	80 91 1d 26 	lds	r24, 0x261D	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    5374:	90 91 1e 26 	lds	r25, 0x261E	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
    5378:	8c 0f       	add	r24, r28
    537a:	9d 1f       	adc	r25, r29
    537c:	20 91 77 26 	lds	r18, 0x2677	; 0x802677 <udd_g_ctrlreq+0x6>
    5380:	30 91 78 26 	lds	r19, 0x2678	; 0x802678 <udd_g_ctrlreq+0x7>
    5384:	82 17       	cp	r24, r18
    5386:	93 07       	cpc	r25, r19
    5388:	90 f0       	brcs	.+36     	; 0x53ae <__vector_126+0x16e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    538a:	e1 e7       	ldi	r30, 0x71	; 113
    538c:	f6 e2       	ldi	r31, 0x26	; 38
    538e:	c2 87       	std	Z+10, r28	; 0x0a
    5390:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    5392:	06 84       	ldd	r0, Z+14	; 0x0e
    5394:	f7 85       	ldd	r31, Z+15	; 0x0f
    5396:	e0 2d       	mov	r30, r0
    5398:	30 97       	sbiw	r30, 0x00	; 0
    539a:	31 f0       	breq	.+12     	; 0x53a8 <__vector_126+0x168>
			if (!udd_g_ctrlreq.over_under_run()) {
    539c:	19 95       	eicall
    539e:	81 11       	cpse	r24, r1
    53a0:	03 c0       	rjmp	.+6      	; 0x53a8 <__vector_126+0x168>
				// Stall ZLP
				udd_ctrl_stall_data();
    53a2:	0e 94 15 22 	call	0x442a	; 0x442a <udd_ctrl_stall_data>
    53a6:	39 c0       	rjmp	.+114    	; 0x541a <__vector_126+0x1da>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    53a8:	0e 94 23 22 	call	0x4446	; 0x4446 <udd_ctrl_send_zlp_in>
    53ac:	36 c0       	rjmp	.+108    	; 0x541a <__vector_126+0x1da>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    53ae:	80 91 7b 26 	lds	r24, 0x267B	; 0x80267b <udd_g_ctrlreq+0xa>
    53b2:	90 91 7c 26 	lds	r25, 0x267C	; 0x80267c <udd_g_ctrlreq+0xb>
    53b6:	c8 17       	cp	r28, r24
    53b8:	d9 07       	cpc	r29, r25
    53ba:	09 f5       	brne	.+66     	; 0x53fe <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    53bc:	e0 91 7f 26 	lds	r30, 0x267F	; 0x80267f <udd_g_ctrlreq+0xe>
    53c0:	f0 91 80 26 	lds	r31, 0x2680	; 0x802680 <udd_g_ctrlreq+0xf>
    53c4:	30 97       	sbiw	r30, 0x00	; 0
    53c6:	19 f4       	brne	.+6      	; 0x53ce <__vector_126+0x18e>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    53c8:	0e 94 15 22 	call	0x442a	; 0x442a <udd_ctrl_stall_data>
    53cc:	26 c0       	rjmp	.+76     	; 0x541a <__vector_126+0x1da>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    53ce:	19 95       	eicall
    53d0:	81 11       	cpse	r24, r1
    53d2:	03 c0       	rjmp	.+6      	; 0x53da <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    53d4:	0e 94 15 22 	call	0x442a	; 0x442a <udd_ctrl_stall_data>
    53d8:	20 c0       	rjmp	.+64     	; 0x541a <__vector_126+0x1da>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    53da:	20 91 1d 26 	lds	r18, 0x261D	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    53de:	30 91 1e 26 	lds	r19, 0x261E	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
    53e2:	80 91 1b 26 	lds	r24, 0x261B	; 0x80261b <udd_ctrl_payload_nb_trans>
    53e6:	90 91 1c 26 	lds	r25, 0x261C	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
    53ea:	82 0f       	add	r24, r18
    53ec:	93 1f       	adc	r25, r19
    53ee:	80 93 1d 26 	sts	0x261D, r24	; 0x80261d <udd_ctrl_prev_payload_nb_trans>
    53f2:	90 93 1e 26 	sts	0x261E, r25	; 0x80261e <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    53f6:	10 92 1b 26 	sts	0x261B, r1	; 0x80261b <udd_ctrl_payload_nb_trans>
    53fa:	10 92 1c 26 	sts	0x261C, r1	; 0x80261c <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    53fe:	e0 e3       	ldi	r30, 0x30	; 48
    5400:	f6 e2       	ldi	r31, 0x26	; 38
    5402:	02 e0       	ldi	r16, 0x02	; 2
    5404:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    5406:	00 e2       	ldi	r16, 0x20	; 32
    5408:	06 93       	lac	Z, r16
    540a:	07 c0       	rjmp	.+14     	; 0x541a <__vector_126+0x1da>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    540c:	80 38       	cpi	r24, 0x80	; 128
    540e:	19 f4       	brne	.+6      	; 0x5416 <__vector_126+0x1d6>
		udd_ctrl_in_sent();
    5410:	0e 94 39 22 	call	0x4472	; 0x4472 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    5414:	02 c0       	rjmp	.+4      	; 0x541a <__vector_126+0x1da>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    5416:	0e 94 62 23 	call	0x46c4	; 0x46c4 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    541a:	ff 91       	pop	r31
    541c:	ef 91       	pop	r30
    541e:	df 91       	pop	r29
    5420:	cf 91       	pop	r28
    5422:	bf 91       	pop	r27
    5424:	af 91       	pop	r26
    5426:	9f 91       	pop	r25
    5428:	8f 91       	pop	r24
    542a:	7f 91       	pop	r23
    542c:	6f 91       	pop	r22
    542e:	5f 91       	pop	r21
    5430:	4f 91       	pop	r20
    5432:	3f 91       	pop	r19
    5434:	2f 91       	pop	r18
    5436:	1f 91       	pop	r17
    5438:	0f 91       	pop	r16
    543a:	0f 90       	pop	r0
    543c:	0b be       	out	0x3b, r0	; 59
    543e:	0f 90       	pop	r0
    5440:	0a be       	out	0x3a, r0	; 58
    5442:	0f 90       	pop	r0
    5444:	09 be       	out	0x39, r0	; 57
    5446:	0f 90       	pop	r0
    5448:	08 be       	out	0x38, r0	; 56
    544a:	0f 90       	pop	r0
    544c:	0f be       	out	0x3f, r0	; 63
    544e:	0f 90       	pop	r0
    5450:	1f 90       	pop	r1
    5452:	18 95       	reti

00005454 <udd_ep_is_valid>:
		((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
}

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
    5454:	98 2f       	mov	r25, r24
    5456:	9f 70       	andi	r25, 0x0F	; 15
	if (ep == 0) {
    5458:	29 f0       	breq	.+10     	; 0x5464 <udd_ep_is_valid+0x10>
		return false;
	}
	return (USB_DEVICE_MAX_EP >= ep);
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	93 30       	cpi	r25, 0x03	; 3
    545e:	18 f0       	brcs	.+6      	; 0x5466 <udd_ep_is_valid+0x12>
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	08 95       	ret

bool udd_ep_is_valid(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;
	if (ep == 0) {
		return false;
    5464:	80 e0       	ldi	r24, 0x00	; 0
	}
	return (USB_DEVICE_MAX_EP >= ep);
}
    5466:	08 95       	ret

00005468 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    5468:	0f 93       	push	r16
    546a:	1f 93       	push	r17
    546c:	cf 93       	push	r28
    546e:	df 93       	push	r29
    5470:	cd b7       	in	r28, 0x3d	; 61
    5472:	de b7       	in	r29, 0x3e	; 62
    5474:	27 97       	sbiw	r28, 0x07	; 7
    5476:	cd bf       	out	0x3d, r28	; 61
    5478:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    547a:	8f ef       	ldi	r24, 0xFF	; 255
    547c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    5480:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    5484:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    5488:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    548c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    5490:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    5494:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    5498:	64 e0       	ldi	r22, 0x04	; 4
    549a:	81 e4       	ldi	r24, 0x41	; 65
    549c:	90 e0       	ldi	r25, 0x00	; 0
    549e:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
    54a2:	6c e1       	ldi	r22, 0x1C	; 28
    54a4:	70 e0       	ldi	r23, 0x00	; 0
    54a6:	82 e0       	ldi	r24, 0x02	; 2
    54a8:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
    54ac:	8a 83       	std	Y+2, r24	; 0x02
    54ae:	6d e1       	ldi	r22, 0x1D	; 29
    54b0:	70 e0       	ldi	r23, 0x00	; 0
    54b2:	82 e0       	ldi	r24, 0x02	; 2
    54b4:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
    54b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
    54ba:	89 81       	ldd	r24, Y+1	; 0x01
    54bc:	9a 81       	ldd	r25, Y+2	; 0x02
    54be:	01 96       	adiw	r24, 0x01	; 1
    54c0:	21 f4       	brne	.+8      	; 0x54ca <sysclk_init+0x62>
		cal = 0x2340;
    54c2:	80 e4       	ldi	r24, 0x40	; 64
    54c4:	93 e2       	ldi	r25, 0x23	; 35
    54c6:	89 83       	std	Y+1, r24	; 0x01
    54c8:	9a 83       	std	Y+2, r25	; 0x02
    54ca:	89 81       	ldd	r24, Y+1	; 0x01
    54cc:	9a 81       	ldd	r25, Y+2	; 0x02
    54ce:	8b 83       	std	Y+3, r24	; 0x03
    54d0:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
    54d2:	e0 e6       	ldi	r30, 0x60	; 96
    54d4:	f0 e0       	ldi	r31, 0x00	; 0
    54d6:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
    54d8:	8c 81       	ldd	r24, Y+4	; 0x04
    54da:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    54dc:	8f b7       	in	r24, 0x3f	; 63
    54de:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
    54e0:	f8 94       	cli
	return flags;
    54e2:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    54e4:	e0 e5       	ldi	r30, 0x50	; 80
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	80 81       	ld	r24, Z
    54ea:	82 60       	ori	r24, 0x02	; 2
    54ec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    54ee:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    54f0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    54f2:	81 ff       	sbrs	r24, 1
    54f4:	fd cf       	rjmp	.-6      	; 0x54f0 <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    54f6:	8f b7       	in	r24, 0x3f	; 63
    54f8:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
    54fa:	f8 94       	cli
	return flags;
    54fc:	9f 81       	ldd	r25, Y+7	; 0x07
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    54fe:	00 e5       	ldi	r16, 0x50	; 80
    5500:	10 e0       	ldi	r17, 0x00	; 0
    5502:	d8 01       	movw	r26, r16
    5504:	16 96       	adiw	r26, 0x06	; 6
    5506:	8c 91       	ld	r24, X
    5508:	16 97       	sbiw	r26, 0x06	; 6
    550a:	89 7f       	andi	r24, 0xF9	; 249
    550c:	16 96       	adiw	r26, 0x06	; 6
    550e:	8c 93       	st	X, r24
    5510:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    5512:	e0 e6       	ldi	r30, 0x60	; 96
    5514:	f0 e0       	ldi	r31, 0x00	; 0
    5516:	80 e8       	ldi	r24, 0x80	; 128
    5518:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    551a:	8b eb       	ldi	r24, 0xBB	; 187
    551c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    551e:	16 96       	adiw	r26, 0x06	; 6
    5520:	8c 91       	ld	r24, X
    5522:	16 97       	sbiw	r26, 0x06	; 6
    5524:	84 60       	ori	r24, 0x04	; 4
    5526:	16 96       	adiw	r26, 0x06	; 6
    5528:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    552a:	80 81       	ld	r24, Z
    552c:	81 60       	ori	r24, 0x01	; 1
    552e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5530:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    5532:	61 e0       	ldi	r22, 0x01	; 1
    5534:	80 e4       	ldi	r24, 0x40	; 64
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    553c:	8f b7       	in	r24, 0x3f	; 63
    553e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
    5540:	f8 94       	cli
	return flags;
    5542:	9d 81       	ldd	r25, Y+5	; 0x05
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    5544:	f8 01       	movw	r30, r16
    5546:	80 81       	ld	r24, Z
    5548:	8e 7f       	andi	r24, 0xFE	; 254
    554a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    554c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    554e:	27 96       	adiw	r28, 0x07	; 7
    5550:	cd bf       	out	0x3d, r28	; 61
    5552:	de bf       	out	0x3e, r29	; 62
    5554:	df 91       	pop	r29
    5556:	cf 91       	pop	r28
    5558:	1f 91       	pop	r17
    555a:	0f 91       	pop	r16
    555c:	08 95       	ret

0000555e <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    555e:	cf 93       	push	r28
    5560:	df 93       	push	r29
    5562:	1f 92       	push	r1
    5564:	cd b7       	in	r28, 0x3d	; 61
    5566:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5568:	9f b7       	in	r25, 0x3f	; 63
    556a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    556c:	f8 94       	cli
	return flags;
    556e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5570:	e8 2f       	mov	r30, r24
    5572:	f0 e0       	ldi	r31, 0x00	; 0
    5574:	e0 59       	subi	r30, 0x90	; 144
    5576:	ff 4f       	sbci	r31, 0xFF	; 255
    5578:	60 95       	com	r22
    557a:	80 81       	ld	r24, Z
    557c:	68 23       	and	r22, r24
    557e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5580:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    5582:	0f 90       	pop	r0
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	08 95       	ret

0000558a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	1f 92       	push	r1
    5590:	cd b7       	in	r28, 0x3d	; 61
    5592:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    5594:	9f b7       	in	r25, 0x3f	; 63
    5596:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    5598:	f8 94       	cli
	return flags;
    559a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    559c:	e8 2f       	mov	r30, r24
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	e0 59       	subi	r30, 0x90	; 144
    55a2:	ff 4f       	sbci	r31, 0xFF	; 255
    55a4:	80 81       	ld	r24, Z
    55a6:	68 2b       	or	r22, r24
    55a8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    55aa:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    55ac:	0f 90       	pop	r0
    55ae:	df 91       	pop	r29
    55b0:	cf 91       	pop	r28
    55b2:	08 95       	ret

000055b4 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    55b4:	cf 93       	push	r28
    55b6:	df 93       	push	r29
    55b8:	1f 92       	push	r1
    55ba:	1f 92       	push	r1
    55bc:	cd b7       	in	r28, 0x3d	; 61
    55be:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    55c0:	86 30       	cpi	r24, 0x06	; 6
    55c2:	11 f0       	breq	.+4      	; 0x55c8 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    55c4:	60 e0       	ldi	r22, 0x00	; 0
    55c6:	01 c0       	rjmp	.+2      	; 0x55ca <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    55c8:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    55ca:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    55ce:	81 fd       	sbrc	r24, 1
    55d0:	2a c0       	rjmp	.+84     	; 0x5626 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    55d2:	8f b7       	in	r24, 0x3f	; 63
    55d4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    55d6:	f8 94       	cli
	return flags;
    55d8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    55da:	e0 e5       	ldi	r30, 0x50	; 80
    55dc:	f0 e0       	ldi	r31, 0x00	; 0
    55de:	80 81       	ld	r24, Z
    55e0:	82 60       	ori	r24, 0x02	; 2
    55e2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    55e4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    55e6:	81 81       	ldd	r24, Z+1	; 0x01
    55e8:	81 ff       	sbrs	r24, 1
    55ea:	fd cf       	rjmp	.-6      	; 0x55e6 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    55ec:	8f b7       	in	r24, 0x3f	; 63
    55ee:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    55f0:	f8 94       	cli
	return flags;
    55f2:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    55f4:	a0 e5       	ldi	r26, 0x50	; 80
    55f6:	b0 e0       	ldi	r27, 0x00	; 0
    55f8:	16 96       	adiw	r26, 0x06	; 6
    55fa:	8c 91       	ld	r24, X
    55fc:	16 97       	sbiw	r26, 0x06	; 6
    55fe:	89 7f       	andi	r24, 0xF9	; 249
    5600:	16 96       	adiw	r26, 0x06	; 6
    5602:	8c 93       	st	X, r24
    5604:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    5606:	e0 e6       	ldi	r30, 0x60	; 96
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	80 e8       	ldi	r24, 0x80	; 128
    560c:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    560e:	8b eb       	ldi	r24, 0xBB	; 187
    5610:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    5612:	16 96       	adiw	r26, 0x06	; 6
    5614:	8c 91       	ld	r24, X
    5616:	16 97       	sbiw	r26, 0x06	; 6
    5618:	84 60       	ori	r24, 0x04	; 4
    561a:	16 96       	adiw	r26, 0x06	; 6
    561c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    561e:	80 81       	ld	r24, Z
    5620:	81 60       	ori	r24, 0x01	; 1
    5622:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5624:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    5626:	63 60       	ori	r22, 0x03	; 3
    5628:	84 e4       	ldi	r24, 0x44	; 68
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    5630:	60 e4       	ldi	r22, 0x40	; 64
    5632:	80 e0       	ldi	r24, 0x00	; 0
    5634:	0e 94 af 2a 	call	0x555e	; 0x555e <sysclk_enable_module>
}
    5638:	0f 90       	pop	r0
    563a:	0f 90       	pop	r0
    563c:	df 91       	pop	r29
    563e:	cf 91       	pop	r28
    5640:	08 95       	ret

00005642 <sysclk_disable_usb>:
/**
 * \brief Disable clock for the USB module
 */
void sysclk_disable_usb(void)
{
	sysclk_disable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    5642:	60 e4       	ldi	r22, 0x40	; 64
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	0e 94 c5 2a 	call	0x558a	; 0x558a <sysclk_disable_module>
	ccp_write_io((uint8_t *)&CLK.USBCTRL, 0);
    564a:	60 e0       	ldi	r22, 0x00	; 0
    564c:	84 e4       	ldi	r24, 0x44	; 68
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
    5654:	08 95       	ret

00005656 <nvm_read_device_serial>:
 *       the program space reads will be corrupted.
 *
 * \retval storage Pointer to the structure where to store the device serial
 */
void nvm_read_device_serial(struct nvm_device_serial *storage)
{
    5656:	cf 93       	push	r28
    5658:	df 93       	push	r29
    565a:	ec 01       	movw	r28, r24
    565c:	68 e0       	ldi	r22, 0x08	; 8
    565e:	70 e0       	ldi	r23, 0x00	; 0
    5660:	82 e0       	ldi	r24, 0x02	; 2
    5662:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
	storage->lotnum0 = nvm_read_production_signature_row(
    5666:	88 83       	st	Y, r24
    5668:	69 e0       	ldi	r22, 0x09	; 9
    566a:	70 e0       	ldi	r23, 0x00	; 0
    566c:	82 e0       	ldi	r24, 0x02	; 2
    566e:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM0));
	storage->lotnum1 = nvm_read_production_signature_row(
    5672:	89 83       	std	Y+1, r24	; 0x01
    5674:	6a e0       	ldi	r22, 0x0A	; 10
    5676:	70 e0       	ldi	r23, 0x00	; 0
    5678:	82 e0       	ldi	r24, 0x02	; 2
    567a:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM1));
	storage->lotnum2 = nvm_read_production_signature_row(
    567e:	8a 83       	std	Y+2, r24	; 0x02
    5680:	6b e0       	ldi	r22, 0x0B	; 11
    5682:	70 e0       	ldi	r23, 0x00	; 0
    5684:	82 e0       	ldi	r24, 0x02	; 2
    5686:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM2));
	storage->lotnum3 = nvm_read_production_signature_row(
    568a:	8b 83       	std	Y+3, r24	; 0x03
    568c:	6c e0       	ldi	r22, 0x0C	; 12
    568e:	70 e0       	ldi	r23, 0x00	; 0
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM3));
	storage->lotnum4 = nvm_read_production_signature_row(
    5696:	8c 83       	std	Y+4, r24	; 0x04
    5698:	6d e0       	ldi	r22, 0x0D	; 13
    569a:	70 e0       	ldi	r23, 0x00	; 0
    569c:	82 e0       	ldi	r24, 0x02	; 2
    569e:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM4));
	storage->lotnum5 = nvm_read_production_signature_row(
    56a2:	8d 83       	std	Y+5, r24	; 0x05
    56a4:	60 e1       	ldi	r22, 0x10	; 16
    56a6:	70 e0       	ldi	r23, 0x00	; 0
    56a8:	82 e0       	ldi	r24, 0x02	; 2
    56aa:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(LOTNUM5));

	storage->wafnum  = nvm_read_production_signature_row(
    56ae:	8e 83       	std	Y+6, r24	; 0x06
    56b0:	62 e1       	ldi	r22, 0x12	; 18
    56b2:	70 e0       	ldi	r23, 0x00	; 0
    56b4:	82 e0       	ldi	r24, 0x02	; 2
    56b6:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(WAFNUM));

	storage->coordx0 = nvm_read_production_signature_row(
    56ba:	8f 83       	std	Y+7, r24	; 0x07
    56bc:	63 e1       	ldi	r22, 0x13	; 19
    56be:	70 e0       	ldi	r23, 0x00	; 0
    56c0:	82 e0       	ldi	r24, 0x02	; 2
    56c2:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX0));
	storage->coordx1 = nvm_read_production_signature_row(
    56c6:	88 87       	std	Y+8, r24	; 0x08
    56c8:	64 e1       	ldi	r22, 0x14	; 20
    56ca:	70 e0       	ldi	r23, 0x00	; 0
    56cc:	82 e0       	ldi	r24, 0x02	; 2
    56ce:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDX1));
	storage->coordy0 = nvm_read_production_signature_row(
    56d2:	89 87       	std	Y+9, r24	; 0x09
    56d4:	65 e1       	ldi	r22, 0x15	; 21
    56d6:	70 e0       	ldi	r23, 0x00	; 0
    56d8:	82 e0       	ldi	r24, 0x02	; 2
    56da:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
			nvm_get_production_signature_row_offset(COORDY0));
	storage->coordy1 = nvm_read_production_signature_row(
    56de:	8a 87       	std	Y+10, r24	; 0x0a
			nvm_get_production_signature_row_offset(COORDY1));
}
    56e0:	df 91       	pop	r29
    56e2:	cf 91       	pop	r28
    56e4:	08 95       	ret

000056e6 <nvm_eeprom_read_byte>:
 * \param  addr       EEPROM address, between 0 and EEPROM_SIZE
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t nvm_eeprom_read_byte(eeprom_addr_t addr)
{
    56e6:	dc 01       	movw	r26, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    56e8:	e0 ec       	ldi	r30, 0xC0	; 192
    56ea:	f1 e0       	ldi	r31, 0x01	; 1
    56ec:	97 85       	ldd	r25, Z+15	; 0x0f
    56ee:	99 23       	and	r25, r25
    56f0:	ec f3       	brlt	.-6      	; 0x56ec <nvm_eeprom_read_byte+0x6>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    56f2:	ec ec       	ldi	r30, 0xCC	; 204
    56f4:	f1 e0       	ldi	r31, 0x01	; 1
    56f6:	80 81       	ld	r24, Z
    56f8:	88 60       	ori	r24, 0x08	; 8
    56fa:	80 83       	st	Z, r24
	Assert(addr <= EEPROM_SIZE);

	/* Wait until NVM is ready */
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	data = *(uint8_t*)(addr + MAPPED_EEPROM_START),
    56fc:	b0 5f       	subi	r27, 0xF0	; 240
    56fe:	8c 91       	ld	r24, X
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    5700:	90 81       	ld	r25, Z
    5702:	97 7f       	andi	r25, 0xF7	; 247
    5704:	90 83       	st	Z, r25
	eeprom_disable_mapping();
	return data;
}
    5706:	08 95       	ret

00005708 <nvm_eeprom_read_buffer>:
 * \param address   the address to where to read
 * \param buf       pointer to the data
 * \param len       the number of bytes to read
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
    5708:	cf 93       	push	r28
    570a:	df 93       	push	r29
    570c:	9c 01       	movw	r18, r24
    570e:	db 01       	movw	r26, r22
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5710:	e0 ec       	ldi	r30, 0xC0	; 192
    5712:	f1 e0       	ldi	r31, 0x01	; 1
    5714:	97 85       	ldd	r25, Z+15	; 0x0f
    5716:	99 23       	and	r25, r25
    5718:	ec f3       	brlt	.-6      	; 0x5714 <nvm_eeprom_read_buffer+0xc>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    571a:	cc ec       	ldi	r28, 0xCC	; 204
    571c:	d1 e0       	ldi	r29, 0x01	; 1
    571e:	98 81       	ld	r25, Y
    5720:	98 60       	ori	r25, 0x08	; 8
    5722:	98 83       	st	Y, r25
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    5724:	b9 01       	movw	r22, r18
    5726:	70 5f       	subi	r23, 0xF0	; 240
    5728:	cd 01       	movw	r24, r26
    572a:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <memcpy>
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    572e:	88 81       	ld	r24, Y
    5730:	87 7f       	andi	r24, 0xF7	; 247
    5732:	88 83       	st	Y, r24
	eeprom_disable_mapping();
}
    5734:	df 91       	pop	r29
    5736:	cf 91       	pop	r28
    5738:	08 95       	ret

0000573a <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    573a:	e0 ec       	ldi	r30, 0xC0	; 192
    573c:	f1 e0       	ldi	r31, 0x01	; 1
    573e:	87 85       	ldd	r24, Z+15	; 0x0f
    5740:	88 23       	and	r24, r24
    5742:	ec f3       	brlt	.-6      	; 0x573e <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    5744:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5748:	81 ff       	sbrs	r24, 1
    574a:	08 c0       	rjmp	.+16     	; 0x575c <nvm_eeprom_flush_buffer+0x22>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    574c:	86 e3       	ldi	r24, 0x36	; 54
    574e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5752:	61 e0       	ldi	r22, 0x01	; 1
    5754:	8b ec       	ldi	r24, 0xCB	; 203
    5756:	91 e0       	ldi	r25, 0x01	; 1
    5758:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
    575c:	08 95       	ret

0000575e <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    575e:	e0 ec       	ldi	r30, 0xC0	; 192
    5760:	f1 e0       	ldi	r31, 0x01	; 1
    5762:	97 85       	ldd	r25, Z+15	; 0x0f
    5764:	99 23       	and	r25, r25
    5766:	ec f3       	brlt	.-6      	; 0x5762 <nvm_eeprom_load_byte_to_buffer+0x4>
 *        write operations still needs to be done through IO register.
 */
static inline void eeprom_enable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB | NVM_EEMAPEN_bm;
    5768:	ac ec       	ldi	r26, 0xCC	; 204
    576a:	b1 e0       	ldi	r27, 0x01	; 1
    576c:	9c 91       	ld	r25, X
    576e:	98 60       	ori	r25, 0x08	; 8
    5770:	9c 93       	st	X, r25
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    5772:	e8 2f       	mov	r30, r24
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	f0 5f       	subi	r31, 0xF0	; 240
    5778:	60 83       	st	Z, r22
 *  IO mapped access is now enabled.
 */
static inline void eeprom_disable_mapping(void)
{
#if !XMEGA_E
	NVM_CTRLB = NVM_CTRLB & ~NVM_EEMAPEN_bm;
    577a:	8c 91       	ld	r24, X
    577c:	87 7f       	andi	r24, 0xF7	; 247
    577e:	8c 93       	st	X, r24
    5780:	08 95       	ret

00005782 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    5782:	ff 92       	push	r15
    5784:	0f 93       	push	r16
    5786:	1f 93       	push	r17
    5788:	cf 93       	push	r28
    578a:	df 93       	push	r29
    578c:	18 2f       	mov	r17, r24
    578e:	f9 2e       	mov	r15, r25
    5790:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    5792:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	nvm_eeprom_flush_buffer();
    5796:	0e 94 9d 2b 	call	0x573a	; 0x573a <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    579a:	e0 ec       	ldi	r30, 0xC0	; 192
    579c:	f1 e0       	ldi	r31, 0x01	; 1
    579e:	87 85       	ldd	r24, Z+15	; 0x0f
    57a0:	88 23       	and	r24, r24
    57a2:	ec f3       	brlt	.-6      	; 0x579e <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    57a4:	6c 2f       	mov	r22, r28
    57a6:	81 2f       	mov	r24, r17
    57a8:	0e 94 af 2b 	call	0x575e	; 0x575e <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    57ac:	c0 ec       	ldi	r28, 0xC0	; 192
    57ae:	d1 e0       	ldi	r29, 0x01	; 1
    57b0:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    57b2:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    57b4:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    57b6:	85 e3       	ldi	r24, 0x35	; 53
    57b8:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    57ba:	61 e0       	ldi	r22, 0x01	; 1
    57bc:	8b ec       	ldi	r24, 0xCB	; 203
    57be:	91 e0       	ldi	r25, 0x01	; 1
    57c0:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    57c4:	0a 87       	std	Y+10, r16	; 0x0a
}
    57c6:	df 91       	pop	r29
    57c8:	cf 91       	pop	r28
    57ca:	1f 91       	pop	r17
    57cc:	0f 91       	pop	r16
    57ce:	ff 90       	pop	r15
    57d0:	08 95       	ret

000057d2 <nvm_eeprom_load_page_to_buffer>:
 *       EEPROM write page operation.
 *
 * \param  values   Pointer to SRAM buffer containing an entire page.
 */
void nvm_eeprom_load_page_to_buffer(const uint8_t *values)
{
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	cf 93       	push	r28
    57d8:	8c 01       	movw	r16, r24
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    57da:	e0 ec       	ldi	r30, 0xC0	; 192
    57dc:	f1 e0       	ldi	r31, 0x01	; 1
    57de:	87 85       	ldd	r24, Z+15	; 0x0f
    57e0:	88 23       	and	r24, r24
    57e2:	ec f3       	brlt	.-6      	; 0x57de <nvm_eeprom_load_page_to_buffer+0xc>
    57e4:	c0 e0       	ldi	r28, 0x00	; 0
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, *values);
    57e6:	f8 01       	movw	r30, r16
    57e8:	61 91       	ld	r22, Z+
    57ea:	8f 01       	movw	r16, r30
    57ec:	8c 2f       	mov	r24, r28
    57ee:	0e 94 af 2b 	call	0x575e	; 0x575e <nvm_eeprom_load_byte_to_buffer>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    57f2:	cf 5f       	subi	r28, 0xFF	; 255
    57f4:	c0 32       	cpi	r28, 0x20	; 32
    57f6:	b9 f7       	brne	.-18     	; 0x57e6 <nvm_eeprom_load_page_to_buffer+0x14>
		nvm_eeprom_load_byte_to_buffer(i, *values);
		++values;
	}
}
    57f8:	cf 91       	pop	r28
    57fa:	1f 91       	pop	r17
    57fc:	0f 91       	pop	r16
    57fe:	08 95       	ret

00005800 <nvm_eeprom_atomic_write_page>:
 * locations that have not been loaded will be left untouched in EEPROM.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_atomic_write_page(uint8_t page_addr)
{
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	e0 ec       	ldi	r30, 0xC0	; 192
    5808:	f1 e0       	ldi	r31, 0x01	; 1
    580a:	97 85       	ldd	r25, Z+15	; 0x0f
    580c:	99 23       	and	r25, r25
    580e:	ec f3       	brlt	.-6      	; 0x580a <nvm_eeprom_atomic_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5810:	20 e2       	ldi	r18, 0x20	; 32
    5812:	82 9f       	mul	r24, r18
    5814:	c0 01       	movw	r24, r0
    5816:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5818:	c0 ec       	ldi	r28, 0xC0	; 192
    581a:	d1 e0       	ldi	r29, 0x01	; 1
    581c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    581e:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5820:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5822:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5824:	85 e3       	ldi	r24, 0x35	; 53
    5826:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5828:	61 e0       	ldi	r22, 0x01	; 1
    582a:	8b ec       	ldi	r24, 0xCB	; 203
    582c:	91 e0       	ldi	r25, 0x01	; 1
    582e:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	NVM.CMD = old_cmd;
    5832:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Atomic Write (Erase&Write) command
	nvm_issue_command(NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc);
}
    5834:	df 91       	pop	r29
    5836:	cf 91       	pop	r28
    5838:	1f 91       	pop	r17
    583a:	08 95       	ret

0000583c <nvm_eeprom_erase_and_write_buffer>:
 * \param address   the address to where to write
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
    583c:	cf 92       	push	r12
    583e:	df 92       	push	r13
    5840:	ef 92       	push	r14
    5842:	ff 92       	push	r15
    5844:	0f 93       	push	r16
    5846:	1f 93       	push	r17
    5848:	cf 93       	push	r28
    584a:	df 93       	push	r29
    584c:	ec 01       	movw	r28, r24
    584e:	7b 01       	movw	r14, r22
    5850:	8a 01       	movw	r16, r20
	while (len) {
    5852:	45 2b       	or	r20, r21
    5854:	69 f1       	breq	.+90     	; 0x58b0 <nvm_eeprom_erase_and_write_buffer+0x74>
		if (((address%EEPROM_PAGE_SIZE)==0) && (len>=EEPROM_PAGE_SIZE)) {
    5856:	ce 01       	movw	r24, r28
    5858:	8f 71       	andi	r24, 0x1F	; 31
    585a:	99 27       	eor	r25, r25
    585c:	89 2b       	or	r24, r25
    585e:	c1 f4       	brne	.+48     	; 0x5890 <nvm_eeprom_erase_and_write_buffer+0x54>
    5860:	00 32       	cpi	r16, 0x20	; 32
    5862:	11 05       	cpc	r17, r1
    5864:	a8 f0       	brcs	.+42     	; 0x5890 <nvm_eeprom_erase_and_write_buffer+0x54>
			// A full page can be written
			nvm_eeprom_load_page_to_buffer((uint8_t*)buf);
    5866:	c7 01       	movw	r24, r14
    5868:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <nvm_eeprom_load_page_to_buffer>
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
    586c:	ce 01       	movw	r24, r28
    586e:	96 95       	lsr	r25
    5870:	87 95       	ror	r24
    5872:	92 95       	swap	r25
    5874:	82 95       	swap	r24
    5876:	8f 70       	andi	r24, 0x0F	; 15
    5878:	89 27       	eor	r24, r25
    587a:	9f 70       	andi	r25, 0x0F	; 15
    587c:	89 27       	eor	r24, r25
    587e:	0e 94 00 2c 	call	0x5800	; 0x5800 <nvm_eeprom_atomic_write_page>
			address += EEPROM_PAGE_SIZE;
    5882:	a0 96       	adiw	r28, 0x20	; 32
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
    5884:	80 e2       	ldi	r24, 0x20	; 32
    5886:	e8 0e       	add	r14, r24
    5888:	f1 1c       	adc	r15, r1
			len -= EEPROM_PAGE_SIZE;
    588a:	00 52       	subi	r16, 0x20	; 32
    588c:	11 09       	sbc	r17, r1
    588e:	0d c0       	rjmp	.+26     	; 0x58aa <nvm_eeprom_erase_and_write_buffer+0x6e>
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    5890:	6e 01       	movw	r12, r28
    5892:	ef ef       	ldi	r30, 0xFF	; 255
    5894:	ce 1a       	sub	r12, r30
    5896:	de 0a       	sbc	r13, r30
    5898:	f7 01       	movw	r30, r14
    589a:	61 91       	ld	r22, Z+
    589c:	7f 01       	movw	r14, r30
    589e:	ce 01       	movw	r24, r28
    58a0:	0e 94 c1 2b 	call	0x5782	; 0x5782 <nvm_eeprom_write_byte>
			buf = (uint8_t*)buf + 1;
			len--;
    58a4:	01 50       	subi	r16, 0x01	; 1
    58a6:	11 09       	sbc	r17, r1
			nvm_eeprom_atomic_write_page(address/EEPROM_PAGE_SIZE);
			address += EEPROM_PAGE_SIZE;
			buf = (uint8_t*)buf + EEPROM_PAGE_SIZE;
			len -= EEPROM_PAGE_SIZE;
		} else {
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
    58a8:	e6 01       	movw	r28, r12
 * \param buf       pointer to the data
 * \param len       the number of bytes to write
 */
void nvm_eeprom_erase_and_write_buffer(eeprom_addr_t address, const void *buf, uint16_t len)
{
	while (len) {
    58aa:	01 15       	cp	r16, r1
    58ac:	11 05       	cpc	r17, r1
    58ae:	99 f6       	brne	.-90     	; 0x5856 <nvm_eeprom_erase_and_write_buffer+0x1a>
			nvm_eeprom_write_byte(address++, *(uint8_t*)buf);
			buf = (uint8_t*)buf + 1;
			len--;
		}
	}
}
    58b0:	df 91       	pop	r29
    58b2:	cf 91       	pop	r28
    58b4:	1f 91       	pop	r17
    58b6:	0f 91       	pop	r16
    58b8:	ff 90       	pop	r15
    58ba:	ef 90       	pop	r14
    58bc:	df 90       	pop	r13
    58be:	cf 90       	pop	r12
    58c0:	08 95       	ret

000058c2 <nvm_eeprom_split_write_page>:
 * before writing.
 *
 * \param  page_addr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_split_write_page(uint8_t page_addr)
{
    58c2:	1f 93       	push	r17
    58c4:	cf 93       	push	r28
    58c6:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    58c8:	e0 ec       	ldi	r30, 0xC0	; 192
    58ca:	f1 e0       	ldi	r31, 0x01	; 1
    58cc:	97 85       	ldd	r25, Z+15	; 0x0f
    58ce:	99 23       	and	r25, r25
    58d0:	ec f3       	brlt	.-6      	; 0x58cc <nvm_eeprom_split_write_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    58d2:	20 e2       	ldi	r18, 0x20	; 32
    58d4:	82 9f       	mul	r24, r18
    58d6:	c0 01       	movw	r24, r0
    58d8:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    58da:	c0 ec       	ldi	r28, 0xC0	; 192
    58dc:	d1 e0       	ldi	r29, 0x01	; 1
    58de:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    58e0:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    58e2:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    58e4:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    58e6:	84 e3       	ldi	r24, 0x34	; 52
    58e8:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    58ea:	61 e0       	ldi	r22, 0x01	; 1
    58ec:	8b ec       	ldi	r24, 0xCB	; 203
    58ee:	91 e0       	ldi	r25, 0x01	; 1
    58f0:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	NVM.CMD = old_cmd;
    58f4:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Split Write command
	nvm_issue_command(NVM_CMD_WRITE_EEPROM_PAGE_gc);
}
    58f6:	df 91       	pop	r29
    58f8:	cf 91       	pop	r28
    58fa:	1f 91       	pop	r17
    58fc:	08 95       	ret

000058fe <nvm_eeprom_fill_buffer_with_value>:
 *       EEPROM write page operation.
 *
 * \param  value Value to copy to the page buffer.
 */
void nvm_eeprom_fill_buffer_with_value(uint8_t value)
{
    58fe:	cf 93       	push	r28
    5900:	df 93       	push	r29
    5902:	d8 2f       	mov	r29, r24
	nvm_eeprom_flush_buffer();
    5904:	0e 94 9d 2b 	call	0x573a	; 0x573a <nvm_eeprom_flush_buffer>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5908:	e0 ec       	ldi	r30, 0xC0	; 192
    590a:	f1 e0       	ldi	r31, 0x01	; 1
    590c:	87 85       	ldd	r24, Z+15	; 0x0f
    590e:	88 23       	and	r24, r24
    5910:	ec f3       	brlt	.-6      	; 0x590c <nvm_eeprom_fill_buffer_with_value+0xe>
    5912:	c0 e0       	ldi	r28, 0x00	; 0
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
		nvm_eeprom_load_byte_to_buffer(i, value);
    5914:	6d 2f       	mov	r22, r29
    5916:	8c 2f       	mov	r24, r28
    5918:	0e 94 af 2b 	call	0x575e	; 0x575e <nvm_eeprom_load_byte_to_buffer>
	nvm_eeprom_flush_buffer();
	// Wait until NVM is ready
	nvm_wait_until_ready();
	// Load multiple bytes into page buffer
	uint8_t i;
	for (i = 0; i < EEPROM_PAGE_SIZE; ++i) {
    591c:	cf 5f       	subi	r28, 0xFF	; 255
    591e:	c0 32       	cpi	r28, 0x20	; 32
    5920:	c9 f7       	brne	.-14     	; 0x5914 <nvm_eeprom_fill_buffer_with_value+0x16>
		nvm_eeprom_load_byte_to_buffer(i, value);
	}
}
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	08 95       	ret

00005928 <nvm_eeprom_erase_bytes_in_page>:
 * written to in the page buffer reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_bytes_in_page(uint8_t page_addr)
{
    5928:	1f 93       	push	r17
    592a:	cf 93       	push	r28
    592c:	df 93       	push	r29
    592e:	e0 ec       	ldi	r30, 0xC0	; 192
    5930:	f1 e0       	ldi	r31, 0x01	; 1
    5932:	97 85       	ldd	r25, Z+15	; 0x0f
    5934:	99 23       	and	r25, r25
    5936:	ec f3       	brlt	.-6      	; 0x5932 <nvm_eeprom_erase_bytes_in_page+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Calculate page address
	uint16_t address = (uint16_t)(page_addr * EEPROM_PAGE_SIZE);
    5938:	20 e2       	ldi	r18, 0x20	; 32
    593a:	82 9f       	mul	r24, r18
    593c:	c0 01       	movw	r24, r0
    593e:	11 24       	eor	r1, r1

	Assert(address <= EEPROM_SIZE);

	// Set address
	NVM.ADDR2 = 0x00;
    5940:	c0 ec       	ldi	r28, 0xC0	; 192
    5942:	d1 e0       	ldi	r29, 0x01	; 1
    5944:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    5946:	99 83       	std	Y+1, r25	; 0x01
	NVM.ADDR0 = address & 0xFF;
    5948:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    594a:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    594c:	82 e3       	ldi	r24, 0x32	; 50
    594e:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5950:	61 e0       	ldi	r22, 0x01	; 1
    5952:	8b ec       	ldi	r24, 0xCB	; 203
    5954:	91 e0       	ldi	r25, 0x01	; 1
    5956:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	NVM.CMD = old_cmd;
    595a:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue EEPROM Erase command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_PAGE_gc);
}
    595c:	df 91       	pop	r29
    595e:	cf 91       	pop	r28
    5960:	1f 91       	pop	r17
    5962:	08 95       	ret

00005964 <nvm_eeprom_erase_page>:
 * This function erases one EEPROM page, so that every location reads 0xFF.
 *
 * \param page_addr EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGE_SIZE
 */
void nvm_eeprom_erase_page(uint8_t page_addr)
{
    5964:	cf 93       	push	r28
    5966:	c8 2f       	mov	r28, r24
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    5968:	8f ef       	ldi	r24, 0xFF	; 255
    596a:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <nvm_eeprom_fill_buffer_with_value>
	// Erase bytes
	nvm_eeprom_erase_bytes_in_page(page_addr);
    596e:	8c 2f       	mov	r24, r28
    5970:	0e 94 94 2c 	call	0x5928	; 0x5928 <nvm_eeprom_erase_bytes_in_page>
}
    5974:	cf 91       	pop	r28
    5976:	08 95       	ret

00005978 <nvm_eeprom_erase_bytes_in_all_pages>:
 *
 * This function erases bytes from all EEPROM pages, so that every location
 * written to in the page buffer reads 0xFF.
 */
void nvm_eeprom_erase_bytes_in_all_pages(void)
{
    5978:	1f 93       	push	r17
    597a:	cf 93       	push	r28
    597c:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    597e:	e0 ec       	ldi	r30, 0xC0	; 192
    5980:	f1 e0       	ldi	r31, 0x01	; 1
    5982:	87 85       	ldd	r24, Z+15	; 0x0f
    5984:	88 23       	and	r24, r24
    5986:	ec f3       	brlt	.-6      	; 0x5982 <nvm_eeprom_erase_bytes_in_all_pages+0xa>
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5988:	c0 ec       	ldi	r28, 0xC0	; 192
    598a:	d1 e0       	ldi	r29, 0x01	; 1
    598c:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    598e:	80 e3       	ldi	r24, 0x30	; 48
    5990:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5992:	61 e0       	ldi	r22, 0x01	; 1
    5994:	8b ec       	ldi	r24, 0xCB	; 203
    5996:	91 e0       	ldi	r25, 0x01	; 1
    5998:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	NVM.CMD = old_cmd;
    599c:	1a 87       	std	Y+10, r17	; 0x0a
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Issue EEPROM Erase All command
	nvm_issue_command(NVM_CMD_ERASE_EEPROM_gc);
}
    599e:	df 91       	pop	r29
    59a0:	cf 91       	pop	r28
    59a2:	1f 91       	pop	r17
    59a4:	08 95       	ret

000059a6 <nvm_eeprom_erase_all>:
 * This function erases the entire EEPROM memory block to 0xFF.
 */
void nvm_eeprom_erase_all(void)
{
	// Mark all addresses to be deleted
	nvm_eeprom_fill_buffer_with_value(0xff);
    59a6:	8f ef       	ldi	r24, 0xFF	; 255
    59a8:	0e 94 7f 2c 	call	0x58fe	; 0x58fe <nvm_eeprom_fill_buffer_with_value>
	// Erase all pages
	nvm_eeprom_erase_bytes_in_all_pages();
    59ac:	0e 94 bc 2c 	call	0x5978	; 0x5978 <nvm_eeprom_erase_bytes_in_all_pages>
    59b0:	08 95       	ret

000059b2 <nvm_issue_flash_range_crc>:
 *
 * \param start_addr  end byte address
 * \param end_addr    start byte address
 */
void nvm_issue_flash_range_crc(flash_addr_t start_addr, flash_addr_t end_addr)
{
    59b2:	cf 92       	push	r12
    59b4:	df 92       	push	r13
    59b6:	ef 92       	push	r14
    59b8:	ff 92       	push	r15
    59ba:	1f 93       	push	r17
    59bc:	cf 93       	push	r28
    59be:	df 93       	push	r29
	uint8_t old_cmd;
	// Save current nvm command
	old_cmd = NVM.CMD;
    59c0:	c0 ec       	ldi	r28, 0xC0	; 192
    59c2:	d1 e0       	ldi	r29, 0x01	; 1
    59c4:	1a 85       	ldd	r17, Y+10	; 0x0a

	// Load the NVM CMD register with the Flash Range CRC command
	NVM.CMD = NVM_CMD_FLASH_RANGE_CRC_gc;
    59c6:	ea e3       	ldi	r30, 0x3A	; 58
    59c8:	ea 87       	std	Y+10, r30	; 0x0a

	// Load the start byte address in the NVM Address Register
	NVM.ADDR0 = start_addr & 0xFF;
    59ca:	68 83       	st	Y, r22
	NVM.ADDR1 = (start_addr >> 8) & 0xFF;
    59cc:	c7 2e       	mov	r12, r23
    59ce:	d8 2e       	mov	r13, r24
    59d0:	e9 2e       	mov	r14, r25
    59d2:	ff 24       	eor	r15, r15
    59d4:	c9 82       	std	Y+1, r12	; 0x01
#if (FLASH_SIZE >= 0x10000UL)
	NVM.ADDR2 = (start_addr >> 16) & 0xFF;
    59d6:	aa 27       	eor	r26, r26
    59d8:	bb 27       	eor	r27, r27
    59da:	8a 83       	std	Y+2, r24	; 0x02
#endif

	// Load the end byte address in NVM Data Register
	NVM.DATA0 = end_addr & 0xFF;
    59dc:	2c 83       	std	Y+4, r18	; 0x04
	NVM.DATA1 = (end_addr >> 8) & 0xFF;
    59de:	bb 27       	eor	r27, r27
    59e0:	a5 2f       	mov	r26, r21
    59e2:	94 2f       	mov	r25, r20
    59e4:	83 2f       	mov	r24, r19
    59e6:	8d 83       	std	Y+5, r24	; 0x05
#if (FLASH_SIZE >= 0x10000UL)
	NVM.DATA2 = (end_addr >> 16) & 0xFF;
    59e8:	ca 01       	movw	r24, r20
    59ea:	aa 27       	eor	r26, r26
    59ec:	bb 27       	eor	r27, r27
    59ee:	8e 83       	std	Y+6, r24	; 0x06
#endif

	// Execute command
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    59f0:	61 e0       	ldi	r22, 0x01	; 1
    59f2:	8b ec       	ldi	r24, 0xCB	; 203
    59f4:	91 e0       	ldi	r25, 0x01	; 1
    59f6:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>

	// Restore command register
	NVM.CMD = old_cmd;
    59fa:	1a 87       	std	Y+10, r17	; 0x0a
}
    59fc:	df 91       	pop	r29
    59fe:	cf 91       	pop	r28
    5a00:	1f 91       	pop	r17
    5a02:	ff 90       	pop	r15
    5a04:	ef 90       	pop	r14
    5a06:	df 90       	pop	r13
    5a08:	cf 90       	pop	r12
    5a0a:	08 95       	ret

00005a0c <nvm_flash_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_flash_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    5a0c:	da 01       	movw	r26, r20
    5a0e:	a9 01       	movw	r20, r18
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5a10:	e0 ec       	ldi	r30, 0xC0	; 192
    5a12:	f1 e0       	ldi	r31, 0x01	; 1
    5a14:	37 85       	ldd	r19, Z+15	; 0x0f
    5a16:	33 23       	and	r19, r19
    5a18:	ec f3       	brlt	.-6      	; 0x5a14 <nvm_flash_read_buffer+0x8>
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    5a1a:	41 15       	cp	r20, r1
    5a1c:	51 05       	cpc	r21, r1
    5a1e:	79 f0       	breq	.+30     	; 0x5a3e <nvm_flash_read_buffer+0x32>
    5a20:	4a 0f       	add	r20, r26
    5a22:	5b 1f       	adc	r21, r27
 * \return Byte from program memory
 */
static inline uint8_t nvm_flash_read_byte(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_byte_far(addr);
    5a24:	0b b6       	in	r0, 0x3b	; 59
    5a26:	8b bf       	out	0x3b, r24	; 59
    5a28:	fb 01       	movw	r30, r22
    5a2a:	37 91       	elpm	r19, Z+
    5a2c:	0b be       	out	0x3b, r0	; 59
		*(uint8_t*)buf = nvm_flash_read_byte(opt_address);
    5a2e:	3d 93       	st	X+, r19
		buf=(uint8_t*)buf+1;
		opt_address++;
    5a30:	6f 5f       	subi	r22, 0xFF	; 255
    5a32:	7f 4f       	sbci	r23, 0xFF	; 255
    5a34:	8f 4f       	sbci	r24, 0xFF	; 255
    5a36:	9f 4f       	sbci	r25, 0xFF	; 255
	uint32_t opt_address = address;
#else
	uint16_t opt_address = (uint16_t)address;
#endif
	nvm_wait_until_ready();
	while ( len ) {
    5a38:	a4 17       	cp	r26, r20
    5a3a:	b5 07       	cpc	r27, r21
    5a3c:	99 f7       	brne	.-26     	; 0x5a24 <nvm_flash_read_buffer+0x18>
    5a3e:	08 95       	ret

00005a40 <nvm_user_sig_read_buffer>:
 * \param address	the address to where to read
 * \param buf		pointer to the data
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
    5a40:	ef 92       	push	r14
    5a42:	ff 92       	push	r15
    5a44:	0f 93       	push	r16
    5a46:	1f 93       	push	r17
    5a48:	cf 93       	push	r28
    5a4a:	df 93       	push	r29
    5a4c:	7a 01       	movw	r14, r20
    5a4e:	89 01       	movw	r16, r18
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
    5a50:	eb 01       	movw	r28, r22
    5a52:	d1 70       	andi	r29, 0x01	; 1
	while ( len ) {
    5a54:	23 2b       	or	r18, r19
    5a56:	59 f0       	breq	.+22     	; 0x5a6e <nvm_user_sig_read_buffer+0x2e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_user_signature_row(uint16_t address)
{
	return nvm_read_byte(NVM_CMD_READ_USER_SIG_ROW_gc, address);
    5a58:	be 01       	movw	r22, r28
    5a5a:	81 e0       	ldi	r24, 0x01	; 1
    5a5c:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
    5a60:	f7 01       	movw	r30, r14
    5a62:	81 93       	st	Z+, r24
    5a64:	7f 01       	movw	r14, r30
		buf=(uint8_t*)buf+1;
		opt_address++;
    5a66:	21 96       	adiw	r28, 0x01	; 1
		len--;
    5a68:	01 50       	subi	r16, 0x01	; 1
    5a6a:	11 09       	sbc	r17, r1
 * \param len		the number of bytes to read
 */
void nvm_user_sig_read_buffer(flash_addr_t address, void *buf, uint16_t len)
{
	uint16_t opt_address = (uint16_t)address&(FLASH_PAGE_SIZE-1);
	while ( len ) {
    5a6c:	a9 f7       	brne	.-22     	; 0x5a58 <nvm_user_sig_read_buffer+0x18>
		*(uint8_t*)buf = nvm_read_user_signature_row(opt_address);
		buf=(uint8_t*)buf+1;
		opt_address++;
		len--;
	}
}
    5a6e:	df 91       	pop	r29
    5a70:	cf 91       	pop	r28
    5a72:	1f 91       	pop	r17
    5a74:	0f 91       	pop	r16
    5a76:	ff 90       	pop	r15
    5a78:	ef 90       	pop	r14
    5a7a:	08 95       	ret

00005a7c <nvm_user_sig_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5a7c:	2f 92       	push	r2
    5a7e:	3f 92       	push	r3
    5a80:	4f 92       	push	r4
    5a82:	5f 92       	push	r5
    5a84:	6f 92       	push	r6
    5a86:	7f 92       	push	r7
    5a88:	8f 92       	push	r8
    5a8a:	9f 92       	push	r9
    5a8c:	af 92       	push	r10
    5a8e:	bf 92       	push	r11
    5a90:	cf 92       	push	r12
    5a92:	df 92       	push	r13
    5a94:	ef 92       	push	r14
    5a96:	ff 92       	push	r15
    5a98:	0f 93       	push	r16
    5a9a:	1f 93       	push	r17
    5a9c:	cf 93       	push	r28
    5a9e:	df 93       	push	r29
    5aa0:	00 d0       	rcall	.+0      	; 0x5aa2 <nvm_user_sig_write_buffer+0x26>
    5aa2:	1f 92       	push	r1
    5aa4:	cd b7       	in	r28, 0x3d	; 61
    5aa6:	de b7       	in	r29, 0x3e	; 62
    5aa8:	4b 83       	std	Y+3, r20	; 0x03
    5aaa:	5c 83       	std	Y+4, r21	; 0x04
    5aac:	79 01       	movw	r14, r18
    5aae:	30 2e       	mov	r3, r16
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
    5ab0:	6b 01       	movw	r12, r22
	bool b_flag_erase = false;

	while ( len ) {
    5ab2:	23 2b       	or	r18, r19
    5ab4:	09 f0       	breq	.+2      	; 0x5ab8 <nvm_user_sig_write_buffer+0x3c>
    5ab6:	51 c0       	rjmp	.+162    	; 0x5b5a <nvm_user_sig_write_buffer+0xde>
    5ab8:	67 c0       	rjmp	.+206    	; 0x5b88 <nvm_user_sig_write_buffer+0x10c>
    5aba:	52 01       	movw	r10, r4
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5abc:	33 20       	and	r3, r3
    5abe:	89 f0       	breq	.+34     	; 0x5ae2 <nvm_user_sig_write_buffer+0x66>
    5ac0:	b2 01       	movw	r22, r4
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
				// Read flash to know if the erase command is mandatory
				LSB(w_value) = nvm_read_user_signature_row(page_pos);
    5ac8:	89 83       	std	Y+1, r24	; 0x01
    5aca:	b8 01       	movw	r22, r16
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <nvm_read_byte>
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
    5ad2:	8a 83       	std	Y+2, r24	; 0x02
				if (w_value!=0xFFFF) {
    5ad4:	89 81       	ldd	r24, Y+1	; 0x01
    5ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ad8:	01 96       	adiw	r24, 0x01	; 1
    5ada:	29 f0       	breq	.+10     	; 0x5ae6 <nvm_user_sig_write_buffer+0x6a>
					b_flag_erase = true; // The page is not empty
    5adc:	22 24       	eor	r2, r2
    5ade:	23 94       	inc	r2
    5ae0:	02 c0       	rjmp	.+4      	; 0x5ae6 <nvm_user_sig_write_buffer+0x6a>
				}
			}else{
				w_value = 0xFFFF;
    5ae2:	89 82       	std	Y+1, r8	; 0x01
    5ae4:	9a 82       	std	Y+2, r9	; 0x02
			}
			// Update flash buffer
			if (len) {
    5ae6:	e1 14       	cp	r14, r1
    5ae8:	f1 04       	cpc	r15, r1
    5aea:	09 f1       	breq	.+66     	; 0x5b2e <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == page_pos) {
    5aec:	ac 14       	cp	r10, r12
    5aee:	bd 04       	cpc	r11, r13
    5af0:	79 f4       	brne	.+30     	; 0x5b10 <nvm_user_sig_write_buffer+0x94>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5af2:	81 e0       	ldi	r24, 0x01	; 1
    5af4:	e8 1a       	sub	r14, r24
    5af6:	f1 08       	sbc	r15, r1
					opt_address++;
    5af8:	ef ef       	ldi	r30, 0xFF	; 255
    5afa:	ce 1a       	sub	r12, r30
    5afc:	de 0a       	sbc	r13, r30
					LSB(w_value)=*(uint8_t*)buf;
    5afe:	eb 81       	ldd	r30, Y+3	; 0x03
    5b00:	fc 81       	ldd	r31, Y+4	; 0x04
    5b02:	81 91       	ld	r24, Z+
    5b04:	eb 83       	std	Y+3, r30	; 0x03
    5b06:	fc 83       	std	Y+4, r31	; 0x04
    5b08:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    5b0a:	e1 14       	cp	r14, r1
    5b0c:	f1 04       	cpc	r15, r1
    5b0e:	79 f0       	breq	.+30     	; 0x5b2e <nvm_user_sig_write_buffer+0xb2>
				if (opt_address == (page_pos+1)) {
    5b10:	c0 16       	cp	r12, r16
    5b12:	d1 06       	cpc	r13, r17
    5b14:	61 f4       	brne	.+24     	; 0x5b2e <nvm_user_sig_write_buffer+0xb2>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5b16:	f1 e0       	ldi	r31, 0x01	; 1
    5b18:	ef 1a       	sub	r14, r31
    5b1a:	f1 08       	sbc	r15, r1
					opt_address++;
    5b1c:	2f ef       	ldi	r18, 0xFF	; 255
    5b1e:	c2 1a       	sub	r12, r18
    5b20:	d2 0a       	sbc	r13, r18
					MSB(w_value)=*(uint8_t*)buf;
    5b22:	eb 81       	ldd	r30, Y+3	; 0x03
    5b24:	fc 81       	ldd	r31, Y+4	; 0x04
    5b26:	81 91       	ld	r24, Z+
    5b28:	eb 83       	std	Y+3, r30	; 0x03
    5b2a:	fc 83       	std	Y+4, r31	; 0x04
    5b2c:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
    5b2e:	49 81       	ldd	r20, Y+1	; 0x01
    5b30:	5a 81       	ldd	r21, Y+2	; 0x02
    5b32:	c3 01       	movw	r24, r6
    5b34:	b2 01       	movw	r22, r4
    5b36:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
    5b3a:	f2 e0       	ldi	r31, 0x02	; 2
    5b3c:	4f 0e       	add	r4, r31
    5b3e:	51 1c       	adc	r5, r1
    5b40:	61 1c       	adc	r6, r1
    5b42:	71 1c       	adc	r7, r1
    5b44:	0e 5f       	subi	r16, 0xFE	; 254
    5b46:	1f 4f       	sbci	r17, 0xFF	; 255
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    5b48:	01 30       	cpi	r16, 0x01	; 1
    5b4a:	22 e0       	ldi	r18, 0x02	; 2
    5b4c:	12 07       	cpc	r17, r18
    5b4e:	09 f0       	breq	.+2      	; 0x5b52 <nvm_user_sig_write_buffer+0xd6>
    5b50:	b4 cf       	rjmp	.-152    	; 0x5aba <nvm_user_sig_write_buffer+0x3e>
	uint16_t w_value;
	uint16_t page_pos;
	uint16_t opt_address = (uint16_t)address;
	bool b_flag_erase = false;

	while ( len ) {
    5b52:	e1 14       	cp	r14, r1
    5b54:	f1 04       	cpc	r15, r1
    5b56:	29 f4       	brne	.+10     	; 0x5b62 <nvm_user_sig_write_buffer+0xe6>
    5b58:	0a c0       	rjmp	.+20     	; 0x5b6e <nvm_user_sig_write_buffer+0xf2>
    5b5a:	21 2c       	mov	r2, r1
				MSB(w_value) = nvm_read_user_signature_row(page_pos+1);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    5b5c:	88 24       	eor	r8, r8
    5b5e:	8a 94       	dec	r8
    5b60:	98 2c       	mov	r9, r8
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_user_sig_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5b62:	01 e0       	ldi	r16, 0x01	; 1
    5b64:	10 e0       	ldi	r17, 0x00	; 0
    5b66:	41 2c       	mov	r4, r1
    5b68:	51 2c       	mov	r5, r1
    5b6a:	32 01       	movw	r6, r4
    5b6c:	a6 cf       	rjmp	.-180    	; 0x5aba <nvm_user_sig_write_buffer+0x3e>
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_pos,w_value);
		}
	}
	// Write flash buffer
	if (b_flag_erase) {
    5b6e:	22 20       	and	r2, r2
    5b70:	59 f0       	breq	.+22     	; 0x5b88 <nvm_user_sig_write_buffer+0x10c>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b72:	e0 ec       	ldi	r30, 0xC0	; 192
    5b74:	f1 e0       	ldi	r31, 0x01	; 1
    5b76:	87 85       	ldd	r24, Z+15	; 0x0f
    5b78:	88 23       	and	r24, r24
    5b7a:	ec f3       	brlt	.-6      	; 0x5b76 <nvm_user_sig_write_buffer+0xfa>
 * parameters are needed.
 */
static inline void nvm_flash_erase_user_section(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_ERASE_USER_SIG_ROW_gc);
    5b7c:	48 e1       	ldi	r20, 0x18	; 24
    5b7e:	60 e0       	ldi	r22, 0x00	; 0
    5b80:	70 e0       	ldi	r23, 0x00	; 0
    5b82:	cb 01       	movw	r24, r22
    5b84:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5b88:	e0 ec       	ldi	r30, 0xC0	; 192
    5b8a:	f1 e0       	ldi	r31, 0x01	; 1
    5b8c:	87 85       	ldd	r24, Z+15	; 0x0f
    5b8e:	88 23       	and	r24, r24
    5b90:	ec f3       	brlt	.-6      	; 0x5b8c <nvm_user_sig_write_buffer+0x110>
 * parameters are needed.
 */
static inline void nvm_flash_write_user_page(void)
{
	nvm_wait_until_ready();
	nvm_common_spm(0, NVM_CMD_WRITE_USER_SIG_ROW_gc);
    5b92:	4a e1       	ldi	r20, 0x1A	; 26
    5b94:	60 e0       	ldi	r22, 0x00	; 0
    5b96:	70 e0       	ldi	r23, 0x00	; 0
    5b98:	cb 01       	movw	r24, r22
    5b9a:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
		nvm_flash_erase_user_section();
	}
	nvm_flash_write_user_page();
}
    5b9e:	24 96       	adiw	r28, 0x04	; 4
    5ba0:	cd bf       	out	0x3d, r28	; 61
    5ba2:	de bf       	out	0x3e, r29	; 62
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	1f 91       	pop	r17
    5baa:	0f 91       	pop	r16
    5bac:	ff 90       	pop	r15
    5bae:	ef 90       	pop	r14
    5bb0:	df 90       	pop	r13
    5bb2:	cf 90       	pop	r12
    5bb4:	bf 90       	pop	r11
    5bb6:	af 90       	pop	r10
    5bb8:	9f 90       	pop	r9
    5bba:	8f 90       	pop	r8
    5bbc:	7f 90       	pop	r7
    5bbe:	6f 90       	pop	r6
    5bc0:	5f 90       	pop	r5
    5bc2:	4f 90       	pop	r4
    5bc4:	3f 90       	pop	r3
    5bc6:	2f 90       	pop	r2
    5bc8:	08 95       	ret

00005bca <nvm_flash_erase_and_write_buffer>:
 *
 * Set b_blank_check to false if all application flash is erased before.
 */
void nvm_flash_erase_and_write_buffer(flash_addr_t address, const void *buf,
	uint16_t len, bool b_blank_check)
{
    5bca:	2f 92       	push	r2
    5bcc:	3f 92       	push	r3
    5bce:	4f 92       	push	r4
    5bd0:	5f 92       	push	r5
    5bd2:	6f 92       	push	r6
    5bd4:	7f 92       	push	r7
    5bd6:	8f 92       	push	r8
    5bd8:	9f 92       	push	r9
    5bda:	af 92       	push	r10
    5bdc:	bf 92       	push	r11
    5bde:	cf 92       	push	r12
    5be0:	df 92       	push	r13
    5be2:	ef 92       	push	r14
    5be4:	ff 92       	push	r15
    5be6:	0f 93       	push	r16
    5be8:	1f 93       	push	r17
    5bea:	cf 93       	push	r28
    5bec:	df 93       	push	r29
    5bee:	cd b7       	in	r28, 0x3d	; 61
    5bf0:	de b7       	in	r29, 0x3e	; 62
    5bf2:	2a 97       	sbiw	r28, 0x0a	; 10
    5bf4:	cd bf       	out	0x3d, r28	; 61
    5bf6:	de bf       	out	0x3e, r29	; 62
    5bf8:	2b 01       	movw	r4, r22
    5bfa:	3c 01       	movw	r6, r24
    5bfc:	1a 01       	movw	r2, r20
    5bfe:	59 01       	movw	r10, r18
	uint16_t page_address;
	uint16_t opt_address = (uint16_t)address;
#endif

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);
    5c00:	dc 01       	movw	r26, r24
    5c02:	cb 01       	movw	r24, r22
    5c04:	88 27       	eor	r24, r24
    5c06:	9e 7f       	andi	r25, 0xFE	; 254
    5c08:	8f 83       	std	Y+7, r24	; 0x07
    5c0a:	98 87       	std	Y+8, r25	; 0x08
    5c0c:	a9 87       	std	Y+9, r26	; 0x09
    5c0e:	ba 87       	std	Y+10, r27	; 0x0a

	// For each page
	while ( len ) {
    5c10:	23 2b       	or	r18, r19
    5c12:	09 f4       	brne	.+2      	; 0x5c16 <nvm_flash_erase_and_write_buffer+0x4c>
    5c14:	8d c0       	rjmp	.+282    	; 0x5d30 <nvm_flash_erase_and_write_buffer+0x166>
				w_value = nvm_flash_read_word(page_address);
				if (w_value!=0xFFFF) {
					b_flag_erase = true; // The page is not empty
				}
			}else{
				w_value = 0xFFFF;
    5c16:	88 24       	eor	r8, r8
    5c18:	8a 94       	dec	r8
    5c1a:	98 2c       	mov	r9, r8
    5c1c:	04 c0       	rjmp	.+8      	; 0x5c26 <nvm_flash_erase_and_write_buffer+0x5c>
    5c1e:	cf 82       	std	Y+7, r12	; 0x07
    5c20:	d8 86       	std	Y+8, r13	; 0x08
    5c22:	e9 86       	std	Y+9, r14	; 0x09
    5c24:	fa 86       	std	Y+10, r15	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5c26:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5c2a:	88 23       	and	r24, r24
    5c2c:	e4 f3       	brlt	.-8      	; 0x5c26 <nvm_flash_erase_and_write_buffer+0x5c>
    5c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    5c30:	98 85       	ldd	r25, Y+8	; 0x08
    5c32:	a9 85       	ldd	r26, Y+9	; 0x09
    5c34:	ba 85       	ldd	r27, Y+10	; 0x0a
    5c36:	9e 5f       	subi	r25, 0xFE	; 254
    5c38:	af 4f       	sbci	r26, 0xFF	; 255
    5c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    5c3c:	8b 83       	std	Y+3, r24	; 0x03
    5c3e:	9c 83       	std	Y+4, r25	; 0x04
    5c40:	ad 83       	std	Y+5, r26	; 0x05
    5c42:	be 83       	std	Y+6, r27	; 0x06
    5c44:	cf 80       	ldd	r12, Y+7	; 0x07
    5c46:	d8 84       	ldd	r13, Y+8	; 0x08
    5c48:	e9 84       	ldd	r14, Y+9	; 0x09
    5c4a:	fa 84       	ldd	r15, Y+10	; 0x0a
    5c4c:	10 e0       	ldi	r17, 0x00	; 0
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
			if (b_blank_check) {
    5c4e:	00 23       	and	r16, r16
    5c50:	61 f0       	breq	.+24     	; 0x5c6a <nvm_flash_erase_and_write_buffer+0xa0>
 * \return Word from program memory
 */
static inline uint16_t nvm_flash_read_word(flash_addr_t addr)
{
#if defined(__GNUC__)
	return pgm_read_word_far(addr);
    5c52:	0b b6       	in	r0, 0x3b	; 59
    5c54:	eb be       	out	0x3b, r14	; 59
    5c56:	f6 01       	movw	r30, r12
    5c58:	87 91       	elpm	r24, Z+
    5c5a:	96 91       	elpm	r25, Z
    5c5c:	0b be       	out	0x3b, r0	; 59
				// Read flash to know if the erase command is mandatory
				w_value = nvm_flash_read_word(page_address);
    5c5e:	89 83       	std	Y+1, r24	; 0x01
    5c60:	9a 83       	std	Y+2, r25	; 0x02
				if (w_value!=0xFFFF) {
    5c62:	01 96       	adiw	r24, 0x01	; 1
    5c64:	21 f0       	breq	.+8      	; 0x5c6e <nvm_flash_erase_and_write_buffer+0xa4>
					b_flag_erase = true; // The page is not empty
    5c66:	11 e0       	ldi	r17, 0x01	; 1
    5c68:	02 c0       	rjmp	.+4      	; 0x5c6e <nvm_flash_erase_and_write_buffer+0xa4>
				}
			}else{
				w_value = 0xFFFF;
    5c6a:	89 82       	std	Y+1, r8	; 0x01
    5c6c:	9a 82       	std	Y+2, r9	; 0x02
			}

			// Update flash buffer
			if (len) {
    5c6e:	a1 14       	cp	r10, r1
    5c70:	b1 04       	cpc	r11, r1
    5c72:	61 f1       	breq	.+88     	; 0x5ccc <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == page_address) {
    5c74:	c4 14       	cp	r12, r4
    5c76:	d5 04       	cpc	r13, r5
    5c78:	e6 04       	cpc	r14, r6
    5c7a:	f7 04       	cpc	r15, r7
    5c7c:	79 f4       	brne	.+30     	; 0x5c9c <nvm_flash_erase_and_write_buffer+0xd2>
					// The MSB of flash word must be changed
					// because the address is even
					len--;
    5c7e:	b1 e0       	ldi	r27, 0x01	; 1
    5c80:	ab 1a       	sub	r10, r27
    5c82:	b1 08       	sbc	r11, r1
					opt_address++;
    5c84:	ef ef       	ldi	r30, 0xFF	; 255
    5c86:	4e 1a       	sub	r4, r30
    5c88:	5e 0a       	sbc	r5, r30
    5c8a:	6e 0a       	sbc	r6, r30
    5c8c:	7e 0a       	sbc	r7, r30
					LSB(w_value)=*(uint8_t*)buf;
    5c8e:	d1 01       	movw	r26, r2
    5c90:	8d 91       	ld	r24, X+
    5c92:	1d 01       	movw	r2, r26
    5c94:	89 83       	std	Y+1, r24	; 0x01
					buf=(uint8_t*)buf+1;
				}
			}
			if (len) {
    5c96:	a1 14       	cp	r10, r1
    5c98:	b1 04       	cpc	r11, r1
    5c9a:	c1 f0       	breq	.+48     	; 0x5ccc <nvm_flash_erase_and_write_buffer+0x102>
				if (opt_address == (page_address+1)) {
    5c9c:	d7 01       	movw	r26, r14
    5c9e:	c6 01       	movw	r24, r12
    5ca0:	01 96       	adiw	r24, 0x01	; 1
    5ca2:	a1 1d       	adc	r26, r1
    5ca4:	b1 1d       	adc	r27, r1
    5ca6:	84 15       	cp	r24, r4
    5ca8:	95 05       	cpc	r25, r5
    5caa:	a6 05       	cpc	r26, r6
    5cac:	b7 05       	cpc	r27, r7
    5cae:	71 f4       	brne	.+28     	; 0x5ccc <nvm_flash_erase_and_write_buffer+0x102>
					// The LSB of flash word must be changed
					// because the user buffer is not empty
					len--;
    5cb0:	b1 e0       	ldi	r27, 0x01	; 1
    5cb2:	ab 1a       	sub	r10, r27
    5cb4:	b1 08       	sbc	r11, r1
					opt_address++;
    5cb6:	26 01       	movw	r4, r12
    5cb8:	37 01       	movw	r6, r14
    5cba:	e2 e0       	ldi	r30, 0x02	; 2
    5cbc:	4e 0e       	add	r4, r30
    5cbe:	51 1c       	adc	r5, r1
    5cc0:	61 1c       	adc	r6, r1
    5cc2:	71 1c       	adc	r7, r1
					MSB(w_value)=*(uint8_t*)buf;
    5cc4:	d1 01       	movw	r26, r2
    5cc6:	8d 91       	ld	r24, X+
    5cc8:	1d 01       	movw	r2, r26
    5cca:	8a 83       	std	Y+2, r24	; 0x02
					buf=(uint8_t*)buf+1;
				}
			}
			// Load flash buffer
			nvm_flash_load_word_to_buffer(page_address,w_value);
    5ccc:	49 81       	ldd	r20, Y+1	; 0x01
    5cce:	5a 81       	ldd	r21, Y+2	; 0x02
    5cd0:	c7 01       	movw	r24, r14
    5cd2:	b6 01       	movw	r22, r12
    5cd4:	0f 94 19 00 	call	0x20032	; 0x20032 <nvm_flash_load_word_to_buffer>
			page_address+=2;
    5cd8:	b2 e0       	ldi	r27, 0x02	; 2
    5cda:	cb 0e       	add	r12, r27
    5cdc:	d1 1c       	adc	r13, r1
    5cde:	e1 1c       	adc	r14, r1
    5ce0:	f1 1c       	adc	r15, r1
	// For each page
	while ( len ) {
		b_flag_erase = false;

		nvm_wait_until_ready();
		for (page_pos=0; page_pos<FLASH_PAGE_SIZE; page_pos+=2 ) {
    5ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ce6:	ad 81       	ldd	r26, Y+5	; 0x05
    5ce8:	be 81       	ldd	r27, Y+6	; 0x06
    5cea:	c8 16       	cp	r12, r24
    5cec:	d9 06       	cpc	r13, r25
    5cee:	ea 06       	cpc	r14, r26
    5cf0:	fb 06       	cpc	r15, r27
    5cf2:	09 f0       	breq	.+2      	; 0x5cf6 <nvm_flash_erase_and_write_buffer+0x12c>
    5cf4:	ac cf       	rjmp	.-168    	; 0x5c4e <nvm_flash_erase_and_write_buffer+0x84>
			nvm_flash_load_word_to_buffer(page_address,w_value);
			page_address+=2;
		}

		// Write flash buffer
		if (b_flag_erase) {
    5cf6:	11 23       	and	r17, r17
    5cf8:	61 f0       	breq	.+24     	; 0x5d12 <nvm_flash_erase_and_write_buffer+0x148>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
    5cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    5cfc:	78 85       	ldd	r23, Y+8	; 0x08
    5cfe:	89 85       	ldd	r24, Y+9	; 0x09
    5d00:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5d02:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5d06:	22 23       	and	r18, r18
    5d08:	e4 f3       	brlt	.-8      	; 0x5d02 <nvm_flash_erase_and_write_buffer+0x138>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_atomic_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_ERASE_WRITE_APP_PAGE_gc);
    5d0a:	45 e2       	ldi	r20, 0x25	; 37
    5d0c:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>
    5d10:	0b c0       	rjmp	.+22     	; 0x5d28 <nvm_flash_erase_and_write_buffer+0x15e>
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
    5d12:	6f 81       	ldd	r22, Y+7	; 0x07
    5d14:	78 85       	ldd	r23, Y+8	; 0x08
    5d16:	89 85       	ldd	r24, Y+9	; 0x09
    5d18:	9a 85       	ldd	r25, Y+10	; 0x0a
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5d1a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
    5d1e:	22 23       	and	r18, r18
    5d20:	e4 f3       	brlt	.-8      	; 0x5d1a <nvm_flash_erase_and_write_buffer+0x150>
 * \param page_addr Byte address to the page to delete
 */
static inline void nvm_flash_split_write_app_page(flash_addr_t page_addr)
{
	nvm_wait_until_ready();
	nvm_common_spm(page_addr, NVM_CMD_WRITE_APP_PAGE_gc);
    5d22:	44 e2       	ldi	r20, 0x24	; 36
    5d24:	0f 94 0a 00 	call	0x20014	; 0x20014 <nvm_common_spm>

	// Compute the start of the page to be modified
	page_address = opt_address-(opt_address%FLASH_PAGE_SIZE);

	// For each page
	while ( len ) {
    5d28:	a1 14       	cp	r10, r1
    5d2a:	b1 04       	cpc	r11, r1
    5d2c:	09 f0       	breq	.+2      	; 0x5d30 <nvm_flash_erase_and_write_buffer+0x166>
    5d2e:	77 cf       	rjmp	.-274    	; 0x5c1e <nvm_flash_erase_and_write_buffer+0x54>
			nvm_flash_atomic_write_app_page(page_address-FLASH_PAGE_SIZE);
		}else{
			nvm_flash_split_write_app_page(page_address-FLASH_PAGE_SIZE);
		}
	}
}
    5d30:	2a 96       	adiw	r28, 0x0a	; 10
    5d32:	cd bf       	out	0x3d, r28	; 61
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	df 91       	pop	r29
    5d38:	cf 91       	pop	r28
    5d3a:	1f 91       	pop	r17
    5d3c:	0f 91       	pop	r16
    5d3e:	ff 90       	pop	r15
    5d40:	ef 90       	pop	r14
    5d42:	df 90       	pop	r13
    5d44:	cf 90       	pop	r12
    5d46:	bf 90       	pop	r11
    5d48:	af 90       	pop	r10
    5d4a:	9f 90       	pop	r9
    5d4c:	8f 90       	pop	r8
    5d4e:	7f 90       	pop	r7
    5d50:	6f 90       	pop	r6
    5d52:	5f 90       	pop	r5
    5d54:	4f 90       	pop	r4
    5d56:	3f 90       	pop	r3
    5d58:	2f 90       	pop	r2
    5d5a:	08 95       	ret

00005d5c <nvm_fuses_read>:
 * \param fuse Fuse byte to read.
 *
 * \return  Byte value of fuse.
 */
uint8_t nvm_fuses_read(enum fuse_byte_t fuse)
{
    5d5c:	1f 93       	push	r17
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    5d62:	e0 ec       	ldi	r30, 0xC0	; 192
    5d64:	f1 e0       	ldi	r31, 0x01	; 1
    5d66:	97 85       	ldd	r25, Z+15	; 0x0f
    5d68:	99 23       	and	r25, r25
    5d6a:	ec f3       	brlt	.-6      	; 0x5d66 <nvm_fuses_read+0xa>
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Set address
	NVM.ADDR0 = fuse;
    5d6c:	c0 ec       	ldi	r28, 0xC0	; 192
    5d6e:	d1 e0       	ldi	r29, 0x01	; 1
    5d70:	88 83       	st	Y, r24
 */
static inline void nvm_issue_command(NVM_CMD_t nvm_command)
{
	uint8_t old_cmd;

	old_cmd = NVM.CMD;
    5d72:	1a 85       	ldd	r17, Y+10	; 0x0a
	NVM.CMD = nvm_command;
    5d74:	87 e0       	ldi	r24, 0x07	; 7
    5d76:	8a 87       	std	Y+10, r24	; 0x0a
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    5d78:	61 e0       	ldi	r22, 0x01	; 1
    5d7a:	8b ec       	ldi	r24, 0xCB	; 203
    5d7c:	91 e0       	ldi	r25, 0x01	; 1
    5d7e:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <ccp_write_io>
	NVM.CMD = old_cmd;
    5d82:	1a 87       	std	Y+10, r17	; 0x0a

	// Issue READ_FUSES command
	nvm_issue_command(NVM_CMD_READ_FUSES_gc);

	return NVM.DATA0;
    5d84:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5d86:	df 91       	pop	r29
    5d88:	cf 91       	pop	r28
    5d8a:	1f 91       	pop	r17
    5d8c:	08 95       	ret

00005d8e <nvm_read_byte>:
    5d8e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    5d92:	e6 2f       	mov	r30, r22
    5d94:	f7 2f       	mov	r31, r23
    5d96:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    5d9a:	84 91       	lpm	r24, Z
    5d9c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
    5da0:	08 95       	ret

00005da2 <ccp_write_io>:
    5da2:	1b be       	out	0x3b, r1	; 59
    5da4:	fc 01       	movw	r30, r24
    5da6:	28 ed       	ldi	r18, 0xD8	; 216
    5da8:	24 bf       	out	0x34, r18	; 52
    5daa:	60 83       	st	Z, r22
    5dac:	08 95       	ret

00005dae <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	PORTA_DIR = 0;//set all IO's to input
    5dae:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	PORTB_DIR = 0;//set all IO's to input
    5db2:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
	PORTC_DIR = (1<<4)|(1<<5)|(1<<7); //set SS, MOSI and SPCK as output
    5db6:	80 eb       	ldi	r24, 0xB0	; 176
    5db8:	80 93 40 06 	sts	0x0640, r24	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	PORTD_DIR = (1<<0)|(1<<1)|(1<<3)|(1<<4); //set CAN and Ethernet SS and TXD2 as output
    5dbc:	9b e1       	ldi	r25, 0x1B	; 27
    5dbe:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <__TEXT_REGION_LENGTH__+0x700660>
	PORTE_DIR = (1<<4)|(1<<5)|(1<<7); //set DE, RE and TXD1 as output
    5dc2:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTF_DIR = (1<<3)|(1<<4)|(1<<5); //set DE, RE and TXD1 as output
    5dc6:	88 e3       	ldi	r24, 0x38	; 56
    5dc8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTH_DIR = (1<<4)|(1<<5); //set LED1 and LED2 as output
    5dcc:	80 e3       	ldi	r24, 0x30	; 48
    5dce:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <__TEXT_REGION_LENGTH__+0x7006e0>
	PORTJ_DIR = 0;//set all IO's to input
    5dd2:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <__TEXT_REGION_LENGTH__+0x700700>
	PORTK_DIR = 0;//set all IO's to input
    5dd6:	10 92 20 07 	sts	0x0720, r1	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	PORTQ_DIR = (1<<0)|(1<<1)|(1<<2)|(1<<3); //set relays to output
    5dda:	8f e0       	ldi	r24, 0x0F	; 15
    5ddc:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__TEXT_REGION_LENGTH__+0x7007c0>
	PORTR_DIR = (1<<0)|(1<<1); //set relays to output
    5de0:	83 e0       	ldi	r24, 0x03	; 3
    5de2:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <__TEXT_REGION_LENGTH__+0x7007e0>
	

	PORTA_PIN0CTRL = (1<<PORT_OPC0_bp )|(1<<PORT_OPC1_bp);
    5de6:	88 e1       	ldi	r24, 0x18	; 24
    5de8:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    5dec:	08 95       	ret

00005dee <__mulsi3>:
    5dee:	db 01       	movw	r26, r22
    5df0:	8f 93       	push	r24
    5df2:	9f 93       	push	r25
    5df4:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <__muluhisi3>
    5df8:	bf 91       	pop	r27
    5dfa:	af 91       	pop	r26
    5dfc:	a2 9f       	mul	r26, r18
    5dfe:	80 0d       	add	r24, r0
    5e00:	91 1d       	adc	r25, r1
    5e02:	a3 9f       	mul	r26, r19
    5e04:	90 0d       	add	r25, r0
    5e06:	b2 9f       	mul	r27, r18
    5e08:	90 0d       	add	r25, r0
    5e0a:	11 24       	eor	r1, r1
    5e0c:	08 95       	ret

00005e0e <__udivmodhi4>:
    5e0e:	aa 1b       	sub	r26, r26
    5e10:	bb 1b       	sub	r27, r27
    5e12:	51 e1       	ldi	r21, 0x11	; 17
    5e14:	07 c0       	rjmp	.+14     	; 0x5e24 <__udivmodhi4_ep>

00005e16 <__udivmodhi4_loop>:
    5e16:	aa 1f       	adc	r26, r26
    5e18:	bb 1f       	adc	r27, r27
    5e1a:	a6 17       	cp	r26, r22
    5e1c:	b7 07       	cpc	r27, r23
    5e1e:	10 f0       	brcs	.+4      	; 0x5e24 <__udivmodhi4_ep>
    5e20:	a6 1b       	sub	r26, r22
    5e22:	b7 0b       	sbc	r27, r23

00005e24 <__udivmodhi4_ep>:
    5e24:	88 1f       	adc	r24, r24
    5e26:	99 1f       	adc	r25, r25
    5e28:	5a 95       	dec	r21
    5e2a:	a9 f7       	brne	.-22     	; 0x5e16 <__udivmodhi4_loop>
    5e2c:	80 95       	com	r24
    5e2e:	90 95       	com	r25
    5e30:	bc 01       	movw	r22, r24
    5e32:	cd 01       	movw	r24, r26
    5e34:	08 95       	ret

00005e36 <__divmodhi4>:
    5e36:	97 fb       	bst	r25, 7
    5e38:	07 2e       	mov	r0, r23
    5e3a:	16 f4       	brtc	.+4      	; 0x5e40 <__divmodhi4+0xa>
    5e3c:	00 94       	com	r0
    5e3e:	07 d0       	rcall	.+14     	; 0x5e4e <__divmodhi4_neg1>
    5e40:	77 fd       	sbrc	r23, 7
    5e42:	09 d0       	rcall	.+18     	; 0x5e56 <__divmodhi4_neg2>
    5e44:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <__udivmodhi4>
    5e48:	07 fc       	sbrc	r0, 7
    5e4a:	05 d0       	rcall	.+10     	; 0x5e56 <__divmodhi4_neg2>
    5e4c:	3e f4       	brtc	.+14     	; 0x5e5c <__divmodhi4_exit>

00005e4e <__divmodhi4_neg1>:
    5e4e:	90 95       	com	r25
    5e50:	81 95       	neg	r24
    5e52:	9f 4f       	sbci	r25, 0xFF	; 255
    5e54:	08 95       	ret

00005e56 <__divmodhi4_neg2>:
    5e56:	70 95       	com	r23
    5e58:	61 95       	neg	r22
    5e5a:	7f 4f       	sbci	r23, 0xFF	; 255

00005e5c <__divmodhi4_exit>:
    5e5c:	08 95       	ret

00005e5e <__udivmodsi4>:
    5e5e:	a1 e2       	ldi	r26, 0x21	; 33
    5e60:	1a 2e       	mov	r1, r26
    5e62:	aa 1b       	sub	r26, r26
    5e64:	bb 1b       	sub	r27, r27
    5e66:	fd 01       	movw	r30, r26
    5e68:	0d c0       	rjmp	.+26     	; 0x5e84 <__udivmodsi4_ep>

00005e6a <__udivmodsi4_loop>:
    5e6a:	aa 1f       	adc	r26, r26
    5e6c:	bb 1f       	adc	r27, r27
    5e6e:	ee 1f       	adc	r30, r30
    5e70:	ff 1f       	adc	r31, r31
    5e72:	a2 17       	cp	r26, r18
    5e74:	b3 07       	cpc	r27, r19
    5e76:	e4 07       	cpc	r30, r20
    5e78:	f5 07       	cpc	r31, r21
    5e7a:	20 f0       	brcs	.+8      	; 0x5e84 <__udivmodsi4_ep>
    5e7c:	a2 1b       	sub	r26, r18
    5e7e:	b3 0b       	sbc	r27, r19
    5e80:	e4 0b       	sbc	r30, r20
    5e82:	f5 0b       	sbc	r31, r21

00005e84 <__udivmodsi4_ep>:
    5e84:	66 1f       	adc	r22, r22
    5e86:	77 1f       	adc	r23, r23
    5e88:	88 1f       	adc	r24, r24
    5e8a:	99 1f       	adc	r25, r25
    5e8c:	1a 94       	dec	r1
    5e8e:	69 f7       	brne	.-38     	; 0x5e6a <__udivmodsi4_loop>
    5e90:	60 95       	com	r22
    5e92:	70 95       	com	r23
    5e94:	80 95       	com	r24
    5e96:	90 95       	com	r25
    5e98:	9b 01       	movw	r18, r22
    5e9a:	ac 01       	movw	r20, r24
    5e9c:	bd 01       	movw	r22, r26
    5e9e:	cf 01       	movw	r24, r30
    5ea0:	08 95       	ret

00005ea2 <__divmodsi4>:
    5ea2:	05 2e       	mov	r0, r21
    5ea4:	97 fb       	bst	r25, 7
    5ea6:	1e f4       	brtc	.+6      	; 0x5eae <__divmodsi4+0xc>
    5ea8:	00 94       	com	r0
    5eaa:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__negsi2>
    5eae:	57 fd       	sbrc	r21, 7
    5eb0:	07 d0       	rcall	.+14     	; 0x5ec0 <__divmodsi4_neg2>
    5eb2:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__udivmodsi4>
    5eb6:	07 fc       	sbrc	r0, 7
    5eb8:	03 d0       	rcall	.+6      	; 0x5ec0 <__divmodsi4_neg2>
    5eba:	4e f4       	brtc	.+18     	; 0x5ece <__divmodsi4_exit>
    5ebc:	0c 94 68 2f 	jmp	0x5ed0	; 0x5ed0 <__negsi2>

00005ec0 <__divmodsi4_neg2>:
    5ec0:	50 95       	com	r21
    5ec2:	40 95       	com	r20
    5ec4:	30 95       	com	r19
    5ec6:	21 95       	neg	r18
    5ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eca:	4f 4f       	sbci	r20, 0xFF	; 255
    5ecc:	5f 4f       	sbci	r21, 0xFF	; 255

00005ece <__divmodsi4_exit>:
    5ece:	08 95       	ret

00005ed0 <__negsi2>:
    5ed0:	90 95       	com	r25
    5ed2:	80 95       	com	r24
    5ed4:	70 95       	com	r23
    5ed6:	61 95       	neg	r22
    5ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eda:	8f 4f       	sbci	r24, 0xFF	; 255
    5edc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ede:	08 95       	ret

00005ee0 <__tablejump2__>:
    5ee0:	ee 0f       	add	r30, r30
    5ee2:	ff 1f       	adc	r31, r31
    5ee4:	88 1f       	adc	r24, r24
    5ee6:	8b bf       	out	0x3b, r24	; 59
    5ee8:	07 90       	elpm	r0, Z+
    5eea:	f6 91       	elpm	r31, Z
    5eec:	e0 2d       	mov	r30, r0
    5eee:	1b be       	out	0x3b, r1	; 59
    5ef0:	19 94       	eijmp

00005ef2 <__mulhisi3>:
    5ef2:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__umulhisi3>
    5ef6:	33 23       	and	r19, r19
    5ef8:	12 f4       	brpl	.+4      	; 0x5efe <__mulhisi3+0xc>
    5efa:	8a 1b       	sub	r24, r26
    5efc:	9b 0b       	sbc	r25, r27
    5efe:	0c 94 92 2f 	jmp	0x5f24	; 0x5f24 <__usmulhisi3_tail>

00005f02 <__umulhisi3>:
    5f02:	a2 9f       	mul	r26, r18
    5f04:	b0 01       	movw	r22, r0
    5f06:	b3 9f       	mul	r27, r19
    5f08:	c0 01       	movw	r24, r0
    5f0a:	a3 9f       	mul	r26, r19
    5f0c:	70 0d       	add	r23, r0
    5f0e:	81 1d       	adc	r24, r1
    5f10:	11 24       	eor	r1, r1
    5f12:	91 1d       	adc	r25, r1
    5f14:	b2 9f       	mul	r27, r18
    5f16:	70 0d       	add	r23, r0
    5f18:	81 1d       	adc	r24, r1
    5f1a:	11 24       	eor	r1, r1
    5f1c:	91 1d       	adc	r25, r1
    5f1e:	08 95       	ret

00005f20 <__usmulhisi3>:
    5f20:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__umulhisi3>

00005f24 <__usmulhisi3_tail>:
    5f24:	b7 ff       	sbrs	r27, 7
    5f26:	08 95       	ret
    5f28:	82 1b       	sub	r24, r18
    5f2a:	93 0b       	sbc	r25, r19
    5f2c:	08 95       	ret

00005f2e <__muluhisi3>:
    5f2e:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__umulhisi3>
    5f32:	a5 9f       	mul	r26, r21
    5f34:	90 0d       	add	r25, r0
    5f36:	b4 9f       	mul	r27, r20
    5f38:	90 0d       	add	r25, r0
    5f3a:	a4 9f       	mul	r26, r20
    5f3c:	80 0d       	add	r24, r0
    5f3e:	91 1d       	adc	r25, r1
    5f40:	11 24       	eor	r1, r1
    5f42:	08 95       	ret

00005f44 <__mulshisi3>:
    5f44:	b7 ff       	sbrs	r27, 7
    5f46:	0c 94 97 2f 	jmp	0x5f2e	; 0x5f2e <__muluhisi3>

00005f4a <__mulohisi3>:
    5f4a:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <__muluhisi3>
    5f4e:	82 1b       	sub	r24, r18
    5f50:	93 0b       	sbc	r25, r19
    5f52:	08 95       	ret

00005f54 <memcpy>:
    5f54:	fb 01       	movw	r30, r22
    5f56:	dc 01       	movw	r26, r24
    5f58:	02 c0       	rjmp	.+4      	; 0x5f5e <memcpy+0xa>
    5f5a:	01 90       	ld	r0, Z+
    5f5c:	0d 92       	st	X+, r0
    5f5e:	41 50       	subi	r20, 0x01	; 1
    5f60:	50 40       	sbci	r21, 0x00	; 0
    5f62:	d8 f7       	brcc	.-10     	; 0x5f5a <memcpy+0x6>
    5f64:	08 95       	ret

00005f66 <_exit>:
    5f66:	f8 94       	cli

00005f68 <__stop_program>:
    5f68:	ff cf       	rjmp	.-2      	; 0x5f68 <__stop_program>
