
Bootloader test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .BOOT         00000014  00020000  00020000  000012c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .jmp_table    00000044  00003f00  00003f00  00001280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00001064  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000168  00802000  00001064  00001118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001308  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001b8  00000000  00000000  00001348  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005e85  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004228  00000000  00000000  00007385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001428  00000000  00000000  0000b5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000049c  00000000  00000000  0000c9d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000033ba  00000000  00000000  0000ce74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000189d  00000000  00000000  0001022e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  00011ad0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .BOOT:

00020000 <SP_CommonSPM>:
; ---

.section .BOOT, "ax"

SP_CommonSPM:
	movw	ZL, r24          ; Load R25:R24 into Z.
   20000:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20     ; Load prepared command into NVM Command register.
   20002:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_SPM_gc  ; Prepare Protect SPM signature in R18
   20006:	2d e9       	ldi	r18, 0x9D	; 157
	sts	CCP, r18         ; Enable SPM operation (this disables interrupts for 4 cycles).
   20008:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	spm                      ; Self-program.
   2000c:	e8 95       	spm
	clr	r1               ; Clear R1 for GCC _zero_reg_ to function properly.
   2000e:	11 24       	eor	r1, r1
	out	RAMPZ, r19       ; Restore RAMPZ register.
   20010:	3b bf       	out	0x3b, r19	; 59
	ret
   20012:	08 95       	ret

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
       4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
       c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      28:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      2c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      30:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      40:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      48:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      50:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      68:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      6c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      70:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      7c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      80:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      84:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      88:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      8c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      90:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      94:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      98:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      9c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
      fc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     100:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     104:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     108:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     10c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     110:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     114:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     118:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     11c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     120:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     124:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     128:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     12c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     130:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     134:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     138:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     13c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     140:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     144:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     148:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     14c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     150:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     154:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     158:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     15c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     160:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     164:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     168:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     16c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     170:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     174:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     178:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     17c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     180:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     184:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     188:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     18c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     190:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     194:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     198:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     19c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1a8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ac:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1c8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1cc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1d8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1dc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1e8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1ec:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
     1f8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <_Z9logic_andbb>
     200:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_Z16isSmallerOrEqualii>
     204:	0c 94 48 02 	jmp	0x490	; 0x490 <_Z9isSmallerii>
     208:	0c 94 3a 02 	jmp	0x474	; 0x474 <_Z7isEqualii>
     20c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_Z8multiplyii>
     210:	0c 94 88 02 	jmp	0x510	; 0x510 <_Z11printNumberj>
     214:	0c 94 36 02 	jmp	0x46c	; 0x46c <_Z6divideii>
     218:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_Z8logic_orbb>
     21c:	0c 94 c4 01 	jmp	0x388	; 0x388 <_Z6invertj>
     220:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_Z8delay_msj>
     224:	0c 94 41 02 	jmp	0x482	; 0x482 <_Z8isBiggerii>
     228:	0c 94 c8 01 	jmp	0x390	; 0x390 <_Z3addii>
     22c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <_Z9logic_xorbb>
     230:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_Z9delay1secv>
     234:	0c 94 4f 02 	jmp	0x49e	; 0x49e <_Z15isBiggerOrEqualii>
     238:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_Z8subtractii>
     23c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_Z9ToggleLEDv>

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	cd bf       	out	0x3d, r28	; 61
     248:	df e3       	ldi	r29, 0x3F	; 63
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	0c bf       	out	0x3c, r16	; 60
     250:	18 be       	out	0x38, r1	; 56
     252:	19 be       	out	0x39, r1	; 57
     254:	1a be       	out	0x3a, r1	; 58
     256:	1b be       	out	0x3b, r1	; 59

00000258 <__do_copy_data>:
     258:	11 e2       	ldi	r17, 0x21	; 33
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e4 e6       	ldi	r30, 0x64	; 100
     260:	f0 e1       	ldi	r31, 0x10	; 16
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a8 36       	cpi	r26, 0x68	; 104
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>
     272:	1b be       	out	0x3b, r1	; 59
     274:	0e 94 cf 04 	call	0x99e	; 0x99e <main>
     278:	0c 94 30 08 	jmp	0x1060	; 0x1060 <_exit>

0000027c <__bad_interrupt>:
     27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000280 <SP_ReadByte>:

.section .text
.global SP_ReadByte

SP_ReadByte:
	in	r19, RAMPZ      ; Save RAMPZ.
     280:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     282:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     284:	fb 01       	movw	r30, r22
	elpm	r24, Z          ; Extended load byte from address pointed to by Z.
     286:	86 91       	elpm	r24, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     288:	3b bf       	out	0x3b, r19	; 59
	ret
     28a:	08 95       	ret

0000028c <SP_ReadWord>:

.section .text
.global SP_ReadWord

SP_ReadWord:
	in	r19, RAMPZ      ; Save RAMPZ.
     28c:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24      ; Load RAMPZ with the MSB of the address.
     28e:	8b bf       	out	0x3b, r24	; 59
	movw	ZL, r22         ; Move the low bytes to the Z pointer
     290:	fb 01       	movw	r30, r22
	elpm	r24, Z+         ; Extended load byte from address pointed to by Z.
     292:	87 91       	elpm	r24, Z+
	elpm	r25, Z          ; Extended load byte from address pointed to by Z.
     294:	96 91       	elpm	r25, Z
	out	RAMPZ, r19      ; Restore RAMPZ register.
     296:	3b bf       	out	0x3b, r19	; 59
	ret
     298:	08 95       	ret

0000029a <SP_ReadCalibrationByte>:

.section .text
.global SP_ReadCalibrationByte	

SP_ReadCalibrationByte:
	ldi	r20, NVM_CMD_READ_CALIB_ROW_gc    ; Prepare NVM command in R20.
     29a:	42 e0       	ldi	r20, 0x02	; 2
	rjmp	SP_CommonLPM                      ; Jump to common LPM code.
     29c:	70 c0       	rjmp	.+224    	; 0x37e <SP_CommonLPM>

0000029e <SP_ReadUserSignatureByte>:

.section .text	
.global SP_ReadUserSignatureByte

SP_ReadUserSignatureByte:
	ldi	r20, NVM_CMD_READ_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     29e:	41 e0       	ldi	r20, 0x01	; 1
	rjmp	SP_CommonLPM                       ; Jump to common LPM code.
     2a0:	6e c0       	rjmp	.+220    	; 0x37e <SP_CommonLPM>

000002a2 <SP_ReadFuseByte>:

.section .text	
.global SP_ReadFuseByte

SP_ReadFuseByte:
	sts	NVM_ADDR0, r24              ; Load fuse byte index into NVM Address Register 0.
     2a2:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <__TEXT_REGION_LENGTH__+0x7001c0>
	clr	r24                         ; Prepare a zero.
     2a6:	88 27       	eor	r24, r24
	sts	NVM_ADDR1, r24              ; Load zero into NVM Address Register 1.
     2a8:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <__TEXT_REGION_LENGTH__+0x7001c1>
	sts	NVM_ADDR2, r24              ; Load zero into NVM Address Register 2.
     2ac:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__TEXT_REGION_LENGTH__+0x7001c2>
	ldi	r20, NVM_CMD_READ_FUSES_gc  ; Prepare NVM command in R20.
     2b0:	47 e0       	ldi	r20, 0x07	; 7
	rcall	SP_CommonCMD                ; Jump to common NVM Action code.
     2b2:	55 d0       	rcall	.+170    	; 0x35e <SP_CommonCMD>
	movw	r24, r22                    ; Move low byte to 1 byte return address.
     2b4:	cb 01       	movw	r24, r22
	ret
     2b6:	08 95       	ret

000002b8 <SP_WriteLockBits>:

.section .text	
.global SP_WriteLockBits

SP_WriteLockBits:
	sts	NVM_DATA0, r24                  ; Load lock bits into NVM Data Register 0.
     2b8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	ldi	r20, NVM_CMD_WRITE_LOCK_BITS_gc ; Prepare NVM command in R20.
     2bc:	48 e0       	ldi	r20, 0x08	; 8
	rjmp	SP_CommonCMD                    ; Jump to common NVM Action code.
     2be:	4f c0       	rjmp	.+158    	; 0x35e <SP_CommonCMD>

000002c0 <SP_ReadLockBits>:

.section .text		
.global SP_ReadLockBits

SP_ReadLockBits:
	lds	r24, NVM_LOCKBITS       ; Read IO-mapped lock bits.
     2c0:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <__TEXT_REGION_LENGTH__+0x7001d0>
	ret
     2c4:	08 95       	ret

000002c6 <SP_EraseUserSignatureRow>:

.section .text
.global SP_EraseUserSignatureRow

SP_EraseUserSignatureRow:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     2c6:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_USER_SIG_ROW_gc ; Prepare NVM command in R20.
     2c8:	48 e1       	ldi	r20, 0x18	; 24
	jmp 	SP_CommonSPM                       ; Jump to common SPM code.
     2ca:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000002ce <SP_WriteUserSignatureRow>:

.section .text
.global SP_WriteUserSignatureRow

SP_WriteUserSignatureRow:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     2ce:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_WRITE_USER_SIG_ROW_gc  ; Prepare NVM command in R20.
     2d0:	4a e1       	ldi	r20, 0x1A	; 26
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     2d2:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000002d6 <SP_EraseApplicationSection>:

.section .text
.global SP_EraseApplicationSection

SP_EraseApplicationSection:
	in	r19, RAMPZ                 ; Save RAMPZ, which is restored in SP_CommonSPM.
     2d6:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_APP_gc  ; Prepare NVM command in R20.
     2d8:	40 e2       	ldi	r20, 0x20	; 32
	jmp	SP_CommonSPM               ; Jump to common SPM code.
     2da:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000002de <SP_EraseApplicationPage>:

.section .text	
.global SP_EraseApplicationPage

SP_EraseApplicationPage:
	in	r19, RAMPZ                      ; Save RAMPZ, which is restored in SP_CommonSPM.
     2de:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                      ; Load RAMPZ with the MSB of the address.
     2e0:	8b bf       	out	0x3b, r24	; 59
	movw    r24, r22                        ; Move low bytes for ZH:ZL to R25:R24
     2e2:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_APP_PAGE_gc  ; Prepare NVM command in R20.
     2e4:	42 e2       	ldi	r20, 0x22	; 34
	jmp	SP_CommonSPM                    ; Jump to common SPM code.
     2e6:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000002ea <SP_LoadFlashWord>:

.section .text
.global SP_LoadFlashWord

SP_LoadFlashWord:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     2ea:	3b b7       	in	r19, 0x3b	; 59
	movw	r0, r22                            ; Prepare flash word in R1:R0.
     2ec:	0b 01       	movw	r0, r22
	ldi	r20, NVM_CMD_LOAD_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
     2ee:	43 e2       	ldi	r20, 0x23	; 35
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
     2f0:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

000002f4 <SP_WriteApplicationPage>:

.section .text		
.global SP_WriteApplicationPage

SP_WriteApplicationPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     2f4:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     2f6:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     2f8:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_APP_PAGE_gc   ; Prepare NVM command in R20.
     2fa:	44 e2       	ldi	r20, 0x24	; 36
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     2fc:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000300 <SP_EraseWriteApplicationPage>:

.section .text
.global SP_EraseWriteApplicationPage

SP_EraseWriteApplicationPage:
	in	r19, RAMPZ                            ; Save RAMPZ, which is restored in SP_CommonSPM.
     300:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                            ; Load RAMPZ with the MSB of the address.
     302:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                              ; Move low bytes of address to ZH:ZL from R23:R22
     304:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_APP_PAGE_gc  ; Prepare NVM command in R20.
     306:	45 e2       	ldi	r20, 0x25	; 37
	jmp	SP_CommonSPM                          ; Jump to common SPM code.
     308:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000030c <SP_EraseFlashBuffer>:

.section .text		
.global SP_EraseFlashBuffer

SP_EraseFlashBuffer:
	in	r19, RAMPZ                          ; Save RAMPZ, which is restored in SP_CommonSPM.
     30c:	3b b7       	in	r19, 0x3b	; 59
	ldi	r20, NVM_CMD_ERASE_FLASH_BUFFER_gc  ; Prepare NVM command in R20.
     30e:	46 e2       	ldi	r20, 0x26	; 38
	jmp	SP_CommonSPM                        ; Jump to common SPM code.
     310:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000314 <SP_EraseBootPage>:

.section .text		
.global SP_EraseBootPage

SP_EraseBootPage:
	in	r19, RAMPZ                         ; Save RAMPZ, which is restored in SP_CommonSPM.
     314:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                         ; Load RAMPZ with the MSB of the address.
     316:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                           ; Move low bytes of address to ZH:ZL from R23:R22
     318:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_BOOT_PAGE_gc    ; Prepare NVM command in R20.
     31a:	4a e2       	ldi	r20, 0x2A	; 42
	jmp	SP_CommonSPM                       ; Jump to common SPM code.
     31c:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000320 <SP_WriteBootPage>:

.section .text		
.global SP_WriteBootPage

SP_WriteBootPage:
	in	r19, RAMPZ                       ; Save RAMPZ, which is restored in SP_CommonSPM.
     320:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                       ; Load RAMPZ with the MSB of the address.
     322:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                         ; Move low bytes of address to ZH:ZL from R23:R22
     324:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     326:	4c e2       	ldi	r20, 0x2C	; 44
	jmp	SP_CommonSPM                     ; Jump to common SPM code.
     328:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

0000032c <SP_EraseWriteBootPage>:

.section .text		
.global SP_EraseWriteBootPage

SP_EraseWriteBootPage:
	in	r19, RAMPZ                             ; Save RAMPZ, which is restored in SP_CommonSPM.
     32c:	3b b7       	in	r19, 0x3b	; 59
	out	RAMPZ, r24                             ; Load RAMPZ with the MSB of the address.
     32e:	8b bf       	out	0x3b, r24	; 59
	movw	r24, r22                               ; Move low bytes of address to ZH:ZL from R23:R22
     330:	cb 01       	movw	r24, r22
	ldi	r20, NVM_CMD_ERASE_WRITE_BOOT_PAGE_gc  ; Prepare NVM command in R20.
     332:	4d e2       	ldi	r20, 0x2D	; 45
	jmp	SP_CommonSPM                           ; Jump to common SPM code.
     334:	0d 94 00 00 	jmp	0x20000	; 0x20000 <SP_CommonSPM>

00000338 <SP_ApplicationCRC>:

.section .text	
.global SP_ApplicationCRC

SP_ApplicationCRC:
	ldi	r20, NVM_CMD_APP_CRC_gc    ; Prepare NVM command in R20.
     338:	48 e3       	ldi	r20, 0x38	; 56
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     33a:	11 c0       	rjmp	.+34     	; 0x35e <SP_CommonCMD>

0000033c <SP_BootCRC>:

.section .text
.global SP_BootCRC

SP_BootCRC:
	ldi	r20, NVM_CMD_BOOT_CRC_gc   ; Prepare NVM command in R20.
     33c:	49 e3       	ldi	r20, 0x39	; 57
	rjmp	SP_CommonCMD               ; Jump to common NVM Action code.
     33e:	0f c0       	rjmp	.+30     	; 0x35e <SP_CommonCMD>

00000340 <SP_LockSPM>:

.section .text
.global SP_LockSPM

SP_LockSPM:
	ldi	r18, CCP_IOREG_gc     ; Prepare Protect IO-register signature in R18.
     340:	28 ed       	ldi	r18, 0xD8	; 216
	sts	CCP, r18              ; Enable IO-register operation (this disables interrupts for 4 cycles).
     342:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	ldi	r18, NVM_SPMLOCK_bm   ; Prepare bitmask for locking SPM into R18.
     346:	21 e0       	ldi	r18, 0x01	; 1
	sts	NVM_CTRLB, r18        ; Load bitmask into NVM Control Register B, which locks SPM.
     348:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <__TEXT_REGION_LENGTH__+0x7001cc>
	ret
     34c:	08 95       	ret

0000034e <SP_WaitForSPM>:

.section .text
.global SP_WaitForSPM		

SP_WaitForSPM:
	lds	r18, NVM_STATUS     ; Load the NVM Status register.
     34e:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <__TEXT_REGION_LENGTH__+0x7001cf>
	sbrc	r18, NVM_NVMBUSY_bp ; Check if bit is cleared.
     352:	27 fd       	sbrc	r18, 7
	rjmp	SP_WaitForSPM       ; Repeat check if bit is not cleared.
     354:	fc cf       	rjmp	.-8      	; 0x34e <SP_WaitForSPM>
	clr	r18
     356:	22 27       	eor	r18, r18
	sts	NVM_CMD, r18        ; Clear up command register to NO_OPERATION.
     358:	20 93 ca 01 	sts	0x01CA, r18	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ret
     35c:	08 95       	ret

0000035e <SP_CommonCMD>:
; ---

.section .text		

SP_CommonCMD:
	sts	NVM_CMD, r20        ; Load command into NVM Command register.
     35e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	ldi	r18, CCP_IOREG_gc   ; Prepare Protect IO-register signature in R18.
     362:	28 ed       	ldi	r18, 0xD8	; 216
	ldi	r19, NVM_CMDEX_bm   ; Prepare bitmask for setting NVM Command Execute bit into R19.
     364:	31 e0       	ldi	r19, 0x01	; 1
	sts	CCP, r18            ; Enable IO-register operation (this disables interrupts for 4 cycles).
     366:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	sts	NVM_CTRLA, r19      ; Load bitmask into NVM Control Register A, which executes the command.
     36a:	30 93 cb 01 	sts	0x01CB, r19	; 0x8001cb <__TEXT_REGION_LENGTH__+0x7001cb>
	lds	r22, NVM_DATA0      ; Load NVM Data Register 0 into R22.
     36e:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <__TEXT_REGION_LENGTH__+0x7001c4>
	lds	r23, NVM_DATA1      ; Load NVM Data Register 1 into R23.
     372:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <__TEXT_REGION_LENGTH__+0x7001c5>
	lds	r24, NVM_DATA2      ; Load NVM Data Register 2 into R24.
     376:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__TEXT_REGION_LENGTH__+0x7001c6>
	clr	r25                 ; Clear R25 in order to return a clean 32-bit value.
     37a:	99 27       	eor	r25, r25
	ret
     37c:	08 95       	ret

0000037e <SP_CommonLPM>:
; ---

.section .text		

SP_CommonLPM:
	movw	ZL, r24             ; Load index into Z.
     37e:	fc 01       	movw	r30, r24
	sts	NVM_CMD, r20        ; Load prepared command into NVM Command register.
     380:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm	r24,Z
     384:	84 91       	lpm	r24, Z
	ret
     386:	08 95       	ret

00000388 <_Z6invertj>:


uint16_t invert(uint16_t num)
{
	return -num;
}
     388:	91 95       	neg	r25
     38a:	81 95       	neg	r24
     38c:	91 09       	sbc	r25, r1
     38e:	08 95       	ret

00000390 <_Z3addii>:



int16_t add(int16_t A, int16_t B)
{
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	9b 01       	movw	r18, r22
	long res = (long)A + B;
     39a:	6c 01       	movw	r12, r24
     39c:	09 2e       	mov	r0, r25
     39e:	00 0c       	add	r0, r0
     3a0:	ee 08       	sbc	r14, r14
     3a2:	ff 08       	sbc	r15, r15
     3a4:	ab 01       	movw	r20, r22
     3a6:	77 0f       	add	r23, r23
     3a8:	66 0b       	sbc	r22, r22
     3aa:	77 0b       	sbc	r23, r23
     3ac:	4c 0d       	add	r20, r12
     3ae:	5d 1d       	adc	r21, r13
     3b0:	6e 1d       	adc	r22, r14
     3b2:	7f 1d       	adc	r23, r15

	if(res > 32767)
     3b4:	41 15       	cp	r20, r1
     3b6:	e0 e8       	ldi	r30, 0x80	; 128
     3b8:	5e 07       	cpc	r21, r30
     3ba:	61 05       	cpc	r22, r1
     3bc:	71 05       	cpc	r23, r1
     3be:	44 f4       	brge	.+16     	; 0x3d0 <_Z3addii+0x40>
	return 32767;
	if(res < -32768)
     3c0:	41 15       	cp	r20, r1
     3c2:	50 48       	sbci	r21, 0x80	; 128
     3c4:	6f 4f       	sbci	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	34 f0       	brlt	.+12     	; 0x3d6 <_Z3addii+0x46>
	return -32767;

	return (int16_t)res;
     3ca:	82 0f       	add	r24, r18
     3cc:	93 1f       	adc	r25, r19
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <_Z3addii+0x4a>
int16_t add(int16_t A, int16_t B)
{
	long res = (long)A + B;

	if(res > 32767)
	return 32767;
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	9f e7       	ldi	r25, 0x7F	; 127
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <_Z3addii+0x4a>
	if(res < -32768)
	return -32767;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <_Z8subtractii>:


int16_t subtract(int16_t A, int16_t B)
{
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	9b 01       	movw	r18, r22
	long res = (long)A - B;
     3ee:	ac 01       	movw	r20, r24
     3f0:	09 2e       	mov	r0, r25
     3f2:	00 0c       	add	r0, r0
     3f4:	66 0b       	sbc	r22, r22
     3f6:	77 0b       	sbc	r23, r23
     3f8:	69 01       	movw	r12, r18
     3fa:	03 2e       	mov	r0, r19
     3fc:	00 0c       	add	r0, r0
     3fe:	ee 08       	sbc	r14, r14
     400:	ff 08       	sbc	r15, r15
     402:	4c 19       	sub	r20, r12
     404:	5d 09       	sbc	r21, r13
     406:	6e 09       	sbc	r22, r14
     408:	7f 09       	sbc	r23, r15

	if(res > 32767)
     40a:	41 15       	cp	r20, r1
     40c:	e0 e8       	ldi	r30, 0x80	; 128
     40e:	5e 07       	cpc	r21, r30
     410:	61 05       	cpc	r22, r1
     412:	71 05       	cpc	r23, r1
     414:	44 f4       	brge	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	return 32767;
	if(res < -32768)
     416:	41 15       	cp	r20, r1
     418:	50 48       	sbci	r21, 0x80	; 128
     41a:	6f 4f       	sbci	r22, 0xFF	; 255
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	34 f0       	brlt	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	return -32767;

	return (int16_t)res;
     420:	82 1b       	sub	r24, r18
     422:	93 0b       	sbc	r25, r19
     424:	05 c0       	rjmp	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
int16_t subtract(int16_t A, int16_t B)
{
	long res = (long)A - B;

	if(res > 32767)
	return 32767;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	9f e7       	ldi	r25, 0x7F	; 127
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	if(res < -32768)
	return -32767;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	08 95       	ret

0000043a <_Z8multiplyii>:


int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;
     43a:	9c 01       	movw	r18, r24
     43c:	db 01       	movw	r26, r22
     43e:	0e 94 fe 07 	call	0xffc	; 0xffc <__mulhisi3>

	if(res > 32767)
     442:	61 15       	cp	r22, r1
     444:	20 e8       	ldi	r18, 0x80	; 128
     446:	72 07       	cpc	r23, r18
     448:	81 05       	cpc	r24, r1
     44a:	91 05       	cpc	r25, r1
     44c:	4c f4       	brge	.+18     	; 0x460 <_Z8multiplyii+0x26>
	return 32767;
	if(res < -32768)
     44e:	61 15       	cp	r22, r1
     450:	20 e8       	ldi	r18, 0x80	; 128
     452:	72 07       	cpc	r23, r18
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	82 07       	cpc	r24, r18
     458:	92 07       	cpc	r25, r18
     45a:	2c f0       	brlt	.+10     	; 0x466 <_Z8multiplyii+0x2c>
	return -32767;

	return (int16_t)res;
     45c:	cb 01       	movw	r24, r22
     45e:	08 95       	ret
int16_t multiply(int16_t A, int16_t B)
{
	long res = (long)A * B;

	if(res > 32767)
	return 32767;
     460:	8f ef       	ldi	r24, 0xFF	; 255
     462:	9f e7       	ldi	r25, 0x7F	; 127
     464:	08 95       	ret
	if(res < -32768)
	return -32767;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e8       	ldi	r25, 0x80	; 128

	return (int16_t)res;
}
     46a:	08 95       	ret

0000046c <_Z6divideii>:


int16_t divide(int16_t A, int16_t B)
{
	return A / B;
     46c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     470:	cb 01       	movw	r24, r22
}
     472:	08 95       	ret

00000474 <_Z7isEqualii>:


bool isEqual(int16_t A, int16_t B)			{return A == B; }
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	86 17       	cp	r24, r22
     478:	97 07       	cpc	r25, r23
     47a:	09 f0       	breq	.+2      	; 0x47e <_Z7isEqualii+0xa>
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	82 2f       	mov	r24, r18
     480:	08 95       	ret

00000482 <_Z8isBiggerii>:
bool isBigger(int16_t A, int16_t B)			{return A > B;	}
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	68 17       	cp	r22, r24
     486:	79 07       	cpc	r23, r25
     488:	0c f0       	brlt	.+2      	; 0x48c <_Z8isBiggerii+0xa>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	82 2f       	mov	r24, r18
     48e:	08 95       	ret

00000490 <_Z9isSmallerii>:
bool isSmaller(int16_t A, int16_t B)		{return A < B;	}
     490:	21 e0       	ldi	r18, 0x01	; 1
     492:	86 17       	cp	r24, r22
     494:	97 07       	cpc	r25, r23
     496:	0c f0       	brlt	.+2      	; 0x49a <_Z9isSmallerii+0xa>
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	82 2f       	mov	r24, r18
     49c:	08 95       	ret

0000049e <_Z15isBiggerOrEqualii>:
bool isBiggerOrEqual(int16_t A, int16_t B)	{return A >= B;	}
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	86 17       	cp	r24, r22
     4a2:	97 07       	cpc	r25, r23
     4a4:	0c f4       	brge	.+2      	; 0x4a8 <_Z15isBiggerOrEqualii+0xa>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	82 2f       	mov	r24, r18
     4aa:	08 95       	ret

000004ac <_Z16isSmallerOrEqualii>:
bool isSmallerOrEqual(int16_t A, int16_t B)	{return A <= B; }
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	68 17       	cp	r22, r24
     4b0:	79 07       	cpc	r23, r25
     4b2:	0c f4       	brge	.+2      	; 0x4b6 <_Z16isSmallerOrEqualii+0xa>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	82 2f       	mov	r24, r18
     4b8:	08 95       	ret

000004ba <_Z8logic_orbb>:

bool logic_or(bool A, bool B)	{return A || B; }
     4ba:	81 11       	cpse	r24, r1
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <_Z8logic_orbb+0x8>
     4be:	86 2f       	mov	r24, r22
     4c0:	08 95       	ret
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	08 95       	ret

000004c6 <_Z9logic_andbb>:
bool logic_and(bool A, bool B)	{return A && B; }
     4c6:	81 11       	cpse	r24, r1
     4c8:	86 2f       	mov	r24, r22
     4ca:	08 95       	ret

000004cc <_Z9logic_xorbb>:
bool logic_xor(bool A, bool B)	{return A ^ B;  }
     4cc:	86 27       	eor	r24, r22
     4ce:	08 95       	ret

000004d0 <_Z9ToggleLEDv>:


void ToggleLED()
{
	PORTH_OUTTGL |= (1 << 4)|(1<<5);
     4d0:	e7 ee       	ldi	r30, 0xE7	; 231
     4d2:	f6 e0       	ldi	r31, 0x06	; 6
     4d4:	80 81       	ld	r24, Z
     4d6:	80 63       	ori	r24, 0x30	; 48
     4d8:	80 83       	st	Z, r24
     4da:	08 95       	ret

000004dc <_Z9delay1secv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	87 ea       	ldi	r24, 0xA7	; 167
     4e0:	91 e6       	ldi	r25, 0x61	; 97
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	80 40       	sbci	r24, 0x00	; 0
     4e6:	90 40       	sbci	r25, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <_Z9delay1secv+0x6>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <_Z9delay1secv+0x10>
     4ec:	00 00       	nop
     4ee:	08 95       	ret

000004f0 <_Z8delay_msj>:
}


void delay_ms(uint16_t ms)
{
	for(uint16_t i = 0; i < ms; i++)
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	69 f0       	breq	.+26     	; 0x50e <_Z8delay_msj+0x1e>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	ef e3       	ldi	r30, 0x3F	; 63
     4fa:	ff e1       	ldi	r31, 0x1F	; 31
     4fc:	31 97       	sbiw	r30, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <_Z8delay_msj+0xc>
     500:	00 c0       	rjmp	.+0      	; 0x502 <_Z8delay_msj+0x12>
     502:	00 00       	nop
     504:	2f 5f       	subi	r18, 0xFF	; 255
     506:	3f 4f       	sbci	r19, 0xFF	; 255
     508:	82 17       	cp	r24, r18
     50a:	93 07       	cpc	r25, r19
     50c:	a9 f7       	brne	.-22     	; 0x4f8 <_Z8delay_msj+0x8>
     50e:	08 95       	ret

00000510 <_Z11printNumberj>:



void printNumber(uint16_t num)
{
	USART_Transmit_Number(USARTD0, num);
     510:	bc 01       	movw	r22, r24
     512:	80 ea       	ldi	r24, 0xA0	; 160
     514:	99 e0       	ldi	r25, 0x09	; 9
     516:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_TransmitString(USARTD0, "\n\r");
     51a:	69 e1       	ldi	r22, 0x19	; 25
     51c:	71 e2       	ldi	r23, 0x21	; 33
     51e:	80 ea       	ldi	r24, 0xA0	; 160
     520:	99 e0       	ldi	r25, 0x09	; 9
     522:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
     526:	08 95       	ret

00000528 <_Z11hexToNibblec>:
#ifndef CONVERT_H_
#define CONVERT_H_

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
     528:	90 ed       	ldi	r25, 0xD0	; 208
     52a:	98 0f       	add	r25, r24
     52c:	9a 30       	cpi	r25, 0x0A	; 10
     52e:	60 f0       	brcs	.+24     	; 0x548 <_Z11hexToNibblec+0x20>
	{
		return hex-'0';
	}
	else if(hex >= 'A' && hex <= 'F')
     530:	9f eb       	ldi	r25, 0xBF	; 191
     532:	98 0f       	add	r25, r24
     534:	96 30       	cpi	r25, 0x06	; 6
     536:	10 f4       	brcc	.+4      	; 0x53c <_Z11hexToNibblec+0x14>
	{
		return hex-'A'+10;
     538:	87 53       	subi	r24, 0x37	; 55
     53a:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
     53c:	9f e9       	ldi	r25, 0x9F	; 159
     53e:	98 0f       	add	r25, r24
     540:	96 30       	cpi	r25, 0x06	; 6
     542:	20 f4       	brcc	.+8      	; 0x54c <_Z11hexToNibblec+0x24>
	{
		return hex-'a'+10;
     544:	87 55       	subi	r24, 0x57	; 87
     546:	08 95       	ret

uint8_t hexToNibble(char hex)
{
	if(hex >= '0' && hex <= '9')
	{
		return hex-'0';
     548:	89 2f       	mov	r24, r25
     54a:	08 95       	ret
	}
	else if(hex >= 'a' && hex <= 'f')
	{
		return hex-'a'+10;
	}
	return 0xff;
     54c:	8f ef       	ldi	r24, 0xFF	; 255
}
     54e:	08 95       	ret

00000550 <_Z9hexToBytecc>:



uint8_t hexToByte(char h, char l)
{
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	d6 2f       	mov	r29, r22
	return (hexToNibble(h) << 4) | hexToNibble(l);
     556:	0e 94 94 02 	call	0x528	; 0x528 <_Z11hexToNibblec>
     55a:	c8 2f       	mov	r28, r24
     55c:	8d 2f       	mov	r24, r29
     55e:	0e 94 94 02 	call	0x528	; 0x528 <_Z11hexToNibblec>
     562:	90 e1       	ldi	r25, 0x10	; 16
     564:	c9 9f       	mul	r28, r25
     566:	90 01       	movw	r18, r0
     568:	11 24       	eor	r1, r1
}
     56a:	82 2b       	or	r24, r18
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <_Z11resetDevicev>:


void resetDevice()
{
	//disable interrupts
	asm("cli");
     572:	f8 94       	cli
	// enable watchdog timer
	CCP = 0xD8;
     574:	88 ed       	ldi	r24, 0xD8	; 216
     576:	84 bf       	out	0x34, r24	; 52
	WDT.CTRL = (1<< WDT_ENABLE_bp)| (1<<WDT_CEN_bp);
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
     57e:	ff cf       	rjmp	.-2      	; 0x57e <_Z11resetDevicev+0xc>

00000580 <_Z12programFlashhjhPh>:
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
}


void programFlash(uint8_t byteCount, uint16_t address, uint8_t recordType, uint8_t* data)
{
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	e8 2e       	mov	r14, r24
     58e:	eb 01       	movw	r28, r22
     590:	89 01       	movw	r16, r18
	static uint16_t previousAddress = 0xFFFF;
	static bool firstByte = true;
	
	if(recordType == EOF_RECORD)
     592:	41 30       	cpi	r20, 0x01	; 1
     594:	a9 f5       	brne	.+106    	; 0x600 <_Z12programFlashhjhPh+0x80>
	{
		
		// if the first byte has already been sent
		if(!firstByte)
     596:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     59a:	81 11       	cpse	r24, r1
     59c:	2f c0       	rjmp	.+94     	; 0x5fc <_Z12programFlashhjhPh+0x7c>
		{
			// check if the address is within the blockly range
			if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     59e:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     5a2:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     5a6:	90 54       	subi	r25, 0x40	; 64
     5a8:	81 15       	cp	r24, r1
     5aa:	90 44       	sbci	r25, 0x40	; 64
     5ac:	b0 f0       	brcs	.+44     	; 0x5da <_Z12programFlashhjhPh+0x5a>
			{
				USART_TransmitString(USARTD0, "\n\rFlash address:");
     5ae:	63 e0       	ldi	r22, 0x03	; 3
     5b0:	70 e2       	ldi	r23, 0x20	; 32
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
				USART_Transmit_Number(USARTD0, previousAddress);
     5ba:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     5be:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     5c2:	80 ea       	ldi	r24, 0xA0	; 160
     5c4:	99 e0       	ldi	r25, 0x09	; 9
     5c6:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>
				USART_TransmitString(USARTD0, " out of range\n\rResetting");
     5ca:	64 e1       	ldi	r22, 0x14	; 20
     5cc:	70 e2       	ldi	r23, 0x20	; 32
     5ce:	80 ea       	ldi	r24, 0xA0	; 160
     5d0:	99 e0       	ldi	r25, 0x09	; 9
     5d2:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
				resetDevice();
     5d6:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11resetDevicev>
			}
			
			SP_WaitForSPM();
     5da:	0e 94 a7 01 	call	0x34e	; 0x34e <SP_WaitForSPM>
			SP_EraseWriteApplicationPage(previousAddress);
     5de:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     5e2:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 80 01 	call	0x300	; 0x300 <SP_EraseWriteApplicationPage>
			// erase the last page
			//boot_page_erase_safe(previousAddress);
			// write the last page to flash
			//boot_page_write_safe(previousAddress);
			
			USART_Transmit_Hex(USARTD0, pgm_read_byte(0x4000));
     5ee:	e0 e0       	ldi	r30, 0x00	; 0
     5f0:	f0 e4       	ldi	r31, 0x40	; 64
     5f2:	64 91       	lpm	r22, Z
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	99 e0       	ldi	r25, 0x09	; 9
     5f8:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z18USART_Transmit_HexR12USART_structc>
			//{
			//	USART0_Transmit_Number(pgm_read_byte(previousAddress-i));
			//}
		}
		// reset device
		resetDevice();
     5fc:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11resetDevicev>
	}
	else if(recordType == DATA_RECORD)
     600:	41 11       	cpse	r20, r1
     602:	5c c0       	rjmp	.+184    	; 0x6bc <_Z12programFlashhjhPh+0x13c>
	{
		USART_TransmitString(USARTD0, "\n\rtest3\n\r");
     604:	6d e2       	ldi	r22, 0x2D	; 45
     606:	70 e2       	ldi	r23, 0x20	; 32
     608:	80 ea       	ldi	r24, 0xA0	; 160
     60a:	99 e0       	ldi	r25, 0x09	; 9
     60c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     610:	ee 20       	and	r14, r14
     612:	09 f4       	brne	.+2      	; 0x616 <_Z12programFlashhjhPh+0x96>
     614:	53 c0       	rjmp	.+166    	; 0x6bc <_Z12programFlashhjhPh+0x13c>
     616:	f1 2c       	mov	r15, r1
		{
			// if address is in the another page than the last
			if(previousAddress/SPM_PAGESIZE != address/SPM_PAGESIZE)
     618:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
     61c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
     620:	ac 01       	movw	r20, r24
     622:	45 2f       	mov	r20, r21
     624:	55 27       	eor	r21, r21
     626:	46 95       	lsr	r20
     628:	9e 01       	movw	r18, r28
     62a:	23 2f       	mov	r18, r19
     62c:	33 27       	eor	r19, r19
     62e:	26 95       	lsr	r18
     630:	42 17       	cp	r20, r18
     632:	53 07       	cpc	r21, r19
     634:	41 f1       	breq	.+80     	; 0x686 <_Z12programFlashhjhPh+0x106>
			{
				// if this isn't the first byte
				if(!firstByte)
     636:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
     63a:	21 11       	cpse	r18, r1
     63c:	24 c0       	rjmp	.+72     	; 0x686 <_Z12programFlashhjhPh+0x106>
				{
					if(previousAddress < LOWER_ADDRESS_LIMIT || previousAddress > UPPER_ADDRESS_LIMIT)
     63e:	90 54       	subi	r25, 0x40	; 64
     640:	81 15       	cp	r24, r1
     642:	90 44       	sbci	r25, 0x40	; 64
     644:	b0 f0       	brcs	.+44     	; 0x672 <_Z12programFlashhjhPh+0xf2>
					{
						USART_TransmitString(USARTD0, "\n\rFlash address:");
     646:	63 e0       	ldi	r22, 0x03	; 3
     648:	70 e2       	ldi	r23, 0x20	; 32
     64a:	80 ea       	ldi	r24, 0xA0	; 160
     64c:	99 e0       	ldi	r25, 0x09	; 9
     64e:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
						USART_Transmit_Number(USARTD0, previousAddress);
     652:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     656:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     65a:	80 ea       	ldi	r24, 0xA0	; 160
     65c:	99 e0       	ldi	r25, 0x09	; 9
     65e:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>
						USART_TransmitString(USARTD0, " out of range\n\rResetting");
     662:	64 e1       	ldi	r22, 0x14	; 20
     664:	70 e2       	ldi	r23, 0x20	; 32
     666:	80 ea       	ldi	r24, 0xA0	; 160
     668:	99 e0       	ldi	r25, 0x09	; 9
     66a:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
						resetDevice();
     66e:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11resetDevicev>
					}
					
					SP_WaitForSPM();
     672:	0e 94 a7 01 	call	0x34e	; 0x34e <SP_WaitForSPM>
					SP_EraseWriteApplicationPage(previousAddress);
     676:	60 91 00 20 	lds	r22, 0x2000	; 0x802000 <__data_start>
     67a:	70 91 01 20 	lds	r23, 0x2001	; 0x802001 <__data_start+0x1>
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 80 01 	call	0x300	; 0x300 <SP_EraseWriteApplicationPage>
					//boot_page_write_safe(previousAddress);
				}
			}
			
			
			SP_WaitForSPM();
     686:	0e 94 a7 01 	call	0x34e	; 0x34e <SP_WaitForSPM>
			SP_LoadFlashWord(address%SPM_PAGESIZE, ((uint16_t)data[i+1] << 8 | data[i]));
     68a:	f8 01       	movw	r30, r16
     68c:	ef 0d       	add	r30, r15
     68e:	f1 1d       	adc	r31, r1
     690:	61 81       	ldd	r22, Z+1	; 0x01
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	76 2f       	mov	r23, r22
     696:	66 27       	eor	r22, r22
     698:	80 81       	ld	r24, Z
     69a:	68 2b       	or	r22, r24
     69c:	ce 01       	movw	r24, r28
     69e:	91 70       	andi	r25, 0x01	; 1
     6a0:	0e 94 75 01 	call	0x2ea	; 0x2ea <SP_LoadFlashWord>
						
			// put byte in temporary buffer
			//boot_page_fill_safe(address%SPM_PAGESIZE, ((uint16_t)data[i+1] << 8 | data[i]));
			
			// track the programming state
			firstByte = false;
     6a4:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <_ZZ12programFlashhjhPhE9firstByte>
			previousAddress = address;
     6a8:	c0 93 00 20 	sts	0x2000, r28	; 0x802000 <__data_start>
     6ac:	d0 93 01 20 	sts	0x2001, r29	; 0x802001 <__data_start+0x1>
			address+=2;
     6b0:	22 96       	adiw	r28, 0x02	; 2
	}
	else if(recordType == DATA_RECORD)
	{
		USART_TransmitString(USARTD0, "\n\rtest3\n\r");
		// loop through bytes
		for(uint8_t i = 0; i < byteCount; i+=2)
     6b2:	f3 94       	inc	r15
     6b4:	f3 94       	inc	r15
     6b6:	fe 14       	cp	r15, r14
     6b8:	08 f4       	brcc	.+2      	; 0x6bc <_Z12programFlashhjhPh+0x13c>
     6ba:	ae cf       	rjmp	.-164    	; 0x618 <_Z12programFlashhjhPh+0x98>
			previousAddress = address;
			address+=2;
		}
	}

}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	ef 90       	pop	r14
     6c8:	08 95       	ret

000006ca <_Z14programHexLinePc>:
		programHexLine(buff);
	}
}

void programHexLine(char* line)
{
     6ca:	2f 92       	push	r2
     6cc:	3f 92       	push	r3
     6ce:	4f 92       	push	r4
     6d0:	5f 92       	push	r5
     6d2:	6f 92       	push	r6
     6d4:	7f 92       	push	r7
     6d6:	8f 92       	push	r8
     6d8:	9f 92       	push	r9
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	61 97       	sbiw	r28, 0x11	; 17
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	5c 01       	movw	r10, r24
	cli();
     6fa:	f8 94       	cli
	// parse the line
	uint8_t byteCount	= hexToByte(line[1], line[2]);
     6fc:	fc 01       	movw	r30, r24
     6fe:	62 81       	ldd	r22, Z+2	; 0x02
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	0e 94 a8 02 	call	0x550	; 0x550 <_Z9hexToBytecc>
     706:	68 2e       	mov	r6, r24
	uint8_t address_H	= hexToByte(line[3], line[4]);
     708:	f5 01       	movw	r30, r10
     70a:	64 81       	ldd	r22, Z+4	; 0x04
     70c:	83 81       	ldd	r24, Z+3	; 0x03
     70e:	0e 94 a8 02 	call	0x550	; 0x550 <_Z9hexToBytecc>
     712:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t address_L	= hexToByte(line[5], line[6]);
     714:	f5 01       	movw	r30, r10
     716:	66 81       	ldd	r22, Z+6	; 0x06
     718:	85 81       	ldd	r24, Z+5	; 0x05
     71a:	0e 94 a8 02 	call	0x550	; 0x550 <_Z9hexToBytecc>
     71e:	58 2e       	mov	r5, r24
	uint8_t recordType	= hexToByte(line[7], line[8]);
     720:	f5 01       	movw	r30, r10
     722:	60 85       	ldd	r22, Z+8	; 0x08
     724:	87 81       	ldd	r24, Z+7	; 0x07
     726:	0e 94 a8 02 	call	0x550	; 0x550 <_Z9hexToBytecc>
     72a:	48 2e       	mov	r4, r24
	
	USART_Transmit_Number(USARTD0,byteCount);
     72c:	86 2c       	mov	r8, r6
     72e:	91 2c       	mov	r9, r1
     730:	b4 01       	movw	r22, r8
     732:	80 ea       	ldi	r24, 0xA0	; 160
     734:	99 e0       	ldi	r25, 0x09	; 9
     736:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_Transmit_Number(USARTD0,address_H);
     73a:	f9 89       	ldd	r31, Y+17	; 0x11
     73c:	2f 2e       	mov	r2, r31
     73e:	31 2c       	mov	r3, r1
     740:	b1 01       	movw	r22, r2
     742:	80 ea       	ldi	r24, 0xA0	; 160
     744:	99 e0       	ldi	r25, 0x09	; 9
     746:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_Transmit_Number(USARTD0,address_L);
     74a:	65 2d       	mov	r22, r5
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	80 ea       	ldi	r24, 0xA0	; 160
     750:	99 e0       	ldi	r25, 0x09	; 9
     752:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>
	USART_Transmit_Number(USARTD0,recordType);
     756:	64 2d       	mov	r22, r4
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 ea       	ldi	r24, 0xA0	; 160
     75c:	99 e0       	ldi	r25, 0x09	; 9
     75e:	0e 94 4b 07 	call	0xe96	; 0xe96 <_Z21USART_Transmit_NumberR12USART_structi>

	uint8_t checksum = byteCount + address_H + address_L + recordType;
     762:	79 88       	ldd	r7, Y+17	; 0x11
     764:	76 0c       	add	r7, r6
     766:	75 0c       	add	r7, r5
     768:	74 0c       	add	r7, r4
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     76a:	66 20       	and	r6, r6
     76c:	e9 f0       	breq	.+58     	; 0x7a8 <_Z14programHexLinePc+0xde>
     76e:	85 01       	movw	r16, r10
     770:	07 5f       	subi	r16, 0xF7	; 247
     772:	1f 4f       	sbci	r17, 0xFF	; 255
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	7c 01       	movw	r14, r24
     77a:	cc 24       	eor	r12, r12
     77c:	ca 94       	dec	r12
     77e:	c6 0c       	add	r12, r6
     780:	d1 2c       	mov	r13, r1
     782:	9f ef       	ldi	r25, 0xFF	; 255
     784:	c9 1a       	sub	r12, r25
     786:	d9 0a       	sbc	r13, r25
     788:	ce 0c       	add	r12, r14
     78a:	df 1c       	adc	r13, r15
	{
		uint8_t charOffset = 9+2*i;
		uint8_t byte = hexToByte(line[charOffset], line[charOffset+1]);
     78c:	f8 01       	movw	r30, r16
     78e:	61 81       	ldd	r22, Z+1	; 0x01
     790:	80 81       	ld	r24, Z
     792:	0e 94 a8 02 	call	0x550	; 0x550 <_Z9hexToBytecc>
		checksum += byte;
     796:	78 0e       	add	r7, r24
		data[i] = byte;
     798:	f7 01       	movw	r30, r14
     79a:	81 93       	st	Z+, r24
     79c:	7f 01       	movw	r14, r30
     79e:	0e 5f       	subi	r16, 0xFE	; 254
     7a0:	1f 4f       	sbci	r17, 0xFF	; 255

	uint8_t checksum = byteCount + address_H + address_L + recordType;
	uint8_t data[16];

	// loop through data bytes
	for(uint8_t i = 0; i < byteCount; i++)
     7a2:	ec 15       	cp	r30, r12
     7a4:	fd 05       	cpc	r31, r13
     7a6:	91 f7       	brne	.-28     	; 0x78c <_Z14programHexLinePc+0xc2>
		checksum += byte;
		data[i] = byte;
		
	}

	USART_TransmitString(USARTD0, "\n\rtest2\n\r");
     7a8:	67 e3       	ldi	r22, 0x37	; 55
     7aa:	70 e2       	ldi	r23, 0x20	; 32
     7ac:	80 ea       	ldi	r24, 0xA0	; 160
     7ae:	99 e0       	ldi	r25, 0x09	; 9
     7b0:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	
	checksum += hexToByte(line[9+2*byteCount],line[10+2*byteCount]);
     7b4:	f4 01       	movw	r30, r8
     7b6:	35 96       	adiw	r30, 0x05	; 5
     7b8:	ee 0f       	add	r30, r30
     7ba:	ff 1f       	adc	r31, r31
     7bc:	ea 0d       	add	r30, r10
     7be:	fb 1d       	adc	r31, r11
     7c0:	df 01       	movw	r26, r30
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	60 81       	ld	r22, Z
     7c6:	8c 91       	ld	r24, X
     7c8:	0e 94 a8 02 	call	0x550	; 0x550 <_Z9hexToBytecc>
	
	if(checksum != 0)
     7cc:	87 0d       	add	r24, r7
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <_Z14programHexLinePc+0x116>
	{
		USART_TransmitString(USARTD0, "\n\rChecksum error while receiving program\n\rResetting");
     7d0:	61 e4       	ldi	r22, 0x41	; 65
     7d2:	70 e2       	ldi	r23, 0x20	; 32
     7d4:	80 ea       	ldi	r24, 0xA0	; 160
     7d6:	99 e0       	ldi	r25, 0x09	; 9
     7d8:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		resetDevice();
     7dc:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11resetDevicev>
		return;
	}
	
	USART_TransmitString(USARTD0, "\r\nReceived: ");
     7e0:	65 e7       	ldi	r22, 0x75	; 117
     7e2:	70 e2       	ldi	r23, 0x20	; 32
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	99 e0       	ldi	r25, 0x09	; 9
     7e8:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit(USARTD0, line, 11+2*byteCount);
     7ec:	46 2d       	mov	r20, r6
     7ee:	44 0f       	add	r20, r20
     7f0:	45 5f       	subi	r20, 0xF5	; 245
     7f2:	b5 01       	movw	r22, r10
     7f4:	80 ea       	ldi	r24, 0xA0	; 160
     7f6:	99 e0       	ldi	r25, 0x09	; 9
     7f8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_Z14USART_TransmitR12USART_structPKch>
	USART_TransmitString(USARTD0, "\r\n");
     7fc:	62 e8       	ldi	r22, 0x82	; 130
     7fe:	70 e2       	ldi	r23, 0x20	; 32
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	USART_Transmit_Hex(USARTD0, address_H);
     808:	69 89       	ldd	r22, Y+17	; 0x11
     80a:	80 ea       	ldi	r24, 0xA0	; 160
     80c:	99 e0       	ldi	r25, 0x09	; 9
     80e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z18USART_Transmit_HexR12USART_structc>
	USART_Transmit_Hex(USARTD0, address_L);
     812:	65 2d       	mov	r22, r5
     814:	80 ea       	ldi	r24, 0xA0	; 160
     816:	99 e0       	ldi	r25, 0x09	; 9
     818:	0e 94 2e 07 	call	0xe5c	; 0xe5c <_Z18USART_Transmit_HexR12USART_structc>
	USART_TransmitString(USARTD0, "\r\n");
     81c:	62 e8       	ldi	r22, 0x82	; 130
     81e:	70 e2       	ldi	r23, 0x20	; 32
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	99 e0       	ldi	r25, 0x09	; 9
     824:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	//USART0_Transmit(data);
	programFlash(byteCount, ((uint16_t)(address_H << 8)) | address_L, recordType, data);
     828:	72 2d       	mov	r23, r2
     82a:	66 27       	eor	r22, r22
     82c:	65 29       	or	r22, r5
     82e:	9e 01       	movw	r18, r28
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	44 2d       	mov	r20, r4
     836:	86 2d       	mov	r24, r6
     838:	0e 94 c0 02 	call	0x580	; 0x580 <_Z12programFlashhjhPh>
}
     83c:	61 96       	adiw	r28, 0x11	; 17
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	de bf       	out	0x3e, r29	; 62
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	3f 90       	pop	r3
     864:	2f 90       	pop	r2
     866:	08 95       	ret

00000868 <_Z17receiveHexFileUSBv>:
		break;
	}
}

void receiveHexFileUSB()
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	e2 97       	sbiw	r28, 0x32	; 50
     872:	cd bf       	out	0x3d, r28	; 61
     874:	de bf       	out	0x3e, r29	; 62
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	7c 01       	movw	r14, r24
     87c:	6e 01       	movw	r12, r28
     87e:	93 e3       	ldi	r25, 0x33	; 51
     880:	c9 0e       	add	r12, r25
     882:	d1 1c       	adc	r13, r1
     884:	87 01       	movw	r16, r14
	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
		{
			char c = USART_Receive(USARTD0);
     886:	80 ea       	ldi	r24, 0xA0	; 160
     888:	99 e0       	ldi	r25, 0x09	; 9
     88a:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z13USART_ReceiveR12USART_struct>
     88e:	98 01       	movw	r18, r16
     890:	2e 19       	sub	r18, r14
     892:	3f 09       	sbc	r19, r15
			buff[i] = c;
     894:	f8 01       	movw	r30, r16
     896:	81 93       	st	Z+, r24
     898:	8f 01       	movw	r16, r30
			if(c == '\n')
     89a:	8a 30       	cpi	r24, 0x0A	; 10
     89c:	41 f4       	brne	.+16     	; 0x8ae <_Z17receiveHexFileUSBv+0x46>
			{
				buff[i+1] = '\0';
     89e:	e2 e0       	ldi	r30, 0x02	; 2
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ec 0f       	add	r30, r28
     8a4:	fd 1f       	adc	r31, r29
     8a6:	e2 0f       	add	r30, r18
     8a8:	f3 1f       	adc	r31, r19
     8aa:	10 82       	st	Z, r1
				break;
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <_Z17receiveHexFileUSBv+0x4c>
	char buff[50];

	while(true)
	{
		// receive a line of the hex file
		for(uint8_t i = 0; i < 50; i++)
     8ae:	ec 15       	cp	r30, r12
     8b0:	fd 05       	cpc	r31, r13
     8b2:	49 f7       	brne	.-46     	; 0x886 <_Z17receiveHexFileUSBv+0x1e>
				buff[i+1] = '\0';
				break;
			}
		}

		USART_TransmitString(USARTD0, buff);
     8b4:	b7 01       	movw	r22, r14
     8b6:	80 ea       	ldi	r24, 0xA0	; 160
     8b8:	99 e0       	ldi	r25, 0x09	; 9
     8ba:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		programHexLine(buff);
     8be:	c7 01       	movw	r24, r14
     8c0:	0e 94 65 03 	call	0x6ca	; 0x6ca <_Z14programHexLinePc>

void receiveHexFileUSB()
{
	char buff[50];

	while(true)
     8c4:	df cf       	rjmp	.-66     	; 0x884 <_Z17receiveHexFileUSBv+0x1c>

000008c6 <_Z10getUsbBootv>:
	asm("jmp 0x4000");

}

void getUsbBoot()
{
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	c0 e1       	ldi	r28, 0x10	; 16
     8d0:	d7 e2       	ldi	r29, 0x27	; 39
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
	{
		if(USART_Available(USARTD0))
     8d2:	80 ea       	ldi	r24, 0xA0	; 160
     8d4:	99 e0       	ldi	r25, 0x09	; 9
     8d6:	0e 94 ed 06 	call	0xdda	; 0xdda <_Z15USART_AvailableR12USART_struct>
     8da:	81 11       	cpse	r24, r1
     8dc:	0f c0       	rjmp	.+30     	; 0x8fc <_Z10getUsbBootv+0x36>
		{
			timeout = false;
			break;
		}
		if(TWI_RecievedAddress(TWIC))
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	94 e0       	ldi	r25, 0x04	; 4
     8e2:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z19TWI_RecievedAddressR10TWI_struct>
     8e6:	81 11       	cpse	r24, r1
     8e8:	25 c0       	rjmp	.+74     	; 0x934 <_Z10getUsbBootv+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ea:	8f e1       	ldi	r24, 0x1F	; 31
     8ec:	93 e0       	ldi	r25, 0x03	; 3
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <_Z10getUsbBootv+0x28>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <_Z10getUsbBootv+0x2e>
     8f4:	00 00       	nop
     8f6:	21 97       	sbiw	r28, 0x01	; 1
void getUsbBoot()
{
	bool timeout = true;
	char* check = "ABCD";

	for(uint16_t t = 0; t < 10000; t++)
     8f8:	61 f7       	brne	.-40     	; 0x8d2 <_Z10getUsbBootv+0xc>
     8fa:	1c c0       	rjmp	.+56     	; 0x934 <_Z10getUsbBootv+0x6e>
     8fc:	c5 e8       	ldi	r28, 0x85	; 133
     8fe:	d0 e2       	ldi	r29, 0x20	; 32
     900:	09 e8       	ldi	r16, 0x89	; 137
     902:	10 e2       	ldi	r17, 0x20	; 32
	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
	{
		char c = USART_Receive(USARTD0);
     904:	80 ea       	ldi	r24, 0xA0	; 160
     906:	99 e0       	ldi	r25, 0x09	; 9
     908:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z13USART_ReceiveR12USART_struct>
		//USART0_Transmit(c);
		if(c != check[i])
     90c:	99 91       	ld	r25, Y+
     90e:	89 13       	cpse	r24, r25
     910:	11 c0       	rjmp	.+34     	; 0x934 <_Z10getUsbBootv+0x6e>
	}

	if(timeout)
	return;

	for(uint8_t i = 0; i < 4; i++)
     912:	c0 17       	cp	r28, r16
     914:	d1 07       	cpc	r29, r17
     916:	b1 f7       	brne	.-20     	; 0x904 <_Z10getUsbBootv+0x3e>
		if(c != check[i])
		return;
	}


	switch(USART_Receive(USARTD0))
     918:	80 ea       	ldi	r24, 0xA0	; 160
     91a:	99 e0       	ldi	r25, 0x09	; 9
     91c:	0e 94 ca 06 	call	0xd94	; 0xd94 <_Z13USART_ReceiveR12USART_struct>
     920:	85 35       	cpi	r24, 0x55	; 85
     922:	41 f4       	brne	.+16     	; 0x934 <_Z10getUsbBootv+0x6e>
	{
		case 'U':
		// upload hex file via usb
		USART_TransmitString(USARTD0, "Receiving program via USB\n\r");
     924:	6a e8       	ldi	r22, 0x8A	; 138
     926:	70 e2       	ldi	r23, 0x20	; 32
     928:	80 ea       	ldi	r24, 0xA0	; 160
     92a:	99 e0       	ldi	r25, 0x09	; 9
     92c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		receiveHexFileUSB();
     930:	0e 94 34 04 	call	0x868	; 0x868 <_Z17receiveHexFileUSBv>
		break;
		default:
		break;
	}
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	0f 91       	pop	r16
     93c:	08 95       	ret

0000093e <_Z17receiveHexFileI2Cv>:
		programHexLine(buff);
	}
}

void receiveHexFileI2C()
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	e2 97       	sbiw	r28, 0x32	; 50
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	de bf       	out	0x3e, r29	; 62
	char buff[50];

	while(true)
	{
		USART_TransmitString(USARTD0, "\n\rtest4\n\r");
     94c:	66 ea       	ldi	r22, 0xA6	; 166
     94e:	70 e2       	ldi	r23, 0x20	; 32
     950:	80 ea       	ldi	r24, 0xA0	; 160
     952:	99 e0       	ldi	r25, 0x09	; 9
     954:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		// receive a line of the hex file
		TWI_ReceivePacket(TWIC,(uint8_t*)buff, 50);
     958:	42 e3       	ldi	r20, 0x32	; 50
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	94 e0       	ldi	r25, 0x04	; 4
     964:	0e 94 48 05 	call	0xa90	; 0xa90 <_Z17TWI_ReceivePacketR10TWI_structPhh>
		if(buff[0] != ':')
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	8a 33       	cpi	r24, 0x3A	; 58
     96c:	39 f0       	breq	.+14     	; 0x97c <_Z17receiveHexFileI2Cv+0x3e>
		{
			USART_TransmitString(USARTD0,"Error while receiving program");
     96e:	60 eb       	ldi	r22, 0xB0	; 176
     970:	70 e2       	ldi	r23, 0x20	; 32
     972:	80 ea       	ldi	r24, 0xA0	; 160
     974:	99 e0       	ldi	r25, 0x09	; 9
     976:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
			return;
     97a:	0b c0       	rjmp	.+22     	; 0x992 <_Z17receiveHexFileI2Cv+0x54>
		}
		USART_TransmitString(USARTD0,"test");
     97c:	6e ec       	ldi	r22, 0xCE	; 206
     97e:	70 e2       	ldi	r23, 0x20	; 32
     980:	80 ea       	ldi	r24, 0xA0	; 160
     982:	99 e0       	ldi	r25, 0x09	; 9
     984:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		programHexLine(buff);
     988:	ce 01       	movw	r24, r28
     98a:	01 96       	adiw	r24, 0x01	; 1
     98c:	0e 94 65 03 	call	0x6ca	; 0x6ca <_Z14programHexLinePc>

void receiveHexFileI2C()
{
	char buff[50];

	while(true)
     990:	dd cf       	rjmp	.-70     	; 0x94c <_Z17receiveHexFileI2Cv+0xe>
			return;
		}
		USART_TransmitString(USARTD0,"test");
		programHexLine(buff);
	}
}
     992:	e2 96       	adiw	r28, 0x32	; 50
     994:	cd bf       	out	0x3d, r28	; 61
     996:	de bf       	out	0x3e, r29	; 62
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <main>:
bool logic_and(bool A, bool B);
bool logic_xor(bool A, bool B);


int main(void)
{
     99e:	ef 92       	push	r14
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
	TWI_init(TWIC,0x20);
     9a4:	60 e2       	ldi	r22, 0x20	; 32
     9a6:	80 e8       	ldi	r24, 0x80	; 128
     9a8:	94 e0       	ldi	r25, 0x04	; 4
     9aa:	0e 94 38 05 	call	0xa70	; 0xa70 <_Z8TWI_initR10TWI_structh>
	
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz crystal
     9ae:	e0 e5       	ldi	r30, 0x50	; 80
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	80 81       	ld	r24, Z
     9b4:	82 60       	ori	r24, 0x02	; 2
     9b6:	80 83       	st	Z, r24
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
     9b8:	e1 e5       	ldi	r30, 0x51	; 81
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	81 ff       	sbrs	r24, 1
     9c0:	fd cf       	rjmp	.-6      	; 0x9bc <main+0x1e>
	
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     9c2:	88 ed       	ldi	r24, 0xD8	; 216
     9c4:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
	
	PORTA_PIN0CTRL = (1<<PORT_OPC0_bp )|(1<<PORT_OPC1_bp);
     9cc:	88 e1       	ldi	r24, 0x18	; 24
     9ce:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
	//PORTA_INTCTRL = 0b00000011;
	//PORTA_INT0MASK |= (1<<0);
	
	PORTD_DIRSET = 0b00001000;
     9d2:	88 e0       	ldi	r24, 0x08	; 8
     9d4:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
	
	PORTH_DIR |= (1 << 4)|(1<<5);
     9d8:	e0 ee       	ldi	r30, 0xE0	; 224
     9da:	f6 e0       	ldi	r31, 0x06	; 6
     9dc:	80 81       	ld	r24, Z
     9de:	80 63       	ori	r24, 0x30	; 48
     9e0:	80 83       	st	Z, r24
	PORTH_OUTSET |= (1 << 4)|(1<<5);
     9e2:	e5 ee       	ldi	r30, 0xE5	; 229
     9e4:	f6 e0       	ldi	r31, 0x06	; 6
     9e6:	80 81       	ld	r24, Z
     9e8:	80 63       	ori	r24, 0x30	; 48
     9ea:	80 83       	st	Z, r24
	//PORTQ_PIN3CTRL |= (1<<PORT_ISC1_bp);
	
	
	USART_Init(USARTD0, 115200, 32000000, false);
     9ec:	e1 2c       	mov	r14, r1
     9ee:	00 e0       	ldi	r16, 0x00	; 0
     9f0:	18 e4       	ldi	r17, 0x48	; 72
     9f2:	28 ee       	ldi	r18, 0xE8	; 232
     9f4:	31 e0       	ldi	r19, 0x01	; 1
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	52 ec       	ldi	r21, 0xC2	; 194
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	80 ea       	ldi	r24, 0xA0	; 160
     a00:	99 e0       	ldi	r25, 0x09	; 9
     a02:	0e 94 ab 06 	call	0xd56	; 0xd56 <_Z10USART_InitR12USART_structmmb>
	USART_TransmitString(USARTD0, "\n\r------------------------------------------------------------\n\rReset\n\n\r");
     a06:	63 ed       	ldi	r22, 0xD3	; 211
     a08:	70 e2       	ldi	r23, 0x20	; 32
     a0a:	80 ea       	ldi	r24, 0xA0	; 160
     a0c:	99 e0       	ldi	r25, 0x09	; 9
     a0e:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
   
	
	getUsbBoot();
     a12:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z10getUsbBootv>
	
	if(TWI_RecievedAddress(TWIC))
     a16:	80 e8       	ldi	r24, 0x80	; 128
     a18:	94 e0       	ldi	r25, 0x04	; 4
     a1a:	0e 94 3c 05 	call	0xa78	; 0xa78 <_Z19TWI_RecievedAddressR10TWI_struct>
     a1e:	81 11       	cpse	r24, r1
	receiveHexFileI2C();
     a20:	0e 94 9f 04 	call	0x93e	; 0x93e <_Z17receiveHexFileI2Cv>
	
	
	// check if the blockly code area is empty
	USART_TransmitString(USARTD0, "Checking for program\n\r");
     a24:	6c e1       	ldi	r22, 0x1C	; 28
     a26:	71 e2       	ldi	r23, 0x21	; 33
     a28:	80 ea       	ldi	r24, 0xA0	; 160
     a2a:	99 e0       	ldi	r25, 0x09	; 9
     a2c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	
	if(pgm_read_byte(0x4000) == 0xFF)
     a30:	e0 e0       	ldi	r30, 0x00	; 0
     a32:	f0 e4       	ldi	r31, 0x40	; 64
     a34:	e4 91       	lpm	r30, Z
     a36:	ef 3f       	cpi	r30, 0xFF	; 255
     a38:	69 f4       	brne	.+26     	; 0xa54 <main+0xb6>
	{
		USART_TransmitString(USARTD0, "No program found\n\r");
     a3a:	63 e3       	ldi	r22, 0x33	; 51
     a3c:	71 e2       	ldi	r23, 0x21	; 33
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	99 e0       	ldi	r25, 0x09	; 9
     a42:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		
		while(true)
		{
			//USART0_TransmitString("test");
			if (!PORTA_IN &(1<<0))
     a46:	e8 e0       	ldi	r30, 0x08	; 8
     a48:	f6 e0       	ldi	r31, 0x06	; 6
     a4a:	80 81       	ld	r24, Z
     a4c:	81 11       	cpse	r24, r1
     a4e:	fd cf       	rjmp	.-6      	; 0xa4a <main+0xac>
			{
				resetDevice();
     a50:	0e 94 b9 02 	call	0x572	; 0x572 <_Z11resetDevicev>
			}
		}
	}

	// run the blockly
	USART_TransmitString(USARTD0, "Starting your program\n\r");
     a54:	66 e4       	ldi	r22, 0x46	; 70
     a56:	71 e2       	ldi	r23, 0x21	; 33
     a58:	80 ea       	ldi	r24, 0xA0	; 160
     a5a:	99 e0       	ldi	r25, 0x09	; 9
     a5c:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	asm("jmp 0x4000");
     a60:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__stack+0x1>

}
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <_Z8TWI_initR10TWI_structh>:
#include "TWI.h"
#include "UART.h"

void TWI_init(TWI_struct &TWI, uint8_t address)
{
	TWI.SLAVE.CTRLA = (1<<TWI_SLAVE_DIEN_bp)|(1<<TWI_SLAVE_APIEN_bp)|(1<<TWI_SLAVE_ENABLE_bp)|(1<<TWI_SLAVE_PMEN_bp)|(1<<TWI_SLAVE_PIEN_bp);
     a70:	2e e3       	ldi	r18, 0x3E	; 62
     a72:	fc 01       	movw	r30, r24
     a74:	20 87       	std	Z+8, r18	; 0x08
     a76:	08 95       	ret

00000a78 <_Z19TWI_RecievedAddressR10TWI_struct>:


bool TWI_RecievedAddress(TWI_struct &TWI)
{	
	//valid address received and write operation
	return ((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_APIF_bp)) && !(TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)));
     a78:	fc 01       	movw	r30, r24
     a7a:	22 85       	ldd	r18, Z+10	; 0x0a
     a7c:	26 ff       	sbrs	r18, 6
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <_Z19TWI_RecievedAddressR10TWI_struct+0x14>
     a80:	82 85       	ldd	r24, Z+10	; 0x0a
     a82:	86 95       	lsr	r24
     a84:	81 70       	andi	r24, 0x01	; 1
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	89 27       	eor	r24, r25
     a8a:	08 95       	ret
     a8c:	80 e0       	ldi	r24, 0x00	; 0
}
     a8e:	08 95       	ret

00000a90 <_Z17TWI_ReceivePacketR10TWI_structPhh>:


bool TWI_ReceivePacket(TWI_struct &TWI, uint8_t* buffer, uint8_t bufferLength)
{
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
     a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa0:	96 ff       	sbrs	r25, 6
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <_Z17TWI_ReceivePacketR10TWI_structPhh+0xe>
	
	//check if write operation
	if((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)))
     aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
     aa6:	81 fd       	sbrc	r24, 1
     aa8:	2f c0       	rjmp	.+94     	; 0xb08 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x78>
     aaa:	7b 01       	movw	r14, r22
		return false;
	
	//acknowledge and wait for next package
	TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp);
     aac:	89 85       	ldd	r24, Y+9	; 0x09
     aae:	83 60       	ori	r24, 0x03	; 3
     ab0:	89 87       	std	Y+9, r24	; 0x09
	
	for (uint8_t i = 0;i<bufferLength;i++)
     ab2:	44 23       	and	r20, r20
     ab4:	21 f1       	breq	.+72     	; 0xafe <_Z17TWI_ReceivePacketR10TWI_structPhh+0x6e>
     ab6:	8b 01       	movw	r16, r22
     ab8:	41 50       	subi	r20, 0x01	; 1
     aba:	84 2f       	mov	r24, r20
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	e8 0e       	add	r14, r24
     ac2:	f9 1e       	adc	r15, r25
	{	
		USART_TransmitString(USARTD0, "\n\r7\n\r");
     ac4:	6e e5       	ldi	r22, 0x5E	; 94
     ac6:	71 e2       	ldi	r23, 0x21	; 33
     ac8:	80 ea       	ldi	r24, 0xA0	; 160
     aca:	99 e0       	ldi	r25, 0x09	; 9
     acc:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
		//wait for received interrupt
		while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_DIF_bp)||TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
     ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ad2:	88 23       	and	r24, r24
     ad4:	dc f0       	brlt	.+54     	; 0xb0c <_Z17TWI_ReceivePacketR10TWI_structPhh+0x7c>
     ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ad8:	86 ff       	sbrs	r24, 6
     ada:	fa cf       	rjmp	.-12     	; 0xad0 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x40>
     adc:	17 c0       	rjmp	.+46     	; 0xb0c <_Z17TWI_ReceivePacketR10TWI_structPhh+0x7c>

		if(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp))
			break;
			
		//receive data and acknowledge		
		buffer[i] = TWI.SLAVE.DATA;
     ade:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae0:	f8 01       	movw	r30, r16
     ae2:	d8 01       	movw	r26, r16
     ae4:	8d 93       	st	X+, r24
     ae6:	8d 01       	movw	r16, r26
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp);
     ae8:	89 85       	ldd	r24, Y+9	; 0x09
     aea:	83 60       	ori	r24, 0x03	; 3
     aec:	89 87       	std	Y+9, r24	; 0x09
		USART_Transmit(USARTD0, buffer[i]);
     aee:	60 81       	ld	r22, Z
     af0:	80 ea       	ldi	r24, 0xA0	; 160
     af2:	99 e0       	ldi	r25, 0x09	; 9
     af4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
		return false;
	
	//acknowledge and wait for next package
	TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp);
	
	for (uint8_t i = 0;i<bufferLength;i++)
     af8:	0e 15       	cp	r16, r14
     afa:	1f 05       	cpc	r17, r15
     afc:	19 f7       	brne	.-58     	; 0xac4 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x34>
		//receive data and acknowledge		
		buffer[i] = TWI.SLAVE.DATA;
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp);
		USART_Transmit(USARTD0, buffer[i]);
	}
	TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp);
     afe:	8a 85       	ldd	r24, Y+10	; 0x0a
     b00:	80 6c       	ori	r24, 0xC0	; 192
     b02:	8a 87       	std	Y+10, r24	; 0x0a
	return true;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x84>
	//wait for address received interrupt
	while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));
	
	//check if write operation
	if((TWI.SLAVE.STATUS &(1<<TWI_SLAVE_DIR_bp)))
		return false;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <_Z17TWI_ReceivePacketR10TWI_structPhh+0x84>
	{	
		USART_TransmitString(USARTD0, "\n\r7\n\r");
		//wait for received interrupt
		while(!(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_DIF_bp)||TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp)));

		if(TWI.SLAVE.STATUS &(1<< TWI_SLAVE_APIF_bp))
     b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b0e:	86 ff       	sbrs	r24, 6
     b10:	e6 cf       	rjmp	.-52     	; 0xade <_Z17TWI_ReceivePacketR10TWI_structPhh+0x4e>
     b12:	f5 cf       	rjmp	.-22     	; 0xafe <_Z17TWI_ReceivePacketR10TWI_structPhh+0x6e>
		TWI.SLAVE.CTRLB |= (1<<TWI_SLAVE_CMD0_bp)|(1<<TWI_SLAVE_CMD1_bp);
		USART_Transmit(USARTD0, buffer[i]);
	}
	TWI.SLAVE.STATUS |= (1<<TWI_SLAVE_DIF_bp)|(1<<TWI_SLAVE_APIF_bp);
	return true;
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	08 95       	ret

00000b22 <_Z10HexToASCIIh>:

#include "UART.h"

char HexToASCII(uint8_t i)
  {
	  i &= 0x0f;
     b22:	8f 70       	andi	r24, 0x0F	; 15
	  if(i > 9)
     b24:	8a 30       	cpi	r24, 0x0A	; 10
     b26:	10 f0       	brcs	.+4      	; 0xb2c <_Z10HexToASCIIh+0xa>
	  return i+'A'-10;
     b28:	89 5c       	subi	r24, 0xC9	; 201
     b2a:	08 95       	ret
	  else
	  return i+'0';
     b2c:	80 5d       	subi	r24, 0xD0	; 208
  }
     b2e:	08 95       	ret

00000b30 <_Z18USART_Set_BaudrateR12USART_structmm>:
 
 bool USART_Set_Baudrate(USART_struct &USART, uint32_t baud, uint32_t cpu_hz)
{
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	8f 92       	push	r8
     b3a:	9f 92       	push	r9
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	7c 01       	movw	r14, r24
     b4c:	4a 01       	movw	r8, r20
     b4e:	5b 01       	movw	r10, r22
     b50:	28 01       	movw	r4, r16
     b52:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
     b54:	fc 01       	movw	r30, r24
     b56:	84 81       	ldd	r24, Z+4	; 0x04
     b58:	82 ff       	sbrs	r24, 2
     b5a:	16 c0       	rjmp	.+44     	; 0xb88 <_Z18USART_Set_BaudrateR12USART_structmm+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     b5c:	d9 01       	movw	r26, r18
     b5e:	c8 01       	movw	r24, r16
     b60:	68 94       	set
     b62:	12 f8       	bld	r1, 2
     b64:	b6 95       	lsr	r27
     b66:	a7 95       	ror	r26
     b68:	97 95       	ror	r25
     b6a:	87 95       	ror	r24
     b6c:	16 94       	lsr	r1
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <_Z18USART_Set_BaudrateR12USART_structmm+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     b70:	b9 01       	movw	r22, r18
     b72:	a8 01       	movw	r20, r16
     b74:	03 2e       	mov	r0, r19
     b76:	36 e1       	ldi	r19, 0x16	; 22
     b78:	76 95       	lsr	r23
     b7a:	67 95       	ror	r22
     b7c:	57 95       	ror	r21
     b7e:	47 95       	ror	r20
     b80:	3a 95       	dec	r19
     b82:	d1 f7       	brne	.-12     	; 0xb78 <_Z18USART_Set_BaudrateR12USART_structmm+0x48>
     b84:	30 2d       	mov	r19, r0
     b86:	15 c0       	rjmp	.+42     	; 0xbb2 <_Z18USART_Set_BaudrateR12USART_structmm+0x82>

	if (!(USART.CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     b88:	d9 01       	movw	r26, r18
     b8a:	c8 01       	movw	r24, r16
     b8c:	68 94       	set
     b8e:	13 f8       	bld	r1, 3
     b90:	b6 95       	lsr	r27
     b92:	a7 95       	ror	r26
     b94:	97 95       	ror	r25
     b96:	87 95       	ror	r24
     b98:	16 94       	lsr	r1
     b9a:	d1 f7       	brne	.-12     	; 0xb90 <_Z18USART_Set_BaudrateR12USART_structmm+0x60>
		min_rate /= 2;
     b9c:	b9 01       	movw	r22, r18
     b9e:	a8 01       	movw	r20, r16
     ba0:	03 2e       	mov	r0, r19
     ba2:	37 e1       	ldi	r19, 0x17	; 23
     ba4:	76 95       	lsr	r23
     ba6:	67 95       	ror	r22
     ba8:	57 95       	ror	r21
     baa:	47 95       	ror	r20
     bac:	3a 95       	dec	r19
     bae:	d1 f7       	brne	.-12     	; 0xba4 <_Z18USART_Set_BaudrateR12USART_structmm+0x74>
     bb0:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     bb2:	88 15       	cp	r24, r8
     bb4:	99 05       	cpc	r25, r9
     bb6:	aa 05       	cpc	r26, r10
     bb8:	bb 05       	cpc	r27, r11
     bba:	08 f4       	brcc	.+2      	; 0xbbe <_Z18USART_Set_BaudrateR12USART_structmm+0x8e>
     bbc:	a6 c0       	rjmp	.+332    	; 0xd0a <_Z18USART_Set_BaudrateR12USART_structmm+0x1da>
     bbe:	84 16       	cp	r8, r20
     bc0:	95 06       	cpc	r9, r21
     bc2:	a6 06       	cpc	r10, r22
     bc4:	b7 06       	cpc	r11, r23
     bc6:	08 f4       	brcc	.+2      	; 0xbca <_Z18USART_Set_BaudrateR12USART_structmm+0x9a>
     bc8:	a2 c0       	rjmp	.+324    	; 0xd0e <_Z18USART_Set_BaudrateR12USART_structmm+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!(USART.CTRLB & USART_CLK2X_bm)) {
     bca:	f7 01       	movw	r30, r14
     bcc:	84 81       	ldd	r24, Z+4	; 0x04
     bce:	82 fd       	sbrc	r24, 2
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <_Z18USART_Set_BaudrateR12USART_structmm+0xaa>
		baud *= 2;
     bd2:	88 0c       	add	r8, r8
     bd4:	99 1c       	adc	r9, r9
     bd6:	aa 1c       	adc	r10, r10
     bd8:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	a5 01       	movw	r20, r10
     be0:	94 01       	movw	r18, r8
     be2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     be6:	2f 3f       	cpi	r18, 0xFF	; 255
     be8:	31 05       	cpc	r19, r1
     bea:	41 05       	cpc	r20, r1
     bec:	51 05       	cpc	r21, r1
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <_Z18USART_Set_BaudrateR12USART_structmm+0xc2>
     bf0:	90 c0       	rjmp	.+288    	; 0xd12 <_Z18USART_Set_BaudrateR12USART_structmm+0x1e2>
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	c9 ef       	ldi	r28, 0xF9	; 249
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <_Z18USART_Set_BaudrateR12USART_structmm+0xd8>
     bfe:	28 17       	cp	r18, r24
     c00:	39 07       	cpc	r19, r25
     c02:	4a 07       	cpc	r20, r26
     c04:	5b 07       	cpc	r21, r27
     c06:	58 f0       	brcs	.+22     	; 0xc1e <_Z18USART_Set_BaudrateR12USART_structmm+0xee>
			break;
		}

		limit <<= 1;
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	aa 1f       	adc	r26, r26
     c0e:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     c10:	cd 3f       	cpi	r28, 0xFD	; 253
     c12:	0c f4       	brge	.+2      	; 0xc16 <_Z18USART_Set_BaudrateR12USART_structmm+0xe6>
			limit |= 1;
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     c18:	c7 30       	cpi	r28, 0x07	; 7
     c1a:	89 f7       	brne	.-30     	; 0xbfe <_Z18USART_Set_BaudrateR12USART_structmm+0xce>
     c1c:	4f c0       	rjmp	.+158    	; 0xcbc <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     c1e:	cc 23       	and	r28, r28
     c20:	0c f0       	brlt	.+2      	; 0xc24 <_Z18USART_Set_BaudrateR12USART_structmm+0xf4>
     c22:	4c c0       	rjmp	.+152    	; 0xcbc <_Z18USART_Set_BaudrateR12USART_structmm+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     c24:	d5 01       	movw	r26, r10
     c26:	c4 01       	movw	r24, r8
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	aa 1f       	adc	r26, r26
     c2e:	bb 1f       	adc	r27, r27
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	aa 1f       	adc	r26, r26
     c36:	bb 1f       	adc	r27, r27
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	aa 1f       	adc	r26, r26
     c3e:	bb 1f       	adc	r27, r27
     c40:	48 1a       	sub	r4, r24
     c42:	59 0a       	sbc	r5, r25
     c44:	6a 0a       	sbc	r6, r26
     c46:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     c48:	ce 3f       	cpi	r28, 0xFE	; 254
     c4a:	f4 f4       	brge	.+60     	; 0xc88 <_Z18USART_Set_BaudrateR12USART_structmm+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     c4c:	8d ef       	ldi	r24, 0xFD	; 253
     c4e:	9f ef       	ldi	r25, 0xFF	; 255
     c50:	8c 1b       	sub	r24, r28
     c52:	91 09       	sbc	r25, r1
     c54:	c7 fd       	sbrc	r28, 7
     c56:	93 95       	inc	r25
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <_Z18USART_Set_BaudrateR12USART_structmm+0x132>
     c5a:	44 0c       	add	r4, r4
     c5c:	55 1c       	adc	r5, r5
     c5e:	66 1c       	adc	r6, r6
     c60:	77 1c       	adc	r7, r7
     c62:	8a 95       	dec	r24
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <_Z18USART_Set_BaudrateR12USART_structmm+0x12a>
     c66:	d5 01       	movw	r26, r10
     c68:	c4 01       	movw	r24, r8
     c6a:	b6 95       	lsr	r27
     c6c:	a7 95       	ror	r26
     c6e:	97 95       	ror	r25
     c70:	87 95       	ror	r24
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	64 0d       	add	r22, r4
     c78:	75 1d       	adc	r23, r5
     c7a:	86 1d       	adc	r24, r6
     c7c:	97 1d       	adc	r25, r7
     c7e:	a5 01       	movw	r20, r10
     c80:	94 01       	movw	r18, r8
     c82:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__udivmodsi4>
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
		} else {
			baud <<= exp + 3;
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	8c 0f       	add	r24, r28
     c8c:	a5 01       	movw	r20, r10
     c8e:	94 01       	movw	r18, r8
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <_Z18USART_Set_BaudrateR12USART_structmm+0x16a>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	8a 95       	dec	r24
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <_Z18USART_Set_BaudrateR12USART_structmm+0x162>
			div = (cpu_hz + baud / 2) / baud;
     c9e:	da 01       	movw	r26, r20
     ca0:	c9 01       	movw	r24, r18
     ca2:	b6 95       	lsr	r27
     ca4:	a7 95       	ror	r26
     ca6:	97 95       	ror	r25
     ca8:	87 95       	ror	r24
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	64 0d       	add	r22, r4
     cb0:	75 1d       	adc	r23, r5
     cb2:	86 1d       	adc	r24, r6
     cb4:	97 1d       	adc	r25, r7
     cb6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__udivmodsi4>
     cba:	1d c0       	rjmp	.+58     	; 0xcf6 <_Z18USART_Set_BaudrateR12USART_structmm+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     cbc:	83 e0       	ldi	r24, 0x03	; 3
     cbe:	8c 0f       	add	r24, r28
     cc0:	a5 01       	movw	r20, r10
     cc2:	94 01       	movw	r18, r8
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <_Z18USART_Set_BaudrateR12USART_structmm+0x19e>
     cc6:	22 0f       	add	r18, r18
     cc8:	33 1f       	adc	r19, r19
     cca:	44 1f       	adc	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	8a 95       	dec	r24
     cd0:	d2 f7       	brpl	.-12     	; 0xcc6 <_Z18USART_Set_BaudrateR12USART_structmm+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     cd2:	da 01       	movw	r26, r20
     cd4:	c9 01       	movw	r24, r18
     cd6:	b6 95       	lsr	r27
     cd8:	a7 95       	ror	r26
     cda:	97 95       	ror	r25
     cdc:	87 95       	ror	r24
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	64 0d       	add	r22, r4
     ce4:	75 1d       	adc	r23, r5
     ce6:	86 1d       	adc	r24, r6
     ce8:	97 1d       	adc	r25, r7
     cea:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__udivmodsi4>
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	31 09       	sbc	r19, r1
     cf2:	41 09       	sbc	r20, r1
     cf4:	51 09       	sbc	r21, r1
	}

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     cf6:	83 2f       	mov	r24, r19
     cf8:	8f 70       	andi	r24, 0x0F	; 15
     cfa:	c2 95       	swap	r28
     cfc:	c0 7f       	andi	r28, 0xF0	; 240
     cfe:	c8 2b       	or	r28, r24
     d00:	f7 01       	movw	r30, r14
     d02:	c7 83       	std	Z+7, r28	; 0x07
	USART.BAUDCTRLA = (uint8_t)div;
     d04:	26 83       	std	Z+6, r18	; 0x06

	return true;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	18 c0       	rjmp	.+48     	; 0xd3a <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	16 c0       	rjmp	.+44     	; 0xd3a <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <_Z18USART_Set_BaudrateR12USART_structmm+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     d12:	d5 01       	movw	r26, r10
     d14:	c4 01       	movw	r24, r8
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	aa 1f       	adc	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	aa 1f       	adc	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	aa 1f       	adc	r26, r26
     d2c:	bb 1f       	adc	r27, r27
     d2e:	48 1a       	sub	r4, r24
     d30:	59 0a       	sbc	r5, r25
     d32:	6a 0a       	sbc	r6, r26
     d34:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     d36:	c9 ef       	ldi	r28, 0xF9	; 249
     d38:	89 cf       	rjmp	.-238    	; 0xc4c <_Z18USART_Set_BaudrateR12USART_structmm+0x11c>

	USART.BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	USART.BAUDCTRLA = (uint8_t)div;

	return true;
}
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	5f 90       	pop	r5
     d52:	4f 90       	pop	r4
     d54:	08 95       	ret

00000d56 <_Z10USART_InitR12USART_structmmb>:
 
 
 void USART_Init(USART_struct &USART, uint32_t baud, uint32_t cpu_hz, bool doubleSpeed)
 {	
     d56:	0f 93       	push	r16
     d58:	1f 93       	push	r17
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	ec 01       	movw	r28, r24
	 //set TX pin to output
	// PORTC_DIR |= (1 << 3);
	 //PORTF_DIR |= (1 << 3);
	 /* Set baud rate */
	 USART_Set_Baudrate(USART, baud,cpu_hz);
     d60:	0e 94 98 05 	call	0xb30	; 0xb30 <_Z18USART_Set_BaudrateR12USART_structmm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d64:	2f ef       	ldi	r18, 0xFF	; 255
     d66:	89 ef       	ldi	r24, 0xF9	; 249
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	21 50       	subi	r18, 0x01	; 1
     d6c:	80 40       	sbci	r24, 0x00	; 0
     d6e:	90 40       	sbci	r25, 0x00	; 0
     d70:	e1 f7       	brne	.-8      	; 0xd6a <_Z10USART_InitR12USART_structmmb+0x14>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <_Z10USART_InitR12USART_structmmb+0x1e>
     d74:	00 00       	nop
	 _delay_ms(10); // wait for stable clock
	 USART.CTRLA = (1 << USART_RXCINTLVL1_bp)|(1 << USART_TXCINTLVL1_bp)|(1 << USART_DREINTLVL1_bp);
     d76:	8a e2       	ldi	r24, 0x2A	; 42
     d78:	8b 83       	std	Y+3, r24	; 0x03
	 USART.CTRLB = (1 << USART_RXEN_bp)|(1 << USART_TXEN_bp); 
     d7a:	88 e1       	ldi	r24, 0x18	; 24
     d7c:	8c 83       	std	Y+4, r24	; 0x04
 }
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <_Z14USART_TransmitR12USART_structc>:

void USART_Transmit(USART_struct &USART, const char data )
{
     d88:	fc 01       	movw	r30, r24
	/* Wait for empty transmit buffer */
	while ( !( USART.STATUS & (1<<USART_DREIF_bp)) );
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	95 ff       	sbrs	r25, 5
     d8e:	fd cf       	rjmp	.-6      	; 0xd8a <_Z14USART_TransmitR12USART_structc+0x2>
	/* Put data into buffer, sends the data */
	USART.DATA = data;
     d90:	60 83       	st	Z, r22
     d92:	08 95       	ret

00000d94 <_Z13USART_ReceiveR12USART_struct>:
}

char USART_Receive(USART_struct &USART)
{
     d94:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	while ( !(USART.STATUS & (1<<USART_RXCIF_bp)));
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	99 23       	and	r25, r25
     d9a:	ec f7       	brge	.-6      	; 0xd96 <_Z13USART_ReceiveR12USART_struct+0x2>
	/* Get and return received data from buffer */
	return USART.DATA;
     d9c:	80 81       	ld	r24, Z
}
     d9e:	08 95       	ret

00000da0 <_Z13USART_ReceiveR12USART_structjRb>:

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
     da0:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
     da2:	61 15       	cp	r22, r1
     da4:	71 05       	cpc	r23, r1
     da6:	a1 f0       	breq	.+40     	; 0xdd0 <_Z13USART_ReceiveR12USART_structjRb+0x30>
	{
		if(USART.STATUS & (1<<USART_RXCIF_bp))
     da8:	81 81       	ldd	r24, Z+1	; 0x01
     daa:	88 23       	and	r24, r24
     dac:	34 f0       	brlt	.+12     	; 0xdba <_Z13USART_ReceiveR12USART_structjRb+0x1a>
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <_Z13USART_ReceiveR12USART_structjRb+0x1e>
     db4:	91 81       	ldd	r25, Z+1	; 0x01
     db6:	99 23       	and	r25, r25
     db8:	14 f4       	brge	.+4      	; 0xdbe <_Z13USART_ReceiveR12USART_structjRb+0x1e>
		{
			/* Get and return received data from buffer */
			return USART.DATA;
     dba:	80 81       	ld	r24, Z
     dbc:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dbe:	8a e0       	ldi	r24, 0x0A	; 10
     dc0:	8a 95       	dec	r24
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <_Z13USART_ReceiveR12USART_structjRb+0x20>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <_Z13USART_ReceiveR12USART_structjRb+0x26>
}

char USART_Receive(USART_struct &USART, uint16_t timeout, bool& isTimedOut )
{
	/* Wait for data to be received */
	for(uint16_t i = 0; i < timeout; i++)
     dc6:	2f 5f       	subi	r18, 0xFF	; 255
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	62 17       	cp	r22, r18
     dcc:	73 07       	cpc	r23, r19
     dce:	91 f7       	brne	.-28     	; 0xdb4 <_Z13USART_ReceiveR12USART_structjRb+0x14>
		}

		_delay_us(1);
	}
	 
	isTimedOut = true;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	fa 01       	movw	r30, r20
     dd4:	80 83       	st	Z, r24
	return 0;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
}
     dd8:	08 95       	ret

00000dda <_Z15USART_AvailableR12USART_struct>:

 bool USART_Available(USART_struct &USART)
 {
	 return (USART.STATUS & (1<<USART_RXCIF_bp));
     dda:	fc 01       	movw	r30, r24
     ddc:	81 81       	ldd	r24, Z+1	; 0x01
 }
     dde:	88 1f       	adc	r24, r24
     de0:	88 27       	eor	r24, r24
     de2:	88 1f       	adc	r24, r24
     de4:	08 95       	ret

00000de6 <_Z20USART_TransmitStringR12USART_structPKc>:


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	fb 01       	movw	r30, r22
	 for(uint8_t i = 0; str[i]; i++)
     df2:	60 81       	ld	r22, Z
     df4:	66 23       	and	r22, r22
     df6:	69 f0       	breq	.+26     	; 0xe12 <_Z20USART_TransmitStringR12USART_structPKc+0x2c>
     df8:	8f 01       	movw	r16, r30
     dfa:	7c 01       	movw	r14, r24
     dfc:	c0 e0       	ldi	r28, 0x00	; 0
	 USART_Transmit(USART, str[i]);
     dfe:	c7 01       	movw	r24, r14
     e00:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_TransmitString(USART_struct &USART, const char* str)
 {
	 for(uint8_t i = 0; str[i]; i++)
     e04:	cf 5f       	subi	r28, 0xFF	; 255
     e06:	f8 01       	movw	r30, r16
     e08:	ec 0f       	add	r30, r28
     e0a:	f1 1d       	adc	r31, r1
     e0c:	60 81       	ld	r22, Z
     e0e:	61 11       	cpse	r22, r1
     e10:	f6 cf       	rjmp	.-20     	; 0xdfe <_Z20USART_TransmitStringR12USART_structPKc+0x18>
	 USART_Transmit(USART, str[i]);
 }
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	08 95       	ret

00000e1e <_Z14USART_TransmitR12USART_structPKch>:


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	 for(uint8_t i = 0; i < length; i++)
     e2a:	44 23       	and	r20, r20
     e2c:	81 f0       	breq	.+32     	; 0xe4e <_Z14USART_TransmitR12USART_structPKch+0x30>
     e2e:	7c 01       	movw	r14, r24
     e30:	eb 01       	movw	r28, r22
     e32:	41 50       	subi	r20, 0x01	; 1
     e34:	04 2f       	mov	r16, r20
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	0f 5f       	subi	r16, 0xFF	; 255
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	06 0f       	add	r16, r22
     e3e:	17 1f       	adc	r17, r23
	 USART_Transmit(USART, buff[i]);
     e40:	69 91       	ld	r22, Y+
     e42:	c7 01       	movw	r24, r14
     e44:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
 }


 void USART_Transmit(USART_struct &USART, const char* buff, uint8_t length)
 {
	 for(uint8_t i = 0; i < length; i++)
     e48:	c0 17       	cp	r28, r16
     e4a:	d1 07       	cpc	r29, r17
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <_Z14USART_TransmitR12USART_structPKch+0x22>
	 USART_Transmit(USART, buff[i]);
 }
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <_Z18USART_Transmit_HexR12USART_structc>:

 
 void USART_Transmit_Hex(USART_struct &USART, const char data )
 {
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	ec 01       	movw	r28, r24
     e64:	16 2f       	mov	r17, r22
	 USART_TransmitString(USART, "0x");
     e66:	64 e6       	ldi	r22, 0x64	; 100
     e68:	71 e2       	ldi	r23, 0x21	; 33
     e6a:	0e 94 f3 06 	call	0xde6	; 0xde6 <_Z20USART_TransmitStringR12USART_structPKc>
	 USART_Transmit(USART, HexToASCII(data>>4));
     e6e:	81 2f       	mov	r24, r17
     e70:	82 95       	swap	r24
     e72:	8f 70       	andi	r24, 0x0F	; 15
     e74:	0e 94 91 05 	call	0xb22	; 0xb22 <_Z10HexToASCIIh>
     e78:	68 2f       	mov	r22, r24
     e7a:	ce 01       	movw	r24, r28
     e7c:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
	 USART_Transmit(USART, HexToASCII(data));
     e80:	81 2f       	mov	r24, r17
     e82:	0e 94 91 05 	call	0xb22	; 0xb22 <_Z10HexToASCIIh>
     e86:	68 2f       	mov	r22, r24
     e88:	ce 01       	movw	r24, r28
     e8a:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
 }
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	08 95       	ret

00000e96 <_Z21USART_Transmit_NumberR12USART_structi>:


 void USART_Transmit_Number(USART_struct &USART, int16_t num)
 {
     e96:	0f 93       	push	r16
     e98:	1f 93       	push	r17
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	8c 01       	movw	r16, r24
     ea0:	eb 01       	movw	r28, r22
	 if(num < 0)
     ea2:	dd 23       	and	r29, r29
     ea4:	34 f4       	brge	.+12     	; 0xeb2 <_Z21USART_Transmit_NumberR12USART_structi+0x1c>
	 {
		 num = -num;
     ea6:	d1 95       	neg	r29
     ea8:	c1 95       	neg	r28
     eaa:	d1 09       	sbc	r29, r1
		 USART_Transmit(USART, '-');
     eac:	6d e2       	ldi	r22, 0x2D	; 45
     eae:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
	 }

	 bool started = false;
	 uint8_t ten_thousands	= (num/10000);
     eb2:	ce 01       	movw	r24, r28
     eb4:	60 e1       	ldi	r22, 0x10	; 16
     eb6:	77 e2       	ldi	r23, 0x27	; 39
     eb8:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
	 if(ten_thousands > 0)
     ebc:	66 23       	and	r22, r22
     ebe:	31 f0       	breq	.+12     	; 0xecc <_Z21USART_Transmit_NumberR12USART_structi+0x36>
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
     ec0:	60 5d       	subi	r22, 0xD0	; 208
     ec2:	c8 01       	movw	r24, r16
     ec4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
		 started = true;
     ec8:	21 e0       	ldi	r18, 0x01	; 1
     eca:	01 c0       	rjmp	.+2      	; 0xece <_Z21USART_Transmit_NumberR12USART_structi+0x38>
	 {
		 num = -num;
		 USART_Transmit(USART, '-');
	 }

	 bool started = false;
     ecc:	20 e0       	ldi	r18, 0x00	; 0
	 {
		 USART_Transmit(USART, '0'+ten_thousands);
		 started = true;
	 }

	 uint8_t thousands	= (num/1000)%10;
     ece:	ce 01       	movw	r24, r28
     ed0:	68 ee       	ldi	r22, 0xE8	; 232
     ed2:	73 e0       	ldi	r23, 0x03	; 3
     ed4:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     ed8:	cb 01       	movw	r24, r22
     eda:	6a e0       	ldi	r22, 0x0A	; 10
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
	 if(thousands > 0)
     ee2:	88 23       	and	r24, r24
     ee4:	81 f0       	breq	.+32     	; 0xf06 <_Z21USART_Transmit_NumberR12USART_structi+0x70>
	 {
		 USART_Transmit(USART, '0'+thousands);
     ee6:	60 e3       	ldi	r22, 0x30	; 48
     ee8:	68 0f       	add	r22, r24
     eea:	c8 01       	movw	r24, r16
     eec:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t hundreds	= (num/100)%10;
     ef0:	ce 01       	movw	r24, r28
     ef2:	64 e6       	ldi	r22, 0x64	; 100
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     efa:	cb 01       	movw	r24, r22
     efc:	6a e0       	ldi	r22, 0x0A	; 10
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     f04:	0e c0       	rjmp	.+28     	; 0xf22 <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
     f06:	ce 01       	movw	r24, r28
     f08:	64 e6       	ldi	r22, 0x64	; 100
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     f10:	cb 01       	movw	r24, r22
     f12:	6a e0       	ldi	r22, 0x0A	; 10
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
	 if(hundreds > 0 || started)
     f1a:	81 11       	cpse	r24, r1
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <_Z21USART_Transmit_NumberR12USART_structi+0x8c>
     f1e:	22 23       	and	r18, r18
     f20:	f9 f0       	breq	.+62     	; 0xf60 <_Z21USART_Transmit_NumberR12USART_structi+0xca>
	 {
		 USART_Transmit(USART, '0'+hundreds);
     f22:	60 e3       	ldi	r22, 0x30	; 48
     f24:	68 0f       	add	r22, r24
     f26:	c8 01       	movw	r24, r16
     f28:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	ce 01       	movw	r24, r28
     f32:	b9 01       	movw	r22, r18
     f34:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     f38:	cb 01       	movw	r24, r22
     f3a:	b9 01       	movw	r22, r18
     f3c:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
	 if(tens > 0 || started)
	 {
		 USART_Transmit(USART, '0'+tens);
     f40:	60 e3       	ldi	r22, 0x30	; 48
     f42:	68 0f       	add	r22, r24
     f44:	c8 01       	movw	r24, r16
     f46:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
     f4a:	ce 01       	movw	r24, r28
     f4c:	6a e0       	ldi	r22, 0x0A	; 10
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     f54:	60 e3       	ldi	r22, 0x30	; 48
     f56:	68 0f       	add	r22, r24
     f58:	c8 01       	movw	r24, r16
     f5a:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z14USART_TransmitR12USART_structc>
 }
     f5e:	0d c0       	rjmp	.+26     	; 0xf7a <_Z21USART_Transmit_NumberR12USART_structi+0xe4>
	 {
		 USART_Transmit(USART, '0'+hundreds);
		 started = true;
	 }

	 uint8_t tens		= (num/10)%10;
     f60:	2a e0       	ldi	r18, 0x0A	; 10
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	ce 01       	movw	r24, r28
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
     f6c:	cb 01       	movw	r24, r22
     f6e:	b9 01       	movw	r22, r18
     f70:	0e 94 c8 07 	call	0xf90	; 0xf90 <__divmodhi4>
	 if(tens > 0 || started)
     f74:	88 23       	and	r24, r24
     f76:	49 f3       	breq	.-46     	; 0xf4a <_Z21USART_Transmit_NumberR12USART_structi+0xb4>
     f78:	e3 cf       	rjmp	.-58     	; 0xf40 <_Z21USART_Transmit_NumberR12USART_structi+0xaa>
		 USART_Transmit(USART, '0'+tens);
		 started = true;
	 }
	 
	 USART_Transmit(USART, '0' + (num%10));
 }
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <_Z18USART_TransmitDoneR12USART_struct>:
 


bool USART_TransmitDone(USART_struct &USART)
{
	return USART.STATUS & (1<<USART_DREIF_bp);
     f84:	fc 01       	movw	r30, r24
     f86:	81 81       	ldd	r24, Z+1	; 0x01
     f88:	85 fb       	bst	r24, 5
     f8a:	88 27       	eor	r24, r24
     f8c:	80 f9       	bld	r24, 0
     f8e:	08 95       	ret

00000f90 <__divmodhi4>:
     f90:	97 fb       	bst	r25, 7
     f92:	07 2e       	mov	r0, r23
     f94:	16 f4       	brtc	.+4      	; 0xf9a <__divmodhi4+0xa>
     f96:	00 94       	com	r0
     f98:	07 d0       	rcall	.+14     	; 0xfa8 <__divmodhi4_neg1>
     f9a:	77 fd       	sbrc	r23, 7
     f9c:	09 d0       	rcall	.+18     	; 0xfb0 <__divmodhi4_neg2>
     f9e:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodhi4>
     fa2:	07 fc       	sbrc	r0, 7
     fa4:	05 d0       	rcall	.+10     	; 0xfb0 <__divmodhi4_neg2>
     fa6:	3e f4       	brtc	.+14     	; 0xfb6 <__divmodhi4_exit>

00000fa8 <__divmodhi4_neg1>:
     fa8:	90 95       	com	r25
     faa:	81 95       	neg	r24
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	08 95       	ret

00000fb0 <__divmodhi4_neg2>:
     fb0:	70 95       	com	r23
     fb2:	61 95       	neg	r22
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255

00000fb6 <__divmodhi4_exit>:
     fb6:	08 95       	ret

00000fb8 <__udivmodsi4>:
     fb8:	a1 e2       	ldi	r26, 0x21	; 33
     fba:	1a 2e       	mov	r1, r26
     fbc:	aa 1b       	sub	r26, r26
     fbe:	bb 1b       	sub	r27, r27
     fc0:	fd 01       	movw	r30, r26
     fc2:	0d c0       	rjmp	.+26     	; 0xfde <__udivmodsi4_ep>

00000fc4 <__udivmodsi4_loop>:
     fc4:	aa 1f       	adc	r26, r26
     fc6:	bb 1f       	adc	r27, r27
     fc8:	ee 1f       	adc	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	a2 17       	cp	r26, r18
     fce:	b3 07       	cpc	r27, r19
     fd0:	e4 07       	cpc	r30, r20
     fd2:	f5 07       	cpc	r31, r21
     fd4:	20 f0       	brcs	.+8      	; 0xfde <__udivmodsi4_ep>
     fd6:	a2 1b       	sub	r26, r18
     fd8:	b3 0b       	sbc	r27, r19
     fda:	e4 0b       	sbc	r30, r20
     fdc:	f5 0b       	sbc	r31, r21

00000fde <__udivmodsi4_ep>:
     fde:	66 1f       	adc	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	88 1f       	adc	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	1a 94       	dec	r1
     fe8:	69 f7       	brne	.-38     	; 0xfc4 <__udivmodsi4_loop>
     fea:	60 95       	com	r22
     fec:	70 95       	com	r23
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	bd 01       	movw	r22, r26
     ff8:	cf 01       	movw	r24, r30
     ffa:	08 95       	ret

00000ffc <__mulhisi3>:
     ffc:	0e 94 06 08 	call	0x100c	; 0x100c <__umulhisi3>
    1000:	33 23       	and	r19, r19
    1002:	12 f4       	brpl	.+4      	; 0x1008 <__mulhisi3+0xc>
    1004:	8a 1b       	sub	r24, r26
    1006:	9b 0b       	sbc	r25, r27
    1008:	0c 94 17 08 	jmp	0x102e	; 0x102e <__usmulhisi3_tail>

0000100c <__umulhisi3>:
    100c:	a2 9f       	mul	r26, r18
    100e:	b0 01       	movw	r22, r0
    1010:	b3 9f       	mul	r27, r19
    1012:	c0 01       	movw	r24, r0
    1014:	a3 9f       	mul	r26, r19
    1016:	70 0d       	add	r23, r0
    1018:	81 1d       	adc	r24, r1
    101a:	11 24       	eor	r1, r1
    101c:	91 1d       	adc	r25, r1
    101e:	b2 9f       	mul	r27, r18
    1020:	70 0d       	add	r23, r0
    1022:	81 1d       	adc	r24, r1
    1024:	11 24       	eor	r1, r1
    1026:	91 1d       	adc	r25, r1
    1028:	08 95       	ret

0000102a <__usmulhisi3>:
    102a:	0e 94 06 08 	call	0x100c	; 0x100c <__umulhisi3>

0000102e <__usmulhisi3_tail>:
    102e:	b7 ff       	sbrs	r27, 7
    1030:	08 95       	ret
    1032:	82 1b       	sub	r24, r18
    1034:	93 0b       	sbc	r25, r19
    1036:	08 95       	ret

00001038 <__udivmodhi4>:
    1038:	aa 1b       	sub	r26, r26
    103a:	bb 1b       	sub	r27, r27
    103c:	51 e1       	ldi	r21, 0x11	; 17
    103e:	07 c0       	rjmp	.+14     	; 0x104e <__udivmodhi4_ep>

00001040 <__udivmodhi4_loop>:
    1040:	aa 1f       	adc	r26, r26
    1042:	bb 1f       	adc	r27, r27
    1044:	a6 17       	cp	r26, r22
    1046:	b7 07       	cpc	r27, r23
    1048:	10 f0       	brcs	.+4      	; 0x104e <__udivmodhi4_ep>
    104a:	a6 1b       	sub	r26, r22
    104c:	b7 0b       	sbc	r27, r23

0000104e <__udivmodhi4_ep>:
    104e:	88 1f       	adc	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	5a 95       	dec	r21
    1054:	a9 f7       	brne	.-22     	; 0x1040 <__udivmodhi4_loop>
    1056:	80 95       	com	r24
    1058:	90 95       	com	r25
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	08 95       	ret

00001060 <_exit>:
    1060:	f8 94       	cli

00001062 <__stop_program>:
    1062:	ff cf       	rjmp	.-2      	; 0x1062 <__stop_program>
