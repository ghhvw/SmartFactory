"use strict";var instructions={adc:{name:"Add with Carry",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(7168,r[1],r[2])}},add:{name:"Add without Carry",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(3072,r[1],r[2])}},and:{name:"and",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(8192,r[1],r[2])}},andi:{name:"logical AND with immediate",words:1,params:2,getCode:function(e,r){return InstGen.immediateInst(28672,r[1],r[2])}},brbs:{name:"Branch if Bit in SREG is Set",words:1,params:2,getCode:function(e,r){return InstGen.sregBranchInstr(61440,r[2],r[1],e)}},breq:{name:"Branch if Equal",words:1,params:1,getCode:function(e,r){return InstGen.sregBranchInstr(61440,r[1],"1",e)}},brne:{name:"Branch if Equal",words:1,params:1,getCode:function(e,r){return InstGen.sregBranchInstr(62464,r[1],"1",e)}},cbi:{name:"Clear Bit in I/O Register",words:1,params:2,getCode:function(e,r){return InstGen.IoBitInst(38912,r[1],r[2])}},call:{name:"Long Call to a Subroutine",words:2,params:1,getCode:function(e,r){return InstGen.jumpInstr(2483945472,r[1])}},clr:{name:"Clear Register",words:1,params:1,getCode:function(e,r){return InstGen.twoRegInst(9216,r[1],r[1])}},dec:{name:"Decrement",words:1,params:1,getCode:function(e,r){return InstGen.singleRegInstr(37898,r[1])}},eor:{name:"Exclusive OR",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(9216,r[1],r[2])}},inc:{name:"Increment",words:1,params:1,getCode:function(e,r){return InstGen.singleRegInstr(37891,r[1])}},sub:{name:"subtract",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(6144,r[1],r[2])}},ldi:{name:"load immediate",words:1,params:2,getCode:function(e,r){return InstGen.immediateInst(57344,r[1],r[2])}},or:{name:"or",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(10240,r[1],r[2])}},in:{name:"Load an I/O Location to Register",words:1,params:2,getCode:function(e,r){return InstGen.ioInst(45056,r[1],r[2])}},out:{name:"Store Register to I/O Location",words:1,params:2,getCode:function(e,r){return InstGen.ioInst(47104,r[2],r[1])}},rjmp:{name:"relative jump",words:1,params:1,getCode:function(e,r){console.log("instruction rjmp not yet implemented")}},jmp:{name:"Jump",words:2,params:1,getCode:function(e,r){return InstGen.jumpInstr(2483814400,r[1])}},lds:{name:"Load Direct from Data Space",words:2,params:2,getCode:function(e,r){return InstGen.ramInstr(2415919104,r[2],r[1])}},mov:{name:"Copy Register",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(11264,r[1],r[2])}},movw:{name:"Copy Register Word",words:1,params:2,getCode:function(e,r){return InstGen.twoWordInst(256,r[1],r[2])}},pop:{name:"Pop Register from Stack",words:1,params:1,getCode:function(e,r){return InstGen.singleRegInstr(36879,r[1])}},push:{name:"Push Register on Stack",words:1,params:1,getCode:function(e,r){return InstGen.singleRegInstr(37391,r[1])}},sbc:{name:"Subtract with Carry",words:1,params:2,getCode:function(e,r){return InstGen.twoRegInst(2048,r[1],r[2])}},sbi:{name:"Set Bit in I/O Register",words:1,params:2,getCode:function(e,r){return InstGen.IoBitInst(39424,r[1],r[2])}},sbis:{name:"Skip if Bit in I/O Register is Set",words:1,params:2,getCode:function(e,r){return InstGen.IoBitInst(39680,r[1],r[2])}},sbic:{name:"Skip if Bit in I/O Register is Cleared",words:1,params:2,getCode:function(e,r){return InstGen.IoBitInst(39168,r[1],r[2])}},sts:{name:"Store Direct to Data Space",words:2,params:2,getCode:function(e,r){return InstGen.ramInstr(2449473536,r[1],r[2])}},tst:{name:"Test for Zero or Minus",words:1,params:1,getCode:function(e,r){return InstGen.twoRegInst(8192,r[1],r[1])}}},InstGen={twoRegInst:function(e,r,t){return r=parseRegister(r),t=parseRegister(t),(31<r||31<t)&&throwError("?","invalid register number"),e|=r<<4,wordToHexCode(e|=(16&t)<<5|15&t)},twoWordInst:function(e,r,t){return r=parseRegister(r),t=parseRegister(t),(31<r||31<t)&&throwError("?","invalid register number"),e|=r%30<<3,wordToHexCode(e|=(30&t)>>>1)},immediateInst:function(e,r,t){return(31<(r=parseRegister(r))||r<16)&&throwError("?","invalid register number"),e|=(15&r)<<4,wordToHexCode(e|=(240&(t=parseNumber(t)))<<4|15&t)},ioInst:function(e,r,t){return 31<(r=parseRegister(r))&&throwError("?","invalid register number"),63<(t=parseNumber(t))&&throwError("?","IO address out of range"),e|=r<<4,wordToHexCode(e|=(48&t)<<5|15&t)},IoBitInst:function(e,r,t){return(31<(r=parseNumber(r))||r<0)&&throwError("?","IO address out of range"),(7<(t=parseNumber(t))||t<0)&&throwError("?","bit number out of range"),e|=r<<3,wordToHexCode(e|=t)},jumpInstr:function(e,r){return(r=parseAddress(r))>Config.deviceMemory&&throwError("?","address out of range"),wordToHexCode((e|=(4063232&r)<<3|131071&r)>>>16)+wordToHexCode(65535&e)},sregBranchInstr:function(e,r,t,n){(7<(t=parseNumber(t))||t<0)&&throwError("?","number out of range");var s=(r=parseAddress(r))-n-1;return(63<s||s<-64)&&throwError("?","target address out of range"),s<0&&(console.log(s),s++),e|=t,wordToHexCode(e|=(s&=127)<<3)},singleRegInstr:function(e,r){return r.toLowerCase().startsWith("r")||throwError("?","unexpected token"),31<(r=parseInt(r.substring(1),10))&&throwError("?","invalid register number"),wordToHexCode(e|=r<<4)},twosComplement:function(e){return 0<=e?e:1+~e&255},ramInstr:function(e,r,t){return(31<(t=parseRegister(t))||t<0)&&throwError("?","invalid register number"),e|=65535&(r=parseRamAddress(r)),wordToHexCode((e|=(31&t)<<20)>>>16)+wordToHexCode(65535&e)}},Config={deviceMemory:32e3},startAddress=0,labels={},equs={},defs={};function assemble(e){labels={},equs={},defs={};return assembleLines(e.replace(/\r\n|\n\r|\n|\r/g,"\n").split("\n"))}function assembleLines(e){for(var r=startAddress,t=[],n=0,s=0;s<e.length;s++){var o=e[s],a=o.indexOf(";");if(0==a?o=e[s]="":0<a&&(e[s]=o.substring(0,a)),0<o.trim().length){var i=o.indexOf(":");if(0<i)labels[o.substring(0,i)]=r;else{var u=o.replace(","," ").trim().split(/\s+/g);if(u[0].startsWith(".")){var d=u[0].toLowerCase();if(".org"==d)r=parseNumber(u[1]);else if(".equ"==d){2<(m=(m=o.trim().substr(5).trim()).split("=")).length&&throwError("?","wrong syntax for .equ"),equs[m[0].trim()]=m[1].trim()}else if(".def"==d){var m;2<(m=(m=o.trim().substr(5).trim()).split("=")).length&&throwError("?","wrong syntax for .def"),defs[m[0].trim()]=m[1].trim()}}else{if(null==(p=instructions[u[0]]))return void throwError(s,"instruction "+u[0]+" does not exist");var g={};g.address=r,g.tokens=u,t.push(g),r+=p.words,n+=p.words}}}}r=0;var c=[];for(s=0;s<t.length;s++){var p;if((p=instructions[t[s].tokens[0]]).params!=t[s].tokens.length-1)return void throwError(s,"Wrong number of parameters. Expected "+p.params+" but received "+(t[s].tokens.length-1)+".");for(var f=p.getCode(t[s].address,t[s].tokens),w=0;w<p.words;w++){var I={};I.address=t[s].address+w,I.value=f.substr(4*w,4*w+4),c.push(I)}}var l=100*n/(Config.deviceMemory/2-blocklyAddress);return{hex:createHexFile(c),percentage:l}}function createHexFile(e){for(var r=":020000020000FC",t="",n=-100,s=0,o=0,a=0;a<e.length;a++){var i=e[a];(i.address!=n+1||16<=s)&&(0!=a&&(t=t.replace("XX",byteToHex(s)),r+="\n"+(t+=byteToHex(0-(o+=s)&255))),t=":XX"+wordToHexText(2*i.address)+"00",s=0,o=addBytesOfWord(2*i.address)),t+=i.value,o+=addBytesOfWord(parseInt(i.value,16)),n=i.address,s+=2}return""!=t&&(t=t.replace("XX",byteToHex(s)),r+="\n"+(t+=byteToHex(0-(o+=s)&255))),r+="\n:00000001FF"}function throwError(e,r){console.log(r)}function addBytesOfWord(e){return(255&e)+(e>>8&255)}var hexLookup=["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];function byteToHex(e){return hexLookup[(e&=255)>>>4]+hexLookup[15&e]}function wordToHexText(e){return hexLookup[15&e>>>12]+hexLookup[15&e>>>8]+hexLookup[15&e>>>4]+hexLookup[15&e]}function wordToHexCode(e){return hexLookup[15&e>>>4]+hexLookup[15&e]+hexLookup[15&e>>>12]+hexLookup[15&e>>>8]}function parseNumber(e){var r=parseInt(e);if(isNaN(r)){if(null==equs[e])return NaN;r=parseInt(equs[e])}return r}function parseRegister(e){return null!=defs[e]&&(e=defs[e]),e.toLowerCase().startsWith("r")||throwError("?","unexpected token"),31<(e=parseInt(e.substring(1),10))&&throwError("?","invalid register number"),e}function parseAddress(e){var r=parseInt(e);return isNaN(r)&&null==(r=labels[e])&&(r=equs[e]),r}function parseRamAddress(e){var r=parseInt(e);return isNaN(r)&&(r=equs[e]),r}function swapBytes(e){return 4!=e.length&&throwError("coding mistake: word must be 4 characters long."),e.substring(2,4)+e.substr(0,2)}